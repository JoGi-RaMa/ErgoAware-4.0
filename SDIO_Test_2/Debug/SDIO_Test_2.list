
SDIO_Test_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001555c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  080156f0  080156f0  000256f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015c58  08015c58  000302f8  2**0
                  CONTENTS
  4 .ARM          00000008  08015c58  08015c58  00025c58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015c60  08015c60  000302f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015c60  08015c60  00025c60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015c64  08015c64  00025c64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  08015c68  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302f8  2**0
                  CONTENTS
 10 .bss          00002558  200002f8  200002f8  000302f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002850  20002850  000302f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022cfa  00000000  00000000  0003036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000050dc  00000000  00000000  00053065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ea0  00000000  00000000  00058148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000017b5  00000000  00000000  00059fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00008b21  00000000  00000000  0005b79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00027ecd  00000000  00000000  000642be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d068f  00000000  00000000  0008c18b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000096e8  00000000  00000000  0015c81c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00165f04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f8 	.word	0x200002f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080156d4 	.word	0x080156d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002fc 	.word	0x200002fc
 80001cc:	080156d4 	.word	0x080156d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <LSM6DSOX_begin>:
int16_t data_gyr[3];
int16_t data_temp[1];


int LSM6DSOX_begin(I2C_HandleTypeDef* I2Cx, uint8_t imu_address) // Wake up the sensor boards -> Configurations
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
//  }
	
	// I2C_HandleTypeDef* I2CX = I2Cx;
	

  if (LSM6DSOX_readRegister8(I2Cx, imu_address, LSM6DSOX_WHO_AM_I_REG) != 0x6C) {
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	220f      	movs	r2, #15
 8000f54:	4619      	mov	r1, r3
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 f834 	bl	8000fc4 <LSM6DSOX_readRegister8>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b6c      	cmp	r3, #108	; 0x6c
 8000f60:	d006      	beq.n	8000f70 <LSM6DSOX_begin+0x2c>
    //end();
		// I2C_HandleTypeDef* I2Cx = I2Cx; // Resende
		LSM6DSOX_end(I2Cx, imu_address);
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	4619      	mov	r1, r3
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 f881 	bl	800106e <LSM6DSOX_end>
    return 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e01f      	b.n	8000fb0 <LSM6DSOX_begin+0x6c>
	// FASTSETTL_MODE_XL = 0 -> Enables LPF2 and fast-setting mode 
	// HP_SLOPE_XL_EN = 0
	// XL_FS_MODE = 0
	// LOW_PASS_ON_6D = 0
	// 00000000 -> 0x00
	LSM6DSOX_writeRegister8(I2Cx, imu_address, LSM6DSOX_CTRL8_XL, 0x00); // Resende
 8000f70:	78f9      	ldrb	r1, [r7, #3]
 8000f72:	2300      	movs	r3, #0
 8000f74:	2217      	movs	r2, #23
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 f856 	bl	8001028 <LSM6DSOX_writeRegister8>
	// For 16g: FS_XS = 01
	// For 4g: FS_XS = 10
	// For 2g: FS_XS = 00
	// LPF2_XL_EN = 0 -> disable LPF2 in acc acquisition
	// 10000100 -> 0x84
  LSM6DSOX_writeRegister8(I2Cx, imu_address, LSM6DSOX_CTRL1_XL, 0x84);
 8000f7c:	78f9      	ldrb	r1, [r7, #3]
 8000f7e:	2384      	movs	r3, #132	; 0x84
 8000f80:	2210      	movs	r2, #16
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 f850 	bl	8001028 <LSM6DSOX_writeRegister8>
	acc_FS = 16; //g
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <LSM6DSOX_begin+0x74>)
 8000f8a:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8000f8e:	601a      	str	r2, [r3, #0]
	// HPM_GN = 00 => (16mHz)
	// OIS_ON_EN = 0
	// USR_OFF_ON_OUT = 0
	// OIS_ON = 0
	// 00000000 -> 0x00
	LSM6DSOX_writeRegister8(I2Cx, imu_address, LSM6DSOX_CTRL7_G, 0x00);
 8000f90:	78f9      	ldrb	r1, [r7, #3]
 8000f92:	2300      	movs	r3, #0
 8000f94:	2216      	movs	r2, #22
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f000 f846 	bl	8001028 <LSM6DSOX_writeRegister8>
	// For 500dps: FS_G = 01
	// For 1000dps: FS_G = 10
	// For 2000dps: FS_G = 11
	// FS_125 = 0
	// 10001100 -> 0x8C
  LSM6DSOX_writeRegister8(I2Cx, imu_address, LSM6DSOX_CTRL2_G, 0x74);
 8000f9c:	78f9      	ldrb	r1, [r7, #3]
 8000f9e:	2374      	movs	r3, #116	; 0x74
 8000fa0:	2211      	movs	r2, #17
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f840 	bl	8001028 <LSM6DSOX_writeRegister8>
  gyr_FS = 500; // dps
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <LSM6DSOX_begin+0x78>)
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <LSM6DSOX_begin+0x7c>)
 8000fac:	601a      	str	r2, [r3, #0]

  return 1;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000314 	.word	0x20000314
 8000fbc:	20000318 	.word	0x20000318
 8000fc0:	43fa0000 	.word	0x43fa0000

08000fc4 <LSM6DSOX_readRegister8>:



uint8_t LSM6DSOX_readRegister8(I2C_HandleTypeDef* I2Cx, uint8_t imu_address, uint8_t reg) { // Altered to include various i2c peripheral addresses - Resende
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	70fb      	strb	r3, [r7, #3]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	70bb      	strb	r3, [r7, #2]

  uint8_t x;
  HAL_StatusTypeDef result;
	// I2C_HandleTypeDef* I2Cx = I2Cx; // TODO: Remove this after and see if it works - Resende
  
  result = HAL_I2C_Master_Transmit( I2Cx, (imu_address << 1), &reg, 1, 10 ); // Original device address - (LSM6DSOX_ADDRESS << 1) - Resende
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	b299      	uxth	r1, r3
 8000fdc:	1cba      	adds	r2, r7, #2
 8000fde:	230a      	movs	r3, #10
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f003 fa49 	bl	800447c <HAL_I2C_Master_Transmit>
 8000fea:	4603      	mov	r3, r0
 8000fec:	73fb      	strb	r3, [r7, #15]
  if( result != HAL_OK ) 
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <LSM6DSOX_readRegister8+0x34>
  {
    /*Failed to send register value to driver*/
    x = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73bb      	strb	r3, [r7, #14]
  }
  
  result = HAL_I2C_Master_Receive ( I2Cx, (imu_address << 1) , &x  , 1, 10 ); // TODO: Try to commute the least valued bit to 1 - read mode
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	b299      	uxth	r1, r3
 8001000:	f107 020e 	add.w	r2, r7, #14
 8001004:	230a      	movs	r3, #10
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f003 fb34 	bl	8004678 <HAL_I2C_Master_Receive>
 8001010:	4603      	mov	r3, r0
 8001012:	73fb      	strb	r3, [r7, #15]
  if( result != HAL_OK ) 
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <LSM6DSOX_readRegister8+0x5a>
  {
    /*Failed to send register value to driver*/
    x = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	73bb      	strb	r3, [r7, #14]
  }
  
  return x;
 800101e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <LSM6DSOX_writeRegister8>:


void LSM6DSOX_writeRegister8(I2C_HandleTypeDef* I2Cx, uint8_t imu_address, uint8_t reg, uint8_t val) { // Altered to include various i2c peripheral addresses - Resende
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af02      	add	r7, sp, #8
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	4608      	mov	r0, r1
 8001032:	4611      	mov	r1, r2
 8001034:	461a      	mov	r2, r3
 8001036:	4603      	mov	r3, r0
 8001038:	70fb      	strb	r3, [r7, #3]
 800103a:	460b      	mov	r3, r1
 800103c:	70bb      	strb	r3, [r7, #2]
 800103e:	4613      	mov	r3, r2
 8001040:	707b      	strb	r3, [r7, #1]
   
  HAL_StatusTypeDef result;
  // I2C_HandleTypeDef* I2Cx = I2Cx; // TODO: Remove this after and see if this works - Resende
  uint8_t data[2];
  
  data[0] = reg;
 8001042:	78bb      	ldrb	r3, [r7, #2]
 8001044:	733b      	strb	r3, [r7, #12]
  data[1] = val;
 8001046:	787b      	ldrb	r3, [r7, #1]
 8001048:	737b      	strb	r3, [r7, #13]
  
  result = HAL_I2C_Master_Transmit( I2Cx, (imu_address << 1), data, 2, 10 ); // Original device address - (LSM6DSOX_ADDRESS << 1) - Resende
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	b29b      	uxth	r3, r3
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	b299      	uxth	r1, r3
 8001052:	f107 020c 	add.w	r2, r7, #12
 8001056:	230a      	movs	r3, #10
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2302      	movs	r3, #2
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f003 fa0d 	bl	800447c <HAL_I2C_Master_Transmit>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
  if( result != HAL_OK ) 
  {
    /*Failed to send register value to driver*/    
  }
  
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <LSM6DSOX_end>:

void LSM6DSOX_end(I2C_HandleTypeDef* I2Cx, uint8_t imu_address)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	460b      	mov	r3, r1
 8001078:	70fb      	strb	r3, [r7, #3]
		
		// I2C_HandleTypeDef* I2Cx = I2Cx // Resende
	
    LSM6DSOX_writeRegister8(I2Cx, imu_address, LSM6DSOX_CTRL2_G, 0x00);
 800107a:	78f9      	ldrb	r1, [r7, #3]
 800107c:	2300      	movs	r3, #0
 800107e:	2211      	movs	r2, #17
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ffd1 	bl	8001028 <LSM6DSOX_writeRegister8>
    LSM6DSOX_writeRegister8(I2Cx, imu_address, LSM6DSOX_CTRL1_XL, 0x00);
 8001086:	78f9      	ldrb	r1, [r7, #3]
 8001088:	2300      	movs	r3, #0
 800108a:	2210      	movs	r2, #16
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ffcb 	bl	8001028 <LSM6DSOX_writeRegister8>
    // Desconnectar I2C _wire->end();
  
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <LSM6DSOX_readAcceleration>:

//returns data in g
int LSM6DSOX_readAcceleration(I2C_HandleTypeDef* I2Cx, uint8_t imu_address, float* x, float* y, float* z)
{	
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	460b      	mov	r3, r1
 80010aa:	72fb      	strb	r3, [r7, #11]
	// I2C_HandleTypeDef* I2Cx = I2Cx // Resende
  int16_t data[3];

  if (!LSM6DSOX_readRegisters(I2Cx, imu_address, LSM6DSOX_OUTX_L_XL, (uint8_t*)data, sizeof(data))) {
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	7af9      	ldrb	r1, [r7, #11]
 80010b2:	2206      	movs	r2, #6
 80010b4:	9200      	str	r2, [sp, #0]
 80010b6:	2228      	movs	r2, #40	; 0x28
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f000 f8d7 	bl	800126c <LSM6DSOX_readRegisters>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d107      	bne.n	80010d4 <LSM6DSOX_readAcceleration+0x38>
    x = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	607b      	str	r3, [r7, #4]
    y = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	603b      	str	r3, [r7, #0]
    z = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]

    return 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	e036      	b.n	8001142 <LSM6DSOX_readAcceleration+0xa6>
  }

  *x = data[0] * acc_FS / 32768.0; // (2^16)/2 = 32768 (it is dividev by two since data is int16 - signed values - with allowed negative values)
 80010d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <LSM6DSOX_readAcceleration+0xb0>)
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ea:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001150 <LSM6DSOX_readAcceleration+0xb4>
 80010ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	edc3 7a00 	vstr	s15, [r3]
  *y = data[1] * acc_FS / 32768.0;
 80010f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <LSM6DSOX_readAcceleration+0xb0>)
 8001106:	edd3 7a00 	vldr	s15, [r3]
 800110a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800110e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001150 <LSM6DSOX_readAcceleration+0xb4>
 8001112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	edc3 7a00 	vstr	s15, [r3]
  *z = data[2] * acc_FS / 32768.0;
 800111c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <LSM6DSOX_readAcceleration+0xb0>)
 800112a:	edd3 7a00 	vldr	s15, [r3]
 800112e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001132:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001150 <LSM6DSOX_readAcceleration+0xb4>
 8001136:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113a:	6a3b      	ldr	r3, [r7, #32]
 800113c:	edc3 7a00 	vstr	s15, [r3]

  return 1;
 8001140:	2301      	movs	r3, #1
	
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000314 	.word	0x20000314
 8001150:	47000000 	.word	0x47000000

08001154 <LSM6DSOX_accelerationAvailable>:
	}
}


int LSM6DSOX_accelerationAvailable(I2C_HandleTypeDef* I2Cx, uint8_t imu_address)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]
	//I2C_HandleTypeDef* I2Cx = I2Cx // Resende
  if (LSM6DSOX_readRegister8(I2Cx, imu_address, LSM6DSOX_STATUS_REG) & 0x01) {
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	221e      	movs	r2, #30
 8001164:	4619      	mov	r1, r3
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ff2c 	bl	8000fc4 <LSM6DSOX_readRegister8>
 800116c:	4603      	mov	r3, r0
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <LSM6DSOX_accelerationAvailable+0x26>
    return 1;
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <LSM6DSOX_accelerationAvailable+0x28>
  }

  return 0;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <LSM6DSOX_readGyroscope>:


//returns data in dps
int LSM6DSOX_readGyroscope(I2C_HandleTypeDef* I2Cx, uint8_t imu_address, float* x, float* y, float* z)
{		
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af02      	add	r7, sp, #8
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	460b      	mov	r3, r1
 8001192:	72fb      	strb	r3, [r7, #11]
		//I2C_HandleTypeDef* I2Cx = I2Cx //Resende
	  int16_t data[3];

  if (!LSM6DSOX_readRegisters(I2Cx, imu_address, LSM6DSOX_OUTX_L_G, (uint8_t*)data, sizeof(data))) {
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	7af9      	ldrb	r1, [r7, #11]
 800119a:	2206      	movs	r2, #6
 800119c:	9200      	str	r2, [sp, #0]
 800119e:	2222      	movs	r2, #34	; 0x22
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f000 f863 	bl	800126c <LSM6DSOX_readRegisters>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d107      	bne.n	80011bc <LSM6DSOX_readGyroscope+0x38>
    x = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	607b      	str	r3, [r7, #4]
    y = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
    z = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]

    return 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	e036      	b.n	800122a <LSM6DSOX_readGyroscope+0xa6>
  }
	
	*x = data[0] * gyr_FS / 32768.0;  // (2^16)/2 = 32768 (it is dividev by two since data is int16 - signed values - with allowed negative values)
 80011bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011c0:	ee07 3a90 	vmov	s15, r3
 80011c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <LSM6DSOX_readGyroscope+0xb0>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d2:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001238 <LSM6DSOX_readGyroscope+0xb4>
 80011d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	edc3 7a00 	vstr	s15, [r3]
  *y = data[1] * gyr_FS / 32768.0;  // (2^16)/2 = 32768 (it is dividev by two since data is int16 - signed values - with allowed negative values)
 80011e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <LSM6DSOX_readGyroscope+0xb0>)
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f6:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001238 <LSM6DSOX_readGyroscope+0xb4>
 80011fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	edc3 7a00 	vstr	s15, [r3]
  *z = data[2] * gyr_FS / 32768.0; // (2^16)/2 = 32768 (it is dividev by two since data is int16 - signed values - with allowed negative values) 
 8001204:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <LSM6DSOX_readGyroscope+0xb0>)
 8001212:	edd3 7a00 	vldr	s15, [r3]
 8001216:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001238 <LSM6DSOX_readGyroscope+0xb4>
 800121e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001222:	6a3b      	ldr	r3, [r7, #32]
 8001224:	edc3 7a00 	vstr	s15, [r3]
	
  return 1;
 8001228:	2301      	movs	r3, #1
	
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000318 	.word	0x20000318
 8001238:	47000000 	.word	0x47000000

0800123c <LSM6DSOX_gyroscopeAvailable>:
		return *data_gyr;
	}
}

int LSM6DSOX_gyroscopeAvailable(I2C_HandleTypeDef* I2Cx, uint8_t imu_address)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	70fb      	strb	r3, [r7, #3]
	//I2C_HandleTypeDef* I2Cx = I2Cx
  if (LSM6DSOX_readRegister8(I2Cx, imu_address, LSM6DSOX_STATUS_REG) & 0x02) {
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	221e      	movs	r2, #30
 800124c:	4619      	mov	r1, r3
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff feb8 	bl	8000fc4 <LSM6DSOX_readRegister8>
 8001254:	4603      	mov	r3, r0
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <LSM6DSOX_gyroscopeAvailable+0x26>
    return 1;
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <LSM6DSOX_gyroscopeAvailable+0x28>
  }

  return 0;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <LSM6DSOX_readRegisters>:
}



int LSM6DSOX_readRegisters(I2C_HandleTypeDef* I2Cx, uint8_t imu_address , uint8_t address, uint8_t* data, uint16_t length)
{	
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af02      	add	r7, sp, #8
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	72fb      	strb	r3, [r7, #11]
 800127a:	4613      	mov	r3, r2
 800127c:	72bb      	strb	r3, [r7, #10]
	uint8_t x;
  HAL_StatusTypeDef result;
	//I2C_HandleTypeDef* I2Cx = I2Cx // TODO: Remove this after and see if this works
  
  result = HAL_I2C_Master_Transmit( I2Cx, (imu_address << 1), &address, 1, 10 ); // Original address - (LSM6DSOX_ADDRESS << 1) - Resende
 800127e:	7afb      	ldrb	r3, [r7, #11]
 8001280:	b29b      	uxth	r3, r3
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	b299      	uxth	r1, r3
 8001286:	f107 020a 	add.w	r2, r7, #10
 800128a:	230a      	movs	r3, #10
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2301      	movs	r3, #1
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f003 f8f3 	bl	800447c <HAL_I2C_Master_Transmit>
 8001296:	4603      	mov	r3, r0
 8001298:	75fb      	strb	r3, [r7, #23]
  if( result != HAL_OK ) 
 800129a:	7dfb      	ldrb	r3, [r7, #23]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <LSM6DSOX_readRegisters+0x38>
  {
    /*Failed to send register value to driver*/
    //x = 0;
		return 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e012      	b.n	80012ca <LSM6DSOX_readRegisters+0x5e>
  }
  
  result = HAL_I2C_Master_Receive ( I2Cx, (imu_address << 1), data, length, 10);
 80012a4:	7afb      	ldrb	r3, [r7, #11]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	b299      	uxth	r1, r3
 80012ac:	8c3b      	ldrh	r3, [r7, #32]
 80012ae:	220a      	movs	r2, #10
 80012b0:	9200      	str	r2, [sp, #0]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f003 f9df 	bl	8004678 <HAL_I2C_Master_Receive>
 80012ba:	4603      	mov	r3, r0
 80012bc:	75fb      	strb	r3, [r7, #23]
  if( result != HAL_OK ) 
 80012be:	7dfb      	ldrb	r3, [r7, #23]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <LSM6DSOX_readRegisters+0x5c>
  {
    /*Failed to send register value to driver*/
    //x = 0;
		return 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e000      	b.n	80012ca <LSM6DSOX_readRegisters+0x5e>
  }
  
  return 1;
 80012c8:	2301      	movs	r3, #1
	//return x;
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <IMU_Initialization>:
SDI_areas Gyro_integral[2] = {0};
Accel_angles Acc_ang[2] = {0};
Estimated_angles Estim_ang[2] = {0};

int IMU_Initialization()
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	int i;
	int initialization_flag;
	for(i = 0; i<2; i++)
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	e035      	b.n	800134c <IMU_Initialization+0x78>
	{
		if(IMU_ON_OFF[i] == 0)
 80012e0:	4a1e      	ldr	r2, [pc, #120]	; (800135c <IMU_Initialization+0x88>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d12c      	bne.n	8001346 <IMU_Initialization+0x72>
		{
			switch(i)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <IMU_Initialization+0x26>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d013      	beq.n	8001320 <IMU_Initialization+0x4c>
 80012f8:	e025      	b.n	8001346 <IMU_Initialization+0x72>
			{
			case 0:
				initialization_flag = LSM6DSOX_begin(&hi2c1, LSM6DSOX_ADDRESS_1);
 80012fa:	216a      	movs	r1, #106	; 0x6a
 80012fc:	4818      	ldr	r0, [pc, #96]	; (8001360 <IMU_Initialization+0x8c>)
 80012fe:	f7ff fe21 	bl	8000f44 <LSM6DSOX_begin>
 8001302:	6038      	str	r0, [r7, #0]
				if (initialization_flag == 0)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d104      	bne.n	8001314 <IMU_Initialization+0x40>
				{
					BlinkLED(200, 3);
 800130a:	2103      	movs	r1, #3
 800130c:	20c8      	movs	r0, #200	; 0xc8
 800130e:	f000 ff39 	bl	8002184 <BlinkLED>
				}
				else
				{
					IMU_ON_OFF[i] = 1;
				}
				break;
 8001312:	e018      	b.n	8001346 <IMU_Initialization+0x72>
					IMU_ON_OFF[i] = 1;
 8001314:	4a11      	ldr	r2, [pc, #68]	; (800135c <IMU_Initialization+0x88>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2101      	movs	r1, #1
 800131a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800131e:	e012      	b.n	8001346 <IMU_Initialization+0x72>


			case 1:
				initialization_flag = LSM6DSOX_begin(&hi2c1, LSM6DSOX_ADDRESS_2);
 8001320:	216b      	movs	r1, #107	; 0x6b
 8001322:	480f      	ldr	r0, [pc, #60]	; (8001360 <IMU_Initialization+0x8c>)
 8001324:	f7ff fe0e 	bl	8000f44 <LSM6DSOX_begin>
 8001328:	6038      	str	r0, [r7, #0]
				if (initialization_flag == 0)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d104      	bne.n	800133a <IMU_Initialization+0x66>
				{
					BlinkLED(200, 4);
 8001330:	2104      	movs	r1, #4
 8001332:	20c8      	movs	r0, #200	; 0xc8
 8001334:	f000 ff26 	bl	8002184 <BlinkLED>
				}
				else
				{
					IMU_ON_OFF[i] = 1;
				}
				break;
 8001338:	e004      	b.n	8001344 <IMU_Initialization+0x70>
					IMU_ON_OFF[i] = 1;
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <IMU_Initialization+0x88>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2101      	movs	r1, #1
 8001340:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8001344:	bf00      	nop
	for(i = 0; i<2; i++)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3301      	adds	r3, #1
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b01      	cmp	r3, #1
 8001350:	ddc6      	ble.n	80012e0 <IMU_Initialization+0xc>
			}
		}
	}
	return initialization_flag;
 8001352:	683b      	ldr	r3, [r7, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000954 	.word	0x20000954
 8001360:	2000031c 	.word	0x2000031c
 8001364:	00000000 	.word	0x00000000

08001368 <Accelerometer_Gyroscope_Calibration>:

int Accelerometer_Gyroscope_Calibration()
{
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af02      	add	r7, sp, #8
	int i, elapsed_time;
	int calibration_samples = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
	int begin_calibration = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
	do
	{

		for(i = 0; i<2; i++)
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	e239      	b.n	80017f0 <Accelerometer_Gyroscope_Calibration+0x488>
		{
			switch(i)
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d004      	beq.n	800138c <Accelerometer_Gyroscope_Calibration+0x24>
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	2b01      	cmp	r3, #1
 8001386:	f000 811d 	beq.w	80015c4 <Accelerometer_Gyroscope_Calibration+0x25c>
 800138a:	e22e      	b.n	80017ea <Accelerometer_Gyroscope_Calibration+0x482>
			{
			case 0:
				if((LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_1) == 1) &
 800138c:	216a      	movs	r1, #106	; 0x6a
 800138e:	4889      	ldr	r0, [pc, #548]	; (80015b4 <Accelerometer_Gyroscope_Calibration+0x24c>)
 8001390:	f7ff fee0 	bl	8001154 <LSM6DSOX_accelerationAvailable>
 8001394:	4603      	mov	r3, r0
 8001396:	2b01      	cmp	r3, #1
 8001398:	bf0c      	ite	eq
 800139a:	2301      	moveq	r3, #1
 800139c:	2300      	movne	r3, #0
 800139e:	b2dc      	uxtb	r4, r3
						(LSM6DSOX_gyroscopeAvailable(&hi2c1, LSM6DSOX_ADDRESS_1) == 1))
 80013a0:	216a      	movs	r1, #106	; 0x6a
 80013a2:	4884      	ldr	r0, [pc, #528]	; (80015b4 <Accelerometer_Gyroscope_Calibration+0x24c>)
 80013a4:	f7ff ff4a 	bl	800123c <LSM6DSOX_gyroscopeAvailable>
 80013a8:	4603      	mov	r3, r0
				if((LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_1) == 1) &
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	bf0c      	ite	eq
 80013ae:	2301      	moveq	r3, #1
 80013b0:	2300      	movne	r3, #0
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4023      	ands	r3, r4
 80013b6:	b2db      	uxtb	r3, r3
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d03e      	beq.n	800143a <Accelerometer_Gyroscope_Calibration+0xd2>
				{
					LSM6DSOX_readAcceleration(&hi2c1, LSM6DSOX_ADDRESS_1, &IMUrawdata[i].Accelerometer_X, &IMUrawdata[i].Accelerometer_Y, &IMUrawdata[i].Accelerometer_Z);
 80013bc:	68fa      	ldr	r2, [r7, #12]
 80013be:	4613      	mov	r3, r2
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4413      	add	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	4a7c      	ldr	r2, [pc, #496]	; (80015b8 <Accelerometer_Gyroscope_Calibration+0x250>)
 80013c8:	1899      	adds	r1, r3, r2
 80013ca:	68fa      	ldr	r2, [r7, #12]
 80013cc:	4613      	mov	r3, r2
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	4413      	add	r3, r2
 80013d2:	00db      	lsls	r3, r3, #3
 80013d4:	4a78      	ldr	r2, [pc, #480]	; (80015b8 <Accelerometer_Gyroscope_Calibration+0x250>)
 80013d6:	4413      	add	r3, r2
 80013d8:	1d18      	adds	r0, r3, #4
 80013da:	68fa      	ldr	r2, [r7, #12]
 80013dc:	4613      	mov	r3, r2
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4413      	add	r3, r2
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	3308      	adds	r3, #8
 80013e6:	4a74      	ldr	r2, [pc, #464]	; (80015b8 <Accelerometer_Gyroscope_Calibration+0x250>)
 80013e8:	4413      	add	r3, r2
 80013ea:	9300      	str	r3, [sp, #0]
 80013ec:	4603      	mov	r3, r0
 80013ee:	460a      	mov	r2, r1
 80013f0:	216a      	movs	r1, #106	; 0x6a
 80013f2:	4870      	ldr	r0, [pc, #448]	; (80015b4 <Accelerometer_Gyroscope_Calibration+0x24c>)
 80013f4:	f7ff fe52 	bl	800109c <LSM6DSOX_readAcceleration>
					LSM6DSOX_readGyroscope(&hi2c1, LSM6DSOX_ADDRESS_1, &IMUrawdata[i].Gyroscope_X, &IMUrawdata[i].Gyroscope_Y, &IMUrawdata[i].Gyroscope_Z);
 80013f8:	68fa      	ldr	r2, [r7, #12]
 80013fa:	4613      	mov	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4413      	add	r3, r2
 8001400:	00db      	lsls	r3, r3, #3
 8001402:	3308      	adds	r3, #8
 8001404:	4a6c      	ldr	r2, [pc, #432]	; (80015b8 <Accelerometer_Gyroscope_Calibration+0x250>)
 8001406:	4413      	add	r3, r2
 8001408:	1d19      	adds	r1, r3, #4
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	00db      	lsls	r3, r3, #3
 8001414:	3310      	adds	r3, #16
 8001416:	4a68      	ldr	r2, [pc, #416]	; (80015b8 <Accelerometer_Gyroscope_Calibration+0x250>)
 8001418:	1898      	adds	r0, r3, r2
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	4613      	mov	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	3310      	adds	r3, #16
 8001426:	4a64      	ldr	r2, [pc, #400]	; (80015b8 <Accelerometer_Gyroscope_Calibration+0x250>)
 8001428:	4413      	add	r3, r2
 800142a:	3304      	adds	r3, #4
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	4603      	mov	r3, r0
 8001430:	460a      	mov	r2, r1
 8001432:	216a      	movs	r1, #106	; 0x6a
 8001434:	485f      	ldr	r0, [pc, #380]	; (80015b4 <Accelerometer_Gyroscope_Calibration+0x24c>)
 8001436:	f7ff fea5 	bl	8001184 <LSM6DSOX_readGyroscope>
				}
				accelerometer_mean[i][0] += IMUrawdata[i].Accelerometer_X;
 800143a:	4960      	ldr	r1, [pc, #384]	; (80015bc <Accelerometer_Gyroscope_Calibration+0x254>)
 800143c:	68fa      	ldr	r2, [r7, #12]
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	440b      	add	r3, r1
 8001448:	ed93 7a00 	vldr	s14, [r3]
 800144c:	495a      	ldr	r1, [pc, #360]	; (80015b8 <Accelerometer_Gyroscope_Calibration+0x250>)
 800144e:	68fa      	ldr	r2, [r7, #12]
 8001450:	4613      	mov	r3, r2
 8001452:	005b      	lsls	r3, r3, #1
 8001454:	4413      	add	r3, r2
 8001456:	00db      	lsls	r3, r3, #3
 8001458:	440b      	add	r3, r1
 800145a:	edd3 7a00 	vldr	s15, [r3]
 800145e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001462:	4956      	ldr	r1, [pc, #344]	; (80015bc <Accelerometer_Gyroscope_Calibration+0x254>)
 8001464:	68fa      	ldr	r2, [r7, #12]
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	440b      	add	r3, r1
 8001470:	edc3 7a00 	vstr	s15, [r3]
				accelerometer_mean[i][1] += IMUrawdata[i].Accelerometer_Y;
 8001474:	4951      	ldr	r1, [pc, #324]	; (80015bc <Accelerometer_Gyroscope_Calibration+0x254>)
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4613      	mov	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	4413      	add	r3, r2
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	440b      	add	r3, r1
 8001482:	3304      	adds	r3, #4
 8001484:	ed93 7a00 	vldr	s14, [r3]
 8001488:	494b      	ldr	r1, [pc, #300]	; (80015b8 <Accelerometer_Gyroscope_Calibration+0x250>)
 800148a:	68fa      	ldr	r2, [r7, #12]
 800148c:	4613      	mov	r3, r2
 800148e:	005b      	lsls	r3, r3, #1
 8001490:	4413      	add	r3, r2
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	440b      	add	r3, r1
 8001496:	3304      	adds	r3, #4
 8001498:	edd3 7a00 	vldr	s15, [r3]
 800149c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014a0:	4946      	ldr	r1, [pc, #280]	; (80015bc <Accelerometer_Gyroscope_Calibration+0x254>)
 80014a2:	68fa      	ldr	r2, [r7, #12]
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	440b      	add	r3, r1
 80014ae:	3304      	adds	r3, #4
 80014b0:	edc3 7a00 	vstr	s15, [r3]
				accelerometer_mean[i][2] += IMUrawdata[i].Accelerometer_Z;
 80014b4:	4941      	ldr	r1, [pc, #260]	; (80015bc <Accelerometer_Gyroscope_Calibration+0x254>)
 80014b6:	68fa      	ldr	r2, [r7, #12]
 80014b8:	4613      	mov	r3, r2
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	3308      	adds	r3, #8
 80014c4:	ed93 7a00 	vldr	s14, [r3]
 80014c8:	493b      	ldr	r1, [pc, #236]	; (80015b8 <Accelerometer_Gyroscope_Calibration+0x250>)
 80014ca:	68fa      	ldr	r2, [r7, #12]
 80014cc:	4613      	mov	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	4413      	add	r3, r2
 80014d2:	00db      	lsls	r3, r3, #3
 80014d4:	440b      	add	r3, r1
 80014d6:	3308      	adds	r3, #8
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e0:	4936      	ldr	r1, [pc, #216]	; (80015bc <Accelerometer_Gyroscope_Calibration+0x254>)
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	4613      	mov	r3, r2
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	4413      	add	r3, r2
 80014ea:	009b      	lsls	r3, r3, #2
 80014ec:	440b      	add	r3, r1
 80014ee:	3308      	adds	r3, #8
 80014f0:	edc3 7a00 	vstr	s15, [r3]
				gyroscope_offset[i][0] += IMUrawdata[i].Gyroscope_X;
 80014f4:	4932      	ldr	r1, [pc, #200]	; (80015c0 <Accelerometer_Gyroscope_Calibration+0x258>)
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	4613      	mov	r3, r2
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	440b      	add	r3, r1
 8001502:	ed93 7a00 	vldr	s14, [r3]
 8001506:	492c      	ldr	r1, [pc, #176]	; (80015b8 <Accelerometer_Gyroscope_Calibration+0x250>)
 8001508:	68fa      	ldr	r2, [r7, #12]
 800150a:	4613      	mov	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4413      	add	r3, r2
 8001510:	00db      	lsls	r3, r3, #3
 8001512:	440b      	add	r3, r1
 8001514:	330c      	adds	r3, #12
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800151e:	4928      	ldr	r1, [pc, #160]	; (80015c0 <Accelerometer_Gyroscope_Calibration+0x258>)
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	4613      	mov	r3, r2
 8001524:	005b      	lsls	r3, r3, #1
 8001526:	4413      	add	r3, r2
 8001528:	009b      	lsls	r3, r3, #2
 800152a:	440b      	add	r3, r1
 800152c:	edc3 7a00 	vstr	s15, [r3]
				gyroscope_offset[i][1] += IMUrawdata[i].Gyroscope_Y;
 8001530:	4923      	ldr	r1, [pc, #140]	; (80015c0 <Accelerometer_Gyroscope_Calibration+0x258>)
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	4613      	mov	r3, r2
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	4413      	add	r3, r2
 800153a:	009b      	lsls	r3, r3, #2
 800153c:	440b      	add	r3, r1
 800153e:	3304      	adds	r3, #4
 8001540:	ed93 7a00 	vldr	s14, [r3]
 8001544:	491c      	ldr	r1, [pc, #112]	; (80015b8 <Accelerometer_Gyroscope_Calibration+0x250>)
 8001546:	68fa      	ldr	r2, [r7, #12]
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	440b      	add	r3, r1
 8001552:	3310      	adds	r3, #16
 8001554:	edd3 7a00 	vldr	s15, [r3]
 8001558:	ee77 7a27 	vadd.f32	s15, s14, s15
 800155c:	4918      	ldr	r1, [pc, #96]	; (80015c0 <Accelerometer_Gyroscope_Calibration+0x258>)
 800155e:	68fa      	ldr	r2, [r7, #12]
 8001560:	4613      	mov	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	3304      	adds	r3, #4
 800156c:	edc3 7a00 	vstr	s15, [r3]
				gyroscope_offset[i][2] += IMUrawdata[i].Gyroscope_Z;
 8001570:	4913      	ldr	r1, [pc, #76]	; (80015c0 <Accelerometer_Gyroscope_Calibration+0x258>)
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4613      	mov	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4413      	add	r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	3308      	adds	r3, #8
 8001580:	ed93 7a00 	vldr	s14, [r3]
 8001584:	490c      	ldr	r1, [pc, #48]	; (80015b8 <Accelerometer_Gyroscope_Calibration+0x250>)
 8001586:	68fa      	ldr	r2, [r7, #12]
 8001588:	4613      	mov	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4413      	add	r3, r2
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	440b      	add	r3, r1
 8001592:	3314      	adds	r3, #20
 8001594:	edd3 7a00 	vldr	s15, [r3]
 8001598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800159c:	4908      	ldr	r1, [pc, #32]	; (80015c0 <Accelerometer_Gyroscope_Calibration+0x258>)
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4613      	mov	r3, r2
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	4413      	add	r3, r2
 80015a6:	009b      	lsls	r3, r3, #2
 80015a8:	440b      	add	r3, r1
 80015aa:	3308      	adds	r3, #8
 80015ac:	edc3 7a00 	vstr	s15, [r3]

				break;
 80015b0:	e11b      	b.n	80017ea <Accelerometer_Gyroscope_Calibration+0x482>
 80015b2:	bf00      	nop
 80015b4:	2000031c 	.word	0x2000031c
 80015b8:	20000994 	.word	0x20000994
 80015bc:	2000095c 	.word	0x2000095c
 80015c0:	20000974 	.word	0x20000974

			case 1:
				if((LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_2) == 1) &
 80015c4:	216b      	movs	r1, #107	; 0x6b
 80015c6:	4895      	ldr	r0, [pc, #596]	; (800181c <Accelerometer_Gyroscope_Calibration+0x4b4>)
 80015c8:	f7ff fdc4 	bl	8001154 <LSM6DSOX_accelerationAvailable>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	bf0c      	ite	eq
 80015d2:	2301      	moveq	r3, #1
 80015d4:	2300      	movne	r3, #0
 80015d6:	b2dc      	uxtb	r4, r3
						(LSM6DSOX_gyroscopeAvailable(&hi2c1, LSM6DSOX_ADDRESS_2) == 1))
 80015d8:	216b      	movs	r1, #107	; 0x6b
 80015da:	4890      	ldr	r0, [pc, #576]	; (800181c <Accelerometer_Gyroscope_Calibration+0x4b4>)
 80015dc:	f7ff fe2e 	bl	800123c <LSM6DSOX_gyroscopeAvailable>
 80015e0:	4603      	mov	r3, r0
				if((LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_2) == 1) &
 80015e2:	2b01      	cmp	r3, #1
 80015e4:	bf0c      	ite	eq
 80015e6:	2301      	moveq	r3, #1
 80015e8:	2300      	movne	r3, #0
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	4023      	ands	r3, r4
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d03e      	beq.n	8001672 <Accelerometer_Gyroscope_Calibration+0x30a>
				{
					LSM6DSOX_readAcceleration(&hi2c1, LSM6DSOX_ADDRESS_2, &IMUrawdata[i].Accelerometer_X, &IMUrawdata[i].Accelerometer_Y, &IMUrawdata[i].Accelerometer_Z);
 80015f4:	68fa      	ldr	r2, [r7, #12]
 80015f6:	4613      	mov	r3, r2
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	4413      	add	r3, r2
 80015fc:	00db      	lsls	r3, r3, #3
 80015fe:	4a88      	ldr	r2, [pc, #544]	; (8001820 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 8001600:	1899      	adds	r1, r3, r2
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	4613      	mov	r3, r2
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	4413      	add	r3, r2
 800160a:	00db      	lsls	r3, r3, #3
 800160c:	4a84      	ldr	r2, [pc, #528]	; (8001820 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 800160e:	4413      	add	r3, r2
 8001610:	1d18      	adds	r0, r3, #4
 8001612:	68fa      	ldr	r2, [r7, #12]
 8001614:	4613      	mov	r3, r2
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	4413      	add	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	3308      	adds	r3, #8
 800161e:	4a80      	ldr	r2, [pc, #512]	; (8001820 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 8001620:	4413      	add	r3, r2
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	4603      	mov	r3, r0
 8001626:	460a      	mov	r2, r1
 8001628:	216b      	movs	r1, #107	; 0x6b
 800162a:	487c      	ldr	r0, [pc, #496]	; (800181c <Accelerometer_Gyroscope_Calibration+0x4b4>)
 800162c:	f7ff fd36 	bl	800109c <LSM6DSOX_readAcceleration>
					LSM6DSOX_readGyroscope(&hi2c1, LSM6DSOX_ADDRESS_2, &IMUrawdata[i].Gyroscope_X, &IMUrawdata[i].Gyroscope_Y, &IMUrawdata[i].Gyroscope_Z);
 8001630:	68fa      	ldr	r2, [r7, #12]
 8001632:	4613      	mov	r3, r2
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4413      	add	r3, r2
 8001638:	00db      	lsls	r3, r3, #3
 800163a:	3308      	adds	r3, #8
 800163c:	4a78      	ldr	r2, [pc, #480]	; (8001820 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 800163e:	4413      	add	r3, r2
 8001640:	1d19      	adds	r1, r3, #4
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	4613      	mov	r3, r2
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	00db      	lsls	r3, r3, #3
 800164c:	3310      	adds	r3, #16
 800164e:	4a74      	ldr	r2, [pc, #464]	; (8001820 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 8001650:	1898      	adds	r0, r3, r2
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	4613      	mov	r3, r2
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	4413      	add	r3, r2
 800165a:	00db      	lsls	r3, r3, #3
 800165c:	3310      	adds	r3, #16
 800165e:	4a70      	ldr	r2, [pc, #448]	; (8001820 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 8001660:	4413      	add	r3, r2
 8001662:	3304      	adds	r3, #4
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	4603      	mov	r3, r0
 8001668:	460a      	mov	r2, r1
 800166a:	216b      	movs	r1, #107	; 0x6b
 800166c:	486b      	ldr	r0, [pc, #428]	; (800181c <Accelerometer_Gyroscope_Calibration+0x4b4>)
 800166e:	f7ff fd89 	bl	8001184 <LSM6DSOX_readGyroscope>
				}
				accelerometer_mean[i][0] += IMUrawdata[i].Accelerometer_X;
 8001672:	496c      	ldr	r1, [pc, #432]	; (8001824 <Accelerometer_Gyroscope_Calibration+0x4bc>)
 8001674:	68fa      	ldr	r2, [r7, #12]
 8001676:	4613      	mov	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	440b      	add	r3, r1
 8001680:	ed93 7a00 	vldr	s14, [r3]
 8001684:	4966      	ldr	r1, [pc, #408]	; (8001820 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	4613      	mov	r3, r2
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	4413      	add	r3, r2
 800168e:	00db      	lsls	r3, r3, #3
 8001690:	440b      	add	r3, r1
 8001692:	edd3 7a00 	vldr	s15, [r3]
 8001696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169a:	4962      	ldr	r1, [pc, #392]	; (8001824 <Accelerometer_Gyroscope_Calibration+0x4bc>)
 800169c:	68fa      	ldr	r2, [r7, #12]
 800169e:	4613      	mov	r3, r2
 80016a0:	005b      	lsls	r3, r3, #1
 80016a2:	4413      	add	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	440b      	add	r3, r1
 80016a8:	edc3 7a00 	vstr	s15, [r3]
				accelerometer_mean[i][1] += IMUrawdata[i].Accelerometer_Y;
 80016ac:	495d      	ldr	r1, [pc, #372]	; (8001824 <Accelerometer_Gyroscope_Calibration+0x4bc>)
 80016ae:	68fa      	ldr	r2, [r7, #12]
 80016b0:	4613      	mov	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	3304      	adds	r3, #4
 80016bc:	ed93 7a00 	vldr	s14, [r3]
 80016c0:	4957      	ldr	r1, [pc, #348]	; (8001820 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 80016c2:	68fa      	ldr	r2, [r7, #12]
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	00db      	lsls	r3, r3, #3
 80016cc:	440b      	add	r3, r1
 80016ce:	3304      	adds	r3, #4
 80016d0:	edd3 7a00 	vldr	s15, [r3]
 80016d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016d8:	4952      	ldr	r1, [pc, #328]	; (8001824 <Accelerometer_Gyroscope_Calibration+0x4bc>)
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	4613      	mov	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4413      	add	r3, r2
 80016e2:	009b      	lsls	r3, r3, #2
 80016e4:	440b      	add	r3, r1
 80016e6:	3304      	adds	r3, #4
 80016e8:	edc3 7a00 	vstr	s15, [r3]
				accelerometer_mean[i][2] += IMUrawdata[i].Accelerometer_Z;
 80016ec:	494d      	ldr	r1, [pc, #308]	; (8001824 <Accelerometer_Gyroscope_Calibration+0x4bc>)
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4613      	mov	r3, r2
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4413      	add	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	440b      	add	r3, r1
 80016fa:	3308      	adds	r3, #8
 80016fc:	ed93 7a00 	vldr	s14, [r3]
 8001700:	4947      	ldr	r1, [pc, #284]	; (8001820 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 8001702:	68fa      	ldr	r2, [r7, #12]
 8001704:	4613      	mov	r3, r2
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	4413      	add	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	440b      	add	r3, r1
 800170e:	3308      	adds	r3, #8
 8001710:	edd3 7a00 	vldr	s15, [r3]
 8001714:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001718:	4942      	ldr	r1, [pc, #264]	; (8001824 <Accelerometer_Gyroscope_Calibration+0x4bc>)
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	4613      	mov	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	4413      	add	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	3308      	adds	r3, #8
 8001728:	edc3 7a00 	vstr	s15, [r3]
				gyroscope_offset[i][0] += IMUrawdata[i].Gyroscope_X;
 800172c:	493e      	ldr	r1, [pc, #248]	; (8001828 <Accelerometer_Gyroscope_Calibration+0x4c0>)
 800172e:	68fa      	ldr	r2, [r7, #12]
 8001730:	4613      	mov	r3, r2
 8001732:	005b      	lsls	r3, r3, #1
 8001734:	4413      	add	r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	ed93 7a00 	vldr	s14, [r3]
 800173e:	4938      	ldr	r1, [pc, #224]	; (8001820 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	440b      	add	r3, r1
 800174c:	330c      	adds	r3, #12
 800174e:	edd3 7a00 	vldr	s15, [r3]
 8001752:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001756:	4934      	ldr	r1, [pc, #208]	; (8001828 <Accelerometer_Gyroscope_Calibration+0x4c0>)
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	440b      	add	r3, r1
 8001764:	edc3 7a00 	vstr	s15, [r3]
				gyroscope_offset[i][1] += IMUrawdata[i].Gyroscope_Y;
 8001768:	492f      	ldr	r1, [pc, #188]	; (8001828 <Accelerometer_Gyroscope_Calibration+0x4c0>)
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	4613      	mov	r3, r2
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	4413      	add	r3, r2
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	440b      	add	r3, r1
 8001776:	3304      	adds	r3, #4
 8001778:	ed93 7a00 	vldr	s14, [r3]
 800177c:	4928      	ldr	r1, [pc, #160]	; (8001820 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	440b      	add	r3, r1
 800178a:	3310      	adds	r3, #16
 800178c:	edd3 7a00 	vldr	s15, [r3]
 8001790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001794:	4924      	ldr	r1, [pc, #144]	; (8001828 <Accelerometer_Gyroscope_Calibration+0x4c0>)
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	3304      	adds	r3, #4
 80017a4:	edc3 7a00 	vstr	s15, [r3]
				gyroscope_offset[i][2] += IMUrawdata[i].Gyroscope_Z;
 80017a8:	491f      	ldr	r1, [pc, #124]	; (8001828 <Accelerometer_Gyroscope_Calibration+0x4c0>)
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	4613      	mov	r3, r2
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	4413      	add	r3, r2
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	440b      	add	r3, r1
 80017b6:	3308      	adds	r3, #8
 80017b8:	ed93 7a00 	vldr	s14, [r3]
 80017bc:	4918      	ldr	r1, [pc, #96]	; (8001820 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4613      	mov	r3, r2
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	4413      	add	r3, r2
 80017c6:	00db      	lsls	r3, r3, #3
 80017c8:	440b      	add	r3, r1
 80017ca:	3314      	adds	r3, #20
 80017cc:	edd3 7a00 	vldr	s15, [r3]
 80017d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017d4:	4914      	ldr	r1, [pc, #80]	; (8001828 <Accelerometer_Gyroscope_Calibration+0x4c0>)
 80017d6:	68fa      	ldr	r2, [r7, #12]
 80017d8:	4613      	mov	r3, r2
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	4413      	add	r3, r2
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	440b      	add	r3, r1
 80017e2:	3308      	adds	r3, #8
 80017e4:	edc3 7a00 	vstr	s15, [r3]

				break;
 80017e8:	bf00      	nop
		for(i = 0; i<2; i++)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	3301      	adds	r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	f77f adc2 	ble.w	800137c <Accelerometer_Gyroscope_Calibration+0x14>
			}
		}

		++calibration_samples;
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	3301      	adds	r3, #1
 80017fc:	60bb      	str	r3, [r7, #8]
		elapsed_time = HAL_GetTick() - begin_calibration;
 80017fe:	f001 fddb 	bl	80033b8 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	603b      	str	r3, [r7, #0]
	}while(elapsed_time < (Calibration_Time * 1000));
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001810:	4293      	cmp	r3, r2
 8001812:	f77f adb0 	ble.w	8001376 <Accelerometer_Gyroscope_Calibration+0xe>

	for(i = 0; i<2; i++)
 8001816:	2300      	movs	r3, #0
 8001818:	60fb      	str	r3, [r7, #12]
 800181a:	e114      	b.n	8001a46 <Accelerometer_Gyroscope_Calibration+0x6de>
 800181c:	2000031c 	.word	0x2000031c
 8001820:	20000994 	.word	0x20000994
 8001824:	2000095c 	.word	0x2000095c
 8001828:	20000974 	.word	0x20000974
	{
		accelerometer_mean[i][0] = accelerometer_mean[i][0]/calibration_samples;
 800182c:	498c      	ldr	r1, [pc, #560]	; (8001a60 <Accelerometer_Gyroscope_Calibration+0x6f8>)
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4613      	mov	r3, r2
 8001832:	005b      	lsls	r3, r3, #1
 8001834:	4413      	add	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	440b      	add	r3, r1
 800183a:	edd3 6a00 	vldr	s13, [r3]
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	ee07 3a90 	vmov	s15, r3
 8001844:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001848:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800184c:	4984      	ldr	r1, [pc, #528]	; (8001a60 <Accelerometer_Gyroscope_Calibration+0x6f8>)
 800184e:	68fa      	ldr	r2, [r7, #12]
 8001850:	4613      	mov	r3, r2
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4413      	add	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	edc3 7a00 	vstr	s15, [r3]
		accelerometer_mean[i][1] = accelerometer_mean[i][1]/calibration_samples;
 800185e:	4980      	ldr	r1, [pc, #512]	; (8001a60 <Accelerometer_Gyroscope_Calibration+0x6f8>)
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	4613      	mov	r3, r2
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	4413      	add	r3, r2
 8001868:	009b      	lsls	r3, r3, #2
 800186a:	440b      	add	r3, r1
 800186c:	3304      	adds	r3, #4
 800186e:	edd3 6a00 	vldr	s13, [r3]
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	ee07 3a90 	vmov	s15, r3
 8001878:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800187c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001880:	4977      	ldr	r1, [pc, #476]	; (8001a60 <Accelerometer_Gyroscope_Calibration+0x6f8>)
 8001882:	68fa      	ldr	r2, [r7, #12]
 8001884:	4613      	mov	r3, r2
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	4413      	add	r3, r2
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	440b      	add	r3, r1
 800188e:	3304      	adds	r3, #4
 8001890:	edc3 7a00 	vstr	s15, [r3]
		accelerometer_mean[i][2] = accelerometer_mean[i][2]/calibration_samples;
 8001894:	4972      	ldr	r1, [pc, #456]	; (8001a60 <Accelerometer_Gyroscope_Calibration+0x6f8>)
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4613      	mov	r3, r2
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4413      	add	r3, r2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	440b      	add	r3, r1
 80018a2:	3308      	adds	r3, #8
 80018a4:	edd3 6a00 	vldr	s13, [r3]
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	ee07 3a90 	vmov	s15, r3
 80018ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018b6:	496a      	ldr	r1, [pc, #424]	; (8001a60 <Accelerometer_Gyroscope_Calibration+0x6f8>)
 80018b8:	68fa      	ldr	r2, [r7, #12]
 80018ba:	4613      	mov	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	4413      	add	r3, r2
 80018c0:	009b      	lsls	r3, r3, #2
 80018c2:	440b      	add	r3, r1
 80018c4:	3308      	adds	r3, #8
 80018c6:	edc3 7a00 	vstr	s15, [r3]
		gyroscope_offset[i][0] = gyroscope_offset[i][0]/calibration_samples;
 80018ca:	4966      	ldr	r1, [pc, #408]	; (8001a64 <Accelerometer_Gyroscope_Calibration+0x6fc>)
 80018cc:	68fa      	ldr	r2, [r7, #12]
 80018ce:	4613      	mov	r3, r2
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	440b      	add	r3, r1
 80018d8:	edd3 6a00 	vldr	s13, [r3]
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	ee07 3a90 	vmov	s15, r3
 80018e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ea:	495e      	ldr	r1, [pc, #376]	; (8001a64 <Accelerometer_Gyroscope_Calibration+0x6fc>)
 80018ec:	68fa      	ldr	r2, [r7, #12]
 80018ee:	4613      	mov	r3, r2
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	4413      	add	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	440b      	add	r3, r1
 80018f8:	edc3 7a00 	vstr	s15, [r3]
		gyroscope_offset[i][1] = gyroscope_offset[i][1]/calibration_samples;
 80018fc:	4959      	ldr	r1, [pc, #356]	; (8001a64 <Accelerometer_Gyroscope_Calibration+0x6fc>)
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	4613      	mov	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4413      	add	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	440b      	add	r3, r1
 800190a:	3304      	adds	r3, #4
 800190c:	edd3 6a00 	vldr	s13, [r3]
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	ee07 3a90 	vmov	s15, r3
 8001916:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800191a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800191e:	4951      	ldr	r1, [pc, #324]	; (8001a64 <Accelerometer_Gyroscope_Calibration+0x6fc>)
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	4613      	mov	r3, r2
 8001924:	005b      	lsls	r3, r3, #1
 8001926:	4413      	add	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	440b      	add	r3, r1
 800192c:	3304      	adds	r3, #4
 800192e:	edc3 7a00 	vstr	s15, [r3]
		gyroscope_offset[i][2] = gyroscope_offset[i][2]/calibration_samples;
 8001932:	494c      	ldr	r1, [pc, #304]	; (8001a64 <Accelerometer_Gyroscope_Calibration+0x6fc>)
 8001934:	68fa      	ldr	r2, [r7, #12]
 8001936:	4613      	mov	r3, r2
 8001938:	005b      	lsls	r3, r3, #1
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	3308      	adds	r3, #8
 8001942:	edd3 6a00 	vldr	s13, [r3]
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	ee07 3a90 	vmov	s15, r3
 800194c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001954:	4943      	ldr	r1, [pc, #268]	; (8001a64 <Accelerometer_Gyroscope_Calibration+0x6fc>)
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4613      	mov	r3, r2
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	4413      	add	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	440b      	add	r3, r1
 8001962:	3308      	adds	r3, #8
 8001964:	edc3 7a00 	vstr	s15, [r3]

		norm_acceleration[i] = round(sqrt(pow(accelerometer_mean[i][0], 2) + pow(accelerometer_mean[i][1], 2) + pow(accelerometer_mean[i][2], 2)));
 8001968:	493d      	ldr	r1, [pc, #244]	; (8001a60 <Accelerometer_Gyroscope_Calibration+0x6f8>)
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	4613      	mov	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	009b      	lsls	r3, r3, #2
 8001974:	440b      	add	r3, r1
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4618      	mov	r0, r3
 800197a:	f7fe fde5 	bl	8000548 <__aeabi_f2d>
 800197e:	4602      	mov	r2, r0
 8001980:	460b      	mov	r3, r1
 8001982:	ed9f 1b35 	vldr	d1, [pc, #212]	; 8001a58 <Accelerometer_Gyroscope_Calibration+0x6f0>
 8001986:	ec43 2b10 	vmov	d0, r2, r3
 800198a:	f012 fd53 	bl	8014434 <pow>
 800198e:	ec55 4b10 	vmov	r4, r5, d0
 8001992:	4933      	ldr	r1, [pc, #204]	; (8001a60 <Accelerometer_Gyroscope_Calibration+0x6f8>)
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	4613      	mov	r3, r2
 8001998:	005b      	lsls	r3, r3, #1
 800199a:	4413      	add	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	440b      	add	r3, r1
 80019a0:	3304      	adds	r3, #4
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4618      	mov	r0, r3
 80019a6:	f7fe fdcf 	bl	8000548 <__aeabi_f2d>
 80019aa:	4602      	mov	r2, r0
 80019ac:	460b      	mov	r3, r1
 80019ae:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 8001a58 <Accelerometer_Gyroscope_Calibration+0x6f0>
 80019b2:	ec43 2b10 	vmov	d0, r2, r3
 80019b6:	f012 fd3d 	bl	8014434 <pow>
 80019ba:	ec53 2b10 	vmov	r2, r3, d0
 80019be:	4620      	mov	r0, r4
 80019c0:	4629      	mov	r1, r5
 80019c2:	f7fe fc63 	bl	800028c <__adddf3>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4614      	mov	r4, r2
 80019cc:	461d      	mov	r5, r3
 80019ce:	4924      	ldr	r1, [pc, #144]	; (8001a60 <Accelerometer_Gyroscope_Calibration+0x6f8>)
 80019d0:	68fa      	ldr	r2, [r7, #12]
 80019d2:	4613      	mov	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	440b      	add	r3, r1
 80019dc:	3308      	adds	r3, #8
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7fe fdb1 	bl	8000548 <__aeabi_f2d>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8001a58 <Accelerometer_Gyroscope_Calibration+0x6f0>
 80019ee:	ec43 2b10 	vmov	d0, r2, r3
 80019f2:	f012 fd1f 	bl	8014434 <pow>
 80019f6:	ec53 2b10 	vmov	r2, r3, d0
 80019fa:	4620      	mov	r0, r4
 80019fc:	4629      	mov	r1, r5
 80019fe:	f7fe fc45 	bl	800028c <__adddf3>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	ec43 2b17 	vmov	d7, r2, r3
 8001a0a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a0e:	eef0 0a67 	vmov.f32	s1, s15
 8001a12:	f012 fd7f 	bl	8014514 <sqrt>
 8001a16:	eeb0 7a40 	vmov.f32	s14, s0
 8001a1a:	eef0 7a60 	vmov.f32	s15, s1
 8001a1e:	eeb0 0a47 	vmov.f32	s0, s14
 8001a22:	eef0 0a67 	vmov.f32	s1, s15
 8001a26:	f013 f831 	bl	8014a8c <round>
 8001a2a:	ec53 2b10 	vmov	r2, r3, d0
 8001a2e:	4610      	mov	r0, r2
 8001a30:	4619      	mov	r1, r3
 8001a32:	f7ff f891 	bl	8000b58 <__aeabi_d2iz>
 8001a36:	4602      	mov	r2, r0
 8001a38:	490b      	ldr	r1, [pc, #44]	; (8001a68 <Accelerometer_Gyroscope_Calibration+0x700>)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(i = 0; i<2; i++)
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	3301      	adds	r3, #1
 8001a44:	60fb      	str	r3, [r7, #12]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	f77f aeef 	ble.w	800182c <Accelerometer_Gyroscope_Calibration+0x4c4>
	}

	return 0;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bdb0      	pop	{r4, r5, r7, pc}
 8001a58:	00000000 	.word	0x00000000
 8001a5c:	40000000 	.word	0x40000000
 8001a60:	2000095c 	.word	0x2000095c
 8001a64:	20000974 	.word	0x20000974
 8001a68:	2000098c 	.word	0x2000098c

08001a6c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a07      	ldr	r2, [pc, #28]	; (8001a94 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d105      	bne.n	8001a88 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		flag = 1;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001a7e:	2201      	movs	r2, #1
 8001a80:	601a      	str	r2, [r3, #0]
		emg_flag = 1;
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001a84:	2201      	movs	r2, #1
 8001a86:	601a      	str	r2, [r3, #0]
	}

}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	200004b4 	.word	0x200004b4
 8001a98:	20000934 	.word	0x20000934
 8001a9c:	20000938 	.word	0x20000938

08001aa0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001aa4:	b096      	sub	sp, #88	; 0x58
 8001aa6:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aa8:	f001 fc20 	bl	80032ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aac:	f000 f8f8 	bl	8001ca0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab0:	f000 fa4c 	bl	8001f4c <MX_GPIO_Init>
  MX_DMA_Init();
 8001ab4:	f000 fa22 	bl	8001efc <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8001ab8:	f000 f98a 	bl	8001dd0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001abc:	f00a fb9e 	bl	800c1fc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001ac0:	f00f f864 	bl	8010b8c <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001ac4:	f000 f9a4 	bl	8001e10 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001ac8:	f000 f954 	bl	8001d74 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001acc:	f000 f9ec 	bl	8001ea8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  IMU_Initialization();
 8001ad0:	f7ff fc00 	bl	80012d4 <IMU_Initialization>
  Accelerometer_Gyroscope_Calibration();
 8001ad4:	f7ff fc48 	bl	8001368 <Accelerometer_Gyroscope_Calibration>
  HAL_TIM_Base_Start_IT(&htim2);
 8001ad8:	4865      	ldr	r0, [pc, #404]	; (8001c70 <main+0x1d0>)
 8001ada:	f006 fd77 	bl	80085cc <HAL_TIM_Base_Start_IT>

  LSM6DSOX_writeRegister8(&hi2c1, LSM6DSOX_ADDRESS_1, LSM6DSOX_CTRL1_XL, 0x44);
 8001ade:	2344      	movs	r3, #68	; 0x44
 8001ae0:	2210      	movs	r2, #16
 8001ae2:	216a      	movs	r1, #106	; 0x6a
 8001ae4:	4863      	ldr	r0, [pc, #396]	; (8001c74 <main+0x1d4>)
 8001ae6:	f7ff fa9f 	bl	8001028 <LSM6DSOX_writeRegister8>
  LSM6DSOX_writeRegister8(&hi2c1, LSM6DSOX_ADDRESS_2, LSM6DSOX_CTRL1_XL, 0x44);
 8001aea:	2344      	movs	r3, #68	; 0x44
 8001aec:	2210      	movs	r2, #16
 8001aee:	216b      	movs	r1, #107	; 0x6b
 8001af0:	4860      	ldr	r0, [pc, #384]	; (8001c74 <main+0x1d4>)
 8001af2:	f7ff fa99 	bl	8001028 <LSM6DSOX_writeRegister8>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(flag == 1)
 8001af6:	4b60      	ldr	r3, [pc, #384]	; (8001c78 <main+0x1d8>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	f040 8097 	bne.w	8001c2e <main+0x18e>
	  {



		  char temp_buffer[TEMP_BUFFER_SIZE];
		  Gyro_Reading();
 8001b00:	f000 fb68 	bl	80021d4 <Gyro_Reading>
		  n_int++;
 8001b04:	4b5d      	ldr	r3, [pc, #372]	; (8001c7c <main+0x1dc>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	4a5c      	ldr	r2, [pc, #368]	; (8001c7c <main+0x1dc>)
 8001b0c:	6013      	str	r3, [r2, #0]
		  if(n_int == 6)
 8001b0e:	4b5b      	ldr	r3, [pc, #364]	; (8001c7c <main+0x1dc>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	f040 8088 	bne.w	8001c28 <main+0x188>
		  {

			  Acc_Mag_Reading();
 8001b18:	f000 fce4 	bl	80024e4 <Acc_Mag_Reading>
			  SDI();
 8001b1c:	f000 fe02 	bl	8002724 <SDI>
			  //Gyro_Integration_Test();
			  Complementary_filter();
 8001b20:	f000 fed6 	bl	80028d0 <Complementary_filter>

			  int temp_length = sprintf((char*)temp_buffer, "%.3f;%.3f;%.3f;%.3f",
					 Estim_ang[0].pitch, Estim_ang[0].roll, Estim_ang[1].pitch, Estim_ang[1].roll);
 8001b24:	4b56      	ldr	r3, [pc, #344]	; (8001c80 <main+0x1e0>)
 8001b26:	685b      	ldr	r3, [r3, #4]
			  int temp_length = sprintf((char*)temp_buffer, "%.3f;%.3f;%.3f;%.3f",
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fd0d 	bl	8000548 <__aeabi_f2d>
 8001b2e:	4682      	mov	sl, r0
 8001b30:	468b      	mov	fp, r1
					 Estim_ang[0].pitch, Estim_ang[0].roll, Estim_ang[1].pitch, Estim_ang[1].roll);
 8001b32:	4b53      	ldr	r3, [pc, #332]	; (8001c80 <main+0x1e0>)
 8001b34:	681b      	ldr	r3, [r3, #0]
			  int temp_length = sprintf((char*)temp_buffer, "%.3f;%.3f;%.3f;%.3f",
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fd06 	bl	8000548 <__aeabi_f2d>
 8001b3c:	4604      	mov	r4, r0
 8001b3e:	460d      	mov	r5, r1
					 Estim_ang[0].pitch, Estim_ang[0].roll, Estim_ang[1].pitch, Estim_ang[1].roll);
 8001b40:	4b4f      	ldr	r3, [pc, #316]	; (8001c80 <main+0x1e0>)
 8001b42:	68db      	ldr	r3, [r3, #12]
			  int temp_length = sprintf((char*)temp_buffer, "%.3f;%.3f;%.3f;%.3f",
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7fe fcff 	bl	8000548 <__aeabi_f2d>
 8001b4a:	4680      	mov	r8, r0
 8001b4c:	4689      	mov	r9, r1
					 Estim_ang[0].pitch, Estim_ang[0].roll, Estim_ang[1].pitch, Estim_ang[1].roll);
 8001b4e:	4b4c      	ldr	r3, [pc, #304]	; (8001c80 <main+0x1e0>)
 8001b50:	689b      	ldr	r3, [r3, #8]
			  int temp_length = sprintf((char*)temp_buffer, "%.3f;%.3f;%.3f;%.3f",
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe fcf8 	bl	8000548 <__aeabi_f2d>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	1d38      	adds	r0, r7, #4
 8001b5e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b62:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001b66:	e9cd 4500 	strd	r4, r5, [sp]
 8001b6a:	4652      	mov	r2, sl
 8001b6c:	465b      	mov	r3, fp
 8001b6e:	4945      	ldr	r1, [pc, #276]	; (8001c84 <main+0x1e4>)
 8001b70:	f010 f98c 	bl	8011e8c <siprintf>
 8001b74:	63b8      	str	r0, [r7, #56]	; 0x38
			  /*int temp_length = sprintf((char*)temp_buffer, "0.00;0.00;0.00;%.3f;%.3f;%.3f\n",
			  					   Acc_data[0].x, Acc_data[0].y, Acc_data[0].z);

			  CDC_Transmit_FS((uint8_t*)temp_buffer, strlen(temp_buffer));*/

			  for(size_t k = strlen(temp_buffer); k < TEMP_BUFFER_SIZE - 1; k++)
 8001b76:	1d3b      	adds	r3, r7, #4
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fb79 	bl	8000270 <strlen>
 8001b7e:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001b80:	e007      	b.n	8001b92 <main+0xf2>
			  {
				  temp_buffer[k] = ' ';
 8001b82:	1d3a      	adds	r2, r7, #4
 8001b84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b86:	4413      	add	r3, r2
 8001b88:	2220      	movs	r2, #32
 8001b8a:	701a      	strb	r2, [r3, #0]
			  for(size_t k = strlen(temp_buffer); k < TEMP_BUFFER_SIZE - 1; k++)
 8001b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b8e:	3301      	adds	r3, #1
 8001b90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b94:	2b30      	cmp	r3, #48	; 0x30
 8001b96:	d9f4      	bls.n	8001b82 <main+0xe2>
			  }

			  if(buffer_length + TEMP_BUFFER_SIZE >= BUFFER_SIZE)
 8001b98:	4b3b      	ldr	r3, [pc, #236]	; (8001c88 <main+0x1e8>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f240 32b5 	movw	r2, #949	; 0x3b5
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	dd0f      	ble.n	8001bc4 <main+0x124>
			  {

				  //CDC_Transmit_FS((uint8_t*)buf, strlen(buf));
				  AppendToFile(log_path, strlen(log_path), buf, strlen(buf));
 8001ba4:	4839      	ldr	r0, [pc, #228]	; (8001c8c <main+0x1ec>)
 8001ba6:	f7fe fb63 	bl	8000270 <strlen>
 8001baa:	4604      	mov	r4, r0
 8001bac:	4838      	ldr	r0, [pc, #224]	; (8001c90 <main+0x1f0>)
 8001bae:	f7fe fb5f 	bl	8000270 <strlen>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	4a36      	ldr	r2, [pc, #216]	; (8001c90 <main+0x1f0>)
 8001bb6:	4621      	mov	r1, r4
 8001bb8:	4834      	ldr	r0, [pc, #208]	; (8001c8c <main+0x1ec>)
 8001bba:	f000 fa43 	bl	8002044 <AppendToFile>
				  buffer_length = 0;
 8001bbe:	4b32      	ldr	r3, [pc, #200]	; (8001c88 <main+0x1e8>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
			  }

			  if(buffer_length + TEMP_BUFFER_SIZE < BUFFER_SIZE)
 8001bc4:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <main+0x1e8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f240 32b5 	movw	r2, #949	; 0x3b5
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	dc28      	bgt.n	8001c22 <main+0x182>
			  {
				  memcpy(buf + buffer_length, temp_buffer, strlen(temp_buffer));
 8001bd0:	4b2d      	ldr	r3, [pc, #180]	; (8001c88 <main+0x1e8>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b2e      	ldr	r3, [pc, #184]	; (8001c90 <main+0x1f0>)
 8001bd8:	18d4      	adds	r4, r2, r3
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f7fe fb47 	bl	8000270 <strlen>
 8001be2:	4602      	mov	r2, r0
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	4619      	mov	r1, r3
 8001be8:	4620      	mov	r0, r4
 8001bea:	f010 fa57 	bl	801209c <memcpy>
				  buffer_length += strlen(temp_buffer);
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fb3d 	bl	8000270 <strlen>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	4a23      	ldr	r2, [pc, #140]	; (8001c88 <main+0x1e8>)
 8001bfa:	6812      	ldr	r2, [r2, #0]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	461a      	mov	r2, r3
 8001c00:	4b21      	ldr	r3, [pc, #132]	; (8001c88 <main+0x1e8>)
 8001c02:	601a      	str	r2, [r3, #0]
				  buf[buffer_length] = '\n';
 8001c04:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <main+0x1e8>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a21      	ldr	r2, [pc, #132]	; (8001c90 <main+0x1f0>)
 8001c0a:	210a      	movs	r1, #10
 8001c0c:	54d1      	strb	r1, [r2, r3]
				  buffer_length++;
 8001c0e:	4b1e      	ldr	r3, [pc, #120]	; (8001c88 <main+0x1e8>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <main+0x1e8>)
 8001c16:	6013      	str	r3, [r2, #0]
				  buf[buffer_length] = '\0';
 8001c18:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <main+0x1e8>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a1c      	ldr	r2, [pc, #112]	; (8001c90 <main+0x1f0>)
 8001c1e:	2100      	movs	r1, #0
 8001c20:	54d1      	strb	r1, [r2, r3]
				  memset(&SDIareas[i].area_x, 0, sizeof(SDIareas[i].area_x));
				  memset(&SDIareas[i].area_y, 0, sizeof(SDIareas[i].area_y));
				  memset(&SDIareas[i].area_z, 0, sizeof(SDIareas[i].area_z));
			  }*/

			  n_int = 0;
 8001c22:	4b16      	ldr	r3, [pc, #88]	; (8001c7c <main+0x1dc>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
		  }

		  flag = 0;
 8001c28:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <main+0x1d8>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
	  }

	  if(emg_flag == 1)
 8001c2e:	4b19      	ldr	r3, [pc, #100]	; (8001c94 <main+0x1f4>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	f47f af5f 	bne.w	8001af6 <main+0x56>
	  {
		  emg_n_int++;
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <main+0x1f8>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	4a16      	ldr	r2, [pc, #88]	; (8001c98 <main+0x1f8>)
 8001c40:	6013      	str	r3, [r2, #0]
		  if(emg_n_int == 126)
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <main+0x1f8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2b7e      	cmp	r3, #126	; 0x7e
 8001c48:	d10e      	bne.n	8001c68 <main+0x1c8>
		  {
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	2102      	movs	r1, #2
 8001c4e:	4813      	ldr	r0, [pc, #76]	; (8001c9c <main+0x1fc>)
 8001c50:	f002 fab6 	bl	80041c0 <HAL_GPIO_WritePin>
			  EMG_Data_Reception();
 8001c54:	f000 ffce 	bl	8002bf4 <EMG_Data_Reception>
			  emg_n_int = 0;
 8001c58:	4b0f      	ldr	r3, [pc, #60]	; (8001c98 <main+0x1f8>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001c5e:	2200      	movs	r2, #0
 8001c60:	2102      	movs	r1, #2
 8001c62:	480e      	ldr	r0, [pc, #56]	; (8001c9c <main+0x1fc>)
 8001c64:	f002 faac 	bl	80041c0 <HAL_GPIO_WritePin>
		  }
		  emg_flag = 0;
 8001c68:	4b0a      	ldr	r3, [pc, #40]	; (8001c94 <main+0x1f4>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	601a      	str	r2, [r3, #0]
	  if(flag == 1)
 8001c6e:	e742      	b.n	8001af6 <main+0x56>
 8001c70:	200004b4 	.word	0x200004b4
 8001c74:	2000031c 	.word	0x2000031c
 8001c78:	20000934 	.word	0x20000934
 8001c7c:	2000092c 	.word	0x2000092c
 8001c80:	20000a9c 	.word	0x20000a9c
 8001c84:	080156f0 	.word	0x080156f0
 8001c88:	20000928 	.word	0x20000928
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	20000540 	.word	0x20000540
 8001c94:	20000938 	.word	0x20000938
 8001c98:	20000930 	.word	0x20000930
 8001c9c:	40020800 	.word	0x40020800

08001ca0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b094      	sub	sp, #80	; 0x50
 8001ca4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001ca6:	f107 0320 	add.w	r3, r7, #32
 8001caa:	2230      	movs	r2, #48	; 0x30
 8001cac:	2100      	movs	r1, #0
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f010 f9bc 	bl	801202c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001cb4:	f107 030c 	add.w	r3, r7, #12
 8001cb8:	2200      	movs	r2, #0
 8001cba:	601a      	str	r2, [r3, #0]
 8001cbc:	605a      	str	r2, [r3, #4]
 8001cbe:	609a      	str	r2, [r3, #8]
 8001cc0:	60da      	str	r2, [r3, #12]
 8001cc2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	60bb      	str	r3, [r7, #8]
 8001cc8:	4b28      	ldr	r3, [pc, #160]	; (8001d6c <SystemClock_Config+0xcc>)
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	4a27      	ldr	r2, [pc, #156]	; (8001d6c <SystemClock_Config+0xcc>)
 8001cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001cd2:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd4:	4b25      	ldr	r3, [pc, #148]	; (8001d6c <SystemClock_Config+0xcc>)
 8001cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	607b      	str	r3, [r7, #4]
 8001ce4:	4b22      	ldr	r3, [pc, #136]	; (8001d70 <SystemClock_Config+0xd0>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a21      	ldr	r2, [pc, #132]	; (8001d70 <SystemClock_Config+0xd0>)
 8001cea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cee:	6013      	str	r3, [r2, #0]
 8001cf0:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <SystemClock_Config+0xd0>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cf8:	607b      	str	r3, [r7, #4]
 8001cfa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d06:	2302      	movs	r3, #2
 8001d08:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d0a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001d10:	2306      	movs	r3, #6
 8001d12:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d14:	23a8      	movs	r3, #168	; 0xa8
 8001d16:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d18:	2302      	movs	r3, #2
 8001d1a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d1c:	2307      	movs	r3, #7
 8001d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d20:	f107 0320 	add.w	r3, r7, #32
 8001d24:	4618      	mov	r0, r3
 8001d26:	f004 fc77 	bl	8006618 <HAL_RCC_OscConfig>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d30:	f000 ff88 	bl	8002c44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d34:	230f      	movs	r3, #15
 8001d36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d38:	2302      	movs	r3, #2
 8001d3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001d40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001d44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001d46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	2105      	movs	r1, #5
 8001d52:	4618      	mov	r0, r3
 8001d54:	f004 fed8 	bl	8006b08 <HAL_RCC_ClockConfig>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001d5e:	f000 ff71 	bl	8002c44 <Error_Handler>
  }
}
 8001d62:	bf00      	nop
 8001d64:	3750      	adds	r7, #80	; 0x50
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	40007000 	.word	0x40007000

08001d74 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001d78:	4b12      	ldr	r3, [pc, #72]	; (8001dc4 <MX_I2C1_Init+0x50>)
 8001d7a:	4a13      	ldr	r2, [pc, #76]	; (8001dc8 <MX_I2C1_Init+0x54>)
 8001d7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001d7e:	4b11      	ldr	r3, [pc, #68]	; (8001dc4 <MX_I2C1_Init+0x50>)
 8001d80:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <MX_I2C1_Init+0x58>)
 8001d82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d84:	4b0f      	ldr	r3, [pc, #60]	; (8001dc4 <MX_I2C1_Init+0x50>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001d8a:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <MX_I2C1_Init+0x50>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <MX_I2C1_Init+0x50>)
 8001d92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d98:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <MX_I2C1_Init+0x50>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001d9e:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <MX_I2C1_Init+0x50>)
 8001da0:	2200      	movs	r2, #0
 8001da2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001da4:	4b07      	ldr	r3, [pc, #28]	; (8001dc4 <MX_I2C1_Init+0x50>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001daa:	4b06      	ldr	r3, [pc, #24]	; (8001dc4 <MX_I2C1_Init+0x50>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001db0:	4804      	ldr	r0, [pc, #16]	; (8001dc4 <MX_I2C1_Init+0x50>)
 8001db2:	f002 fa1f 	bl	80041f4 <HAL_I2C_Init>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001dbc:	f000 ff42 	bl	8002c44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001dc0:	bf00      	nop
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	2000031c 	.word	0x2000031c
 8001dc8:	40005400 	.word	0x40005400
 8001dcc:	00061a80 	.word	0x00061a80

08001dd0 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <MX_SDIO_SD_Init+0x38>)
 8001dd6:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <MX_SDIO_SD_Init+0x3c>)
 8001dd8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001dda:	4b0b      	ldr	r3, [pc, #44]	; (8001e08 <MX_SDIO_SD_Init+0x38>)
 8001ddc:	2200      	movs	r2, #0
 8001dde:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001de0:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <MX_SDIO_SD_Init+0x38>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001de6:	4b08      	ldr	r3, [pc, #32]	; (8001e08 <MX_SDIO_SD_Init+0x38>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001dec:	4b06      	ldr	r3, [pc, #24]	; (8001e08 <MX_SDIO_SD_Init+0x38>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001df2:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <MX_SDIO_SD_Init+0x38>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001df8:	4b03      	ldr	r3, [pc, #12]	; (8001e08 <MX_SDIO_SD_Init+0x38>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001dfe:	bf00      	nop
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	20000370 	.word	0x20000370
 8001e0c:	40012c00 	.word	0x40012c00

08001e10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b086      	sub	sp, #24
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e16:	f107 0308 	add.w	r3, r7, #8
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]
 8001e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e24:	463b      	mov	r3, r7
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e2c:	4b1d      	ldr	r3, [pc, #116]	; (8001ea4 <MX_TIM2_Init+0x94>)
 8001e2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4200-1;
 8001e34:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <MX_TIM2_Init+0x94>)
 8001e36:	f241 0267 	movw	r2, #4199	; 0x1067
 8001e3a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e3c:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <MX_TIM2_Init+0x94>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 33-1;
 8001e42:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <MX_TIM2_Init+0x94>)
 8001e44:	2220      	movs	r2, #32
 8001e46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e48:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <MX_TIM2_Init+0x94>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <MX_TIM2_Init+0x94>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e54:	4813      	ldr	r0, [pc, #76]	; (8001ea4 <MX_TIM2_Init+0x94>)
 8001e56:	f006 fb6a 	bl	800852e <HAL_TIM_Base_Init>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d001      	beq.n	8001e64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001e60:	f000 fef0 	bl	8002c44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e6a:	f107 0308 	add.w	r3, r7, #8
 8001e6e:	4619      	mov	r1, r3
 8001e70:	480c      	ldr	r0, [pc, #48]	; (8001ea4 <MX_TIM2_Init+0x94>)
 8001e72:	f006 fd23 	bl	80088bc <HAL_TIM_ConfigClockSource>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001e7c:	f000 fee2 	bl	8002c44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e80:	2300      	movs	r3, #0
 8001e82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e84:	2300      	movs	r3, #0
 8001e86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e88:	463b      	mov	r3, r7
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_TIM2_Init+0x94>)
 8001e8e:	f006 ff3f 	bl	8008d10 <HAL_TIMEx_MasterConfigSynchronization>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001e98:	f000 fed4 	bl	8002c44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e9c:	bf00      	nop
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	200004b4 	.word	0x200004b4

08001ea8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001eac:	4b10      	ldr	r3, [pc, #64]	; (8001ef0 <MX_USART3_UART_Init+0x48>)
 8001eae:	4a11      	ldr	r2, [pc, #68]	; (8001ef4 <MX_USART3_UART_Init+0x4c>)
 8001eb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 249600;
 8001eb2:	4b0f      	ldr	r3, [pc, #60]	; (8001ef0 <MX_USART3_UART_Init+0x48>)
 8001eb4:	4a10      	ldr	r2, [pc, #64]	; (8001ef8 <MX_USART3_UART_Init+0x50>)
 8001eb6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <MX_USART3_UART_Init+0x48>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ebe:	4b0c      	ldr	r3, [pc, #48]	; (8001ef0 <MX_USART3_UART_Init+0x48>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <MX_USART3_UART_Init+0x48>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001eca:	4b09      	ldr	r3, [pc, #36]	; (8001ef0 <MX_USART3_UART_Init+0x48>)
 8001ecc:	220c      	movs	r2, #12
 8001ece:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ed0:	4b07      	ldr	r3, [pc, #28]	; (8001ef0 <MX_USART3_UART_Init+0x48>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <MX_USART3_UART_Init+0x48>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001edc:	4804      	ldr	r0, [pc, #16]	; (8001ef0 <MX_USART3_UART_Init+0x48>)
 8001ede:	f006 ffa7 	bl	8008e30 <HAL_UART_Init>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8001ee8:	f000 feac 	bl	8002c44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001eec:	bf00      	nop
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	200004fc 	.word	0x200004fc
 8001ef4:	40004800 	.word	0x40004800
 8001ef8:	0003cf00 	.word	0x0003cf00

08001efc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f02:	2300      	movs	r3, #0
 8001f04:	607b      	str	r3, [r7, #4]
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <MX_DMA_Init+0x4c>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	4a0f      	ldr	r2, [pc, #60]	; (8001f48 <MX_DMA_Init+0x4c>)
 8001f0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f10:	6313      	str	r3, [r2, #48]	; 0x30
 8001f12:	4b0d      	ldr	r3, [pc, #52]	; (8001f48 <MX_DMA_Init+0x4c>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f1a:	607b      	str	r3, [r7, #4]
 8001f1c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2100      	movs	r1, #0
 8001f22:	203b      	movs	r0, #59	; 0x3b
 8001f24:	f001 fb53 	bl	80035ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001f28:	203b      	movs	r0, #59	; 0x3b
 8001f2a:	f001 fb6c 	bl	8003606 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2100      	movs	r1, #0
 8001f32:	2045      	movs	r0, #69	; 0x45
 8001f34:	f001 fb4b 	bl	80035ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001f38:	2045      	movs	r0, #69	; 0x45
 8001f3a:	f001 fb64 	bl	8003606 <HAL_NVIC_EnableIRQ>

}
 8001f3e:	bf00      	nop
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	40023800 	.word	0x40023800

08001f4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08a      	sub	sp, #40	; 0x28
 8001f50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f52:	f107 0314 	add.w	r3, r7, #20
 8001f56:	2200      	movs	r2, #0
 8001f58:	601a      	str	r2, [r3, #0]
 8001f5a:	605a      	str	r2, [r3, #4]
 8001f5c:	609a      	str	r2, [r3, #8]
 8001f5e:	60da      	str	r2, [r3, #12]
 8001f60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b34      	ldr	r3, [pc, #208]	; (8002038 <MX_GPIO_Init+0xec>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a33      	ldr	r2, [pc, #204]	; (8002038 <MX_GPIO_Init+0xec>)
 8001f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b31      	ldr	r3, [pc, #196]	; (8002038 <MX_GPIO_Init+0xec>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7e:	2300      	movs	r3, #0
 8001f80:	60fb      	str	r3, [r7, #12]
 8001f82:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <MX_GPIO_Init+0xec>)
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	4a2c      	ldr	r2, [pc, #176]	; (8002038 <MX_GPIO_Init+0xec>)
 8001f88:	f043 0304 	orr.w	r3, r3, #4
 8001f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f8e:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <MX_GPIO_Init+0xec>)
 8001f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f92:	f003 0304 	and.w	r3, r3, #4
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	4b26      	ldr	r3, [pc, #152]	; (8002038 <MX_GPIO_Init+0xec>)
 8001fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa2:	4a25      	ldr	r2, [pc, #148]	; (8002038 <MX_GPIO_Init+0xec>)
 8001fa4:	f043 0302 	orr.w	r3, r3, #2
 8001fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001faa:	4b23      	ldr	r3, [pc, #140]	; (8002038 <MX_GPIO_Init+0xec>)
 8001fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	60bb      	str	r3, [r7, #8]
 8001fb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	607b      	str	r3, [r7, #4]
 8001fba:	4b1f      	ldr	r3, [pc, #124]	; (8002038 <MX_GPIO_Init+0xec>)
 8001fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fbe:	4a1e      	ldr	r2, [pc, #120]	; (8002038 <MX_GPIO_Init+0xec>)
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc6:	4b1c      	ldr	r3, [pc, #112]	; (8002038 <MX_GPIO_Init+0xec>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	607b      	str	r3, [r7, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	603b      	str	r3, [r7, #0]
 8001fd6:	4b18      	ldr	r3, [pc, #96]	; (8002038 <MX_GPIO_Init+0xec>)
 8001fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fda:	4a17      	ldr	r2, [pc, #92]	; (8002038 <MX_GPIO_Init+0xec>)
 8001fdc:	f043 0308 	orr.w	r3, r3, #8
 8001fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe2:	4b15      	ldr	r3, [pc, #84]	; (8002038 <MX_GPIO_Init+0xec>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	603b      	str	r3, [r7, #0]
 8001fec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001fee:	2200      	movs	r2, #0
 8001ff0:	2106      	movs	r1, #6
 8001ff2:	4812      	ldr	r0, [pc, #72]	; (800203c <MX_GPIO_Init+0xf0>)
 8001ff4:	f002 f8e4 	bl	80041c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001ff8:	2306      	movs	r3, #6
 8001ffa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002000:	2300      	movs	r3, #0
 8002002:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002004:	2300      	movs	r3, #0
 8002006:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	4619      	mov	r1, r3
 800200e:	480b      	ldr	r0, [pc, #44]	; (800203c <MX_GPIO_Init+0xf0>)
 8002010:	f001 ff22 	bl	8003e58 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002014:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002018:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800201a:	2300      	movs	r3, #0
 800201c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800201e:	2300      	movs	r3, #0
 8002020:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002022:	f107 0314 	add.w	r3, r7, #20
 8002026:	4619      	mov	r1, r3
 8002028:	4805      	ldr	r0, [pc, #20]	; (8002040 <MX_GPIO_Init+0xf4>)
 800202a:	f001 ff15 	bl	8003e58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 800202e:	bf00      	nop
 8002030:	3728      	adds	r7, #40	; 0x28
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40023800 	.word	0x40023800
 800203c:	40020800 	.word	0x40020800
 8002040:	40020400 	.word	0x40020400

08002044 <AppendToFile>:

/* USER CODE BEGIN 4 */

FRESULT AppendToFile(char* path, size_t path_len, char* buf, size_t buf_len)
{
 8002044:	b590      	push	{r4, r7, lr}
 8002046:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 800204a:	b081      	sub	sp, #4
 800204c:	af00      	add	r7, sp, #0
 800204e:	f107 0480 	add.w	r4, r7, #128	; 0x80
 8002052:	f844 0c74 	str.w	r0, [r4, #-116]
 8002056:	f107 0080 	add.w	r0, r7, #128	; 0x80
 800205a:	f840 1c78 	str.w	r1, [r0, #-120]
 800205e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002062:	f841 2c7c 	str.w	r2, [r1, #-124]
 8002066:	f107 0280 	add.w	r2, r7, #128	; 0x80
 800206a:	f842 3c80 	str.w	r3, [r2, #-128]
	}
	if ( FATFS_LinkDriver(&SD_Driver, SDPath) != 0 ) {
		return FR_NOT_READY;
	}*/

	stat = f_mount(&myFatFS, SDPath, 0);
 800206e:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8002072:	3b18      	subs	r3, #24
 8002074:	2200      	movs	r2, #0
 8002076:	4942      	ldr	r1, [pc, #264]	; (8002180 <AppendToFile+0x13c>)
 8002078:	4618      	mov	r0, r3
 800207a:	f00e f8dd 	bl	8010238 <f_mount>
 800207e:	4603      	mov	r3, r0
 8002080:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8002084:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8002088:	7013      	strb	r3, [r2, #0]
	if(stat != FR_OK)
 800208a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800208e:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d00a      	beq.n	80020ae <AppendToFile+0x6a>
	{
		f_mount(0, SDPath, 0);
 8002098:	2200      	movs	r2, #0
 800209a:	4939      	ldr	r1, [pc, #228]	; (8002180 <AppendToFile+0x13c>)
 800209c:	2000      	movs	r0, #0
 800209e:	f00e f8cb 	bl	8010238 <f_mount>
		return stat;
 80020a2:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80020a6:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	e061      	b.n	8002172 <AppendToFile+0x12e>
	}

	stat = f_open(&myFile, path, FA_WRITE | FA_OPEN_APPEND);
 80020ae:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80020b2:	4619      	mov	r1, r3
 80020b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020b8:	3b28      	subs	r3, #40	; 0x28
 80020ba:	2232      	movs	r2, #50	; 0x32
 80020bc:	f851 1c74 	ldr.w	r1, [r1, #-116]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f00e f8ff 	bl	80102c4 <f_open>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80020cc:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 80020d0:	7013      	strb	r3, [r2, #0]
	if(stat != FR_OK)
 80020d2:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80020d6:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00a      	beq.n	80020f6 <AppendToFile+0xb2>
	{
		f_mount(0, SDPath, 0);
 80020e0:	2200      	movs	r2, #0
 80020e2:	4927      	ldr	r1, [pc, #156]	; (8002180 <AppendToFile+0x13c>)
 80020e4:	2000      	movs	r0, #0
 80020e6:	f00e f8a7 	bl	8010238 <f_mount>
		return stat;
 80020ea:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80020ee:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	e03d      	b.n	8002172 <AppendToFile+0x12e>
	}

	stat = f_write(&myFile, buf, buf_len, &myBytes);
 80020f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80020fa:	3b2c      	subs	r3, #44	; 0x2c
 80020fc:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002100:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002104:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002108:	3828      	subs	r0, #40	; 0x28
 800210a:	f852 2c80 	ldr.w	r2, [r2, #-128]
 800210e:	f851 1c7c 	ldr.w	r1, [r1, #-124]
 8002112:	f00e faa3 	bl	801065c <f_write>
 8002116:	4603      	mov	r3, r0
 8002118:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800211c:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8002120:	7013      	strb	r3, [r2, #0]
	if(stat != FR_OK)
 8002122:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8002126:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00a      	beq.n	8002146 <AppendToFile+0x102>
	{
		f_mount(0, SDPath, 0);
 8002130:	2200      	movs	r2, #0
 8002132:	4913      	ldr	r1, [pc, #76]	; (8002180 <AppendToFile+0x13c>)
 8002134:	2000      	movs	r0, #0
 8002136:	f00e f87f 	bl	8010238 <f_mount>
		return stat;
 800213a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800213e:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	e015      	b.n	8002172 <AppendToFile+0x12e>
	}

	stat = f_close(&myFile);
 8002146:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800214a:	3b28      	subs	r3, #40	; 0x28
 800214c:	4618      	mov	r0, r3
 800214e:	f00e fc97 	bl	8010a80 <f_close>
 8002152:	4603      	mov	r3, r0
 8002154:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 8002158:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 800215c:	7013      	strb	r3, [r2, #0]

	f_mount(0, SDPath, 0);
 800215e:	2200      	movs	r2, #0
 8002160:	4907      	ldr	r1, [pc, #28]	; (8002180 <AppendToFile+0x13c>)
 8002162:	2000      	movs	r0, #0
 8002164:	f00e f868 	bl	8010238 <f_mount>

	return stat;
 8002168:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800216c:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8002170:	781b      	ldrb	r3, [r3, #0]

}
 8002172:	4618      	mov	r0, r3
 8002174:	f507 5702 	add.w	r7, r7, #8320	; 0x2080
 8002178:	3704      	adds	r7, #4
 800217a:	46bd      	mov	sp, r7
 800217c:	bd90      	pop	{r4, r7, pc}
 800217e:	bf00      	nop
 8002180:	20000ab8 	.word	0x20000ab8

08002184 <BlinkLED>:


void BlinkLED(uint32_t blink_delay, uint8_t num_blinks) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	70fb      	strb	r3, [r7, #3]
  for ( int i = 0; i < num_blinks; i++ ) {
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	e012      	b.n	80021bc <BlinkLED+0x38>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8002196:	2201      	movs	r2, #1
 8002198:	2102      	movs	r1, #2
 800219a:	480d      	ldr	r0, [pc, #52]	; (80021d0 <BlinkLED+0x4c>)
 800219c:	f002 f810 	bl	80041c0 <HAL_GPIO_WritePin>
    HAL_Delay(blink_delay);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f001 f915 	bl	80033d0 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80021a6:	2200      	movs	r2, #0
 80021a8:	2102      	movs	r1, #2
 80021aa:	4809      	ldr	r0, [pc, #36]	; (80021d0 <BlinkLED+0x4c>)
 80021ac:	f002 f808 	bl	80041c0 <HAL_GPIO_WritePin>
    HAL_Delay(blink_delay);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f001 f90d 	bl	80033d0 <HAL_Delay>
  for ( int i = 0; i < num_blinks; i++ ) {
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	3301      	adds	r3, #1
 80021ba:	60fb      	str	r3, [r7, #12]
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	dbe8      	blt.n	8002196 <BlinkLED+0x12>
  }
}
 80021c4:	bf00      	nop
 80021c6:	bf00      	nop
 80021c8:	3710      	adds	r7, #16
 80021ca:	46bd      	mov	sp, r7
 80021cc:	bd80      	pop	{r7, pc}
 80021ce:	bf00      	nop
 80021d0:	40020800 	.word	0x40020800

080021d4 <Gyro_Reading>:

void Gyro_Reading()
{
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b08d      	sub	sp, #52	; 0x34
 80021d8:	af02      	add	r7, sp, #8
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
	int i;
	char test_buffer[30];
	for(i = 0;i < 2;i++)
 80021da:	2300      	movs	r3, #0
 80021dc:	627b      	str	r3, [r7, #36]	; 0x24
 80021de:	e16f      	b.n	80024c0 <Gyro_Reading+0x2ec>
	{
		switch(i)
 80021e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d004      	beq.n	80021f0 <Gyro_Reading+0x1c>
 80021e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	f000 80b2 	beq.w	8002352 <Gyro_Reading+0x17e>
 80021ee:	e164      	b.n	80024ba <Gyro_Reading+0x2e6>
		{
			case 0:
				if(LSM6DSOX_gyroscopeAvailable(&hi2c1, LSM6DSOX_ADDRESS_1)==1)
 80021f0:	216a      	movs	r1, #106	; 0x6a
 80021f2:	48b8      	ldr	r0, [pc, #736]	; (80024d4 <Gyro_Reading+0x300>)
 80021f4:	f7ff f822 	bl	800123c <LSM6DSOX_gyroscopeAvailable>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b01      	cmp	r3, #1
 80021fc:	f040 815a 	bne.w	80024b4 <Gyro_Reading+0x2e0>
				{
					LSM6DSOX_readGyroscope(&hi2c1, LSM6DSOX_ADDRESS_1, &Gyro_data[i].x[n_int-1], &Gyro_data[i].y[n_int-1], &Gyro_data[i].z[n_int-1]);
 8002200:	4bb5      	ldr	r3, [pc, #724]	; (80024d8 <Gyro_Reading+0x304>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	1e59      	subs	r1, r3, #1
 8002206:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002208:	4613      	mov	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	4413      	add	r3, r2
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	440b      	add	r3, r1
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	4ab1      	ldr	r2, [pc, #708]	; (80024dc <Gyro_Reading+0x308>)
 8002216:	1898      	adds	r0, r3, r2
 8002218:	4baf      	ldr	r3, [pc, #700]	; (80024d8 <Gyro_Reading+0x304>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	1e59      	subs	r1, r3, #1
 800221e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002220:	4613      	mov	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	4413      	add	r3, r2
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	440b      	add	r3, r1
 800222a:	3306      	adds	r3, #6
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4aab      	ldr	r2, [pc, #684]	; (80024dc <Gyro_Reading+0x308>)
 8002230:	189c      	adds	r4, r3, r2
 8002232:	4ba9      	ldr	r3, [pc, #676]	; (80024d8 <Gyro_Reading+0x304>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	1e59      	subs	r1, r3, #1
 8002238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223a:	4613      	mov	r3, r2
 800223c:	00db      	lsls	r3, r3, #3
 800223e:	4413      	add	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	440b      	add	r3, r1
 8002244:	330c      	adds	r3, #12
 8002246:	009b      	lsls	r3, r3, #2
 8002248:	4aa4      	ldr	r2, [pc, #656]	; (80024dc <Gyro_Reading+0x308>)
 800224a:	4413      	add	r3, r2
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	4623      	mov	r3, r4
 8002250:	4602      	mov	r2, r0
 8002252:	216a      	movs	r1, #106	; 0x6a
 8002254:	489f      	ldr	r0, [pc, #636]	; (80024d4 <Gyro_Reading+0x300>)
 8002256:	f7fe ff95 	bl	8001184 <LSM6DSOX_readGyroscope>
					Gyro_data[i].x[n_int-1] -= gyroscope_offset[i][0];
 800225a:	4b9f      	ldr	r3, [pc, #636]	; (80024d8 <Gyro_Reading+0x304>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	1e59      	subs	r1, r3, #1
 8002260:	489e      	ldr	r0, [pc, #632]	; (80024dc <Gyro_Reading+0x308>)
 8002262:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	005b      	lsls	r3, r3, #1
 800226c:	440b      	add	r3, r1
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4403      	add	r3, r0
 8002272:	ed93 7a00 	vldr	s14, [r3]
 8002276:	499a      	ldr	r1, [pc, #616]	; (80024e0 <Gyro_Reading+0x30c>)
 8002278:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800227a:	4613      	mov	r3, r2
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	edd3 7a00 	vldr	s15, [r3]
 8002288:	4b93      	ldr	r3, [pc, #588]	; (80024d8 <Gyro_Reading+0x304>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	1e59      	subs	r1, r3, #1
 800228e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002292:	4892      	ldr	r0, [pc, #584]	; (80024dc <Gyro_Reading+0x308>)
 8002294:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002296:	4613      	mov	r3, r2
 8002298:	00db      	lsls	r3, r3, #3
 800229a:	4413      	add	r3, r2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	440b      	add	r3, r1
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4403      	add	r3, r0
 80022a4:	edc3 7a00 	vstr	s15, [r3]
					Gyro_data[i].y[n_int-1] -= gyroscope_offset[i][1];
 80022a8:	4b8b      	ldr	r3, [pc, #556]	; (80024d8 <Gyro_Reading+0x304>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	1e59      	subs	r1, r3, #1
 80022ae:	488b      	ldr	r0, [pc, #556]	; (80024dc <Gyro_Reading+0x308>)
 80022b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022b2:	4613      	mov	r3, r2
 80022b4:	00db      	lsls	r3, r3, #3
 80022b6:	4413      	add	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	440b      	add	r3, r1
 80022bc:	3306      	adds	r3, #6
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4403      	add	r3, r0
 80022c2:	ed93 7a00 	vldr	s14, [r3]
 80022c6:	4986      	ldr	r1, [pc, #536]	; (80024e0 <Gyro_Reading+0x30c>)
 80022c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ca:	4613      	mov	r3, r2
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	3304      	adds	r3, #4
 80022d6:	edd3 7a00 	vldr	s15, [r3]
 80022da:	4b7f      	ldr	r3, [pc, #508]	; (80024d8 <Gyro_Reading+0x304>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	1e59      	subs	r1, r3, #1
 80022e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022e4:	487d      	ldr	r0, [pc, #500]	; (80024dc <Gyro_Reading+0x308>)
 80022e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022e8:	4613      	mov	r3, r2
 80022ea:	00db      	lsls	r3, r3, #3
 80022ec:	4413      	add	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	440b      	add	r3, r1
 80022f2:	3306      	adds	r3, #6
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4403      	add	r3, r0
 80022f8:	edc3 7a00 	vstr	s15, [r3]
					Gyro_data[i].z[n_int-1] -= gyroscope_offset[i][2];
 80022fc:	4b76      	ldr	r3, [pc, #472]	; (80024d8 <Gyro_Reading+0x304>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	1e59      	subs	r1, r3, #1
 8002302:	4876      	ldr	r0, [pc, #472]	; (80024dc <Gyro_Reading+0x308>)
 8002304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002306:	4613      	mov	r3, r2
 8002308:	00db      	lsls	r3, r3, #3
 800230a:	4413      	add	r3, r2
 800230c:	005b      	lsls	r3, r3, #1
 800230e:	440b      	add	r3, r1
 8002310:	330c      	adds	r3, #12
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	4403      	add	r3, r0
 8002316:	ed93 7a00 	vldr	s14, [r3]
 800231a:	4971      	ldr	r1, [pc, #452]	; (80024e0 <Gyro_Reading+0x30c>)
 800231c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800231e:	4613      	mov	r3, r2
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	4413      	add	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	440b      	add	r3, r1
 8002328:	3308      	adds	r3, #8
 800232a:	edd3 7a00 	vldr	s15, [r3]
 800232e:	4b6a      	ldr	r3, [pc, #424]	; (80024d8 <Gyro_Reading+0x304>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	1e59      	subs	r1, r3, #1
 8002334:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002338:	4868      	ldr	r0, [pc, #416]	; (80024dc <Gyro_Reading+0x308>)
 800233a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800233c:	4613      	mov	r3, r2
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4413      	add	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	440b      	add	r3, r1
 8002346:	330c      	adds	r3, #12
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	4403      	add	r3, r0
 800234c:	edc3 7a00 	vstr	s15, [r3]
				}
				break;
 8002350:	e0b0      	b.n	80024b4 <Gyro_Reading+0x2e0>

			case 1:
				if(LSM6DSOX_gyroscopeAvailable(&hi2c1, LSM6DSOX_ADDRESS_2)==1)
 8002352:	216b      	movs	r1, #107	; 0x6b
 8002354:	485f      	ldr	r0, [pc, #380]	; (80024d4 <Gyro_Reading+0x300>)
 8002356:	f7fe ff71 	bl	800123c <LSM6DSOX_gyroscopeAvailable>
 800235a:	4603      	mov	r3, r0
 800235c:	2b01      	cmp	r3, #1
 800235e:	f040 80ab 	bne.w	80024b8 <Gyro_Reading+0x2e4>
				{
					LSM6DSOX_readGyroscope(&hi2c1, LSM6DSOX_ADDRESS_2, &Gyro_data[i].x[n_int-1], &Gyro_data[i].y[n_int-1], &Gyro_data[i].z[n_int-1]);
 8002362:	4b5d      	ldr	r3, [pc, #372]	; (80024d8 <Gyro_Reading+0x304>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	1e59      	subs	r1, r3, #1
 8002368:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800236a:	4613      	mov	r3, r2
 800236c:	00db      	lsls	r3, r3, #3
 800236e:	4413      	add	r3, r2
 8002370:	005b      	lsls	r3, r3, #1
 8002372:	440b      	add	r3, r1
 8002374:	009b      	lsls	r3, r3, #2
 8002376:	4a59      	ldr	r2, [pc, #356]	; (80024dc <Gyro_Reading+0x308>)
 8002378:	1898      	adds	r0, r3, r2
 800237a:	4b57      	ldr	r3, [pc, #348]	; (80024d8 <Gyro_Reading+0x304>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	1e59      	subs	r1, r3, #1
 8002380:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002382:	4613      	mov	r3, r2
 8002384:	00db      	lsls	r3, r3, #3
 8002386:	4413      	add	r3, r2
 8002388:	005b      	lsls	r3, r3, #1
 800238a:	440b      	add	r3, r1
 800238c:	3306      	adds	r3, #6
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	4a52      	ldr	r2, [pc, #328]	; (80024dc <Gyro_Reading+0x308>)
 8002392:	189c      	adds	r4, r3, r2
 8002394:	4b50      	ldr	r3, [pc, #320]	; (80024d8 <Gyro_Reading+0x304>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	1e59      	subs	r1, r3, #1
 800239a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800239c:	4613      	mov	r3, r2
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4413      	add	r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	440b      	add	r3, r1
 80023a6:	330c      	adds	r3, #12
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4a4c      	ldr	r2, [pc, #304]	; (80024dc <Gyro_Reading+0x308>)
 80023ac:	4413      	add	r3, r2
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	4623      	mov	r3, r4
 80023b2:	4602      	mov	r2, r0
 80023b4:	216b      	movs	r1, #107	; 0x6b
 80023b6:	4847      	ldr	r0, [pc, #284]	; (80024d4 <Gyro_Reading+0x300>)
 80023b8:	f7fe fee4 	bl	8001184 <LSM6DSOX_readGyroscope>
					Gyro_data[i].x[n_int-1] -= gyroscope_offset[i][0];
 80023bc:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <Gyro_Reading+0x304>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	1e59      	subs	r1, r3, #1
 80023c2:	4846      	ldr	r0, [pc, #280]	; (80024dc <Gyro_Reading+0x308>)
 80023c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	440b      	add	r3, r1
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	4403      	add	r3, r0
 80023d4:	ed93 7a00 	vldr	s14, [r3]
 80023d8:	4941      	ldr	r1, [pc, #260]	; (80024e0 <Gyro_Reading+0x30c>)
 80023da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023dc:	4613      	mov	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	009b      	lsls	r3, r3, #2
 80023e4:	440b      	add	r3, r1
 80023e6:	edd3 7a00 	vldr	s15, [r3]
 80023ea:	4b3b      	ldr	r3, [pc, #236]	; (80024d8 <Gyro_Reading+0x304>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	1e59      	subs	r1, r3, #1
 80023f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023f4:	4839      	ldr	r0, [pc, #228]	; (80024dc <Gyro_Reading+0x308>)
 80023f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023f8:	4613      	mov	r3, r2
 80023fa:	00db      	lsls	r3, r3, #3
 80023fc:	4413      	add	r3, r2
 80023fe:	005b      	lsls	r3, r3, #1
 8002400:	440b      	add	r3, r1
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	4403      	add	r3, r0
 8002406:	edc3 7a00 	vstr	s15, [r3]
					Gyro_data[i].y[n_int-1] -= gyroscope_offset[i][1];
 800240a:	4b33      	ldr	r3, [pc, #204]	; (80024d8 <Gyro_Reading+0x304>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	1e59      	subs	r1, r3, #1
 8002410:	4832      	ldr	r0, [pc, #200]	; (80024dc <Gyro_Reading+0x308>)
 8002412:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4413      	add	r3, r2
 800241a:	005b      	lsls	r3, r3, #1
 800241c:	440b      	add	r3, r1
 800241e:	3306      	adds	r3, #6
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4403      	add	r3, r0
 8002424:	ed93 7a00 	vldr	s14, [r3]
 8002428:	492d      	ldr	r1, [pc, #180]	; (80024e0 <Gyro_Reading+0x30c>)
 800242a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800242c:	4613      	mov	r3, r2
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	4413      	add	r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	440b      	add	r3, r1
 8002436:	3304      	adds	r3, #4
 8002438:	edd3 7a00 	vldr	s15, [r3]
 800243c:	4b26      	ldr	r3, [pc, #152]	; (80024d8 <Gyro_Reading+0x304>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	1e59      	subs	r1, r3, #1
 8002442:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002446:	4825      	ldr	r0, [pc, #148]	; (80024dc <Gyro_Reading+0x308>)
 8002448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244a:	4613      	mov	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4413      	add	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	440b      	add	r3, r1
 8002454:	3306      	adds	r3, #6
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4403      	add	r3, r0
 800245a:	edc3 7a00 	vstr	s15, [r3]
					Gyro_data[i].z[n_int-1] -= gyroscope_offset[i][2];
 800245e:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <Gyro_Reading+0x304>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	1e59      	subs	r1, r3, #1
 8002464:	481d      	ldr	r0, [pc, #116]	; (80024dc <Gyro_Reading+0x308>)
 8002466:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002468:	4613      	mov	r3, r2
 800246a:	00db      	lsls	r3, r3, #3
 800246c:	4413      	add	r3, r2
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	440b      	add	r3, r1
 8002472:	330c      	adds	r3, #12
 8002474:	009b      	lsls	r3, r3, #2
 8002476:	4403      	add	r3, r0
 8002478:	ed93 7a00 	vldr	s14, [r3]
 800247c:	4918      	ldr	r1, [pc, #96]	; (80024e0 <Gyro_Reading+0x30c>)
 800247e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002480:	4613      	mov	r3, r2
 8002482:	005b      	lsls	r3, r3, #1
 8002484:	4413      	add	r3, r2
 8002486:	009b      	lsls	r3, r3, #2
 8002488:	440b      	add	r3, r1
 800248a:	3308      	adds	r3, #8
 800248c:	edd3 7a00 	vldr	s15, [r3]
 8002490:	4b11      	ldr	r3, [pc, #68]	; (80024d8 <Gyro_Reading+0x304>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	1e59      	subs	r1, r3, #1
 8002496:	ee77 7a67 	vsub.f32	s15, s14, s15
 800249a:	4810      	ldr	r0, [pc, #64]	; (80024dc <Gyro_Reading+0x308>)
 800249c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800249e:	4613      	mov	r3, r2
 80024a0:	00db      	lsls	r3, r3, #3
 80024a2:	4413      	add	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	440b      	add	r3, r1
 80024a8:	330c      	adds	r3, #12
 80024aa:	009b      	lsls	r3, r3, #2
 80024ac:	4403      	add	r3, r0
 80024ae:	edc3 7a00 	vstr	s15, [r3]
				}
				break;
 80024b2:	e001      	b.n	80024b8 <Gyro_Reading+0x2e4>
				break;
 80024b4:	bf00      	nop
 80024b6:	e000      	b.n	80024ba <Gyro_Reading+0x2e6>
				break;
 80024b8:	bf00      	nop
	for(i = 0;i < 2;i++)
 80024ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024bc:	3301      	adds	r3, #1
 80024be:	627b      	str	r3, [r7, #36]	; 0x24
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	f77f ae8c 	ble.w	80021e0 <Gyro_Reading+0xc>
		}
	}
	/*sprintf((char*)test_buffer, "%.3f;%.3f;%.3f;0.000;0.000;0.000\n", Gyro_data[0].x[n_int-1], Gyro_data[0].y[n_int-1], Gyro_data[0].z[n_int-1]);
	CDC_Transmit_FS((uint8_t*)test_buffer, strlen(test_buffer));
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);*/
}
 80024c8:	bf00      	nop
 80024ca:	bf00      	nop
 80024cc:	372c      	adds	r7, #44	; 0x2c
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd90      	pop	{r4, r7, pc}
 80024d2:	bf00      	nop
 80024d4:	2000031c 	.word	0x2000031c
 80024d8:	2000092c 	.word	0x2000092c
 80024dc:	200009c4 	.word	0x200009c4
 80024e0:	20000974 	.word	0x20000974

080024e4 <Acc_Mag_Reading>:

void Acc_Mag_Reading()
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af02      	add	r7, sp, #8

	int i;

	for(i = 0;i < 2;i++)
 80024ea:	2300      	movs	r3, #0
 80024ec:	607b      	str	r3, [r7, #4]
 80024ee:	e109      	b.n	8002704 <Acc_Mag_Reading+0x220>
	  {
		  switch(i)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d003      	beq.n	80024fe <Acc_Mag_Reading+0x1a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d07f      	beq.n	80025fc <Acc_Mag_Reading+0x118>
 80024fc:	e0ff      	b.n	80026fe <Acc_Mag_Reading+0x21a>
		  {
		  case 0:
			  if(LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_1)==1)
 80024fe:	216a      	movs	r1, #106	; 0x6a
 8002500:	4885      	ldr	r0, [pc, #532]	; (8002718 <Acc_Mag_Reading+0x234>)
 8002502:	f7fe fe27 	bl	8001154 <LSM6DSOX_accelerationAvailable>
 8002506:	4603      	mov	r3, r0
 8002508:	2b01      	cmp	r3, #1
 800250a:	f040 80f5 	bne.w	80026f8 <Acc_Mag_Reading+0x214>
			  {
				  LSM6DSOX_readAcceleration(&hi2c1, LSM6DSOX_ADDRESS_1, &Acc_data[i].x, &Acc_data[i].y, &Acc_data[i].z);
 800250e:	687a      	ldr	r2, [r7, #4]
 8002510:	4613      	mov	r3, r2
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4413      	add	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4a80      	ldr	r2, [pc, #512]	; (800271c <Acc_Mag_Reading+0x238>)
 800251a:	1899      	adds	r1, r3, r2
 800251c:	687a      	ldr	r2, [r7, #4]
 800251e:	4613      	mov	r3, r2
 8002520:	005b      	lsls	r3, r3, #1
 8002522:	4413      	add	r3, r2
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	4a7d      	ldr	r2, [pc, #500]	; (800271c <Acc_Mag_Reading+0x238>)
 8002528:	4413      	add	r3, r2
 800252a:	1d18      	adds	r0, r3, #4
 800252c:	687a      	ldr	r2, [r7, #4]
 800252e:	4613      	mov	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	4413      	add	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	3308      	adds	r3, #8
 8002538:	4a78      	ldr	r2, [pc, #480]	; (800271c <Acc_Mag_Reading+0x238>)
 800253a:	4413      	add	r3, r2
 800253c:	9300      	str	r3, [sp, #0]
 800253e:	4603      	mov	r3, r0
 8002540:	460a      	mov	r2, r1
 8002542:	216a      	movs	r1, #106	; 0x6a
 8002544:	4874      	ldr	r0, [pc, #464]	; (8002718 <Acc_Mag_Reading+0x234>)
 8002546:	f7fe fda9 	bl	800109c <LSM6DSOX_readAcceleration>
				  Acc_data[i].x/=norm_acceleration[i];
 800254a:	4974      	ldr	r1, [pc, #464]	; (800271c <Acc_Mag_Reading+0x238>)
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	4613      	mov	r3, r2
 8002550:	005b      	lsls	r3, r3, #1
 8002552:	4413      	add	r3, r2
 8002554:	009b      	lsls	r3, r3, #2
 8002556:	440b      	add	r3, r1
 8002558:	edd3 6a00 	vldr	s13, [r3]
 800255c:	4a70      	ldr	r2, [pc, #448]	; (8002720 <Acc_Mag_Reading+0x23c>)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002564:	ee07 3a90 	vmov	s15, r3
 8002568:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800256c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002570:	496a      	ldr	r1, [pc, #424]	; (800271c <Acc_Mag_Reading+0x238>)
 8002572:	687a      	ldr	r2, [r7, #4]
 8002574:	4613      	mov	r3, r2
 8002576:	005b      	lsls	r3, r3, #1
 8002578:	4413      	add	r3, r2
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	440b      	add	r3, r1
 800257e:	edc3 7a00 	vstr	s15, [r3]
				  Acc_data[i].y/=norm_acceleration[i];
 8002582:	4966      	ldr	r1, [pc, #408]	; (800271c <Acc_Mag_Reading+0x238>)
 8002584:	687a      	ldr	r2, [r7, #4]
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	3304      	adds	r3, #4
 8002592:	edd3 6a00 	vldr	s13, [r3]
 8002596:	4a62      	ldr	r2, [pc, #392]	; (8002720 <Acc_Mag_Reading+0x23c>)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800259e:	ee07 3a90 	vmov	s15, r3
 80025a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025aa:	495c      	ldr	r1, [pc, #368]	; (800271c <Acc_Mag_Reading+0x238>)
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	3304      	adds	r3, #4
 80025ba:	edc3 7a00 	vstr	s15, [r3]
				  Acc_data[i].z/=norm_acceleration[i];
 80025be:	4957      	ldr	r1, [pc, #348]	; (800271c <Acc_Mag_Reading+0x238>)
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	005b      	lsls	r3, r3, #1
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	3308      	adds	r3, #8
 80025ce:	edd3 6a00 	vldr	s13, [r3]
 80025d2:	4a53      	ldr	r2, [pc, #332]	; (8002720 <Acc_Mag_Reading+0x23c>)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025e6:	494d      	ldr	r1, [pc, #308]	; (800271c <Acc_Mag_Reading+0x238>)
 80025e8:	687a      	ldr	r2, [r7, #4]
 80025ea:	4613      	mov	r3, r2
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	4413      	add	r3, r2
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	440b      	add	r3, r1
 80025f4:	3308      	adds	r3, #8
 80025f6:	edc3 7a00 	vstr	s15, [r3]
			  }
			  break;
 80025fa:	e07d      	b.n	80026f8 <Acc_Mag_Reading+0x214>

		  case 1:
			  if(LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_2)==1)
 80025fc:	216b      	movs	r1, #107	; 0x6b
 80025fe:	4846      	ldr	r0, [pc, #280]	; (8002718 <Acc_Mag_Reading+0x234>)
 8002600:	f7fe fda8 	bl	8001154 <LSM6DSOX_accelerationAvailable>
 8002604:	4603      	mov	r3, r0
 8002606:	2b01      	cmp	r3, #1
 8002608:	d178      	bne.n	80026fc <Acc_Mag_Reading+0x218>
			  {
				  LSM6DSOX_readAcceleration(&hi2c1, LSM6DSOX_ADDRESS_2, &Acc_data[i].x, &Acc_data[i].y, &Acc_data[i].z);
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	005b      	lsls	r3, r3, #1
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4a41      	ldr	r2, [pc, #260]	; (800271c <Acc_Mag_Reading+0x238>)
 8002616:	1899      	adds	r1, r3, r2
 8002618:	687a      	ldr	r2, [r7, #4]
 800261a:	4613      	mov	r3, r2
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	4413      	add	r3, r2
 8002620:	009b      	lsls	r3, r3, #2
 8002622:	4a3e      	ldr	r2, [pc, #248]	; (800271c <Acc_Mag_Reading+0x238>)
 8002624:	4413      	add	r3, r2
 8002626:	1d18      	adds	r0, r3, #4
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	3308      	adds	r3, #8
 8002634:	4a39      	ldr	r2, [pc, #228]	; (800271c <Acc_Mag_Reading+0x238>)
 8002636:	4413      	add	r3, r2
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	4603      	mov	r3, r0
 800263c:	460a      	mov	r2, r1
 800263e:	216b      	movs	r1, #107	; 0x6b
 8002640:	4835      	ldr	r0, [pc, #212]	; (8002718 <Acc_Mag_Reading+0x234>)
 8002642:	f7fe fd2b 	bl	800109c <LSM6DSOX_readAcceleration>
				  Acc_data[i].x/=norm_acceleration[i];
 8002646:	4935      	ldr	r1, [pc, #212]	; (800271c <Acc_Mag_Reading+0x238>)
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4413      	add	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	440b      	add	r3, r1
 8002654:	edd3 6a00 	vldr	s13, [r3]
 8002658:	4a31      	ldr	r2, [pc, #196]	; (8002720 <Acc_Mag_Reading+0x23c>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002660:	ee07 3a90 	vmov	s15, r3
 8002664:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002668:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800266c:	492b      	ldr	r1, [pc, #172]	; (800271c <Acc_Mag_Reading+0x238>)
 800266e:	687a      	ldr	r2, [r7, #4]
 8002670:	4613      	mov	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	440b      	add	r3, r1
 800267a:	edc3 7a00 	vstr	s15, [r3]
				  Acc_data[i].y/=norm_acceleration[i];
 800267e:	4927      	ldr	r1, [pc, #156]	; (800271c <Acc_Mag_Reading+0x238>)
 8002680:	687a      	ldr	r2, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	3304      	adds	r3, #4
 800268e:	edd3 6a00 	vldr	s13, [r3]
 8002692:	4a23      	ldr	r2, [pc, #140]	; (8002720 <Acc_Mag_Reading+0x23c>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800269a:	ee07 3a90 	vmov	s15, r3
 800269e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026a6:	491d      	ldr	r1, [pc, #116]	; (800271c <Acc_Mag_Reading+0x238>)
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	4613      	mov	r3, r2
 80026ac:	005b      	lsls	r3, r3, #1
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	440b      	add	r3, r1
 80026b4:	3304      	adds	r3, #4
 80026b6:	edc3 7a00 	vstr	s15, [r3]
				  Acc_data[i].z/=norm_acceleration[i];
 80026ba:	4918      	ldr	r1, [pc, #96]	; (800271c <Acc_Mag_Reading+0x238>)
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4413      	add	r3, r2
 80026c4:	009b      	lsls	r3, r3, #2
 80026c6:	440b      	add	r3, r1
 80026c8:	3308      	adds	r3, #8
 80026ca:	edd3 6a00 	vldr	s13, [r3]
 80026ce:	4a14      	ldr	r2, [pc, #80]	; (8002720 <Acc_Mag_Reading+0x23c>)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d6:	ee07 3a90 	vmov	s15, r3
 80026da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026e2:	490e      	ldr	r1, [pc, #56]	; (800271c <Acc_Mag_Reading+0x238>)
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	005b      	lsls	r3, r3, #1
 80026ea:	4413      	add	r3, r2
 80026ec:	009b      	lsls	r3, r3, #2
 80026ee:	440b      	add	r3, r1
 80026f0:	3308      	adds	r3, #8
 80026f2:	edc3 7a00 	vstr	s15, [r3]
			  }
			  break;
 80026f6:	e001      	b.n	80026fc <Acc_Mag_Reading+0x218>
			  break;
 80026f8:	bf00      	nop
 80026fa:	e000      	b.n	80026fe <Acc_Mag_Reading+0x21a>
			  break;
 80026fc:	bf00      	nop
	for(i = 0;i < 2;i++)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	3301      	adds	r3, #1
 8002702:	607b      	str	r3, [r7, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2b01      	cmp	r3, #1
 8002708:	f77f aef2 	ble.w	80024f0 <Acc_Mag_Reading+0xc>
		  }
	  }


}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	2000031c 	.word	0x2000031c
 800271c:	20000a54 	.word	0x20000a54
 8002720:	2000098c 	.word	0x2000098c

08002724 <SDI>:

void SDI()
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
	int k;
	int i;
	for(i = 0; i<2; i++)
 800272a:	2300      	movs	r3, #0
 800272c:	603b      	str	r3, [r7, #0]
 800272e:	e0bc      	b.n	80028aa <SDI+0x186>
	{
		for(k = 0; k < 9; k++)
 8002730:	2300      	movs	r3, #0
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	e0b2      	b.n	800289c <SDI+0x178>
		{
			SDIareas[i].area_x += ((Gyro_data[i].x[k] + Gyro_data[i].x[k+1])/(2*gyro_fs));
 8002736:	4962      	ldr	r1, [pc, #392]	; (80028c0 <SDI+0x19c>)
 8002738:	683a      	ldr	r2, [r7, #0]
 800273a:	4613      	mov	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	440b      	add	r3, r1
 8002744:	ed93 7a00 	vldr	s14, [r3]
 8002748:	495e      	ldr	r1, [pc, #376]	; (80028c4 <SDI+0x1a0>)
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	4613      	mov	r3, r2
 800274e:	00db      	lsls	r3, r3, #3
 8002750:	4413      	add	r3, r2
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	687a      	ldr	r2, [r7, #4]
 8002756:	4413      	add	r3, r2
 8002758:	009b      	lsls	r3, r3, #2
 800275a:	440b      	add	r3, r1
 800275c:	edd3 6a00 	vldr	s13, [r3]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	1c59      	adds	r1, r3, #1
 8002764:	4857      	ldr	r0, [pc, #348]	; (80028c4 <SDI+0x1a0>)
 8002766:	683a      	ldr	r2, [r7, #0]
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4413      	add	r3, r2
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	440b      	add	r3, r1
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4403      	add	r3, r0
 8002776:	edd3 7a00 	vldr	s15, [r3]
 800277a:	ee36 6aa7 	vadd.f32	s12, s13, s15
 800277e:	4b52      	ldr	r3, [pc, #328]	; (80028c8 <SDI+0x1a4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	005b      	lsls	r3, r3, #1
 8002784:	ee07 3a90 	vmov	s15, r3
 8002788:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800278c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002794:	494a      	ldr	r1, [pc, #296]	; (80028c0 <SDI+0x19c>)
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	4613      	mov	r3, r2
 800279a:	005b      	lsls	r3, r3, #1
 800279c:	4413      	add	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	440b      	add	r3, r1
 80027a2:	edc3 7a00 	vstr	s15, [r3]
			SDIareas[i].area_y += ((Gyro_data[i].y[k] + Gyro_data[i].y[k+1])/(2*gyro_fs));
 80027a6:	4946      	ldr	r1, [pc, #280]	; (80028c0 <SDI+0x19c>)
 80027a8:	683a      	ldr	r2, [r7, #0]
 80027aa:	4613      	mov	r3, r2
 80027ac:	005b      	lsls	r3, r3, #1
 80027ae:	4413      	add	r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	3304      	adds	r3, #4
 80027b6:	ed93 7a00 	vldr	s14, [r3]
 80027ba:	4942      	ldr	r1, [pc, #264]	; (80028c4 <SDI+0x1a0>)
 80027bc:	683a      	ldr	r2, [r7, #0]
 80027be:	4613      	mov	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4413      	add	r3, r2
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	4413      	add	r3, r2
 80027ca:	3306      	adds	r3, #6
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	edd3 6a00 	vldr	s13, [r3]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	1c59      	adds	r1, r3, #1
 80027d8:	483a      	ldr	r0, [pc, #232]	; (80028c4 <SDI+0x1a0>)
 80027da:	683a      	ldr	r2, [r7, #0]
 80027dc:	4613      	mov	r3, r2
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	4413      	add	r3, r2
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	440b      	add	r3, r1
 80027e6:	3306      	adds	r3, #6
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4403      	add	r3, r0
 80027ec:	edd3 7a00 	vldr	s15, [r3]
 80027f0:	ee36 6aa7 	vadd.f32	s12, s13, s15
 80027f4:	4b34      	ldr	r3, [pc, #208]	; (80028c8 <SDI+0x1a4>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	005b      	lsls	r3, r3, #1
 80027fa:	ee07 3a90 	vmov	s15, r3
 80027fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002802:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800280a:	492d      	ldr	r1, [pc, #180]	; (80028c0 <SDI+0x19c>)
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	4613      	mov	r3, r2
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	3304      	adds	r3, #4
 800281a:	edc3 7a00 	vstr	s15, [r3]
			SDIareas[i].area_z += ((Gyro_data[i].z[k] + Gyro_data[i].z[k+1])/(2*gyro_fs));
 800281e:	4928      	ldr	r1, [pc, #160]	; (80028c0 <SDI+0x19c>)
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	4613      	mov	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	3308      	adds	r3, #8
 800282e:	ed93 7a00 	vldr	s14, [r3]
 8002832:	4924      	ldr	r1, [pc, #144]	; (80028c4 <SDI+0x1a0>)
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	4613      	mov	r3, r2
 8002838:	00db      	lsls	r3, r3, #3
 800283a:	4413      	add	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	330c      	adds	r3, #12
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	edd3 6a00 	vldr	s13, [r3]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	1c59      	adds	r1, r3, #1
 8002850:	481c      	ldr	r0, [pc, #112]	; (80028c4 <SDI+0x1a0>)
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	4613      	mov	r3, r2
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4413      	add	r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	440b      	add	r3, r1
 800285e:	330c      	adds	r3, #12
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4403      	add	r3, r0
 8002864:	edd3 7a00 	vldr	s15, [r3]
 8002868:	ee36 6aa7 	vadd.f32	s12, s13, s15
 800286c:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <SDI+0x1a4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	ee07 3a90 	vmov	s15, r3
 8002876:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800287a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800287e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002882:	490f      	ldr	r1, [pc, #60]	; (80028c0 <SDI+0x19c>)
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	3308      	adds	r3, #8
 8002892:	edc3 7a00 	vstr	s15, [r3]
		for(k = 0; k < 9; k++)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3301      	adds	r3, #1
 800289a:	607b      	str	r3, [r7, #4]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2b08      	cmp	r3, #8
 80028a0:	f77f af49 	ble.w	8002736 <SDI+0x12>
	for(i = 0; i<2; i++)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	3301      	adds	r3, #1
 80028a8:	603b      	str	r3, [r7, #0]
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	f77f af3f 	ble.w	8002730 <SDI+0xc>
		}
	}
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
}
 80028b2:	bf00      	nop
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	20000a6c 	.word	0x20000a6c
 80028c4:	200009c4 	.word	0x200009c4
 80028c8:	20000020 	.word	0x20000020
 80028cc:	00000000 	.word	0x00000000

080028d0 <Complementary_filter>:

void Complementary_filter()
{
 80028d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
	int i;
	for(i = 0; i < 2; i++)
 80028d8:	2300      	movs	r3, #0
 80028da:	607b      	str	r3, [r7, #4]
 80028dc:	e15b      	b.n	8002b96 <Complementary_filter+0x2c6>
	{
		Acc_ang[i].pitch = atan2(-Acc_data[i].x, sqrt(pow(Acc_data[i].y, 2.0) + pow(Acc_data[i].z, 2.0))) * 180.0/M_PI;
 80028de:	49c0      	ldr	r1, [pc, #768]	; (8002be0 <Complementary_filter+0x310>)
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	4613      	mov	r3, r2
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	4413      	add	r3, r2
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	440b      	add	r3, r1
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	eef1 7a67 	vneg.f32	s15, s15
 80028f4:	ee17 3a90 	vmov	r3, s15
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fd fe25 	bl	8000548 <__aeabi_f2d>
 80028fe:	4604      	mov	r4, r0
 8002900:	460d      	mov	r5, r1
 8002902:	49b7      	ldr	r1, [pc, #732]	; (8002be0 <Complementary_filter+0x310>)
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	3304      	adds	r3, #4
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f7fd fe17 	bl	8000548 <__aeabi_f2d>
 800291a:	4602      	mov	r2, r0
 800291c:	460b      	mov	r3, r1
 800291e:	ed9f 1ba4 	vldr	d1, [pc, #656]	; 8002bb0 <Complementary_filter+0x2e0>
 8002922:	ec43 2b10 	vmov	d0, r2, r3
 8002926:	f011 fd85 	bl	8014434 <pow>
 800292a:	ec59 8b10 	vmov	r8, r9, d0
 800292e:	49ac      	ldr	r1, [pc, #688]	; (8002be0 <Complementary_filter+0x310>)
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	3308      	adds	r3, #8
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4618      	mov	r0, r3
 8002942:	f7fd fe01 	bl	8000548 <__aeabi_f2d>
 8002946:	4602      	mov	r2, r0
 8002948:	460b      	mov	r3, r1
 800294a:	ed9f 1b99 	vldr	d1, [pc, #612]	; 8002bb0 <Complementary_filter+0x2e0>
 800294e:	ec43 2b10 	vmov	d0, r2, r3
 8002952:	f011 fd6f 	bl	8014434 <pow>
 8002956:	ec53 2b10 	vmov	r2, r3, d0
 800295a:	4640      	mov	r0, r8
 800295c:	4649      	mov	r1, r9
 800295e:	f7fd fc95 	bl	800028c <__adddf3>
 8002962:	4602      	mov	r2, r0
 8002964:	460b      	mov	r3, r1
 8002966:	ec43 2b17 	vmov	d7, r2, r3
 800296a:	eeb0 0a47 	vmov.f32	s0, s14
 800296e:	eef0 0a67 	vmov.f32	s1, s15
 8002972:	f011 fdcf 	bl	8014514 <sqrt>
 8002976:	eeb0 7a40 	vmov.f32	s14, s0
 800297a:	eef0 7a60 	vmov.f32	s15, s1
 800297e:	eeb0 1a47 	vmov.f32	s2, s14
 8002982:	eef0 1a67 	vmov.f32	s3, s15
 8002986:	ec45 4b10 	vmov	d0, r4, r5
 800298a:	f011 fc89 	bl	80142a0 <atan2>
 800298e:	ec51 0b10 	vmov	r0, r1, d0
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	4b93      	ldr	r3, [pc, #588]	; (8002be4 <Complementary_filter+0x314>)
 8002998:	f7fd fe2e 	bl	80005f8 <__aeabi_dmul>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4610      	mov	r0, r2
 80029a2:	4619      	mov	r1, r3
 80029a4:	a384      	add	r3, pc, #528	; (adr r3, 8002bb8 <Complementary_filter+0x2e8>)
 80029a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029aa:	f7fd ff4f 	bl	800084c <__aeabi_ddiv>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4610      	mov	r0, r2
 80029b4:	4619      	mov	r1, r3
 80029b6:	f7fe f8f7 	bl	8000ba8 <__aeabi_d2f>
 80029ba:	4601      	mov	r1, r0
 80029bc:	488a      	ldr	r0, [pc, #552]	; (8002be8 <Complementary_filter+0x318>)
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	4403      	add	r3, r0
 80029ca:	6019      	str	r1, [r3, #0]
		Acc_ang[i].roll = atan2(Acc_data[i].y, sqrt(pow(Acc_data[i].x, 2.0) + pow(Acc_data[i].z, 2.0))) * 180.0/M_PI;
 80029cc:	4984      	ldr	r1, [pc, #528]	; (8002be0 <Complementary_filter+0x310>)
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	4613      	mov	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	3304      	adds	r3, #4
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fd fdb2 	bl	8000548 <__aeabi_f2d>
 80029e4:	4604      	mov	r4, r0
 80029e6:	460d      	mov	r5, r1
 80029e8:	497d      	ldr	r1, [pc, #500]	; (8002be0 <Complementary_filter+0x310>)
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	005b      	lsls	r3, r3, #1
 80029f0:	4413      	add	r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4618      	mov	r0, r3
 80029fa:	f7fd fda5 	bl	8000548 <__aeabi_f2d>
 80029fe:	4602      	mov	r2, r0
 8002a00:	460b      	mov	r3, r1
 8002a02:	ed9f 1b6b 	vldr	d1, [pc, #428]	; 8002bb0 <Complementary_filter+0x2e0>
 8002a06:	ec43 2b10 	vmov	d0, r2, r3
 8002a0a:	f011 fd13 	bl	8014434 <pow>
 8002a0e:	ec59 8b10 	vmov	r8, r9, d0
 8002a12:	4973      	ldr	r1, [pc, #460]	; (8002be0 <Complementary_filter+0x310>)
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	005b      	lsls	r3, r3, #1
 8002a1a:	4413      	add	r3, r2
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	440b      	add	r3, r1
 8002a20:	3308      	adds	r3, #8
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7fd fd8f 	bl	8000548 <__aeabi_f2d>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	ed9f 1b60 	vldr	d1, [pc, #384]	; 8002bb0 <Complementary_filter+0x2e0>
 8002a32:	ec43 2b10 	vmov	d0, r2, r3
 8002a36:	f011 fcfd 	bl	8014434 <pow>
 8002a3a:	ec53 2b10 	vmov	r2, r3, d0
 8002a3e:	4640      	mov	r0, r8
 8002a40:	4649      	mov	r1, r9
 8002a42:	f7fd fc23 	bl	800028c <__adddf3>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	ec43 2b17 	vmov	d7, r2, r3
 8002a4e:	eeb0 0a47 	vmov.f32	s0, s14
 8002a52:	eef0 0a67 	vmov.f32	s1, s15
 8002a56:	f011 fd5d 	bl	8014514 <sqrt>
 8002a5a:	eeb0 7a40 	vmov.f32	s14, s0
 8002a5e:	eef0 7a60 	vmov.f32	s15, s1
 8002a62:	eeb0 1a47 	vmov.f32	s2, s14
 8002a66:	eef0 1a67 	vmov.f32	s3, s15
 8002a6a:	ec45 4b10 	vmov	d0, r4, r5
 8002a6e:	f011 fc17 	bl	80142a0 <atan2>
 8002a72:	ec51 0b10 	vmov	r0, r1, d0
 8002a76:	f04f 0200 	mov.w	r2, #0
 8002a7a:	4b5a      	ldr	r3, [pc, #360]	; (8002be4 <Complementary_filter+0x314>)
 8002a7c:	f7fd fdbc 	bl	80005f8 <__aeabi_dmul>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	a34b      	add	r3, pc, #300	; (adr r3, 8002bb8 <Complementary_filter+0x2e8>)
 8002a8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a8e:	f7fd fedd 	bl	800084c <__aeabi_ddiv>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4610      	mov	r0, r2
 8002a98:	4619      	mov	r1, r3
 8002a9a:	f7fe f885 	bl	8000ba8 <__aeabi_d2f>
 8002a9e:	4601      	mov	r1, r0
 8002aa0:	4851      	ldr	r0, [pc, #324]	; (8002be8 <Complementary_filter+0x318>)
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	005b      	lsls	r3, r3, #1
 8002aa8:	4413      	add	r3, r2
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	4403      	add	r3, r0
 8002aae:	3304      	adds	r3, #4
 8002ab0:	6019      	str	r1, [r3, #0]

		Estim_ang[i].roll = (0.982207 * Acc_ang[i].roll) + (0.017794 * SDIareas[i].area_x);
 8002ab2:	494d      	ldr	r1, [pc, #308]	; (8002be8 <Complementary_filter+0x318>)
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	3304      	adds	r3, #4
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7fd fd3f 	bl	8000548 <__aeabi_f2d>
 8002aca:	a33d      	add	r3, pc, #244	; (adr r3, 8002bc0 <Complementary_filter+0x2f0>)
 8002acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad0:	f7fd fd92 	bl	80005f8 <__aeabi_dmul>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4614      	mov	r4, r2
 8002ada:	461d      	mov	r5, r3
 8002adc:	4943      	ldr	r1, [pc, #268]	; (8002bec <Complementary_filter+0x31c>)
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	440b      	add	r3, r1
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7fd fd2b 	bl	8000548 <__aeabi_f2d>
 8002af2:	a335      	add	r3, pc, #212	; (adr r3, 8002bc8 <Complementary_filter+0x2f8>)
 8002af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002af8:	f7fd fd7e 	bl	80005f8 <__aeabi_dmul>
 8002afc:	4602      	mov	r2, r0
 8002afe:	460b      	mov	r3, r1
 8002b00:	4620      	mov	r0, r4
 8002b02:	4629      	mov	r1, r5
 8002b04:	f7fd fbc2 	bl	800028c <__adddf3>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	460b      	mov	r3, r1
 8002b0c:	4610      	mov	r0, r2
 8002b0e:	4619      	mov	r1, r3
 8002b10:	f7fe f84a 	bl	8000ba8 <__aeabi_d2f>
 8002b14:	4602      	mov	r2, r0
 8002b16:	4936      	ldr	r1, [pc, #216]	; (8002bf0 <Complementary_filter+0x320>)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	00db      	lsls	r3, r3, #3
 8002b1c:	440b      	add	r3, r1
 8002b1e:	601a      	str	r2, [r3, #0]
		Estim_ang[i].pitch = (0.981646 * Acc_ang[i].pitch) + (0.018354 * SDIareas[i].area_y);
 8002b20:	4931      	ldr	r1, [pc, #196]	; (8002be8 <Complementary_filter+0x318>)
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	4613      	mov	r3, r2
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	4413      	add	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	440b      	add	r3, r1
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fd fd09 	bl	8000548 <__aeabi_f2d>
 8002b36:	a326      	add	r3, pc, #152	; (adr r3, 8002bd0 <Complementary_filter+0x300>)
 8002b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3c:	f7fd fd5c 	bl	80005f8 <__aeabi_dmul>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4614      	mov	r4, r2
 8002b46:	461d      	mov	r5, r3
 8002b48:	4928      	ldr	r1, [pc, #160]	; (8002bec <Complementary_filter+0x31c>)
 8002b4a:	687a      	ldr	r2, [r7, #4]
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	4413      	add	r3, r2
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	440b      	add	r3, r1
 8002b56:	3304      	adds	r3, #4
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fd fcf4 	bl	8000548 <__aeabi_f2d>
 8002b60:	a31d      	add	r3, pc, #116	; (adr r3, 8002bd8 <Complementary_filter+0x308>)
 8002b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b66:	f7fd fd47 	bl	80005f8 <__aeabi_dmul>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4620      	mov	r0, r4
 8002b70:	4629      	mov	r1, r5
 8002b72:	f7fd fb8b 	bl	800028c <__adddf3>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	f7fe f813 	bl	8000ba8 <__aeabi_d2f>
 8002b82:	4602      	mov	r2, r0
 8002b84:	491a      	ldr	r1, [pc, #104]	; (8002bf0 <Complementary_filter+0x320>)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	440b      	add	r3, r1
 8002b8c:	3304      	adds	r3, #4
 8002b8e:	601a      	str	r2, [r3, #0]
	for(i = 0; i < 2; i++)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3301      	adds	r3, #1
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	f77f aea0 	ble.w	80028de <Complementary_filter+0xe>
	}
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
}
 8002b9e:	bf00      	nop
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002baa:	bf00      	nop
 8002bac:	f3af 8000 	nop.w
 8002bb0:	00000000 	.word	0x00000000
 8002bb4:	40000000 	.word	0x40000000
 8002bb8:	54442d18 	.word	0x54442d18
 8002bbc:	400921fb 	.word	0x400921fb
 8002bc0:	5fdcdf6a 	.word	0x5fdcdf6a
 8002bc4:	3fef6e3d 	.word	0x3fef6e3d
 8002bc8:	204295a7 	.word	0x204295a7
 8002bcc:	3f923897 	.word	0x3f923897
 8002bd0:	df47f994 	.word	0xdf47f994
 8002bd4:	3fef69a4 	.word	0x3fef69a4
 8002bd8:	1700cd85 	.word	0x1700cd85
 8002bdc:	3f92cb64 	.word	0x3f92cb64
 8002be0:	20000a54 	.word	0x20000a54
 8002be4:	40668000 	.word	0x40668000
 8002be8:	20000a84 	.word	0x20000a84
 8002bec:	20000a6c 	.word	0x20000a6c
 8002bf0:	20000a9c 	.word	0x20000a9c

08002bf4 <EMG_Data_Reception>:
	}
}


void EMG_Data_Reception()
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0
	if(HAL_UART_Receive(&huart3, (uint8_t*)rx_data, sizeof(rx_data), HAL_MAX_DELAY) == HAL_OK)
 8002bf8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002bfc:	2218      	movs	r2, #24
 8002bfe:	490e      	ldr	r1, [pc, #56]	; (8002c38 <EMG_Data_Reception+0x44>)
 8002c00:	480e      	ldr	r0, [pc, #56]	; (8002c3c <EMG_Data_Reception+0x48>)
 8002c02:	f006 f962 	bl	8008eca <HAL_UART_Receive>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10f      	bne.n	8002c2c <EMG_Data_Reception+0x38>
	{
		CDC_Transmit_FS((uint8_t*)rx_data, strlen(rx_data));
 8002c0c:	480a      	ldr	r0, [pc, #40]	; (8002c38 <EMG_Data_Reception+0x44>)
 8002c0e:	f7fd fb2f 	bl	8000270 <strlen>
 8002c12:	4603      	mov	r3, r0
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	4619      	mov	r1, r3
 8002c18:	4807      	ldr	r0, [pc, #28]	; (8002c38 <EMG_Data_Reception+0x44>)
 8002c1a:	f00e f875 	bl	8010d08 <CDC_Transmit_FS>
		AppendToFile(emg_log_path, sizeof(emg_log_path), (char*)rx_data, sizeof(rx_data));
 8002c1e:	2318      	movs	r3, #24
 8002c20:	4a05      	ldr	r2, [pc, #20]	; (8002c38 <EMG_Data_Reception+0x44>)
 8002c22:	210d      	movs	r1, #13
 8002c24:	4806      	ldr	r0, [pc, #24]	; (8002c40 <EMG_Data_Reception+0x4c>)
 8002c26:	f7ff fa0d 	bl	8002044 <AppendToFile>

	else
	{
		BlinkLED(200, 5);
	}
}
 8002c2a:	e003      	b.n	8002c34 <EMG_Data_Reception+0x40>
		BlinkLED(200, 5);
 8002c2c:	2105      	movs	r1, #5
 8002c2e:	20c8      	movs	r0, #200	; 0xc8
 8002c30:	f7ff faa8 	bl	8002184 <BlinkLED>
}
 8002c34:	bf00      	nop
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	2000093c 	.word	0x2000093c
 8002c3c:	200004fc 	.word	0x200004fc
 8002c40:	20000010 	.word	0x20000010

08002c44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002c48:	b672      	cpsid	i
}
 8002c4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002c4c:	e7fe      	b.n	8002c4c <Error_Handler+0x8>
	...

08002c50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c56:	2300      	movs	r3, #0
 8002c58:	607b      	str	r3, [r7, #4]
 8002c5a:	4b10      	ldr	r3, [pc, #64]	; (8002c9c <HAL_MspInit+0x4c>)
 8002c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c5e:	4a0f      	ldr	r2, [pc, #60]	; (8002c9c <HAL_MspInit+0x4c>)
 8002c60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c64:	6453      	str	r3, [r2, #68]	; 0x44
 8002c66:	4b0d      	ldr	r3, [pc, #52]	; (8002c9c <HAL_MspInit+0x4c>)
 8002c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c6e:	607b      	str	r3, [r7, #4]
 8002c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c72:	2300      	movs	r3, #0
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	4b09      	ldr	r3, [pc, #36]	; (8002c9c <HAL_MspInit+0x4c>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	4a08      	ldr	r2, [pc, #32]	; (8002c9c <HAL_MspInit+0x4c>)
 8002c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c80:	6413      	str	r3, [r2, #64]	; 0x40
 8002c82:	4b06      	ldr	r3, [pc, #24]	; (8002c9c <HAL_MspInit+0x4c>)
 8002c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800

08002ca0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b08a      	sub	sp, #40	; 0x28
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ca8:	f107 0314 	add.w	r3, r7, #20
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
 8002cb0:	605a      	str	r2, [r3, #4]
 8002cb2:	609a      	str	r2, [r3, #8]
 8002cb4:	60da      	str	r2, [r3, #12]
 8002cb6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a19      	ldr	r2, [pc, #100]	; (8002d24 <HAL_I2C_MspInit+0x84>)
 8002cbe:	4293      	cmp	r3, r2
 8002cc0:	d12b      	bne.n	8002d1a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	613b      	str	r3, [r7, #16]
 8002cc6:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <HAL_I2C_MspInit+0x88>)
 8002cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cca:	4a17      	ldr	r2, [pc, #92]	; (8002d28 <HAL_I2C_MspInit+0x88>)
 8002ccc:	f043 0302 	orr.w	r3, r3, #2
 8002cd0:	6313      	str	r3, [r2, #48]	; 0x30
 8002cd2:	4b15      	ldr	r3, [pc, #84]	; (8002d28 <HAL_I2C_MspInit+0x88>)
 8002cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	613b      	str	r3, [r7, #16]
 8002cdc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002cde:	23c0      	movs	r3, #192	; 0xc0
 8002ce0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ce2:	2312      	movs	r3, #18
 8002ce4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cea:	2303      	movs	r3, #3
 8002cec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002cee:	2304      	movs	r3, #4
 8002cf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cf2:	f107 0314 	add.w	r3, r7, #20
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	480c      	ldr	r0, [pc, #48]	; (8002d2c <HAL_I2C_MspInit+0x8c>)
 8002cfa:	f001 f8ad 	bl	8003e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	4b09      	ldr	r3, [pc, #36]	; (8002d28 <HAL_I2C_MspInit+0x88>)
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	4a08      	ldr	r2, [pc, #32]	; (8002d28 <HAL_I2C_MspInit+0x88>)
 8002d08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d0e:	4b06      	ldr	r3, [pc, #24]	; (8002d28 <HAL_I2C_MspInit+0x88>)
 8002d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d12:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d1a:	bf00      	nop
 8002d1c:	3728      	adds	r7, #40	; 0x28
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40005400 	.word	0x40005400
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	40020400 	.word	0x40020400

08002d30 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b08a      	sub	sp, #40	; 0x28
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d38:	f107 0314 	add.w	r3, r7, #20
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	601a      	str	r2, [r3, #0]
 8002d40:	605a      	str	r2, [r3, #4]
 8002d42:	609a      	str	r2, [r3, #8]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a70      	ldr	r2, [pc, #448]	; (8002f10 <HAL_SD_MspInit+0x1e0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	f040 80da 	bne.w	8002f08 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002d54:	2300      	movs	r3, #0
 8002d56:	613b      	str	r3, [r7, #16]
 8002d58:	4b6e      	ldr	r3, [pc, #440]	; (8002f14 <HAL_SD_MspInit+0x1e4>)
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5c:	4a6d      	ldr	r2, [pc, #436]	; (8002f14 <HAL_SD_MspInit+0x1e4>)
 8002d5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002d62:	6453      	str	r3, [r2, #68]	; 0x44
 8002d64:	4b6b      	ldr	r3, [pc, #428]	; (8002f14 <HAL_SD_MspInit+0x1e4>)
 8002d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	4b67      	ldr	r3, [pc, #412]	; (8002f14 <HAL_SD_MspInit+0x1e4>)
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	4a66      	ldr	r2, [pc, #408]	; (8002f14 <HAL_SD_MspInit+0x1e4>)
 8002d7a:	f043 0304 	orr.w	r3, r3, #4
 8002d7e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d80:	4b64      	ldr	r3, [pc, #400]	; (8002f14 <HAL_SD_MspInit+0x1e4>)
 8002d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	60fb      	str	r3, [r7, #12]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	4b60      	ldr	r3, [pc, #384]	; (8002f14 <HAL_SD_MspInit+0x1e4>)
 8002d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d94:	4a5f      	ldr	r2, [pc, #380]	; (8002f14 <HAL_SD_MspInit+0x1e4>)
 8002d96:	f043 0308 	orr.w	r3, r3, #8
 8002d9a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d9c:	4b5d      	ldr	r3, [pc, #372]	; (8002f14 <HAL_SD_MspInit+0x1e4>)
 8002d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da0:	f003 0308 	and.w	r3, r3, #8
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002da8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dae:	2302      	movs	r3, #2
 8002db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002db2:	2301      	movs	r3, #1
 8002db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002db6:	2303      	movs	r3, #3
 8002db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002dba:	230c      	movs	r3, #12
 8002dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002dbe:	f107 0314 	add.w	r3, r7, #20
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4854      	ldr	r0, [pc, #336]	; (8002f18 <HAL_SD_MspInit+0x1e8>)
 8002dc6:	f001 f847 	bl	8003e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002dca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002ddc:	230c      	movs	r3, #12
 8002dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002de0:	f107 0314 	add.w	r3, r7, #20
 8002de4:	4619      	mov	r1, r3
 8002de6:	484c      	ldr	r0, [pc, #304]	; (8002f18 <HAL_SD_MspInit+0x1e8>)
 8002de8:	f001 f836 	bl	8003e58 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002dec:	2304      	movs	r3, #4
 8002dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002df0:	2302      	movs	r3, #2
 8002df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002df4:	2301      	movs	r3, #1
 8002df6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002dfc:	230c      	movs	r3, #12
 8002dfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e00:	f107 0314 	add.w	r3, r7, #20
 8002e04:	4619      	mov	r1, r3
 8002e06:	4845      	ldr	r0, [pc, #276]	; (8002f1c <HAL_SD_MspInit+0x1ec>)
 8002e08:	f001 f826 	bl	8003e58 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002e0c:	4b44      	ldr	r3, [pc, #272]	; (8002f20 <HAL_SD_MspInit+0x1f0>)
 8002e0e:	4a45      	ldr	r2, [pc, #276]	; (8002f24 <HAL_SD_MspInit+0x1f4>)
 8002e10:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002e12:	4b43      	ldr	r3, [pc, #268]	; (8002f20 <HAL_SD_MspInit+0x1f0>)
 8002e14:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e18:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e1a:	4b41      	ldr	r3, [pc, #260]	; (8002f20 <HAL_SD_MspInit+0x1f0>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e20:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <HAL_SD_MspInit+0x1f0>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e26:	4b3e      	ldr	r3, [pc, #248]	; (8002f20 <HAL_SD_MspInit+0x1f0>)
 8002e28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e2c:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e2e:	4b3c      	ldr	r3, [pc, #240]	; (8002f20 <HAL_SD_MspInit+0x1f0>)
 8002e30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e34:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e36:	4b3a      	ldr	r3, [pc, #232]	; (8002f20 <HAL_SD_MspInit+0x1f0>)
 8002e38:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e3c:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002e3e:	4b38      	ldr	r3, [pc, #224]	; (8002f20 <HAL_SD_MspInit+0x1f0>)
 8002e40:	2220      	movs	r2, #32
 8002e42:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e44:	4b36      	ldr	r3, [pc, #216]	; (8002f20 <HAL_SD_MspInit+0x1f0>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002e4a:	4b35      	ldr	r3, [pc, #212]	; (8002f20 <HAL_SD_MspInit+0x1f0>)
 8002e4c:	2204      	movs	r2, #4
 8002e4e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002e50:	4b33      	ldr	r3, [pc, #204]	; (8002f20 <HAL_SD_MspInit+0x1f0>)
 8002e52:	2203      	movs	r2, #3
 8002e54:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002e56:	4b32      	ldr	r3, [pc, #200]	; (8002f20 <HAL_SD_MspInit+0x1f0>)
 8002e58:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002e5c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002e5e:	4b30      	ldr	r3, [pc, #192]	; (8002f20 <HAL_SD_MspInit+0x1f0>)
 8002e60:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002e64:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002e66:	482e      	ldr	r0, [pc, #184]	; (8002f20 <HAL_SD_MspInit+0x1f0>)
 8002e68:	f000 fbe8 	bl	800363c <HAL_DMA_Init>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8002e72:	f7ff fee7 	bl	8002c44 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	4a29      	ldr	r2, [pc, #164]	; (8002f20 <HAL_SD_MspInit+0x1f0>)
 8002e7a:	641a      	str	r2, [r3, #64]	; 0x40
 8002e7c:	4a28      	ldr	r2, [pc, #160]	; (8002f20 <HAL_SD_MspInit+0x1f0>)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <HAL_SD_MspInit+0x1f8>)
 8002e84:	4a29      	ldr	r2, [pc, #164]	; (8002f2c <HAL_SD_MspInit+0x1fc>)
 8002e86:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002e88:	4b27      	ldr	r3, [pc, #156]	; (8002f28 <HAL_SD_MspInit+0x1f8>)
 8002e8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e8e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e90:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <HAL_SD_MspInit+0x1f8>)
 8002e92:	2240      	movs	r2, #64	; 0x40
 8002e94:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e96:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <HAL_SD_MspInit+0x1f8>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e9c:	4b22      	ldr	r3, [pc, #136]	; (8002f28 <HAL_SD_MspInit+0x1f8>)
 8002e9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ea2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002ea4:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <HAL_SD_MspInit+0x1f8>)
 8002ea6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002eaa:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002eac:	4b1e      	ldr	r3, [pc, #120]	; (8002f28 <HAL_SD_MspInit+0x1f8>)
 8002eae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002eb2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002eb4:	4b1c      	ldr	r3, [pc, #112]	; (8002f28 <HAL_SD_MspInit+0x1f8>)
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002eba:	4b1b      	ldr	r3, [pc, #108]	; (8002f28 <HAL_SD_MspInit+0x1f8>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002ec0:	4b19      	ldr	r3, [pc, #100]	; (8002f28 <HAL_SD_MspInit+0x1f8>)
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002ec6:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <HAL_SD_MspInit+0x1f8>)
 8002ec8:	2203      	movs	r2, #3
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002ecc:	4b16      	ldr	r3, [pc, #88]	; (8002f28 <HAL_SD_MspInit+0x1f8>)
 8002ece:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002ed2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002ed4:	4b14      	ldr	r3, [pc, #80]	; (8002f28 <HAL_SD_MspInit+0x1f8>)
 8002ed6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002edc:	4812      	ldr	r0, [pc, #72]	; (8002f28 <HAL_SD_MspInit+0x1f8>)
 8002ede:	f000 fbad 	bl	800363c <HAL_DMA_Init>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8002ee8:	f7ff feac 	bl	8002c44 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a0e      	ldr	r2, [pc, #56]	; (8002f28 <HAL_SD_MspInit+0x1f8>)
 8002ef0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ef2:	4a0d      	ldr	r2, [pc, #52]	; (8002f28 <HAL_SD_MspInit+0x1f8>)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2100      	movs	r1, #0
 8002efc:	2031      	movs	r0, #49	; 0x31
 8002efe:	f000 fb66 	bl	80035ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002f02:	2031      	movs	r0, #49	; 0x31
 8002f04:	f000 fb7f 	bl	8003606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002f08:	bf00      	nop
 8002f0a:	3728      	adds	r7, #40	; 0x28
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40012c00 	.word	0x40012c00
 8002f14:	40023800 	.word	0x40023800
 8002f18:	40020800 	.word	0x40020800
 8002f1c:	40020c00 	.word	0x40020c00
 8002f20:	200003f4 	.word	0x200003f4
 8002f24:	40026458 	.word	0x40026458
 8002f28:	20000454 	.word	0x20000454
 8002f2c:	400264a0 	.word	0x400264a0

08002f30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b084      	sub	sp, #16
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f40:	d115      	bne.n	8002f6e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	60fb      	str	r3, [r7, #12]
 8002f46:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <HAL_TIM_Base_MspInit+0x48>)
 8002f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4a:	4a0b      	ldr	r2, [pc, #44]	; (8002f78 <HAL_TIM_Base_MspInit+0x48>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	6413      	str	r3, [r2, #64]	; 0x40
 8002f52:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <HAL_TIM_Base_MspInit+0x48>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f003 0301 	and.w	r3, r3, #1
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2100      	movs	r1, #0
 8002f62:	201c      	movs	r0, #28
 8002f64:	f000 fb33 	bl	80035ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f68:	201c      	movs	r0, #28
 8002f6a:	f000 fb4c 	bl	8003606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800

08002f7c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b08a      	sub	sp, #40	; 0x28
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f84:	f107 0314 	add.w	r3, r7, #20
 8002f88:	2200      	movs	r2, #0
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	609a      	str	r2, [r3, #8]
 8002f90:	60da      	str	r2, [r3, #12]
 8002f92:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a1d      	ldr	r2, [pc, #116]	; (8003010 <HAL_UART_MspInit+0x94>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d134      	bne.n	8003008 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	4b1c      	ldr	r3, [pc, #112]	; (8003014 <HAL_UART_MspInit+0x98>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	4a1b      	ldr	r2, [pc, #108]	; (8003014 <HAL_UART_MspInit+0x98>)
 8002fa8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fac:	6413      	str	r3, [r2, #64]	; 0x40
 8002fae:	4b19      	ldr	r3, [pc, #100]	; (8003014 <HAL_UART_MspInit+0x98>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb6:	613b      	str	r3, [r7, #16]
 8002fb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	4b15      	ldr	r3, [pc, #84]	; (8003014 <HAL_UART_MspInit+0x98>)
 8002fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc2:	4a14      	ldr	r2, [pc, #80]	; (8003014 <HAL_UART_MspInit+0x98>)
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fca:	4b12      	ldr	r3, [pc, #72]	; (8003014 <HAL_UART_MspInit+0x98>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002fd6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002fe8:	2307      	movs	r3, #7
 8002fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fec:	f107 0314 	add.w	r3, r7, #20
 8002ff0:	4619      	mov	r1, r3
 8002ff2:	4809      	ldr	r0, [pc, #36]	; (8003018 <HAL_UART_MspInit+0x9c>)
 8002ff4:	f000 ff30 	bl	8003e58 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	2027      	movs	r0, #39	; 0x27
 8002ffe:	f000 fae6 	bl	80035ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003002:	2027      	movs	r0, #39	; 0x27
 8003004:	f000 faff 	bl	8003606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003008:	bf00      	nop
 800300a:	3728      	adds	r7, #40	; 0x28
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	40004800 	.word	0x40004800
 8003014:	40023800 	.word	0x40023800
 8003018:	40020400 	.word	0x40020400

0800301c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003020:	e7fe      	b.n	8003020 <NMI_Handler+0x4>

08003022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003022:	b480      	push	{r7}
 8003024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003026:	e7fe      	b.n	8003026 <HardFault_Handler+0x4>

08003028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003028:	b480      	push	{r7}
 800302a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800302c:	e7fe      	b.n	800302c <MemManage_Handler+0x4>

0800302e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800302e:	b480      	push	{r7}
 8003030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003032:	e7fe      	b.n	8003032 <BusFault_Handler+0x4>

08003034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003038:	e7fe      	b.n	8003038 <UsageFault_Handler+0x4>

0800303a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800303a:	b480      	push	{r7}
 800303c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800303e:	bf00      	nop
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800304c:	bf00      	nop
 800304e:	46bd      	mov	sp, r7
 8003050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003054:	4770      	bx	lr

08003056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003056:	b480      	push	{r7}
 8003058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800305a:	bf00      	nop
 800305c:	46bd      	mov	sp, r7
 800305e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003062:	4770      	bx	lr

08003064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003068:	f000 f992 	bl	8003390 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800306c:	bf00      	nop
 800306e:	bd80      	pop	{r7, pc}

08003070 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003074:	4802      	ldr	r0, [pc, #8]	; (8003080 <TIM2_IRQHandler+0x10>)
 8003076:	f005 fb19 	bl	80086ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	200004b4 	.word	0x200004b4

08003084 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003088:	4802      	ldr	r0, [pc, #8]	; (8003094 <USART3_IRQHandler+0x10>)
 800308a:	f005 ffc1 	bl	8009010 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800308e:	bf00      	nop
 8003090:	bd80      	pop	{r7, pc}
 8003092:	bf00      	nop
 8003094:	200004fc 	.word	0x200004fc

08003098 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800309c:	4802      	ldr	r0, [pc, #8]	; (80030a8 <SDIO_IRQHandler+0x10>)
 800309e:	f004 f98b 	bl	80073b8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80030a2:	bf00      	nop
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	20000370 	.word	0x20000370

080030ac <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80030b0:	4802      	ldr	r0, [pc, #8]	; (80030bc <DMA2_Stream3_IRQHandler+0x10>)
 80030b2:	f000 fc5b 	bl	800396c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80030b6:	bf00      	nop
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	200003f4 	.word	0x200003f4

080030c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80030c4:	4802      	ldr	r0, [pc, #8]	; (80030d0 <OTG_FS_IRQHandler+0x10>)
 80030c6:	f002 f97a 	bl	80053be <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80030ca:	bf00      	nop
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20001fd8 	.word	0x20001fd8

080030d4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80030d8:	4802      	ldr	r0, [pc, #8]	; (80030e4 <DMA2_Stream6_IRQHandler+0x10>)
 80030da:	f000 fc47 	bl	800396c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80030de:	bf00      	nop
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	20000454 	.word	0x20000454

080030e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80030e8:	b480      	push	{r7}
 80030ea:	af00      	add	r7, sp, #0
  return 1;
 80030ec:	2301      	movs	r3, #1
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <_kill>:

int _kill(int pid, int sig)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003102:	f00e ff9f 	bl	8012044 <__errno>
 8003106:	4603      	mov	r3, r0
 8003108:	2216      	movs	r2, #22
 800310a:	601a      	str	r2, [r3, #0]
  return -1;
 800310c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003110:	4618      	mov	r0, r3
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <_exit>:

void _exit (int status)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003120:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ffe7 	bl	80030f8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800312a:	e7fe      	b.n	800312a <_exit+0x12>

0800312c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b086      	sub	sp, #24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003138:	2300      	movs	r3, #0
 800313a:	617b      	str	r3, [r7, #20]
 800313c:	e00a      	b.n	8003154 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800313e:	f3af 8000 	nop.w
 8003142:	4601      	mov	r1, r0
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	1c5a      	adds	r2, r3, #1
 8003148:	60ba      	str	r2, [r7, #8]
 800314a:	b2ca      	uxtb	r2, r1
 800314c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	3301      	adds	r3, #1
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	429a      	cmp	r2, r3
 800315a:	dbf0      	blt.n	800313e <_read+0x12>
  }

  return len;
 800315c:	687b      	ldr	r3, [r7, #4]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}

08003166 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	b086      	sub	sp, #24
 800316a:	af00      	add	r7, sp, #0
 800316c:	60f8      	str	r0, [r7, #12]
 800316e:	60b9      	str	r1, [r7, #8]
 8003170:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003172:	2300      	movs	r3, #0
 8003174:	617b      	str	r3, [r7, #20]
 8003176:	e009      	b.n	800318c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	60ba      	str	r2, [r7, #8]
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	4618      	mov	r0, r3
 8003182:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	3301      	adds	r3, #1
 800318a:	617b      	str	r3, [r7, #20]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	429a      	cmp	r2, r3
 8003192:	dbf1      	blt.n	8003178 <_write+0x12>
  }
  return len;
 8003194:	687b      	ldr	r3, [r7, #4]
}
 8003196:	4618      	mov	r0, r3
 8003198:	3718      	adds	r7, #24
 800319a:	46bd      	mov	sp, r7
 800319c:	bd80      	pop	{r7, pc}

0800319e <_close>:

int _close(int file)
{
 800319e:	b480      	push	{r7}
 80031a0:	b083      	sub	sp, #12
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80031a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	370c      	adds	r7, #12
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr

080031b6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
 80031be:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80031c6:	605a      	str	r2, [r3, #4]
  return 0;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	370c      	adds	r7, #12
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <_isatty>:

int _isatty(int file)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80031de:	2301      	movs	r3, #1
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	60f8      	str	r0, [r7, #12]
 80031f4:	60b9      	str	r1, [r7, #8]
 80031f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3714      	adds	r7, #20
 80031fe:	46bd      	mov	sp, r7
 8003200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003204:	4770      	bx	lr
	...

08003208 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003210:	4a14      	ldr	r2, [pc, #80]	; (8003264 <_sbrk+0x5c>)
 8003212:	4b15      	ldr	r3, [pc, #84]	; (8003268 <_sbrk+0x60>)
 8003214:	1ad3      	subs	r3, r2, r3
 8003216:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800321c:	4b13      	ldr	r3, [pc, #76]	; (800326c <_sbrk+0x64>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d102      	bne.n	800322a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003224:	4b11      	ldr	r3, [pc, #68]	; (800326c <_sbrk+0x64>)
 8003226:	4a12      	ldr	r2, [pc, #72]	; (8003270 <_sbrk+0x68>)
 8003228:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800322a:	4b10      	ldr	r3, [pc, #64]	; (800326c <_sbrk+0x64>)
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	4413      	add	r3, r2
 8003232:	693a      	ldr	r2, [r7, #16]
 8003234:	429a      	cmp	r2, r3
 8003236:	d207      	bcs.n	8003248 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003238:	f00e ff04 	bl	8012044 <__errno>
 800323c:	4603      	mov	r3, r0
 800323e:	220c      	movs	r2, #12
 8003240:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003242:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003246:	e009      	b.n	800325c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003248:	4b08      	ldr	r3, [pc, #32]	; (800326c <_sbrk+0x64>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800324e:	4b07      	ldr	r3, [pc, #28]	; (800326c <_sbrk+0x64>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	4a05      	ldr	r2, [pc, #20]	; (800326c <_sbrk+0x64>)
 8003258:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800325a:	68fb      	ldr	r3, [r7, #12]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	20020000 	.word	0x20020000
 8003268:	00000400 	.word	0x00000400
 800326c:	20000aac 	.word	0x20000aac
 8003270:	20002850 	.word	0x20002850

08003274 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003274:	b480      	push	{r7}
 8003276:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003278:	4b06      	ldr	r3, [pc, #24]	; (8003294 <SystemInit+0x20>)
 800327a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800327e:	4a05      	ldr	r2, [pc, #20]	; (8003294 <SystemInit+0x20>)
 8003280:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003284:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003288:	bf00      	nop
 800328a:	46bd      	mov	sp, r7
 800328c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003298:	f8df d034 	ldr.w	sp, [pc, #52]	; 80032d0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800329c:	480d      	ldr	r0, [pc, #52]	; (80032d4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800329e:	490e      	ldr	r1, [pc, #56]	; (80032d8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032a0:	4a0e      	ldr	r2, [pc, #56]	; (80032dc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032a4:	e002      	b.n	80032ac <LoopCopyDataInit>

080032a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032aa:	3304      	adds	r3, #4

080032ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032b0:	d3f9      	bcc.n	80032a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032b2:	4a0b      	ldr	r2, [pc, #44]	; (80032e0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80032b4:	4c0b      	ldr	r4, [pc, #44]	; (80032e4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80032b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80032b8:	e001      	b.n	80032be <LoopFillZerobss>

080032ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80032ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80032bc:	3204      	adds	r2, #4

080032be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80032be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80032c0:	d3fb      	bcc.n	80032ba <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80032c2:	f7ff ffd7 	bl	8003274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80032c6:	f00e fec3 	bl	8012050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80032ca:	f7fe fbe9 	bl	8001aa0 <main>
  bx  lr    
 80032ce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80032d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80032d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80032d8:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 80032dc:	08015c68 	.word	0x08015c68
  ldr r2, =_sbss
 80032e0:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 80032e4:	20002850 	.word	0x20002850

080032e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032e8:	e7fe      	b.n	80032e8 <ADC_IRQHandler>
	...

080032ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032f0:	4b0e      	ldr	r3, [pc, #56]	; (800332c <HAL_Init+0x40>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a0d      	ldr	r2, [pc, #52]	; (800332c <HAL_Init+0x40>)
 80032f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032fc:	4b0b      	ldr	r3, [pc, #44]	; (800332c <HAL_Init+0x40>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a0a      	ldr	r2, [pc, #40]	; (800332c <HAL_Init+0x40>)
 8003302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003306:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003308:	4b08      	ldr	r3, [pc, #32]	; (800332c <HAL_Init+0x40>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a07      	ldr	r2, [pc, #28]	; (800332c <HAL_Init+0x40>)
 800330e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003312:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003314:	2003      	movs	r0, #3
 8003316:	f000 f94f 	bl	80035b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800331a:	200f      	movs	r0, #15
 800331c:	f000 f808 	bl	8003330 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003320:	f7ff fc96 	bl	8002c50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	bd80      	pop	{r7, pc}
 800332a:	bf00      	nop
 800332c:	40023c00 	.word	0x40023c00

08003330 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003338:	4b12      	ldr	r3, [pc, #72]	; (8003384 <HAL_InitTick+0x54>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_InitTick+0x58>)
 800333e:	781b      	ldrb	r3, [r3, #0]
 8003340:	4619      	mov	r1, r3
 8003342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003346:	fbb3 f3f1 	udiv	r3, r3, r1
 800334a:	fbb2 f3f3 	udiv	r3, r2, r3
 800334e:	4618      	mov	r0, r3
 8003350:	f000 f967 	bl	8003622 <HAL_SYSTICK_Config>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d001      	beq.n	800335e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e00e      	b.n	800337c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2b0f      	cmp	r3, #15
 8003362:	d80a      	bhi.n	800337a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003364:	2200      	movs	r2, #0
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800336c:	f000 f92f 	bl	80035ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003370:	4a06      	ldr	r2, [pc, #24]	; (800338c <HAL_InitTick+0x5c>)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
 8003378:	e000      	b.n	800337c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20000024 	.word	0x20000024
 8003388:	2000002c 	.word	0x2000002c
 800338c:	20000028 	.word	0x20000028

08003390 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003394:	4b06      	ldr	r3, [pc, #24]	; (80033b0 <HAL_IncTick+0x20>)
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	461a      	mov	r2, r3
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_IncTick+0x24>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4413      	add	r3, r2
 80033a0:	4a04      	ldr	r2, [pc, #16]	; (80033b4 <HAL_IncTick+0x24>)
 80033a2:	6013      	str	r3, [r2, #0]
}
 80033a4:	bf00      	nop
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr
 80033ae:	bf00      	nop
 80033b0:	2000002c 	.word	0x2000002c
 80033b4:	20000ab0 	.word	0x20000ab0

080033b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return uwTick;
 80033bc:	4b03      	ldr	r3, [pc, #12]	; (80033cc <HAL_GetTick+0x14>)
 80033be:	681b      	ldr	r3, [r3, #0]
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
 80033ca:	bf00      	nop
 80033cc:	20000ab0 	.word	0x20000ab0

080033d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80033d8:	f7ff ffee 	bl	80033b8 <HAL_GetTick>
 80033dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033e8:	d005      	beq.n	80033f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ea:	4b0a      	ldr	r3, [pc, #40]	; (8003414 <HAL_Delay+0x44>)
 80033ec:	781b      	ldrb	r3, [r3, #0]
 80033ee:	461a      	mov	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	4413      	add	r3, r2
 80033f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033f6:	bf00      	nop
 80033f8:	f7ff ffde 	bl	80033b8 <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	68fa      	ldr	r2, [r7, #12]
 8003404:	429a      	cmp	r2, r3
 8003406:	d8f7      	bhi.n	80033f8 <HAL_Delay+0x28>
  {
  }
}
 8003408:	bf00      	nop
 800340a:	bf00      	nop
 800340c:	3710      	adds	r7, #16
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	2000002c 	.word	0x2000002c

08003418 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003418:	b480      	push	{r7}
 800341a:	b085      	sub	sp, #20
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003428:	4b0c      	ldr	r3, [pc, #48]	; (800345c <__NVIC_SetPriorityGrouping+0x44>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800342e:	68ba      	ldr	r2, [r7, #8]
 8003430:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003434:	4013      	ands	r3, r2
 8003436:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003440:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003444:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003448:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800344a:	4a04      	ldr	r2, [pc, #16]	; (800345c <__NVIC_SetPriorityGrouping+0x44>)
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	60d3      	str	r3, [r2, #12]
}
 8003450:	bf00      	nop
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000ed00 	.word	0xe000ed00

08003460 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003460:	b480      	push	{r7}
 8003462:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003464:	4b04      	ldr	r3, [pc, #16]	; (8003478 <__NVIC_GetPriorityGrouping+0x18>)
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	0a1b      	lsrs	r3, r3, #8
 800346a:	f003 0307 	and.w	r3, r3, #7
}
 800346e:	4618      	mov	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	e000ed00 	.word	0xe000ed00

0800347c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	2b00      	cmp	r3, #0
 800348c:	db0b      	blt.n	80034a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800348e:	79fb      	ldrb	r3, [r7, #7]
 8003490:	f003 021f 	and.w	r2, r3, #31
 8003494:	4907      	ldr	r1, [pc, #28]	; (80034b4 <__NVIC_EnableIRQ+0x38>)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	095b      	lsrs	r3, r3, #5
 800349c:	2001      	movs	r0, #1
 800349e:	fa00 f202 	lsl.w	r2, r0, r2
 80034a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80034a6:	bf00      	nop
 80034a8:	370c      	adds	r7, #12
 80034aa:	46bd      	mov	sp, r7
 80034ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b0:	4770      	bx	lr
 80034b2:	bf00      	nop
 80034b4:	e000e100 	.word	0xe000e100

080034b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	4603      	mov	r3, r0
 80034c0:	6039      	str	r1, [r7, #0]
 80034c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	db0a      	blt.n	80034e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	490c      	ldr	r1, [pc, #48]	; (8003504 <__NVIC_SetPriority+0x4c>)
 80034d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034d6:	0112      	lsls	r2, r2, #4
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	440b      	add	r3, r1
 80034dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034e0:	e00a      	b.n	80034f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	4908      	ldr	r1, [pc, #32]	; (8003508 <__NVIC_SetPriority+0x50>)
 80034e8:	79fb      	ldrb	r3, [r7, #7]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	3b04      	subs	r3, #4
 80034f0:	0112      	lsls	r2, r2, #4
 80034f2:	b2d2      	uxtb	r2, r2
 80034f4:	440b      	add	r3, r1
 80034f6:	761a      	strb	r2, [r3, #24]
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr
 8003504:	e000e100 	.word	0xe000e100
 8003508:	e000ed00 	.word	0xe000ed00

0800350c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800350c:	b480      	push	{r7}
 800350e:	b089      	sub	sp, #36	; 0x24
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f003 0307 	and.w	r3, r3, #7
 800351e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	f1c3 0307 	rsb	r3, r3, #7
 8003526:	2b04      	cmp	r3, #4
 8003528:	bf28      	it	cs
 800352a:	2304      	movcs	r3, #4
 800352c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	3304      	adds	r3, #4
 8003532:	2b06      	cmp	r3, #6
 8003534:	d902      	bls.n	800353c <NVIC_EncodePriority+0x30>
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	3b03      	subs	r3, #3
 800353a:	e000      	b.n	800353e <NVIC_EncodePriority+0x32>
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003540:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	fa02 f303 	lsl.w	r3, r2, r3
 800354a:	43da      	mvns	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	401a      	ands	r2, r3
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003554:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	fa01 f303 	lsl.w	r3, r1, r3
 800355e:	43d9      	mvns	r1, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003564:	4313      	orrs	r3, r2
         );
}
 8003566:	4618      	mov	r0, r3
 8003568:	3724      	adds	r7, #36	; 0x24
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
	...

08003574 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	3b01      	subs	r3, #1
 8003580:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003584:	d301      	bcc.n	800358a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003586:	2301      	movs	r3, #1
 8003588:	e00f      	b.n	80035aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800358a:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <SysTick_Config+0x40>)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3b01      	subs	r3, #1
 8003590:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003592:	210f      	movs	r1, #15
 8003594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003598:	f7ff ff8e 	bl	80034b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800359c:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <SysTick_Config+0x40>)
 800359e:	2200      	movs	r2, #0
 80035a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035a2:	4b04      	ldr	r3, [pc, #16]	; (80035b4 <SysTick_Config+0x40>)
 80035a4:	2207      	movs	r2, #7
 80035a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035a8:	2300      	movs	r3, #0
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3708      	adds	r7, #8
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	e000e010 	.word	0xe000e010

080035b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80035c0:	6878      	ldr	r0, [r7, #4]
 80035c2:	f7ff ff29 	bl	8003418 <__NVIC_SetPriorityGrouping>
}
 80035c6:	bf00      	nop
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}

080035ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b086      	sub	sp, #24
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	4603      	mov	r3, r0
 80035d6:	60b9      	str	r1, [r7, #8]
 80035d8:	607a      	str	r2, [r7, #4]
 80035da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035dc:	2300      	movs	r3, #0
 80035de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035e0:	f7ff ff3e 	bl	8003460 <__NVIC_GetPriorityGrouping>
 80035e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	68b9      	ldr	r1, [r7, #8]
 80035ea:	6978      	ldr	r0, [r7, #20]
 80035ec:	f7ff ff8e 	bl	800350c <NVIC_EncodePriority>
 80035f0:	4602      	mov	r2, r0
 80035f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035f6:	4611      	mov	r1, r2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7ff ff5d 	bl	80034b8 <__NVIC_SetPriority>
}
 80035fe:	bf00      	nop
 8003600:	3718      	adds	r7, #24
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b082      	sub	sp, #8
 800360a:	af00      	add	r7, sp, #0
 800360c:	4603      	mov	r3, r0
 800360e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff ff31 	bl	800347c <__NVIC_EnableIRQ>
}
 800361a:	bf00      	nop
 800361c:	3708      	adds	r7, #8
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}

08003622 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003622:	b580      	push	{r7, lr}
 8003624:	b082      	sub	sp, #8
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f7ff ffa2 	bl	8003574 <SysTick_Config>
 8003630:	4603      	mov	r3, r0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003644:	2300      	movs	r3, #0
 8003646:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003648:	f7ff feb6 	bl	80033b8 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e099      	b.n	800378c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f022 0201 	bic.w	r2, r2, #1
 8003676:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003678:	e00f      	b.n	800369a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800367a:	f7ff fe9d 	bl	80033b8 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b05      	cmp	r3, #5
 8003686:	d908      	bls.n	800369a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2220      	movs	r2, #32
 800368c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2203      	movs	r2, #3
 8003692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e078      	b.n	800378c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1e8      	bne.n	800367a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4b38      	ldr	r3, [pc, #224]	; (8003794 <HAL_DMA_Init+0x158>)
 80036b4:	4013      	ands	r3, r2
 80036b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	699b      	ldr	r3, [r3, #24]
 80036d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f0:	2b04      	cmp	r3, #4
 80036f2:	d107      	bne.n	8003704 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fc:	4313      	orrs	r3, r2
 80036fe:	697a      	ldr	r2, [r7, #20]
 8003700:	4313      	orrs	r3, r2
 8003702:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	697a      	ldr	r2, [r7, #20]
 800370a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	f023 0307 	bic.w	r3, r3, #7
 800371a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003720:	697a      	ldr	r2, [r7, #20]
 8003722:	4313      	orrs	r3, r2
 8003724:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	2b04      	cmp	r3, #4
 800372c:	d117      	bne.n	800375e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	4313      	orrs	r3, r2
 8003736:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00e      	beq.n	800375e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f000 fb0d 	bl	8003d60 <DMA_CheckFifoParam>
 8003746:	4603      	mov	r3, r0
 8003748:	2b00      	cmp	r3, #0
 800374a:	d008      	beq.n	800375e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2240      	movs	r2, #64	; 0x40
 8003750:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800375a:	2301      	movs	r3, #1
 800375c:	e016      	b.n	800378c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f000 fac4 	bl	8003cf4 <DMA_CalcBaseAndBitshift>
 800376c:	4603      	mov	r3, r0
 800376e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003774:	223f      	movs	r2, #63	; 0x3f
 8003776:	409a      	lsls	r2, r3
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2200      	movs	r2, #0
 8003780:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3718      	adds	r7, #24
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}
 8003794:	f010803f 	.word	0xf010803f

08003798 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	60f8      	str	r0, [r7, #12]
 80037a0:	60b9      	str	r1, [r7, #8]
 80037a2:	607a      	str	r2, [r7, #4]
 80037a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037a6:	2300      	movs	r3, #0
 80037a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_DMA_Start_IT+0x26>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e040      	b.n	8003840 <HAL_DMA_Start_IT+0xa8>
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d12f      	bne.n	8003832 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2202      	movs	r2, #2
 80037d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	2200      	movs	r2, #0
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	687a      	ldr	r2, [r7, #4]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	68f8      	ldr	r0, [r7, #12]
 80037e8:	f000 fa56 	bl	8003c98 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f0:	223f      	movs	r2, #63	; 0x3f
 80037f2:	409a      	lsls	r2, r3
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0216 	orr.w	r2, r2, #22
 8003806:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f042 0208 	orr.w	r2, r2, #8
 800381e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f042 0201 	orr.w	r2, r2, #1
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	e005      	b.n	800383e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800383a:	2302      	movs	r3, #2
 800383c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800383e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003854:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003856:	f7ff fdaf 	bl	80033b8 <HAL_GetTick>
 800385a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003862:	b2db      	uxtb	r3, r3
 8003864:	2b02      	cmp	r3, #2
 8003866:	d008      	beq.n	800387a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2280      	movs	r2, #128	; 0x80
 800386c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e052      	b.n	8003920 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f022 0216 	bic.w	r2, r2, #22
 8003888:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695a      	ldr	r2, [r3, #20]
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003898:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d103      	bne.n	80038aa <HAL_DMA_Abort+0x62>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d007      	beq.n	80038ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0208 	bic.w	r2, r2, #8
 80038b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0201 	bic.w	r2, r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038ca:	e013      	b.n	80038f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80038cc:	f7ff fd74 	bl	80033b8 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b05      	cmp	r3, #5
 80038d8:	d90c      	bls.n	80038f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2220      	movs	r2, #32
 80038de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2203      	movs	r2, #3
 80038e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e015      	b.n	8003920 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d1e4      	bne.n	80038cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003906:	223f      	movs	r2, #63	; 0x3f
 8003908:	409a      	lsls	r2, r3
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}

08003928 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003928:	b480      	push	{r7}
 800392a:	b083      	sub	sp, #12
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003936:	b2db      	uxtb	r3, r3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d004      	beq.n	8003946 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2280      	movs	r2, #128	; 0x80
 8003940:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e00c      	b.n	8003960 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2205      	movs	r2, #5
 800394a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0201 	bic.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800395e:	2300      	movs	r3, #0
}
 8003960:	4618      	mov	r0, r3
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b086      	sub	sp, #24
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003974:	2300      	movs	r3, #0
 8003976:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003978:	4b8e      	ldr	r3, [pc, #568]	; (8003bb4 <HAL_DMA_IRQHandler+0x248>)
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a8e      	ldr	r2, [pc, #568]	; (8003bb8 <HAL_DMA_IRQHandler+0x24c>)
 800397e:	fba2 2303 	umull	r2, r3, r2, r3
 8003982:	0a9b      	lsrs	r3, r3, #10
 8003984:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003996:	2208      	movs	r2, #8
 8003998:	409a      	lsls	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	4013      	ands	r3, r2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d01a      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0304 	and.w	r3, r3, #4
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d013      	beq.n	80039d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0204 	bic.w	r2, r2, #4
 80039be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c4:	2208      	movs	r2, #8
 80039c6:	409a      	lsls	r2, r3
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039d0:	f043 0201 	orr.w	r2, r3, #1
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039dc:	2201      	movs	r2, #1
 80039de:	409a      	lsls	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	4013      	ands	r3, r2
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d012      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	695b      	ldr	r3, [r3, #20]
 80039ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00b      	beq.n	8003a0e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039fa:	2201      	movs	r2, #1
 80039fc:	409a      	lsls	r2, r3
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a06:	f043 0202 	orr.w	r2, r3, #2
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a12:	2204      	movs	r2, #4
 8003a14:	409a      	lsls	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d012      	beq.n	8003a44 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0302 	and.w	r3, r3, #2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00b      	beq.n	8003a44 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a30:	2204      	movs	r2, #4
 8003a32:	409a      	lsls	r2, r3
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3c:	f043 0204 	orr.w	r2, r3, #4
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a48:	2210      	movs	r2, #16
 8003a4a:	409a      	lsls	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d043      	beq.n	8003adc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d03c      	beq.n	8003adc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a66:	2210      	movs	r2, #16
 8003a68:	409a      	lsls	r2, r3
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d018      	beq.n	8003aae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d108      	bne.n	8003a9c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d024      	beq.n	8003adc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	4798      	blx	r3
 8003a9a:	e01f      	b.n	8003adc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01b      	beq.n	8003adc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	4798      	blx	r3
 8003aac:	e016      	b.n	8003adc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d107      	bne.n	8003acc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 0208 	bic.w	r2, r2, #8
 8003aca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d003      	beq.n	8003adc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae0:	2220      	movs	r2, #32
 8003ae2:	409a      	lsls	r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 808f 	beq.w	8003c0c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0310 	and.w	r3, r3, #16
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 8087 	beq.w	8003c0c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b02:	2220      	movs	r2, #32
 8003b04:	409a      	lsls	r2, r3
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b05      	cmp	r3, #5
 8003b14:	d136      	bne.n	8003b84 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	681a      	ldr	r2, [r3, #0]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f022 0216 	bic.w	r2, r2, #22
 8003b24:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	695a      	ldr	r2, [r3, #20]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b34:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d103      	bne.n	8003b46 <HAL_DMA_IRQHandler+0x1da>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d007      	beq.n	8003b56 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0208 	bic.w	r2, r2, #8
 8003b54:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5a:	223f      	movs	r2, #63	; 0x3f
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d07e      	beq.n	8003c78 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	4798      	blx	r3
        }
        return;
 8003b82:	e079      	b.n	8003c78 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d01d      	beq.n	8003bce <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10d      	bne.n	8003bbc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d031      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bac:	6878      	ldr	r0, [r7, #4]
 8003bae:	4798      	blx	r3
 8003bb0:	e02c      	b.n	8003c0c <HAL_DMA_IRQHandler+0x2a0>
 8003bb2:	bf00      	nop
 8003bb4:	20000024 	.word	0x20000024
 8003bb8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d023      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
 8003bcc:	e01e      	b.n	8003c0c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10f      	bne.n	8003bfc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0210 	bic.w	r2, r2, #16
 8003bea:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2201      	movs	r2, #1
 8003bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d003      	beq.n	8003c0c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d032      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d022      	beq.n	8003c66 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2205      	movs	r2, #5
 8003c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0201 	bic.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	697a      	ldr	r2, [r7, #20]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d307      	bcc.n	8003c54 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1f2      	bne.n	8003c38 <HAL_DMA_IRQHandler+0x2cc>
 8003c52:	e000      	b.n	8003c56 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c54:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2201      	movs	r2, #1
 8003c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d005      	beq.n	8003c7a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	4798      	blx	r3
 8003c76:	e000      	b.n	8003c7a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c78:	bf00      	nop
    }
  }
}
 8003c7a:	3718      	adds	r7, #24
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}

08003c80 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
 8003ca4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003cb4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b40      	cmp	r3, #64	; 0x40
 8003cc4:	d108      	bne.n	8003cd8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	68ba      	ldr	r2, [r7, #8]
 8003cd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003cd6:	e007      	b.n	8003ce8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	687a      	ldr	r2, [r7, #4]
 8003ce6:	60da      	str	r2, [r3, #12]
}
 8003ce8:	bf00      	nop
 8003cea:	3714      	adds	r7, #20
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	3b10      	subs	r3, #16
 8003d04:	4a14      	ldr	r2, [pc, #80]	; (8003d58 <DMA_CalcBaseAndBitshift+0x64>)
 8003d06:	fba2 2303 	umull	r2, r3, r2, r3
 8003d0a:	091b      	lsrs	r3, r3, #4
 8003d0c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d0e:	4a13      	ldr	r2, [pc, #76]	; (8003d5c <DMA_CalcBaseAndBitshift+0x68>)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	4413      	add	r3, r2
 8003d14:	781b      	ldrb	r3, [r3, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2b03      	cmp	r3, #3
 8003d20:	d909      	bls.n	8003d36 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d2a:	f023 0303 	bic.w	r3, r3, #3
 8003d2e:	1d1a      	adds	r2, r3, #4
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	659a      	str	r2, [r3, #88]	; 0x58
 8003d34:	e007      	b.n	8003d46 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d3e:	f023 0303 	bic.w	r3, r3, #3
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
 8003d56:	bf00      	nop
 8003d58:	aaaaaaab 	.word	0xaaaaaaab
 8003d5c:	080157a8 	.word	0x080157a8

08003d60 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b085      	sub	sp, #20
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d70:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d11f      	bne.n	8003dba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d856      	bhi.n	8003e2e <DMA_CheckFifoParam+0xce>
 8003d80:	a201      	add	r2, pc, #4	; (adr r2, 8003d88 <DMA_CheckFifoParam+0x28>)
 8003d82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d86:	bf00      	nop
 8003d88:	08003d99 	.word	0x08003d99
 8003d8c:	08003dab 	.word	0x08003dab
 8003d90:	08003d99 	.word	0x08003d99
 8003d94:	08003e2f 	.word	0x08003e2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d9c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d046      	beq.n	8003e32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003da8:	e043      	b.n	8003e32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003db2:	d140      	bne.n	8003e36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003db8:	e03d      	b.n	8003e36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699b      	ldr	r3, [r3, #24]
 8003dbe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003dc2:	d121      	bne.n	8003e08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	d837      	bhi.n	8003e3a <DMA_CheckFifoParam+0xda>
 8003dca:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <DMA_CheckFifoParam+0x70>)
 8003dcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd0:	08003de1 	.word	0x08003de1
 8003dd4:	08003de7 	.word	0x08003de7
 8003dd8:	08003de1 	.word	0x08003de1
 8003ddc:	08003df9 	.word	0x08003df9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
      break;
 8003de4:	e030      	b.n	8003e48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d025      	beq.n	8003e3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003df6:	e022      	b.n	8003e3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dfc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e00:	d11f      	bne.n	8003e42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e06:	e01c      	b.n	8003e42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d903      	bls.n	8003e16 <DMA_CheckFifoParam+0xb6>
 8003e0e:	68bb      	ldr	r3, [r7, #8]
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d003      	beq.n	8003e1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e14:	e018      	b.n	8003e48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	73fb      	strb	r3, [r7, #15]
      break;
 8003e1a:	e015      	b.n	8003e48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d00e      	beq.n	8003e46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e2c:	e00b      	b.n	8003e46 <DMA_CheckFifoParam+0xe6>
      break;
 8003e2e:	bf00      	nop
 8003e30:	e00a      	b.n	8003e48 <DMA_CheckFifoParam+0xe8>
      break;
 8003e32:	bf00      	nop
 8003e34:	e008      	b.n	8003e48 <DMA_CheckFifoParam+0xe8>
      break;
 8003e36:	bf00      	nop
 8003e38:	e006      	b.n	8003e48 <DMA_CheckFifoParam+0xe8>
      break;
 8003e3a:	bf00      	nop
 8003e3c:	e004      	b.n	8003e48 <DMA_CheckFifoParam+0xe8>
      break;
 8003e3e:	bf00      	nop
 8003e40:	e002      	b.n	8003e48 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e42:	bf00      	nop
 8003e44:	e000      	b.n	8003e48 <DMA_CheckFifoParam+0xe8>
      break;
 8003e46:	bf00      	nop
    }
  } 
  
  return status; 
 8003e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3714      	adds	r7, #20
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop

08003e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b089      	sub	sp, #36	; 0x24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e62:	2300      	movs	r3, #0
 8003e64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e66:	2300      	movs	r3, #0
 8003e68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e6e:	2300      	movs	r3, #0
 8003e70:	61fb      	str	r3, [r7, #28]
 8003e72:	e16b      	b.n	800414c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003e74:	2201      	movs	r2, #1
 8003e76:	69fb      	ldr	r3, [r7, #28]
 8003e78:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	697a      	ldr	r2, [r7, #20]
 8003e84:	4013      	ands	r3, r2
 8003e86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	429a      	cmp	r2, r3
 8003e8e:	f040 815a 	bne.w	8004146 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f003 0303 	and.w	r3, r3, #3
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d005      	beq.n	8003eaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d130      	bne.n	8003f0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003eb0:	69fb      	ldr	r3, [r7, #28]
 8003eb2:	005b      	lsls	r3, r3, #1
 8003eb4:	2203      	movs	r2, #3
 8003eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8003eba:	43db      	mvns	r3, r3
 8003ebc:	69ba      	ldr	r2, [r7, #24]
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	68da      	ldr	r2, [r3, #12]
 8003ec6:	69fb      	ldr	r3, [r7, #28]
 8003ec8:	005b      	lsls	r3, r3, #1
 8003eca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ece:	69ba      	ldr	r2, [r7, #24]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	43db      	mvns	r3, r3
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	4013      	ands	r3, r2
 8003eee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	f003 0201 	and.w	r2, r3, #1
 8003efa:	69fb      	ldr	r3, [r7, #28]
 8003efc:	fa02 f303 	lsl.w	r3, r2, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4313      	orrs	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	69ba      	ldr	r2, [r7, #24]
 8003f0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	f003 0303 	and.w	r3, r3, #3
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d017      	beq.n	8003f48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	005b      	lsls	r3, r3, #1
 8003f22:	2203      	movs	r2, #3
 8003f24:	fa02 f303 	lsl.w	r3, r2, r3
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	005b      	lsls	r3, r3, #1
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	69ba      	ldr	r2, [r7, #24]
 8003f46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 0303 	and.w	r3, r3, #3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d123      	bne.n	8003f9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	08da      	lsrs	r2, r3, #3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	3208      	adds	r2, #8
 8003f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	f003 0307 	and.w	r3, r3, #7
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	220f      	movs	r2, #15
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	43db      	mvns	r3, r3
 8003f72:	69ba      	ldr	r2, [r7, #24]
 8003f74:	4013      	ands	r3, r2
 8003f76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	691a      	ldr	r2, [r3, #16]
 8003f7c:	69fb      	ldr	r3, [r7, #28]
 8003f7e:	f003 0307 	and.w	r3, r3, #7
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	69ba      	ldr	r2, [r7, #24]
 8003f8a:	4313      	orrs	r3, r2
 8003f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	08da      	lsrs	r2, r3, #3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	3208      	adds	r2, #8
 8003f96:	69b9      	ldr	r1, [r7, #24]
 8003f98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	2203      	movs	r2, #3
 8003fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fac:	43db      	mvns	r3, r3
 8003fae:	69ba      	ldr	r2, [r7, #24]
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 0203 	and.w	r2, r3, #3
 8003fbc:	69fb      	ldr	r3, [r7, #28]
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc4:	69ba      	ldr	r2, [r7, #24]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	69ba      	ldr	r2, [r7, #24]
 8003fce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	f000 80b4 	beq.w	8004146 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	4b60      	ldr	r3, [pc, #384]	; (8004164 <HAL_GPIO_Init+0x30c>)
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	4a5f      	ldr	r2, [pc, #380]	; (8004164 <HAL_GPIO_Init+0x30c>)
 8003fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fec:	6453      	str	r3, [r2, #68]	; 0x44
 8003fee:	4b5d      	ldr	r3, [pc, #372]	; (8004164 <HAL_GPIO_Init+0x30c>)
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ff6:	60fb      	str	r3, [r7, #12]
 8003ff8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ffa:	4a5b      	ldr	r2, [pc, #364]	; (8004168 <HAL_GPIO_Init+0x310>)
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	089b      	lsrs	r3, r3, #2
 8004000:	3302      	adds	r3, #2
 8004002:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004006:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	f003 0303 	and.w	r3, r3, #3
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	220f      	movs	r2, #15
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	43db      	mvns	r3, r3
 8004018:	69ba      	ldr	r2, [r7, #24]
 800401a:	4013      	ands	r3, r2
 800401c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a52      	ldr	r2, [pc, #328]	; (800416c <HAL_GPIO_Init+0x314>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d02b      	beq.n	800407e <HAL_GPIO_Init+0x226>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a51      	ldr	r2, [pc, #324]	; (8004170 <HAL_GPIO_Init+0x318>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d025      	beq.n	800407a <HAL_GPIO_Init+0x222>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a50      	ldr	r2, [pc, #320]	; (8004174 <HAL_GPIO_Init+0x31c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d01f      	beq.n	8004076 <HAL_GPIO_Init+0x21e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a4f      	ldr	r2, [pc, #316]	; (8004178 <HAL_GPIO_Init+0x320>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d019      	beq.n	8004072 <HAL_GPIO_Init+0x21a>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a4e      	ldr	r2, [pc, #312]	; (800417c <HAL_GPIO_Init+0x324>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d013      	beq.n	800406e <HAL_GPIO_Init+0x216>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a4d      	ldr	r2, [pc, #308]	; (8004180 <HAL_GPIO_Init+0x328>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d00d      	beq.n	800406a <HAL_GPIO_Init+0x212>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a4c      	ldr	r2, [pc, #304]	; (8004184 <HAL_GPIO_Init+0x32c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d007      	beq.n	8004066 <HAL_GPIO_Init+0x20e>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a4b      	ldr	r2, [pc, #300]	; (8004188 <HAL_GPIO_Init+0x330>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d101      	bne.n	8004062 <HAL_GPIO_Init+0x20a>
 800405e:	2307      	movs	r3, #7
 8004060:	e00e      	b.n	8004080 <HAL_GPIO_Init+0x228>
 8004062:	2308      	movs	r3, #8
 8004064:	e00c      	b.n	8004080 <HAL_GPIO_Init+0x228>
 8004066:	2306      	movs	r3, #6
 8004068:	e00a      	b.n	8004080 <HAL_GPIO_Init+0x228>
 800406a:	2305      	movs	r3, #5
 800406c:	e008      	b.n	8004080 <HAL_GPIO_Init+0x228>
 800406e:	2304      	movs	r3, #4
 8004070:	e006      	b.n	8004080 <HAL_GPIO_Init+0x228>
 8004072:	2303      	movs	r3, #3
 8004074:	e004      	b.n	8004080 <HAL_GPIO_Init+0x228>
 8004076:	2302      	movs	r3, #2
 8004078:	e002      	b.n	8004080 <HAL_GPIO_Init+0x228>
 800407a:	2301      	movs	r3, #1
 800407c:	e000      	b.n	8004080 <HAL_GPIO_Init+0x228>
 800407e:	2300      	movs	r3, #0
 8004080:	69fa      	ldr	r2, [r7, #28]
 8004082:	f002 0203 	and.w	r2, r2, #3
 8004086:	0092      	lsls	r2, r2, #2
 8004088:	4093      	lsls	r3, r2
 800408a:	69ba      	ldr	r2, [r7, #24]
 800408c:	4313      	orrs	r3, r2
 800408e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004090:	4935      	ldr	r1, [pc, #212]	; (8004168 <HAL_GPIO_Init+0x310>)
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	089b      	lsrs	r3, r3, #2
 8004096:	3302      	adds	r3, #2
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800409e:	4b3b      	ldr	r3, [pc, #236]	; (800418c <HAL_GPIO_Init+0x334>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	43db      	mvns	r3, r3
 80040a8:	69ba      	ldr	r2, [r7, #24]
 80040aa:	4013      	ands	r3, r2
 80040ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d003      	beq.n	80040c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040ba:	69ba      	ldr	r2, [r7, #24]
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	4313      	orrs	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040c2:	4a32      	ldr	r2, [pc, #200]	; (800418c <HAL_GPIO_Init+0x334>)
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040c8:	4b30      	ldr	r3, [pc, #192]	; (800418c <HAL_GPIO_Init+0x334>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	43db      	mvns	r3, r3
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4013      	ands	r3, r2
 80040d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80040e4:	69ba      	ldr	r2, [r7, #24]
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040ec:	4a27      	ldr	r2, [pc, #156]	; (800418c <HAL_GPIO_Init+0x334>)
 80040ee:	69bb      	ldr	r3, [r7, #24]
 80040f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040f2:	4b26      	ldr	r3, [pc, #152]	; (800418c <HAL_GPIO_Init+0x334>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	43db      	mvns	r3, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	4013      	ands	r3, r2
 8004100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410a:	2b00      	cmp	r3, #0
 800410c:	d003      	beq.n	8004116 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800410e:	69ba      	ldr	r2, [r7, #24]
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	4313      	orrs	r3, r2
 8004114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004116:	4a1d      	ldr	r2, [pc, #116]	; (800418c <HAL_GPIO_Init+0x334>)
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800411c:	4b1b      	ldr	r3, [pc, #108]	; (800418c <HAL_GPIO_Init+0x334>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	43db      	mvns	r3, r3
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	4013      	ands	r3, r2
 800412a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004140:	4a12      	ldr	r2, [pc, #72]	; (800418c <HAL_GPIO_Init+0x334>)
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	3301      	adds	r3, #1
 800414a:	61fb      	str	r3, [r7, #28]
 800414c:	69fb      	ldr	r3, [r7, #28]
 800414e:	2b0f      	cmp	r3, #15
 8004150:	f67f ae90 	bls.w	8003e74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004154:	bf00      	nop
 8004156:	bf00      	nop
 8004158:	3724      	adds	r7, #36	; 0x24
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	40023800 	.word	0x40023800
 8004168:	40013800 	.word	0x40013800
 800416c:	40020000 	.word	0x40020000
 8004170:	40020400 	.word	0x40020400
 8004174:	40020800 	.word	0x40020800
 8004178:	40020c00 	.word	0x40020c00
 800417c:	40021000 	.word	0x40021000
 8004180:	40021400 	.word	0x40021400
 8004184:	40021800 	.word	0x40021800
 8004188:	40021c00 	.word	0x40021c00
 800418c:	40013c00 	.word	0x40013c00

08004190 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	691a      	ldr	r2, [r3, #16]
 80041a0:	887b      	ldrh	r3, [r7, #2]
 80041a2:	4013      	ands	r3, r2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041a8:	2301      	movs	r3, #1
 80041aa:	73fb      	strb	r3, [r7, #15]
 80041ac:	e001      	b.n	80041b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041ae:	2300      	movs	r3, #0
 80041b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	3714      	adds	r7, #20
 80041b8:	46bd      	mov	sp, r7
 80041ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041be:	4770      	bx	lr

080041c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	807b      	strh	r3, [r7, #2]
 80041cc:	4613      	mov	r3, r2
 80041ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041d0:	787b      	ldrb	r3, [r7, #1]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80041d6:	887a      	ldrh	r2, [r7, #2]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80041dc:	e003      	b.n	80041e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80041de:	887b      	ldrh	r3, [r7, #2]
 80041e0:	041a      	lsls	r2, r3, #16
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	619a      	str	r2, [r3, #24]
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr
	...

080041f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e12b      	b.n	800445e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7fe fd40 	bl	8002ca0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2224      	movs	r2, #36	; 0x24
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f022 0201 	bic.w	r2, r2, #1
 8004236:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004246:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004256:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004258:	f002 fe0e 	bl	8006e78 <HAL_RCC_GetPCLK1Freq>
 800425c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	4a81      	ldr	r2, [pc, #516]	; (8004468 <HAL_I2C_Init+0x274>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d807      	bhi.n	8004278 <HAL_I2C_Init+0x84>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4a80      	ldr	r2, [pc, #512]	; (800446c <HAL_I2C_Init+0x278>)
 800426c:	4293      	cmp	r3, r2
 800426e:	bf94      	ite	ls
 8004270:	2301      	movls	r3, #1
 8004272:	2300      	movhi	r3, #0
 8004274:	b2db      	uxtb	r3, r3
 8004276:	e006      	b.n	8004286 <HAL_I2C_Init+0x92>
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	4a7d      	ldr	r2, [pc, #500]	; (8004470 <HAL_I2C_Init+0x27c>)
 800427c:	4293      	cmp	r3, r2
 800427e:	bf94      	ite	ls
 8004280:	2301      	movls	r3, #1
 8004282:	2300      	movhi	r3, #0
 8004284:	b2db      	uxtb	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e0e7      	b.n	800445e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	4a78      	ldr	r2, [pc, #480]	; (8004474 <HAL_I2C_Init+0x280>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	0c9b      	lsrs	r3, r3, #18
 8004298:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	4a6a      	ldr	r2, [pc, #424]	; (8004468 <HAL_I2C_Init+0x274>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d802      	bhi.n	80042c8 <HAL_I2C_Init+0xd4>
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	3301      	adds	r3, #1
 80042c6:	e009      	b.n	80042dc <HAL_I2C_Init+0xe8>
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80042ce:	fb02 f303 	mul.w	r3, r2, r3
 80042d2:	4a69      	ldr	r2, [pc, #420]	; (8004478 <HAL_I2C_Init+0x284>)
 80042d4:	fba2 2303 	umull	r2, r3, r2, r3
 80042d8:	099b      	lsrs	r3, r3, #6
 80042da:	3301      	adds	r3, #1
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	6812      	ldr	r2, [r2, #0]
 80042e0:	430b      	orrs	r3, r1
 80042e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80042ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	495c      	ldr	r1, [pc, #368]	; (8004468 <HAL_I2C_Init+0x274>)
 80042f8:	428b      	cmp	r3, r1
 80042fa:	d819      	bhi.n	8004330 <HAL_I2C_Init+0x13c>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	1e59      	subs	r1, r3, #1
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	fbb1 f3f3 	udiv	r3, r1, r3
 800430a:	1c59      	adds	r1, r3, #1
 800430c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004310:	400b      	ands	r3, r1
 8004312:	2b00      	cmp	r3, #0
 8004314:	d00a      	beq.n	800432c <HAL_I2C_Init+0x138>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	1e59      	subs	r1, r3, #1
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	005b      	lsls	r3, r3, #1
 8004320:	fbb1 f3f3 	udiv	r3, r1, r3
 8004324:	3301      	adds	r3, #1
 8004326:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800432a:	e051      	b.n	80043d0 <HAL_I2C_Init+0x1dc>
 800432c:	2304      	movs	r3, #4
 800432e:	e04f      	b.n	80043d0 <HAL_I2C_Init+0x1dc>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d111      	bne.n	800435c <HAL_I2C_Init+0x168>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	1e58      	subs	r0, r3, #1
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6859      	ldr	r1, [r3, #4]
 8004340:	460b      	mov	r3, r1
 8004342:	005b      	lsls	r3, r3, #1
 8004344:	440b      	add	r3, r1
 8004346:	fbb0 f3f3 	udiv	r3, r0, r3
 800434a:	3301      	adds	r3, #1
 800434c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004350:	2b00      	cmp	r3, #0
 8004352:	bf0c      	ite	eq
 8004354:	2301      	moveq	r3, #1
 8004356:	2300      	movne	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	e012      	b.n	8004382 <HAL_I2C_Init+0x18e>
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	1e58      	subs	r0, r3, #1
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6859      	ldr	r1, [r3, #4]
 8004364:	460b      	mov	r3, r1
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	0099      	lsls	r1, r3, #2
 800436c:	440b      	add	r3, r1
 800436e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004372:	3301      	adds	r3, #1
 8004374:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004378:	2b00      	cmp	r3, #0
 800437a:	bf0c      	ite	eq
 800437c:	2301      	moveq	r3, #1
 800437e:	2300      	movne	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d001      	beq.n	800438a <HAL_I2C_Init+0x196>
 8004386:	2301      	movs	r3, #1
 8004388:	e022      	b.n	80043d0 <HAL_I2C_Init+0x1dc>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10e      	bne.n	80043b0 <HAL_I2C_Init+0x1bc>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	1e58      	subs	r0, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6859      	ldr	r1, [r3, #4]
 800439a:	460b      	mov	r3, r1
 800439c:	005b      	lsls	r3, r3, #1
 800439e:	440b      	add	r3, r1
 80043a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a4:	3301      	adds	r3, #1
 80043a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043ae:	e00f      	b.n	80043d0 <HAL_I2C_Init+0x1dc>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	1e58      	subs	r0, r3, #1
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6859      	ldr	r1, [r3, #4]
 80043b8:	460b      	mov	r3, r1
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	0099      	lsls	r1, r3, #2
 80043c0:	440b      	add	r3, r1
 80043c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043c6:	3301      	adds	r3, #1
 80043c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80043d0:	6879      	ldr	r1, [r7, #4]
 80043d2:	6809      	ldr	r1, [r1, #0]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69da      	ldr	r2, [r3, #28]
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	431a      	orrs	r2, r3
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	430a      	orrs	r2, r1
 80043f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	689b      	ldr	r3, [r3, #8]
 80043fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80043fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6911      	ldr	r1, [r2, #16]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	68d2      	ldr	r2, [r2, #12]
 800440a:	4311      	orrs	r1, r2
 800440c:	687a      	ldr	r2, [r7, #4]
 800440e:	6812      	ldr	r2, [r2, #0]
 8004410:	430b      	orrs	r3, r1
 8004412:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	695a      	ldr	r2, [r3, #20]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	431a      	orrs	r2, r3
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	430a      	orrs	r2, r1
 800442e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f042 0201 	orr.w	r2, r2, #1
 800443e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2220      	movs	r2, #32
 800444a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	000186a0 	.word	0x000186a0
 800446c:	001e847f 	.word	0x001e847f
 8004470:	003d08ff 	.word	0x003d08ff
 8004474:	431bde83 	.word	0x431bde83
 8004478:	10624dd3 	.word	0x10624dd3

0800447c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b088      	sub	sp, #32
 8004480:	af02      	add	r7, sp, #8
 8004482:	60f8      	str	r0, [r7, #12]
 8004484:	607a      	str	r2, [r7, #4]
 8004486:	461a      	mov	r2, r3
 8004488:	460b      	mov	r3, r1
 800448a:	817b      	strh	r3, [r7, #10]
 800448c:	4613      	mov	r3, r2
 800448e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004490:	f7fe ff92 	bl	80033b8 <HAL_GetTick>
 8004494:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b20      	cmp	r3, #32
 80044a0:	f040 80e0 	bne.w	8004664 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	2319      	movs	r3, #25
 80044aa:	2201      	movs	r2, #1
 80044ac:	4970      	ldr	r1, [pc, #448]	; (8004670 <HAL_I2C_Master_Transmit+0x1f4>)
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f000 fc58 	bl	8004d64 <I2C_WaitOnFlagUntilTimeout>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80044ba:	2302      	movs	r3, #2
 80044bc:	e0d3      	b.n	8004666 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_I2C_Master_Transmit+0x50>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e0cc      	b.n	8004666 <HAL_I2C_Master_Transmit+0x1ea>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0301 	and.w	r3, r3, #1
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d007      	beq.n	80044f2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f042 0201 	orr.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681a      	ldr	r2, [r3, #0]
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004500:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2221      	movs	r2, #33	; 0x21
 8004506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2210      	movs	r2, #16
 800450e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	893a      	ldrh	r2, [r7, #8]
 8004522:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004528:	b29a      	uxth	r2, r3
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	4a50      	ldr	r2, [pc, #320]	; (8004674 <HAL_I2C_Master_Transmit+0x1f8>)
 8004532:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004534:	8979      	ldrh	r1, [r7, #10]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	6a3a      	ldr	r2, [r7, #32]
 800453a:	68f8      	ldr	r0, [r7, #12]
 800453c:	f000 fac2 	bl	8004ac4 <I2C_MasterRequestWrite>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004546:	2301      	movs	r3, #1
 8004548:	e08d      	b.n	8004666 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800454a:	2300      	movs	r3, #0
 800454c:	613b      	str	r3, [r7, #16]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	695b      	ldr	r3, [r3, #20]
 8004554:	613b      	str	r3, [r7, #16]
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004560:	e066      	b.n	8004630 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	6a39      	ldr	r1, [r7, #32]
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 fcd2 	bl	8004f10 <I2C_WaitOnTXEFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00d      	beq.n	800458e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	2b04      	cmp	r3, #4
 8004578:	d107      	bne.n	800458a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004588:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e06b      	b.n	8004666 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	781a      	ldrb	r2, [r3, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459e:	1c5a      	adds	r2, r3, #1
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	3b01      	subs	r3, #1
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b6:	3b01      	subs	r3, #1
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	f003 0304 	and.w	r3, r3, #4
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d11b      	bne.n	8004604 <HAL_I2C_Master_Transmit+0x188>
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d017      	beq.n	8004604 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	781a      	ldrb	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e4:	1c5a      	adds	r2, r3, #1
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004604:	697a      	ldr	r2, [r7, #20]
 8004606:	6a39      	ldr	r1, [r7, #32]
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f000 fcc2 	bl	8004f92 <I2C_WaitOnBTFFlagUntilTimeout>
 800460e:	4603      	mov	r3, r0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d00d      	beq.n	8004630 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	2b04      	cmp	r3, #4
 800461a:	d107      	bne.n	800462c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800462a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e01a      	b.n	8004666 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004634:	2b00      	cmp	r3, #0
 8004636:	d194      	bne.n	8004562 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004646:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2220      	movs	r2, #32
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2200      	movs	r2, #0
 8004654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004660:	2300      	movs	r3, #0
 8004662:	e000      	b.n	8004666 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004664:	2302      	movs	r3, #2
  }
}
 8004666:	4618      	mov	r0, r3
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}
 800466e:	bf00      	nop
 8004670:	00100002 	.word	0x00100002
 8004674:	ffff0000 	.word	0xffff0000

08004678 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b08c      	sub	sp, #48	; 0x30
 800467c:	af02      	add	r7, sp, #8
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	607a      	str	r2, [r7, #4]
 8004682:	461a      	mov	r2, r3
 8004684:	460b      	mov	r3, r1
 8004686:	817b      	strh	r3, [r7, #10]
 8004688:	4613      	mov	r3, r2
 800468a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800468c:	f7fe fe94 	bl	80033b8 <HAL_GetTick>
 8004690:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b20      	cmp	r3, #32
 800469c:	f040 820b 	bne.w	8004ab6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	2319      	movs	r3, #25
 80046a6:	2201      	movs	r2, #1
 80046a8:	497c      	ldr	r1, [pc, #496]	; (800489c <HAL_I2C_Master_Receive+0x224>)
 80046aa:	68f8      	ldr	r0, [r7, #12]
 80046ac:	f000 fb5a 	bl	8004d64 <I2C_WaitOnFlagUntilTimeout>
 80046b0:	4603      	mov	r3, r0
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80046b6:	2302      	movs	r3, #2
 80046b8:	e1fe      	b.n	8004ab8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d101      	bne.n	80046c8 <HAL_I2C_Master_Receive+0x50>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e1f7      	b.n	8004ab8 <HAL_I2C_Master_Receive+0x440>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0301 	and.w	r3, r3, #1
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d007      	beq.n	80046ee <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f042 0201 	orr.w	r2, r2, #1
 80046ec:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046fc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2222      	movs	r2, #34	; 0x22
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2210      	movs	r2, #16
 800470a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	893a      	ldrh	r2, [r7, #8]
 800471e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004724:	b29a      	uxth	r2, r3
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4a5c      	ldr	r2, [pc, #368]	; (80048a0 <HAL_I2C_Master_Receive+0x228>)
 800472e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004730:	8979      	ldrh	r1, [r7, #10]
 8004732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004734:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004736:	68f8      	ldr	r0, [r7, #12]
 8004738:	f000 fa46 	bl	8004bc8 <I2C_MasterRequestRead>
 800473c:	4603      	mov	r3, r0
 800473e:	2b00      	cmp	r3, #0
 8004740:	d001      	beq.n	8004746 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004742:	2301      	movs	r3, #1
 8004744:	e1b8      	b.n	8004ab8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800474a:	2b00      	cmp	r3, #0
 800474c:	d113      	bne.n	8004776 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800474e:	2300      	movs	r3, #0
 8004750:	623b      	str	r3, [r7, #32]
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	623b      	str	r3, [r7, #32]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	623b      	str	r3, [r7, #32]
 8004762:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004772:	601a      	str	r2, [r3, #0]
 8004774:	e18c      	b.n	8004a90 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800477a:	2b01      	cmp	r3, #1
 800477c:	d11b      	bne.n	80047b6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	681a      	ldr	r2, [r3, #0]
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800478c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800478e:	2300      	movs	r3, #0
 8004790:	61fb      	str	r3, [r7, #28]
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	695b      	ldr	r3, [r3, #20]
 8004798:	61fb      	str	r3, [r7, #28]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	699b      	ldr	r3, [r3, #24]
 80047a0:	61fb      	str	r3, [r7, #28]
 80047a2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	e16c      	b.n	8004a90 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d11b      	bne.n	80047f6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047cc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80047dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047de:	2300      	movs	r3, #0
 80047e0:	61bb      	str	r3, [r7, #24]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	695b      	ldr	r3, [r3, #20]
 80047e8:	61bb      	str	r3, [r7, #24]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	61bb      	str	r3, [r7, #24]
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	e14c      	b.n	8004a90 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004804:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004806:	2300      	movs	r3, #0
 8004808:	617b      	str	r3, [r7, #20]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800481c:	e138      	b.n	8004a90 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004822:	2b03      	cmp	r3, #3
 8004824:	f200 80f1 	bhi.w	8004a0a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482c:	2b01      	cmp	r3, #1
 800482e:	d123      	bne.n	8004878 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004832:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004834:	68f8      	ldr	r0, [r7, #12]
 8004836:	f000 fbed 	bl	8005014 <I2C_WaitOnRXNEFlagUntilTimeout>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d001      	beq.n	8004844 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e139      	b.n	8004ab8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691a      	ldr	r2, [r3, #16]
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	b2d2      	uxtb	r2, r2
 8004850:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	1c5a      	adds	r2, r3, #1
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004860:	3b01      	subs	r3, #1
 8004862:	b29a      	uxth	r2, r3
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486c:	b29b      	uxth	r3, r3
 800486e:	3b01      	subs	r3, #1
 8004870:	b29a      	uxth	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004876:	e10b      	b.n	8004a90 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487c:	2b02      	cmp	r3, #2
 800487e:	d14e      	bne.n	800491e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004882:	9300      	str	r3, [sp, #0]
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	2200      	movs	r2, #0
 8004888:	4906      	ldr	r1, [pc, #24]	; (80048a4 <HAL_I2C_Master_Receive+0x22c>)
 800488a:	68f8      	ldr	r0, [r7, #12]
 800488c:	f000 fa6a 	bl	8004d64 <I2C_WaitOnFlagUntilTimeout>
 8004890:	4603      	mov	r3, r0
 8004892:	2b00      	cmp	r3, #0
 8004894:	d008      	beq.n	80048a8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e10e      	b.n	8004ab8 <HAL_I2C_Master_Receive+0x440>
 800489a:	bf00      	nop
 800489c:	00100002 	.word	0x00100002
 80048a0:	ffff0000 	.word	0xffff0000
 80048a4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691a      	ldr	r2, [r3, #16]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c2:	b2d2      	uxtb	r2, r2
 80048c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ca:	1c5a      	adds	r2, r3, #1
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d4:	3b01      	subs	r3, #1
 80048d6:	b29a      	uxth	r2, r3
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048e0:	b29b      	uxth	r3, r3
 80048e2:	3b01      	subs	r3, #1
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	b2d2      	uxtb	r2, r2
 80048f6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fc:	1c5a      	adds	r2, r3, #1
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004906:	3b01      	subs	r3, #1
 8004908:	b29a      	uxth	r2, r3
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004912:	b29b      	uxth	r3, r3
 8004914:	3b01      	subs	r3, #1
 8004916:	b29a      	uxth	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800491c:	e0b8      	b.n	8004a90 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004924:	2200      	movs	r2, #0
 8004926:	4966      	ldr	r1, [pc, #408]	; (8004ac0 <HAL_I2C_Master_Receive+0x448>)
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 fa1b 	bl	8004d64 <I2C_WaitOnFlagUntilTimeout>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d001      	beq.n	8004938 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0bf      	b.n	8004ab8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004946:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	691a      	ldr	r2, [r3, #16]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	1c5a      	adds	r2, r3, #1
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004964:	3b01      	subs	r3, #1
 8004966:	b29a      	uxth	r2, r3
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004970:	b29b      	uxth	r3, r3
 8004972:	3b01      	subs	r3, #1
 8004974:	b29a      	uxth	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	2200      	movs	r2, #0
 8004982:	494f      	ldr	r1, [pc, #316]	; (8004ac0 <HAL_I2C_Master_Receive+0x448>)
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 f9ed 	bl	8004d64 <I2C_WaitOnFlagUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e091      	b.n	8004ab8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691a      	ldr	r2, [r3, #16]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691a      	ldr	r2, [r3, #16]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e0:	b2d2      	uxtb	r2, r2
 80049e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e8:	1c5a      	adds	r2, r3, #1
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049f2:	3b01      	subs	r3, #1
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049fe:	b29b      	uxth	r3, r3
 8004a00:	3b01      	subs	r3, #1
 8004a02:	b29a      	uxth	r2, r3
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a08:	e042      	b.n	8004a90 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 fb00 	bl	8005014 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d001      	beq.n	8004a1e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	e04c      	b.n	8004ab8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691a      	ldr	r2, [r3, #16]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a28:	b2d2      	uxtb	r2, r2
 8004a2a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	1c5a      	adds	r2, r3, #1
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a46:	b29b      	uxth	r3, r3
 8004a48:	3b01      	subs	r3, #1
 8004a4a:	b29a      	uxth	r2, r3
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f003 0304 	and.w	r3, r3, #4
 8004a5a:	2b04      	cmp	r3, #4
 8004a5c:	d118      	bne.n	8004a90 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	691a      	ldr	r2, [r3, #16]
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a68:	b2d2      	uxtb	r2, r2
 8004a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a70:	1c5a      	adds	r2, r3, #1
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	b29a      	uxth	r2, r3
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a86:	b29b      	uxth	r3, r3
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f47f aec2 	bne.w	800481e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	e000      	b.n	8004ab8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004ab6:	2302      	movs	r3, #2
  }
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	3728      	adds	r7, #40	; 0x28
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	00010004 	.word	0x00010004

08004ac4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af02      	add	r7, sp, #8
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	607a      	str	r2, [r7, #4]
 8004ace:	603b      	str	r3, [r7, #0]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ad8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	2b08      	cmp	r3, #8
 8004ade:	d006      	beq.n	8004aee <I2C_MasterRequestWrite+0x2a>
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d003      	beq.n	8004aee <I2C_MasterRequestWrite+0x2a>
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004aec:	d108      	bne.n	8004b00 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	e00b      	b.n	8004b18 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b04:	2b12      	cmp	r3, #18
 8004b06:	d107      	bne.n	8004b18 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b16:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b24:	68f8      	ldr	r0, [r7, #12]
 8004b26:	f000 f91d 	bl	8004d64 <I2C_WaitOnFlagUntilTimeout>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d00d      	beq.n	8004b4c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b3e:	d103      	bne.n	8004b48 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	e035      	b.n	8004bb8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	691b      	ldr	r3, [r3, #16]
 8004b50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b54:	d108      	bne.n	8004b68 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b56:	897b      	ldrh	r3, [r7, #10]
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004b64:	611a      	str	r2, [r3, #16]
 8004b66:	e01b      	b.n	8004ba0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004b68:	897b      	ldrh	r3, [r7, #10]
 8004b6a:	11db      	asrs	r3, r3, #7
 8004b6c:	b2db      	uxtb	r3, r3
 8004b6e:	f003 0306 	and.w	r3, r3, #6
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	f063 030f 	orn	r3, r3, #15
 8004b78:	b2da      	uxtb	r2, r3
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	490e      	ldr	r1, [pc, #56]	; (8004bc0 <I2C_MasterRequestWrite+0xfc>)
 8004b86:	68f8      	ldr	r0, [r7, #12]
 8004b88:	f000 f943 	bl	8004e12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b8c:	4603      	mov	r3, r0
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d001      	beq.n	8004b96 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e010      	b.n	8004bb8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004b96:	897b      	ldrh	r3, [r7, #10]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	4907      	ldr	r1, [pc, #28]	; (8004bc4 <I2C_MasterRequestWrite+0x100>)
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f933 	bl	8004e12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e000      	b.n	8004bb8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004bb6:	2300      	movs	r3, #0
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}
 8004bc0:	00010008 	.word	0x00010008
 8004bc4:	00010002 	.word	0x00010002

08004bc8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b088      	sub	sp, #32
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	607a      	str	r2, [r7, #4]
 8004bd2:	603b      	str	r3, [r7, #0]
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bdc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d006      	beq.n	8004c02 <I2C_MasterRequestRead+0x3a>
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	d003      	beq.n	8004c02 <I2C_MasterRequestRead+0x3a>
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c00:	d108      	bne.n	8004c14 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c10:	601a      	str	r2, [r3, #0]
 8004c12:	e00b      	b.n	8004c2c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c18:	2b11      	cmp	r3, #17
 8004c1a:	d107      	bne.n	8004c2c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	9300      	str	r3, [sp, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f893 	bl	8004d64 <I2C_WaitOnFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00d      	beq.n	8004c60 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c52:	d103      	bne.n	8004c5c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	e079      	b.n	8004d54 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c68:	d108      	bne.n	8004c7c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004c6a:	897b      	ldrh	r3, [r7, #10]
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	f043 0301 	orr.w	r3, r3, #1
 8004c72:	b2da      	uxtb	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	611a      	str	r2, [r3, #16]
 8004c7a:	e05f      	b.n	8004d3c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c7c:	897b      	ldrh	r3, [r7, #10]
 8004c7e:	11db      	asrs	r3, r3, #7
 8004c80:	b2db      	uxtb	r3, r3
 8004c82:	f003 0306 	and.w	r3, r3, #6
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	f063 030f 	orn	r3, r3, #15
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	4930      	ldr	r1, [pc, #192]	; (8004d5c <I2C_MasterRequestRead+0x194>)
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 f8b9 	bl	8004e12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d001      	beq.n	8004caa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e054      	b.n	8004d54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004caa:	897b      	ldrh	r3, [r7, #10]
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	4929      	ldr	r1, [pc, #164]	; (8004d60 <I2C_MasterRequestRead+0x198>)
 8004cba:	68f8      	ldr	r0, [r7, #12]
 8004cbc:	f000 f8a9 	bl	8004e12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d001      	beq.n	8004cca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e044      	b.n	8004d54 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cca:	2300      	movs	r3, #0
 8004ccc:	613b      	str	r3, [r7, #16]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	695b      	ldr	r3, [r3, #20]
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	699b      	ldr	r3, [r3, #24]
 8004cdc:	613b      	str	r3, [r7, #16]
 8004cde:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004cee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	9300      	str	r3, [sp, #0]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004cfc:	68f8      	ldr	r0, [r7, #12]
 8004cfe:	f000 f831 	bl	8004d64 <I2C_WaitOnFlagUntilTimeout>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00d      	beq.n	8004d24 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d12:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d16:	d103      	bne.n	8004d20 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d1e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004d20:	2303      	movs	r3, #3
 8004d22:	e017      	b.n	8004d54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004d24:	897b      	ldrh	r3, [r7, #10]
 8004d26:	11db      	asrs	r3, r3, #7
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	f003 0306 	and.w	r3, r3, #6
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	f063 030e 	orn	r3, r3, #14
 8004d34:	b2da      	uxtb	r2, r3
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	687a      	ldr	r2, [r7, #4]
 8004d40:	4907      	ldr	r1, [pc, #28]	; (8004d60 <I2C_MasterRequestRead+0x198>)
 8004d42:	68f8      	ldr	r0, [r7, #12]
 8004d44:	f000 f865 	bl	8004e12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d001      	beq.n	8004d52 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	e000      	b.n	8004d54 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004d52:	2300      	movs	r3, #0
}
 8004d54:	4618      	mov	r0, r3
 8004d56:	3718      	adds	r7, #24
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	bd80      	pop	{r7, pc}
 8004d5c:	00010008 	.word	0x00010008
 8004d60:	00010002 	.word	0x00010002

08004d64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	603b      	str	r3, [r7, #0]
 8004d70:	4613      	mov	r3, r2
 8004d72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d74:	e025      	b.n	8004dc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d7c:	d021      	beq.n	8004dc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7e:	f7fe fb1b 	bl	80033b8 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	683a      	ldr	r2, [r7, #0]
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d302      	bcc.n	8004d94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d116      	bne.n	8004dc2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2200      	movs	r2, #0
 8004d98:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2220      	movs	r2, #32
 8004d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	f043 0220 	orr.w	r2, r3, #32
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e023      	b.n	8004e0a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	0c1b      	lsrs	r3, r3, #16
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d10d      	bne.n	8004de8 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	695b      	ldr	r3, [r3, #20]
 8004dd2:	43da      	mvns	r2, r3
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	4013      	ands	r3, r2
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	bf0c      	ite	eq
 8004dde:	2301      	moveq	r3, #1
 8004de0:	2300      	movne	r3, #0
 8004de2:	b2db      	uxtb	r3, r3
 8004de4:	461a      	mov	r2, r3
 8004de6:	e00c      	b.n	8004e02 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	43da      	mvns	r2, r3
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	4013      	ands	r3, r2
 8004df4:	b29b      	uxth	r3, r3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	bf0c      	ite	eq
 8004dfa:	2301      	moveq	r3, #1
 8004dfc:	2300      	movne	r3, #0
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	461a      	mov	r2, r3
 8004e02:	79fb      	ldrb	r3, [r7, #7]
 8004e04:	429a      	cmp	r2, r3
 8004e06:	d0b6      	beq.n	8004d76 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e08:	2300      	movs	r3, #0
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3710      	adds	r7, #16
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b084      	sub	sp, #16
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	60f8      	str	r0, [r7, #12]
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	607a      	str	r2, [r7, #4]
 8004e1e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e20:	e051      	b.n	8004ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e30:	d123      	bne.n	8004e7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e40:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004e4a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	2220      	movs	r2, #32
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f043 0204 	orr.w	r2, r3, #4
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2200      	movs	r2, #0
 8004e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e046      	b.n	8004f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e80:	d021      	beq.n	8004ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e82:	f7fe fa99 	bl	80033b8 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d302      	bcc.n	8004e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d116      	bne.n	8004ec6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2220      	movs	r2, #32
 8004ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	f043 0220 	orr.w	r2, r3, #32
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ec2:	2301      	movs	r3, #1
 8004ec4:	e020      	b.n	8004f08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	0c1b      	lsrs	r3, r3, #16
 8004eca:	b2db      	uxtb	r3, r3
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d10c      	bne.n	8004eea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	43da      	mvns	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	4013      	ands	r3, r2
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	bf14      	ite	ne
 8004ee2:	2301      	movne	r3, #1
 8004ee4:	2300      	moveq	r3, #0
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	e00b      	b.n	8004f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	43da      	mvns	r2, r3
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	bf14      	ite	ne
 8004efc:	2301      	movne	r3, #1
 8004efe:	2300      	moveq	r3, #0
 8004f00:	b2db      	uxtb	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d18d      	bne.n	8004e22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b084      	sub	sp, #16
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	60f8      	str	r0, [r7, #12]
 8004f18:	60b9      	str	r1, [r7, #8]
 8004f1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f1c:	e02d      	b.n	8004f7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f1e:	68f8      	ldr	r0, [r7, #12]
 8004f20:	f000 f8ce 	bl	80050c0 <I2C_IsAcknowledgeFailed>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d001      	beq.n	8004f2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e02d      	b.n	8004f8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f34:	d021      	beq.n	8004f7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f36:	f7fe fa3f 	bl	80033b8 <HAL_GetTick>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	1ad3      	subs	r3, r2, r3
 8004f40:	68ba      	ldr	r2, [r7, #8]
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d302      	bcc.n	8004f4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d116      	bne.n	8004f7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	f043 0220 	orr.w	r2, r3, #32
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e007      	b.n	8004f8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f84:	2b80      	cmp	r3, #128	; 0x80
 8004f86:	d1ca      	bne.n	8004f1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004f88:	2300      	movs	r3, #0
}
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	3710      	adds	r7, #16
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	bd80      	pop	{r7, pc}

08004f92 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f92:	b580      	push	{r7, lr}
 8004f94:	b084      	sub	sp, #16
 8004f96:	af00      	add	r7, sp, #0
 8004f98:	60f8      	str	r0, [r7, #12]
 8004f9a:	60b9      	str	r1, [r7, #8]
 8004f9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004f9e:	e02d      	b.n	8004ffc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f88d 	bl	80050c0 <I2C_IsAcknowledgeFailed>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d001      	beq.n	8004fb0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e02d      	b.n	800500c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fb6:	d021      	beq.n	8004ffc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fb8:	f7fe f9fe 	bl	80033b8 <HAL_GetTick>
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	68ba      	ldr	r2, [r7, #8]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d302      	bcc.n	8004fce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d116      	bne.n	8004ffc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2220      	movs	r2, #32
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe8:	f043 0220 	orr.w	r2, r3, #32
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004ff8:	2301      	movs	r3, #1
 8004ffa:	e007      	b.n	800500c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	695b      	ldr	r3, [r3, #20]
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b04      	cmp	r3, #4
 8005008:	d1ca      	bne.n	8004fa0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005020:	e042      	b.n	80050a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	695b      	ldr	r3, [r3, #20]
 8005028:	f003 0310 	and.w	r3, r3, #16
 800502c:	2b10      	cmp	r3, #16
 800502e:	d119      	bne.n	8005064 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0210 	mvn.w	r2, #16
 8005038:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	2200      	movs	r2, #0
 800503e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2220      	movs	r2, #32
 8005044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2200      	movs	r2, #0
 800504c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2200      	movs	r2, #0
 800505c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005060:	2301      	movs	r3, #1
 8005062:	e029      	b.n	80050b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005064:	f7fe f9a8 	bl	80033b8 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	429a      	cmp	r2, r3
 8005072:	d302      	bcc.n	800507a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d116      	bne.n	80050a8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2220      	movs	r2, #32
 8005084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005094:	f043 0220 	orr.w	r2, r3, #32
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050a4:	2301      	movs	r3, #1
 80050a6:	e007      	b.n	80050b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050b2:	2b40      	cmp	r3, #64	; 0x40
 80050b4:	d1b5      	bne.n	8005022 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3710      	adds	r7, #16
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050c0:	b480      	push	{r7}
 80050c2:	b083      	sub	sp, #12
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050d6:	d11b      	bne.n	8005110 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2220      	movs	r2, #32
 80050ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	f043 0204 	orr.w	r2, r3, #4
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2200      	movs	r2, #0
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e000      	b.n	8005112 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	370c      	adds	r7, #12
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800511e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005120:	b08f      	sub	sp, #60	; 0x3c
 8005122:	af0a      	add	r7, sp, #40	; 0x28
 8005124:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d101      	bne.n	8005130 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e10f      	b.n	8005350 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800513c:	b2db      	uxtb	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f00b ff24 	bl	8010f98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2203      	movs	r2, #3
 8005154:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800515c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005160:	2b00      	cmp	r3, #0
 8005162:	d102      	bne.n	800516a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f005 fd0b 	bl	800ab8a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	603b      	str	r3, [r7, #0]
 800517a:	687e      	ldr	r6, [r7, #4]
 800517c:	466d      	mov	r5, sp
 800517e:	f106 0410 	add.w	r4, r6, #16
 8005182:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005184:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005186:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005188:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800518a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800518e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005192:	1d33      	adds	r3, r6, #4
 8005194:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005196:	6838      	ldr	r0, [r7, #0]
 8005198:	f005 fbe2 	bl	800a960 <USB_CoreInit>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d005      	beq.n	80051ae <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80051aa:	2301      	movs	r3, #1
 80051ac:	e0d0      	b.n	8005350 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2100      	movs	r1, #0
 80051b4:	4618      	mov	r0, r3
 80051b6:	f005 fcf9 	bl	800abac <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ba:	2300      	movs	r3, #0
 80051bc:	73fb      	strb	r3, [r7, #15]
 80051be:	e04a      	b.n	8005256 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051c0:	7bfa      	ldrb	r2, [r7, #15]
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	4613      	mov	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	4413      	add	r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	333d      	adds	r3, #61	; 0x3d
 80051d0:	2201      	movs	r2, #1
 80051d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80051d4:	7bfa      	ldrb	r2, [r7, #15]
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	4613      	mov	r3, r2
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	333c      	adds	r3, #60	; 0x3c
 80051e4:	7bfa      	ldrb	r2, [r7, #15]
 80051e6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80051e8:	7bfa      	ldrb	r2, [r7, #15]
 80051ea:	7bfb      	ldrb	r3, [r7, #15]
 80051ec:	b298      	uxth	r0, r3
 80051ee:	6879      	ldr	r1, [r7, #4]
 80051f0:	4613      	mov	r3, r2
 80051f2:	00db      	lsls	r3, r3, #3
 80051f4:	4413      	add	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	440b      	add	r3, r1
 80051fa:	3344      	adds	r3, #68	; 0x44
 80051fc:	4602      	mov	r2, r0
 80051fe:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005200:	7bfa      	ldrb	r2, [r7, #15]
 8005202:	6879      	ldr	r1, [r7, #4]
 8005204:	4613      	mov	r3, r2
 8005206:	00db      	lsls	r3, r3, #3
 8005208:	4413      	add	r3, r2
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	440b      	add	r3, r1
 800520e:	3340      	adds	r3, #64	; 0x40
 8005210:	2200      	movs	r2, #0
 8005212:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005214:	7bfa      	ldrb	r2, [r7, #15]
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	4613      	mov	r3, r2
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	440b      	add	r3, r1
 8005222:	3348      	adds	r3, #72	; 0x48
 8005224:	2200      	movs	r2, #0
 8005226:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005228:	7bfa      	ldrb	r2, [r7, #15]
 800522a:	6879      	ldr	r1, [r7, #4]
 800522c:	4613      	mov	r3, r2
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	4413      	add	r3, r2
 8005232:	009b      	lsls	r3, r3, #2
 8005234:	440b      	add	r3, r1
 8005236:	334c      	adds	r3, #76	; 0x4c
 8005238:	2200      	movs	r2, #0
 800523a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800523c:	7bfa      	ldrb	r2, [r7, #15]
 800523e:	6879      	ldr	r1, [r7, #4]
 8005240:	4613      	mov	r3, r2
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	4413      	add	r3, r2
 8005246:	009b      	lsls	r3, r3, #2
 8005248:	440b      	add	r3, r1
 800524a:	3354      	adds	r3, #84	; 0x54
 800524c:	2200      	movs	r2, #0
 800524e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005250:	7bfb      	ldrb	r3, [r7, #15]
 8005252:	3301      	adds	r3, #1
 8005254:	73fb      	strb	r3, [r7, #15]
 8005256:	7bfa      	ldrb	r2, [r7, #15]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	429a      	cmp	r2, r3
 800525e:	d3af      	bcc.n	80051c0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005260:	2300      	movs	r3, #0
 8005262:	73fb      	strb	r3, [r7, #15]
 8005264:	e044      	b.n	80052f0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005266:	7bfa      	ldrb	r2, [r7, #15]
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	4613      	mov	r3, r2
 800526c:	00db      	lsls	r3, r3, #3
 800526e:	4413      	add	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	440b      	add	r3, r1
 8005274:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005278:	2200      	movs	r2, #0
 800527a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800527c:	7bfa      	ldrb	r2, [r7, #15]
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	00db      	lsls	r3, r3, #3
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800528e:	7bfa      	ldrb	r2, [r7, #15]
 8005290:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005292:	7bfa      	ldrb	r2, [r7, #15]
 8005294:	6879      	ldr	r1, [r7, #4]
 8005296:	4613      	mov	r3, r2
 8005298:	00db      	lsls	r3, r3, #3
 800529a:	4413      	add	r3, r2
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	440b      	add	r3, r1
 80052a0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80052a8:	7bfa      	ldrb	r2, [r7, #15]
 80052aa:	6879      	ldr	r1, [r7, #4]
 80052ac:	4613      	mov	r3, r2
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	4413      	add	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	440b      	add	r3, r1
 80052b6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80052ba:	2200      	movs	r2, #0
 80052bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052be:	7bfa      	ldrb	r2, [r7, #15]
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	4613      	mov	r3, r2
 80052c4:	00db      	lsls	r3, r3, #3
 80052c6:	4413      	add	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	440b      	add	r3, r1
 80052cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80052d0:	2200      	movs	r2, #0
 80052d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80052d4:	7bfa      	ldrb	r2, [r7, #15]
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	4613      	mov	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80052e6:	2200      	movs	r2, #0
 80052e8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
 80052ec:	3301      	adds	r3, #1
 80052ee:	73fb      	strb	r3, [r7, #15]
 80052f0:	7bfa      	ldrb	r2, [r7, #15]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d3b5      	bcc.n	8005266 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	603b      	str	r3, [r7, #0]
 8005300:	687e      	ldr	r6, [r7, #4]
 8005302:	466d      	mov	r5, sp
 8005304:	f106 0410 	add.w	r4, r6, #16
 8005308:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800530a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800530c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800530e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005310:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005314:	e885 0003 	stmia.w	r5, {r0, r1}
 8005318:	1d33      	adds	r3, r6, #4
 800531a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800531c:	6838      	ldr	r0, [r7, #0]
 800531e:	f005 fc91 	bl	800ac44 <USB_DevInit>
 8005322:	4603      	mov	r3, r0
 8005324:	2b00      	cmp	r3, #0
 8005326:	d005      	beq.n	8005334 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2202      	movs	r2, #2
 800532c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005330:	2301      	movs	r3, #1
 8005332:	e00d      	b.n	8005350 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4618      	mov	r0, r3
 800534a:	f006 fde0 	bl	800bf0e <USB_DevDisconnect>

  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3714      	adds	r7, #20
 8005354:	46bd      	mov	sp, r7
 8005356:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005358 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_PCD_Start+0x1c>
 8005370:	2302      	movs	r3, #2
 8005372:	e020      	b.n	80053b6 <HAL_PCD_Start+0x5e>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005380:	2b01      	cmp	r3, #1
 8005382:	d109      	bne.n	8005398 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005388:	2b01      	cmp	r3, #1
 800538a:	d005      	beq.n	8005398 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005390:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4618      	mov	r0, r3
 800539e:	f005 fbe3 	bl	800ab68 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f006 fd90 	bl	800becc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2200      	movs	r2, #0
 80053b0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3710      	adds	r7, #16
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}

080053be <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80053be:	b590      	push	{r4, r7, lr}
 80053c0:	b08d      	sub	sp, #52	; 0x34
 80053c2:	af00      	add	r7, sp, #0
 80053c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053cc:	6a3b      	ldr	r3, [r7, #32]
 80053ce:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4618      	mov	r0, r3
 80053d6:	f006 fe4e 	bl	800c076 <USB_GetMode>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	f040 848a 	bne.w	8005cf6 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f006 fdb2 	bl	800bf50 <USB_ReadInterrupts>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 8480 	beq.w	8005cf4 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80053f4:	69fb      	ldr	r3, [r7, #28]
 80053f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	0a1b      	lsrs	r3, r3, #8
 80053fe:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4618      	mov	r0, r3
 800540e:	f006 fd9f 	bl	800bf50 <USB_ReadInterrupts>
 8005412:	4603      	mov	r3, r0
 8005414:	f003 0302 	and.w	r3, r3, #2
 8005418:	2b02      	cmp	r3, #2
 800541a:	d107      	bne.n	800542c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695a      	ldr	r2, [r3, #20]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f002 0202 	and.w	r2, r2, #2
 800542a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f006 fd8d 	bl	800bf50 <USB_ReadInterrupts>
 8005436:	4603      	mov	r3, r0
 8005438:	f003 0310 	and.w	r3, r3, #16
 800543c:	2b10      	cmp	r3, #16
 800543e:	d161      	bne.n	8005504 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	699a      	ldr	r2, [r3, #24]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f022 0210 	bic.w	r2, r2, #16
 800544e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005450:	6a3b      	ldr	r3, [r7, #32]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005456:	69bb      	ldr	r3, [r7, #24]
 8005458:	f003 020f 	and.w	r2, r3, #15
 800545c:	4613      	mov	r3, r2
 800545e:	00db      	lsls	r3, r3, #3
 8005460:	4413      	add	r3, r2
 8005462:	009b      	lsls	r3, r3, #2
 8005464:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005468:	687a      	ldr	r2, [r7, #4]
 800546a:	4413      	add	r3, r2
 800546c:	3304      	adds	r3, #4
 800546e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	0c5b      	lsrs	r3, r3, #17
 8005474:	f003 030f 	and.w	r3, r3, #15
 8005478:	2b02      	cmp	r3, #2
 800547a:	d124      	bne.n	80054c6 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005482:	4013      	ands	r3, r2
 8005484:	2b00      	cmp	r3, #0
 8005486:	d035      	beq.n	80054f4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	091b      	lsrs	r3, r3, #4
 8005490:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005492:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005496:	b29b      	uxth	r3, r3
 8005498:	461a      	mov	r2, r3
 800549a:	6a38      	ldr	r0, [r7, #32]
 800549c:	f006 fbc4 	bl	800bc28 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	69bb      	ldr	r3, [r7, #24]
 80054a6:	091b      	lsrs	r3, r3, #4
 80054a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054ac:	441a      	add	r2, r3
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	6a1a      	ldr	r2, [r3, #32]
 80054b6:	69bb      	ldr	r3, [r7, #24]
 80054b8:	091b      	lsrs	r3, r3, #4
 80054ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054be:	441a      	add	r2, r3
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	621a      	str	r2, [r3, #32]
 80054c4:	e016      	b.n	80054f4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	0c5b      	lsrs	r3, r3, #17
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	2b06      	cmp	r3, #6
 80054d0:	d110      	bne.n	80054f4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80054d8:	2208      	movs	r2, #8
 80054da:	4619      	mov	r1, r3
 80054dc:	6a38      	ldr	r0, [r7, #32]
 80054de:	f006 fba3 	bl	800bc28 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	6a1a      	ldr	r2, [r3, #32]
 80054e6:	69bb      	ldr	r3, [r7, #24]
 80054e8:	091b      	lsrs	r3, r3, #4
 80054ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054ee:	441a      	add	r2, r3
 80054f0:	697b      	ldr	r3, [r7, #20]
 80054f2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	699a      	ldr	r2, [r3, #24]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f042 0210 	orr.w	r2, r2, #16
 8005502:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4618      	mov	r0, r3
 800550a:	f006 fd21 	bl	800bf50 <USB_ReadInterrupts>
 800550e:	4603      	mov	r3, r0
 8005510:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005514:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005518:	f040 80a7 	bne.w	800566a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800551c:	2300      	movs	r3, #0
 800551e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4618      	mov	r0, r3
 8005526:	f006 fd26 	bl	800bf76 <USB_ReadDevAllOutEpInterrupt>
 800552a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800552c:	e099      	b.n	8005662 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800552e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005530:	f003 0301 	and.w	r3, r3, #1
 8005534:	2b00      	cmp	r3, #0
 8005536:	f000 808e 	beq.w	8005656 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005540:	b2d2      	uxtb	r2, r2
 8005542:	4611      	mov	r1, r2
 8005544:	4618      	mov	r0, r3
 8005546:	f006 fd4a 	bl	800bfde <USB_ReadDevOutEPInterrupt>
 800554a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f003 0301 	and.w	r3, r3, #1
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00c      	beq.n	8005570 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	4413      	add	r3, r2
 800555e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005562:	461a      	mov	r2, r3
 8005564:	2301      	movs	r3, #1
 8005566:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005568:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800556a:	6878      	ldr	r0, [r7, #4]
 800556c:	f000 fec2 	bl	80062f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f003 0308 	and.w	r3, r3, #8
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00c      	beq.n	8005594 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800557a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800557c:	015a      	lsls	r2, r3, #5
 800557e:	69fb      	ldr	r3, [r7, #28]
 8005580:	4413      	add	r3, r2
 8005582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005586:	461a      	mov	r2, r3
 8005588:	2308      	movs	r3, #8
 800558a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800558c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 ff98 	bl	80064c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f003 0310 	and.w	r3, r3, #16
 800559a:	2b00      	cmp	r3, #0
 800559c:	d008      	beq.n	80055b0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a0:	015a      	lsls	r2, r3, #5
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	4413      	add	r3, r2
 80055a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055aa:	461a      	mov	r2, r3
 80055ac:	2310      	movs	r3, #16
 80055ae:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80055b0:	693b      	ldr	r3, [r7, #16]
 80055b2:	f003 0302 	and.w	r3, r3, #2
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d030      	beq.n	800561c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055c2:	2b80      	cmp	r3, #128	; 0x80
 80055c4:	d109      	bne.n	80055da <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80055c6:	69fb      	ldr	r3, [r7, #28]
 80055c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	69fa      	ldr	r2, [r7, #28]
 80055d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055d8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80055da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055dc:	4613      	mov	r3, r2
 80055de:	00db      	lsls	r3, r3, #3
 80055e0:	4413      	add	r3, r2
 80055e2:	009b      	lsls	r3, r3, #2
 80055e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	4413      	add	r3, r2
 80055ec:	3304      	adds	r3, #4
 80055ee:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	78db      	ldrb	r3, [r3, #3]
 80055f4:	2b01      	cmp	r3, #1
 80055f6:	d108      	bne.n	800560a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	2200      	movs	r2, #0
 80055fc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80055fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005600:	b2db      	uxtb	r3, r3
 8005602:	4619      	mov	r1, r3
 8005604:	6878      	ldr	r0, [r7, #4]
 8005606:	f00b fdcd 	bl	80111a4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800560c:	015a      	lsls	r2, r3, #5
 800560e:	69fb      	ldr	r3, [r7, #28]
 8005610:	4413      	add	r3, r2
 8005612:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005616:	461a      	mov	r2, r3
 8005618:	2302      	movs	r3, #2
 800561a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d008      	beq.n	8005638 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005632:	461a      	mov	r2, r3
 8005634:	2320      	movs	r3, #32
 8005636:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d009      	beq.n	8005656 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005644:	015a      	lsls	r2, r3, #5
 8005646:	69fb      	ldr	r3, [r7, #28]
 8005648:	4413      	add	r3, r2
 800564a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800564e:	461a      	mov	r2, r3
 8005650:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005654:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	3301      	adds	r3, #1
 800565a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800565c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565e:	085b      	lsrs	r3, r3, #1
 8005660:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005664:	2b00      	cmp	r3, #0
 8005666:	f47f af62 	bne.w	800552e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4618      	mov	r0, r3
 8005670:	f006 fc6e 	bl	800bf50 <USB_ReadInterrupts>
 8005674:	4603      	mov	r3, r0
 8005676:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800567a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800567e:	f040 80db 	bne.w	8005838 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f006 fc8f 	bl	800bfaa <USB_ReadDevAllInEpInterrupt>
 800568c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800568e:	2300      	movs	r3, #0
 8005690:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005692:	e0cd      	b.n	8005830 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b00      	cmp	r3, #0
 800569c:	f000 80c2 	beq.w	8005824 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a6:	b2d2      	uxtb	r2, r2
 80056a8:	4611      	mov	r1, r2
 80056aa:	4618      	mov	r0, r3
 80056ac:	f006 fcb5 	bl	800c01a <USB_ReadDevInEPInterrupt>
 80056b0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d057      	beq.n	800576c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80056bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056be:	f003 030f 	and.w	r3, r3, #15
 80056c2:	2201      	movs	r2, #1
 80056c4:	fa02 f303 	lsl.w	r3, r2, r3
 80056c8:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80056ca:	69fb      	ldr	r3, [r7, #28]
 80056cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	43db      	mvns	r3, r3
 80056d6:	69f9      	ldr	r1, [r7, #28]
 80056d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80056dc:	4013      	ands	r3, r2
 80056de:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ec:	461a      	mov	r2, r3
 80056ee:	2301      	movs	r3, #1
 80056f0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d132      	bne.n	8005760 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80056fa:	6879      	ldr	r1, [r7, #4]
 80056fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fe:	4613      	mov	r3, r2
 8005700:	00db      	lsls	r3, r3, #3
 8005702:	4413      	add	r3, r2
 8005704:	009b      	lsls	r3, r3, #2
 8005706:	440b      	add	r3, r1
 8005708:	334c      	adds	r3, #76	; 0x4c
 800570a:	6819      	ldr	r1, [r3, #0]
 800570c:	6878      	ldr	r0, [r7, #4]
 800570e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005710:	4613      	mov	r3, r2
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	4413      	add	r3, r2
 8005716:	009b      	lsls	r3, r3, #2
 8005718:	4403      	add	r3, r0
 800571a:	3348      	adds	r3, #72	; 0x48
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4419      	add	r1, r3
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005724:	4613      	mov	r3, r2
 8005726:	00db      	lsls	r3, r3, #3
 8005728:	4413      	add	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4403      	add	r3, r0
 800572e:	334c      	adds	r3, #76	; 0x4c
 8005730:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005734:	2b00      	cmp	r3, #0
 8005736:	d113      	bne.n	8005760 <HAL_PCD_IRQHandler+0x3a2>
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800573c:	4613      	mov	r3, r2
 800573e:	00db      	lsls	r3, r3, #3
 8005740:	4413      	add	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	440b      	add	r3, r1
 8005746:	3354      	adds	r3, #84	; 0x54
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d108      	bne.n	8005760 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005758:	461a      	mov	r2, r3
 800575a:	2101      	movs	r1, #1
 800575c:	f006 fcbc 	bl	800c0d8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	b2db      	uxtb	r3, r3
 8005764:	4619      	mov	r1, r3
 8005766:	6878      	ldr	r0, [r7, #4]
 8005768:	f00b fc97 	bl	801109a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	f003 0308 	and.w	r3, r3, #8
 8005772:	2b00      	cmp	r3, #0
 8005774:	d008      	beq.n	8005788 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	015a      	lsls	r2, r3, #5
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	4413      	add	r3, r2
 800577e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005782:	461a      	mov	r2, r3
 8005784:	2308      	movs	r3, #8
 8005786:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	f003 0310 	and.w	r3, r3, #16
 800578e:	2b00      	cmp	r3, #0
 8005790:	d008      	beq.n	80057a4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005794:	015a      	lsls	r2, r3, #5
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	4413      	add	r3, r2
 800579a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800579e:	461a      	mov	r2, r3
 80057a0:	2310      	movs	r3, #16
 80057a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d008      	beq.n	80057c0 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80057ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b0:	015a      	lsls	r2, r3, #5
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	4413      	add	r3, r2
 80057b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ba:	461a      	mov	r2, r3
 80057bc:	2340      	movs	r3, #64	; 0x40
 80057be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d023      	beq.n	8005812 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80057ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80057cc:	6a38      	ldr	r0, [r7, #32]
 80057ce:	f005 fb9d 	bl	800af0c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80057d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d4:	4613      	mov	r3, r2
 80057d6:	00db      	lsls	r3, r3, #3
 80057d8:	4413      	add	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	3338      	adds	r3, #56	; 0x38
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	4413      	add	r3, r2
 80057e2:	3304      	adds	r3, #4
 80057e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80057e6:	697b      	ldr	r3, [r7, #20]
 80057e8:	78db      	ldrb	r3, [r3, #3]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d108      	bne.n	8005800 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2200      	movs	r2, #0
 80057f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80057f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f6:	b2db      	uxtb	r3, r3
 80057f8:	4619      	mov	r1, r3
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f00b fce4 	bl	80111c8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	4413      	add	r3, r2
 8005808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800580c:	461a      	mov	r2, r3
 800580e:	2302      	movs	r3, #2
 8005810:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005818:	2b00      	cmp	r3, #0
 800581a:	d003      	beq.n	8005824 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800581c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	f000 fcdb 	bl	80061da <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	3301      	adds	r3, #1
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800582a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582c:	085b      	lsrs	r3, r3, #1
 800582e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005832:	2b00      	cmp	r3, #0
 8005834:	f47f af2e 	bne.w	8005694 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4618      	mov	r0, r3
 800583e:	f006 fb87 	bl	800bf50 <USB_ReadInterrupts>
 8005842:	4603      	mov	r3, r0
 8005844:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005848:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800584c:	d122      	bne.n	8005894 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800585c:	f023 0301 	bic.w	r3, r3, #1
 8005860:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005868:	2b01      	cmp	r3, #1
 800586a:	d108      	bne.n	800587e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005874:	2100      	movs	r1, #0
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fec2 	bl	8006600 <HAL_PCDEx_LPM_Callback>
 800587c:	e002      	b.n	8005884 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f00b fc82 	bl	8011188 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695a      	ldr	r2, [r3, #20]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005892:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4618      	mov	r0, r3
 800589a:	f006 fb59 	bl	800bf50 <USB_ReadInterrupts>
 800589e:	4603      	mov	r3, r0
 80058a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058a8:	d112      	bne.n	80058d0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d102      	bne.n	80058c0 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f00b fc3e 	bl	801113c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	695a      	ldr	r2, [r3, #20]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80058ce:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4618      	mov	r0, r3
 80058d6:	f006 fb3b 	bl	800bf50 <USB_ReadInterrupts>
 80058da:	4603      	mov	r3, r0
 80058dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058e4:	f040 80b7 	bne.w	8005a56 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058ee:	685b      	ldr	r3, [r3, #4]
 80058f0:	69fa      	ldr	r2, [r7, #28]
 80058f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058f6:	f023 0301 	bic.w	r3, r3, #1
 80058fa:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	2110      	movs	r1, #16
 8005902:	4618      	mov	r0, r3
 8005904:	f005 fb02 	bl	800af0c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005908:	2300      	movs	r3, #0
 800590a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800590c:	e046      	b.n	800599c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800590e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591a:	461a      	mov	r2, r3
 800591c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005920:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005932:	0151      	lsls	r1, r2, #5
 8005934:	69fa      	ldr	r2, [r7, #28]
 8005936:	440a      	add	r2, r1
 8005938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800593c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005940:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	69fb      	ldr	r3, [r7, #28]
 8005948:	4413      	add	r3, r2
 800594a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800594e:	461a      	mov	r2, r3
 8005950:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005954:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	69fb      	ldr	r3, [r7, #28]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005966:	0151      	lsls	r1, r2, #5
 8005968:	69fa      	ldr	r2, [r7, #28]
 800596a:	440a      	add	r2, r1
 800596c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005970:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005974:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005978:	015a      	lsls	r2, r3, #5
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	4413      	add	r3, r2
 800597e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005986:	0151      	lsls	r1, r2, #5
 8005988:	69fa      	ldr	r2, [r7, #28]
 800598a:	440a      	add	r2, r1
 800598c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005990:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005994:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005998:	3301      	adds	r3, #1
 800599a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	685b      	ldr	r3, [r3, #4]
 80059a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d3b3      	bcc.n	800590e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	69fa      	ldr	r2, [r7, #28]
 80059b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059b4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80059b8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d016      	beq.n	80059f0 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059cc:	69fa      	ldr	r2, [r7, #28]
 80059ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059d2:	f043 030b 	orr.w	r3, r3, #11
 80059d6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e2:	69fa      	ldr	r2, [r7, #28]
 80059e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059e8:	f043 030b 	orr.w	r3, r3, #11
 80059ec:	6453      	str	r3, [r2, #68]	; 0x44
 80059ee:	e015      	b.n	8005a1c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	69fa      	ldr	r2, [r7, #28]
 80059fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a02:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005a06:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a0e:	691b      	ldr	r3, [r3, #16]
 8005a10:	69fa      	ldr	r2, [r7, #28]
 8005a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a16:	f043 030b 	orr.w	r3, r3, #11
 8005a1a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a2e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a40:	461a      	mov	r2, r3
 8005a42:	f006 fb49 	bl	800c0d8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	695a      	ldr	r2, [r3, #20]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005a54:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f006 fa78 	bl	800bf50 <USB_ReadInterrupts>
 8005a60:	4603      	mov	r3, r0
 8005a62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005a6a:	d124      	bne.n	8005ab6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f006 fb0e 	bl	800c092 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	f005 fac3 	bl	800b006 <USB_GetDevSpeed>
 8005a80:	4603      	mov	r3, r0
 8005a82:	461a      	mov	r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681c      	ldr	r4, [r3, #0]
 8005a8c:	f001 f9e8 	bl	8006e60 <HAL_RCC_GetHCLKFreq>
 8005a90:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	461a      	mov	r2, r3
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f004 ffc2 	bl	800aa24 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005aa0:	6878      	ldr	r0, [r7, #4]
 8005aa2:	f00b fb22 	bl	80110ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	695a      	ldr	r2, [r3, #20]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005ab4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4618      	mov	r0, r3
 8005abc:	f006 fa48 	bl	800bf50 <USB_ReadInterrupts>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	f003 0308 	and.w	r3, r3, #8
 8005ac6:	2b08      	cmp	r3, #8
 8005ac8:	d10a      	bne.n	8005ae0 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f00b faff 	bl	80110ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	695a      	ldr	r2, [r3, #20]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f002 0208 	and.w	r2, r2, #8
 8005ade:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f006 fa33 	bl	800bf50 <USB_ReadInterrupts>
 8005aea:	4603      	mov	r3, r0
 8005aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005af0:	2b80      	cmp	r3, #128	; 0x80
 8005af2:	d122      	bne.n	8005b3a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005af4:	6a3b      	ldr	r3, [r7, #32]
 8005af6:	699b      	ldr	r3, [r3, #24]
 8005af8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005afc:	6a3b      	ldr	r3, [r7, #32]
 8005afe:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b00:	2301      	movs	r3, #1
 8005b02:	627b      	str	r3, [r7, #36]	; 0x24
 8005b04:	e014      	b.n	8005b30 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005b06:	6879      	ldr	r1, [r7, #4]
 8005b08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b0a:	4613      	mov	r3, r2
 8005b0c:	00db      	lsls	r3, r3, #3
 8005b0e:	4413      	add	r3, r2
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	440b      	add	r3, r1
 8005b14:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d105      	bne.n	8005b2a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	4619      	mov	r1, r3
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fb27 	bl	8006178 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d3e5      	bcc.n	8005b06 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4618      	mov	r0, r3
 8005b40:	f006 fa06 	bl	800bf50 <USB_ReadInterrupts>
 8005b44:	4603      	mov	r3, r0
 8005b46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b4a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b4e:	d13b      	bne.n	8005bc8 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b50:	2301      	movs	r3, #1
 8005b52:	627b      	str	r3, [r7, #36]	; 0x24
 8005b54:	e02b      	b.n	8005bae <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	69fb      	ldr	r3, [r7, #28]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b66:	6879      	ldr	r1, [r7, #4]
 8005b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b6a:	4613      	mov	r3, r2
 8005b6c:	00db      	lsls	r3, r3, #3
 8005b6e:	4413      	add	r3, r2
 8005b70:	009b      	lsls	r3, r3, #2
 8005b72:	440b      	add	r3, r1
 8005b74:	3340      	adds	r3, #64	; 0x40
 8005b76:	781b      	ldrb	r3, [r3, #0]
 8005b78:	2b01      	cmp	r3, #1
 8005b7a:	d115      	bne.n	8005ba8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005b7c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	da12      	bge.n	8005ba8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b86:	4613      	mov	r3, r2
 8005b88:	00db      	lsls	r3, r3, #3
 8005b8a:	4413      	add	r3, r2
 8005b8c:	009b      	lsls	r3, r3, #2
 8005b8e:	440b      	add	r3, r1
 8005b90:	333f      	adds	r3, #63	; 0x3f
 8005b92:	2201      	movs	r2, #1
 8005b94:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	4619      	mov	r1, r3
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fae8 	bl	8006178 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	3301      	adds	r3, #1
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bb4:	429a      	cmp	r2, r3
 8005bb6:	d3ce      	bcc.n	8005b56 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	695a      	ldr	r2, [r3, #20]
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005bc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4618      	mov	r0, r3
 8005bce:	f006 f9bf 	bl	800bf50 <USB_ReadInterrupts>
 8005bd2:	4603      	mov	r3, r0
 8005bd4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005bdc:	d155      	bne.n	8005c8a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bde:	2301      	movs	r3, #1
 8005be0:	627b      	str	r3, [r7, #36]	; 0x24
 8005be2:	e045      	b.n	8005c70 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005bf4:	6879      	ldr	r1, [r7, #4]
 8005bf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	440b      	add	r3, r1
 8005c02:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d12e      	bne.n	8005c6a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005c0c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	da2b      	bge.n	8005c6a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005c12:	69bb      	ldr	r3, [r7, #24]
 8005c14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005c1e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d121      	bne.n	8005c6a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005c26:	6879      	ldr	r1, [r7, #4]
 8005c28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c2a:	4613      	mov	r3, r2
 8005c2c:	00db      	lsls	r3, r3, #3
 8005c2e:	4413      	add	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	440b      	add	r3, r1
 8005c34:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005c38:	2201      	movs	r2, #1
 8005c3a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005c3c:	6a3b      	ldr	r3, [r7, #32]
 8005c3e:	699b      	ldr	r3, [r3, #24]
 8005c40:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005c44:	6a3b      	ldr	r3, [r7, #32]
 8005c46:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005c48:	6a3b      	ldr	r3, [r7, #32]
 8005c4a:	695b      	ldr	r3, [r3, #20]
 8005c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10a      	bne.n	8005c6a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	69fa      	ldr	r2, [r7, #28]
 8005c5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005c66:	6053      	str	r3, [r2, #4]
            break;
 8005c68:	e007      	b.n	8005c7a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d3b4      	bcc.n	8005be4 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	695a      	ldr	r2, [r3, #20]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f006 f95e 	bl	800bf50 <USB_ReadInterrupts>
 8005c94:	4603      	mov	r3, r0
 8005c96:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c9e:	d10a      	bne.n	8005cb6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f00b faa3 	bl	80111ec <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	695a      	ldr	r2, [r3, #20]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f006 f948 	bl	800bf50 <USB_ReadInterrupts>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f003 0304 	and.w	r3, r3, #4
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d115      	bne.n	8005cf6 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	f003 0304 	and.w	r3, r3, #4
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d002      	beq.n	8005ce2 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f00b fa93 	bl	8011208 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	6859      	ldr	r1, [r3, #4]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	605a      	str	r2, [r3, #4]
 8005cf2:	e000      	b.n	8005cf6 <HAL_PCD_IRQHandler+0x938>
      return;
 8005cf4:	bf00      	nop
    }
  }
}
 8005cf6:	3734      	adds	r7, #52	; 0x34
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd90      	pop	{r4, r7, pc}

08005cfc <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b082      	sub	sp, #8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
 8005d04:	460b      	mov	r3, r1
 8005d06:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d101      	bne.n	8005d16 <HAL_PCD_SetAddress+0x1a>
 8005d12:	2302      	movs	r3, #2
 8005d14:	e013      	b.n	8005d3e <HAL_PCD_SetAddress+0x42>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2201      	movs	r2, #1
 8005d1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	78fa      	ldrb	r2, [r7, #3]
 8005d22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	78fa      	ldrb	r2, [r7, #3]
 8005d2c:	4611      	mov	r1, r2
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f006 f8a6 	bl	800be80 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d3c:	2300      	movs	r3, #0
}
 8005d3e:	4618      	mov	r0, r3
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}

08005d46 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b084      	sub	sp, #16
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	4608      	mov	r0, r1
 8005d50:	4611      	mov	r1, r2
 8005d52:	461a      	mov	r2, r3
 8005d54:	4603      	mov	r3, r0
 8005d56:	70fb      	strb	r3, [r7, #3]
 8005d58:	460b      	mov	r3, r1
 8005d5a:	803b      	strh	r3, [r7, #0]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005d60:	2300      	movs	r3, #0
 8005d62:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	da0f      	bge.n	8005d8c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d6c:	78fb      	ldrb	r3, [r7, #3]
 8005d6e:	f003 020f 	and.w	r2, r3, #15
 8005d72:	4613      	mov	r3, r2
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	4413      	add	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	3338      	adds	r3, #56	; 0x38
 8005d7c:	687a      	ldr	r2, [r7, #4]
 8005d7e:	4413      	add	r3, r2
 8005d80:	3304      	adds	r3, #4
 8005d82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2201      	movs	r2, #1
 8005d88:	705a      	strb	r2, [r3, #1]
 8005d8a:	e00f      	b.n	8005dac <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	f003 020f 	and.w	r2, r3, #15
 8005d92:	4613      	mov	r3, r2
 8005d94:	00db      	lsls	r3, r3, #3
 8005d96:	4413      	add	r3, r2
 8005d98:	009b      	lsls	r3, r3, #2
 8005d9a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	4413      	add	r3, r2
 8005da2:	3304      	adds	r3, #4
 8005da4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2200      	movs	r2, #0
 8005daa:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005dac:	78fb      	ldrb	r3, [r7, #3]
 8005dae:	f003 030f 	and.w	r3, r3, #15
 8005db2:	b2da      	uxtb	r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005db8:	883a      	ldrh	r2, [r7, #0]
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	78ba      	ldrb	r2, [r7, #2]
 8005dc2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	785b      	ldrb	r3, [r3, #1]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d004      	beq.n	8005dd6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005dd6:	78bb      	ldrb	r3, [r7, #2]
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	d102      	bne.n	8005de2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_PCD_EP_Open+0xaa>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e00e      	b.n	8005e0e <HAL_PCD_EP_Open+0xc8>
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68f9      	ldr	r1, [r7, #12]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f005 f926 	bl	800b050 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005e0c:	7afb      	ldrb	r3, [r7, #11]
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3710      	adds	r7, #16
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b084      	sub	sp, #16
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	6078      	str	r0, [r7, #4]
 8005e1e:	460b      	mov	r3, r1
 8005e20:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	da0f      	bge.n	8005e4a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e2a:	78fb      	ldrb	r3, [r7, #3]
 8005e2c:	f003 020f 	and.w	r2, r3, #15
 8005e30:	4613      	mov	r3, r2
 8005e32:	00db      	lsls	r3, r3, #3
 8005e34:	4413      	add	r3, r2
 8005e36:	009b      	lsls	r3, r3, #2
 8005e38:	3338      	adds	r3, #56	; 0x38
 8005e3a:	687a      	ldr	r2, [r7, #4]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	3304      	adds	r3, #4
 8005e40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2201      	movs	r2, #1
 8005e46:	705a      	strb	r2, [r3, #1]
 8005e48:	e00f      	b.n	8005e6a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e4a:	78fb      	ldrb	r3, [r7, #3]
 8005e4c:	f003 020f 	and.w	r2, r3, #15
 8005e50:	4613      	mov	r3, r2
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	4413      	add	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	4413      	add	r3, r2
 8005e60:	3304      	adds	r3, #4
 8005e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005e6a:	78fb      	ldrb	r3, [r7, #3]
 8005e6c:	f003 030f 	and.w	r3, r3, #15
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d101      	bne.n	8005e84 <HAL_PCD_EP_Close+0x6e>
 8005e80:	2302      	movs	r3, #2
 8005e82:	e00e      	b.n	8005ea2 <HAL_PCD_EP_Close+0x8c>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68f9      	ldr	r1, [r7, #12]
 8005e92:	4618      	mov	r0, r3
 8005e94:	f005 f964 	bl	800b160 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b086      	sub	sp, #24
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	607a      	str	r2, [r7, #4]
 8005eb4:	603b      	str	r3, [r7, #0]
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005eba:	7afb      	ldrb	r3, [r7, #11]
 8005ebc:	f003 020f 	and.w	r2, r3, #15
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4413      	add	r3, r2
 8005ed0:	3304      	adds	r3, #4
 8005ed2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	683a      	ldr	r2, [r7, #0]
 8005ede:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005ee0:	697b      	ldr	r3, [r7, #20]
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005ee6:	697b      	ldr	r3, [r7, #20]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005eec:	7afb      	ldrb	r3, [r7, #11]
 8005eee:	f003 030f 	and.w	r3, r3, #15
 8005ef2:	b2da      	uxtb	r2, r3
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d102      	bne.n	8005f06 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f00:	687a      	ldr	r2, [r7, #4]
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f06:	7afb      	ldrb	r3, [r7, #11]
 8005f08:	f003 030f 	and.w	r3, r3, #15
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d109      	bne.n	8005f24 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	691b      	ldr	r3, [r3, #16]
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	6979      	ldr	r1, [r7, #20]
 8005f1e:	f005 fc43 	bl	800b7a8 <USB_EP0StartXfer>
 8005f22:	e008      	b.n	8005f36 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6818      	ldr	r0, [r3, #0]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	b2db      	uxtb	r3, r3
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6979      	ldr	r1, [r7, #20]
 8005f32:	f005 f9f1 	bl	800b318 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f36:	2300      	movs	r3, #0
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	3718      	adds	r7, #24
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b083      	sub	sp, #12
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	460b      	mov	r3, r1
 8005f4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005f4c:	78fb      	ldrb	r3, [r7, #3]
 8005f4e:	f003 020f 	and.w	r2, r3, #15
 8005f52:	6879      	ldr	r1, [r7, #4]
 8005f54:	4613      	mov	r3, r2
 8005f56:	00db      	lsls	r3, r3, #3
 8005f58:	4413      	add	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	440b      	add	r3, r1
 8005f5e:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005f62:	681b      	ldr	r3, [r3, #0]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	607a      	str	r2, [r7, #4]
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f80:	7afb      	ldrb	r3, [r7, #11]
 8005f82:	f003 020f 	and.w	r2, r3, #15
 8005f86:	4613      	mov	r3, r2
 8005f88:	00db      	lsls	r3, r3, #3
 8005f8a:	4413      	add	r3, r2
 8005f8c:	009b      	lsls	r3, r3, #2
 8005f8e:	3338      	adds	r3, #56	; 0x38
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	3304      	adds	r3, #4
 8005f96:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f98:	697b      	ldr	r3, [r7, #20]
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	683a      	ldr	r2, [r7, #0]
 8005fa2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	2201      	movs	r2, #1
 8005fae:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fb0:	7afb      	ldrb	r3, [r7, #11]
 8005fb2:	f003 030f 	and.w	r3, r3, #15
 8005fb6:	b2da      	uxtb	r2, r3
 8005fb8:	697b      	ldr	r3, [r7, #20]
 8005fba:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	691b      	ldr	r3, [r3, #16]
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d102      	bne.n	8005fca <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005fc4:	687a      	ldr	r2, [r7, #4]
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005fca:	7afb      	ldrb	r3, [r7, #11]
 8005fcc:	f003 030f 	and.w	r3, r3, #15
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d109      	bne.n	8005fe8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6818      	ldr	r0, [r3, #0]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	691b      	ldr	r3, [r3, #16]
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	461a      	mov	r2, r3
 8005fe0:	6979      	ldr	r1, [r7, #20]
 8005fe2:	f005 fbe1 	bl	800b7a8 <USB_EP0StartXfer>
 8005fe6:	e008      	b.n	8005ffa <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6818      	ldr	r0, [r3, #0]
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	691b      	ldr	r3, [r3, #16]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	6979      	ldr	r1, [r7, #20]
 8005ff6:	f005 f98f 	bl	800b318 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3718      	adds	r7, #24
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}

08006004 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b084      	sub	sp, #16
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006010:	78fb      	ldrb	r3, [r7, #3]
 8006012:	f003 020f 	and.w	r2, r3, #15
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	429a      	cmp	r2, r3
 800601c:	d901      	bls.n	8006022 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e050      	b.n	80060c4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006022:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006026:	2b00      	cmp	r3, #0
 8006028:	da0f      	bge.n	800604a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800602a:	78fb      	ldrb	r3, [r7, #3]
 800602c:	f003 020f 	and.w	r2, r3, #15
 8006030:	4613      	mov	r3, r2
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	4413      	add	r3, r2
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	3338      	adds	r3, #56	; 0x38
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	4413      	add	r3, r2
 800603e:	3304      	adds	r3, #4
 8006040:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	2201      	movs	r2, #1
 8006046:	705a      	strb	r2, [r3, #1]
 8006048:	e00d      	b.n	8006066 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800604a:	78fa      	ldrb	r2, [r7, #3]
 800604c:	4613      	mov	r3, r2
 800604e:	00db      	lsls	r3, r3, #3
 8006050:	4413      	add	r3, r2
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	4413      	add	r3, r2
 800605c:	3304      	adds	r3, #4
 800605e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2201      	movs	r2, #1
 800606a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	f003 030f 	and.w	r3, r3, #15
 8006072:	b2da      	uxtb	r2, r3
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800607e:	2b01      	cmp	r3, #1
 8006080:	d101      	bne.n	8006086 <HAL_PCD_EP_SetStall+0x82>
 8006082:	2302      	movs	r3, #2
 8006084:	e01e      	b.n	80060c4 <HAL_PCD_EP_SetStall+0xc0>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68f9      	ldr	r1, [r7, #12]
 8006094:	4618      	mov	r0, r3
 8006096:	f005 fe1f 	bl	800bcd8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800609a:	78fb      	ldrb	r3, [r7, #3]
 800609c:	f003 030f 	and.w	r3, r3, #15
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d10a      	bne.n	80060ba <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6818      	ldr	r0, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	691b      	ldr	r3, [r3, #16]
 80060ac:	b2d9      	uxtb	r1, r3
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80060b4:	461a      	mov	r2, r3
 80060b6:	f006 f80f 	bl	800c0d8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80060c2:	2300      	movs	r3, #0
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	460b      	mov	r3, r1
 80060d6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80060d8:	78fb      	ldrb	r3, [r7, #3]
 80060da:	f003 020f 	and.w	r2, r3, #15
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d901      	bls.n	80060ea <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80060e6:	2301      	movs	r3, #1
 80060e8:	e042      	b.n	8006170 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80060ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	da0f      	bge.n	8006112 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060f2:	78fb      	ldrb	r3, [r7, #3]
 80060f4:	f003 020f 	and.w	r2, r3, #15
 80060f8:	4613      	mov	r3, r2
 80060fa:	00db      	lsls	r3, r3, #3
 80060fc:	4413      	add	r3, r2
 80060fe:	009b      	lsls	r3, r3, #2
 8006100:	3338      	adds	r3, #56	; 0x38
 8006102:	687a      	ldr	r2, [r7, #4]
 8006104:	4413      	add	r3, r2
 8006106:	3304      	adds	r3, #4
 8006108:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2201      	movs	r2, #1
 800610e:	705a      	strb	r2, [r3, #1]
 8006110:	e00f      	b.n	8006132 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006112:	78fb      	ldrb	r3, [r7, #3]
 8006114:	f003 020f 	and.w	r2, r3, #15
 8006118:	4613      	mov	r3, r2
 800611a:	00db      	lsls	r3, r3, #3
 800611c:	4413      	add	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	4413      	add	r3, r2
 8006128:	3304      	adds	r3, #4
 800612a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2200      	movs	r2, #0
 8006130:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	f003 030f 	and.w	r3, r3, #15
 800613e:	b2da      	uxtb	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800614a:	2b01      	cmp	r3, #1
 800614c:	d101      	bne.n	8006152 <HAL_PCD_EP_ClrStall+0x86>
 800614e:	2302      	movs	r3, #2
 8006150:	e00e      	b.n	8006170 <HAL_PCD_EP_ClrStall+0xa4>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68f9      	ldr	r1, [r7, #12]
 8006160:	4618      	mov	r0, r3
 8006162:	f005 fe27 	bl	800bdb4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3710      	adds	r7, #16
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}

08006178 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	6078      	str	r0, [r7, #4]
 8006180:	460b      	mov	r3, r1
 8006182:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006184:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006188:	2b00      	cmp	r3, #0
 800618a:	da0c      	bge.n	80061a6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800618c:	78fb      	ldrb	r3, [r7, #3]
 800618e:	f003 020f 	and.w	r2, r3, #15
 8006192:	4613      	mov	r3, r2
 8006194:	00db      	lsls	r3, r3, #3
 8006196:	4413      	add	r3, r2
 8006198:	009b      	lsls	r3, r3, #2
 800619a:	3338      	adds	r3, #56	; 0x38
 800619c:	687a      	ldr	r2, [r7, #4]
 800619e:	4413      	add	r3, r2
 80061a0:	3304      	adds	r3, #4
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	e00c      	b.n	80061c0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061a6:	78fb      	ldrb	r3, [r7, #3]
 80061a8:	f003 020f 	and.w	r2, r3, #15
 80061ac:	4613      	mov	r3, r2
 80061ae:	00db      	lsls	r3, r3, #3
 80061b0:	4413      	add	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	4413      	add	r3, r2
 80061bc:	3304      	adds	r3, #4
 80061be:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68f9      	ldr	r1, [r7, #12]
 80061c6:	4618      	mov	r0, r3
 80061c8:	f005 fc46 	bl	800ba58 <USB_EPStopXfer>
 80061cc:	4603      	mov	r3, r0
 80061ce:	72fb      	strb	r3, [r7, #11]

  return ret;
 80061d0:	7afb      	ldrb	r3, [r7, #11]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b08a      	sub	sp, #40	; 0x28
 80061de:	af02      	add	r7, sp, #8
 80061e0:	6078      	str	r0, [r7, #4]
 80061e2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	4613      	mov	r3, r2
 80061f2:	00db      	lsls	r3, r3, #3
 80061f4:	4413      	add	r3, r2
 80061f6:	009b      	lsls	r3, r3, #2
 80061f8:	3338      	adds	r3, #56	; 0x38
 80061fa:	687a      	ldr	r2, [r7, #4]
 80061fc:	4413      	add	r3, r2
 80061fe:	3304      	adds	r3, #4
 8006200:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6a1a      	ldr	r2, [r3, #32]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	429a      	cmp	r2, r3
 800620c:	d901      	bls.n	8006212 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800620e:	2301      	movs	r3, #1
 8006210:	e06c      	b.n	80062ec <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	699a      	ldr	r2, [r3, #24]
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	69fa      	ldr	r2, [r7, #28]
 8006224:	429a      	cmp	r2, r3
 8006226:	d902      	bls.n	800622e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	3303      	adds	r3, #3
 8006232:	089b      	lsrs	r3, r3, #2
 8006234:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006236:	e02b      	b.n	8006290 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	699a      	ldr	r2, [r3, #24]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	69fa      	ldr	r2, [r7, #28]
 800624a:	429a      	cmp	r2, r3
 800624c:	d902      	bls.n	8006254 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	3303      	adds	r3, #3
 8006258:	089b      	lsrs	r3, r3, #2
 800625a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6919      	ldr	r1, [r3, #16]
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	b2da      	uxtb	r2, r3
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800626c:	b2db      	uxtb	r3, r3
 800626e:	9300      	str	r3, [sp, #0]
 8006270:	4603      	mov	r3, r0
 8006272:	6978      	ldr	r0, [r7, #20]
 8006274:	f005 fc9a 	bl	800bbac <USB_WritePacket>

    ep->xfer_buff  += len;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	691a      	ldr	r2, [r3, #16]
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	441a      	add	r2, r3
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6a1a      	ldr	r2, [r3, #32]
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	441a      	add	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	693b      	ldr	r3, [r7, #16]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	429a      	cmp	r2, r3
 80062a4:	d809      	bhi.n	80062ba <PCD_WriteEmptyTxFifo+0xe0>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6a1a      	ldr	r2, [r3, #32]
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062ae:	429a      	cmp	r2, r3
 80062b0:	d203      	bcs.n	80062ba <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	699b      	ldr	r3, [r3, #24]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1be      	bne.n	8006238 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	699a      	ldr	r2, [r3, #24]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	429a      	cmp	r2, r3
 80062c4:	d811      	bhi.n	80062ea <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	f003 030f 	and.w	r3, r3, #15
 80062cc:	2201      	movs	r2, #1
 80062ce:	fa02 f303 	lsl.w	r3, r2, r3
 80062d2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062dc:	68bb      	ldr	r3, [r7, #8]
 80062de:	43db      	mvns	r3, r3
 80062e0:	6939      	ldr	r1, [r7, #16]
 80062e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80062e6:	4013      	ands	r3, r2
 80062e8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3720      	adds	r7, #32
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b088      	sub	sp, #32
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
 80062fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006308:	69fb      	ldr	r3, [r7, #28]
 800630a:	333c      	adds	r3, #60	; 0x3c
 800630c:	3304      	adds	r3, #4
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	69bb      	ldr	r3, [r7, #24]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	2b01      	cmp	r3, #1
 8006328:	d17b      	bne.n	8006422 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f003 0308 	and.w	r3, r3, #8
 8006330:	2b00      	cmp	r3, #0
 8006332:	d015      	beq.n	8006360 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	4a61      	ldr	r2, [pc, #388]	; (80064bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006338:	4293      	cmp	r3, r2
 800633a:	f240 80b9 	bls.w	80064b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006344:	2b00      	cmp	r3, #0
 8006346:	f000 80b3 	beq.w	80064b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006356:	461a      	mov	r2, r3
 8006358:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800635c:	6093      	str	r3, [r2, #8]
 800635e:	e0a7      	b.n	80064b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	f003 0320 	and.w	r3, r3, #32
 8006366:	2b00      	cmp	r3, #0
 8006368:	d009      	beq.n	800637e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	69bb      	ldr	r3, [r7, #24]
 8006370:	4413      	add	r3, r2
 8006372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006376:	461a      	mov	r2, r3
 8006378:	2320      	movs	r3, #32
 800637a:	6093      	str	r3, [r2, #8]
 800637c:	e098      	b.n	80064b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006384:	2b00      	cmp	r3, #0
 8006386:	f040 8093 	bne.w	80064b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	4a4b      	ldr	r2, [pc, #300]	; (80064bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d90f      	bls.n	80063b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006398:	2b00      	cmp	r3, #0
 800639a:	d00a      	beq.n	80063b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	015a      	lsls	r2, r3, #5
 80063a0:	69bb      	ldr	r3, [r7, #24]
 80063a2:	4413      	add	r3, r2
 80063a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a8:	461a      	mov	r2, r3
 80063aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063ae:	6093      	str	r3, [r2, #8]
 80063b0:	e07e      	b.n	80064b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	4613      	mov	r3, r2
 80063b6:	00db      	lsls	r3, r3, #3
 80063b8:	4413      	add	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80063c0:	687a      	ldr	r2, [r7, #4]
 80063c2:	4413      	add	r3, r2
 80063c4:	3304      	adds	r3, #4
 80063c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	69da      	ldr	r2, [r3, #28]
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	0159      	lsls	r1, r3, #5
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	440b      	add	r3, r1
 80063d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063de:	1ad2      	subs	r2, r2, r3
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d114      	bne.n	8006414 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d109      	bne.n	8006406 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6818      	ldr	r0, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80063fc:	461a      	mov	r2, r3
 80063fe:	2101      	movs	r1, #1
 8006400:	f005 fe6a 	bl	800c0d8 <USB_EP0_OutStart>
 8006404:	e006      	b.n	8006414 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	691a      	ldr	r2, [r3, #16]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	6a1b      	ldr	r3, [r3, #32]
 800640e:	441a      	add	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006414:	683b      	ldr	r3, [r7, #0]
 8006416:	b2db      	uxtb	r3, r3
 8006418:	4619      	mov	r1, r3
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	f00a fe22 	bl	8011064 <HAL_PCD_DataOutStageCallback>
 8006420:	e046      	b.n	80064b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	4a26      	ldr	r2, [pc, #152]	; (80064c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d124      	bne.n	8006474 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006430:	2b00      	cmp	r3, #0
 8006432:	d00a      	beq.n	800644a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	015a      	lsls	r2, r3, #5
 8006438:	69bb      	ldr	r3, [r7, #24]
 800643a:	4413      	add	r3, r2
 800643c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006440:	461a      	mov	r2, r3
 8006442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006446:	6093      	str	r3, [r2, #8]
 8006448:	e032      	b.n	80064b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800644a:	693b      	ldr	r3, [r7, #16]
 800644c:	f003 0320 	and.w	r3, r3, #32
 8006450:	2b00      	cmp	r3, #0
 8006452:	d008      	beq.n	8006466 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	69bb      	ldr	r3, [r7, #24]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006460:	461a      	mov	r2, r3
 8006462:	2320      	movs	r3, #32
 8006464:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	b2db      	uxtb	r3, r3
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f00a fdf9 	bl	8011064 <HAL_PCD_DataOutStageCallback>
 8006472:	e01d      	b.n	80064b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d114      	bne.n	80064a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800647a:	6879      	ldr	r1, [r7, #4]
 800647c:	683a      	ldr	r2, [r7, #0]
 800647e:	4613      	mov	r3, r2
 8006480:	00db      	lsls	r3, r3, #3
 8006482:	4413      	add	r3, r2
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	440b      	add	r3, r1
 8006488:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b00      	cmp	r3, #0
 8006490:	d108      	bne.n	80064a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	6818      	ldr	r0, [r3, #0]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800649c:	461a      	mov	r2, r3
 800649e:	2100      	movs	r1, #0
 80064a0:	f005 fe1a 	bl	800c0d8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	b2db      	uxtb	r3, r3
 80064a8:	4619      	mov	r1, r3
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f00a fdda 	bl	8011064 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3720      	adds	r7, #32
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
 80064ba:	bf00      	nop
 80064bc:	4f54300a 	.word	0x4f54300a
 80064c0:	4f54310a 	.word	0x4f54310a

080064c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	333c      	adds	r3, #60	; 0x3c
 80064dc:	3304      	adds	r3, #4
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	4a15      	ldr	r2, [pc, #84]	; (800654c <PCD_EP_OutSetupPacket_int+0x88>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d90e      	bls.n	8006518 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064fa:	68bb      	ldr	r3, [r7, #8]
 80064fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006500:	2b00      	cmp	r3, #0
 8006502:	d009      	beq.n	8006518 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	015a      	lsls	r2, r3, #5
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	4413      	add	r3, r2
 800650c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006510:	461a      	mov	r2, r3
 8006512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006516:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f00a fd91 	bl	8011040 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	4a0a      	ldr	r2, [pc, #40]	; (800654c <PCD_EP_OutSetupPacket_int+0x88>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d90c      	bls.n	8006540 <PCD_EP_OutSetupPacket_int+0x7c>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	2b01      	cmp	r3, #1
 800652c:	d108      	bne.n	8006540 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6818      	ldr	r0, [r3, #0]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006538:	461a      	mov	r2, r3
 800653a:	2101      	movs	r1, #1
 800653c:	f005 fdcc 	bl	800c0d8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3718      	adds	r7, #24
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}
 800654a:	bf00      	nop
 800654c:	4f54300a 	.word	0x4f54300a

08006550 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006550:	b480      	push	{r7}
 8006552:	b085      	sub	sp, #20
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	460b      	mov	r3, r1
 800655a:	70fb      	strb	r3, [r7, #3]
 800655c:	4613      	mov	r3, r2
 800655e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006566:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d107      	bne.n	800657e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800656e:	883b      	ldrh	r3, [r7, #0]
 8006570:	0419      	lsls	r1, r3, #16
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	430a      	orrs	r2, r1
 800657a:	629a      	str	r2, [r3, #40]	; 0x28
 800657c:	e028      	b.n	80065d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006584:	0c1b      	lsrs	r3, r3, #16
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	4413      	add	r3, r2
 800658a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800658c:	2300      	movs	r3, #0
 800658e:	73fb      	strb	r3, [r7, #15]
 8006590:	e00d      	b.n	80065ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681a      	ldr	r2, [r3, #0]
 8006596:	7bfb      	ldrb	r3, [r7, #15]
 8006598:	3340      	adds	r3, #64	; 0x40
 800659a:	009b      	lsls	r3, r3, #2
 800659c:	4413      	add	r3, r2
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	0c1b      	lsrs	r3, r3, #16
 80065a2:	68ba      	ldr	r2, [r7, #8]
 80065a4:	4413      	add	r3, r2
 80065a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065a8:	7bfb      	ldrb	r3, [r7, #15]
 80065aa:	3301      	adds	r3, #1
 80065ac:	73fb      	strb	r3, [r7, #15]
 80065ae:	7bfa      	ldrb	r2, [r7, #15]
 80065b0:	78fb      	ldrb	r3, [r7, #3]
 80065b2:	3b01      	subs	r3, #1
 80065b4:	429a      	cmp	r2, r3
 80065b6:	d3ec      	bcc.n	8006592 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80065b8:	883b      	ldrh	r3, [r7, #0]
 80065ba:	0418      	lsls	r0, r3, #16
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6819      	ldr	r1, [r3, #0]
 80065c0:	78fb      	ldrb	r3, [r7, #3]
 80065c2:	3b01      	subs	r3, #1
 80065c4:	68ba      	ldr	r2, [r7, #8]
 80065c6:	4302      	orrs	r2, r0
 80065c8:	3340      	adds	r3, #64	; 0x40
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	440b      	add	r3, r1
 80065ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3714      	adds	r7, #20
 80065d6:	46bd      	mov	sp, r7
 80065d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065dc:	4770      	bx	lr

080065de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80065de:	b480      	push	{r7}
 80065e0:	b083      	sub	sp, #12
 80065e2:	af00      	add	r7, sp, #0
 80065e4:	6078      	str	r0, [r7, #4]
 80065e6:	460b      	mov	r3, r1
 80065e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	887a      	ldrh	r2, [r7, #2]
 80065f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr

08006600 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	460b      	mov	r3, r1
 800660a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800660c:	bf00      	nop
 800660e:	370c      	adds	r7, #12
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr

08006618 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d101      	bne.n	800662a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006626:	2301      	movs	r3, #1
 8006628:	e267      	b.n	8006afa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f003 0301 	and.w	r3, r3, #1
 8006632:	2b00      	cmp	r3, #0
 8006634:	d075      	beq.n	8006722 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006636:	4b88      	ldr	r3, [pc, #544]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 8006638:	689b      	ldr	r3, [r3, #8]
 800663a:	f003 030c 	and.w	r3, r3, #12
 800663e:	2b04      	cmp	r3, #4
 8006640:	d00c      	beq.n	800665c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006642:	4b85      	ldr	r3, [pc, #532]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 8006644:	689b      	ldr	r3, [r3, #8]
 8006646:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800664a:	2b08      	cmp	r3, #8
 800664c:	d112      	bne.n	8006674 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800664e:	4b82      	ldr	r3, [pc, #520]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006656:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800665a:	d10b      	bne.n	8006674 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800665c:	4b7e      	ldr	r3, [pc, #504]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006664:	2b00      	cmp	r3, #0
 8006666:	d05b      	beq.n	8006720 <HAL_RCC_OscConfig+0x108>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d157      	bne.n	8006720 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e242      	b.n	8006afa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800667c:	d106      	bne.n	800668c <HAL_RCC_OscConfig+0x74>
 800667e:	4b76      	ldr	r3, [pc, #472]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a75      	ldr	r2, [pc, #468]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 8006684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006688:	6013      	str	r3, [r2, #0]
 800668a:	e01d      	b.n	80066c8 <HAL_RCC_OscConfig+0xb0>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006694:	d10c      	bne.n	80066b0 <HAL_RCC_OscConfig+0x98>
 8006696:	4b70      	ldr	r3, [pc, #448]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4a6f      	ldr	r2, [pc, #444]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 800669c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066a0:	6013      	str	r3, [r2, #0]
 80066a2:	4b6d      	ldr	r3, [pc, #436]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a6c      	ldr	r2, [pc, #432]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 80066a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066ac:	6013      	str	r3, [r2, #0]
 80066ae:	e00b      	b.n	80066c8 <HAL_RCC_OscConfig+0xb0>
 80066b0:	4b69      	ldr	r3, [pc, #420]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4a68      	ldr	r2, [pc, #416]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 80066b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066ba:	6013      	str	r3, [r2, #0]
 80066bc:	4b66      	ldr	r3, [pc, #408]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a65      	ldr	r2, [pc, #404]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 80066c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80066c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d013      	beq.n	80066f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066d0:	f7fc fe72 	bl	80033b8 <HAL_GetTick>
 80066d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066d6:	e008      	b.n	80066ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80066d8:	f7fc fe6e 	bl	80033b8 <HAL_GetTick>
 80066dc:	4602      	mov	r2, r0
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	1ad3      	subs	r3, r2, r3
 80066e2:	2b64      	cmp	r3, #100	; 0x64
 80066e4:	d901      	bls.n	80066ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066e6:	2303      	movs	r3, #3
 80066e8:	e207      	b.n	8006afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066ea:	4b5b      	ldr	r3, [pc, #364]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0f0      	beq.n	80066d8 <HAL_RCC_OscConfig+0xc0>
 80066f6:	e014      	b.n	8006722 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066f8:	f7fc fe5e 	bl	80033b8 <HAL_GetTick>
 80066fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066fe:	e008      	b.n	8006712 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006700:	f7fc fe5a 	bl	80033b8 <HAL_GetTick>
 8006704:	4602      	mov	r2, r0
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	2b64      	cmp	r3, #100	; 0x64
 800670c:	d901      	bls.n	8006712 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800670e:	2303      	movs	r3, #3
 8006710:	e1f3      	b.n	8006afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006712:	4b51      	ldr	r3, [pc, #324]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1f0      	bne.n	8006700 <HAL_RCC_OscConfig+0xe8>
 800671e:	e000      	b.n	8006722 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006720:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d063      	beq.n	80067f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800672e:	4b4a      	ldr	r3, [pc, #296]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	f003 030c 	and.w	r3, r3, #12
 8006736:	2b00      	cmp	r3, #0
 8006738:	d00b      	beq.n	8006752 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800673a:	4b47      	ldr	r3, [pc, #284]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 800673c:	689b      	ldr	r3, [r3, #8]
 800673e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006742:	2b08      	cmp	r3, #8
 8006744:	d11c      	bne.n	8006780 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006746:	4b44      	ldr	r3, [pc, #272]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d116      	bne.n	8006780 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006752:	4b41      	ldr	r3, [pc, #260]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f003 0302 	and.w	r3, r3, #2
 800675a:	2b00      	cmp	r3, #0
 800675c:	d005      	beq.n	800676a <HAL_RCC_OscConfig+0x152>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68db      	ldr	r3, [r3, #12]
 8006762:	2b01      	cmp	r3, #1
 8006764:	d001      	beq.n	800676a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006766:	2301      	movs	r3, #1
 8006768:	e1c7      	b.n	8006afa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800676a:	4b3b      	ldr	r3, [pc, #236]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	00db      	lsls	r3, r3, #3
 8006778:	4937      	ldr	r1, [pc, #220]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 800677a:	4313      	orrs	r3, r2
 800677c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800677e:	e03a      	b.n	80067f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d020      	beq.n	80067ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006788:	4b34      	ldr	r3, [pc, #208]	; (800685c <HAL_RCC_OscConfig+0x244>)
 800678a:	2201      	movs	r2, #1
 800678c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800678e:	f7fc fe13 	bl	80033b8 <HAL_GetTick>
 8006792:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006794:	e008      	b.n	80067a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006796:	f7fc fe0f 	bl	80033b8 <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	2b02      	cmp	r3, #2
 80067a2:	d901      	bls.n	80067a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067a4:	2303      	movs	r3, #3
 80067a6:	e1a8      	b.n	8006afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067a8:	4b2b      	ldr	r3, [pc, #172]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f003 0302 	and.w	r3, r3, #2
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d0f0      	beq.n	8006796 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067b4:	4b28      	ldr	r3, [pc, #160]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	691b      	ldr	r3, [r3, #16]
 80067c0:	00db      	lsls	r3, r3, #3
 80067c2:	4925      	ldr	r1, [pc, #148]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	600b      	str	r3, [r1, #0]
 80067c8:	e015      	b.n	80067f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80067ca:	4b24      	ldr	r3, [pc, #144]	; (800685c <HAL_RCC_OscConfig+0x244>)
 80067cc:	2200      	movs	r2, #0
 80067ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067d0:	f7fc fdf2 	bl	80033b8 <HAL_GetTick>
 80067d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067d6:	e008      	b.n	80067ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067d8:	f7fc fdee 	bl	80033b8 <HAL_GetTick>
 80067dc:	4602      	mov	r2, r0
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	1ad3      	subs	r3, r2, r3
 80067e2:	2b02      	cmp	r3, #2
 80067e4:	d901      	bls.n	80067ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80067e6:	2303      	movs	r3, #3
 80067e8:	e187      	b.n	8006afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067ea:	4b1b      	ldr	r3, [pc, #108]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d1f0      	bne.n	80067d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0308 	and.w	r3, r3, #8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d036      	beq.n	8006870 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d016      	beq.n	8006838 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800680a:	4b15      	ldr	r3, [pc, #84]	; (8006860 <HAL_RCC_OscConfig+0x248>)
 800680c:	2201      	movs	r2, #1
 800680e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006810:	f7fc fdd2 	bl	80033b8 <HAL_GetTick>
 8006814:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006816:	e008      	b.n	800682a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006818:	f7fc fdce 	bl	80033b8 <HAL_GetTick>
 800681c:	4602      	mov	r2, r0
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	1ad3      	subs	r3, r2, r3
 8006822:	2b02      	cmp	r3, #2
 8006824:	d901      	bls.n	800682a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006826:	2303      	movs	r3, #3
 8006828:	e167      	b.n	8006afa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800682a:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <HAL_RCC_OscConfig+0x240>)
 800682c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800682e:	f003 0302 	and.w	r3, r3, #2
 8006832:	2b00      	cmp	r3, #0
 8006834:	d0f0      	beq.n	8006818 <HAL_RCC_OscConfig+0x200>
 8006836:	e01b      	b.n	8006870 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006838:	4b09      	ldr	r3, [pc, #36]	; (8006860 <HAL_RCC_OscConfig+0x248>)
 800683a:	2200      	movs	r2, #0
 800683c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800683e:	f7fc fdbb 	bl	80033b8 <HAL_GetTick>
 8006842:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006844:	e00e      	b.n	8006864 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006846:	f7fc fdb7 	bl	80033b8 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	2b02      	cmp	r3, #2
 8006852:	d907      	bls.n	8006864 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006854:	2303      	movs	r3, #3
 8006856:	e150      	b.n	8006afa <HAL_RCC_OscConfig+0x4e2>
 8006858:	40023800 	.word	0x40023800
 800685c:	42470000 	.word	0x42470000
 8006860:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006864:	4b88      	ldr	r3, [pc, #544]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 8006866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006868:	f003 0302 	and.w	r3, r3, #2
 800686c:	2b00      	cmp	r3, #0
 800686e:	d1ea      	bne.n	8006846 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0304 	and.w	r3, r3, #4
 8006878:	2b00      	cmp	r3, #0
 800687a:	f000 8097 	beq.w	80069ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800687e:	2300      	movs	r3, #0
 8006880:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006882:	4b81      	ldr	r3, [pc, #516]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10f      	bne.n	80068ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800688e:	2300      	movs	r3, #0
 8006890:	60bb      	str	r3, [r7, #8]
 8006892:	4b7d      	ldr	r3, [pc, #500]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	4a7c      	ldr	r2, [pc, #496]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 8006898:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800689c:	6413      	str	r3, [r2, #64]	; 0x40
 800689e:	4b7a      	ldr	r3, [pc, #488]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 80068a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068a6:	60bb      	str	r3, [r7, #8]
 80068a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068aa:	2301      	movs	r3, #1
 80068ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068ae:	4b77      	ldr	r3, [pc, #476]	; (8006a8c <HAL_RCC_OscConfig+0x474>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d118      	bne.n	80068ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80068ba:	4b74      	ldr	r3, [pc, #464]	; (8006a8c <HAL_RCC_OscConfig+0x474>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	4a73      	ldr	r2, [pc, #460]	; (8006a8c <HAL_RCC_OscConfig+0x474>)
 80068c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80068c6:	f7fc fd77 	bl	80033b8 <HAL_GetTick>
 80068ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068cc:	e008      	b.n	80068e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068ce:	f7fc fd73 	bl	80033b8 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d901      	bls.n	80068e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e10c      	b.n	8006afa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068e0:	4b6a      	ldr	r3, [pc, #424]	; (8006a8c <HAL_RCC_OscConfig+0x474>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0f0      	beq.n	80068ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d106      	bne.n	8006902 <HAL_RCC_OscConfig+0x2ea>
 80068f4:	4b64      	ldr	r3, [pc, #400]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 80068f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f8:	4a63      	ldr	r2, [pc, #396]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 80068fa:	f043 0301 	orr.w	r3, r3, #1
 80068fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006900:	e01c      	b.n	800693c <HAL_RCC_OscConfig+0x324>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	2b05      	cmp	r3, #5
 8006908:	d10c      	bne.n	8006924 <HAL_RCC_OscConfig+0x30c>
 800690a:	4b5f      	ldr	r3, [pc, #380]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 800690c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800690e:	4a5e      	ldr	r2, [pc, #376]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 8006910:	f043 0304 	orr.w	r3, r3, #4
 8006914:	6713      	str	r3, [r2, #112]	; 0x70
 8006916:	4b5c      	ldr	r3, [pc, #368]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 8006918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800691a:	4a5b      	ldr	r2, [pc, #364]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 800691c:	f043 0301 	orr.w	r3, r3, #1
 8006920:	6713      	str	r3, [r2, #112]	; 0x70
 8006922:	e00b      	b.n	800693c <HAL_RCC_OscConfig+0x324>
 8006924:	4b58      	ldr	r3, [pc, #352]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 8006926:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006928:	4a57      	ldr	r2, [pc, #348]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 800692a:	f023 0301 	bic.w	r3, r3, #1
 800692e:	6713      	str	r3, [r2, #112]	; 0x70
 8006930:	4b55      	ldr	r3, [pc, #340]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 8006932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006934:	4a54      	ldr	r2, [pc, #336]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 8006936:	f023 0304 	bic.w	r3, r3, #4
 800693a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d015      	beq.n	8006970 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006944:	f7fc fd38 	bl	80033b8 <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800694a:	e00a      	b.n	8006962 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800694c:	f7fc fd34 	bl	80033b8 <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	f241 3288 	movw	r2, #5000	; 0x1388
 800695a:	4293      	cmp	r3, r2
 800695c:	d901      	bls.n	8006962 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800695e:	2303      	movs	r3, #3
 8006960:	e0cb      	b.n	8006afa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006962:	4b49      	ldr	r3, [pc, #292]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 8006964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006966:	f003 0302 	and.w	r3, r3, #2
 800696a:	2b00      	cmp	r3, #0
 800696c:	d0ee      	beq.n	800694c <HAL_RCC_OscConfig+0x334>
 800696e:	e014      	b.n	800699a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006970:	f7fc fd22 	bl	80033b8 <HAL_GetTick>
 8006974:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006976:	e00a      	b.n	800698e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006978:	f7fc fd1e 	bl	80033b8 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	f241 3288 	movw	r2, #5000	; 0x1388
 8006986:	4293      	cmp	r3, r2
 8006988:	d901      	bls.n	800698e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800698a:	2303      	movs	r3, #3
 800698c:	e0b5      	b.n	8006afa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800698e:	4b3e      	ldr	r3, [pc, #248]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 8006990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006992:	f003 0302 	and.w	r3, r3, #2
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1ee      	bne.n	8006978 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800699a:	7dfb      	ldrb	r3, [r7, #23]
 800699c:	2b01      	cmp	r3, #1
 800699e:	d105      	bne.n	80069ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069a0:	4b39      	ldr	r3, [pc, #228]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 80069a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a4:	4a38      	ldr	r2, [pc, #224]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 80069a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f000 80a1 	beq.w	8006af8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80069b6:	4b34      	ldr	r3, [pc, #208]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 80069b8:	689b      	ldr	r3, [r3, #8]
 80069ba:	f003 030c 	and.w	r3, r3, #12
 80069be:	2b08      	cmp	r3, #8
 80069c0:	d05c      	beq.n	8006a7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	699b      	ldr	r3, [r3, #24]
 80069c6:	2b02      	cmp	r3, #2
 80069c8:	d141      	bne.n	8006a4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069ca:	4b31      	ldr	r3, [pc, #196]	; (8006a90 <HAL_RCC_OscConfig+0x478>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069d0:	f7fc fcf2 	bl	80033b8 <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80069d8:	f7fc fcee 	bl	80033b8 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e087      	b.n	8006afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069ea:	4b27      	ldr	r3, [pc, #156]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1f0      	bne.n	80069d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	69da      	ldr	r2, [r3, #28]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6a1b      	ldr	r3, [r3, #32]
 80069fe:	431a      	orrs	r2, r3
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	019b      	lsls	r3, r3, #6
 8006a06:	431a      	orrs	r2, r3
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a0c:	085b      	lsrs	r3, r3, #1
 8006a0e:	3b01      	subs	r3, #1
 8006a10:	041b      	lsls	r3, r3, #16
 8006a12:	431a      	orrs	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a18:	061b      	lsls	r3, r3, #24
 8006a1a:	491b      	ldr	r1, [pc, #108]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a20:	4b1b      	ldr	r3, [pc, #108]	; (8006a90 <HAL_RCC_OscConfig+0x478>)
 8006a22:	2201      	movs	r2, #1
 8006a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a26:	f7fc fcc7 	bl	80033b8 <HAL_GetTick>
 8006a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a2c:	e008      	b.n	8006a40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a2e:	f7fc fcc3 	bl	80033b8 <HAL_GetTick>
 8006a32:	4602      	mov	r2, r0
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	1ad3      	subs	r3, r2, r3
 8006a38:	2b02      	cmp	r3, #2
 8006a3a:	d901      	bls.n	8006a40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e05c      	b.n	8006afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a40:	4b11      	ldr	r3, [pc, #68]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d0f0      	beq.n	8006a2e <HAL_RCC_OscConfig+0x416>
 8006a4c:	e054      	b.n	8006af8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a4e:	4b10      	ldr	r3, [pc, #64]	; (8006a90 <HAL_RCC_OscConfig+0x478>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a54:	f7fc fcb0 	bl	80033b8 <HAL_GetTick>
 8006a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a5a:	e008      	b.n	8006a6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a5c:	f7fc fcac 	bl	80033b8 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d901      	bls.n	8006a6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a6a:	2303      	movs	r3, #3
 8006a6c:	e045      	b.n	8006afa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a6e:	4b06      	ldr	r3, [pc, #24]	; (8006a88 <HAL_RCC_OscConfig+0x470>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1f0      	bne.n	8006a5c <HAL_RCC_OscConfig+0x444>
 8006a7a:	e03d      	b.n	8006af8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	699b      	ldr	r3, [r3, #24]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d107      	bne.n	8006a94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e038      	b.n	8006afa <HAL_RCC_OscConfig+0x4e2>
 8006a88:	40023800 	.word	0x40023800
 8006a8c:	40007000 	.word	0x40007000
 8006a90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a94:	4b1b      	ldr	r3, [pc, #108]	; (8006b04 <HAL_RCC_OscConfig+0x4ec>)
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	699b      	ldr	r3, [r3, #24]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	d028      	beq.n	8006af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d121      	bne.n	8006af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d11a      	bne.n	8006af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006abe:	68fa      	ldr	r2, [r7, #12]
 8006ac0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006ac4:	4013      	ands	r3, r2
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006aca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d111      	bne.n	8006af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ada:	085b      	lsrs	r3, r3, #1
 8006adc:	3b01      	subs	r3, #1
 8006ade:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d107      	bne.n	8006af4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d001      	beq.n	8006af8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e000      	b.n	8006afa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006af8:	2300      	movs	r3, #0
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	40023800 	.word	0x40023800

08006b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e0cc      	b.n	8006cb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b1c:	4b68      	ldr	r3, [pc, #416]	; (8006cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0307 	and.w	r3, r3, #7
 8006b24:	683a      	ldr	r2, [r7, #0]
 8006b26:	429a      	cmp	r2, r3
 8006b28:	d90c      	bls.n	8006b44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b2a:	4b65      	ldr	r3, [pc, #404]	; (8006cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	b2d2      	uxtb	r2, r2
 8006b30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b32:	4b63      	ldr	r3, [pc, #396]	; (8006cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f003 0307 	and.w	r3, r3, #7
 8006b3a:	683a      	ldr	r2, [r7, #0]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d001      	beq.n	8006b44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b40:	2301      	movs	r3, #1
 8006b42:	e0b8      	b.n	8006cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f003 0302 	and.w	r3, r3, #2
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d020      	beq.n	8006b92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d005      	beq.n	8006b68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b5c:	4b59      	ldr	r3, [pc, #356]	; (8006cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	4a58      	ldr	r2, [pc, #352]	; (8006cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006b66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f003 0308 	and.w	r3, r3, #8
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d005      	beq.n	8006b80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b74:	4b53      	ldr	r3, [pc, #332]	; (8006cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	4a52      	ldr	r2, [pc, #328]	; (8006cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006b7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b80:	4b50      	ldr	r3, [pc, #320]	; (8006cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b82:	689b      	ldr	r3, [r3, #8]
 8006b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	689b      	ldr	r3, [r3, #8]
 8006b8c:	494d      	ldr	r1, [pc, #308]	; (8006cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d044      	beq.n	8006c28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d107      	bne.n	8006bb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006ba6:	4b47      	ldr	r3, [pc, #284]	; (8006cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d119      	bne.n	8006be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e07f      	b.n	8006cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	2b02      	cmp	r3, #2
 8006bbc:	d003      	beq.n	8006bc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006bc2:	2b03      	cmp	r3, #3
 8006bc4:	d107      	bne.n	8006bd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bc6:	4b3f      	ldr	r3, [pc, #252]	; (8006cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d109      	bne.n	8006be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e06f      	b.n	8006cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bd6:	4b3b      	ldr	r3, [pc, #236]	; (8006cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0302 	and.w	r3, r3, #2
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d101      	bne.n	8006be6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e067      	b.n	8006cb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006be6:	4b37      	ldr	r3, [pc, #220]	; (8006cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	f023 0203 	bic.w	r2, r3, #3
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	4934      	ldr	r1, [pc, #208]	; (8006cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf4:	4313      	orrs	r3, r2
 8006bf6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bf8:	f7fc fbde 	bl	80033b8 <HAL_GetTick>
 8006bfc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bfe:	e00a      	b.n	8006c16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c00:	f7fc fbda 	bl	80033b8 <HAL_GetTick>
 8006c04:	4602      	mov	r2, r0
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d901      	bls.n	8006c16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e04f      	b.n	8006cb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c16:	4b2b      	ldr	r3, [pc, #172]	; (8006cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c18:	689b      	ldr	r3, [r3, #8]
 8006c1a:	f003 020c 	and.w	r2, r3, #12
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d1eb      	bne.n	8006c00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c28:	4b25      	ldr	r3, [pc, #148]	; (8006cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f003 0307 	and.w	r3, r3, #7
 8006c30:	683a      	ldr	r2, [r7, #0]
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d20c      	bcs.n	8006c50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c36:	4b22      	ldr	r3, [pc, #136]	; (8006cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c38:	683a      	ldr	r2, [r7, #0]
 8006c3a:	b2d2      	uxtb	r2, r2
 8006c3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c3e:	4b20      	ldr	r3, [pc, #128]	; (8006cc0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f003 0307 	and.w	r3, r3, #7
 8006c46:	683a      	ldr	r2, [r7, #0]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d001      	beq.n	8006c50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e032      	b.n	8006cb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d008      	beq.n	8006c6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c5c:	4b19      	ldr	r3, [pc, #100]	; (8006cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	4916      	ldr	r1, [pc, #88]	; (8006cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f003 0308 	and.w	r3, r3, #8
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d009      	beq.n	8006c8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c7a:	4b12      	ldr	r3, [pc, #72]	; (8006cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	490e      	ldr	r1, [pc, #56]	; (8006cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006c8e:	f000 f821 	bl	8006cd4 <HAL_RCC_GetSysClockFreq>
 8006c92:	4602      	mov	r2, r0
 8006c94:	4b0b      	ldr	r3, [pc, #44]	; (8006cc4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c96:	689b      	ldr	r3, [r3, #8]
 8006c98:	091b      	lsrs	r3, r3, #4
 8006c9a:	f003 030f 	and.w	r3, r3, #15
 8006c9e:	490a      	ldr	r1, [pc, #40]	; (8006cc8 <HAL_RCC_ClockConfig+0x1c0>)
 8006ca0:	5ccb      	ldrb	r3, [r1, r3]
 8006ca2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ca6:	4a09      	ldr	r2, [pc, #36]	; (8006ccc <HAL_RCC_ClockConfig+0x1c4>)
 8006ca8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006caa:	4b09      	ldr	r3, [pc, #36]	; (8006cd0 <HAL_RCC_ClockConfig+0x1c8>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4618      	mov	r0, r3
 8006cb0:	f7fc fb3e 	bl	8003330 <HAL_InitTick>

  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	40023c00 	.word	0x40023c00
 8006cc4:	40023800 	.word	0x40023800
 8006cc8:	08015790 	.word	0x08015790
 8006ccc:	20000024 	.word	0x20000024
 8006cd0:	20000028 	.word	0x20000028

08006cd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006cd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cd8:	b090      	sub	sp, #64	; 0x40
 8006cda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	637b      	str	r3, [r7, #52]	; 0x34
 8006ce0:	2300      	movs	r3, #0
 8006ce2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006ce8:	2300      	movs	r3, #0
 8006cea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cec:	4b59      	ldr	r3, [pc, #356]	; (8006e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f003 030c 	and.w	r3, r3, #12
 8006cf4:	2b08      	cmp	r3, #8
 8006cf6:	d00d      	beq.n	8006d14 <HAL_RCC_GetSysClockFreq+0x40>
 8006cf8:	2b08      	cmp	r3, #8
 8006cfa:	f200 80a1 	bhi.w	8006e40 <HAL_RCC_GetSysClockFreq+0x16c>
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d002      	beq.n	8006d08 <HAL_RCC_GetSysClockFreq+0x34>
 8006d02:	2b04      	cmp	r3, #4
 8006d04:	d003      	beq.n	8006d0e <HAL_RCC_GetSysClockFreq+0x3a>
 8006d06:	e09b      	b.n	8006e40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d08:	4b53      	ldr	r3, [pc, #332]	; (8006e58 <HAL_RCC_GetSysClockFreq+0x184>)
 8006d0a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006d0c:	e09b      	b.n	8006e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d0e:	4b53      	ldr	r3, [pc, #332]	; (8006e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8006d10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006d12:	e098      	b.n	8006e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d14:	4b4f      	ldr	r3, [pc, #316]	; (8006e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d1e:	4b4d      	ldr	r3, [pc, #308]	; (8006e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d028      	beq.n	8006d7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d2a:	4b4a      	ldr	r3, [pc, #296]	; (8006e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	099b      	lsrs	r3, r3, #6
 8006d30:	2200      	movs	r2, #0
 8006d32:	623b      	str	r3, [r7, #32]
 8006d34:	627a      	str	r2, [r7, #36]	; 0x24
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006d3c:	2100      	movs	r1, #0
 8006d3e:	4b47      	ldr	r3, [pc, #284]	; (8006e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8006d40:	fb03 f201 	mul.w	r2, r3, r1
 8006d44:	2300      	movs	r3, #0
 8006d46:	fb00 f303 	mul.w	r3, r0, r3
 8006d4a:	4413      	add	r3, r2
 8006d4c:	4a43      	ldr	r2, [pc, #268]	; (8006e5c <HAL_RCC_GetSysClockFreq+0x188>)
 8006d4e:	fba0 1202 	umull	r1, r2, r0, r2
 8006d52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006d54:	460a      	mov	r2, r1
 8006d56:	62ba      	str	r2, [r7, #40]	; 0x28
 8006d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d5a:	4413      	add	r3, r2
 8006d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d60:	2200      	movs	r2, #0
 8006d62:	61bb      	str	r3, [r7, #24]
 8006d64:	61fa      	str	r2, [r7, #28]
 8006d66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006d6e:	f7f9 ff6b 	bl	8000c48 <__aeabi_uldivmod>
 8006d72:	4602      	mov	r2, r0
 8006d74:	460b      	mov	r3, r1
 8006d76:	4613      	mov	r3, r2
 8006d78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d7a:	e053      	b.n	8006e24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d7c:	4b35      	ldr	r3, [pc, #212]	; (8006e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	099b      	lsrs	r3, r3, #6
 8006d82:	2200      	movs	r2, #0
 8006d84:	613b      	str	r3, [r7, #16]
 8006d86:	617a      	str	r2, [r7, #20]
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006d8e:	f04f 0b00 	mov.w	fp, #0
 8006d92:	4652      	mov	r2, sl
 8006d94:	465b      	mov	r3, fp
 8006d96:	f04f 0000 	mov.w	r0, #0
 8006d9a:	f04f 0100 	mov.w	r1, #0
 8006d9e:	0159      	lsls	r1, r3, #5
 8006da0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006da4:	0150      	lsls	r0, r2, #5
 8006da6:	4602      	mov	r2, r0
 8006da8:	460b      	mov	r3, r1
 8006daa:	ebb2 080a 	subs.w	r8, r2, sl
 8006dae:	eb63 090b 	sbc.w	r9, r3, fp
 8006db2:	f04f 0200 	mov.w	r2, #0
 8006db6:	f04f 0300 	mov.w	r3, #0
 8006dba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006dbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006dc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006dc6:	ebb2 0408 	subs.w	r4, r2, r8
 8006dca:	eb63 0509 	sbc.w	r5, r3, r9
 8006dce:	f04f 0200 	mov.w	r2, #0
 8006dd2:	f04f 0300 	mov.w	r3, #0
 8006dd6:	00eb      	lsls	r3, r5, #3
 8006dd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ddc:	00e2      	lsls	r2, r4, #3
 8006dde:	4614      	mov	r4, r2
 8006de0:	461d      	mov	r5, r3
 8006de2:	eb14 030a 	adds.w	r3, r4, sl
 8006de6:	603b      	str	r3, [r7, #0]
 8006de8:	eb45 030b 	adc.w	r3, r5, fp
 8006dec:	607b      	str	r3, [r7, #4]
 8006dee:	f04f 0200 	mov.w	r2, #0
 8006df2:	f04f 0300 	mov.w	r3, #0
 8006df6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006dfa:	4629      	mov	r1, r5
 8006dfc:	028b      	lsls	r3, r1, #10
 8006dfe:	4621      	mov	r1, r4
 8006e00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e04:	4621      	mov	r1, r4
 8006e06:	028a      	lsls	r2, r1, #10
 8006e08:	4610      	mov	r0, r2
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0e:	2200      	movs	r2, #0
 8006e10:	60bb      	str	r3, [r7, #8]
 8006e12:	60fa      	str	r2, [r7, #12]
 8006e14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e18:	f7f9 ff16 	bl	8000c48 <__aeabi_uldivmod>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	460b      	mov	r3, r1
 8006e20:	4613      	mov	r3, r2
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e24:	4b0b      	ldr	r3, [pc, #44]	; (8006e54 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	0c1b      	lsrs	r3, r3, #16
 8006e2a:	f003 0303 	and.w	r3, r3, #3
 8006e2e:	3301      	adds	r3, #1
 8006e30:	005b      	lsls	r3, r3, #1
 8006e32:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006e34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006e3e:	e002      	b.n	8006e46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e40:	4b05      	ldr	r3, [pc, #20]	; (8006e58 <HAL_RCC_GetSysClockFreq+0x184>)
 8006e42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006e48:	4618      	mov	r0, r3
 8006e4a:	3740      	adds	r7, #64	; 0x40
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e52:	bf00      	nop
 8006e54:	40023800 	.word	0x40023800
 8006e58:	00f42400 	.word	0x00f42400
 8006e5c:	00b71b00 	.word	0x00b71b00

08006e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006e60:	b480      	push	{r7}
 8006e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006e64:	4b03      	ldr	r3, [pc, #12]	; (8006e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8006e66:	681b      	ldr	r3, [r3, #0]
}
 8006e68:	4618      	mov	r0, r3
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	20000024 	.word	0x20000024

08006e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006e7c:	f7ff fff0 	bl	8006e60 <HAL_RCC_GetHCLKFreq>
 8006e80:	4602      	mov	r2, r0
 8006e82:	4b05      	ldr	r3, [pc, #20]	; (8006e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	0a9b      	lsrs	r3, r3, #10
 8006e88:	f003 0307 	and.w	r3, r3, #7
 8006e8c:	4903      	ldr	r1, [pc, #12]	; (8006e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006e8e:	5ccb      	ldrb	r3, [r1, r3]
 8006e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	40023800 	.word	0x40023800
 8006e9c:	080157a0 	.word	0x080157a0

08006ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006ea4:	f7ff ffdc 	bl	8006e60 <HAL_RCC_GetHCLKFreq>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	4b05      	ldr	r3, [pc, #20]	; (8006ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006eac:	689b      	ldr	r3, [r3, #8]
 8006eae:	0b5b      	lsrs	r3, r3, #13
 8006eb0:	f003 0307 	and.w	r3, r3, #7
 8006eb4:	4903      	ldr	r1, [pc, #12]	; (8006ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006eb6:	5ccb      	ldrb	r3, [r1, r3]
 8006eb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	40023800 	.word	0x40023800
 8006ec4:	080157a0 	.word	0x080157a0

08006ec8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b082      	sub	sp, #8
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	e022      	b.n	8006f20 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d105      	bne.n	8006ef2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006eec:	6878      	ldr	r0, [r7, #4]
 8006eee:	f7fb ff1f 	bl	8002d30 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2203      	movs	r2, #3
 8006ef6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 f814 	bl	8006f28 <HAL_SD_InitCard>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	e00a      	b.n	8006f20 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2200      	movs	r2, #0
 8006f14:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2201      	movs	r2, #1
 8006f1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006f1e:	2300      	movs	r3, #0
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3708      	adds	r7, #8
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006f28:	b5b0      	push	{r4, r5, r7, lr}
 8006f2a:	b08e      	sub	sp, #56	; 0x38
 8006f2c:	af04      	add	r7, sp, #16
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006f30:	2300      	movs	r3, #0
 8006f32:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006f34:	2300      	movs	r3, #0
 8006f36:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006f40:	2300      	movs	r3, #0
 8006f42:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006f44:	2376      	movs	r3, #118	; 0x76
 8006f46:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681d      	ldr	r5, [r3, #0]
 8006f4c:	466c      	mov	r4, sp
 8006f4e:	f107 0314 	add.w	r3, r7, #20
 8006f52:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006f56:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006f5a:	f107 0308 	add.w	r3, r7, #8
 8006f5e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f60:	4628      	mov	r0, r5
 8006f62:	f002 ff89 	bl	8009e78 <SDIO_Init>
 8006f66:	4603      	mov	r3, r0
 8006f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d001      	beq.n	8006f78 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e04f      	b.n	8007018 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006f78:	4b29      	ldr	r3, [pc, #164]	; (8007020 <HAL_SD_InitCard+0xf8>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4618      	mov	r0, r3
 8006f84:	f002 ffc1 	bl	8009f0a <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006f88:	4b25      	ldr	r3, [pc, #148]	; (8007020 <HAL_SD_InitCard+0xf8>)
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006f8e:	2002      	movs	r0, #2
 8006f90:	f7fc fa1e 	bl	80033d0 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f001 f805 	bl	8007fa4 <SD_PowerON>
 8006f9a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00b      	beq.n	8006fba <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fae:	6a3b      	ldr	r3, [r7, #32]
 8006fb0:	431a      	orrs	r2, r3
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e02e      	b.n	8007018 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 ff24 	bl	8007e08 <SD_InitCard>
 8006fc0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d00b      	beq.n	8006fe0 <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2201      	movs	r2, #1
 8006fcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	431a      	orrs	r2, r3
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	e01b      	b.n	8007018 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f003 f820 	bl	800a02e <SDMMC_CmdBlockLength>
 8006fee:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ff0:	6a3b      	ldr	r3, [r7, #32]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d00f      	beq.n	8007016 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a0a      	ldr	r2, [pc, #40]	; (8007024 <HAL_SD_InitCard+0xfc>)
 8006ffc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007002:	6a3b      	ldr	r3, [r7, #32]
 8007004:	431a      	orrs	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2201      	movs	r2, #1
 800700e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e000      	b.n	8007018 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007016:	2300      	movs	r3, #0
}
 8007018:	4618      	mov	r0, r3
 800701a:	3728      	adds	r7, #40	; 0x28
 800701c:	46bd      	mov	sp, r7
 800701e:	bdb0      	pop	{r4, r5, r7, pc}
 8007020:	422580a0 	.word	0x422580a0
 8007024:	004005ff 	.word	0x004005ff

08007028 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b08c      	sub	sp, #48	; 0x30
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
 8007034:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d107      	bne.n	8007050 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007044:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800704c:	2301      	movs	r3, #1
 800704e:	e0c0      	b.n	80071d2 <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007056:	b2db      	uxtb	r3, r3
 8007058:	2b01      	cmp	r3, #1
 800705a:	f040 80b9 	bne.w	80071d0 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	2200      	movs	r2, #0
 8007062:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007064:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	441a      	add	r2, r3
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800706e:	429a      	cmp	r2, r3
 8007070:	d907      	bls.n	8007082 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007076:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e0a7      	b.n	80071d2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2203      	movs	r2, #3
 8007086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2200      	movs	r2, #0
 8007090:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007098:	68fa      	ldr	r2, [r7, #12]
 800709a:	6812      	ldr	r2, [r2, #0]
 800709c:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80070a0:	f043 0302 	orr.w	r3, r3, #2
 80070a4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070aa:	4a4c      	ldr	r2, [pc, #304]	; (80071dc <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80070ac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	4a4b      	ldr	r2, [pc, #300]	; (80071e0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80070b4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ba:	2200      	movs	r2, #0
 80070bc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070c2:	2200      	movs	r2, #0
 80070c4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d6:	689a      	ldr	r2, [r3, #8]
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	430a      	orrs	r2, r1
 80070e0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3380      	adds	r3, #128	; 0x80
 80070ec:	4619      	mov	r1, r3
 80070ee:	68ba      	ldr	r2, [r7, #8]
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	025b      	lsls	r3, r3, #9
 80070f4:	089b      	lsrs	r3, r3, #2
 80070f6:	f7fc fb4f 	bl	8003798 <HAL_DMA_Start_IT>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d017      	beq.n	8007130 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800710e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a33      	ldr	r2, [pc, #204]	; (80071e4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007116:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800712c:	2301      	movs	r3, #1
 800712e:	e050      	b.n	80071d2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8007130:	4b2d      	ldr	r3, [pc, #180]	; (80071e8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8007132:	2201      	movs	r2, #1
 8007134:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800713a:	2b01      	cmp	r3, #1
 800713c:	d002      	beq.n	8007144 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007140:	025b      	lsls	r3, r3, #9
 8007142:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007144:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007148:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	025b      	lsls	r3, r3, #9
 800714e:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8007150:	2390      	movs	r3, #144	; 0x90
 8007152:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007154:	2302      	movs	r3, #2
 8007156:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007158:	2300      	movs	r3, #0
 800715a:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800715c:	2301      	movs	r3, #1
 800715e:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f107 0210 	add.w	r2, r7, #16
 8007168:	4611      	mov	r1, r2
 800716a:	4618      	mov	r0, r3
 800716c:	f002 ff33 	bl	8009fd6 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	2b01      	cmp	r3, #1
 8007174:	d90a      	bls.n	800718c <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	2282      	movs	r2, #130	; 0x82
 800717a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007182:	4618      	mov	r0, r3
 8007184:	f002 ff97 	bl	800a0b6 <SDMMC_CmdReadMultiBlock>
 8007188:	62f8      	str	r0, [r7, #44]	; 0x2c
 800718a:	e009      	b.n	80071a0 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2281      	movs	r2, #129	; 0x81
 8007190:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007198:	4618      	mov	r0, r3
 800719a:	f002 ff6a 	bl	800a072 <SDMMC_CmdReadSingleBlock>
 800719e:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80071a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d012      	beq.n	80071cc <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a0e      	ldr	r2, [pc, #56]	; (80071e4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80071ac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071b4:	431a      	orrs	r2, r3
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	2201      	movs	r2, #1
 80071be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	2200      	movs	r2, #0
 80071c6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80071c8:	2301      	movs	r3, #1
 80071ca:	e002      	b.n	80071d2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	e000      	b.n	80071d2 <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80071d0:	2302      	movs	r3, #2
  }
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3730      	adds	r7, #48	; 0x30
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
 80071da:	bf00      	nop
 80071dc:	08007c17 	.word	0x08007c17
 80071e0:	08007c89 	.word	0x08007c89
 80071e4:	004005ff 	.word	0x004005ff
 80071e8:	4225858c 	.word	0x4225858c

080071ec <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08c      	sub	sp, #48	; 0x30
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d107      	bne.n	8007214 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007208:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007210:	2301      	movs	r3, #1
 8007212:	e0c5      	b.n	80073a0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800721a:	b2db      	uxtb	r3, r3
 800721c:	2b01      	cmp	r3, #1
 800721e:	f040 80be 	bne.w	800739e <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007228:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	441a      	add	r2, r3
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007232:	429a      	cmp	r2, r3
 8007234:	d907      	bls.n	8007246 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800723a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007242:	2301      	movs	r3, #1
 8007244:	e0ac      	b.n	80073a0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2203      	movs	r2, #3
 800724a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2200      	movs	r2, #0
 8007254:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800725c:	68fa      	ldr	r2, [r7, #12]
 800725e:	6812      	ldr	r2, [r2, #0]
 8007260:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8007264:	f043 0302 	orr.w	r3, r3, #2
 8007268:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800726e:	4a4e      	ldr	r2, [pc, #312]	; (80073a8 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8007270:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007276:	4a4d      	ldr	r2, [pc, #308]	; (80073ac <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8007278:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800727e:	2200      	movs	r2, #0
 8007280:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007286:	2b01      	cmp	r3, #1
 8007288:	d002      	beq.n	8007290 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 800728a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800728c:	025b      	lsls	r3, r3, #9
 800728e:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007290:	683b      	ldr	r3, [r7, #0]
 8007292:	2b01      	cmp	r3, #1
 8007294:	d90a      	bls.n	80072ac <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	22a0      	movs	r2, #160	; 0xa0
 800729a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072a2:	4618      	mov	r0, r3
 80072a4:	f002 ff4b 	bl	800a13e <SDMMC_CmdWriteMultiBlock>
 80072a8:	62f8      	str	r0, [r7, #44]	; 0x2c
 80072aa:	e009      	b.n	80072c0 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	2290      	movs	r2, #144	; 0x90
 80072b0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072b8:	4618      	mov	r0, r3
 80072ba:	f002 ff1e 	bl	800a0fa <SDMMC_CmdWriteSingleBlock>
 80072be:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80072c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d012      	beq.n	80072ec <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	4a39      	ldr	r2, [pc, #228]	; (80073b0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80072cc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d4:	431a      	orrs	r2, r3
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2200      	movs	r2, #0
 80072e6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e059      	b.n	80073a0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 80072ec:	4b31      	ldr	r3, [pc, #196]	; (80073b4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 80072ee:	2201      	movs	r2, #1
 80072f0:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f6:	2240      	movs	r2, #64	; 0x40
 80072f8:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800730a:	689a      	ldr	r2, [r3, #8]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800731a:	68b9      	ldr	r1, [r7, #8]
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	3380      	adds	r3, #128	; 0x80
 8007322:	461a      	mov	r2, r3
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	025b      	lsls	r3, r3, #9
 8007328:	089b      	lsrs	r3, r3, #2
 800732a:	f7fc fa35 	bl	8003798 <HAL_DMA_Start_IT>
 800732e:	4603      	mov	r3, r0
 8007330:	2b00      	cmp	r3, #0
 8007332:	d01c      	beq.n	800736e <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	6812      	ldr	r2, [r2, #0]
 800733e:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8007342:	f023 0302 	bic.w	r3, r3, #2
 8007346:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4a18      	ldr	r2, [pc, #96]	; (80073b0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800734e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007354:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2201      	movs	r2, #1
 8007360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2200      	movs	r2, #0
 8007368:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800736a:	2301      	movs	r3, #1
 800736c:	e018      	b.n	80073a0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800736e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007372:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	025b      	lsls	r3, r3, #9
 8007378:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800737a:	2390      	movs	r3, #144	; 0x90
 800737c:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 800737e:	2300      	movs	r3, #0
 8007380:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007382:	2300      	movs	r3, #0
 8007384:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8007386:	2301      	movs	r3, #1
 8007388:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f107 0210 	add.w	r2, r7, #16
 8007392:	4611      	mov	r1, r2
 8007394:	4618      	mov	r0, r3
 8007396:	f002 fe1e 	bl	8009fd6 <SDIO_ConfigData>

      return HAL_OK;
 800739a:	2300      	movs	r3, #0
 800739c:	e000      	b.n	80073a0 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 800739e:	2302      	movs	r3, #2
  }
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3730      	adds	r7, #48	; 0x30
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	08007bed 	.word	0x08007bed
 80073ac:	08007c89 	.word	0x08007c89
 80073b0:	004005ff 	.word	0x004005ff
 80073b4:	4225858c 	.word	0x4225858c

080073b8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073c4:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d008      	beq.n	80073e6 <HAL_SD_IRQHandler+0x2e>
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f003 0308 	and.w	r3, r3, #8
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d003      	beq.n	80073e6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f000 ffff 	bl	80083e2 <SD_Read_IT>
 80073e4:	e165      	b.n	80076b2 <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 808f 	beq.w	8007514 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073fe:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	6812      	ldr	r2, [r2, #0]
 800740a:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800740e:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8007412:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	f022 0201 	bic.w	r2, r2, #1
 8007422:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f003 0308 	and.w	r3, r3, #8
 800742a:	2b00      	cmp	r3, #0
 800742c:	d039      	beq.n	80074a2 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f003 0302 	and.w	r3, r3, #2
 8007434:	2b00      	cmp	r3, #0
 8007436:	d104      	bne.n	8007442 <HAL_SD_IRQHandler+0x8a>
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f003 0320 	and.w	r3, r3, #32
 800743e:	2b00      	cmp	r3, #0
 8007440:	d011      	beq.n	8007466 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4618      	mov	r0, r3
 8007448:	f002 fe9c 	bl	800a184 <SDMMC_CmdStopTransfer>
 800744c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	2b00      	cmp	r3, #0
 8007452:	d008      	beq.n	8007466 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	431a      	orrs	r2, r3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f92f 	bl	80076c4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f240 523a 	movw	r2, #1338	; 0x53a
 800746e:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	2201      	movs	r2, #1
 8007474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2200      	movs	r2, #0
 800747c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	f003 0301 	and.w	r3, r3, #1
 8007484:	2b00      	cmp	r3, #0
 8007486:	d104      	bne.n	8007492 <HAL_SD_IRQHandler+0xda>
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f003 0302 	and.w	r3, r3, #2
 800748e:	2b00      	cmp	r3, #0
 8007490:	d003      	beq.n	800749a <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f004 ff58 	bl	800c348 <HAL_SD_RxCpltCallback>
 8007498:	e10b      	b.n	80076b2 <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f004 ff4a 	bl	800c334 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80074a0:	e107      	b.n	80076b2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	f000 8102 	beq.w	80076b2 <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	f003 0320 	and.w	r3, r3, #32
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d011      	beq.n	80074dc <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4618      	mov	r0, r3
 80074be:	f002 fe61 	bl	800a184 <SDMMC_CmdStopTransfer>
 80074c2:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d008      	beq.n	80074dc <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	431a      	orrs	r2, r3
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f8f4 	bl	80076c4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f040 80e5 	bne.w	80076b2 <HAL_SD_IRQHandler+0x2fa>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f003 0302 	and.w	r3, r3, #2
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	f040 80df 	bne.w	80076b2 <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f022 0208 	bic.w	r2, r2, #8
 8007502:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800750c:	6878      	ldr	r0, [r7, #4]
 800750e:	f004 ff11 	bl	800c334 <HAL_SD_TxCpltCallback>
}
 8007512:	e0ce      	b.n	80076b2 <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d008      	beq.n	8007534 <HAL_SD_IRQHandler+0x17c>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	f003 0308 	and.w	r3, r3, #8
 8007528:	2b00      	cmp	r3, #0
 800752a:	d003      	beq.n	8007534 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 ffa9 	bl	8008484 <SD_Write_IT>
 8007532:	e0be      	b.n	80076b2 <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800753a:	f240 233a 	movw	r3, #570	; 0x23a
 800753e:	4013      	ands	r3, r2
 8007540:	2b00      	cmp	r3, #0
 8007542:	f000 80b6 	beq.w	80076b2 <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800754c:	f003 0302 	and.w	r3, r3, #2
 8007550:	2b00      	cmp	r3, #0
 8007552:	d005      	beq.n	8007560 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	f043 0202 	orr.w	r2, r3, #2
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007566:	f003 0308 	and.w	r3, r3, #8
 800756a:	2b00      	cmp	r3, #0
 800756c:	d005      	beq.n	800757a <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007572:	f043 0208 	orr.w	r2, r3, #8
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007580:	f003 0320 	and.w	r3, r3, #32
 8007584:	2b00      	cmp	r3, #0
 8007586:	d005      	beq.n	8007594 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758c:	f043 0220 	orr.w	r2, r3, #32
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800759a:	f003 0310 	and.w	r3, r3, #16
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d005      	beq.n	80075ae <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075a6:	f043 0210 	orr.w	r2, r3, #16
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d005      	beq.n	80075c8 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c0:	f043 0208 	orr.w	r2, r3, #8
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f240 723a 	movw	r2, #1850	; 0x73a
 80075d0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	6812      	ldr	r2, [r2, #0]
 80075dc:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80075e0:	f023 0302 	bic.w	r3, r3, #2
 80075e4:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f002 fdca 	bl	800a184 <SDMMC_CmdStopTransfer>
 80075f0:	4602      	mov	r2, r0
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f6:	431a      	orrs	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f003 0308 	and.w	r3, r3, #8
 8007602:	2b00      	cmp	r3, #0
 8007604:	d00a      	beq.n	800761c <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2200      	movs	r2, #0
 8007612:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 f855 	bl	80076c4 <HAL_SD_ErrorCallback>
}
 800761a:	e04a      	b.n	80076b2 <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007622:	2b00      	cmp	r3, #0
 8007624:	d045      	beq.n	80076b2 <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f003 0310 	and.w	r3, r3, #16
 800762c:	2b00      	cmp	r3, #0
 800762e:	d104      	bne.n	800763a <HAL_SD_IRQHandler+0x282>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	f003 0320 	and.w	r3, r3, #32
 8007636:	2b00      	cmp	r3, #0
 8007638:	d011      	beq.n	800765e <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800763e:	4a1f      	ldr	r2, [pc, #124]	; (80076bc <HAL_SD_IRQHandler+0x304>)
 8007640:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007646:	4618      	mov	r0, r3
 8007648:	f7fc f96e 	bl	8003928 <HAL_DMA_Abort_IT>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d02f      	beq.n	80076b2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007656:	4618      	mov	r0, r3
 8007658:	f000 fb68 	bl	8007d2c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800765c:	e029      	b.n	80076b2 <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f003 0301 	and.w	r3, r3, #1
 8007664:	2b00      	cmp	r3, #0
 8007666:	d104      	bne.n	8007672 <HAL_SD_IRQHandler+0x2ba>
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b00      	cmp	r3, #0
 8007670:	d011      	beq.n	8007696 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007676:	4a12      	ldr	r2, [pc, #72]	; (80076c0 <HAL_SD_IRQHandler+0x308>)
 8007678:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767e:	4618      	mov	r0, r3
 8007680:	f7fc f952 	bl	8003928 <HAL_DMA_Abort_IT>
 8007684:	4603      	mov	r3, r0
 8007686:	2b00      	cmp	r3, #0
 8007688:	d013      	beq.n	80076b2 <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768e:	4618      	mov	r0, r3
 8007690:	f000 fb83 	bl	8007d9a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8007694:	e00d      	b.n	80076b2 <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2200      	movs	r2, #0
 800769a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2201      	movs	r2, #1
 80076a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f004 fe38 	bl	800c320 <HAL_SD_AbortCallback>
}
 80076b0:	e7ff      	b.n	80076b2 <HAL_SD_IRQHandler+0x2fa>
 80076b2:	bf00      	nop
 80076b4:	3710      	adds	r7, #16
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	08007d2d 	.word	0x08007d2d
 80076c0:	08007d9b 	.word	0x08007d9b

080076c4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076e6:	0f9b      	lsrs	r3, r3, #30
 80076e8:	b2da      	uxtb	r2, r3
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076f2:	0e9b      	lsrs	r3, r3, #26
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	f003 030f 	and.w	r3, r3, #15
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	683b      	ldr	r3, [r7, #0]
 80076fe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007704:	0e1b      	lsrs	r3, r3, #24
 8007706:	b2db      	uxtb	r3, r3
 8007708:	f003 0303 	and.w	r3, r3, #3
 800770c:	b2da      	uxtb	r2, r3
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007716:	0c1b      	lsrs	r3, r3, #16
 8007718:	b2da      	uxtb	r2, r3
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007722:	0a1b      	lsrs	r3, r3, #8
 8007724:	b2da      	uxtb	r2, r3
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800772e:	b2da      	uxtb	r2, r3
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007738:	0d1b      	lsrs	r3, r3, #20
 800773a:	b29a      	uxth	r2, r3
 800773c:	683b      	ldr	r3, [r7, #0]
 800773e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007744:	0c1b      	lsrs	r3, r3, #16
 8007746:	b2db      	uxtb	r3, r3
 8007748:	f003 030f 	and.w	r3, r3, #15
 800774c:	b2da      	uxtb	r2, r3
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007756:	0bdb      	lsrs	r3, r3, #15
 8007758:	b2db      	uxtb	r3, r3
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	b2da      	uxtb	r2, r3
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007768:	0b9b      	lsrs	r3, r3, #14
 800776a:	b2db      	uxtb	r3, r3
 800776c:	f003 0301 	and.w	r3, r3, #1
 8007770:	b2da      	uxtb	r2, r3
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800777a:	0b5b      	lsrs	r3, r3, #13
 800777c:	b2db      	uxtb	r3, r3
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	b2da      	uxtb	r2, r3
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800778c:	0b1b      	lsrs	r3, r3, #12
 800778e:	b2db      	uxtb	r3, r3
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	b2da      	uxtb	r2, r3
 8007796:	683b      	ldr	r3, [r7, #0]
 8007798:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	2200      	movs	r2, #0
 800779e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d163      	bne.n	8007870 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077ac:	009a      	lsls	r2, r3, #2
 80077ae:	f640 73fc 	movw	r3, #4092	; 0xffc
 80077b2:	4013      	ands	r3, r2
 80077b4:	687a      	ldr	r2, [r7, #4]
 80077b6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80077b8:	0f92      	lsrs	r2, r2, #30
 80077ba:	431a      	orrs	r2, r3
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077c4:	0edb      	lsrs	r3, r3, #27
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	f003 0307 	and.w	r3, r3, #7
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077d6:	0e1b      	lsrs	r3, r3, #24
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	f003 0307 	and.w	r3, r3, #7
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077e8:	0d5b      	lsrs	r3, r3, #21
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	f003 0307 	and.w	r3, r3, #7
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077fa:	0c9b      	lsrs	r3, r3, #18
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	f003 0307 	and.w	r3, r3, #7
 8007802:	b2da      	uxtb	r2, r3
 8007804:	683b      	ldr	r3, [r7, #0]
 8007806:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800780c:	0bdb      	lsrs	r3, r3, #15
 800780e:	b2db      	uxtb	r3, r3
 8007810:	f003 0307 	and.w	r3, r3, #7
 8007814:	b2da      	uxtb	r2, r3
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	1c5a      	adds	r2, r3, #1
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	7e1b      	ldrb	r3, [r3, #24]
 8007828:	b2db      	uxtb	r3, r3
 800782a:	f003 0307 	and.w	r3, r3, #7
 800782e:	3302      	adds	r3, #2
 8007830:	2201      	movs	r2, #1
 8007832:	fa02 f303 	lsl.w	r3, r2, r3
 8007836:	687a      	ldr	r2, [r7, #4]
 8007838:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800783a:	fb03 f202 	mul.w	r2, r3, r2
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	7a1b      	ldrb	r3, [r3, #8]
 8007846:	b2db      	uxtb	r3, r3
 8007848:	f003 030f 	and.w	r3, r3, #15
 800784c:	2201      	movs	r2, #1
 800784e:	409a      	lsls	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007858:	687a      	ldr	r2, [r7, #4]
 800785a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800785c:	0a52      	lsrs	r2, r2, #9
 800785e:	fb03 f202 	mul.w	r2, r3, r2
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	f44f 7200 	mov.w	r2, #512	; 0x200
 800786c:	661a      	str	r2, [r3, #96]	; 0x60
 800786e:	e031      	b.n	80078d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007874:	2b01      	cmp	r3, #1
 8007876:	d11d      	bne.n	80078b4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800787c:	041b      	lsls	r3, r3, #16
 800787e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007886:	0c1b      	lsrs	r3, r3, #16
 8007888:	431a      	orrs	r2, r3
 800788a:	683b      	ldr	r3, [r7, #0]
 800788c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	3301      	adds	r3, #1
 8007894:	029a      	lsls	r2, r3, #10
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078a8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	661a      	str	r2, [r3, #96]	; 0x60
 80078b2:	e00f      	b.n	80078d4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a58      	ldr	r2, [pc, #352]	; (8007a1c <HAL_SD_GetCardCSD+0x344>)
 80078ba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80078d0:	2301      	movs	r3, #1
 80078d2:	e09d      	b.n	8007a10 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078d8:	0b9b      	lsrs	r3, r3, #14
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	f003 0301 	and.w	r3, r3, #1
 80078e0:	b2da      	uxtb	r2, r3
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078ea:	09db      	lsrs	r3, r3, #7
 80078ec:	b2db      	uxtb	r3, r3
 80078ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078f2:	b2da      	uxtb	r2, r3
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007902:	b2da      	uxtb	r2, r3
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800790c:	0fdb      	lsrs	r3, r3, #31
 800790e:	b2da      	uxtb	r2, r3
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007918:	0f5b      	lsrs	r3, r3, #29
 800791a:	b2db      	uxtb	r3, r3
 800791c:	f003 0303 	and.w	r3, r3, #3
 8007920:	b2da      	uxtb	r2, r3
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800792a:	0e9b      	lsrs	r3, r3, #26
 800792c:	b2db      	uxtb	r3, r3
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	b2da      	uxtb	r2, r3
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800793c:	0d9b      	lsrs	r3, r3, #22
 800793e:	b2db      	uxtb	r3, r3
 8007940:	f003 030f 	and.w	r3, r3, #15
 8007944:	b2da      	uxtb	r2, r3
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800794e:	0d5b      	lsrs	r3, r3, #21
 8007950:	b2db      	uxtb	r3, r3
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	b2da      	uxtb	r2, r3
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2200      	movs	r2, #0
 8007962:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796a:	0c1b      	lsrs	r3, r3, #16
 800796c:	b2db      	uxtb	r3, r3
 800796e:	f003 0301 	and.w	r3, r3, #1
 8007972:	b2da      	uxtb	r2, r3
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797e:	0bdb      	lsrs	r3, r3, #15
 8007980:	b2db      	uxtb	r3, r3
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	b2da      	uxtb	r2, r3
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007992:	0b9b      	lsrs	r3, r3, #14
 8007994:	b2db      	uxtb	r3, r3
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	b2da      	uxtb	r2, r3
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a6:	0b5b      	lsrs	r3, r3, #13
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ba:	0b1b      	lsrs	r3, r3, #12
 80079bc:	b2db      	uxtb	r3, r3
 80079be:	f003 0301 	and.w	r3, r3, #1
 80079c2:	b2da      	uxtb	r2, r3
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ce:	0a9b      	lsrs	r3, r3, #10
 80079d0:	b2db      	uxtb	r3, r3
 80079d2:	f003 0303 	and.w	r3, r3, #3
 80079d6:	b2da      	uxtb	r2, r3
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e2:	0a1b      	lsrs	r3, r3, #8
 80079e4:	b2db      	uxtb	r3, r3
 80079e6:	f003 0303 	and.w	r3, r3, #3
 80079ea:	b2da      	uxtb	r2, r3
 80079ec:	683b      	ldr	r3, [r7, #0]
 80079ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079f6:	085b      	lsrs	r3, r3, #1
 80079f8:	b2db      	uxtb	r3, r3
 80079fa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079fe:	b2da      	uxtb	r2, r3
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	2201      	movs	r2, #1
 8007a0a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007a0e:	2300      	movs	r3, #0
}
 8007a10:	4618      	mov	r0, r3
 8007a12:	370c      	adds	r7, #12
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	004005ff 	.word	0x004005ff

08007a20 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
 8007a28:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a2e:	683b      	ldr	r3, [r7, #0]
 8007a30:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007a66:	683b      	ldr	r3, [r7, #0]
 8007a68:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007a78:	b5b0      	push	{r4, r5, r7, lr}
 8007a7a:	b08e      	sub	sp, #56	; 0x38
 8007a7c:	af04      	add	r7, sp, #16
 8007a7e:	6078      	str	r0, [r7, #4]
 8007a80:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007a82:	2300      	movs	r3, #0
 8007a84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2203      	movs	r2, #3
 8007a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a94:	2b03      	cmp	r3, #3
 8007a96:	d02e      	beq.n	8007af6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a9e:	d106      	bne.n	8007aae <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aa4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	639a      	str	r2, [r3, #56]	; 0x38
 8007aac:	e029      	b.n	8007b02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ab4:	d10a      	bne.n	8007acc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007ab6:	6878      	ldr	r0, [r7, #4]
 8007ab8:	f000 fb2a 	bl	8008110 <SD_WideBus_Enable>
 8007abc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	431a      	orrs	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	639a      	str	r2, [r3, #56]	; 0x38
 8007aca:	e01a      	b.n	8007b02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007acc:	683b      	ldr	r3, [r7, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10a      	bne.n	8007ae8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f000 fb67 	bl	80081a6 <SD_WideBus_Disable>
 8007ad8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ade:	6a3b      	ldr	r3, [r7, #32]
 8007ae0:	431a      	orrs	r2, r3
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	639a      	str	r2, [r3, #56]	; 0x38
 8007ae6:	e00c      	b.n	8007b02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007aec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	639a      	str	r2, [r3, #56]	; 0x38
 8007af4:	e005      	b.n	8007b02 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d00b      	beq.n	8007b22 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a26      	ldr	r2, [pc, #152]	; (8007ba8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007b10:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2201      	movs	r2, #1
 8007b16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007b1a:	2301      	movs	r3, #1
 8007b1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b20:	e01f      	b.n	8007b62 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	68db      	ldr	r3, [r3, #12]
 8007b32:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	695b      	ldr	r3, [r3, #20]
 8007b3c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	699b      	ldr	r3, [r3, #24]
 8007b42:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681d      	ldr	r5, [r3, #0]
 8007b48:	466c      	mov	r4, sp
 8007b4a:	f107 0314 	add.w	r3, r7, #20
 8007b4e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007b52:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007b56:	f107 0308 	add.w	r3, r7, #8
 8007b5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007b5c:	4628      	mov	r0, r5
 8007b5e:	f002 f98b 	bl	8009e78 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	f002 fa5f 	bl	800a02e <SDMMC_CmdBlockLength>
 8007b70:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b72:	6a3b      	ldr	r3, [r7, #32]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00c      	beq.n	8007b92 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a0a      	ldr	r2, [pc, #40]	; (8007ba8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007b7e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b84:	6a3b      	ldr	r3, [r7, #32]
 8007b86:	431a      	orrs	r2, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007b8c:	2301      	movs	r3, #1
 8007b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007b9a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007b9e:	4618      	mov	r0, r3
 8007ba0:	3728      	adds	r7, #40	; 0x28
 8007ba2:	46bd      	mov	sp, r7
 8007ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8007ba6:	bf00      	nop
 8007ba8:	004005ff 	.word	0x004005ff

08007bac <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b086      	sub	sp, #24
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007bb8:	f107 030c 	add.w	r3, r7, #12
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fa7e 	bl	80080c0 <SD_SendStatus>
 8007bc4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d005      	beq.n	8007bd8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	431a      	orrs	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	0a5b      	lsrs	r3, r3, #9
 8007bdc:	f003 030f 	and.w	r3, r3, #15
 8007be0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007be2:	693b      	ldr	r3, [r7, #16]
}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3718      	adds	r7, #24
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c08:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007c0a:	bf00      	nop
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr

08007c16 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c16:	b580      	push	{r7, lr}
 8007c18:	b084      	sub	sp, #16
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c22:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c28:	2b82      	cmp	r3, #130	; 0x82
 8007c2a:	d111      	bne.n	8007c50 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4618      	mov	r0, r3
 8007c32:	f002 faa7 	bl	800a184 <SDMMC_CmdStopTransfer>
 8007c36:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d008      	beq.n	8007c50 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	431a      	orrs	r2, r3
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007c4a:	68f8      	ldr	r0, [r7, #12]
 8007c4c:	f7ff fd3a 	bl	80076c4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f022 0208 	bic.w	r2, r2, #8
 8007c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c68:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2201      	movs	r2, #1
 8007c6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	2200      	movs	r2, #0
 8007c76:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007c78:	68f8      	ldr	r0, [r7, #12]
 8007c7a:	f004 fb65 	bl	800c348 <HAL_SD_RxCpltCallback>
#endif
}
 8007c7e:	bf00      	nop
 8007c80:	3710      	adds	r7, #16
 8007c82:	46bd      	mov	sp, r7
 8007c84:	bd80      	pop	{r7, pc}
	...

08007c88 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b086      	sub	sp, #24
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c94:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f7fb fff2 	bl	8003c80 <HAL_DMA_GetError>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d03e      	beq.n	8007d20 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ca8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cb0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007cb2:	693b      	ldr	r3, [r7, #16]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d002      	beq.n	8007cbe <SD_DMAError+0x36>
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d12d      	bne.n	8007d1a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007cbe:	697b      	ldr	r3, [r7, #20]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a19      	ldr	r2, [pc, #100]	; (8007d28 <SD_DMAError+0xa0>)
 8007cc4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007cd4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cda:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007ce2:	6978      	ldr	r0, [r7, #20]
 8007ce4:	f7ff ff62 	bl	8007bac <HAL_SD_GetCardState>
 8007ce8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	2b06      	cmp	r3, #6
 8007cee:	d002      	beq.n	8007cf6 <SD_DMAError+0x6e>
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	2b05      	cmp	r3, #5
 8007cf4:	d10a      	bne.n	8007d0c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f002 fa42 	bl	800a184 <SDMMC_CmdStopTransfer>
 8007d00:	4602      	mov	r2, r0
 8007d02:	697b      	ldr	r3, [r7, #20]
 8007d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d06:	431a      	orrs	r2, r3
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	2200      	movs	r2, #0
 8007d18:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007d1a:	6978      	ldr	r0, [r7, #20]
 8007d1c:	f7ff fcd2 	bl	80076c4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007d20:	bf00      	nop
 8007d22:	3718      	adds	r7, #24
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	004005ff 	.word	0x004005ff

08007d2c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b084      	sub	sp, #16
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d38:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f240 523a 	movw	r2, #1338	; 0x53a
 8007d42:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007d44:	68f8      	ldr	r0, [r7, #12]
 8007d46:	f7ff ff31 	bl	8007bac <HAL_SD_GetCardState>
 8007d4a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	2200      	movs	r2, #0
 8007d58:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	2b06      	cmp	r3, #6
 8007d5e:	d002      	beq.n	8007d66 <SD_DMATxAbort+0x3a>
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	2b05      	cmp	r3, #5
 8007d64:	d10a      	bne.n	8007d7c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f002 fa0a 	bl	800a184 <SDMMC_CmdStopTransfer>
 8007d70:	4602      	mov	r2, r0
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d76:	431a      	orrs	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d103      	bne.n	8007d8c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007d84:	68f8      	ldr	r0, [r7, #12]
 8007d86:	f004 facb 	bl	800c320 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007d8a:	e002      	b.n	8007d92 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f7ff fc99 	bl	80076c4 <HAL_SD_ErrorCallback>
}
 8007d92:	bf00      	nop
 8007d94:	3710      	adds	r7, #16
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b084      	sub	sp, #16
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f240 523a 	movw	r2, #1338	; 0x53a
 8007db0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007db2:	68f8      	ldr	r0, [r7, #12]
 8007db4:	f7ff fefa 	bl	8007bac <HAL_SD_GetCardState>
 8007db8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2201      	movs	r2, #1
 8007dbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	2b06      	cmp	r3, #6
 8007dcc:	d002      	beq.n	8007dd4 <SD_DMARxAbort+0x3a>
 8007dce:	68bb      	ldr	r3, [r7, #8]
 8007dd0:	2b05      	cmp	r3, #5
 8007dd2:	d10a      	bne.n	8007dea <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	4618      	mov	r0, r3
 8007dda:	f002 f9d3 	bl	800a184 <SDMMC_CmdStopTransfer>
 8007dde:	4602      	mov	r2, r0
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de4:	431a      	orrs	r2, r3
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d103      	bne.n	8007dfa <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007df2:	68f8      	ldr	r0, [r7, #12]
 8007df4:	f004 fa94 	bl	800c320 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007df8:	e002      	b.n	8007e00 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007dfa:	68f8      	ldr	r0, [r7, #12]
 8007dfc:	f7ff fc62 	bl	80076c4 <HAL_SD_ErrorCallback>
}
 8007e00:	bf00      	nop
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007e08:	b5b0      	push	{r4, r5, r7, lr}
 8007e0a:	b094      	sub	sp, #80	; 0x50
 8007e0c:	af04      	add	r7, sp, #16
 8007e0e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007e10:	2301      	movs	r3, #1
 8007e12:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f002 f884 	bl	8009f26 <SDIO_GetPowerState>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d102      	bne.n	8007e2a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007e24:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007e28:	e0b8      	b.n	8007f9c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e2e:	2b03      	cmp	r3, #3
 8007e30:	d02f      	beq.n	8007e92 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	4618      	mov	r0, r3
 8007e38:	f002 faae 	bl	800a398 <SDMMC_CmdSendCID>
 8007e3c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d001      	beq.n	8007e48 <SD_InitCard+0x40>
    {
      return errorstate;
 8007e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e46:	e0a9      	b.n	8007f9c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	2100      	movs	r1, #0
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f002 f8ae 	bl	8009fb0 <SDIO_GetResponse>
 8007e54:	4602      	mov	r2, r0
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	2104      	movs	r1, #4
 8007e60:	4618      	mov	r0, r3
 8007e62:	f002 f8a5 	bl	8009fb0 <SDIO_GetResponse>
 8007e66:	4602      	mov	r2, r0
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	2108      	movs	r1, #8
 8007e72:	4618      	mov	r0, r3
 8007e74:	f002 f89c 	bl	8009fb0 <SDIO_GetResponse>
 8007e78:	4602      	mov	r2, r0
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	210c      	movs	r1, #12
 8007e84:	4618      	mov	r0, r3
 8007e86:	f002 f893 	bl	8009fb0 <SDIO_GetResponse>
 8007e8a:	4602      	mov	r2, r0
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	d00d      	beq.n	8007eb6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	f107 020e 	add.w	r2, r7, #14
 8007ea2:	4611      	mov	r1, r2
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f002 fab4 	bl	800a412 <SDMMC_CmdSetRelAdd>
 8007eaa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007eac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d001      	beq.n	8007eb6 <SD_InitCard+0xae>
    {
      return errorstate;
 8007eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007eb4:	e072      	b.n	8007f9c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eba:	2b03      	cmp	r3, #3
 8007ebc:	d036      	beq.n	8007f2c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007ebe:	89fb      	ldrh	r3, [r7, #14]
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ece:	041b      	lsls	r3, r3, #16
 8007ed0:	4619      	mov	r1, r3
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	f002 fa7e 	bl	800a3d4 <SDMMC_CmdSendCSD>
 8007ed8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d001      	beq.n	8007ee4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ee2:	e05b      	b.n	8007f9c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2100      	movs	r1, #0
 8007eea:	4618      	mov	r0, r3
 8007eec:	f002 f860 	bl	8009fb0 <SDIO_GetResponse>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2104      	movs	r1, #4
 8007efc:	4618      	mov	r0, r3
 8007efe:	f002 f857 	bl	8009fb0 <SDIO_GetResponse>
 8007f02:	4602      	mov	r2, r0
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2108      	movs	r1, #8
 8007f0e:	4618      	mov	r0, r3
 8007f10:	f002 f84e 	bl	8009fb0 <SDIO_GetResponse>
 8007f14:	4602      	mov	r2, r0
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	210c      	movs	r1, #12
 8007f20:	4618      	mov	r0, r3
 8007f22:	f002 f845 	bl	8009fb0 <SDIO_GetResponse>
 8007f26:	4602      	mov	r2, r0
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	2104      	movs	r1, #4
 8007f32:	4618      	mov	r0, r3
 8007f34:	f002 f83c 	bl	8009fb0 <SDIO_GetResponse>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	0d1a      	lsrs	r2, r3, #20
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007f40:	f107 0310 	add.w	r3, r7, #16
 8007f44:	4619      	mov	r1, r3
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7ff fbc6 	bl	80076d8 <HAL_SD_GetCardCSD>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d002      	beq.n	8007f58 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007f52:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007f56:	e021      	b.n	8007f9c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6819      	ldr	r1, [r3, #0]
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f60:	041b      	lsls	r3, r3, #16
 8007f62:	2200      	movs	r2, #0
 8007f64:	461c      	mov	r4, r3
 8007f66:	4615      	mov	r5, r2
 8007f68:	4622      	mov	r2, r4
 8007f6a:	462b      	mov	r3, r5
 8007f6c:	4608      	mov	r0, r1
 8007f6e:	f002 f92b 	bl	800a1c8 <SDMMC_CmdSelDesel>
 8007f72:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <SD_InitCard+0x176>
  {
    return errorstate;
 8007f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f7c:	e00e      	b.n	8007f9c <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681d      	ldr	r5, [r3, #0]
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	466c      	mov	r4, sp
 8007f86:	f103 0210 	add.w	r2, r3, #16
 8007f8a:	ca07      	ldmia	r2, {r0, r1, r2}
 8007f8c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007f90:	3304      	adds	r3, #4
 8007f92:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007f94:	4628      	mov	r0, r5
 8007f96:	f001 ff6f 	bl	8009e78 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3740      	adds	r7, #64	; 0x40
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bdb0      	pop	{r4, r5, r7, pc}

08007fa4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fac:	2300      	movs	r3, #0
 8007fae:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	617b      	str	r3, [r7, #20]
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f002 f926 	bl	800a20e <SDMMC_CmdGoIdleState>
 8007fc2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d001      	beq.n	8007fce <SD_PowerON+0x2a>
  {
    return errorstate;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	e072      	b.n	80080b4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f002 f939 	bl	800a24a <SDMMC_CmdOperCond>
 8007fd8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d00d      	beq.n	8007ffc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4618      	mov	r0, r3
 8007fec:	f002 f90f 	bl	800a20e <SDMMC_CmdGoIdleState>
 8007ff0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d004      	beq.n	8008002 <SD_PowerON+0x5e>
    {
      return errorstate;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	e05b      	b.n	80080b4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008006:	2b01      	cmp	r3, #1
 8008008:	d137      	bne.n	800807a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	2100      	movs	r1, #0
 8008010:	4618      	mov	r0, r3
 8008012:	f002 f939 	bl	800a288 <SDMMC_CmdAppCommand>
 8008016:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d02d      	beq.n	800807a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800801e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008022:	e047      	b.n	80080b4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	2100      	movs	r1, #0
 800802a:	4618      	mov	r0, r3
 800802c:	f002 f92c 	bl	800a288 <SDMMC_CmdAppCommand>
 8008030:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d001      	beq.n	800803c <SD_PowerON+0x98>
    {
      return errorstate;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	e03b      	b.n	80080b4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	491e      	ldr	r1, [pc, #120]	; (80080bc <SD_PowerON+0x118>)
 8008042:	4618      	mov	r0, r3
 8008044:	f002 f942 	bl	800a2cc <SDMMC_CmdAppOperCommand>
 8008048:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d002      	beq.n	8008056 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008050:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008054:	e02e      	b.n	80080b4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2100      	movs	r1, #0
 800805c:	4618      	mov	r0, r3
 800805e:	f001 ffa7 	bl	8009fb0 <SDIO_GetResponse>
 8008062:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008064:	697b      	ldr	r3, [r7, #20]
 8008066:	0fdb      	lsrs	r3, r3, #31
 8008068:	2b01      	cmp	r3, #1
 800806a:	d101      	bne.n	8008070 <SD_PowerON+0xcc>
 800806c:	2301      	movs	r3, #1
 800806e:	e000      	b.n	8008072 <SD_PowerON+0xce>
 8008070:	2300      	movs	r3, #0
 8008072:	613b      	str	r3, [r7, #16]

    count++;
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	3301      	adds	r3, #1
 8008078:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800807a:	68bb      	ldr	r3, [r7, #8]
 800807c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008080:	4293      	cmp	r3, r2
 8008082:	d802      	bhi.n	800808a <SD_PowerON+0xe6>
 8008084:	693b      	ldr	r3, [r7, #16]
 8008086:	2b00      	cmp	r3, #0
 8008088:	d0cc      	beq.n	8008024 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008090:	4293      	cmp	r3, r2
 8008092:	d902      	bls.n	800809a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008094:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008098:	e00c      	b.n	80080b4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	645a      	str	r2, [r3, #68]	; 0x44
 80080aa:	e002      	b.n	80080b2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80080b2:	2300      	movs	r3, #0
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3718      	adds	r7, #24
 80080b8:	46bd      	mov	sp, r7
 80080ba:	bd80      	pop	{r7, pc}
 80080bc:	c1100000 	.word	0xc1100000

080080c0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b084      	sub	sp, #16
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
 80080c8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d102      	bne.n	80080d6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80080d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80080d4:	e018      	b.n	8008108 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681a      	ldr	r2, [r3, #0]
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080de:	041b      	lsls	r3, r3, #16
 80080e0:	4619      	mov	r1, r3
 80080e2:	4610      	mov	r0, r2
 80080e4:	f002 f9b6 	bl	800a454 <SDMMC_CmdSendStatus>
 80080e8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d001      	beq.n	80080f4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	e009      	b.n	8008108 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	2100      	movs	r1, #0
 80080fa:	4618      	mov	r0, r3
 80080fc:	f001 ff58 	bl	8009fb0 <SDIO_GetResponse>
 8008100:	4602      	mov	r2, r0
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3710      	adds	r7, #16
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b086      	sub	sp, #24
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008118:	2300      	movs	r3, #0
 800811a:	60fb      	str	r3, [r7, #12]
 800811c:	2300      	movs	r3, #0
 800811e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	2100      	movs	r1, #0
 8008126:	4618      	mov	r0, r3
 8008128:	f001 ff42 	bl	8009fb0 <SDIO_GetResponse>
 800812c:	4603      	mov	r3, r0
 800812e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008132:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008136:	d102      	bne.n	800813e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008138:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800813c:	e02f      	b.n	800819e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800813e:	f107 030c 	add.w	r3, r7, #12
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f879 	bl	800823c <SD_FindSCR>
 800814a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800814c:	697b      	ldr	r3, [r7, #20]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d001      	beq.n	8008156 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8008152:	697b      	ldr	r3, [r7, #20]
 8008154:	e023      	b.n	800819e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008156:	693b      	ldr	r3, [r7, #16]
 8008158:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d01c      	beq.n	800819a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681a      	ldr	r2, [r3, #0]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008168:	041b      	lsls	r3, r3, #16
 800816a:	4619      	mov	r1, r3
 800816c:	4610      	mov	r0, r2
 800816e:	f002 f88b 	bl	800a288 <SDMMC_CmdAppCommand>
 8008172:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008174:	697b      	ldr	r3, [r7, #20]
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	e00f      	b.n	800819e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2102      	movs	r1, #2
 8008184:	4618      	mov	r0, r3
 8008186:	f002 f8c4 	bl	800a312 <SDMMC_CmdBusWidth>
 800818a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	e003      	b.n	800819e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008196:	2300      	movs	r3, #0
 8008198:	e001      	b.n	800819e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800819a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800819e:	4618      	mov	r0, r3
 80081a0:	3718      	adds	r7, #24
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}

080081a6 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80081a6:	b580      	push	{r7, lr}
 80081a8:	b086      	sub	sp, #24
 80081aa:	af00      	add	r7, sp, #0
 80081ac:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80081ae:	2300      	movs	r3, #0
 80081b0:	60fb      	str	r3, [r7, #12]
 80081b2:	2300      	movs	r3, #0
 80081b4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2100      	movs	r1, #0
 80081bc:	4618      	mov	r0, r3
 80081be:	f001 fef7 	bl	8009fb0 <SDIO_GetResponse>
 80081c2:	4603      	mov	r3, r0
 80081c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081c8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80081cc:	d102      	bne.n	80081d4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80081ce:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081d2:	e02f      	b.n	8008234 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80081d4:	f107 030c 	add.w	r3, r7, #12
 80081d8:	4619      	mov	r1, r3
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 f82e 	bl	800823c <SD_FindSCR>
 80081e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d001      	beq.n	80081ec <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	e023      	b.n	8008234 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d01c      	beq.n	8008230 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081fe:	041b      	lsls	r3, r3, #16
 8008200:	4619      	mov	r1, r3
 8008202:	4610      	mov	r0, r2
 8008204:	f002 f840 	bl	800a288 <SDMMC_CmdAppCommand>
 8008208:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	e00f      	b.n	8008234 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2100      	movs	r1, #0
 800821a:	4618      	mov	r0, r3
 800821c:	f002 f879 	bl	800a312 <SDMMC_CmdBusWidth>
 8008220:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d001      	beq.n	800822c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	e003      	b.n	8008234 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800822c:	2300      	movs	r3, #0
 800822e:	e001      	b.n	8008234 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008230:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008234:	4618      	mov	r0, r3
 8008236:	3718      	adds	r7, #24
 8008238:	46bd      	mov	sp, r7
 800823a:	bd80      	pop	{r7, pc}

0800823c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800823c:	b590      	push	{r4, r7, lr}
 800823e:	b08f      	sub	sp, #60	; 0x3c
 8008240:	af00      	add	r7, sp, #0
 8008242:	6078      	str	r0, [r7, #4]
 8008244:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008246:	f7fb f8b7 	bl	80033b8 <HAL_GetTick>
 800824a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800824c:	2300      	movs	r3, #0
 800824e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8008250:	2300      	movs	r3, #0
 8008252:	60bb      	str	r3, [r7, #8]
 8008254:	2300      	movs	r3, #0
 8008256:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	2108      	movs	r1, #8
 8008262:	4618      	mov	r0, r3
 8008264:	f001 fee3 	bl	800a02e <SDMMC_CmdBlockLength>
 8008268:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800826a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800826c:	2b00      	cmp	r3, #0
 800826e:	d001      	beq.n	8008274 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008272:	e0b2      	b.n	80083da <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800827c:	041b      	lsls	r3, r3, #16
 800827e:	4619      	mov	r1, r3
 8008280:	4610      	mov	r0, r2
 8008282:	f002 f801 	bl	800a288 <SDMMC_CmdAppCommand>
 8008286:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008288:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828a:	2b00      	cmp	r3, #0
 800828c:	d001      	beq.n	8008292 <SD_FindSCR+0x56>
  {
    return errorstate;
 800828e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008290:	e0a3      	b.n	80083da <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008292:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008296:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8008298:	2308      	movs	r3, #8
 800829a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 800829c:	2330      	movs	r3, #48	; 0x30
 800829e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80082a0:	2302      	movs	r3, #2
 80082a2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80082a4:	2300      	movs	r3, #0
 80082a6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80082a8:	2301      	movs	r3, #1
 80082aa:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f107 0210 	add.w	r2, r7, #16
 80082b4:	4611      	mov	r1, r2
 80082b6:	4618      	mov	r0, r3
 80082b8:	f001 fe8d 	bl	8009fd6 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	4618      	mov	r0, r3
 80082c2:	f002 f848 	bl	800a356 <SDMMC_CmdSendSCR>
 80082c6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80082c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d02a      	beq.n	8008324 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80082ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082d0:	e083      	b.n	80083da <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00f      	beq.n	8008300 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	6819      	ldr	r1, [r3, #0]
 80082e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	f107 0208 	add.w	r2, r7, #8
 80082ec:	18d4      	adds	r4, r2, r3
 80082ee:	4608      	mov	r0, r1
 80082f0:	f001 fded 	bl	8009ece <SDIO_ReadFIFO>
 80082f4:	4603      	mov	r3, r0
 80082f6:	6023      	str	r3, [r4, #0]
      index++;
 80082f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082fa:	3301      	adds	r3, #1
 80082fc:	637b      	str	r3, [r7, #52]	; 0x34
 80082fe:	e006      	b.n	800830e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008306:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800830a:	2b00      	cmp	r3, #0
 800830c:	d012      	beq.n	8008334 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800830e:	f7fb f853 	bl	80033b8 <HAL_GetTick>
 8008312:	4602      	mov	r2, r0
 8008314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008316:	1ad3      	subs	r3, r2, r3
 8008318:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800831c:	d102      	bne.n	8008324 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800831e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008322:	e05a      	b.n	80083da <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800832a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800832e:	2b00      	cmp	r3, #0
 8008330:	d0cf      	beq.n	80082d2 <SD_FindSCR+0x96>
 8008332:	e000      	b.n	8008336 <SD_FindSCR+0xfa>
      break;
 8008334:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800833c:	f003 0308 	and.w	r3, r3, #8
 8008340:	2b00      	cmp	r3, #0
 8008342:	d005      	beq.n	8008350 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	2208      	movs	r2, #8
 800834a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800834c:	2308      	movs	r3, #8
 800834e:	e044      	b.n	80083da <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008356:	f003 0302 	and.w	r3, r3, #2
 800835a:	2b00      	cmp	r3, #0
 800835c:	d005      	beq.n	800836a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	2202      	movs	r2, #2
 8008364:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008366:	2302      	movs	r3, #2
 8008368:	e037      	b.n	80083da <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008370:	f003 0320 	and.w	r3, r3, #32
 8008374:	2b00      	cmp	r3, #0
 8008376:	d005      	beq.n	8008384 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2220      	movs	r2, #32
 800837e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8008380:	2320      	movs	r3, #32
 8008382:	e02a      	b.n	80083da <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	f240 523a 	movw	r2, #1338	; 0x53a
 800838c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	061a      	lsls	r2, r3, #24
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	021b      	lsls	r3, r3, #8
 8008396:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800839a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	0a1b      	lsrs	r3, r3, #8
 80083a0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80083a4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	0e1b      	lsrs	r3, r3, #24
 80083aa:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80083ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ae:	601a      	str	r2, [r3, #0]
    scr++;
 80083b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083b2:	3304      	adds	r3, #4
 80083b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	061a      	lsls	r2, r3, #24
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	021b      	lsls	r3, r3, #8
 80083be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80083c2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	0a1b      	lsrs	r3, r3, #8
 80083c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80083cc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	0e1b      	lsrs	r3, r3, #24
 80083d2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80083d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083d6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80083d8:	2300      	movs	r3, #0
}
 80083da:	4618      	mov	r0, r3
 80083dc:	373c      	adds	r7, #60	; 0x3c
 80083de:	46bd      	mov	sp, r7
 80083e0:	bd90      	pop	{r4, r7, pc}

080083e2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80083e2:	b580      	push	{r7, lr}
 80083e4:	b086      	sub	sp, #24
 80083e6:	af00      	add	r7, sp, #0
 80083e8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083ee:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083f4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80083f6:	693b      	ldr	r3, [r7, #16]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d03f      	beq.n	800847c <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80083fc:	2300      	movs	r3, #0
 80083fe:	617b      	str	r3, [r7, #20]
 8008400:	e033      	b.n	800846a <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4618      	mov	r0, r3
 8008408:	f001 fd61 	bl	8009ece <SDIO_ReadFIFO>
 800840c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	b2da      	uxtb	r2, r3
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	3301      	adds	r3, #1
 800841a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	3b01      	subs	r3, #1
 8008420:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	0a1b      	lsrs	r3, r3, #8
 8008426:	b2da      	uxtb	r2, r3
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	3301      	adds	r3, #1
 8008430:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008432:	693b      	ldr	r3, [r7, #16]
 8008434:	3b01      	subs	r3, #1
 8008436:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	0c1b      	lsrs	r3, r3, #16
 800843c:	b2da      	uxtb	r2, r3
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	3301      	adds	r3, #1
 8008446:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	3b01      	subs	r3, #1
 800844c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	0e1b      	lsrs	r3, r3, #24
 8008452:	b2da      	uxtb	r2, r3
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	3301      	adds	r3, #1
 800845c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	3b01      	subs	r3, #1
 8008462:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	3301      	adds	r3, #1
 8008468:	617b      	str	r3, [r7, #20]
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	2b07      	cmp	r3, #7
 800846e:	d9c8      	bls.n	8008402 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800847c:	bf00      	nop
 800847e:	3718      	adds	r7, #24
 8008480:	46bd      	mov	sp, r7
 8008482:	bd80      	pop	{r7, pc}

08008484 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b086      	sub	sp, #24
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a1b      	ldr	r3, [r3, #32]
 8008490:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008496:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d043      	beq.n	8008526 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800849e:	2300      	movs	r3, #0
 80084a0:	617b      	str	r3, [r7, #20]
 80084a2:	e037      	b.n	8008514 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	781b      	ldrb	r3, [r3, #0]
 80084a8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3301      	adds	r3, #1
 80084ae:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084b0:	693b      	ldr	r3, [r7, #16]
 80084b2:	3b01      	subs	r3, #1
 80084b4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	781b      	ldrb	r3, [r3, #0]
 80084ba:	021a      	lsls	r2, r3, #8
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	4313      	orrs	r3, r2
 80084c0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	3301      	adds	r3, #1
 80084c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084c8:	693b      	ldr	r3, [r7, #16]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	041a      	lsls	r2, r3, #16
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	4313      	orrs	r3, r2
 80084d8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3301      	adds	r3, #1
 80084de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	3b01      	subs	r3, #1
 80084e4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	061a      	lsls	r2, r3, #24
 80084ec:	68bb      	ldr	r3, [r7, #8]
 80084ee:	4313      	orrs	r3, r2
 80084f0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	3301      	adds	r3, #1
 80084f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	3b01      	subs	r3, #1
 80084fc:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f107 0208 	add.w	r2, r7, #8
 8008506:	4611      	mov	r1, r2
 8008508:	4618      	mov	r0, r3
 800850a:	f001 fced 	bl	8009ee8 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	3301      	adds	r3, #1
 8008512:	617b      	str	r3, [r7, #20]
 8008514:	697b      	ldr	r3, [r7, #20]
 8008516:	2b07      	cmp	r3, #7
 8008518:	d9c4      	bls.n	80084a4 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	693a      	ldr	r2, [r7, #16]
 8008524:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008526:	bf00      	nop
 8008528:	3718      	adds	r7, #24
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b082      	sub	sp, #8
 8008532:	af00      	add	r7, sp, #0
 8008534:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d101      	bne.n	8008540 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	e041      	b.n	80085c4 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008546:	b2db      	uxtb	r3, r3
 8008548:	2b00      	cmp	r3, #0
 800854a:	d106      	bne.n	800855a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2200      	movs	r2, #0
 8008550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008554:	6878      	ldr	r0, [r7, #4]
 8008556:	f7fa fceb 	bl	8002f30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2202      	movs	r2, #2
 800855e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681a      	ldr	r2, [r3, #0]
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	3304      	adds	r3, #4
 800856a:	4619      	mov	r1, r3
 800856c:	4610      	mov	r0, r2
 800856e:	f000 fa95 	bl	8008a9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	2201      	movs	r2, #1
 8008576:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2201      	movs	r2, #1
 800857e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2201      	movs	r2, #1
 800858e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2201      	movs	r2, #1
 8008596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2201      	movs	r2, #1
 80085a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	2201      	movs	r2, #1
 80085ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2201      	movs	r2, #1
 80085b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2201      	movs	r2, #1
 80085be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3708      	adds	r7, #8
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80085cc:	b480      	push	{r7}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085da:	b2db      	uxtb	r3, r3
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d001      	beq.n	80085e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80085e0:	2301      	movs	r3, #1
 80085e2:	e04e      	b.n	8008682 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2202      	movs	r2, #2
 80085e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	68da      	ldr	r2, [r3, #12]
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f042 0201 	orr.w	r2, r2, #1
 80085fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a23      	ldr	r2, [pc, #140]	; (8008690 <HAL_TIM_Base_Start_IT+0xc4>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d022      	beq.n	800864c <HAL_TIM_Base_Start_IT+0x80>
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800860e:	d01d      	beq.n	800864c <HAL_TIM_Base_Start_IT+0x80>
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4a1f      	ldr	r2, [pc, #124]	; (8008694 <HAL_TIM_Base_Start_IT+0xc8>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d018      	beq.n	800864c <HAL_TIM_Base_Start_IT+0x80>
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4a1e      	ldr	r2, [pc, #120]	; (8008698 <HAL_TIM_Base_Start_IT+0xcc>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d013      	beq.n	800864c <HAL_TIM_Base_Start_IT+0x80>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	4a1c      	ldr	r2, [pc, #112]	; (800869c <HAL_TIM_Base_Start_IT+0xd0>)
 800862a:	4293      	cmp	r3, r2
 800862c:	d00e      	beq.n	800864c <HAL_TIM_Base_Start_IT+0x80>
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a1b      	ldr	r2, [pc, #108]	; (80086a0 <HAL_TIM_Base_Start_IT+0xd4>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d009      	beq.n	800864c <HAL_TIM_Base_Start_IT+0x80>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	4a19      	ldr	r2, [pc, #100]	; (80086a4 <HAL_TIM_Base_Start_IT+0xd8>)
 800863e:	4293      	cmp	r3, r2
 8008640:	d004      	beq.n	800864c <HAL_TIM_Base_Start_IT+0x80>
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4a18      	ldr	r2, [pc, #96]	; (80086a8 <HAL_TIM_Base_Start_IT+0xdc>)
 8008648:	4293      	cmp	r3, r2
 800864a:	d111      	bne.n	8008670 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f003 0307 	and.w	r3, r3, #7
 8008656:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b06      	cmp	r3, #6
 800865c:	d010      	beq.n	8008680 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f042 0201 	orr.w	r2, r2, #1
 800866c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800866e:	e007      	b.n	8008680 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	f042 0201 	orr.w	r2, r2, #1
 800867e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008680:	2300      	movs	r3, #0
}
 8008682:	4618      	mov	r0, r3
 8008684:	3714      	adds	r7, #20
 8008686:	46bd      	mov	sp, r7
 8008688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868c:	4770      	bx	lr
 800868e:	bf00      	nop
 8008690:	40010000 	.word	0x40010000
 8008694:	40000400 	.word	0x40000400
 8008698:	40000800 	.word	0x40000800
 800869c:	40000c00 	.word	0x40000c00
 80086a0:	40010400 	.word	0x40010400
 80086a4:	40014000 	.word	0x40014000
 80086a8:	40001800 	.word	0x40001800

080086ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b082      	sub	sp, #8
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	691b      	ldr	r3, [r3, #16]
 80086ba:	f003 0302 	and.w	r3, r3, #2
 80086be:	2b02      	cmp	r3, #2
 80086c0:	d122      	bne.n	8008708 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	f003 0302 	and.w	r3, r3, #2
 80086cc:	2b02      	cmp	r3, #2
 80086ce:	d11b      	bne.n	8008708 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f06f 0202 	mvn.w	r2, #2
 80086d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	f003 0303 	and.w	r3, r3, #3
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d003      	beq.n	80086f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f000 f9b5 	bl	8008a5e <HAL_TIM_IC_CaptureCallback>
 80086f4:	e005      	b.n	8008702 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f000 f9a7 	bl	8008a4a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f000 f9b8 	bl	8008a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	691b      	ldr	r3, [r3, #16]
 800870e:	f003 0304 	and.w	r3, r3, #4
 8008712:	2b04      	cmp	r3, #4
 8008714:	d122      	bne.n	800875c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	68db      	ldr	r3, [r3, #12]
 800871c:	f003 0304 	and.w	r3, r3, #4
 8008720:	2b04      	cmp	r3, #4
 8008722:	d11b      	bne.n	800875c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f06f 0204 	mvn.w	r2, #4
 800872c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2202      	movs	r2, #2
 8008732:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	699b      	ldr	r3, [r3, #24]
 800873a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800873e:	2b00      	cmp	r3, #0
 8008740:	d003      	beq.n	800874a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 f98b 	bl	8008a5e <HAL_TIM_IC_CaptureCallback>
 8008748:	e005      	b.n	8008756 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f97d 	bl	8008a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f98e 	bl	8008a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	691b      	ldr	r3, [r3, #16]
 8008762:	f003 0308 	and.w	r3, r3, #8
 8008766:	2b08      	cmp	r3, #8
 8008768:	d122      	bne.n	80087b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	68db      	ldr	r3, [r3, #12]
 8008770:	f003 0308 	and.w	r3, r3, #8
 8008774:	2b08      	cmp	r3, #8
 8008776:	d11b      	bne.n	80087b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	f06f 0208 	mvn.w	r2, #8
 8008780:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2204      	movs	r2, #4
 8008786:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	69db      	ldr	r3, [r3, #28]
 800878e:	f003 0303 	and.w	r3, r3, #3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d003      	beq.n	800879e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f961 	bl	8008a5e <HAL_TIM_IC_CaptureCallback>
 800879c:	e005      	b.n	80087aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f953 	bl	8008a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f964 	bl	8008a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	f003 0310 	and.w	r3, r3, #16
 80087ba:	2b10      	cmp	r3, #16
 80087bc:	d122      	bne.n	8008804 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	68db      	ldr	r3, [r3, #12]
 80087c4:	f003 0310 	and.w	r3, r3, #16
 80087c8:	2b10      	cmp	r3, #16
 80087ca:	d11b      	bne.n	8008804 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f06f 0210 	mvn.w	r2, #16
 80087d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2208      	movs	r2, #8
 80087da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	69db      	ldr	r3, [r3, #28]
 80087e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d003      	beq.n	80087f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f000 f937 	bl	8008a5e <HAL_TIM_IC_CaptureCallback>
 80087f0:	e005      	b.n	80087fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f929 	bl	8008a4a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f000 f93a 	bl	8008a72 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	691b      	ldr	r3, [r3, #16]
 800880a:	f003 0301 	and.w	r3, r3, #1
 800880e:	2b01      	cmp	r3, #1
 8008810:	d10e      	bne.n	8008830 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68db      	ldr	r3, [r3, #12]
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	2b01      	cmp	r3, #1
 800881e:	d107      	bne.n	8008830 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f06f 0201 	mvn.w	r2, #1
 8008828:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800882a:	6878      	ldr	r0, [r7, #4]
 800882c:	f7f9 f91e 	bl	8001a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800883a:	2b80      	cmp	r3, #128	; 0x80
 800883c:	d10e      	bne.n	800885c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68db      	ldr	r3, [r3, #12]
 8008844:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008848:	2b80      	cmp	r3, #128	; 0x80
 800884a:	d107      	bne.n	800885c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008854:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 fae0 	bl	8008e1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	691b      	ldr	r3, [r3, #16]
 8008862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008866:	2b40      	cmp	r3, #64	; 0x40
 8008868:	d10e      	bne.n	8008888 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008874:	2b40      	cmp	r3, #64	; 0x40
 8008876:	d107      	bne.n	8008888 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008880:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 f8ff 	bl	8008a86 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	691b      	ldr	r3, [r3, #16]
 800888e:	f003 0320 	and.w	r3, r3, #32
 8008892:	2b20      	cmp	r3, #32
 8008894:	d10e      	bne.n	80088b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	68db      	ldr	r3, [r3, #12]
 800889c:	f003 0320 	and.w	r3, r3, #32
 80088a0:	2b20      	cmp	r3, #32
 80088a2:	d107      	bne.n	80088b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	f06f 0220 	mvn.w	r2, #32
 80088ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f000 faaa 	bl	8008e08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80088b4:	bf00      	nop
 80088b6:	3708      	adds	r7, #8
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}

080088bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088c6:	2300      	movs	r3, #0
 80088c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088d0:	2b01      	cmp	r3, #1
 80088d2:	d101      	bne.n	80088d8 <HAL_TIM_ConfigClockSource+0x1c>
 80088d4:	2302      	movs	r3, #2
 80088d6:	e0b4      	b.n	8008a42 <HAL_TIM_ConfigClockSource+0x186>
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	2201      	movs	r2, #1
 80088dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2202      	movs	r2, #2
 80088e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	689b      	ldr	r3, [r3, #8]
 80088ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80088f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80088fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008910:	d03e      	beq.n	8008990 <HAL_TIM_ConfigClockSource+0xd4>
 8008912:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008916:	f200 8087 	bhi.w	8008a28 <HAL_TIM_ConfigClockSource+0x16c>
 800891a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800891e:	f000 8086 	beq.w	8008a2e <HAL_TIM_ConfigClockSource+0x172>
 8008922:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008926:	d87f      	bhi.n	8008a28 <HAL_TIM_ConfigClockSource+0x16c>
 8008928:	2b70      	cmp	r3, #112	; 0x70
 800892a:	d01a      	beq.n	8008962 <HAL_TIM_ConfigClockSource+0xa6>
 800892c:	2b70      	cmp	r3, #112	; 0x70
 800892e:	d87b      	bhi.n	8008a28 <HAL_TIM_ConfigClockSource+0x16c>
 8008930:	2b60      	cmp	r3, #96	; 0x60
 8008932:	d050      	beq.n	80089d6 <HAL_TIM_ConfigClockSource+0x11a>
 8008934:	2b60      	cmp	r3, #96	; 0x60
 8008936:	d877      	bhi.n	8008a28 <HAL_TIM_ConfigClockSource+0x16c>
 8008938:	2b50      	cmp	r3, #80	; 0x50
 800893a:	d03c      	beq.n	80089b6 <HAL_TIM_ConfigClockSource+0xfa>
 800893c:	2b50      	cmp	r3, #80	; 0x50
 800893e:	d873      	bhi.n	8008a28 <HAL_TIM_ConfigClockSource+0x16c>
 8008940:	2b40      	cmp	r3, #64	; 0x40
 8008942:	d058      	beq.n	80089f6 <HAL_TIM_ConfigClockSource+0x13a>
 8008944:	2b40      	cmp	r3, #64	; 0x40
 8008946:	d86f      	bhi.n	8008a28 <HAL_TIM_ConfigClockSource+0x16c>
 8008948:	2b30      	cmp	r3, #48	; 0x30
 800894a:	d064      	beq.n	8008a16 <HAL_TIM_ConfigClockSource+0x15a>
 800894c:	2b30      	cmp	r3, #48	; 0x30
 800894e:	d86b      	bhi.n	8008a28 <HAL_TIM_ConfigClockSource+0x16c>
 8008950:	2b20      	cmp	r3, #32
 8008952:	d060      	beq.n	8008a16 <HAL_TIM_ConfigClockSource+0x15a>
 8008954:	2b20      	cmp	r3, #32
 8008956:	d867      	bhi.n	8008a28 <HAL_TIM_ConfigClockSource+0x16c>
 8008958:	2b00      	cmp	r3, #0
 800895a:	d05c      	beq.n	8008a16 <HAL_TIM_ConfigClockSource+0x15a>
 800895c:	2b10      	cmp	r3, #16
 800895e:	d05a      	beq.n	8008a16 <HAL_TIM_ConfigClockSource+0x15a>
 8008960:	e062      	b.n	8008a28 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6818      	ldr	r0, [r3, #0]
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	6899      	ldr	r1, [r3, #8]
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	685a      	ldr	r2, [r3, #4]
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	68db      	ldr	r3, [r3, #12]
 8008972:	f000 f9ad 	bl	8008cd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800897e:	68bb      	ldr	r3, [r7, #8]
 8008980:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008984:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68ba      	ldr	r2, [r7, #8]
 800898c:	609a      	str	r2, [r3, #8]
      break;
 800898e:	e04f      	b.n	8008a30 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6818      	ldr	r0, [r3, #0]
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	6899      	ldr	r1, [r3, #8]
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	685a      	ldr	r2, [r3, #4]
 800899c:	683b      	ldr	r3, [r7, #0]
 800899e:	68db      	ldr	r3, [r3, #12]
 80089a0:	f000 f996 	bl	8008cd0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	689a      	ldr	r2, [r3, #8]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80089b2:	609a      	str	r2, [r3, #8]
      break;
 80089b4:	e03c      	b.n	8008a30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6818      	ldr	r0, [r3, #0]
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	6859      	ldr	r1, [r3, #4]
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	461a      	mov	r2, r3
 80089c4:	f000 f90a 	bl	8008bdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	2150      	movs	r1, #80	; 0x50
 80089ce:	4618      	mov	r0, r3
 80089d0:	f000 f963 	bl	8008c9a <TIM_ITRx_SetConfig>
      break;
 80089d4:	e02c      	b.n	8008a30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6818      	ldr	r0, [r3, #0]
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	6859      	ldr	r1, [r3, #4]
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	68db      	ldr	r3, [r3, #12]
 80089e2:	461a      	mov	r2, r3
 80089e4:	f000 f929 	bl	8008c3a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	2160      	movs	r1, #96	; 0x60
 80089ee:	4618      	mov	r0, r3
 80089f0:	f000 f953 	bl	8008c9a <TIM_ITRx_SetConfig>
      break;
 80089f4:	e01c      	b.n	8008a30 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6818      	ldr	r0, [r3, #0]
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	6859      	ldr	r1, [r3, #4]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	461a      	mov	r2, r3
 8008a04:	f000 f8ea 	bl	8008bdc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	2140      	movs	r1, #64	; 0x40
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f000 f943 	bl	8008c9a <TIM_ITRx_SetConfig>
      break;
 8008a14:	e00c      	b.n	8008a30 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681a      	ldr	r2, [r3, #0]
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4619      	mov	r1, r3
 8008a20:	4610      	mov	r0, r2
 8008a22:	f000 f93a 	bl	8008c9a <TIM_ITRx_SetConfig>
      break;
 8008a26:	e003      	b.n	8008a30 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8008a2c:	e000      	b.n	8008a30 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a2e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2201      	movs	r2, #1
 8008a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a42:	4618      	mov	r0, r3
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}

08008a4a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008a4a:	b480      	push	{r7}
 8008a4c:	b083      	sub	sp, #12
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008a52:	bf00      	nop
 8008a54:	370c      	adds	r7, #12
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr

08008a5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008a5e:	b480      	push	{r7}
 8008a60:	b083      	sub	sp, #12
 8008a62:	af00      	add	r7, sp, #0
 8008a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008a66:	bf00      	nop
 8008a68:	370c      	adds	r7, #12
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr

08008a72 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008a72:	b480      	push	{r7}
 8008a74:	b083      	sub	sp, #12
 8008a76:	af00      	add	r7, sp, #0
 8008a78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008a7a:	bf00      	nop
 8008a7c:	370c      	adds	r7, #12
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr

08008a86 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008a86:	b480      	push	{r7}
 8008a88:	b083      	sub	sp, #12
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008a8e:	bf00      	nop
 8008a90:	370c      	adds	r7, #12
 8008a92:	46bd      	mov	sp, r7
 8008a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a98:	4770      	bx	lr
	...

08008a9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b085      	sub	sp, #20
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
 8008aa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	4a40      	ldr	r2, [pc, #256]	; (8008bb0 <TIM_Base_SetConfig+0x114>)
 8008ab0:	4293      	cmp	r3, r2
 8008ab2:	d013      	beq.n	8008adc <TIM_Base_SetConfig+0x40>
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aba:	d00f      	beq.n	8008adc <TIM_Base_SetConfig+0x40>
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4a3d      	ldr	r2, [pc, #244]	; (8008bb4 <TIM_Base_SetConfig+0x118>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d00b      	beq.n	8008adc <TIM_Base_SetConfig+0x40>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a3c      	ldr	r2, [pc, #240]	; (8008bb8 <TIM_Base_SetConfig+0x11c>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d007      	beq.n	8008adc <TIM_Base_SetConfig+0x40>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	4a3b      	ldr	r2, [pc, #236]	; (8008bbc <TIM_Base_SetConfig+0x120>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d003      	beq.n	8008adc <TIM_Base_SetConfig+0x40>
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	4a3a      	ldr	r2, [pc, #232]	; (8008bc0 <TIM_Base_SetConfig+0x124>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	d108      	bne.n	8008aee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ae2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ae4:	683b      	ldr	r3, [r7, #0]
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	68fa      	ldr	r2, [r7, #12]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a2f      	ldr	r2, [pc, #188]	; (8008bb0 <TIM_Base_SetConfig+0x114>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d02b      	beq.n	8008b4e <TIM_Base_SetConfig+0xb2>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008afc:	d027      	beq.n	8008b4e <TIM_Base_SetConfig+0xb2>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a2c      	ldr	r2, [pc, #176]	; (8008bb4 <TIM_Base_SetConfig+0x118>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d023      	beq.n	8008b4e <TIM_Base_SetConfig+0xb2>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a2b      	ldr	r2, [pc, #172]	; (8008bb8 <TIM_Base_SetConfig+0x11c>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d01f      	beq.n	8008b4e <TIM_Base_SetConfig+0xb2>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a2a      	ldr	r2, [pc, #168]	; (8008bbc <TIM_Base_SetConfig+0x120>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d01b      	beq.n	8008b4e <TIM_Base_SetConfig+0xb2>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a29      	ldr	r2, [pc, #164]	; (8008bc0 <TIM_Base_SetConfig+0x124>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d017      	beq.n	8008b4e <TIM_Base_SetConfig+0xb2>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a28      	ldr	r2, [pc, #160]	; (8008bc4 <TIM_Base_SetConfig+0x128>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d013      	beq.n	8008b4e <TIM_Base_SetConfig+0xb2>
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	4a27      	ldr	r2, [pc, #156]	; (8008bc8 <TIM_Base_SetConfig+0x12c>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d00f      	beq.n	8008b4e <TIM_Base_SetConfig+0xb2>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	4a26      	ldr	r2, [pc, #152]	; (8008bcc <TIM_Base_SetConfig+0x130>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d00b      	beq.n	8008b4e <TIM_Base_SetConfig+0xb2>
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	4a25      	ldr	r2, [pc, #148]	; (8008bd0 <TIM_Base_SetConfig+0x134>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d007      	beq.n	8008b4e <TIM_Base_SetConfig+0xb2>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	4a24      	ldr	r2, [pc, #144]	; (8008bd4 <TIM_Base_SetConfig+0x138>)
 8008b42:	4293      	cmp	r3, r2
 8008b44:	d003      	beq.n	8008b4e <TIM_Base_SetConfig+0xb2>
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a23      	ldr	r2, [pc, #140]	; (8008bd8 <TIM_Base_SetConfig+0x13c>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d108      	bne.n	8008b60 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	68fa      	ldr	r2, [r7, #12]
 8008b72:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	689a      	ldr	r2, [r3, #8]
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b7c:	683b      	ldr	r3, [r7, #0]
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a0a      	ldr	r2, [pc, #40]	; (8008bb0 <TIM_Base_SetConfig+0x114>)
 8008b88:	4293      	cmp	r3, r2
 8008b8a:	d003      	beq.n	8008b94 <TIM_Base_SetConfig+0xf8>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a0c      	ldr	r2, [pc, #48]	; (8008bc0 <TIM_Base_SetConfig+0x124>)
 8008b90:	4293      	cmp	r3, r2
 8008b92:	d103      	bne.n	8008b9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	691a      	ldr	r2, [r3, #16]
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	615a      	str	r2, [r3, #20]
}
 8008ba2:	bf00      	nop
 8008ba4:	3714      	adds	r7, #20
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bac:	4770      	bx	lr
 8008bae:	bf00      	nop
 8008bb0:	40010000 	.word	0x40010000
 8008bb4:	40000400 	.word	0x40000400
 8008bb8:	40000800 	.word	0x40000800
 8008bbc:	40000c00 	.word	0x40000c00
 8008bc0:	40010400 	.word	0x40010400
 8008bc4:	40014000 	.word	0x40014000
 8008bc8:	40014400 	.word	0x40014400
 8008bcc:	40014800 	.word	0x40014800
 8008bd0:	40001800 	.word	0x40001800
 8008bd4:	40001c00 	.word	0x40001c00
 8008bd8:	40002000 	.word	0x40002000

08008bdc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b087      	sub	sp, #28
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	6a1b      	ldr	r3, [r3, #32]
 8008bec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	6a1b      	ldr	r3, [r3, #32]
 8008bf2:	f023 0201 	bic.w	r2, r3, #1
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	699b      	ldr	r3, [r3, #24]
 8008bfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	011b      	lsls	r3, r3, #4
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c12:	697b      	ldr	r3, [r7, #20]
 8008c14:	f023 030a 	bic.w	r3, r3, #10
 8008c18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	621a      	str	r2, [r3, #32]
}
 8008c2e:	bf00      	nop
 8008c30:	371c      	adds	r7, #28
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b087      	sub	sp, #28
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	60f8      	str	r0, [r7, #12]
 8008c42:	60b9      	str	r1, [r7, #8]
 8008c44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	f023 0210 	bic.w	r2, r3, #16
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	699b      	ldr	r3, [r3, #24]
 8008c56:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	6a1b      	ldr	r3, [r3, #32]
 8008c5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c5e:	697b      	ldr	r3, [r7, #20]
 8008c60:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c64:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	031b      	lsls	r3, r3, #12
 8008c6a:	697a      	ldr	r2, [r7, #20]
 8008c6c:	4313      	orrs	r3, r2
 8008c6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008c76:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	011b      	lsls	r3, r3, #4
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	4313      	orrs	r3, r2
 8008c80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	697a      	ldr	r2, [r7, #20]
 8008c86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	693a      	ldr	r2, [r7, #16]
 8008c8c:	621a      	str	r2, [r3, #32]
}
 8008c8e:	bf00      	nop
 8008c90:	371c      	adds	r7, #28
 8008c92:	46bd      	mov	sp, r7
 8008c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c98:	4770      	bx	lr

08008c9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c9a:	b480      	push	{r7}
 8008c9c:	b085      	sub	sp, #20
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
 8008ca2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	4313      	orrs	r3, r2
 8008cb8:	f043 0307 	orr.w	r3, r3, #7
 8008cbc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	609a      	str	r2, [r3, #8]
}
 8008cc4:	bf00      	nop
 8008cc6:	3714      	adds	r7, #20
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	60f8      	str	r0, [r7, #12]
 8008cd8:	60b9      	str	r1, [r7, #8]
 8008cda:	607a      	str	r2, [r7, #4]
 8008cdc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	689b      	ldr	r3, [r3, #8]
 8008ce2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cec:	683b      	ldr	r3, [r7, #0]
 8008cee:	021a      	lsls	r2, r3, #8
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	431a      	orrs	r2, r3
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	697a      	ldr	r2, [r7, #20]
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	609a      	str	r2, [r3, #8]
}
 8008d04:	bf00      	nop
 8008d06:	371c      	adds	r7, #28
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr

08008d10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d20:	2b01      	cmp	r3, #1
 8008d22:	d101      	bne.n	8008d28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d24:	2302      	movs	r3, #2
 8008d26:	e05a      	b.n	8008dde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2201      	movs	r2, #1
 8008d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2202      	movs	r2, #2
 8008d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	685b      	ldr	r3, [r3, #4]
 8008d3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	689b      	ldr	r3, [r3, #8]
 8008d46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	68fa      	ldr	r2, [r7, #12]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	4a21      	ldr	r2, [pc, #132]	; (8008dec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008d68:	4293      	cmp	r3, r2
 8008d6a:	d022      	beq.n	8008db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d74:	d01d      	beq.n	8008db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a1d      	ldr	r2, [pc, #116]	; (8008df0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d018      	beq.n	8008db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4a1b      	ldr	r2, [pc, #108]	; (8008df4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008d86:	4293      	cmp	r3, r2
 8008d88:	d013      	beq.n	8008db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4a1a      	ldr	r2, [pc, #104]	; (8008df8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008d90:	4293      	cmp	r3, r2
 8008d92:	d00e      	beq.n	8008db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a18      	ldr	r2, [pc, #96]	; (8008dfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d009      	beq.n	8008db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a17      	ldr	r2, [pc, #92]	; (8008e00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008da4:	4293      	cmp	r3, r2
 8008da6:	d004      	beq.n	8008db2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a15      	ldr	r2, [pc, #84]	; (8008e04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d10c      	bne.n	8008dcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008db2:	68bb      	ldr	r3, [r7, #8]
 8008db4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008db8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008dba:	683b      	ldr	r3, [r7, #0]
 8008dbc:	685b      	ldr	r3, [r3, #4]
 8008dbe:	68ba      	ldr	r2, [r7, #8]
 8008dc0:	4313      	orrs	r3, r2
 8008dc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	68ba      	ldr	r2, [r7, #8]
 8008dca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2201      	movs	r2, #1
 8008dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008ddc:	2300      	movs	r3, #0
}
 8008dde:	4618      	mov	r0, r3
 8008de0:	3714      	adds	r7, #20
 8008de2:	46bd      	mov	sp, r7
 8008de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de8:	4770      	bx	lr
 8008dea:	bf00      	nop
 8008dec:	40010000 	.word	0x40010000
 8008df0:	40000400 	.word	0x40000400
 8008df4:	40000800 	.word	0x40000800
 8008df8:	40000c00 	.word	0x40000c00
 8008dfc:	40010400 	.word	0x40010400
 8008e00:	40014000 	.word	0x40014000
 8008e04:	40001800 	.word	0x40001800

08008e08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b083      	sub	sp, #12
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e10:	bf00      	nop
 8008e12:	370c      	adds	r7, #12
 8008e14:	46bd      	mov	sp, r7
 8008e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1a:	4770      	bx	lr

08008e1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e1c:	b480      	push	{r7}
 8008e1e:	b083      	sub	sp, #12
 8008e20:	af00      	add	r7, sp, #0
 8008e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e24:	bf00      	nop
 8008e26:	370c      	adds	r7, #12
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2e:	4770      	bx	lr

08008e30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b082      	sub	sp, #8
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d101      	bne.n	8008e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	e03f      	b.n	8008ec2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e48:	b2db      	uxtb	r3, r3
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d106      	bne.n	8008e5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	2200      	movs	r2, #0
 8008e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f7fa f890 	bl	8002f7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2224      	movs	r2, #36	; 0x24
 8008e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	68da      	ldr	r2, [r3, #12]
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e74:	6878      	ldr	r0, [r7, #4]
 8008e76:	f000 fd8b 	bl	8009990 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	691a      	ldr	r2, [r3, #16]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	695a      	ldr	r2, [r3, #20]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	68da      	ldr	r2, [r3, #12]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ea8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2220      	movs	r2, #32
 8008eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2220      	movs	r2, #32
 8008ebc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008ec0:	2300      	movs	r3, #0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3708      	adds	r7, #8
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}

08008eca <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008eca:	b580      	push	{r7, lr}
 8008ecc:	b08a      	sub	sp, #40	; 0x28
 8008ece:	af02      	add	r7, sp, #8
 8008ed0:	60f8      	str	r0, [r7, #12]
 8008ed2:	60b9      	str	r1, [r7, #8]
 8008ed4:	603b      	str	r3, [r7, #0]
 8008ed6:	4613      	mov	r3, r2
 8008ed8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008eda:	2300      	movs	r3, #0
 8008edc:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ee4:	b2db      	uxtb	r3, r3
 8008ee6:	2b20      	cmp	r3, #32
 8008ee8:	f040 808c 	bne.w	8009004 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d002      	beq.n	8008ef8 <HAL_UART_Receive+0x2e>
 8008ef2:	88fb      	ldrh	r3, [r7, #6]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d101      	bne.n	8008efc <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e084      	b.n	8009006 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f02:	2b01      	cmp	r3, #1
 8008f04:	d101      	bne.n	8008f0a <HAL_UART_Receive+0x40>
 8008f06:	2302      	movs	r3, #2
 8008f08:	e07d      	b.n	8009006 <HAL_UART_Receive+0x13c>
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2201      	movs	r2, #1
 8008f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2222      	movs	r2, #34	; 0x22
 8008f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2200      	movs	r2, #0
 8008f24:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f26:	f7fa fa47 	bl	80033b8 <HAL_GetTick>
 8008f2a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	88fa      	ldrh	r2, [r7, #6]
 8008f30:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	88fa      	ldrh	r2, [r7, #6]
 8008f36:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f40:	d108      	bne.n	8008f54 <HAL_UART_Receive+0x8a>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d104      	bne.n	8008f54 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	61bb      	str	r3, [r7, #24]
 8008f52:	e003      	b.n	8008f5c <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008f64:	e043      	b.n	8008fee <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	9300      	str	r3, [sp, #0]
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	2120      	movs	r1, #32
 8008f70:	68f8      	ldr	r0, [r7, #12]
 8008f72:	f000 fb05 	bl	8009580 <UART_WaitOnFlagUntilTimeout>
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	e042      	b.n	8009006 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008f80:	69fb      	ldr	r3, [r7, #28]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10c      	bne.n	8008fa0 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	b29b      	uxth	r3, r3
 8008f8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	69bb      	ldr	r3, [r7, #24]
 8008f96:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	3302      	adds	r3, #2
 8008f9c:	61bb      	str	r3, [r7, #24]
 8008f9e:	e01f      	b.n	8008fe0 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	689b      	ldr	r3, [r3, #8]
 8008fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fa8:	d007      	beq.n	8008fba <HAL_UART_Receive+0xf0>
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d10a      	bne.n	8008fc8 <HAL_UART_Receive+0xfe>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	691b      	ldr	r3, [r3, #16]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d106      	bne.n	8008fc8 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	b2da      	uxtb	r2, r3
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	701a      	strb	r2, [r3, #0]
 8008fc6:	e008      	b.n	8008fda <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	685b      	ldr	r3, [r3, #4]
 8008fce:	b2db      	uxtb	r3, r3
 8008fd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008fd4:	b2da      	uxtb	r2, r3
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8008fda:	69fb      	ldr	r3, [r7, #28]
 8008fdc:	3301      	adds	r3, #1
 8008fde:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fe4:	b29b      	uxth	r3, r3
 8008fe6:	3b01      	subs	r3, #1
 8008fe8:	b29a      	uxth	r2, r3
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d1b6      	bne.n	8008f66 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	2220      	movs	r2, #32
 8008ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	e000      	b.n	8009006 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009004:	2302      	movs	r3, #2
  }
}
 8009006:	4618      	mov	r0, r3
 8009008:	3720      	adds	r7, #32
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
	...

08009010 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b0ba      	sub	sp, #232	; 0xe8
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	695b      	ldr	r3, [r3, #20]
 8009032:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009036:	2300      	movs	r3, #0
 8009038:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800903c:	2300      	movs	r3, #0
 800903e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009046:	f003 030f 	and.w	r3, r3, #15
 800904a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800904e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009052:	2b00      	cmp	r3, #0
 8009054:	d10f      	bne.n	8009076 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800905a:	f003 0320 	and.w	r3, r3, #32
 800905e:	2b00      	cmp	r3, #0
 8009060:	d009      	beq.n	8009076 <HAL_UART_IRQHandler+0x66>
 8009062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009066:	f003 0320 	and.w	r3, r3, #32
 800906a:	2b00      	cmp	r3, #0
 800906c:	d003      	beq.n	8009076 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 fbd3 	bl	800981a <UART_Receive_IT>
      return;
 8009074:	e256      	b.n	8009524 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009076:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800907a:	2b00      	cmp	r3, #0
 800907c:	f000 80de 	beq.w	800923c <HAL_UART_IRQHandler+0x22c>
 8009080:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009084:	f003 0301 	and.w	r3, r3, #1
 8009088:	2b00      	cmp	r3, #0
 800908a:	d106      	bne.n	800909a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800908c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009090:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009094:	2b00      	cmp	r3, #0
 8009096:	f000 80d1 	beq.w	800923c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800909a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800909e:	f003 0301 	and.w	r3, r3, #1
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00b      	beq.n	80090be <HAL_UART_IRQHandler+0xae>
 80090a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d005      	beq.n	80090be <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090b6:	f043 0201 	orr.w	r2, r3, #1
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80090be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090c2:	f003 0304 	and.w	r3, r3, #4
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d00b      	beq.n	80090e2 <HAL_UART_IRQHandler+0xd2>
 80090ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d005      	beq.n	80090e2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090da:	f043 0202 	orr.w	r2, r3, #2
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80090e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090e6:	f003 0302 	and.w	r3, r3, #2
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00b      	beq.n	8009106 <HAL_UART_IRQHandler+0xf6>
 80090ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090f2:	f003 0301 	and.w	r3, r3, #1
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d005      	beq.n	8009106 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fe:	f043 0204 	orr.w	r2, r3, #4
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009106:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800910a:	f003 0308 	and.w	r3, r3, #8
 800910e:	2b00      	cmp	r3, #0
 8009110:	d011      	beq.n	8009136 <HAL_UART_IRQHandler+0x126>
 8009112:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009116:	f003 0320 	and.w	r3, r3, #32
 800911a:	2b00      	cmp	r3, #0
 800911c:	d105      	bne.n	800912a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800911e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009122:	f003 0301 	and.w	r3, r3, #1
 8009126:	2b00      	cmp	r3, #0
 8009128:	d005      	beq.n	8009136 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912e:	f043 0208 	orr.w	r2, r3, #8
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913a:	2b00      	cmp	r3, #0
 800913c:	f000 81ed 	beq.w	800951a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009140:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009144:	f003 0320 	and.w	r3, r3, #32
 8009148:	2b00      	cmp	r3, #0
 800914a:	d008      	beq.n	800915e <HAL_UART_IRQHandler+0x14e>
 800914c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009150:	f003 0320 	and.w	r3, r3, #32
 8009154:	2b00      	cmp	r3, #0
 8009156:	d002      	beq.n	800915e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f000 fb5e 	bl	800981a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	695b      	ldr	r3, [r3, #20]
 8009164:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009168:	2b40      	cmp	r3, #64	; 0x40
 800916a:	bf0c      	ite	eq
 800916c:	2301      	moveq	r3, #1
 800916e:	2300      	movne	r3, #0
 8009170:	b2db      	uxtb	r3, r3
 8009172:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917a:	f003 0308 	and.w	r3, r3, #8
 800917e:	2b00      	cmp	r3, #0
 8009180:	d103      	bne.n	800918a <HAL_UART_IRQHandler+0x17a>
 8009182:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009186:	2b00      	cmp	r3, #0
 8009188:	d04f      	beq.n	800922a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f000 fa66 	bl	800965c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	695b      	ldr	r3, [r3, #20]
 8009196:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800919a:	2b40      	cmp	r3, #64	; 0x40
 800919c:	d141      	bne.n	8009222 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	3314      	adds	r3, #20
 80091a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091ac:	e853 3f00 	ldrex	r3, [r3]
 80091b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80091b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	3314      	adds	r3, #20
 80091c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80091ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80091ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80091d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80091da:	e841 2300 	strex	r3, r2, [r1]
 80091de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80091e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1d9      	bne.n	800919e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d013      	beq.n	800921a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091f6:	4a7d      	ldr	r2, [pc, #500]	; (80093ec <HAL_UART_IRQHandler+0x3dc>)
 80091f8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fa fb92 	bl	8003928 <HAL_DMA_Abort_IT>
 8009204:	4603      	mov	r3, r0
 8009206:	2b00      	cmp	r3, #0
 8009208:	d016      	beq.n	8009238 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800920e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009210:	687a      	ldr	r2, [r7, #4]
 8009212:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009214:	4610      	mov	r0, r2
 8009216:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009218:	e00e      	b.n	8009238 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800921a:	6878      	ldr	r0, [r7, #4]
 800921c:	f000 f99a 	bl	8009554 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009220:	e00a      	b.n	8009238 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009222:	6878      	ldr	r0, [r7, #4]
 8009224:	f000 f996 	bl	8009554 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009228:	e006      	b.n	8009238 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 f992 	bl	8009554 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009236:	e170      	b.n	800951a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009238:	bf00      	nop
    return;
 800923a:	e16e      	b.n	800951a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009240:	2b01      	cmp	r3, #1
 8009242:	f040 814a 	bne.w	80094da <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800924a:	f003 0310 	and.w	r3, r3, #16
 800924e:	2b00      	cmp	r3, #0
 8009250:	f000 8143 	beq.w	80094da <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009258:	f003 0310 	and.w	r3, r3, #16
 800925c:	2b00      	cmp	r3, #0
 800925e:	f000 813c 	beq.w	80094da <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009262:	2300      	movs	r3, #0
 8009264:	60bb      	str	r3, [r7, #8]
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	60bb      	str	r3, [r7, #8]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	685b      	ldr	r3, [r3, #4]
 8009274:	60bb      	str	r3, [r7, #8]
 8009276:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	695b      	ldr	r3, [r3, #20]
 800927e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009282:	2b40      	cmp	r3, #64	; 0x40
 8009284:	f040 80b4 	bne.w	80093f0 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009294:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009298:	2b00      	cmp	r3, #0
 800929a:	f000 8140 	beq.w	800951e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80092a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092a6:	429a      	cmp	r2, r3
 80092a8:	f080 8139 	bcs.w	800951e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092b2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092b8:	69db      	ldr	r3, [r3, #28]
 80092ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092be:	f000 8088 	beq.w	80093d2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	330c      	adds	r3, #12
 80092c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80092d0:	e853 3f00 	ldrex	r3, [r3]
 80092d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80092d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80092e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	330c      	adds	r3, #12
 80092ea:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80092ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80092f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80092fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80092fe:	e841 2300 	strex	r3, r2, [r1]
 8009302:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009306:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1d9      	bne.n	80092c2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	3314      	adds	r3, #20
 8009314:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009316:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009318:	e853 3f00 	ldrex	r3, [r3]
 800931c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800931e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009320:	f023 0301 	bic.w	r3, r3, #1
 8009324:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	3314      	adds	r3, #20
 800932e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009332:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009336:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009338:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800933a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800933e:	e841 2300 	strex	r3, r2, [r1]
 8009342:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009344:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1e1      	bne.n	800930e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	3314      	adds	r3, #20
 8009350:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009352:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009354:	e853 3f00 	ldrex	r3, [r3]
 8009358:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800935a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800935c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009360:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3314      	adds	r3, #20
 800936a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800936e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009370:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009372:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009374:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009376:	e841 2300 	strex	r3, r2, [r1]
 800937a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800937c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800937e:	2b00      	cmp	r3, #0
 8009380:	d1e3      	bne.n	800934a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2220      	movs	r2, #32
 8009386:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2200      	movs	r2, #0
 800938e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	330c      	adds	r3, #12
 8009396:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009398:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800939a:	e853 3f00 	ldrex	r3, [r3]
 800939e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80093a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093a2:	f023 0310 	bic.w	r3, r3, #16
 80093a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	330c      	adds	r3, #12
 80093b0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80093b4:	65ba      	str	r2, [r7, #88]	; 0x58
 80093b6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80093ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093bc:	e841 2300 	strex	r3, r2, [r1]
 80093c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80093c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d1e3      	bne.n	8009390 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093cc:	4618      	mov	r0, r3
 80093ce:	f7fa fa3b 	bl	8003848 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093da:	b29b      	uxth	r3, r3
 80093dc:	1ad3      	subs	r3, r2, r3
 80093de:	b29b      	uxth	r3, r3
 80093e0:	4619      	mov	r1, r3
 80093e2:	6878      	ldr	r0, [r7, #4]
 80093e4:	f000 f8c0 	bl	8009568 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80093e8:	e099      	b.n	800951e <HAL_UART_IRQHandler+0x50e>
 80093ea:	bf00      	nop
 80093ec:	08009723 	.word	0x08009723
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093f8:	b29b      	uxth	r3, r3
 80093fa:	1ad3      	subs	r3, r2, r3
 80093fc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009404:	b29b      	uxth	r3, r3
 8009406:	2b00      	cmp	r3, #0
 8009408:	f000 808b 	beq.w	8009522 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800940c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009410:	2b00      	cmp	r3, #0
 8009412:	f000 8086 	beq.w	8009522 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	330c      	adds	r3, #12
 800941c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800941e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009420:	e853 3f00 	ldrex	r3, [r3]
 8009424:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009428:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800942c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	330c      	adds	r3, #12
 8009436:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800943a:	647a      	str	r2, [r7, #68]	; 0x44
 800943c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800943e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009440:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009442:	e841 2300 	strex	r3, r2, [r1]
 8009446:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009448:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800944a:	2b00      	cmp	r3, #0
 800944c:	d1e3      	bne.n	8009416 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	3314      	adds	r3, #20
 8009454:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009458:	e853 3f00 	ldrex	r3, [r3]
 800945c:	623b      	str	r3, [r7, #32]
   return(result);
 800945e:	6a3b      	ldr	r3, [r7, #32]
 8009460:	f023 0301 	bic.w	r3, r3, #1
 8009464:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	3314      	adds	r3, #20
 800946e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009472:	633a      	str	r2, [r7, #48]	; 0x30
 8009474:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009476:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800947a:	e841 2300 	strex	r3, r2, [r1]
 800947e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009480:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009482:	2b00      	cmp	r3, #0
 8009484:	d1e3      	bne.n	800944e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2220      	movs	r2, #32
 800948a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	330c      	adds	r3, #12
 800949a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	e853 3f00 	ldrex	r3, [r3]
 80094a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f023 0310 	bic.w	r3, r3, #16
 80094aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	330c      	adds	r3, #12
 80094b4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80094b8:	61fa      	str	r2, [r7, #28]
 80094ba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094bc:	69b9      	ldr	r1, [r7, #24]
 80094be:	69fa      	ldr	r2, [r7, #28]
 80094c0:	e841 2300 	strex	r3, r2, [r1]
 80094c4:	617b      	str	r3, [r7, #20]
   return(result);
 80094c6:	697b      	ldr	r3, [r7, #20]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d1e3      	bne.n	8009494 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80094d0:	4619      	mov	r1, r3
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	f000 f848 	bl	8009568 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80094d8:	e023      	b.n	8009522 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80094da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d009      	beq.n	80094fa <HAL_UART_IRQHandler+0x4ea>
 80094e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d003      	beq.n	80094fa <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80094f2:	6878      	ldr	r0, [r7, #4]
 80094f4:	f000 f929 	bl	800974a <UART_Transmit_IT>
    return;
 80094f8:	e014      	b.n	8009524 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80094fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009502:	2b00      	cmp	r3, #0
 8009504:	d00e      	beq.n	8009524 <HAL_UART_IRQHandler+0x514>
 8009506:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800950a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800950e:	2b00      	cmp	r3, #0
 8009510:	d008      	beq.n	8009524 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f969 	bl	80097ea <UART_EndTransmit_IT>
    return;
 8009518:	e004      	b.n	8009524 <HAL_UART_IRQHandler+0x514>
    return;
 800951a:	bf00      	nop
 800951c:	e002      	b.n	8009524 <HAL_UART_IRQHandler+0x514>
      return;
 800951e:	bf00      	nop
 8009520:	e000      	b.n	8009524 <HAL_UART_IRQHandler+0x514>
      return;
 8009522:	bf00      	nop
  }
}
 8009524:	37e8      	adds	r7, #232	; 0xe8
 8009526:	46bd      	mov	sp, r7
 8009528:	bd80      	pop	{r7, pc}
 800952a:	bf00      	nop

0800952c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009534:	bf00      	nop
 8009536:	370c      	adds	r7, #12
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr

08009540 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009540:	b480      	push	{r7}
 8009542:	b083      	sub	sp, #12
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009548:	bf00      	nop
 800954a:	370c      	adds	r7, #12
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	460b      	mov	r3, r1
 8009572:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009574:	bf00      	nop
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b090      	sub	sp, #64	; 0x40
 8009584:	af00      	add	r7, sp, #0
 8009586:	60f8      	str	r0, [r7, #12]
 8009588:	60b9      	str	r1, [r7, #8]
 800958a:	603b      	str	r3, [r7, #0]
 800958c:	4613      	mov	r3, r2
 800958e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009590:	e050      	b.n	8009634 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009592:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009594:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009598:	d04c      	beq.n	8009634 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800959a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800959c:	2b00      	cmp	r3, #0
 800959e:	d007      	beq.n	80095b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80095a0:	f7f9 ff0a 	bl	80033b8 <HAL_GetTick>
 80095a4:	4602      	mov	r2, r0
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	1ad3      	subs	r3, r2, r3
 80095aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095ac:	429a      	cmp	r2, r3
 80095ae:	d241      	bcs.n	8009634 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	330c      	adds	r3, #12
 80095b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ba:	e853 3f00 	ldrex	r3, [r3]
 80095be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	330c      	adds	r3, #12
 80095ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80095d0:	637a      	str	r2, [r7, #52]	; 0x34
 80095d2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095d8:	e841 2300 	strex	r3, r2, [r1]
 80095dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80095de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d1e5      	bne.n	80095b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	3314      	adds	r3, #20
 80095ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	e853 3f00 	ldrex	r3, [r3]
 80095f2:	613b      	str	r3, [r7, #16]
   return(result);
 80095f4:	693b      	ldr	r3, [r7, #16]
 80095f6:	f023 0301 	bic.w	r3, r3, #1
 80095fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	3314      	adds	r3, #20
 8009602:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009604:	623a      	str	r2, [r7, #32]
 8009606:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009608:	69f9      	ldr	r1, [r7, #28]
 800960a:	6a3a      	ldr	r2, [r7, #32]
 800960c:	e841 2300 	strex	r3, r2, [r1]
 8009610:	61bb      	str	r3, [r7, #24]
   return(result);
 8009612:	69bb      	ldr	r3, [r7, #24]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1e5      	bne.n	80095e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2220      	movs	r2, #32
 800961c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	2220      	movs	r2, #32
 8009624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2200      	movs	r2, #0
 800962c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	e00f      	b.n	8009654 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	4013      	ands	r3, r2
 800963e:	68ba      	ldr	r2, [r7, #8]
 8009640:	429a      	cmp	r2, r3
 8009642:	bf0c      	ite	eq
 8009644:	2301      	moveq	r3, #1
 8009646:	2300      	movne	r3, #0
 8009648:	b2db      	uxtb	r3, r3
 800964a:	461a      	mov	r2, r3
 800964c:	79fb      	ldrb	r3, [r7, #7]
 800964e:	429a      	cmp	r2, r3
 8009650:	d09f      	beq.n	8009592 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3740      	adds	r7, #64	; 0x40
 8009658:	46bd      	mov	sp, r7
 800965a:	bd80      	pop	{r7, pc}

0800965c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800965c:	b480      	push	{r7}
 800965e:	b095      	sub	sp, #84	; 0x54
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	330c      	adds	r3, #12
 800966a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800966c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800966e:	e853 3f00 	ldrex	r3, [r3]
 8009672:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009676:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800967a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	330c      	adds	r3, #12
 8009682:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009684:	643a      	str	r2, [r7, #64]	; 0x40
 8009686:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009688:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800968a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800968c:	e841 2300 	strex	r3, r2, [r1]
 8009690:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009694:	2b00      	cmp	r3, #0
 8009696:	d1e5      	bne.n	8009664 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	3314      	adds	r3, #20
 800969e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a0:	6a3b      	ldr	r3, [r7, #32]
 80096a2:	e853 3f00 	ldrex	r3, [r3]
 80096a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80096a8:	69fb      	ldr	r3, [r7, #28]
 80096aa:	f023 0301 	bic.w	r3, r3, #1
 80096ae:	64bb      	str	r3, [r7, #72]	; 0x48
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	3314      	adds	r3, #20
 80096b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096b8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80096ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096c0:	e841 2300 	strex	r3, r2, [r1]
 80096c4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d1e5      	bne.n	8009698 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	d119      	bne.n	8009708 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	330c      	adds	r3, #12
 80096da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	e853 3f00 	ldrex	r3, [r3]
 80096e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	f023 0310 	bic.w	r3, r3, #16
 80096ea:	647b      	str	r3, [r7, #68]	; 0x44
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	330c      	adds	r3, #12
 80096f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096f4:	61ba      	str	r2, [r7, #24]
 80096f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f8:	6979      	ldr	r1, [r7, #20]
 80096fa:	69ba      	ldr	r2, [r7, #24]
 80096fc:	e841 2300 	strex	r3, r2, [r1]
 8009700:	613b      	str	r3, [r7, #16]
   return(result);
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d1e5      	bne.n	80096d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2220      	movs	r2, #32
 800970c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009716:	bf00      	nop
 8009718:	3754      	adds	r7, #84	; 0x54
 800971a:	46bd      	mov	sp, r7
 800971c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009720:	4770      	bx	lr

08009722 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b084      	sub	sp, #16
 8009726:	af00      	add	r7, sp, #0
 8009728:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800972e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2200      	movs	r2, #0
 8009734:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	2200      	movs	r2, #0
 800973a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800973c:	68f8      	ldr	r0, [r7, #12]
 800973e:	f7ff ff09 	bl	8009554 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009742:	bf00      	nop
 8009744:	3710      	adds	r7, #16
 8009746:	46bd      	mov	sp, r7
 8009748:	bd80      	pop	{r7, pc}

0800974a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800974a:	b480      	push	{r7}
 800974c:	b085      	sub	sp, #20
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009758:	b2db      	uxtb	r3, r3
 800975a:	2b21      	cmp	r3, #33	; 0x21
 800975c:	d13e      	bne.n	80097dc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	689b      	ldr	r3, [r3, #8]
 8009762:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009766:	d114      	bne.n	8009792 <UART_Transmit_IT+0x48>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d110      	bne.n	8009792 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6a1b      	ldr	r3, [r3, #32]
 8009774:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	881b      	ldrh	r3, [r3, #0]
 800977a:	461a      	mov	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009784:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6a1b      	ldr	r3, [r3, #32]
 800978a:	1c9a      	adds	r2, r3, #2
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	621a      	str	r2, [r3, #32]
 8009790:	e008      	b.n	80097a4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	6a1b      	ldr	r3, [r3, #32]
 8009796:	1c59      	adds	r1, r3, #1
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	6211      	str	r1, [r2, #32]
 800979c:	781a      	ldrb	r2, [r3, #0]
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80097a8:	b29b      	uxth	r3, r3
 80097aa:	3b01      	subs	r3, #1
 80097ac:	b29b      	uxth	r3, r3
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	4619      	mov	r1, r3
 80097b2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d10f      	bne.n	80097d8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68da      	ldr	r2, [r3, #12]
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097c6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68da      	ldr	r2, [r3, #12]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097d6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80097d8:	2300      	movs	r3, #0
 80097da:	e000      	b.n	80097de <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80097dc:	2302      	movs	r3, #2
  }
}
 80097de:	4618      	mov	r0, r3
 80097e0:	3714      	adds	r7, #20
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr

080097ea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097ea:	b580      	push	{r7, lr}
 80097ec:	b082      	sub	sp, #8
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	68da      	ldr	r2, [r3, #12]
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009800:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2220      	movs	r2, #32
 8009806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800980a:	6878      	ldr	r0, [r7, #4]
 800980c:	f7ff fe8e 	bl	800952c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009810:	2300      	movs	r3, #0
}
 8009812:	4618      	mov	r0, r3
 8009814:	3708      	adds	r7, #8
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800981a:	b580      	push	{r7, lr}
 800981c:	b08c      	sub	sp, #48	; 0x30
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009828:	b2db      	uxtb	r3, r3
 800982a:	2b22      	cmp	r3, #34	; 0x22
 800982c:	f040 80ab 	bne.w	8009986 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	689b      	ldr	r3, [r3, #8]
 8009834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009838:	d117      	bne.n	800986a <UART_Receive_IT+0x50>
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	691b      	ldr	r3, [r3, #16]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d113      	bne.n	800986a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009842:	2300      	movs	r3, #0
 8009844:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800984a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	b29b      	uxth	r3, r3
 8009854:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009858:	b29a      	uxth	r2, r3
 800985a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800985c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009862:	1c9a      	adds	r2, r3, #2
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	629a      	str	r2, [r3, #40]	; 0x28
 8009868:	e026      	b.n	80098b8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800986e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009870:	2300      	movs	r3, #0
 8009872:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	689b      	ldr	r3, [r3, #8]
 8009878:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800987c:	d007      	beq.n	800988e <UART_Receive_IT+0x74>
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	689b      	ldr	r3, [r3, #8]
 8009882:	2b00      	cmp	r3, #0
 8009884:	d10a      	bne.n	800989c <UART_Receive_IT+0x82>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d106      	bne.n	800989c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	685b      	ldr	r3, [r3, #4]
 8009894:	b2da      	uxtb	r2, r3
 8009896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009898:	701a      	strb	r2, [r3, #0]
 800989a:	e008      	b.n	80098ae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	685b      	ldr	r3, [r3, #4]
 80098a2:	b2db      	uxtb	r3, r3
 80098a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098a8:	b2da      	uxtb	r2, r3
 80098aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b2:	1c5a      	adds	r2, r3, #1
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098bc:	b29b      	uxth	r3, r3
 80098be:	3b01      	subs	r3, #1
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	4619      	mov	r1, r3
 80098c6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d15a      	bne.n	8009982 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	68da      	ldr	r2, [r3, #12]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f022 0220 	bic.w	r2, r2, #32
 80098da:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68da      	ldr	r2, [r3, #12]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80098ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	695a      	ldr	r2, [r3, #20]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f022 0201 	bic.w	r2, r2, #1
 80098fa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2220      	movs	r2, #32
 8009900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009908:	2b01      	cmp	r3, #1
 800990a:	d135      	bne.n	8009978 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2200      	movs	r2, #0
 8009910:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	330c      	adds	r3, #12
 8009918:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800991a:	697b      	ldr	r3, [r7, #20]
 800991c:	e853 3f00 	ldrex	r3, [r3]
 8009920:	613b      	str	r3, [r7, #16]
   return(result);
 8009922:	693b      	ldr	r3, [r7, #16]
 8009924:	f023 0310 	bic.w	r3, r3, #16
 8009928:	627b      	str	r3, [r7, #36]	; 0x24
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	330c      	adds	r3, #12
 8009930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009932:	623a      	str	r2, [r7, #32]
 8009934:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009936:	69f9      	ldr	r1, [r7, #28]
 8009938:	6a3a      	ldr	r2, [r7, #32]
 800993a:	e841 2300 	strex	r3, r2, [r1]
 800993e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009940:	69bb      	ldr	r3, [r7, #24]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d1e5      	bne.n	8009912 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f003 0310 	and.w	r3, r3, #16
 8009950:	2b10      	cmp	r3, #16
 8009952:	d10a      	bne.n	800996a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009954:	2300      	movs	r3, #0
 8009956:	60fb      	str	r3, [r7, #12]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	60fb      	str	r3, [r7, #12]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	60fb      	str	r3, [r7, #12]
 8009968:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800996e:	4619      	mov	r1, r3
 8009970:	6878      	ldr	r0, [r7, #4]
 8009972:	f7ff fdf9 	bl	8009568 <HAL_UARTEx_RxEventCallback>
 8009976:	e002      	b.n	800997e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7ff fde1 	bl	8009540 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800997e:	2300      	movs	r3, #0
 8009980:	e002      	b.n	8009988 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009982:	2300      	movs	r3, #0
 8009984:	e000      	b.n	8009988 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009986:	2302      	movs	r3, #2
  }
}
 8009988:	4618      	mov	r0, r3
 800998a:	3730      	adds	r7, #48	; 0x30
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}

08009990 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009990:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009994:	b0c0      	sub	sp, #256	; 0x100
 8009996:	af00      	add	r7, sp, #0
 8009998:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800999c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	691b      	ldr	r3, [r3, #16]
 80099a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80099a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099ac:	68d9      	ldr	r1, [r3, #12]
 80099ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099b2:	681a      	ldr	r2, [r3, #0]
 80099b4:	ea40 0301 	orr.w	r3, r0, r1
 80099b8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80099ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099be:	689a      	ldr	r2, [r3, #8]
 80099c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099c4:	691b      	ldr	r3, [r3, #16]
 80099c6:	431a      	orrs	r2, r3
 80099c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099cc:	695b      	ldr	r3, [r3, #20]
 80099ce:	431a      	orrs	r2, r3
 80099d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099d4:	69db      	ldr	r3, [r3, #28]
 80099d6:	4313      	orrs	r3, r2
 80099d8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80099dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	68db      	ldr	r3, [r3, #12]
 80099e4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80099e8:	f021 010c 	bic.w	r1, r1, #12
 80099ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80099f6:	430b      	orrs	r3, r1
 80099f8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80099fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	695b      	ldr	r3, [r3, #20]
 8009a02:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a0a:	6999      	ldr	r1, [r3, #24]
 8009a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	ea40 0301 	orr.w	r3, r0, r1
 8009a16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a1c:	681a      	ldr	r2, [r3, #0]
 8009a1e:	4b8f      	ldr	r3, [pc, #572]	; (8009c5c <UART_SetConfig+0x2cc>)
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d005      	beq.n	8009a30 <UART_SetConfig+0xa0>
 8009a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	4b8d      	ldr	r3, [pc, #564]	; (8009c60 <UART_SetConfig+0x2d0>)
 8009a2c:	429a      	cmp	r2, r3
 8009a2e:	d104      	bne.n	8009a3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a30:	f7fd fa36 	bl	8006ea0 <HAL_RCC_GetPCLK2Freq>
 8009a34:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009a38:	e003      	b.n	8009a42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a3a:	f7fd fa1d 	bl	8006e78 <HAL_RCC_GetPCLK1Freq>
 8009a3e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a46:	69db      	ldr	r3, [r3, #28]
 8009a48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a4c:	f040 810c 	bne.w	8009c68 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a54:	2200      	movs	r2, #0
 8009a56:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a5a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009a5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009a62:	4622      	mov	r2, r4
 8009a64:	462b      	mov	r3, r5
 8009a66:	1891      	adds	r1, r2, r2
 8009a68:	65b9      	str	r1, [r7, #88]	; 0x58
 8009a6a:	415b      	adcs	r3, r3
 8009a6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009a72:	4621      	mov	r1, r4
 8009a74:	eb12 0801 	adds.w	r8, r2, r1
 8009a78:	4629      	mov	r1, r5
 8009a7a:	eb43 0901 	adc.w	r9, r3, r1
 8009a7e:	f04f 0200 	mov.w	r2, #0
 8009a82:	f04f 0300 	mov.w	r3, #0
 8009a86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009a8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009a8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009a92:	4690      	mov	r8, r2
 8009a94:	4699      	mov	r9, r3
 8009a96:	4623      	mov	r3, r4
 8009a98:	eb18 0303 	adds.w	r3, r8, r3
 8009a9c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009aa0:	462b      	mov	r3, r5
 8009aa2:	eb49 0303 	adc.w	r3, r9, r3
 8009aa6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aae:	685b      	ldr	r3, [r3, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ab6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009aba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009abe:	460b      	mov	r3, r1
 8009ac0:	18db      	adds	r3, r3, r3
 8009ac2:	653b      	str	r3, [r7, #80]	; 0x50
 8009ac4:	4613      	mov	r3, r2
 8009ac6:	eb42 0303 	adc.w	r3, r2, r3
 8009aca:	657b      	str	r3, [r7, #84]	; 0x54
 8009acc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009ad0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009ad4:	f7f7 f8b8 	bl	8000c48 <__aeabi_uldivmod>
 8009ad8:	4602      	mov	r2, r0
 8009ada:	460b      	mov	r3, r1
 8009adc:	4b61      	ldr	r3, [pc, #388]	; (8009c64 <UART_SetConfig+0x2d4>)
 8009ade:	fba3 2302 	umull	r2, r3, r3, r2
 8009ae2:	095b      	lsrs	r3, r3, #5
 8009ae4:	011c      	lsls	r4, r3, #4
 8009ae6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009aea:	2200      	movs	r2, #0
 8009aec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009af0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009af4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009af8:	4642      	mov	r2, r8
 8009afa:	464b      	mov	r3, r9
 8009afc:	1891      	adds	r1, r2, r2
 8009afe:	64b9      	str	r1, [r7, #72]	; 0x48
 8009b00:	415b      	adcs	r3, r3
 8009b02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009b08:	4641      	mov	r1, r8
 8009b0a:	eb12 0a01 	adds.w	sl, r2, r1
 8009b0e:	4649      	mov	r1, r9
 8009b10:	eb43 0b01 	adc.w	fp, r3, r1
 8009b14:	f04f 0200 	mov.w	r2, #0
 8009b18:	f04f 0300 	mov.w	r3, #0
 8009b1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009b20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009b24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b28:	4692      	mov	sl, r2
 8009b2a:	469b      	mov	fp, r3
 8009b2c:	4643      	mov	r3, r8
 8009b2e:	eb1a 0303 	adds.w	r3, sl, r3
 8009b32:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b36:	464b      	mov	r3, r9
 8009b38:	eb4b 0303 	adc.w	r3, fp, r3
 8009b3c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b44:	685b      	ldr	r3, [r3, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b4c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009b50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009b54:	460b      	mov	r3, r1
 8009b56:	18db      	adds	r3, r3, r3
 8009b58:	643b      	str	r3, [r7, #64]	; 0x40
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	eb42 0303 	adc.w	r3, r2, r3
 8009b60:	647b      	str	r3, [r7, #68]	; 0x44
 8009b62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009b66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009b6a:	f7f7 f86d 	bl	8000c48 <__aeabi_uldivmod>
 8009b6e:	4602      	mov	r2, r0
 8009b70:	460b      	mov	r3, r1
 8009b72:	4611      	mov	r1, r2
 8009b74:	4b3b      	ldr	r3, [pc, #236]	; (8009c64 <UART_SetConfig+0x2d4>)
 8009b76:	fba3 2301 	umull	r2, r3, r3, r1
 8009b7a:	095b      	lsrs	r3, r3, #5
 8009b7c:	2264      	movs	r2, #100	; 0x64
 8009b7e:	fb02 f303 	mul.w	r3, r2, r3
 8009b82:	1acb      	subs	r3, r1, r3
 8009b84:	00db      	lsls	r3, r3, #3
 8009b86:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009b8a:	4b36      	ldr	r3, [pc, #216]	; (8009c64 <UART_SetConfig+0x2d4>)
 8009b8c:	fba3 2302 	umull	r2, r3, r3, r2
 8009b90:	095b      	lsrs	r3, r3, #5
 8009b92:	005b      	lsls	r3, r3, #1
 8009b94:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009b98:	441c      	add	r4, r3
 8009b9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009ba4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009ba8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009bac:	4642      	mov	r2, r8
 8009bae:	464b      	mov	r3, r9
 8009bb0:	1891      	adds	r1, r2, r2
 8009bb2:	63b9      	str	r1, [r7, #56]	; 0x38
 8009bb4:	415b      	adcs	r3, r3
 8009bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009bbc:	4641      	mov	r1, r8
 8009bbe:	1851      	adds	r1, r2, r1
 8009bc0:	6339      	str	r1, [r7, #48]	; 0x30
 8009bc2:	4649      	mov	r1, r9
 8009bc4:	414b      	adcs	r3, r1
 8009bc6:	637b      	str	r3, [r7, #52]	; 0x34
 8009bc8:	f04f 0200 	mov.w	r2, #0
 8009bcc:	f04f 0300 	mov.w	r3, #0
 8009bd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009bd4:	4659      	mov	r1, fp
 8009bd6:	00cb      	lsls	r3, r1, #3
 8009bd8:	4651      	mov	r1, sl
 8009bda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009bde:	4651      	mov	r1, sl
 8009be0:	00ca      	lsls	r2, r1, #3
 8009be2:	4610      	mov	r0, r2
 8009be4:	4619      	mov	r1, r3
 8009be6:	4603      	mov	r3, r0
 8009be8:	4642      	mov	r2, r8
 8009bea:	189b      	adds	r3, r3, r2
 8009bec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009bf0:	464b      	mov	r3, r9
 8009bf2:	460a      	mov	r2, r1
 8009bf4:	eb42 0303 	adc.w	r3, r2, r3
 8009bf8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009bfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c00:	685b      	ldr	r3, [r3, #4]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009c08:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009c0c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009c10:	460b      	mov	r3, r1
 8009c12:	18db      	adds	r3, r3, r3
 8009c14:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c16:	4613      	mov	r3, r2
 8009c18:	eb42 0303 	adc.w	r3, r2, r3
 8009c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c1e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c22:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009c26:	f7f7 f80f 	bl	8000c48 <__aeabi_uldivmod>
 8009c2a:	4602      	mov	r2, r0
 8009c2c:	460b      	mov	r3, r1
 8009c2e:	4b0d      	ldr	r3, [pc, #52]	; (8009c64 <UART_SetConfig+0x2d4>)
 8009c30:	fba3 1302 	umull	r1, r3, r3, r2
 8009c34:	095b      	lsrs	r3, r3, #5
 8009c36:	2164      	movs	r1, #100	; 0x64
 8009c38:	fb01 f303 	mul.w	r3, r1, r3
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	00db      	lsls	r3, r3, #3
 8009c40:	3332      	adds	r3, #50	; 0x32
 8009c42:	4a08      	ldr	r2, [pc, #32]	; (8009c64 <UART_SetConfig+0x2d4>)
 8009c44:	fba2 2303 	umull	r2, r3, r2, r3
 8009c48:	095b      	lsrs	r3, r3, #5
 8009c4a:	f003 0207 	and.w	r2, r3, #7
 8009c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	4422      	add	r2, r4
 8009c56:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009c58:	e106      	b.n	8009e68 <UART_SetConfig+0x4d8>
 8009c5a:	bf00      	nop
 8009c5c:	40011000 	.word	0x40011000
 8009c60:	40011400 	.word	0x40011400
 8009c64:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c68:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009c72:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009c76:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009c7a:	4642      	mov	r2, r8
 8009c7c:	464b      	mov	r3, r9
 8009c7e:	1891      	adds	r1, r2, r2
 8009c80:	6239      	str	r1, [r7, #32]
 8009c82:	415b      	adcs	r3, r3
 8009c84:	627b      	str	r3, [r7, #36]	; 0x24
 8009c86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c8a:	4641      	mov	r1, r8
 8009c8c:	1854      	adds	r4, r2, r1
 8009c8e:	4649      	mov	r1, r9
 8009c90:	eb43 0501 	adc.w	r5, r3, r1
 8009c94:	f04f 0200 	mov.w	r2, #0
 8009c98:	f04f 0300 	mov.w	r3, #0
 8009c9c:	00eb      	lsls	r3, r5, #3
 8009c9e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009ca2:	00e2      	lsls	r2, r4, #3
 8009ca4:	4614      	mov	r4, r2
 8009ca6:	461d      	mov	r5, r3
 8009ca8:	4643      	mov	r3, r8
 8009caa:	18e3      	adds	r3, r4, r3
 8009cac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009cb0:	464b      	mov	r3, r9
 8009cb2:	eb45 0303 	adc.w	r3, r5, r3
 8009cb6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009cba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009cc6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009cca:	f04f 0200 	mov.w	r2, #0
 8009cce:	f04f 0300 	mov.w	r3, #0
 8009cd2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009cd6:	4629      	mov	r1, r5
 8009cd8:	008b      	lsls	r3, r1, #2
 8009cda:	4621      	mov	r1, r4
 8009cdc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ce0:	4621      	mov	r1, r4
 8009ce2:	008a      	lsls	r2, r1, #2
 8009ce4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009ce8:	f7f6 ffae 	bl	8000c48 <__aeabi_uldivmod>
 8009cec:	4602      	mov	r2, r0
 8009cee:	460b      	mov	r3, r1
 8009cf0:	4b60      	ldr	r3, [pc, #384]	; (8009e74 <UART_SetConfig+0x4e4>)
 8009cf2:	fba3 2302 	umull	r2, r3, r3, r2
 8009cf6:	095b      	lsrs	r3, r3, #5
 8009cf8:	011c      	lsls	r4, r3, #4
 8009cfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009d04:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009d08:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009d0c:	4642      	mov	r2, r8
 8009d0e:	464b      	mov	r3, r9
 8009d10:	1891      	adds	r1, r2, r2
 8009d12:	61b9      	str	r1, [r7, #24]
 8009d14:	415b      	adcs	r3, r3
 8009d16:	61fb      	str	r3, [r7, #28]
 8009d18:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d1c:	4641      	mov	r1, r8
 8009d1e:	1851      	adds	r1, r2, r1
 8009d20:	6139      	str	r1, [r7, #16]
 8009d22:	4649      	mov	r1, r9
 8009d24:	414b      	adcs	r3, r1
 8009d26:	617b      	str	r3, [r7, #20]
 8009d28:	f04f 0200 	mov.w	r2, #0
 8009d2c:	f04f 0300 	mov.w	r3, #0
 8009d30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d34:	4659      	mov	r1, fp
 8009d36:	00cb      	lsls	r3, r1, #3
 8009d38:	4651      	mov	r1, sl
 8009d3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d3e:	4651      	mov	r1, sl
 8009d40:	00ca      	lsls	r2, r1, #3
 8009d42:	4610      	mov	r0, r2
 8009d44:	4619      	mov	r1, r3
 8009d46:	4603      	mov	r3, r0
 8009d48:	4642      	mov	r2, r8
 8009d4a:	189b      	adds	r3, r3, r2
 8009d4c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d50:	464b      	mov	r3, r9
 8009d52:	460a      	mov	r2, r1
 8009d54:	eb42 0303 	adc.w	r3, r2, r3
 8009d58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d66:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009d68:	f04f 0200 	mov.w	r2, #0
 8009d6c:	f04f 0300 	mov.w	r3, #0
 8009d70:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009d74:	4649      	mov	r1, r9
 8009d76:	008b      	lsls	r3, r1, #2
 8009d78:	4641      	mov	r1, r8
 8009d7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d7e:	4641      	mov	r1, r8
 8009d80:	008a      	lsls	r2, r1, #2
 8009d82:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009d86:	f7f6 ff5f 	bl	8000c48 <__aeabi_uldivmod>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	4611      	mov	r1, r2
 8009d90:	4b38      	ldr	r3, [pc, #224]	; (8009e74 <UART_SetConfig+0x4e4>)
 8009d92:	fba3 2301 	umull	r2, r3, r3, r1
 8009d96:	095b      	lsrs	r3, r3, #5
 8009d98:	2264      	movs	r2, #100	; 0x64
 8009d9a:	fb02 f303 	mul.w	r3, r2, r3
 8009d9e:	1acb      	subs	r3, r1, r3
 8009da0:	011b      	lsls	r3, r3, #4
 8009da2:	3332      	adds	r3, #50	; 0x32
 8009da4:	4a33      	ldr	r2, [pc, #204]	; (8009e74 <UART_SetConfig+0x4e4>)
 8009da6:	fba2 2303 	umull	r2, r3, r2, r3
 8009daa:	095b      	lsrs	r3, r3, #5
 8009dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009db0:	441c      	add	r4, r3
 8009db2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009db6:	2200      	movs	r2, #0
 8009db8:	673b      	str	r3, [r7, #112]	; 0x70
 8009dba:	677a      	str	r2, [r7, #116]	; 0x74
 8009dbc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009dc0:	4642      	mov	r2, r8
 8009dc2:	464b      	mov	r3, r9
 8009dc4:	1891      	adds	r1, r2, r2
 8009dc6:	60b9      	str	r1, [r7, #8]
 8009dc8:	415b      	adcs	r3, r3
 8009dca:	60fb      	str	r3, [r7, #12]
 8009dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009dd0:	4641      	mov	r1, r8
 8009dd2:	1851      	adds	r1, r2, r1
 8009dd4:	6039      	str	r1, [r7, #0]
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	414b      	adcs	r3, r1
 8009dda:	607b      	str	r3, [r7, #4]
 8009ddc:	f04f 0200 	mov.w	r2, #0
 8009de0:	f04f 0300 	mov.w	r3, #0
 8009de4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009de8:	4659      	mov	r1, fp
 8009dea:	00cb      	lsls	r3, r1, #3
 8009dec:	4651      	mov	r1, sl
 8009dee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009df2:	4651      	mov	r1, sl
 8009df4:	00ca      	lsls	r2, r1, #3
 8009df6:	4610      	mov	r0, r2
 8009df8:	4619      	mov	r1, r3
 8009dfa:	4603      	mov	r3, r0
 8009dfc:	4642      	mov	r2, r8
 8009dfe:	189b      	adds	r3, r3, r2
 8009e00:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e02:	464b      	mov	r3, r9
 8009e04:	460a      	mov	r2, r1
 8009e06:	eb42 0303 	adc.w	r3, r2, r3
 8009e0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	663b      	str	r3, [r7, #96]	; 0x60
 8009e16:	667a      	str	r2, [r7, #100]	; 0x64
 8009e18:	f04f 0200 	mov.w	r2, #0
 8009e1c:	f04f 0300 	mov.w	r3, #0
 8009e20:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009e24:	4649      	mov	r1, r9
 8009e26:	008b      	lsls	r3, r1, #2
 8009e28:	4641      	mov	r1, r8
 8009e2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e2e:	4641      	mov	r1, r8
 8009e30:	008a      	lsls	r2, r1, #2
 8009e32:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009e36:	f7f6 ff07 	bl	8000c48 <__aeabi_uldivmod>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	4b0d      	ldr	r3, [pc, #52]	; (8009e74 <UART_SetConfig+0x4e4>)
 8009e40:	fba3 1302 	umull	r1, r3, r3, r2
 8009e44:	095b      	lsrs	r3, r3, #5
 8009e46:	2164      	movs	r1, #100	; 0x64
 8009e48:	fb01 f303 	mul.w	r3, r1, r3
 8009e4c:	1ad3      	subs	r3, r2, r3
 8009e4e:	011b      	lsls	r3, r3, #4
 8009e50:	3332      	adds	r3, #50	; 0x32
 8009e52:	4a08      	ldr	r2, [pc, #32]	; (8009e74 <UART_SetConfig+0x4e4>)
 8009e54:	fba2 2303 	umull	r2, r3, r2, r3
 8009e58:	095b      	lsrs	r3, r3, #5
 8009e5a:	f003 020f 	and.w	r2, r3, #15
 8009e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4422      	add	r2, r4
 8009e66:	609a      	str	r2, [r3, #8]
}
 8009e68:	bf00      	nop
 8009e6a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e74:	51eb851f 	.word	0x51eb851f

08009e78 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009e78:	b084      	sub	sp, #16
 8009e7a:	b480      	push	{r7}
 8009e7c:	b085      	sub	sp, #20
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	f107 001c 	add.w	r0, r7, #28
 8009e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009e8e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009e90:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009e92:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009e96:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009e9a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009e9e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009ea2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009ea4:	68fa      	ldr	r2, [r7, #12]
 8009ea6:	4313      	orrs	r3, r2
 8009ea8:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009eb2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	431a      	orrs	r2, r3
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009ebe:	2300      	movs	r3, #0
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3714      	adds	r7, #20
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	b004      	add	sp, #16
 8009ecc:	4770      	bx	lr

08009ece <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009ece:	b480      	push	{r7}
 8009ed0:	b083      	sub	sp, #12
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	370c      	adds	r7, #12
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009ee8:	b480      	push	{r7}
 8009eea:	b083      	sub	sp, #12
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
 8009ef0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009efc:	2300      	movs	r3, #0
}
 8009efe:	4618      	mov	r0, r3
 8009f00:	370c      	adds	r7, #12
 8009f02:	46bd      	mov	sp, r7
 8009f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f08:	4770      	bx	lr

08009f0a <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009f0a:	b480      	push	{r7}
 8009f0c:	b083      	sub	sp, #12
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2203      	movs	r2, #3
 8009f16:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	370c      	adds	r7, #12
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f24:	4770      	bx	lr

08009f26 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009f26:	b480      	push	{r7}
 8009f28:	b083      	sub	sp, #12
 8009f2a:	af00      	add	r7, sp, #0
 8009f2c:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	f003 0303 	and.w	r3, r3, #3
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	370c      	adds	r7, #12
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f40:	4770      	bx	lr

08009f42 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009f42:	b480      	push	{r7}
 8009f44:	b085      	sub	sp, #20
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	681a      	ldr	r2, [r3, #0]
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009f60:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009f66:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009f6c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	4313      	orrs	r3, r2
 8009f72:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009f7c:	f023 030f 	bic.w	r3, r3, #15
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	431a      	orrs	r2, r3
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009f88:	2300      	movs	r3, #0
}
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	3714      	adds	r7, #20
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr

08009f96 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009f96:	b480      	push	{r7}
 8009f98:	b083      	sub	sp, #12
 8009f9a:	af00      	add	r7, sp, #0
 8009f9c:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	691b      	ldr	r3, [r3, #16]
 8009fa2:	b2db      	uxtb	r3, r3
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	370c      	adds	r7, #12
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fae:	4770      	bx	lr

08009fb0 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	3314      	adds	r3, #20
 8009fbe:	461a      	mov	r2, r3
 8009fc0:	683b      	ldr	r3, [r7, #0]
 8009fc2:	4413      	add	r3, r2
 8009fc4:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
}  
 8009fca:	4618      	mov	r0, r3
 8009fcc:	3714      	adds	r7, #20
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr

08009fd6 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009fd6:	b480      	push	{r7}
 8009fd8:	b085      	sub	sp, #20
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	681a      	ldr	r2, [r3, #0]
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	685a      	ldr	r2, [r3, #4]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009ffc:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a002:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a008:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a014:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	431a      	orrs	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a020:	2300      	movs	r3, #0

}
 800a022:	4618      	mov	r0, r3
 800a024:	3714      	adds	r7, #20
 800a026:	46bd      	mov	sp, r7
 800a028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02c:	4770      	bx	lr

0800a02e <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a02e:	b580      	push	{r7, lr}
 800a030:	b088      	sub	sp, #32
 800a032:	af00      	add	r7, sp, #0
 800a034:	6078      	str	r0, [r7, #4]
 800a036:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a038:	683b      	ldr	r3, [r7, #0]
 800a03a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a03c:	2310      	movs	r3, #16
 800a03e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a040:	2340      	movs	r3, #64	; 0x40
 800a042:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a044:	2300      	movs	r3, #0
 800a046:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a048:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a04c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a04e:	f107 0308 	add.w	r3, r7, #8
 800a052:	4619      	mov	r1, r3
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f7ff ff74 	bl	8009f42 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a05a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a05e:	2110      	movs	r1, #16
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 fa19 	bl	800a498 <SDMMC_GetCmdResp1>
 800a066:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a068:	69fb      	ldr	r3, [r7, #28]
}
 800a06a:	4618      	mov	r0, r3
 800a06c:	3720      	adds	r7, #32
 800a06e:	46bd      	mov	sp, r7
 800a070:	bd80      	pop	{r7, pc}

0800a072 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a072:	b580      	push	{r7, lr}
 800a074:	b088      	sub	sp, #32
 800a076:	af00      	add	r7, sp, #0
 800a078:	6078      	str	r0, [r7, #4]
 800a07a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a07c:	683b      	ldr	r3, [r7, #0]
 800a07e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a080:	2311      	movs	r3, #17
 800a082:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a084:	2340      	movs	r3, #64	; 0x40
 800a086:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a088:	2300      	movs	r3, #0
 800a08a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a08c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a090:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a092:	f107 0308 	add.w	r3, r7, #8
 800a096:	4619      	mov	r1, r3
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f7ff ff52 	bl	8009f42 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a09e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0a2:	2111      	movs	r1, #17
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 f9f7 	bl	800a498 <SDMMC_GetCmdResp1>
 800a0aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0ac:	69fb      	ldr	r3, [r7, #28]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3720      	adds	r7, #32
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b088      	sub	sp, #32
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
 800a0be:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a0c4:	2312      	movs	r3, #18
 800a0c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0c8:	2340      	movs	r3, #64	; 0x40
 800a0ca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0cc:	2300      	movs	r3, #0
 800a0ce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0d4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0d6:	f107 0308 	add.w	r3, r7, #8
 800a0da:	4619      	mov	r1, r3
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f7ff ff30 	bl	8009f42 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a0e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0e6:	2112      	movs	r1, #18
 800a0e8:	6878      	ldr	r0, [r7, #4]
 800a0ea:	f000 f9d5 	bl	800a498 <SDMMC_GetCmdResp1>
 800a0ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0f0:	69fb      	ldr	r3, [r7, #28]
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3720      	adds	r7, #32
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b088      	sub	sp, #32
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
 800a102:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a108:	2318      	movs	r3, #24
 800a10a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a10c:	2340      	movs	r3, #64	; 0x40
 800a10e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a110:	2300      	movs	r3, #0
 800a112:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a118:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a11a:	f107 0308 	add.w	r3, r7, #8
 800a11e:	4619      	mov	r1, r3
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	f7ff ff0e 	bl	8009f42 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a126:	f241 3288 	movw	r2, #5000	; 0x1388
 800a12a:	2118      	movs	r1, #24
 800a12c:	6878      	ldr	r0, [r7, #4]
 800a12e:	f000 f9b3 	bl	800a498 <SDMMC_GetCmdResp1>
 800a132:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a134:	69fb      	ldr	r3, [r7, #28]
}
 800a136:	4618      	mov	r0, r3
 800a138:	3720      	adds	r7, #32
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}

0800a13e <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a13e:	b580      	push	{r7, lr}
 800a140:	b088      	sub	sp, #32
 800a142:	af00      	add	r7, sp, #0
 800a144:	6078      	str	r0, [r7, #4]
 800a146:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a14c:	2319      	movs	r3, #25
 800a14e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a150:	2340      	movs	r3, #64	; 0x40
 800a152:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a154:	2300      	movs	r3, #0
 800a156:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a158:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a15c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a15e:	f107 0308 	add.w	r3, r7, #8
 800a162:	4619      	mov	r1, r3
 800a164:	6878      	ldr	r0, [r7, #4]
 800a166:	f7ff feec 	bl	8009f42 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a16a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a16e:	2119      	movs	r1, #25
 800a170:	6878      	ldr	r0, [r7, #4]
 800a172:	f000 f991 	bl	800a498 <SDMMC_GetCmdResp1>
 800a176:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a178:	69fb      	ldr	r3, [r7, #28]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3720      	adds	r7, #32
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}
	...

0800a184 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b088      	sub	sp, #32
 800a188:	af00      	add	r7, sp, #0
 800a18a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a18c:	2300      	movs	r3, #0
 800a18e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a190:	230c      	movs	r3, #12
 800a192:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a194:	2340      	movs	r3, #64	; 0x40
 800a196:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a198:	2300      	movs	r3, #0
 800a19a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a19c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1a0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1a2:	f107 0308 	add.w	r3, r7, #8
 800a1a6:	4619      	mov	r1, r3
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f7ff feca 	bl	8009f42 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a1ae:	4a05      	ldr	r2, [pc, #20]	; (800a1c4 <SDMMC_CmdStopTransfer+0x40>)
 800a1b0:	210c      	movs	r1, #12
 800a1b2:	6878      	ldr	r0, [r7, #4]
 800a1b4:	f000 f970 	bl	800a498 <SDMMC_GetCmdResp1>
 800a1b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1ba:	69fb      	ldr	r3, [r7, #28]
}
 800a1bc:	4618      	mov	r0, r3
 800a1be:	3720      	adds	r7, #32
 800a1c0:	46bd      	mov	sp, r7
 800a1c2:	bd80      	pop	{r7, pc}
 800a1c4:	05f5e100 	.word	0x05f5e100

0800a1c8 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b08a      	sub	sp, #40	; 0x28
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a1d8:	2307      	movs	r3, #7
 800a1da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1dc:	2340      	movs	r3, #64	; 0x40
 800a1de:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1e8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1ea:	f107 0310 	add.w	r3, r7, #16
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f7ff fea6 	bl	8009f42 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a1f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1fa:	2107      	movs	r1, #7
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f000 f94b 	bl	800a498 <SDMMC_GetCmdResp1>
 800a202:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a206:	4618      	mov	r0, r3
 800a208:	3728      	adds	r7, #40	; 0x28
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b088      	sub	sp, #32
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a216:	2300      	movs	r3, #0
 800a218:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a21a:	2300      	movs	r3, #0
 800a21c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a21e:	2300      	movs	r3, #0
 800a220:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a222:	2300      	movs	r3, #0
 800a224:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a226:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a22a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a22c:	f107 0308 	add.w	r3, r7, #8
 800a230:	4619      	mov	r1, r3
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f7ff fe85 	bl	8009f42 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 fb65 	bl	800a908 <SDMMC_GetCmdError>
 800a23e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a240:	69fb      	ldr	r3, [r7, #28]
}
 800a242:	4618      	mov	r0, r3
 800a244:	3720      	adds	r7, #32
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b088      	sub	sp, #32
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a252:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a256:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a258:	2308      	movs	r3, #8
 800a25a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a25c:	2340      	movs	r3, #64	; 0x40
 800a25e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a260:	2300      	movs	r3, #0
 800a262:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a268:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a26a:	f107 0308 	add.w	r3, r7, #8
 800a26e:	4619      	mov	r1, r3
 800a270:	6878      	ldr	r0, [r7, #4]
 800a272:	f7ff fe66 	bl	8009f42 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a276:	6878      	ldr	r0, [r7, #4]
 800a278:	f000 faf8 	bl	800a86c <SDMMC_GetCmdResp7>
 800a27c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a27e:	69fb      	ldr	r3, [r7, #28]
}
 800a280:	4618      	mov	r0, r3
 800a282:	3720      	adds	r7, #32
 800a284:	46bd      	mov	sp, r7
 800a286:	bd80      	pop	{r7, pc}

0800a288 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b088      	sub	sp, #32
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]
 800a290:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a292:	683b      	ldr	r3, [r7, #0]
 800a294:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a296:	2337      	movs	r3, #55	; 0x37
 800a298:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a29a:	2340      	movs	r3, #64	; 0x40
 800a29c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2a6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2a8:	f107 0308 	add.w	r3, r7, #8
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f7ff fe47 	bl	8009f42 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a2b4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2b8:	2137      	movs	r1, #55	; 0x37
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 f8ec 	bl	800a498 <SDMMC_GetCmdResp1>
 800a2c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2c2:	69fb      	ldr	r3, [r7, #28]
}
 800a2c4:	4618      	mov	r0, r3
 800a2c6:	3720      	adds	r7, #32
 800a2c8:	46bd      	mov	sp, r7
 800a2ca:	bd80      	pop	{r7, pc}

0800a2cc <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b088      	sub	sp, #32
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a2dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a2e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a2e2:	2329      	movs	r3, #41	; 0x29
 800a2e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2e6:	2340      	movs	r3, #64	; 0x40
 800a2e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2f4:	f107 0308 	add.w	r3, r7, #8
 800a2f8:	4619      	mov	r1, r3
 800a2fa:	6878      	ldr	r0, [r7, #4]
 800a2fc:	f7ff fe21 	bl	8009f42 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f000 f9ff 	bl	800a704 <SDMMC_GetCmdResp3>
 800a306:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a308:	69fb      	ldr	r3, [r7, #28]
}
 800a30a:	4618      	mov	r0, r3
 800a30c:	3720      	adds	r7, #32
 800a30e:	46bd      	mov	sp, r7
 800a310:	bd80      	pop	{r7, pc}

0800a312 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a312:	b580      	push	{r7, lr}
 800a314:	b088      	sub	sp, #32
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
 800a31a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a320:	2306      	movs	r3, #6
 800a322:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a324:	2340      	movs	r3, #64	; 0x40
 800a326:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a328:	2300      	movs	r3, #0
 800a32a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a32c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a330:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a332:	f107 0308 	add.w	r3, r7, #8
 800a336:	4619      	mov	r1, r3
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f7ff fe02 	bl	8009f42 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a33e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a342:	2106      	movs	r1, #6
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f000 f8a7 	bl	800a498 <SDMMC_GetCmdResp1>
 800a34a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a34c:	69fb      	ldr	r3, [r7, #28]
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3720      	adds	r7, #32
 800a352:	46bd      	mov	sp, r7
 800a354:	bd80      	pop	{r7, pc}

0800a356 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a356:	b580      	push	{r7, lr}
 800a358:	b088      	sub	sp, #32
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a35e:	2300      	movs	r3, #0
 800a360:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a362:	2333      	movs	r3, #51	; 0x33
 800a364:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a366:	2340      	movs	r3, #64	; 0x40
 800a368:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a36a:	2300      	movs	r3, #0
 800a36c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a36e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a372:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a374:	f107 0308 	add.w	r3, r7, #8
 800a378:	4619      	mov	r1, r3
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f7ff fde1 	bl	8009f42 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a380:	f241 3288 	movw	r2, #5000	; 0x1388
 800a384:	2133      	movs	r1, #51	; 0x33
 800a386:	6878      	ldr	r0, [r7, #4]
 800a388:	f000 f886 	bl	800a498 <SDMMC_GetCmdResp1>
 800a38c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a38e:	69fb      	ldr	r3, [r7, #28]
}
 800a390:	4618      	mov	r0, r3
 800a392:	3720      	adds	r7, #32
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b088      	sub	sp, #32
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a3a8:	23c0      	movs	r3, #192	; 0xc0
 800a3aa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3ac:	2300      	movs	r3, #0
 800a3ae:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3b4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3b6:	f107 0308 	add.w	r3, r7, #8
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f7ff fdc0 	bl	8009f42 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a3c2:	6878      	ldr	r0, [r7, #4]
 800a3c4:	f000 f956 	bl	800a674 <SDMMC_GetCmdResp2>
 800a3c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3ca:	69fb      	ldr	r3, [r7, #28]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3720      	adds	r7, #32
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b088      	sub	sp, #32
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a3de:	683b      	ldr	r3, [r7, #0]
 800a3e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a3e2:	2309      	movs	r3, #9
 800a3e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a3e6:	23c0      	movs	r3, #192	; 0xc0
 800a3e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3f4:	f107 0308 	add.w	r3, r7, #8
 800a3f8:	4619      	mov	r1, r3
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f7ff fda1 	bl	8009f42 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 f937 	bl	800a674 <SDMMC_GetCmdResp2>
 800a406:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a408:	69fb      	ldr	r3, [r7, #28]
}
 800a40a:	4618      	mov	r0, r3
 800a40c:	3720      	adds	r7, #32
 800a40e:	46bd      	mov	sp, r7
 800a410:	bd80      	pop	{r7, pc}

0800a412 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a412:	b580      	push	{r7, lr}
 800a414:	b088      	sub	sp, #32
 800a416:	af00      	add	r7, sp, #0
 800a418:	6078      	str	r0, [r7, #4]
 800a41a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a41c:	2300      	movs	r3, #0
 800a41e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a420:	2303      	movs	r3, #3
 800a422:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a424:	2340      	movs	r3, #64	; 0x40
 800a426:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a428:	2300      	movs	r3, #0
 800a42a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a42c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a430:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a432:	f107 0308 	add.w	r3, r7, #8
 800a436:	4619      	mov	r1, r3
 800a438:	6878      	ldr	r0, [r7, #4]
 800a43a:	f7ff fd82 	bl	8009f42 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a43e:	683a      	ldr	r2, [r7, #0]
 800a440:	2103      	movs	r1, #3
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 f99c 	bl	800a780 <SDMMC_GetCmdResp6>
 800a448:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a44a:	69fb      	ldr	r3, [r7, #28]
}
 800a44c:	4618      	mov	r0, r3
 800a44e:	3720      	adds	r7, #32
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}

0800a454 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a454:	b580      	push	{r7, lr}
 800a456:	b088      	sub	sp, #32
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a462:	230d      	movs	r3, #13
 800a464:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a466:	2340      	movs	r3, #64	; 0x40
 800a468:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a46a:	2300      	movs	r3, #0
 800a46c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a46e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a472:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a474:	f107 0308 	add.w	r3, r7, #8
 800a478:	4619      	mov	r1, r3
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f7ff fd61 	bl	8009f42 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a480:	f241 3288 	movw	r2, #5000	; 0x1388
 800a484:	210d      	movs	r1, #13
 800a486:	6878      	ldr	r0, [r7, #4]
 800a488:	f000 f806 	bl	800a498 <SDMMC_GetCmdResp1>
 800a48c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a48e:	69fb      	ldr	r3, [r7, #28]
}
 800a490:	4618      	mov	r0, r3
 800a492:	3720      	adds	r7, #32
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b088      	sub	sp, #32
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	460b      	mov	r3, r1
 800a4a2:	607a      	str	r2, [r7, #4]
 800a4a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a4a6:	4b70      	ldr	r3, [pc, #448]	; (800a668 <SDMMC_GetCmdResp1+0x1d0>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a70      	ldr	r2, [pc, #448]	; (800a66c <SDMMC_GetCmdResp1+0x1d4>)
 800a4ac:	fba2 2303 	umull	r2, r3, r2, r3
 800a4b0:	0a5a      	lsrs	r2, r3, #9
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	fb02 f303 	mul.w	r3, r2, r3
 800a4b8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a4ba:	69fb      	ldr	r3, [r7, #28]
 800a4bc:	1e5a      	subs	r2, r3, #1
 800a4be:	61fa      	str	r2, [r7, #28]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d102      	bne.n	800a4ca <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a4c8:	e0c9      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4ce:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d0ef      	beq.n	800a4ba <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a4da:	69bb      	ldr	r3, [r7, #24]
 800a4dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1ea      	bne.n	800a4ba <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4e8:	f003 0304 	and.w	r3, r3, #4
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d004      	beq.n	800a4fa <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	2204      	movs	r2, #4
 800a4f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4f6:	2304      	movs	r3, #4
 800a4f8:	e0b1      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4fe:	f003 0301 	and.w	r3, r3, #1
 800a502:	2b00      	cmp	r3, #0
 800a504:	d004      	beq.n	800a510 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	2201      	movs	r2, #1
 800a50a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a50c:	2301      	movs	r3, #1
 800a50e:	e0a6      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	22c5      	movs	r2, #197	; 0xc5
 800a514:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a516:	68f8      	ldr	r0, [r7, #12]
 800a518:	f7ff fd3d 	bl	8009f96 <SDIO_GetCommandResponse>
 800a51c:	4603      	mov	r3, r0
 800a51e:	461a      	mov	r2, r3
 800a520:	7afb      	ldrb	r3, [r7, #11]
 800a522:	4293      	cmp	r3, r2
 800a524:	d001      	beq.n	800a52a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a526:	2301      	movs	r3, #1
 800a528:	e099      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a52a:	2100      	movs	r1, #0
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	f7ff fd3f 	bl	8009fb0 <SDIO_GetResponse>
 800a532:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a534:	697a      	ldr	r2, [r7, #20]
 800a536:	4b4e      	ldr	r3, [pc, #312]	; (800a670 <SDMMC_GetCmdResp1+0x1d8>)
 800a538:	4013      	ands	r3, r2
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d101      	bne.n	800a542 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a53e:	2300      	movs	r3, #0
 800a540:	e08d      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a542:	697b      	ldr	r3, [r7, #20]
 800a544:	2b00      	cmp	r3, #0
 800a546:	da02      	bge.n	800a54e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a548:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a54c:	e087      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a554:	2b00      	cmp	r3, #0
 800a556:	d001      	beq.n	800a55c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a558:	2340      	movs	r3, #64	; 0x40
 800a55a:	e080      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a562:	2b00      	cmp	r3, #0
 800a564:	d001      	beq.n	800a56a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a566:	2380      	movs	r3, #128	; 0x80
 800a568:	e079      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a56a:	697b      	ldr	r3, [r7, #20]
 800a56c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a570:	2b00      	cmp	r3, #0
 800a572:	d002      	beq.n	800a57a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a574:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a578:	e071      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a580:	2b00      	cmp	r3, #0
 800a582:	d002      	beq.n	800a58a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a584:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a588:	e069      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a590:	2b00      	cmp	r3, #0
 800a592:	d002      	beq.n	800a59a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a594:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a598:	e061      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d002      	beq.n	800a5aa <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a5a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a5a8:	e059      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d002      	beq.n	800a5ba <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a5b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a5b8:	e051      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a5ba:	697b      	ldr	r3, [r7, #20]
 800a5bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d002      	beq.n	800a5ca <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a5c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a5c8:	e049      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a5ca:	697b      	ldr	r3, [r7, #20]
 800a5cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d002      	beq.n	800a5da <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a5d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a5d8:	e041      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d002      	beq.n	800a5ea <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a5e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5e8:	e039      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a5ea:	697b      	ldr	r3, [r7, #20]
 800a5ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d002      	beq.n	800a5fa <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a5f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a5f8:	e031      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a600:	2b00      	cmp	r3, #0
 800a602:	d002      	beq.n	800a60a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a604:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a608:	e029      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a610:	2b00      	cmp	r3, #0
 800a612:	d002      	beq.n	800a61a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a614:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a618:	e021      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a620:	2b00      	cmp	r3, #0
 800a622:	d002      	beq.n	800a62a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a624:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a628:	e019      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a62a:	697b      	ldr	r3, [r7, #20]
 800a62c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a630:	2b00      	cmp	r3, #0
 800a632:	d002      	beq.n	800a63a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a634:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a638:	e011      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a63a:	697b      	ldr	r3, [r7, #20]
 800a63c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a640:	2b00      	cmp	r3, #0
 800a642:	d002      	beq.n	800a64a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a644:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a648:	e009      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a64a:	697b      	ldr	r3, [r7, #20]
 800a64c:	f003 0308 	and.w	r3, r3, #8
 800a650:	2b00      	cmp	r3, #0
 800a652:	d002      	beq.n	800a65a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a654:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a658:	e001      	b.n	800a65e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a65a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a65e:	4618      	mov	r0, r3
 800a660:	3720      	adds	r7, #32
 800a662:	46bd      	mov	sp, r7
 800a664:	bd80      	pop	{r7, pc}
 800a666:	bf00      	nop
 800a668:	20000024 	.word	0x20000024
 800a66c:	10624dd3 	.word	0x10624dd3
 800a670:	fdffe008 	.word	0xfdffe008

0800a674 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a674:	b480      	push	{r7}
 800a676:	b085      	sub	sp, #20
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a67c:	4b1f      	ldr	r3, [pc, #124]	; (800a6fc <SDMMC_GetCmdResp2+0x88>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a1f      	ldr	r2, [pc, #124]	; (800a700 <SDMMC_GetCmdResp2+0x8c>)
 800a682:	fba2 2303 	umull	r2, r3, r2, r3
 800a686:	0a5b      	lsrs	r3, r3, #9
 800a688:	f241 3288 	movw	r2, #5000	; 0x1388
 800a68c:	fb02 f303 	mul.w	r3, r2, r3
 800a690:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	1e5a      	subs	r2, r3, #1
 800a696:	60fa      	str	r2, [r7, #12]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d102      	bne.n	800a6a2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a69c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6a0:	e026      	b.n	800a6f0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6a6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d0ef      	beq.n	800a692 <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a6b2:	68bb      	ldr	r3, [r7, #8]
 800a6b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d1ea      	bne.n	800a692 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6c0:	f003 0304 	and.w	r3, r3, #4
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d004      	beq.n	800a6d2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2204      	movs	r2, #4
 800a6cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a6ce:	2304      	movs	r3, #4
 800a6d0:	e00e      	b.n	800a6f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6d6:	f003 0301 	and.w	r3, r3, #1
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d004      	beq.n	800a6e8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	e003      	b.n	800a6f0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	22c5      	movs	r2, #197	; 0xc5
 800a6ec:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a6ee:	2300      	movs	r3, #0
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr
 800a6fc:	20000024 	.word	0x20000024
 800a700:	10624dd3 	.word	0x10624dd3

0800a704 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a704:	b480      	push	{r7}
 800a706:	b085      	sub	sp, #20
 800a708:	af00      	add	r7, sp, #0
 800a70a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a70c:	4b1a      	ldr	r3, [pc, #104]	; (800a778 <SDMMC_GetCmdResp3+0x74>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a1a      	ldr	r2, [pc, #104]	; (800a77c <SDMMC_GetCmdResp3+0x78>)
 800a712:	fba2 2303 	umull	r2, r3, r2, r3
 800a716:	0a5b      	lsrs	r3, r3, #9
 800a718:	f241 3288 	movw	r2, #5000	; 0x1388
 800a71c:	fb02 f303 	mul.w	r3, r2, r3
 800a720:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	1e5a      	subs	r2, r3, #1
 800a726:	60fa      	str	r2, [r7, #12]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d102      	bne.n	800a732 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a72c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a730:	e01b      	b.n	800a76a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a736:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a738:	68bb      	ldr	r3, [r7, #8]
 800a73a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d0ef      	beq.n	800a722 <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a742:	68bb      	ldr	r3, [r7, #8]
 800a744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d1ea      	bne.n	800a722 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a750:	f003 0304 	and.w	r3, r3, #4
 800a754:	2b00      	cmp	r3, #0
 800a756:	d004      	beq.n	800a762 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2204      	movs	r2, #4
 800a75c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a75e:	2304      	movs	r3, #4
 800a760:	e003      	b.n	800a76a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	22c5      	movs	r2, #197	; 0xc5
 800a766:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a768:	2300      	movs	r3, #0
}
 800a76a:	4618      	mov	r0, r3
 800a76c:	3714      	adds	r7, #20
 800a76e:	46bd      	mov	sp, r7
 800a770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a774:	4770      	bx	lr
 800a776:	bf00      	nop
 800a778:	20000024 	.word	0x20000024
 800a77c:	10624dd3 	.word	0x10624dd3

0800a780 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a780:	b580      	push	{r7, lr}
 800a782:	b088      	sub	sp, #32
 800a784:	af00      	add	r7, sp, #0
 800a786:	60f8      	str	r0, [r7, #12]
 800a788:	460b      	mov	r3, r1
 800a78a:	607a      	str	r2, [r7, #4]
 800a78c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a78e:	4b35      	ldr	r3, [pc, #212]	; (800a864 <SDMMC_GetCmdResp6+0xe4>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	4a35      	ldr	r2, [pc, #212]	; (800a868 <SDMMC_GetCmdResp6+0xe8>)
 800a794:	fba2 2303 	umull	r2, r3, r2, r3
 800a798:	0a5b      	lsrs	r3, r3, #9
 800a79a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a79e:	fb02 f303 	mul.w	r3, r2, r3
 800a7a2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a7a4:	69fb      	ldr	r3, [r7, #28]
 800a7a6:	1e5a      	subs	r2, r3, #1
 800a7a8:	61fa      	str	r2, [r7, #28]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d102      	bne.n	800a7b4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a7ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a7b2:	e052      	b.n	800a85a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7b8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a7ba:	69bb      	ldr	r3, [r7, #24]
 800a7bc:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d0ef      	beq.n	800a7a4 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a7c4:	69bb      	ldr	r3, [r7, #24]
 800a7c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d1ea      	bne.n	800a7a4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7d2:	f003 0304 	and.w	r3, r3, #4
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d004      	beq.n	800a7e4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	2204      	movs	r2, #4
 800a7de:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7e0:	2304      	movs	r3, #4
 800a7e2:	e03a      	b.n	800a85a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7e8:	f003 0301 	and.w	r3, r3, #1
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d004      	beq.n	800a7fa <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2201      	movs	r2, #1
 800a7f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e02f      	b.n	800a85a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f7ff fbcb 	bl	8009f96 <SDIO_GetCommandResponse>
 800a800:	4603      	mov	r3, r0
 800a802:	461a      	mov	r2, r3
 800a804:	7afb      	ldrb	r3, [r7, #11]
 800a806:	4293      	cmp	r3, r2
 800a808:	d001      	beq.n	800a80e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a80a:	2301      	movs	r3, #1
 800a80c:	e025      	b.n	800a85a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	22c5      	movs	r2, #197	; 0xc5
 800a812:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a814:	2100      	movs	r1, #0
 800a816:	68f8      	ldr	r0, [r7, #12]
 800a818:	f7ff fbca 	bl	8009fb0 <SDIO_GetResponse>
 800a81c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a81e:	697b      	ldr	r3, [r7, #20]
 800a820:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a824:	2b00      	cmp	r3, #0
 800a826:	d106      	bne.n	800a836 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a828:	697b      	ldr	r3, [r7, #20]
 800a82a:	0c1b      	lsrs	r3, r3, #16
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a832:	2300      	movs	r3, #0
 800a834:	e011      	b.n	800a85a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a836:	697b      	ldr	r3, [r7, #20]
 800a838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d002      	beq.n	800a846 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a840:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a844:	e009      	b.n	800a85a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a846:	697b      	ldr	r3, [r7, #20]
 800a848:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d002      	beq.n	800a856 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a850:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a854:	e001      	b.n	800a85a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a856:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a85a:	4618      	mov	r0, r3
 800a85c:	3720      	adds	r7, #32
 800a85e:	46bd      	mov	sp, r7
 800a860:	bd80      	pop	{r7, pc}
 800a862:	bf00      	nop
 800a864:	20000024 	.word	0x20000024
 800a868:	10624dd3 	.word	0x10624dd3

0800a86c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a86c:	b480      	push	{r7}
 800a86e:	b085      	sub	sp, #20
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a874:	4b22      	ldr	r3, [pc, #136]	; (800a900 <SDMMC_GetCmdResp7+0x94>)
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a22      	ldr	r2, [pc, #136]	; (800a904 <SDMMC_GetCmdResp7+0x98>)
 800a87a:	fba2 2303 	umull	r2, r3, r2, r3
 800a87e:	0a5b      	lsrs	r3, r3, #9
 800a880:	f241 3288 	movw	r2, #5000	; 0x1388
 800a884:	fb02 f303 	mul.w	r3, r2, r3
 800a888:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	1e5a      	subs	r2, r3, #1
 800a88e:	60fa      	str	r2, [r7, #12]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d102      	bne.n	800a89a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a894:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a898:	e02c      	b.n	800a8f4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a89e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d0ef      	beq.n	800a88a <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d1ea      	bne.n	800a88a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8b8:	f003 0304 	and.w	r3, r3, #4
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d004      	beq.n	800a8ca <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	2204      	movs	r2, #4
 800a8c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a8c6:	2304      	movs	r3, #4
 800a8c8:	e014      	b.n	800a8f4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8ce:	f003 0301 	and.w	r3, r3, #1
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d004      	beq.n	800a8e0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	2201      	movs	r2, #1
 800a8da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e009      	b.n	800a8f4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d002      	beq.n	800a8f2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2240      	movs	r2, #64	; 0x40
 800a8f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a8f2:	2300      	movs	r3, #0
  
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	3714      	adds	r7, #20
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	20000024 	.word	0x20000024
 800a904:	10624dd3 	.word	0x10624dd3

0800a908 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a908:	b480      	push	{r7}
 800a90a:	b085      	sub	sp, #20
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a910:	4b11      	ldr	r3, [pc, #68]	; (800a958 <SDMMC_GetCmdError+0x50>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	4a11      	ldr	r2, [pc, #68]	; (800a95c <SDMMC_GetCmdError+0x54>)
 800a916:	fba2 2303 	umull	r2, r3, r2, r3
 800a91a:	0a5b      	lsrs	r3, r3, #9
 800a91c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a920:	fb02 f303 	mul.w	r3, r2, r3
 800a924:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	1e5a      	subs	r2, r3, #1
 800a92a:	60fa      	str	r2, [r7, #12]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d102      	bne.n	800a936 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a930:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a934:	e009      	b.n	800a94a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a93a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d0f1      	beq.n	800a926 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	22c5      	movs	r2, #197	; 0xc5
 800a946:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a948:	2300      	movs	r3, #0
}
 800a94a:	4618      	mov	r0, r3
 800a94c:	3714      	adds	r7, #20
 800a94e:	46bd      	mov	sp, r7
 800a950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a954:	4770      	bx	lr
 800a956:	bf00      	nop
 800a958:	20000024 	.word	0x20000024
 800a95c:	10624dd3 	.word	0x10624dd3

0800a960 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a960:	b084      	sub	sp, #16
 800a962:	b580      	push	{r7, lr}
 800a964:	b084      	sub	sp, #16
 800a966:	af00      	add	r7, sp, #0
 800a968:	6078      	str	r0, [r7, #4]
 800a96a:	f107 001c 	add.w	r0, r7, #28
 800a96e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a974:	2b01      	cmp	r3, #1
 800a976:	d122      	bne.n	800a9be <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	68db      	ldr	r3, [r3, #12]
 800a988:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a98c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a990:	687a      	ldr	r2, [r7, #4]
 800a992:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a9a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9a2:	2b01      	cmp	r3, #1
 800a9a4:	d105      	bne.n	800a9b2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	68db      	ldr	r3, [r3, #12]
 800a9aa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a9b2:	6878      	ldr	r0, [r7, #4]
 800a9b4:	f001 fbee 	bl	800c194 <USB_CoreReset>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	73fb      	strb	r3, [r7, #15]
 800a9bc:	e01a      	b.n	800a9f4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	68db      	ldr	r3, [r3, #12]
 800a9c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f001 fbe2 	bl	800c194 <USB_CoreReset>
 800a9d0:	4603      	mov	r3, r0
 800a9d2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a9d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d106      	bne.n	800a9e8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9de:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	639a      	str	r2, [r3, #56]	; 0x38
 800a9e6:	e005      	b.n	800a9f4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9ec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a9f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f6:	2b01      	cmp	r3, #1
 800a9f8:	d10b      	bne.n	800aa12 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	f043 0206 	orr.w	r2, r3, #6
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	689b      	ldr	r3, [r3, #8]
 800aa0a:	f043 0220 	orr.w	r2, r3, #32
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aa12:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3710      	adds	r7, #16
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa1e:	b004      	add	sp, #16
 800aa20:	4770      	bx	lr
	...

0800aa24 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b087      	sub	sp, #28
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	60f8      	str	r0, [r7, #12]
 800aa2c:	60b9      	str	r1, [r7, #8]
 800aa2e:	4613      	mov	r3, r2
 800aa30:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800aa32:	79fb      	ldrb	r3, [r7, #7]
 800aa34:	2b02      	cmp	r3, #2
 800aa36:	d165      	bne.n	800ab04 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	4a41      	ldr	r2, [pc, #260]	; (800ab40 <USB_SetTurnaroundTime+0x11c>)
 800aa3c:	4293      	cmp	r3, r2
 800aa3e:	d906      	bls.n	800aa4e <USB_SetTurnaroundTime+0x2a>
 800aa40:	68bb      	ldr	r3, [r7, #8]
 800aa42:	4a40      	ldr	r2, [pc, #256]	; (800ab44 <USB_SetTurnaroundTime+0x120>)
 800aa44:	4293      	cmp	r3, r2
 800aa46:	d202      	bcs.n	800aa4e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800aa48:	230f      	movs	r3, #15
 800aa4a:	617b      	str	r3, [r7, #20]
 800aa4c:	e062      	b.n	800ab14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800aa4e:	68bb      	ldr	r3, [r7, #8]
 800aa50:	4a3c      	ldr	r2, [pc, #240]	; (800ab44 <USB_SetTurnaroundTime+0x120>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d306      	bcc.n	800aa64 <USB_SetTurnaroundTime+0x40>
 800aa56:	68bb      	ldr	r3, [r7, #8]
 800aa58:	4a3b      	ldr	r2, [pc, #236]	; (800ab48 <USB_SetTurnaroundTime+0x124>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d202      	bcs.n	800aa64 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800aa5e:	230e      	movs	r3, #14
 800aa60:	617b      	str	r3, [r7, #20]
 800aa62:	e057      	b.n	800ab14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	4a38      	ldr	r2, [pc, #224]	; (800ab48 <USB_SetTurnaroundTime+0x124>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d306      	bcc.n	800aa7a <USB_SetTurnaroundTime+0x56>
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	4a37      	ldr	r2, [pc, #220]	; (800ab4c <USB_SetTurnaroundTime+0x128>)
 800aa70:	4293      	cmp	r3, r2
 800aa72:	d202      	bcs.n	800aa7a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800aa74:	230d      	movs	r3, #13
 800aa76:	617b      	str	r3, [r7, #20]
 800aa78:	e04c      	b.n	800ab14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	4a33      	ldr	r2, [pc, #204]	; (800ab4c <USB_SetTurnaroundTime+0x128>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d306      	bcc.n	800aa90 <USB_SetTurnaroundTime+0x6c>
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	4a32      	ldr	r2, [pc, #200]	; (800ab50 <USB_SetTurnaroundTime+0x12c>)
 800aa86:	4293      	cmp	r3, r2
 800aa88:	d802      	bhi.n	800aa90 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800aa8a:	230c      	movs	r3, #12
 800aa8c:	617b      	str	r3, [r7, #20]
 800aa8e:	e041      	b.n	800ab14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	4a2f      	ldr	r2, [pc, #188]	; (800ab50 <USB_SetTurnaroundTime+0x12c>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d906      	bls.n	800aaa6 <USB_SetTurnaroundTime+0x82>
 800aa98:	68bb      	ldr	r3, [r7, #8]
 800aa9a:	4a2e      	ldr	r2, [pc, #184]	; (800ab54 <USB_SetTurnaroundTime+0x130>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d802      	bhi.n	800aaa6 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800aaa0:	230b      	movs	r3, #11
 800aaa2:	617b      	str	r3, [r7, #20]
 800aaa4:	e036      	b.n	800ab14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	4a2a      	ldr	r2, [pc, #168]	; (800ab54 <USB_SetTurnaroundTime+0x130>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d906      	bls.n	800aabc <USB_SetTurnaroundTime+0x98>
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	4a29      	ldr	r2, [pc, #164]	; (800ab58 <USB_SetTurnaroundTime+0x134>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d802      	bhi.n	800aabc <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800aab6:	230a      	movs	r3, #10
 800aab8:	617b      	str	r3, [r7, #20]
 800aaba:	e02b      	b.n	800ab14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800aabc:	68bb      	ldr	r3, [r7, #8]
 800aabe:	4a26      	ldr	r2, [pc, #152]	; (800ab58 <USB_SetTurnaroundTime+0x134>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d906      	bls.n	800aad2 <USB_SetTurnaroundTime+0xae>
 800aac4:	68bb      	ldr	r3, [r7, #8]
 800aac6:	4a25      	ldr	r2, [pc, #148]	; (800ab5c <USB_SetTurnaroundTime+0x138>)
 800aac8:	4293      	cmp	r3, r2
 800aaca:	d202      	bcs.n	800aad2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800aacc:	2309      	movs	r3, #9
 800aace:	617b      	str	r3, [r7, #20]
 800aad0:	e020      	b.n	800ab14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800aad2:	68bb      	ldr	r3, [r7, #8]
 800aad4:	4a21      	ldr	r2, [pc, #132]	; (800ab5c <USB_SetTurnaroundTime+0x138>)
 800aad6:	4293      	cmp	r3, r2
 800aad8:	d306      	bcc.n	800aae8 <USB_SetTurnaroundTime+0xc4>
 800aada:	68bb      	ldr	r3, [r7, #8]
 800aadc:	4a20      	ldr	r2, [pc, #128]	; (800ab60 <USB_SetTurnaroundTime+0x13c>)
 800aade:	4293      	cmp	r3, r2
 800aae0:	d802      	bhi.n	800aae8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800aae2:	2308      	movs	r3, #8
 800aae4:	617b      	str	r3, [r7, #20]
 800aae6:	e015      	b.n	800ab14 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800aae8:	68bb      	ldr	r3, [r7, #8]
 800aaea:	4a1d      	ldr	r2, [pc, #116]	; (800ab60 <USB_SetTurnaroundTime+0x13c>)
 800aaec:	4293      	cmp	r3, r2
 800aaee:	d906      	bls.n	800aafe <USB_SetTurnaroundTime+0xda>
 800aaf0:	68bb      	ldr	r3, [r7, #8]
 800aaf2:	4a1c      	ldr	r2, [pc, #112]	; (800ab64 <USB_SetTurnaroundTime+0x140>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d202      	bcs.n	800aafe <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800aaf8:	2307      	movs	r3, #7
 800aafa:	617b      	str	r3, [r7, #20]
 800aafc:	e00a      	b.n	800ab14 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800aafe:	2306      	movs	r3, #6
 800ab00:	617b      	str	r3, [r7, #20]
 800ab02:	e007      	b.n	800ab14 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ab04:	79fb      	ldrb	r3, [r7, #7]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d102      	bne.n	800ab10 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ab0a:	2309      	movs	r3, #9
 800ab0c:	617b      	str	r3, [r7, #20]
 800ab0e:	e001      	b.n	800ab14 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ab10:	2309      	movs	r3, #9
 800ab12:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	68db      	ldr	r3, [r3, #12]
 800ab18:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	68da      	ldr	r2, [r3, #12]
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	029b      	lsls	r3, r3, #10
 800ab28:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ab2c:	431a      	orrs	r2, r3
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ab32:	2300      	movs	r3, #0
}
 800ab34:	4618      	mov	r0, r3
 800ab36:	371c      	adds	r7, #28
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	00d8acbf 	.word	0x00d8acbf
 800ab44:	00e4e1c0 	.word	0x00e4e1c0
 800ab48:	00f42400 	.word	0x00f42400
 800ab4c:	01067380 	.word	0x01067380
 800ab50:	011a499f 	.word	0x011a499f
 800ab54:	01312cff 	.word	0x01312cff
 800ab58:	014ca43f 	.word	0x014ca43f
 800ab5c:	016e3600 	.word	0x016e3600
 800ab60:	01a6ab1f 	.word	0x01a6ab1f
 800ab64:	01e84800 	.word	0x01e84800

0800ab68 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	689b      	ldr	r3, [r3, #8]
 800ab74:	f043 0201 	orr.w	r2, r3, #1
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	370c      	adds	r7, #12
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	b083      	sub	sp, #12
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	f023 0201 	bic.w	r2, r3, #1
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ab9e:	2300      	movs	r3, #0
}
 800aba0:	4618      	mov	r0, r3
 800aba2:	370c      	adds	r7, #12
 800aba4:	46bd      	mov	sp, r7
 800aba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abaa:	4770      	bx	lr

0800abac <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b084      	sub	sp, #16
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	460b      	mov	r3, r1
 800abb6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800abb8:	2300      	movs	r3, #0
 800abba:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	68db      	ldr	r3, [r3, #12]
 800abc0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800abc8:	78fb      	ldrb	r3, [r7, #3]
 800abca:	2b01      	cmp	r3, #1
 800abcc:	d115      	bne.n	800abfa <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	68db      	ldr	r3, [r3, #12]
 800abd2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800abda:	2001      	movs	r0, #1
 800abdc:	f7f8 fbf8 	bl	80033d0 <HAL_Delay>
      ms++;
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	3301      	adds	r3, #1
 800abe4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f001 fa45 	bl	800c076 <USB_GetMode>
 800abec:	4603      	mov	r3, r0
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d01e      	beq.n	800ac30 <USB_SetCurrentMode+0x84>
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2b31      	cmp	r3, #49	; 0x31
 800abf6:	d9f0      	bls.n	800abda <USB_SetCurrentMode+0x2e>
 800abf8:	e01a      	b.n	800ac30 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800abfa:	78fb      	ldrb	r3, [r7, #3]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d115      	bne.n	800ac2c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	68db      	ldr	r3, [r3, #12]
 800ac04:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ac0c:	2001      	movs	r0, #1
 800ac0e:	f7f8 fbdf 	bl	80033d0 <HAL_Delay>
      ms++;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	3301      	adds	r3, #1
 800ac16:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f001 fa2c 	bl	800c076 <USB_GetMode>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d005      	beq.n	800ac30 <USB_SetCurrentMode+0x84>
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2b31      	cmp	r3, #49	; 0x31
 800ac28:	d9f0      	bls.n	800ac0c <USB_SetCurrentMode+0x60>
 800ac2a:	e001      	b.n	800ac30 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e005      	b.n	800ac3c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	2b32      	cmp	r3, #50	; 0x32
 800ac34:	d101      	bne.n	800ac3a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ac36:	2301      	movs	r3, #1
 800ac38:	e000      	b.n	800ac3c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ac3a:	2300      	movs	r3, #0
}
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	3710      	adds	r7, #16
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}

0800ac44 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac44:	b084      	sub	sp, #16
 800ac46:	b580      	push	{r7, lr}
 800ac48:	b086      	sub	sp, #24
 800ac4a:	af00      	add	r7, sp, #0
 800ac4c:	6078      	str	r0, [r7, #4]
 800ac4e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ac52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ac56:	2300      	movs	r3, #0
 800ac58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ac5e:	2300      	movs	r3, #0
 800ac60:	613b      	str	r3, [r7, #16]
 800ac62:	e009      	b.n	800ac78 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ac64:	687a      	ldr	r2, [r7, #4]
 800ac66:	693b      	ldr	r3, [r7, #16]
 800ac68:	3340      	adds	r3, #64	; 0x40
 800ac6a:	009b      	lsls	r3, r3, #2
 800ac6c:	4413      	add	r3, r2
 800ac6e:	2200      	movs	r2, #0
 800ac70:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ac72:	693b      	ldr	r3, [r7, #16]
 800ac74:	3301      	adds	r3, #1
 800ac76:	613b      	str	r3, [r7, #16]
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	2b0e      	cmp	r3, #14
 800ac7c:	d9f2      	bls.n	800ac64 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ac7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d11c      	bne.n	800acbe <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac92:	f043 0302 	orr.w	r3, r3, #2
 800ac96:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac9c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	639a      	str	r2, [r3, #56]	; 0x38
 800acbc:	e00b      	b.n	800acd6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acc2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acce:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800acdc:	461a      	mov	r2, r3
 800acde:	2300      	movs	r3, #0
 800ace0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ace8:	4619      	mov	r1, r3
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acf0:	461a      	mov	r2, r3
 800acf2:	680b      	ldr	r3, [r1, #0]
 800acf4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800acf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800acf8:	2b01      	cmp	r3, #1
 800acfa:	d10c      	bne.n	800ad16 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800acfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d104      	bne.n	800ad0c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ad02:	2100      	movs	r1, #0
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 f965 	bl	800afd4 <USB_SetDevSpeed>
 800ad0a:	e008      	b.n	800ad1e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 f960 	bl	800afd4 <USB_SetDevSpeed>
 800ad14:	e003      	b.n	800ad1e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ad16:	2103      	movs	r1, #3
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 f95b 	bl	800afd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ad1e:	2110      	movs	r1, #16
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 f8f3 	bl	800af0c <USB_FlushTxFifo>
 800ad26:	4603      	mov	r3, r0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d001      	beq.n	800ad30 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800ad2c:	2301      	movs	r3, #1
 800ad2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f91f 	bl	800af74 <USB_FlushRxFifo>
 800ad36:	4603      	mov	r3, r0
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d001      	beq.n	800ad40 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ad40:	68fb      	ldr	r3, [r7, #12]
 800ad42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad46:	461a      	mov	r2, r3
 800ad48:	2300      	movs	r3, #0
 800ad4a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad52:	461a      	mov	r2, r3
 800ad54:	2300      	movs	r3, #0
 800ad56:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad5e:	461a      	mov	r2, r3
 800ad60:	2300      	movs	r3, #0
 800ad62:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ad64:	2300      	movs	r3, #0
 800ad66:	613b      	str	r3, [r7, #16]
 800ad68:	e043      	b.n	800adf2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad6a:	693b      	ldr	r3, [r7, #16]
 800ad6c:	015a      	lsls	r2, r3, #5
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	4413      	add	r3, r2
 800ad72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad80:	d118      	bne.n	800adb4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800ad82:	693b      	ldr	r3, [r7, #16]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d10a      	bne.n	800ad9e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	015a      	lsls	r2, r3, #5
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	4413      	add	r3, r2
 800ad90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad94:	461a      	mov	r2, r3
 800ad96:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ad9a:	6013      	str	r3, [r2, #0]
 800ad9c:	e013      	b.n	800adc6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ad9e:	693b      	ldr	r3, [r7, #16]
 800ada0:	015a      	lsls	r2, r3, #5
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	4413      	add	r3, r2
 800ada6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adaa:	461a      	mov	r2, r3
 800adac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800adb0:	6013      	str	r3, [r2, #0]
 800adb2:	e008      	b.n	800adc6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	015a      	lsls	r2, r3, #5
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	4413      	add	r3, r2
 800adbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adc0:	461a      	mov	r2, r3
 800adc2:	2300      	movs	r3, #0
 800adc4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	015a      	lsls	r2, r3, #5
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	4413      	add	r3, r2
 800adce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add2:	461a      	mov	r2, r3
 800add4:	2300      	movs	r3, #0
 800add6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	015a      	lsls	r2, r3, #5
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	4413      	add	r3, r2
 800ade0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ade4:	461a      	mov	r2, r3
 800ade6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800adea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adec:	693b      	ldr	r3, [r7, #16]
 800adee:	3301      	adds	r3, #1
 800adf0:	613b      	str	r3, [r7, #16]
 800adf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf4:	693a      	ldr	r2, [r7, #16]
 800adf6:	429a      	cmp	r2, r3
 800adf8:	d3b7      	bcc.n	800ad6a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adfa:	2300      	movs	r3, #0
 800adfc:	613b      	str	r3, [r7, #16]
 800adfe:	e043      	b.n	800ae88 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae00:	693b      	ldr	r3, [r7, #16]
 800ae02:	015a      	lsls	r2, r3, #5
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	4413      	add	r3, r2
 800ae08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae16:	d118      	bne.n	800ae4a <USB_DevInit+0x206>
    {
      if (i == 0U)
 800ae18:	693b      	ldr	r3, [r7, #16]
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d10a      	bne.n	800ae34 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ae1e:	693b      	ldr	r3, [r7, #16]
 800ae20:	015a      	lsls	r2, r3, #5
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	4413      	add	r3, r2
 800ae26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae2a:	461a      	mov	r2, r3
 800ae2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae30:	6013      	str	r3, [r2, #0]
 800ae32:	e013      	b.n	800ae5c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	015a      	lsls	r2, r3, #5
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae40:	461a      	mov	r2, r3
 800ae42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ae46:	6013      	str	r3, [r2, #0]
 800ae48:	e008      	b.n	800ae5c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ae4a:	693b      	ldr	r3, [r7, #16]
 800ae4c:	015a      	lsls	r2, r3, #5
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	4413      	add	r3, r2
 800ae52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae56:	461a      	mov	r2, r3
 800ae58:	2300      	movs	r3, #0
 800ae5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	015a      	lsls	r2, r3, #5
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	4413      	add	r3, r2
 800ae64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae68:	461a      	mov	r2, r3
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ae6e:	693b      	ldr	r3, [r7, #16]
 800ae70:	015a      	lsls	r2, r3, #5
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	4413      	add	r3, r2
 800ae76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae7a:	461a      	mov	r2, r3
 800ae7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ae80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	3301      	adds	r3, #1
 800ae86:	613b      	str	r3, [r7, #16]
 800ae88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae8a:	693a      	ldr	r2, [r7, #16]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d3b7      	bcc.n	800ae00 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae96:	691b      	ldr	r3, [r3, #16]
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ae9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aea2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	2200      	movs	r2, #0
 800aea8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aeb0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d105      	bne.n	800aec4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	699b      	ldr	r3, [r3, #24]
 800aebc:	f043 0210 	orr.w	r2, r3, #16
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	699a      	ldr	r2, [r3, #24]
 800aec8:	4b0f      	ldr	r3, [pc, #60]	; (800af08 <USB_DevInit+0x2c4>)
 800aeca:	4313      	orrs	r3, r2
 800aecc:	687a      	ldr	r2, [r7, #4]
 800aece:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aed0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d005      	beq.n	800aee2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	699b      	ldr	r3, [r3, #24]
 800aeda:	f043 0208 	orr.w	r2, r3, #8
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aee2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aee4:	2b01      	cmp	r3, #1
 800aee6:	d107      	bne.n	800aef8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	699b      	ldr	r3, [r3, #24]
 800aeec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aef0:	f043 0304 	orr.w	r3, r3, #4
 800aef4:	687a      	ldr	r2, [r7, #4]
 800aef6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aef8:	7dfb      	ldrb	r3, [r7, #23]
}
 800aefa:	4618      	mov	r0, r3
 800aefc:	3718      	adds	r7, #24
 800aefe:	46bd      	mov	sp, r7
 800af00:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af04:	b004      	add	sp, #16
 800af06:	4770      	bx	lr
 800af08:	803c3800 	.word	0x803c3800

0800af0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800af16:	2300      	movs	r3, #0
 800af18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	3301      	adds	r3, #1
 800af1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	4a13      	ldr	r2, [pc, #76]	; (800af70 <USB_FlushTxFifo+0x64>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d901      	bls.n	800af2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800af28:	2303      	movs	r3, #3
 800af2a:	e01b      	b.n	800af64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	691b      	ldr	r3, [r3, #16]
 800af30:	2b00      	cmp	r3, #0
 800af32:	daf2      	bge.n	800af1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800af34:	2300      	movs	r3, #0
 800af36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	019b      	lsls	r3, r3, #6
 800af3c:	f043 0220 	orr.w	r2, r3, #32
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	3301      	adds	r3, #1
 800af48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	4a08      	ldr	r2, [pc, #32]	; (800af70 <USB_FlushTxFifo+0x64>)
 800af4e:	4293      	cmp	r3, r2
 800af50:	d901      	bls.n	800af56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800af52:	2303      	movs	r3, #3
 800af54:	e006      	b.n	800af64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	691b      	ldr	r3, [r3, #16]
 800af5a:	f003 0320 	and.w	r3, r3, #32
 800af5e:	2b20      	cmp	r3, #32
 800af60:	d0f0      	beq.n	800af44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800af62:	2300      	movs	r3, #0
}
 800af64:	4618      	mov	r0, r3
 800af66:	3714      	adds	r7, #20
 800af68:	46bd      	mov	sp, r7
 800af6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6e:	4770      	bx	lr
 800af70:	00030d40 	.word	0x00030d40

0800af74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800af74:	b480      	push	{r7}
 800af76:	b085      	sub	sp, #20
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800af7c:	2300      	movs	r3, #0
 800af7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	3301      	adds	r3, #1
 800af84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	4a11      	ldr	r2, [pc, #68]	; (800afd0 <USB_FlushRxFifo+0x5c>)
 800af8a:	4293      	cmp	r3, r2
 800af8c:	d901      	bls.n	800af92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800af8e:	2303      	movs	r3, #3
 800af90:	e018      	b.n	800afc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	691b      	ldr	r3, [r3, #16]
 800af96:	2b00      	cmp	r3, #0
 800af98:	daf2      	bge.n	800af80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800af9a:	2300      	movs	r3, #0
 800af9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2210      	movs	r2, #16
 800afa2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	3301      	adds	r3, #1
 800afa8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	4a08      	ldr	r2, [pc, #32]	; (800afd0 <USB_FlushRxFifo+0x5c>)
 800afae:	4293      	cmp	r3, r2
 800afb0:	d901      	bls.n	800afb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800afb2:	2303      	movs	r3, #3
 800afb4:	e006      	b.n	800afc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	691b      	ldr	r3, [r3, #16]
 800afba:	f003 0310 	and.w	r3, r3, #16
 800afbe:	2b10      	cmp	r3, #16
 800afc0:	d0f0      	beq.n	800afa4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3714      	adds	r7, #20
 800afc8:	46bd      	mov	sp, r7
 800afca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afce:	4770      	bx	lr
 800afd0:	00030d40 	.word	0x00030d40

0800afd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800afd4:	b480      	push	{r7}
 800afd6:	b085      	sub	sp, #20
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
 800afdc:	460b      	mov	r3, r1
 800afde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	78fb      	ldrb	r3, [r7, #3]
 800afee:	68f9      	ldr	r1, [r7, #12]
 800aff0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aff4:	4313      	orrs	r3, r2
 800aff6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aff8:	2300      	movs	r3, #0
}
 800affa:	4618      	mov	r0, r3
 800affc:	3714      	adds	r7, #20
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr

0800b006 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b006:	b480      	push	{r7}
 800b008:	b087      	sub	sp, #28
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b018:	689b      	ldr	r3, [r3, #8]
 800b01a:	f003 0306 	and.w	r3, r3, #6
 800b01e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	2b00      	cmp	r3, #0
 800b024:	d102      	bne.n	800b02c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b026:	2300      	movs	r3, #0
 800b028:	75fb      	strb	r3, [r7, #23]
 800b02a:	e00a      	b.n	800b042 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2b02      	cmp	r3, #2
 800b030:	d002      	beq.n	800b038 <USB_GetDevSpeed+0x32>
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	2b06      	cmp	r3, #6
 800b036:	d102      	bne.n	800b03e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b038:	2302      	movs	r3, #2
 800b03a:	75fb      	strb	r3, [r7, #23]
 800b03c:	e001      	b.n	800b042 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b03e:	230f      	movs	r3, #15
 800b040:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b042:	7dfb      	ldrb	r3, [r7, #23]
}
 800b044:	4618      	mov	r0, r3
 800b046:	371c      	adds	r7, #28
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b064:	683b      	ldr	r3, [r7, #0]
 800b066:	785b      	ldrb	r3, [r3, #1]
 800b068:	2b01      	cmp	r3, #1
 800b06a:	d13a      	bne.n	800b0e2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b072:	69da      	ldr	r2, [r3, #28]
 800b074:	683b      	ldr	r3, [r7, #0]
 800b076:	781b      	ldrb	r3, [r3, #0]
 800b078:	f003 030f 	and.w	r3, r3, #15
 800b07c:	2101      	movs	r1, #1
 800b07e:	fa01 f303 	lsl.w	r3, r1, r3
 800b082:	b29b      	uxth	r3, r3
 800b084:	68f9      	ldr	r1, [r7, #12]
 800b086:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b08a:	4313      	orrs	r3, r2
 800b08c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	015a      	lsls	r2, r3, #5
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	4413      	add	r3, r2
 800b096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d155      	bne.n	800b150 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	015a      	lsls	r2, r3, #5
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	4413      	add	r3, r2
 800b0ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0b0:	681a      	ldr	r2, [r3, #0]
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	68db      	ldr	r3, [r3, #12]
 800b0b6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	791b      	ldrb	r3, [r3, #4]
 800b0be:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b0c0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b0c2:	68bb      	ldr	r3, [r7, #8]
 800b0c4:	059b      	lsls	r3, r3, #22
 800b0c6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b0c8:	4313      	orrs	r3, r2
 800b0ca:	68ba      	ldr	r2, [r7, #8]
 800b0cc:	0151      	lsls	r1, r2, #5
 800b0ce:	68fa      	ldr	r2, [r7, #12]
 800b0d0:	440a      	add	r2, r1
 800b0d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b0da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b0de:	6013      	str	r3, [r2, #0]
 800b0e0:	e036      	b.n	800b150 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b0e2:	68fb      	ldr	r3, [r7, #12]
 800b0e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0e8:	69da      	ldr	r2, [r3, #28]
 800b0ea:	683b      	ldr	r3, [r7, #0]
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	f003 030f 	and.w	r3, r3, #15
 800b0f2:	2101      	movs	r1, #1
 800b0f4:	fa01 f303 	lsl.w	r3, r1, r3
 800b0f8:	041b      	lsls	r3, r3, #16
 800b0fa:	68f9      	ldr	r1, [r7, #12]
 800b0fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b100:	4313      	orrs	r3, r2
 800b102:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b104:	68bb      	ldr	r3, [r7, #8]
 800b106:	015a      	lsls	r2, r3, #5
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	4413      	add	r3, r2
 800b10c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b116:	2b00      	cmp	r3, #0
 800b118:	d11a      	bne.n	800b150 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b11a:	68bb      	ldr	r3, [r7, #8]
 800b11c:	015a      	lsls	r2, r3, #5
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	4413      	add	r3, r2
 800b122:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b126:	681a      	ldr	r2, [r3, #0]
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	791b      	ldrb	r3, [r3, #4]
 800b134:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b136:	430b      	orrs	r3, r1
 800b138:	4313      	orrs	r3, r2
 800b13a:	68ba      	ldr	r2, [r7, #8]
 800b13c:	0151      	lsls	r1, r2, #5
 800b13e:	68fa      	ldr	r2, [r7, #12]
 800b140:	440a      	add	r2, r1
 800b142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b146:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b14a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b14e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b150:	2300      	movs	r3, #0
}
 800b152:	4618      	mov	r0, r3
 800b154:	3714      	adds	r7, #20
 800b156:	46bd      	mov	sp, r7
 800b158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b15c:	4770      	bx	lr
	...

0800b160 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b160:	b480      	push	{r7}
 800b162:	b085      	sub	sp, #20
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
 800b168:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	781b      	ldrb	r3, [r3, #0]
 800b172:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b174:	683b      	ldr	r3, [r7, #0]
 800b176:	785b      	ldrb	r3, [r3, #1]
 800b178:	2b01      	cmp	r3, #1
 800b17a:	d161      	bne.n	800b240 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b17c:	68bb      	ldr	r3, [r7, #8]
 800b17e:	015a      	lsls	r2, r3, #5
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	4413      	add	r3, r2
 800b184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b18e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b192:	d11f      	bne.n	800b1d4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b194:	68bb      	ldr	r3, [r7, #8]
 800b196:	015a      	lsls	r2, r3, #5
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	4413      	add	r3, r2
 800b19c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	68ba      	ldr	r2, [r7, #8]
 800b1a4:	0151      	lsls	r1, r2, #5
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	440a      	add	r2, r1
 800b1aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b1b2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	015a      	lsls	r2, r3, #5
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	68ba      	ldr	r2, [r7, #8]
 800b1c4:	0151      	lsls	r1, r2, #5
 800b1c6:	68fa      	ldr	r2, [r7, #12]
 800b1c8:	440a      	add	r2, r1
 800b1ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1ce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b1d2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b1dc:	683b      	ldr	r3, [r7, #0]
 800b1de:	781b      	ldrb	r3, [r3, #0]
 800b1e0:	f003 030f 	and.w	r3, r3, #15
 800b1e4:	2101      	movs	r1, #1
 800b1e6:	fa01 f303 	lsl.w	r3, r1, r3
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	43db      	mvns	r3, r3
 800b1ee:	68f9      	ldr	r1, [r7, #12]
 800b1f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b1f4:	4013      	ands	r3, r2
 800b1f6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1fe:	69da      	ldr	r2, [r3, #28]
 800b200:	683b      	ldr	r3, [r7, #0]
 800b202:	781b      	ldrb	r3, [r3, #0]
 800b204:	f003 030f 	and.w	r3, r3, #15
 800b208:	2101      	movs	r1, #1
 800b20a:	fa01 f303 	lsl.w	r3, r1, r3
 800b20e:	b29b      	uxth	r3, r3
 800b210:	43db      	mvns	r3, r3
 800b212:	68f9      	ldr	r1, [r7, #12]
 800b214:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b218:	4013      	ands	r3, r2
 800b21a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	015a      	lsls	r2, r3, #5
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	4413      	add	r3, r2
 800b224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b228:	681a      	ldr	r2, [r3, #0]
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	0159      	lsls	r1, r3, #5
 800b22e:	68fb      	ldr	r3, [r7, #12]
 800b230:	440b      	add	r3, r1
 800b232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b236:	4619      	mov	r1, r3
 800b238:	4b35      	ldr	r3, [pc, #212]	; (800b310 <USB_DeactivateEndpoint+0x1b0>)
 800b23a:	4013      	ands	r3, r2
 800b23c:	600b      	str	r3, [r1, #0]
 800b23e:	e060      	b.n	800b302 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	015a      	lsls	r2, r3, #5
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	4413      	add	r3, r2
 800b248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b252:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b256:	d11f      	bne.n	800b298 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b258:	68bb      	ldr	r3, [r7, #8]
 800b25a:	015a      	lsls	r2, r3, #5
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	4413      	add	r3, r2
 800b260:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	68ba      	ldr	r2, [r7, #8]
 800b268:	0151      	lsls	r1, r2, #5
 800b26a:	68fa      	ldr	r2, [r7, #12]
 800b26c:	440a      	add	r2, r1
 800b26e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b272:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b276:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	015a      	lsls	r2, r3, #5
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	4413      	add	r3, r2
 800b280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	68ba      	ldr	r2, [r7, #8]
 800b288:	0151      	lsls	r1, r2, #5
 800b28a:	68fa      	ldr	r2, [r7, #12]
 800b28c:	440a      	add	r2, r1
 800b28e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b292:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b296:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b29e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2a0:	683b      	ldr	r3, [r7, #0]
 800b2a2:	781b      	ldrb	r3, [r3, #0]
 800b2a4:	f003 030f 	and.w	r3, r3, #15
 800b2a8:	2101      	movs	r1, #1
 800b2aa:	fa01 f303 	lsl.w	r3, r1, r3
 800b2ae:	041b      	lsls	r3, r3, #16
 800b2b0:	43db      	mvns	r3, r3
 800b2b2:	68f9      	ldr	r1, [r7, #12]
 800b2b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2b8:	4013      	ands	r3, r2
 800b2ba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2c2:	69da      	ldr	r2, [r3, #28]
 800b2c4:	683b      	ldr	r3, [r7, #0]
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	f003 030f 	and.w	r3, r3, #15
 800b2cc:	2101      	movs	r1, #1
 800b2ce:	fa01 f303 	lsl.w	r3, r1, r3
 800b2d2:	041b      	lsls	r3, r3, #16
 800b2d4:	43db      	mvns	r3, r3
 800b2d6:	68f9      	ldr	r1, [r7, #12]
 800b2d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b2dc:	4013      	ands	r3, r2
 800b2de:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	015a      	lsls	r2, r3, #5
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	68bb      	ldr	r3, [r7, #8]
 800b2f0:	0159      	lsls	r1, r3, #5
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	440b      	add	r3, r1
 800b2f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2fa:	4619      	mov	r1, r3
 800b2fc:	4b05      	ldr	r3, [pc, #20]	; (800b314 <USB_DeactivateEndpoint+0x1b4>)
 800b2fe:	4013      	ands	r3, r2
 800b300:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b302:	2300      	movs	r3, #0
}
 800b304:	4618      	mov	r0, r3
 800b306:	3714      	adds	r7, #20
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr
 800b310:	ec337800 	.word	0xec337800
 800b314:	eff37800 	.word	0xeff37800

0800b318 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b08a      	sub	sp, #40	; 0x28
 800b31c:	af02      	add	r7, sp, #8
 800b31e:	60f8      	str	r0, [r7, #12]
 800b320:	60b9      	str	r1, [r7, #8]
 800b322:	4613      	mov	r3, r2
 800b324:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	781b      	ldrb	r3, [r3, #0]
 800b32e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b330:	68bb      	ldr	r3, [r7, #8]
 800b332:	785b      	ldrb	r3, [r3, #1]
 800b334:	2b01      	cmp	r3, #1
 800b336:	f040 815c 	bne.w	800b5f2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	699b      	ldr	r3, [r3, #24]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d132      	bne.n	800b3a8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	015a      	lsls	r2, r3, #5
 800b346:	69fb      	ldr	r3, [r7, #28]
 800b348:	4413      	add	r3, r2
 800b34a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b34e:	691b      	ldr	r3, [r3, #16]
 800b350:	69ba      	ldr	r2, [r7, #24]
 800b352:	0151      	lsls	r1, r2, #5
 800b354:	69fa      	ldr	r2, [r7, #28]
 800b356:	440a      	add	r2, r1
 800b358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b35c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b360:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b364:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b366:	69bb      	ldr	r3, [r7, #24]
 800b368:	015a      	lsls	r2, r3, #5
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	4413      	add	r3, r2
 800b36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b372:	691b      	ldr	r3, [r3, #16]
 800b374:	69ba      	ldr	r2, [r7, #24]
 800b376:	0151      	lsls	r1, r2, #5
 800b378:	69fa      	ldr	r2, [r7, #28]
 800b37a:	440a      	add	r2, r1
 800b37c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b380:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b384:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b386:	69bb      	ldr	r3, [r7, #24]
 800b388:	015a      	lsls	r2, r3, #5
 800b38a:	69fb      	ldr	r3, [r7, #28]
 800b38c:	4413      	add	r3, r2
 800b38e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b392:	691b      	ldr	r3, [r3, #16]
 800b394:	69ba      	ldr	r2, [r7, #24]
 800b396:	0151      	lsls	r1, r2, #5
 800b398:	69fa      	ldr	r2, [r7, #28]
 800b39a:	440a      	add	r2, r1
 800b39c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3a0:	0cdb      	lsrs	r3, r3, #19
 800b3a2:	04db      	lsls	r3, r3, #19
 800b3a4:	6113      	str	r3, [r2, #16]
 800b3a6:	e074      	b.n	800b492 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b3a8:	69bb      	ldr	r3, [r7, #24]
 800b3aa:	015a      	lsls	r2, r3, #5
 800b3ac:	69fb      	ldr	r3, [r7, #28]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3b4:	691b      	ldr	r3, [r3, #16]
 800b3b6:	69ba      	ldr	r2, [r7, #24]
 800b3b8:	0151      	lsls	r1, r2, #5
 800b3ba:	69fa      	ldr	r2, [r7, #28]
 800b3bc:	440a      	add	r2, r1
 800b3be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3c2:	0cdb      	lsrs	r3, r3, #19
 800b3c4:	04db      	lsls	r3, r3, #19
 800b3c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b3c8:	69bb      	ldr	r3, [r7, #24]
 800b3ca:	015a      	lsls	r2, r3, #5
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	4413      	add	r3, r2
 800b3d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	69ba      	ldr	r2, [r7, #24]
 800b3d8:	0151      	lsls	r1, r2, #5
 800b3da:	69fa      	ldr	r2, [r7, #28]
 800b3dc:	440a      	add	r2, r1
 800b3de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3e2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b3e6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b3ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b3ec:	69bb      	ldr	r3, [r7, #24]
 800b3ee:	015a      	lsls	r2, r3, #5
 800b3f0:	69fb      	ldr	r3, [r7, #28]
 800b3f2:	4413      	add	r3, r2
 800b3f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3f8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b3fa:	68bb      	ldr	r3, [r7, #8]
 800b3fc:	6999      	ldr	r1, [r3, #24]
 800b3fe:	68bb      	ldr	r3, [r7, #8]
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	440b      	add	r3, r1
 800b404:	1e59      	subs	r1, r3, #1
 800b406:	68bb      	ldr	r3, [r7, #8]
 800b408:	68db      	ldr	r3, [r3, #12]
 800b40a:	fbb1 f3f3 	udiv	r3, r1, r3
 800b40e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b410:	4b9d      	ldr	r3, [pc, #628]	; (800b688 <USB_EPStartXfer+0x370>)
 800b412:	400b      	ands	r3, r1
 800b414:	69b9      	ldr	r1, [r7, #24]
 800b416:	0148      	lsls	r0, r1, #5
 800b418:	69f9      	ldr	r1, [r7, #28]
 800b41a:	4401      	add	r1, r0
 800b41c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b420:	4313      	orrs	r3, r2
 800b422:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	015a      	lsls	r2, r3, #5
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	4413      	add	r3, r2
 800b42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b430:	691a      	ldr	r2, [r3, #16]
 800b432:	68bb      	ldr	r3, [r7, #8]
 800b434:	699b      	ldr	r3, [r3, #24]
 800b436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b43a:	69b9      	ldr	r1, [r7, #24]
 800b43c:	0148      	lsls	r0, r1, #5
 800b43e:	69f9      	ldr	r1, [r7, #28]
 800b440:	4401      	add	r1, r0
 800b442:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b446:	4313      	orrs	r3, r2
 800b448:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	791b      	ldrb	r3, [r3, #4]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d11f      	bne.n	800b492 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b452:	69bb      	ldr	r3, [r7, #24]
 800b454:	015a      	lsls	r2, r3, #5
 800b456:	69fb      	ldr	r3, [r7, #28]
 800b458:	4413      	add	r3, r2
 800b45a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b45e:	691b      	ldr	r3, [r3, #16]
 800b460:	69ba      	ldr	r2, [r7, #24]
 800b462:	0151      	lsls	r1, r2, #5
 800b464:	69fa      	ldr	r2, [r7, #28]
 800b466:	440a      	add	r2, r1
 800b468:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b46c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b470:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b472:	69bb      	ldr	r3, [r7, #24]
 800b474:	015a      	lsls	r2, r3, #5
 800b476:	69fb      	ldr	r3, [r7, #28]
 800b478:	4413      	add	r3, r2
 800b47a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	69ba      	ldr	r2, [r7, #24]
 800b482:	0151      	lsls	r1, r2, #5
 800b484:	69fa      	ldr	r2, [r7, #28]
 800b486:	440a      	add	r2, r1
 800b488:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b48c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b490:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b492:	79fb      	ldrb	r3, [r7, #7]
 800b494:	2b01      	cmp	r3, #1
 800b496:	d14b      	bne.n	800b530 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	695b      	ldr	r3, [r3, #20]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d009      	beq.n	800b4b4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b4a0:	69bb      	ldr	r3, [r7, #24]
 800b4a2:	015a      	lsls	r2, r3, #5
 800b4a4:	69fb      	ldr	r3, [r7, #28]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ac:	461a      	mov	r2, r3
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	695b      	ldr	r3, [r3, #20]
 800b4b2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	791b      	ldrb	r3, [r3, #4]
 800b4b8:	2b01      	cmp	r3, #1
 800b4ba:	d128      	bne.n	800b50e <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4c2:	689b      	ldr	r3, [r3, #8]
 800b4c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d110      	bne.n	800b4ee <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b4cc:	69bb      	ldr	r3, [r7, #24]
 800b4ce:	015a      	lsls	r2, r3, #5
 800b4d0:	69fb      	ldr	r3, [r7, #28]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	69ba      	ldr	r2, [r7, #24]
 800b4dc:	0151      	lsls	r1, r2, #5
 800b4de:	69fa      	ldr	r2, [r7, #28]
 800b4e0:	440a      	add	r2, r1
 800b4e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b4ea:	6013      	str	r3, [r2, #0]
 800b4ec:	e00f      	b.n	800b50e <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	015a      	lsls	r2, r3, #5
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	4413      	add	r3, r2
 800b4f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	69ba      	ldr	r2, [r7, #24]
 800b4fe:	0151      	lsls	r1, r2, #5
 800b500:	69fa      	ldr	r2, [r7, #28]
 800b502:	440a      	add	r2, r1
 800b504:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b50c:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b50e:	69bb      	ldr	r3, [r7, #24]
 800b510:	015a      	lsls	r2, r3, #5
 800b512:	69fb      	ldr	r3, [r7, #28]
 800b514:	4413      	add	r3, r2
 800b516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	69ba      	ldr	r2, [r7, #24]
 800b51e:	0151      	lsls	r1, r2, #5
 800b520:	69fa      	ldr	r2, [r7, #28]
 800b522:	440a      	add	r2, r1
 800b524:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b528:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b52c:	6013      	str	r3, [r2, #0]
 800b52e:	e133      	b.n	800b798 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b530:	69bb      	ldr	r3, [r7, #24]
 800b532:	015a      	lsls	r2, r3, #5
 800b534:	69fb      	ldr	r3, [r7, #28]
 800b536:	4413      	add	r3, r2
 800b538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	69ba      	ldr	r2, [r7, #24]
 800b540:	0151      	lsls	r1, r2, #5
 800b542:	69fa      	ldr	r2, [r7, #28]
 800b544:	440a      	add	r2, r1
 800b546:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b54a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b54e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	791b      	ldrb	r3, [r3, #4]
 800b554:	2b01      	cmp	r3, #1
 800b556:	d015      	beq.n	800b584 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b558:	68bb      	ldr	r3, [r7, #8]
 800b55a:	699b      	ldr	r3, [r3, #24]
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	f000 811b 	beq.w	800b798 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b56a:	68bb      	ldr	r3, [r7, #8]
 800b56c:	781b      	ldrb	r3, [r3, #0]
 800b56e:	f003 030f 	and.w	r3, r3, #15
 800b572:	2101      	movs	r1, #1
 800b574:	fa01 f303 	lsl.w	r3, r1, r3
 800b578:	69f9      	ldr	r1, [r7, #28]
 800b57a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b57e:	4313      	orrs	r3, r2
 800b580:	634b      	str	r3, [r1, #52]	; 0x34
 800b582:	e109      	b.n	800b798 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b58a:	689b      	ldr	r3, [r3, #8]
 800b58c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b590:	2b00      	cmp	r3, #0
 800b592:	d110      	bne.n	800b5b6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b594:	69bb      	ldr	r3, [r7, #24]
 800b596:	015a      	lsls	r2, r3, #5
 800b598:	69fb      	ldr	r3, [r7, #28]
 800b59a:	4413      	add	r3, r2
 800b59c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	69ba      	ldr	r2, [r7, #24]
 800b5a4:	0151      	lsls	r1, r2, #5
 800b5a6:	69fa      	ldr	r2, [r7, #28]
 800b5a8:	440a      	add	r2, r1
 800b5aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5ae:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b5b2:	6013      	str	r3, [r2, #0]
 800b5b4:	e00f      	b.n	800b5d6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b5b6:	69bb      	ldr	r3, [r7, #24]
 800b5b8:	015a      	lsls	r2, r3, #5
 800b5ba:	69fb      	ldr	r3, [r7, #28]
 800b5bc:	4413      	add	r3, r2
 800b5be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	69ba      	ldr	r2, [r7, #24]
 800b5c6:	0151      	lsls	r1, r2, #5
 800b5c8:	69fa      	ldr	r2, [r7, #28]
 800b5ca:	440a      	add	r2, r1
 800b5cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5d4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b5d6:	68bb      	ldr	r3, [r7, #8]
 800b5d8:	6919      	ldr	r1, [r3, #16]
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	781a      	ldrb	r2, [r3, #0]
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	699b      	ldr	r3, [r3, #24]
 800b5e2:	b298      	uxth	r0, r3
 800b5e4:	79fb      	ldrb	r3, [r7, #7]
 800b5e6:	9300      	str	r3, [sp, #0]
 800b5e8:	4603      	mov	r3, r0
 800b5ea:	68f8      	ldr	r0, [r7, #12]
 800b5ec:	f000 fade 	bl	800bbac <USB_WritePacket>
 800b5f0:	e0d2      	b.n	800b798 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b5f2:	69bb      	ldr	r3, [r7, #24]
 800b5f4:	015a      	lsls	r2, r3, #5
 800b5f6:	69fb      	ldr	r3, [r7, #28]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5fe:	691b      	ldr	r3, [r3, #16]
 800b600:	69ba      	ldr	r2, [r7, #24]
 800b602:	0151      	lsls	r1, r2, #5
 800b604:	69fa      	ldr	r2, [r7, #28]
 800b606:	440a      	add	r2, r1
 800b608:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b60c:	0cdb      	lsrs	r3, r3, #19
 800b60e:	04db      	lsls	r3, r3, #19
 800b610:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b612:	69bb      	ldr	r3, [r7, #24]
 800b614:	015a      	lsls	r2, r3, #5
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	4413      	add	r3, r2
 800b61a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b61e:	691b      	ldr	r3, [r3, #16]
 800b620:	69ba      	ldr	r2, [r7, #24]
 800b622:	0151      	lsls	r1, r2, #5
 800b624:	69fa      	ldr	r2, [r7, #28]
 800b626:	440a      	add	r2, r1
 800b628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b62c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b630:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b634:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	699b      	ldr	r3, [r3, #24]
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d126      	bne.n	800b68c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	015a      	lsls	r2, r3, #5
 800b642:	69fb      	ldr	r3, [r7, #28]
 800b644:	4413      	add	r3, r2
 800b646:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b64a:	691a      	ldr	r2, [r3, #16]
 800b64c:	68bb      	ldr	r3, [r7, #8]
 800b64e:	68db      	ldr	r3, [r3, #12]
 800b650:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b654:	69b9      	ldr	r1, [r7, #24]
 800b656:	0148      	lsls	r0, r1, #5
 800b658:	69f9      	ldr	r1, [r7, #28]
 800b65a:	4401      	add	r1, r0
 800b65c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b660:	4313      	orrs	r3, r2
 800b662:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b664:	69bb      	ldr	r3, [r7, #24]
 800b666:	015a      	lsls	r2, r3, #5
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	4413      	add	r3, r2
 800b66c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b670:	691b      	ldr	r3, [r3, #16]
 800b672:	69ba      	ldr	r2, [r7, #24]
 800b674:	0151      	lsls	r1, r2, #5
 800b676:	69fa      	ldr	r2, [r7, #28]
 800b678:	440a      	add	r2, r1
 800b67a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b67e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b682:	6113      	str	r3, [r2, #16]
 800b684:	e03a      	b.n	800b6fc <USB_EPStartXfer+0x3e4>
 800b686:	bf00      	nop
 800b688:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	699a      	ldr	r2, [r3, #24]
 800b690:	68bb      	ldr	r3, [r7, #8]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	4413      	add	r3, r2
 800b696:	1e5a      	subs	r2, r3, #1
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6a0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	8afa      	ldrh	r2, [r7, #22]
 800b6a8:	fb03 f202 	mul.w	r2, r3, r2
 800b6ac:	68bb      	ldr	r3, [r7, #8]
 800b6ae:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b6b0:	69bb      	ldr	r3, [r7, #24]
 800b6b2:	015a      	lsls	r2, r3, #5
 800b6b4:	69fb      	ldr	r3, [r7, #28]
 800b6b6:	4413      	add	r3, r2
 800b6b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6bc:	691a      	ldr	r2, [r3, #16]
 800b6be:	8afb      	ldrh	r3, [r7, #22]
 800b6c0:	04d9      	lsls	r1, r3, #19
 800b6c2:	4b38      	ldr	r3, [pc, #224]	; (800b7a4 <USB_EPStartXfer+0x48c>)
 800b6c4:	400b      	ands	r3, r1
 800b6c6:	69b9      	ldr	r1, [r7, #24]
 800b6c8:	0148      	lsls	r0, r1, #5
 800b6ca:	69f9      	ldr	r1, [r7, #28]
 800b6cc:	4401      	add	r1, r0
 800b6ce:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b6d6:	69bb      	ldr	r3, [r7, #24]
 800b6d8:	015a      	lsls	r2, r3, #5
 800b6da:	69fb      	ldr	r3, [r7, #28]
 800b6dc:	4413      	add	r3, r2
 800b6de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6e2:	691a      	ldr	r2, [r3, #16]
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	69db      	ldr	r3, [r3, #28]
 800b6e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6ec:	69b9      	ldr	r1, [r7, #24]
 800b6ee:	0148      	lsls	r0, r1, #5
 800b6f0:	69f9      	ldr	r1, [r7, #28]
 800b6f2:	4401      	add	r1, r0
 800b6f4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b6f8:	4313      	orrs	r3, r2
 800b6fa:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b6fc:	79fb      	ldrb	r3, [r7, #7]
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	d10d      	bne.n	800b71e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	691b      	ldr	r3, [r3, #16]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d009      	beq.n	800b71e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b70a:	68bb      	ldr	r3, [r7, #8]
 800b70c:	6919      	ldr	r1, [r3, #16]
 800b70e:	69bb      	ldr	r3, [r7, #24]
 800b710:	015a      	lsls	r2, r3, #5
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	4413      	add	r3, r2
 800b716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b71a:	460a      	mov	r2, r1
 800b71c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b71e:	68bb      	ldr	r3, [r7, #8]
 800b720:	791b      	ldrb	r3, [r3, #4]
 800b722:	2b01      	cmp	r3, #1
 800b724:	d128      	bne.n	800b778 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b726:	69fb      	ldr	r3, [r7, #28]
 800b728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b72c:	689b      	ldr	r3, [r3, #8]
 800b72e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b732:	2b00      	cmp	r3, #0
 800b734:	d110      	bne.n	800b758 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b736:	69bb      	ldr	r3, [r7, #24]
 800b738:	015a      	lsls	r2, r3, #5
 800b73a:	69fb      	ldr	r3, [r7, #28]
 800b73c:	4413      	add	r3, r2
 800b73e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	69ba      	ldr	r2, [r7, #24]
 800b746:	0151      	lsls	r1, r2, #5
 800b748:	69fa      	ldr	r2, [r7, #28]
 800b74a:	440a      	add	r2, r1
 800b74c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b750:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b754:	6013      	str	r3, [r2, #0]
 800b756:	e00f      	b.n	800b778 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b758:	69bb      	ldr	r3, [r7, #24]
 800b75a:	015a      	lsls	r2, r3, #5
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	4413      	add	r3, r2
 800b760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	69ba      	ldr	r2, [r7, #24]
 800b768:	0151      	lsls	r1, r2, #5
 800b76a:	69fa      	ldr	r2, [r7, #28]
 800b76c:	440a      	add	r2, r1
 800b76e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b772:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b776:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b778:	69bb      	ldr	r3, [r7, #24]
 800b77a:	015a      	lsls	r2, r3, #5
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	4413      	add	r3, r2
 800b780:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	69ba      	ldr	r2, [r7, #24]
 800b788:	0151      	lsls	r1, r2, #5
 800b78a:	69fa      	ldr	r2, [r7, #28]
 800b78c:	440a      	add	r2, r1
 800b78e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b792:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b796:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b798:	2300      	movs	r3, #0
}
 800b79a:	4618      	mov	r0, r3
 800b79c:	3720      	adds	r7, #32
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bd80      	pop	{r7, pc}
 800b7a2:	bf00      	nop
 800b7a4:	1ff80000 	.word	0x1ff80000

0800b7a8 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b7a8:	b480      	push	{r7}
 800b7aa:	b087      	sub	sp, #28
 800b7ac:	af00      	add	r7, sp, #0
 800b7ae:	60f8      	str	r0, [r7, #12]
 800b7b0:	60b9      	str	r1, [r7, #8]
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	781b      	ldrb	r3, [r3, #0]
 800b7be:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	785b      	ldrb	r3, [r3, #1]
 800b7c4:	2b01      	cmp	r3, #1
 800b7c6:	f040 80ce 	bne.w	800b966 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	699b      	ldr	r3, [r3, #24]
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d132      	bne.n	800b838 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b7d2:	693b      	ldr	r3, [r7, #16]
 800b7d4:	015a      	lsls	r2, r3, #5
 800b7d6:	697b      	ldr	r3, [r7, #20]
 800b7d8:	4413      	add	r3, r2
 800b7da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7de:	691b      	ldr	r3, [r3, #16]
 800b7e0:	693a      	ldr	r2, [r7, #16]
 800b7e2:	0151      	lsls	r1, r2, #5
 800b7e4:	697a      	ldr	r2, [r7, #20]
 800b7e6:	440a      	add	r2, r1
 800b7e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b7ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b7f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b7f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	015a      	lsls	r2, r3, #5
 800b7fa:	697b      	ldr	r3, [r7, #20]
 800b7fc:	4413      	add	r3, r2
 800b7fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b802:	691b      	ldr	r3, [r3, #16]
 800b804:	693a      	ldr	r2, [r7, #16]
 800b806:	0151      	lsls	r1, r2, #5
 800b808:	697a      	ldr	r2, [r7, #20]
 800b80a:	440a      	add	r2, r1
 800b80c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b810:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b814:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	015a      	lsls	r2, r3, #5
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	4413      	add	r3, r2
 800b81e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	693a      	ldr	r2, [r7, #16]
 800b826:	0151      	lsls	r1, r2, #5
 800b828:	697a      	ldr	r2, [r7, #20]
 800b82a:	440a      	add	r2, r1
 800b82c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b830:	0cdb      	lsrs	r3, r3, #19
 800b832:	04db      	lsls	r3, r3, #19
 800b834:	6113      	str	r3, [r2, #16]
 800b836:	e04e      	b.n	800b8d6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	015a      	lsls	r2, r3, #5
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	4413      	add	r3, r2
 800b840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	693a      	ldr	r2, [r7, #16]
 800b848:	0151      	lsls	r1, r2, #5
 800b84a:	697a      	ldr	r2, [r7, #20]
 800b84c:	440a      	add	r2, r1
 800b84e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b852:	0cdb      	lsrs	r3, r3, #19
 800b854:	04db      	lsls	r3, r3, #19
 800b856:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	015a      	lsls	r2, r3, #5
 800b85c:	697b      	ldr	r3, [r7, #20]
 800b85e:	4413      	add	r3, r2
 800b860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b864:	691b      	ldr	r3, [r3, #16]
 800b866:	693a      	ldr	r2, [r7, #16]
 800b868:	0151      	lsls	r1, r2, #5
 800b86a:	697a      	ldr	r2, [r7, #20]
 800b86c:	440a      	add	r2, r1
 800b86e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b872:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b876:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b87a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b87c:	68bb      	ldr	r3, [r7, #8]
 800b87e:	699a      	ldr	r2, [r3, #24]
 800b880:	68bb      	ldr	r3, [r7, #8]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	429a      	cmp	r2, r3
 800b886:	d903      	bls.n	800b890 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	68da      	ldr	r2, [r3, #12]
 800b88c:	68bb      	ldr	r3, [r7, #8]
 800b88e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	015a      	lsls	r2, r3, #5
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	4413      	add	r3, r2
 800b898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b89c:	691b      	ldr	r3, [r3, #16]
 800b89e:	693a      	ldr	r2, [r7, #16]
 800b8a0:	0151      	lsls	r1, r2, #5
 800b8a2:	697a      	ldr	r2, [r7, #20]
 800b8a4:	440a      	add	r2, r1
 800b8a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b8ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b8b0:	693b      	ldr	r3, [r7, #16]
 800b8b2:	015a      	lsls	r2, r3, #5
 800b8b4:	697b      	ldr	r3, [r7, #20]
 800b8b6:	4413      	add	r3, r2
 800b8b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8bc:	691a      	ldr	r2, [r3, #16]
 800b8be:	68bb      	ldr	r3, [r7, #8]
 800b8c0:	699b      	ldr	r3, [r3, #24]
 800b8c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b8c6:	6939      	ldr	r1, [r7, #16]
 800b8c8:	0148      	lsls	r0, r1, #5
 800b8ca:	6979      	ldr	r1, [r7, #20]
 800b8cc:	4401      	add	r1, r0
 800b8ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b8d2:	4313      	orrs	r3, r2
 800b8d4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b8d6:	79fb      	ldrb	r3, [r7, #7]
 800b8d8:	2b01      	cmp	r3, #1
 800b8da:	d11e      	bne.n	800b91a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	695b      	ldr	r3, [r3, #20]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d009      	beq.n	800b8f8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	015a      	lsls	r2, r3, #5
 800b8e8:	697b      	ldr	r3, [r7, #20]
 800b8ea:	4413      	add	r3, r2
 800b8ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	695b      	ldr	r3, [r3, #20]
 800b8f6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	015a      	lsls	r2, r3, #5
 800b8fc:	697b      	ldr	r3, [r7, #20]
 800b8fe:	4413      	add	r3, r2
 800b900:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	693a      	ldr	r2, [r7, #16]
 800b908:	0151      	lsls	r1, r2, #5
 800b90a:	697a      	ldr	r2, [r7, #20]
 800b90c:	440a      	add	r2, r1
 800b90e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b912:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b916:	6013      	str	r3, [r2, #0]
 800b918:	e097      	b.n	800ba4a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	015a      	lsls	r2, r3, #5
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	4413      	add	r3, r2
 800b922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	693a      	ldr	r2, [r7, #16]
 800b92a:	0151      	lsls	r1, r2, #5
 800b92c:	697a      	ldr	r2, [r7, #20]
 800b92e:	440a      	add	r2, r1
 800b930:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b934:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b938:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b93a:	68bb      	ldr	r3, [r7, #8]
 800b93c:	699b      	ldr	r3, [r3, #24]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	f000 8083 	beq.w	800ba4a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b94a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	f003 030f 	and.w	r3, r3, #15
 800b954:	2101      	movs	r1, #1
 800b956:	fa01 f303 	lsl.w	r3, r1, r3
 800b95a:	6979      	ldr	r1, [r7, #20]
 800b95c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b960:	4313      	orrs	r3, r2
 800b962:	634b      	str	r3, [r1, #52]	; 0x34
 800b964:	e071      	b.n	800ba4a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b966:	693b      	ldr	r3, [r7, #16]
 800b968:	015a      	lsls	r2, r3, #5
 800b96a:	697b      	ldr	r3, [r7, #20]
 800b96c:	4413      	add	r3, r2
 800b96e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b972:	691b      	ldr	r3, [r3, #16]
 800b974:	693a      	ldr	r2, [r7, #16]
 800b976:	0151      	lsls	r1, r2, #5
 800b978:	697a      	ldr	r2, [r7, #20]
 800b97a:	440a      	add	r2, r1
 800b97c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b980:	0cdb      	lsrs	r3, r3, #19
 800b982:	04db      	lsls	r3, r3, #19
 800b984:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	015a      	lsls	r2, r3, #5
 800b98a:	697b      	ldr	r3, [r7, #20]
 800b98c:	4413      	add	r3, r2
 800b98e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b992:	691b      	ldr	r3, [r3, #16]
 800b994:	693a      	ldr	r2, [r7, #16]
 800b996:	0151      	lsls	r1, r2, #5
 800b998:	697a      	ldr	r2, [r7, #20]
 800b99a:	440a      	add	r2, r1
 800b99c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b9a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b9a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	699b      	ldr	r3, [r3, #24]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d003      	beq.n	800b9ba <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b9b2:	68bb      	ldr	r3, [r7, #8]
 800b9b4:	68da      	ldr	r2, [r3, #12]
 800b9b6:	68bb      	ldr	r3, [r7, #8]
 800b9b8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b9ba:	68bb      	ldr	r3, [r7, #8]
 800b9bc:	68da      	ldr	r2, [r3, #12]
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	015a      	lsls	r2, r3, #5
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ce:	691b      	ldr	r3, [r3, #16]
 800b9d0:	693a      	ldr	r2, [r7, #16]
 800b9d2:	0151      	lsls	r1, r2, #5
 800b9d4:	697a      	ldr	r2, [r7, #20]
 800b9d6:	440a      	add	r2, r1
 800b9d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b9e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	015a      	lsls	r2, r3, #5
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ee:	691a      	ldr	r2, [r3, #16]
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	69db      	ldr	r3, [r3, #28]
 800b9f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b9f8:	6939      	ldr	r1, [r7, #16]
 800b9fa:	0148      	lsls	r0, r1, #5
 800b9fc:	6979      	ldr	r1, [r7, #20]
 800b9fe:	4401      	add	r1, r0
 800ba00:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ba04:	4313      	orrs	r3, r2
 800ba06:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ba08:	79fb      	ldrb	r3, [r7, #7]
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d10d      	bne.n	800ba2a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	691b      	ldr	r3, [r3, #16]
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d009      	beq.n	800ba2a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	6919      	ldr	r1, [r3, #16]
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	015a      	lsls	r2, r3, #5
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	4413      	add	r3, r2
 800ba22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba26:	460a      	mov	r2, r1
 800ba28:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ba2a:	693b      	ldr	r3, [r7, #16]
 800ba2c:	015a      	lsls	r2, r3, #5
 800ba2e:	697b      	ldr	r3, [r7, #20]
 800ba30:	4413      	add	r3, r2
 800ba32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	693a      	ldr	r2, [r7, #16]
 800ba3a:	0151      	lsls	r1, r2, #5
 800ba3c:	697a      	ldr	r2, [r7, #20]
 800ba3e:	440a      	add	r2, r1
 800ba40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba44:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ba48:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ba4a:	2300      	movs	r3, #0
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	371c      	adds	r7, #28
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b087      	sub	sp, #28
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800ba62:	2300      	movs	r3, #0
 800ba64:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800ba66:	2300      	movs	r3, #0
 800ba68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	785b      	ldrb	r3, [r3, #1]
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d14a      	bne.n	800bb0c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	781b      	ldrb	r3, [r3, #0]
 800ba7a:	015a      	lsls	r2, r3, #5
 800ba7c:	693b      	ldr	r3, [r7, #16]
 800ba7e:	4413      	add	r3, r2
 800ba80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba8e:	f040 8086 	bne.w	800bb9e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800ba92:	683b      	ldr	r3, [r7, #0]
 800ba94:	781b      	ldrb	r3, [r3, #0]
 800ba96:	015a      	lsls	r2, r3, #5
 800ba98:	693b      	ldr	r3, [r7, #16]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	683a      	ldr	r2, [r7, #0]
 800baa4:	7812      	ldrb	r2, [r2, #0]
 800baa6:	0151      	lsls	r1, r2, #5
 800baa8:	693a      	ldr	r2, [r7, #16]
 800baaa:	440a      	add	r2, r1
 800baac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bab0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bab4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bab6:	683b      	ldr	r3, [r7, #0]
 800bab8:	781b      	ldrb	r3, [r3, #0]
 800baba:	015a      	lsls	r2, r3, #5
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	4413      	add	r3, r2
 800bac0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	683a      	ldr	r2, [r7, #0]
 800bac8:	7812      	ldrb	r2, [r2, #0]
 800baca:	0151      	lsls	r1, r2, #5
 800bacc:	693a      	ldr	r2, [r7, #16]
 800bace:	440a      	add	r2, r1
 800bad0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bad4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bad8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	3301      	adds	r3, #1
 800bade:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	f242 7210 	movw	r2, #10000	; 0x2710
 800bae6:	4293      	cmp	r3, r2
 800bae8:	d902      	bls.n	800baf0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800baea:	2301      	movs	r3, #1
 800baec:	75fb      	strb	r3, [r7, #23]
          break;
 800baee:	e056      	b.n	800bb9e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800baf0:	683b      	ldr	r3, [r7, #0]
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	015a      	lsls	r2, r3, #5
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	4413      	add	r3, r2
 800bafa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb08:	d0e7      	beq.n	800bada <USB_EPStopXfer+0x82>
 800bb0a:	e048      	b.n	800bb9e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	781b      	ldrb	r3, [r3, #0]
 800bb10:	015a      	lsls	r2, r3, #5
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	4413      	add	r3, r2
 800bb16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb24:	d13b      	bne.n	800bb9e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bb26:	683b      	ldr	r3, [r7, #0]
 800bb28:	781b      	ldrb	r3, [r3, #0]
 800bb2a:	015a      	lsls	r2, r3, #5
 800bb2c:	693b      	ldr	r3, [r7, #16]
 800bb2e:	4413      	add	r3, r2
 800bb30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	683a      	ldr	r2, [r7, #0]
 800bb38:	7812      	ldrb	r2, [r2, #0]
 800bb3a:	0151      	lsls	r1, r2, #5
 800bb3c:	693a      	ldr	r2, [r7, #16]
 800bb3e:	440a      	add	r2, r1
 800bb40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb44:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb48:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bb4a:	683b      	ldr	r3, [r7, #0]
 800bb4c:	781b      	ldrb	r3, [r3, #0]
 800bb4e:	015a      	lsls	r2, r3, #5
 800bb50:	693b      	ldr	r3, [r7, #16]
 800bb52:	4413      	add	r3, r2
 800bb54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	683a      	ldr	r2, [r7, #0]
 800bb5c:	7812      	ldrb	r2, [r2, #0]
 800bb5e:	0151      	lsls	r1, r2, #5
 800bb60:	693a      	ldr	r2, [r7, #16]
 800bb62:	440a      	add	r2, r1
 800bb64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb68:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb6c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	3301      	adds	r3, #1
 800bb72:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f242 7210 	movw	r2, #10000	; 0x2710
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d902      	bls.n	800bb84 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bb7e:	2301      	movs	r3, #1
 800bb80:	75fb      	strb	r3, [r7, #23]
          break;
 800bb82:	e00c      	b.n	800bb9e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	781b      	ldrb	r3, [r3, #0]
 800bb88:	015a      	lsls	r2, r3, #5
 800bb8a:	693b      	ldr	r3, [r7, #16]
 800bb8c:	4413      	add	r3, r2
 800bb8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb98:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb9c:	d0e7      	beq.n	800bb6e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bb9e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	371c      	adds	r7, #28
 800bba4:	46bd      	mov	sp, r7
 800bba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbaa:	4770      	bx	lr

0800bbac <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bbac:	b480      	push	{r7}
 800bbae:	b089      	sub	sp, #36	; 0x24
 800bbb0:	af00      	add	r7, sp, #0
 800bbb2:	60f8      	str	r0, [r7, #12]
 800bbb4:	60b9      	str	r1, [r7, #8]
 800bbb6:	4611      	mov	r1, r2
 800bbb8:	461a      	mov	r2, r3
 800bbba:	460b      	mov	r3, r1
 800bbbc:	71fb      	strb	r3, [r7, #7]
 800bbbe:	4613      	mov	r3, r2
 800bbc0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bbca:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d123      	bne.n	800bc1a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bbd2:	88bb      	ldrh	r3, [r7, #4]
 800bbd4:	3303      	adds	r3, #3
 800bbd6:	089b      	lsrs	r3, r3, #2
 800bbd8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bbda:	2300      	movs	r3, #0
 800bbdc:	61bb      	str	r3, [r7, #24]
 800bbde:	e018      	b.n	800bc12 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bbe0:	79fb      	ldrb	r3, [r7, #7]
 800bbe2:	031a      	lsls	r2, r3, #12
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	4413      	add	r3, r2
 800bbe8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bbec:	461a      	mov	r2, r3
 800bbee:	69fb      	ldr	r3, [r7, #28]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bbf4:	69fb      	ldr	r3, [r7, #28]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bbfa:	69fb      	ldr	r3, [r7, #28]
 800bbfc:	3301      	adds	r3, #1
 800bbfe:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc00:	69fb      	ldr	r3, [r7, #28]
 800bc02:	3301      	adds	r3, #1
 800bc04:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc06:	69fb      	ldr	r3, [r7, #28]
 800bc08:	3301      	adds	r3, #1
 800bc0a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bc0c:	69bb      	ldr	r3, [r7, #24]
 800bc0e:	3301      	adds	r3, #1
 800bc10:	61bb      	str	r3, [r7, #24]
 800bc12:	69ba      	ldr	r2, [r7, #24]
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d3e2      	bcc.n	800bbe0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bc1a:	2300      	movs	r3, #0
}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	3724      	adds	r7, #36	; 0x24
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bc28:	b480      	push	{r7}
 800bc2a:	b08b      	sub	sp, #44	; 0x2c
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	60f8      	str	r0, [r7, #12]
 800bc30:	60b9      	str	r1, [r7, #8]
 800bc32:	4613      	mov	r3, r2
 800bc34:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bc3a:	68bb      	ldr	r3, [r7, #8]
 800bc3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bc3e:	88fb      	ldrh	r3, [r7, #6]
 800bc40:	089b      	lsrs	r3, r3, #2
 800bc42:	b29b      	uxth	r3, r3
 800bc44:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bc46:	88fb      	ldrh	r3, [r7, #6]
 800bc48:	f003 0303 	and.w	r3, r3, #3
 800bc4c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bc4e:	2300      	movs	r3, #0
 800bc50:	623b      	str	r3, [r7, #32]
 800bc52:	e014      	b.n	800bc7e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bc54:	69bb      	ldr	r3, [r7, #24]
 800bc56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc5a:	681a      	ldr	r2, [r3, #0]
 800bc5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc5e:	601a      	str	r2, [r3, #0]
    pDest++;
 800bc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc62:	3301      	adds	r3, #1
 800bc64:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bc66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc68:	3301      	adds	r3, #1
 800bc6a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc6e:	3301      	adds	r3, #1
 800bc70:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc74:	3301      	adds	r3, #1
 800bc76:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bc78:	6a3b      	ldr	r3, [r7, #32]
 800bc7a:	3301      	adds	r3, #1
 800bc7c:	623b      	str	r3, [r7, #32]
 800bc7e:	6a3a      	ldr	r2, [r7, #32]
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	429a      	cmp	r2, r3
 800bc84:	d3e6      	bcc.n	800bc54 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bc86:	8bfb      	ldrh	r3, [r7, #30]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d01e      	beq.n	800bcca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bc90:	69bb      	ldr	r3, [r7, #24]
 800bc92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc96:	461a      	mov	r2, r3
 800bc98:	f107 0310 	add.w	r3, r7, #16
 800bc9c:	6812      	ldr	r2, [r2, #0]
 800bc9e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bca0:	693a      	ldr	r2, [r7, #16]
 800bca2:	6a3b      	ldr	r3, [r7, #32]
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	00db      	lsls	r3, r3, #3
 800bca8:	fa22 f303 	lsr.w	r3, r2, r3
 800bcac:	b2da      	uxtb	r2, r3
 800bcae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb0:	701a      	strb	r2, [r3, #0]
      i++;
 800bcb2:	6a3b      	ldr	r3, [r7, #32]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	623b      	str	r3, [r7, #32]
      pDest++;
 800bcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcba:	3301      	adds	r3, #1
 800bcbc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bcbe:	8bfb      	ldrh	r3, [r7, #30]
 800bcc0:	3b01      	subs	r3, #1
 800bcc2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bcc4:	8bfb      	ldrh	r3, [r7, #30]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d1ea      	bne.n	800bca0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	372c      	adds	r7, #44	; 0x2c
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcd6:	4770      	bx	lr

0800bcd8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b085      	sub	sp, #20
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	785b      	ldrb	r3, [r3, #1]
 800bcf0:	2b01      	cmp	r3, #1
 800bcf2:	d12c      	bne.n	800bd4e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bcf4:	68bb      	ldr	r3, [r7, #8]
 800bcf6:	015a      	lsls	r2, r3, #5
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	4413      	add	r3, r2
 800bcfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	db12      	blt.n	800bd2c <USB_EPSetStall+0x54>
 800bd06:	68bb      	ldr	r3, [r7, #8]
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d00f      	beq.n	800bd2c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bd0c:	68bb      	ldr	r3, [r7, #8]
 800bd0e:	015a      	lsls	r2, r3, #5
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	4413      	add	r3, r2
 800bd14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	68ba      	ldr	r2, [r7, #8]
 800bd1c:	0151      	lsls	r1, r2, #5
 800bd1e:	68fa      	ldr	r2, [r7, #12]
 800bd20:	440a      	add	r2, r1
 800bd22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bd2a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bd2c:	68bb      	ldr	r3, [r7, #8]
 800bd2e:	015a      	lsls	r2, r3, #5
 800bd30:	68fb      	ldr	r3, [r7, #12]
 800bd32:	4413      	add	r3, r2
 800bd34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	68ba      	ldr	r2, [r7, #8]
 800bd3c:	0151      	lsls	r1, r2, #5
 800bd3e:	68fa      	ldr	r2, [r7, #12]
 800bd40:	440a      	add	r2, r1
 800bd42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bd4a:	6013      	str	r3, [r2, #0]
 800bd4c:	e02b      	b.n	800bda6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bd4e:	68bb      	ldr	r3, [r7, #8]
 800bd50:	015a      	lsls	r2, r3, #5
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	4413      	add	r3, r2
 800bd56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	db12      	blt.n	800bd86 <USB_EPSetStall+0xae>
 800bd60:	68bb      	ldr	r3, [r7, #8]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d00f      	beq.n	800bd86 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	015a      	lsls	r2, r3, #5
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	68ba      	ldr	r2, [r7, #8]
 800bd76:	0151      	lsls	r1, r2, #5
 800bd78:	68fa      	ldr	r2, [r7, #12]
 800bd7a:	440a      	add	r2, r1
 800bd7c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd80:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bd84:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bd86:	68bb      	ldr	r3, [r7, #8]
 800bd88:	015a      	lsls	r2, r3, #5
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	4413      	add	r3, r2
 800bd8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	68ba      	ldr	r2, [r7, #8]
 800bd96:	0151      	lsls	r1, r2, #5
 800bd98:	68fa      	ldr	r2, [r7, #12]
 800bd9a:	440a      	add	r2, r1
 800bd9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bda0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bda4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bda6:	2300      	movs	r3, #0
}
 800bda8:	4618      	mov	r0, r3
 800bdaa:	3714      	adds	r7, #20
 800bdac:	46bd      	mov	sp, r7
 800bdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb2:	4770      	bx	lr

0800bdb4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]
 800bdbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	781b      	ldrb	r3, [r3, #0]
 800bdc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	785b      	ldrb	r3, [r3, #1]
 800bdcc:	2b01      	cmp	r3, #1
 800bdce:	d128      	bne.n	800be22 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bdd0:	68bb      	ldr	r3, [r7, #8]
 800bdd2:	015a      	lsls	r2, r3, #5
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	4413      	add	r3, r2
 800bdd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	68ba      	ldr	r2, [r7, #8]
 800bde0:	0151      	lsls	r1, r2, #5
 800bde2:	68fa      	ldr	r2, [r7, #12]
 800bde4:	440a      	add	r2, r1
 800bde6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bdea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bdee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bdf0:	683b      	ldr	r3, [r7, #0]
 800bdf2:	791b      	ldrb	r3, [r3, #4]
 800bdf4:	2b03      	cmp	r3, #3
 800bdf6:	d003      	beq.n	800be00 <USB_EPClearStall+0x4c>
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	791b      	ldrb	r3, [r3, #4]
 800bdfc:	2b02      	cmp	r3, #2
 800bdfe:	d138      	bne.n	800be72 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800be00:	68bb      	ldr	r3, [r7, #8]
 800be02:	015a      	lsls	r2, r3, #5
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	4413      	add	r3, r2
 800be08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	68ba      	ldr	r2, [r7, #8]
 800be10:	0151      	lsls	r1, r2, #5
 800be12:	68fa      	ldr	r2, [r7, #12]
 800be14:	440a      	add	r2, r1
 800be16:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be1e:	6013      	str	r3, [r2, #0]
 800be20:	e027      	b.n	800be72 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800be22:	68bb      	ldr	r3, [r7, #8]
 800be24:	015a      	lsls	r2, r3, #5
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	4413      	add	r3, r2
 800be2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	68ba      	ldr	r2, [r7, #8]
 800be32:	0151      	lsls	r1, r2, #5
 800be34:	68fa      	ldr	r2, [r7, #12]
 800be36:	440a      	add	r2, r1
 800be38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be3c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800be40:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	791b      	ldrb	r3, [r3, #4]
 800be46:	2b03      	cmp	r3, #3
 800be48:	d003      	beq.n	800be52 <USB_EPClearStall+0x9e>
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	791b      	ldrb	r3, [r3, #4]
 800be4e:	2b02      	cmp	r3, #2
 800be50:	d10f      	bne.n	800be72 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800be52:	68bb      	ldr	r3, [r7, #8]
 800be54:	015a      	lsls	r2, r3, #5
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	4413      	add	r3, r2
 800be5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	68ba      	ldr	r2, [r7, #8]
 800be62:	0151      	lsls	r1, r2, #5
 800be64:	68fa      	ldr	r2, [r7, #12]
 800be66:	440a      	add	r2, r1
 800be68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be70:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800be72:	2300      	movs	r3, #0
}
 800be74:	4618      	mov	r0, r3
 800be76:	3714      	adds	r7, #20
 800be78:	46bd      	mov	sp, r7
 800be7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7e:	4770      	bx	lr

0800be80 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800be80:	b480      	push	{r7}
 800be82:	b085      	sub	sp, #20
 800be84:	af00      	add	r7, sp, #0
 800be86:	6078      	str	r0, [r7, #4]
 800be88:	460b      	mov	r3, r1
 800be8a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	68fa      	ldr	r2, [r7, #12]
 800be9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800be9e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bea2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	78fb      	ldrb	r3, [r7, #3]
 800beae:	011b      	lsls	r3, r3, #4
 800beb0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800beb4:	68f9      	ldr	r1, [r7, #12]
 800beb6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800beba:	4313      	orrs	r3, r2
 800bebc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bebe:	2300      	movs	r3, #0
}
 800bec0:	4618      	mov	r0, r3
 800bec2:	3714      	adds	r7, #20
 800bec4:	46bd      	mov	sp, r7
 800bec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beca:	4770      	bx	lr

0800becc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800becc:	b480      	push	{r7}
 800bece:	b085      	sub	sp, #20
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	68fa      	ldr	r2, [r7, #12]
 800bee2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bee6:	f023 0303 	bic.w	r3, r3, #3
 800beea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bef2:	685b      	ldr	r3, [r3, #4]
 800bef4:	68fa      	ldr	r2, [r7, #12]
 800bef6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800befa:	f023 0302 	bic.w	r3, r3, #2
 800befe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf00:	2300      	movs	r3, #0
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3714      	adds	r7, #20
 800bf06:	46bd      	mov	sp, r7
 800bf08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0c:	4770      	bx	lr

0800bf0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bf0e:	b480      	push	{r7}
 800bf10:	b085      	sub	sp, #20
 800bf12:	af00      	add	r7, sp, #0
 800bf14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	68fa      	ldr	r2, [r7, #12]
 800bf24:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bf28:	f023 0303 	bic.w	r3, r3, #3
 800bf2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf34:	685b      	ldr	r3, [r3, #4]
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf3c:	f043 0302 	orr.w	r3, r3, #2
 800bf40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf42:	2300      	movs	r3, #0
}
 800bf44:	4618      	mov	r0, r3
 800bf46:	3714      	adds	r7, #20
 800bf48:	46bd      	mov	sp, r7
 800bf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4e:	4770      	bx	lr

0800bf50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	695b      	ldr	r3, [r3, #20]
 800bf5c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	699b      	ldr	r3, [r3, #24]
 800bf62:	68fa      	ldr	r2, [r7, #12]
 800bf64:	4013      	ands	r3, r2
 800bf66:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bf68:	68fb      	ldr	r3, [r7, #12]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3714      	adds	r7, #20
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr

0800bf76 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bf76:	b480      	push	{r7}
 800bf78:	b085      	sub	sp, #20
 800bf7a:	af00      	add	r7, sp, #0
 800bf7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf88:	699b      	ldr	r3, [r3, #24]
 800bf8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf92:	69db      	ldr	r3, [r3, #28]
 800bf94:	68ba      	ldr	r2, [r7, #8]
 800bf96:	4013      	ands	r3, r2
 800bf98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	0c1b      	lsrs	r3, r3, #16
}
 800bf9e:	4618      	mov	r0, r3
 800bfa0:	3714      	adds	r7, #20
 800bfa2:	46bd      	mov	sp, r7
 800bfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa8:	4770      	bx	lr

0800bfaa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bfaa:	b480      	push	{r7}
 800bfac:	b085      	sub	sp, #20
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfbc:	699b      	ldr	r3, [r3, #24]
 800bfbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfc6:	69db      	ldr	r3, [r3, #28]
 800bfc8:	68ba      	ldr	r2, [r7, #8]
 800bfca:	4013      	ands	r3, r2
 800bfcc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bfce:	68bb      	ldr	r3, [r7, #8]
 800bfd0:	b29b      	uxth	r3, r3
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3714      	adds	r7, #20
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfdc:	4770      	bx	lr

0800bfde <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bfde:	b480      	push	{r7}
 800bfe0:	b085      	sub	sp, #20
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	460b      	mov	r3, r1
 800bfe8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bfee:	78fb      	ldrb	r3, [r7, #3]
 800bff0:	015a      	lsls	r2, r3, #5
 800bff2:	68fb      	ldr	r3, [r7, #12]
 800bff4:	4413      	add	r3, r2
 800bff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bffa:	689b      	ldr	r3, [r3, #8]
 800bffc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c004:	695b      	ldr	r3, [r3, #20]
 800c006:	68ba      	ldr	r2, [r7, #8]
 800c008:	4013      	ands	r3, r2
 800c00a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c00c:	68bb      	ldr	r3, [r7, #8]
}
 800c00e:	4618      	mov	r0, r3
 800c010:	3714      	adds	r7, #20
 800c012:	46bd      	mov	sp, r7
 800c014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c018:	4770      	bx	lr

0800c01a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c01a:	b480      	push	{r7}
 800c01c:	b087      	sub	sp, #28
 800c01e:	af00      	add	r7, sp, #0
 800c020:	6078      	str	r0, [r7, #4]
 800c022:	460b      	mov	r3, r1
 800c024:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c030:	691b      	ldr	r3, [r3, #16]
 800c032:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c03a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c03c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c03e:	78fb      	ldrb	r3, [r7, #3]
 800c040:	f003 030f 	and.w	r3, r3, #15
 800c044:	68fa      	ldr	r2, [r7, #12]
 800c046:	fa22 f303 	lsr.w	r3, r2, r3
 800c04a:	01db      	lsls	r3, r3, #7
 800c04c:	b2db      	uxtb	r3, r3
 800c04e:	693a      	ldr	r2, [r7, #16]
 800c050:	4313      	orrs	r3, r2
 800c052:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c054:	78fb      	ldrb	r3, [r7, #3]
 800c056:	015a      	lsls	r2, r3, #5
 800c058:	697b      	ldr	r3, [r7, #20]
 800c05a:	4413      	add	r3, r2
 800c05c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c060:	689b      	ldr	r3, [r3, #8]
 800c062:	693a      	ldr	r2, [r7, #16]
 800c064:	4013      	ands	r3, r2
 800c066:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c068:	68bb      	ldr	r3, [r7, #8]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	371c      	adds	r7, #28
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr

0800c076 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c076:	b480      	push	{r7}
 800c078:	b083      	sub	sp, #12
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	695b      	ldr	r3, [r3, #20]
 800c082:	f003 0301 	and.w	r3, r3, #1
}
 800c086:	4618      	mov	r0, r3
 800c088:	370c      	adds	r7, #12
 800c08a:	46bd      	mov	sp, r7
 800c08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c090:	4770      	bx	lr

0800c092 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c092:	b480      	push	{r7}
 800c094:	b085      	sub	sp, #20
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	68fa      	ldr	r2, [r7, #12]
 800c0a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0ac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c0b0:	f023 0307 	bic.w	r3, r3, #7
 800c0b4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0bc:	685b      	ldr	r3, [r3, #4]
 800c0be:	68fa      	ldr	r2, [r7, #12]
 800c0c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c0c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0c8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3714      	adds	r7, #20
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d6:	4770      	bx	lr

0800c0d8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c0d8:	b480      	push	{r7}
 800c0da:	b087      	sub	sp, #28
 800c0dc:	af00      	add	r7, sp, #0
 800c0de:	60f8      	str	r0, [r7, #12]
 800c0e0:	460b      	mov	r3, r1
 800c0e2:	607a      	str	r2, [r7, #4]
 800c0e4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	333c      	adds	r3, #60	; 0x3c
 800c0ee:	3304      	adds	r3, #4
 800c0f0:	681b      	ldr	r3, [r3, #0]
 800c0f2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c0f4:	693b      	ldr	r3, [r7, #16]
 800c0f6:	4a26      	ldr	r2, [pc, #152]	; (800c190 <USB_EP0_OutStart+0xb8>)
 800c0f8:	4293      	cmp	r3, r2
 800c0fa:	d90a      	bls.n	800c112 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c102:	681b      	ldr	r3, [r3, #0]
 800c104:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c108:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c10c:	d101      	bne.n	800c112 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c10e:	2300      	movs	r3, #0
 800c110:	e037      	b.n	800c182 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c112:	697b      	ldr	r3, [r7, #20]
 800c114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c118:	461a      	mov	r2, r3
 800c11a:	2300      	movs	r3, #0
 800c11c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c11e:	697b      	ldr	r3, [r7, #20]
 800c120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c124:	691b      	ldr	r3, [r3, #16]
 800c126:	697a      	ldr	r2, [r7, #20]
 800c128:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c12c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c130:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c132:	697b      	ldr	r3, [r7, #20]
 800c134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c138:	691b      	ldr	r3, [r3, #16]
 800c13a:	697a      	ldr	r2, [r7, #20]
 800c13c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c140:	f043 0318 	orr.w	r3, r3, #24
 800c144:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c146:	697b      	ldr	r3, [r7, #20]
 800c148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c14c:	691b      	ldr	r3, [r3, #16]
 800c14e:	697a      	ldr	r2, [r7, #20]
 800c150:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c154:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c158:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c15a:	7afb      	ldrb	r3, [r7, #11]
 800c15c:	2b01      	cmp	r3, #1
 800c15e:	d10f      	bne.n	800c180 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c166:	461a      	mov	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	697a      	ldr	r2, [r7, #20]
 800c176:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c17a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c17e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c180:	2300      	movs	r3, #0
}
 800c182:	4618      	mov	r0, r3
 800c184:	371c      	adds	r7, #28
 800c186:	46bd      	mov	sp, r7
 800c188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18c:	4770      	bx	lr
 800c18e:	bf00      	nop
 800c190:	4f54300a 	.word	0x4f54300a

0800c194 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c194:	b480      	push	{r7}
 800c196:	b085      	sub	sp, #20
 800c198:	af00      	add	r7, sp, #0
 800c19a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c19c:	2300      	movs	r3, #0
 800c19e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c1a0:	68fb      	ldr	r3, [r7, #12]
 800c1a2:	3301      	adds	r3, #1
 800c1a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	4a13      	ldr	r2, [pc, #76]	; (800c1f8 <USB_CoreReset+0x64>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d901      	bls.n	800c1b2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c1ae:	2303      	movs	r3, #3
 800c1b0:	e01b      	b.n	800c1ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	691b      	ldr	r3, [r3, #16]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	daf2      	bge.n	800c1a0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c1ba:	2300      	movs	r3, #0
 800c1bc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	691b      	ldr	r3, [r3, #16]
 800c1c2:	f043 0201 	orr.w	r2, r3, #1
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	4a09      	ldr	r2, [pc, #36]	; (800c1f8 <USB_CoreReset+0x64>)
 800c1d4:	4293      	cmp	r3, r2
 800c1d6:	d901      	bls.n	800c1dc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c1d8:	2303      	movs	r3, #3
 800c1da:	e006      	b.n	800c1ea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	691b      	ldr	r3, [r3, #16]
 800c1e0:	f003 0301 	and.w	r3, r3, #1
 800c1e4:	2b01      	cmp	r3, #1
 800c1e6:	d0f0      	beq.n	800c1ca <USB_CoreReset+0x36>

  return HAL_OK;
 800c1e8:	2300      	movs	r3, #0
}
 800c1ea:	4618      	mov	r0, r3
 800c1ec:	3714      	adds	r7, #20
 800c1ee:	46bd      	mov	sp, r7
 800c1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f4:	4770      	bx	lr
 800c1f6:	bf00      	nop
 800c1f8:	00030d40 	.word	0x00030d40

0800c1fc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c200:	4904      	ldr	r1, [pc, #16]	; (800c214 <MX_FATFS_Init+0x18>)
 800c202:	4805      	ldr	r0, [pc, #20]	; (800c218 <MX_FATFS_Init+0x1c>)
 800c204:	f004 fcb2 	bl	8010b6c <FATFS_LinkDriver>
 800c208:	4603      	mov	r3, r0
 800c20a:	461a      	mov	r2, r3
 800c20c:	4b03      	ldr	r3, [pc, #12]	; (800c21c <MX_FATFS_Init+0x20>)
 800c20e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c210:	bf00      	nop
 800c212:	bd80      	pop	{r7, pc}
 800c214:	20000ab8 	.word	0x20000ab8
 800c218:	080157b0 	.word	0x080157b0
 800c21c:	20000ab4 	.word	0x20000ab4

0800c220 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c220:	b480      	push	{r7}
 800c222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c224:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c226:	4618      	mov	r0, r3
 800c228:	46bd      	mov	sp, r7
 800c22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c22e:	4770      	bx	lr

0800c230 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c236:	2300      	movs	r3, #0
 800c238:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c23a:	f000 f896 	bl	800c36a <BSP_SD_IsDetected>
 800c23e:	4603      	mov	r3, r0
 800c240:	2b01      	cmp	r3, #1
 800c242:	d001      	beq.n	800c248 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800c244:	2301      	movs	r3, #1
 800c246:	e012      	b.n	800c26e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800c248:	480b      	ldr	r0, [pc, #44]	; (800c278 <BSP_SD_Init+0x48>)
 800c24a:	f7fa fe3d 	bl	8006ec8 <HAL_SD_Init>
 800c24e:	4603      	mov	r3, r0
 800c250:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c252:	79fb      	ldrb	r3, [r7, #7]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d109      	bne.n	800c26c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800c258:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c25c:	4806      	ldr	r0, [pc, #24]	; (800c278 <BSP_SD_Init+0x48>)
 800c25e:	f7fb fc0b 	bl	8007a78 <HAL_SD_ConfigWideBusOperation>
 800c262:	4603      	mov	r3, r0
 800c264:	2b00      	cmp	r3, #0
 800c266:	d001      	beq.n	800c26c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c268:	2301      	movs	r3, #1
 800c26a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c26c:	79fb      	ldrb	r3, [r7, #7]
}
 800c26e:	4618      	mov	r0, r3
 800c270:	3708      	adds	r7, #8
 800c272:	46bd      	mov	sp, r7
 800c274:	bd80      	pop	{r7, pc}
 800c276:	bf00      	nop
 800c278:	20000370 	.word	0x20000370

0800c27c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b086      	sub	sp, #24
 800c280:	af00      	add	r7, sp, #0
 800c282:	60f8      	str	r0, [r7, #12]
 800c284:	60b9      	str	r1, [r7, #8]
 800c286:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c288:	2300      	movs	r3, #0
 800c28a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	68ba      	ldr	r2, [r7, #8]
 800c290:	68f9      	ldr	r1, [r7, #12]
 800c292:	4806      	ldr	r0, [pc, #24]	; (800c2ac <BSP_SD_ReadBlocks_DMA+0x30>)
 800c294:	f7fa fec8 	bl	8007028 <HAL_SD_ReadBlocks_DMA>
 800c298:	4603      	mov	r3, r0
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d001      	beq.n	800c2a2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c29e:	2301      	movs	r3, #1
 800c2a0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c2a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	3718      	adds	r7, #24
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	bd80      	pop	{r7, pc}
 800c2ac:	20000370 	.word	0x20000370

0800c2b0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b086      	sub	sp, #24
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	60f8      	str	r0, [r7, #12]
 800c2b8:	60b9      	str	r1, [r7, #8]
 800c2ba:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	68ba      	ldr	r2, [r7, #8]
 800c2c4:	68f9      	ldr	r1, [r7, #12]
 800c2c6:	4806      	ldr	r0, [pc, #24]	; (800c2e0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800c2c8:	f7fa ff90 	bl	80071ec <HAL_SD_WriteBlocks_DMA>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d001      	beq.n	800c2d6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c2d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c2d8:	4618      	mov	r0, r3
 800c2da:	3718      	adds	r7, #24
 800c2dc:	46bd      	mov	sp, r7
 800c2de:	bd80      	pop	{r7, pc}
 800c2e0:	20000370 	.word	0x20000370

0800c2e4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c2e4:	b580      	push	{r7, lr}
 800c2e6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c2e8:	4805      	ldr	r0, [pc, #20]	; (800c300 <BSP_SD_GetCardState+0x1c>)
 800c2ea:	f7fb fc5f 	bl	8007bac <HAL_SD_GetCardState>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	2b04      	cmp	r3, #4
 800c2f2:	bf14      	ite	ne
 800c2f4:	2301      	movne	r3, #1
 800c2f6:	2300      	moveq	r3, #0
 800c2f8:	b2db      	uxtb	r3, r3
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	20000370 	.word	0x20000370

0800c304 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b082      	sub	sp, #8
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800c30c:	6879      	ldr	r1, [r7, #4]
 800c30e:	4803      	ldr	r0, [pc, #12]	; (800c31c <BSP_SD_GetCardInfo+0x18>)
 800c310:	f7fb fb86 	bl	8007a20 <HAL_SD_GetCardInfo>
}
 800c314:	bf00      	nop
 800c316:	3708      	adds	r7, #8
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	20000370 	.word	0x20000370

0800c320 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800c328:	f000 f818 	bl	800c35c <BSP_SD_AbortCallback>
}
 800c32c:	bf00      	nop
 800c32e:	3708      	adds	r7, #8
 800c330:	46bd      	mov	sp, r7
 800c332:	bd80      	pop	{r7, pc}

0800c334 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b082      	sub	sp, #8
 800c338:	af00      	add	r7, sp, #0
 800c33a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c33c:	f000 f9a8 	bl	800c690 <BSP_SD_WriteCpltCallback>
}
 800c340:	bf00      	nop
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c350:	f000 f9aa 	bl	800c6a8 <BSP_SD_ReadCpltCallback>
}
 800c354:	bf00      	nop
 800c356:	3708      	adds	r7, #8
 800c358:	46bd      	mov	sp, r7
 800c35a:	bd80      	pop	{r7, pc}

0800c35c <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800c35c:	b480      	push	{r7}
 800c35e:	af00      	add	r7, sp, #0

}
 800c360:	bf00      	nop
 800c362:	46bd      	mov	sp, r7
 800c364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c368:	4770      	bx	lr

0800c36a <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c36a:	b580      	push	{r7, lr}
 800c36c:	b082      	sub	sp, #8
 800c36e:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c370:	2301      	movs	r3, #1
 800c372:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c374:	f000 f80c 	bl	800c390 <BSP_PlatformIsDetected>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d101      	bne.n	800c382 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c37e:	2300      	movs	r3, #0
 800c380:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c382:	79fb      	ldrb	r3, [r7, #7]
 800c384:	b2db      	uxtb	r3, r3
}
 800c386:	4618      	mov	r0, r3
 800c388:	3708      	adds	r7, #8
 800c38a:	46bd      	mov	sp, r7
 800c38c:	bd80      	pop	{r7, pc}
	...

0800c390 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c396:	2301      	movs	r3, #1
 800c398:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c39a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c39e:	4806      	ldr	r0, [pc, #24]	; (800c3b8 <BSP_PlatformIsDetected+0x28>)
 800c3a0:	f7f7 fef6 	bl	8004190 <HAL_GPIO_ReadPin>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d001      	beq.n	800c3ae <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c3ae:	79fb      	ldrb	r3, [r7, #7]
}
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}
 800c3b8:	40020400 	.word	0x40020400

0800c3bc <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c3bc:	b580      	push	{r7, lr}
 800c3be:	b084      	sub	sp, #16
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c3c4:	f7f6 fff8 	bl	80033b8 <HAL_GetTick>
 800c3c8:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c3ca:	e006      	b.n	800c3da <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c3cc:	f7ff ff8a 	bl	800c2e4 <BSP_SD_GetCardState>
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d101      	bne.n	800c3da <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	e009      	b.n	800c3ee <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c3da:	f7f6 ffed 	bl	80033b8 <HAL_GetTick>
 800c3de:	4602      	mov	r2, r0
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	1ad3      	subs	r3, r2, r3
 800c3e4:	687a      	ldr	r2, [r7, #4]
 800c3e6:	429a      	cmp	r2, r3
 800c3e8:	d8f0      	bhi.n	800c3cc <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c3ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c3ee:	4618      	mov	r0, r3
 800c3f0:	3710      	adds	r7, #16
 800c3f2:	46bd      	mov	sp, r7
 800c3f4:	bd80      	pop	{r7, pc}
	...

0800c3f8 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	4603      	mov	r3, r0
 800c400:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c402:	4b0b      	ldr	r3, [pc, #44]	; (800c430 <SD_CheckStatus+0x38>)
 800c404:	2201      	movs	r2, #1
 800c406:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c408:	f7ff ff6c 	bl	800c2e4 <BSP_SD_GetCardState>
 800c40c:	4603      	mov	r3, r0
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d107      	bne.n	800c422 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c412:	4b07      	ldr	r3, [pc, #28]	; (800c430 <SD_CheckStatus+0x38>)
 800c414:	781b      	ldrb	r3, [r3, #0]
 800c416:	b2db      	uxtb	r3, r3
 800c418:	f023 0301 	bic.w	r3, r3, #1
 800c41c:	b2da      	uxtb	r2, r3
 800c41e:	4b04      	ldr	r3, [pc, #16]	; (800c430 <SD_CheckStatus+0x38>)
 800c420:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c422:	4b03      	ldr	r3, [pc, #12]	; (800c430 <SD_CheckStatus+0x38>)
 800c424:	781b      	ldrb	r3, [r3, #0]
 800c426:	b2db      	uxtb	r3, r3
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3708      	adds	r7, #8
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}
 800c430:	2000002d 	.word	0x2000002d

0800c434 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	4603      	mov	r3, r0
 800c43c:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c43e:	f7ff fef7 	bl	800c230 <BSP_SD_Init>
 800c442:	4603      	mov	r3, r0
 800c444:	2b00      	cmp	r3, #0
 800c446:	d107      	bne.n	800c458 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800c448:	79fb      	ldrb	r3, [r7, #7]
 800c44a:	4618      	mov	r0, r3
 800c44c:	f7ff ffd4 	bl	800c3f8 <SD_CheckStatus>
 800c450:	4603      	mov	r3, r0
 800c452:	461a      	mov	r2, r3
 800c454:	4b04      	ldr	r3, [pc, #16]	; (800c468 <SD_initialize+0x34>)
 800c456:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c458:	4b03      	ldr	r3, [pc, #12]	; (800c468 <SD_initialize+0x34>)
 800c45a:	781b      	ldrb	r3, [r3, #0]
 800c45c:	b2db      	uxtb	r3, r3
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3708      	adds	r7, #8
 800c462:	46bd      	mov	sp, r7
 800c464:	bd80      	pop	{r7, pc}
 800c466:	bf00      	nop
 800c468:	2000002d 	.word	0x2000002d

0800c46c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b082      	sub	sp, #8
 800c470:	af00      	add	r7, sp, #0
 800c472:	4603      	mov	r3, r0
 800c474:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c476:	79fb      	ldrb	r3, [r7, #7]
 800c478:	4618      	mov	r0, r3
 800c47a:	f7ff ffbd 	bl	800c3f8 <SD_CheckStatus>
 800c47e:	4603      	mov	r3, r0
}
 800c480:	4618      	mov	r0, r3
 800c482:	3708      	adds	r7, #8
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b086      	sub	sp, #24
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	60b9      	str	r1, [r7, #8]
 800c490:	607a      	str	r2, [r7, #4]
 800c492:	603b      	str	r3, [r7, #0]
 800c494:	4603      	mov	r3, r0
 800c496:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c498:	2301      	movs	r3, #1
 800c49a:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c49c:	f247 5030 	movw	r0, #30000	; 0x7530
 800c4a0:	f7ff ff8c 	bl	800c3bc <SD_CheckStatusWithTimeout>
 800c4a4:	4603      	mov	r3, r0
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	da01      	bge.n	800c4ae <SD_read+0x26>
  {
    return res;
 800c4aa:	7dfb      	ldrb	r3, [r7, #23]
 800c4ac:	e03b      	b.n	800c526 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800c4ae:	683a      	ldr	r2, [r7, #0]
 800c4b0:	6879      	ldr	r1, [r7, #4]
 800c4b2:	68b8      	ldr	r0, [r7, #8]
 800c4b4:	f7ff fee2 	bl	800c27c <BSP_SD_ReadBlocks_DMA>
 800c4b8:	4603      	mov	r3, r0
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d132      	bne.n	800c524 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800c4be:	4b1c      	ldr	r3, [pc, #112]	; (800c530 <SD_read+0xa8>)
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800c4c4:	f7f6 ff78 	bl	80033b8 <HAL_GetTick>
 800c4c8:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c4ca:	bf00      	nop
 800c4cc:	4b18      	ldr	r3, [pc, #96]	; (800c530 <SD_read+0xa8>)
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d108      	bne.n	800c4e6 <SD_read+0x5e>
 800c4d4:	f7f6 ff70 	bl	80033b8 <HAL_GetTick>
 800c4d8:	4602      	mov	r2, r0
 800c4da:	693b      	ldr	r3, [r7, #16]
 800c4dc:	1ad3      	subs	r3, r2, r3
 800c4de:	f247 522f 	movw	r2, #29999	; 0x752f
 800c4e2:	4293      	cmp	r3, r2
 800c4e4:	d9f2      	bls.n	800c4cc <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800c4e6:	4b12      	ldr	r3, [pc, #72]	; (800c530 <SD_read+0xa8>)
 800c4e8:	681b      	ldr	r3, [r3, #0]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d102      	bne.n	800c4f4 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800c4ee:	2301      	movs	r3, #1
 800c4f0:	75fb      	strb	r3, [r7, #23]
 800c4f2:	e017      	b.n	800c524 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800c4f4:	4b0e      	ldr	r3, [pc, #56]	; (800c530 <SD_read+0xa8>)
 800c4f6:	2200      	movs	r2, #0
 800c4f8:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c4fa:	f7f6 ff5d 	bl	80033b8 <HAL_GetTick>
 800c4fe:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c500:	e007      	b.n	800c512 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c502:	f7ff feef 	bl	800c2e4 <BSP_SD_GetCardState>
 800c506:	4603      	mov	r3, r0
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d102      	bne.n	800c512 <SD_read+0x8a>
          {
            res = RES_OK;
 800c50c:	2300      	movs	r3, #0
 800c50e:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c510:	e008      	b.n	800c524 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c512:	f7f6 ff51 	bl	80033b8 <HAL_GetTick>
 800c516:	4602      	mov	r2, r0
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	1ad3      	subs	r3, r2, r3
 800c51c:	f247 522f 	movw	r2, #29999	; 0x752f
 800c520:	4293      	cmp	r3, r2
 800c522:	d9ee      	bls.n	800c502 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800c524:	7dfb      	ldrb	r3, [r7, #23]
}
 800c526:	4618      	mov	r0, r3
 800c528:	3718      	adds	r7, #24
 800c52a:	46bd      	mov	sp, r7
 800c52c:	bd80      	pop	{r7, pc}
 800c52e:	bf00      	nop
 800c530:	20000ac0 	.word	0x20000ac0

0800c534 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c534:	b580      	push	{r7, lr}
 800c536:	b086      	sub	sp, #24
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60b9      	str	r1, [r7, #8]
 800c53c:	607a      	str	r2, [r7, #4]
 800c53e:	603b      	str	r3, [r7, #0]
 800c540:	4603      	mov	r3, r0
 800c542:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c544:	2301      	movs	r3, #1
 800c546:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800c548:	4b24      	ldr	r3, [pc, #144]	; (800c5dc <SD_write+0xa8>)
 800c54a:	2200      	movs	r2, #0
 800c54c:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c54e:	f247 5030 	movw	r0, #30000	; 0x7530
 800c552:	f7ff ff33 	bl	800c3bc <SD_CheckStatusWithTimeout>
 800c556:	4603      	mov	r3, r0
 800c558:	2b00      	cmp	r3, #0
 800c55a:	da01      	bge.n	800c560 <SD_write+0x2c>
  {
    return res;
 800c55c:	7dfb      	ldrb	r3, [r7, #23]
 800c55e:	e038      	b.n	800c5d2 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c560:	683a      	ldr	r2, [r7, #0]
 800c562:	6879      	ldr	r1, [r7, #4]
 800c564:	68b8      	ldr	r0, [r7, #8]
 800c566:	f7ff fea3 	bl	800c2b0 <BSP_SD_WriteBlocks_DMA>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d12f      	bne.n	800c5d0 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c570:	f7f6 ff22 	bl	80033b8 <HAL_GetTick>
 800c574:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c576:	bf00      	nop
 800c578:	4b18      	ldr	r3, [pc, #96]	; (800c5dc <SD_write+0xa8>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d108      	bne.n	800c592 <SD_write+0x5e>
 800c580:	f7f6 ff1a 	bl	80033b8 <HAL_GetTick>
 800c584:	4602      	mov	r2, r0
 800c586:	693b      	ldr	r3, [r7, #16]
 800c588:	1ad3      	subs	r3, r2, r3
 800c58a:	f247 522f 	movw	r2, #29999	; 0x752f
 800c58e:	4293      	cmp	r3, r2
 800c590:	d9f2      	bls.n	800c578 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800c592:	4b12      	ldr	r3, [pc, #72]	; (800c5dc <SD_write+0xa8>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d102      	bne.n	800c5a0 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800c59a:	2301      	movs	r3, #1
 800c59c:	75fb      	strb	r3, [r7, #23]
 800c59e:	e017      	b.n	800c5d0 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800c5a0:	4b0e      	ldr	r3, [pc, #56]	; (800c5dc <SD_write+0xa8>)
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c5a6:	f7f6 ff07 	bl	80033b8 <HAL_GetTick>
 800c5aa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c5ac:	e007      	b.n	800c5be <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c5ae:	f7ff fe99 	bl	800c2e4 <BSP_SD_GetCardState>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d102      	bne.n	800c5be <SD_write+0x8a>
          {
            res = RES_OK;
 800c5b8:	2300      	movs	r3, #0
 800c5ba:	75fb      	strb	r3, [r7, #23]
            break;
 800c5bc:	e008      	b.n	800c5d0 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c5be:	f7f6 fefb 	bl	80033b8 <HAL_GetTick>
 800c5c2:	4602      	mov	r2, r0
 800c5c4:	693b      	ldr	r3, [r7, #16]
 800c5c6:	1ad3      	subs	r3, r2, r3
 800c5c8:	f247 522f 	movw	r2, #29999	; 0x752f
 800c5cc:	4293      	cmp	r3, r2
 800c5ce:	d9ee      	bls.n	800c5ae <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800c5d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	3718      	adds	r7, #24
 800c5d6:	46bd      	mov	sp, r7
 800c5d8:	bd80      	pop	{r7, pc}
 800c5da:	bf00      	nop
 800c5dc:	20000abc 	.word	0x20000abc

0800c5e0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b08c      	sub	sp, #48	; 0x30
 800c5e4:	af00      	add	r7, sp, #0
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	603a      	str	r2, [r7, #0]
 800c5ea:	71fb      	strb	r3, [r7, #7]
 800c5ec:	460b      	mov	r3, r1
 800c5ee:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c5f0:	2301      	movs	r3, #1
 800c5f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c5f6:	4b25      	ldr	r3, [pc, #148]	; (800c68c <SD_ioctl+0xac>)
 800c5f8:	781b      	ldrb	r3, [r3, #0]
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	f003 0301 	and.w	r3, r3, #1
 800c600:	2b00      	cmp	r3, #0
 800c602:	d001      	beq.n	800c608 <SD_ioctl+0x28>
 800c604:	2303      	movs	r3, #3
 800c606:	e03c      	b.n	800c682 <SD_ioctl+0xa2>

  switch (cmd)
 800c608:	79bb      	ldrb	r3, [r7, #6]
 800c60a:	2b03      	cmp	r3, #3
 800c60c:	d834      	bhi.n	800c678 <SD_ioctl+0x98>
 800c60e:	a201      	add	r2, pc, #4	; (adr r2, 800c614 <SD_ioctl+0x34>)
 800c610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c614:	0800c625 	.word	0x0800c625
 800c618:	0800c62d 	.word	0x0800c62d
 800c61c:	0800c645 	.word	0x0800c645
 800c620:	0800c65f 	.word	0x0800c65f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c624:	2300      	movs	r3, #0
 800c626:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c62a:	e028      	b.n	800c67e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c62c:	f107 030c 	add.w	r3, r7, #12
 800c630:	4618      	mov	r0, r3
 800c632:	f7ff fe67 	bl	800c304 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c63c:	2300      	movs	r3, #0
 800c63e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c642:	e01c      	b.n	800c67e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c644:	f107 030c 	add.w	r3, r7, #12
 800c648:	4618      	mov	r0, r3
 800c64a:	f7ff fe5b 	bl	800c304 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c650:	b29a      	uxth	r2, r3
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c656:	2300      	movs	r3, #0
 800c658:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c65c:	e00f      	b.n	800c67e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c65e:	f107 030c 	add.w	r3, r7, #12
 800c662:	4618      	mov	r0, r3
 800c664:	f7ff fe4e 	bl	800c304 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66a:	0a5a      	lsrs	r2, r3, #9
 800c66c:	683b      	ldr	r3, [r7, #0]
 800c66e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c670:	2300      	movs	r3, #0
 800c672:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c676:	e002      	b.n	800c67e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c678:	2304      	movs	r3, #4
 800c67a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c67e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c682:	4618      	mov	r0, r3
 800c684:	3730      	adds	r7, #48	; 0x30
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}
 800c68a:	bf00      	nop
 800c68c:	2000002d 	.word	0x2000002d

0800c690 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c690:	b480      	push	{r7}
 800c692:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800c694:	4b03      	ldr	r3, [pc, #12]	; (800c6a4 <BSP_SD_WriteCpltCallback+0x14>)
 800c696:	2201      	movs	r2, #1
 800c698:	601a      	str	r2, [r3, #0]
}
 800c69a:	bf00      	nop
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr
 800c6a4:	20000abc 	.word	0x20000abc

0800c6a8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c6a8:	b480      	push	{r7}
 800c6aa:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800c6ac:	4b03      	ldr	r3, [pc, #12]	; (800c6bc <BSP_SD_ReadCpltCallback+0x14>)
 800c6ae:	2201      	movs	r2, #1
 800c6b0:	601a      	str	r2, [r3, #0]
}
 800c6b2:	bf00      	nop
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ba:	4770      	bx	lr
 800c6bc:	20000ac0 	.word	0x20000ac0

0800c6c0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c6c0:	b580      	push	{r7, lr}
 800c6c2:	b084      	sub	sp, #16
 800c6c4:	af00      	add	r7, sp, #0
 800c6c6:	6078      	str	r0, [r7, #4]
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c6cc:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c6d0:	f004 ff32 	bl	8011538 <USBD_static_malloc>
 800c6d4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d109      	bne.n	800c6f0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	32b0      	adds	r2, #176	; 0xb0
 800c6e6:	2100      	movs	r1, #0
 800c6e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c6ec:	2302      	movs	r3, #2
 800c6ee:	e0d4      	b.n	800c89a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c6f0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	68f8      	ldr	r0, [r7, #12]
 800c6f8:	f005 fc98 	bl	801202c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	32b0      	adds	r2, #176	; 0xb0
 800c706:	68f9      	ldr	r1, [r7, #12]
 800c708:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	32b0      	adds	r2, #176	; 0xb0
 800c716:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	7c1b      	ldrb	r3, [r3, #16]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d138      	bne.n	800c79a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c728:	4b5e      	ldr	r3, [pc, #376]	; (800c8a4 <USBD_CDC_Init+0x1e4>)
 800c72a:	7819      	ldrb	r1, [r3, #0]
 800c72c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c730:	2202      	movs	r2, #2
 800c732:	6878      	ldr	r0, [r7, #4]
 800c734:	f004 fddd 	bl	80112f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c738:	4b5a      	ldr	r3, [pc, #360]	; (800c8a4 <USBD_CDC_Init+0x1e4>)
 800c73a:	781b      	ldrb	r3, [r3, #0]
 800c73c:	f003 020f 	and.w	r2, r3, #15
 800c740:	6879      	ldr	r1, [r7, #4]
 800c742:	4613      	mov	r3, r2
 800c744:	009b      	lsls	r3, r3, #2
 800c746:	4413      	add	r3, r2
 800c748:	009b      	lsls	r3, r3, #2
 800c74a:	440b      	add	r3, r1
 800c74c:	3324      	adds	r3, #36	; 0x24
 800c74e:	2201      	movs	r2, #1
 800c750:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c752:	4b55      	ldr	r3, [pc, #340]	; (800c8a8 <USBD_CDC_Init+0x1e8>)
 800c754:	7819      	ldrb	r1, [r3, #0]
 800c756:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c75a:	2202      	movs	r2, #2
 800c75c:	6878      	ldr	r0, [r7, #4]
 800c75e:	f004 fdc8 	bl	80112f2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c762:	4b51      	ldr	r3, [pc, #324]	; (800c8a8 <USBD_CDC_Init+0x1e8>)
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	f003 020f 	and.w	r2, r3, #15
 800c76a:	6879      	ldr	r1, [r7, #4]
 800c76c:	4613      	mov	r3, r2
 800c76e:	009b      	lsls	r3, r3, #2
 800c770:	4413      	add	r3, r2
 800c772:	009b      	lsls	r3, r3, #2
 800c774:	440b      	add	r3, r1
 800c776:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c77a:	2201      	movs	r2, #1
 800c77c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c77e:	4b4b      	ldr	r3, [pc, #300]	; (800c8ac <USBD_CDC_Init+0x1ec>)
 800c780:	781b      	ldrb	r3, [r3, #0]
 800c782:	f003 020f 	and.w	r2, r3, #15
 800c786:	6879      	ldr	r1, [r7, #4]
 800c788:	4613      	mov	r3, r2
 800c78a:	009b      	lsls	r3, r3, #2
 800c78c:	4413      	add	r3, r2
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	440b      	add	r3, r1
 800c792:	3326      	adds	r3, #38	; 0x26
 800c794:	2210      	movs	r2, #16
 800c796:	801a      	strh	r2, [r3, #0]
 800c798:	e035      	b.n	800c806 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c79a:	4b42      	ldr	r3, [pc, #264]	; (800c8a4 <USBD_CDC_Init+0x1e4>)
 800c79c:	7819      	ldrb	r1, [r3, #0]
 800c79e:	2340      	movs	r3, #64	; 0x40
 800c7a0:	2202      	movs	r2, #2
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f004 fda5 	bl	80112f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c7a8:	4b3e      	ldr	r3, [pc, #248]	; (800c8a4 <USBD_CDC_Init+0x1e4>)
 800c7aa:	781b      	ldrb	r3, [r3, #0]
 800c7ac:	f003 020f 	and.w	r2, r3, #15
 800c7b0:	6879      	ldr	r1, [r7, #4]
 800c7b2:	4613      	mov	r3, r2
 800c7b4:	009b      	lsls	r3, r3, #2
 800c7b6:	4413      	add	r3, r2
 800c7b8:	009b      	lsls	r3, r3, #2
 800c7ba:	440b      	add	r3, r1
 800c7bc:	3324      	adds	r3, #36	; 0x24
 800c7be:	2201      	movs	r2, #1
 800c7c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c7c2:	4b39      	ldr	r3, [pc, #228]	; (800c8a8 <USBD_CDC_Init+0x1e8>)
 800c7c4:	7819      	ldrb	r1, [r3, #0]
 800c7c6:	2340      	movs	r3, #64	; 0x40
 800c7c8:	2202      	movs	r2, #2
 800c7ca:	6878      	ldr	r0, [r7, #4]
 800c7cc:	f004 fd91 	bl	80112f2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c7d0:	4b35      	ldr	r3, [pc, #212]	; (800c8a8 <USBD_CDC_Init+0x1e8>)
 800c7d2:	781b      	ldrb	r3, [r3, #0]
 800c7d4:	f003 020f 	and.w	r2, r3, #15
 800c7d8:	6879      	ldr	r1, [r7, #4]
 800c7da:	4613      	mov	r3, r2
 800c7dc:	009b      	lsls	r3, r3, #2
 800c7de:	4413      	add	r3, r2
 800c7e0:	009b      	lsls	r3, r3, #2
 800c7e2:	440b      	add	r3, r1
 800c7e4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c7ec:	4b2f      	ldr	r3, [pc, #188]	; (800c8ac <USBD_CDC_Init+0x1ec>)
 800c7ee:	781b      	ldrb	r3, [r3, #0]
 800c7f0:	f003 020f 	and.w	r2, r3, #15
 800c7f4:	6879      	ldr	r1, [r7, #4]
 800c7f6:	4613      	mov	r3, r2
 800c7f8:	009b      	lsls	r3, r3, #2
 800c7fa:	4413      	add	r3, r2
 800c7fc:	009b      	lsls	r3, r3, #2
 800c7fe:	440b      	add	r3, r1
 800c800:	3326      	adds	r3, #38	; 0x26
 800c802:	2210      	movs	r2, #16
 800c804:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c806:	4b29      	ldr	r3, [pc, #164]	; (800c8ac <USBD_CDC_Init+0x1ec>)
 800c808:	7819      	ldrb	r1, [r3, #0]
 800c80a:	2308      	movs	r3, #8
 800c80c:	2203      	movs	r2, #3
 800c80e:	6878      	ldr	r0, [r7, #4]
 800c810:	f004 fd6f 	bl	80112f2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c814:	4b25      	ldr	r3, [pc, #148]	; (800c8ac <USBD_CDC_Init+0x1ec>)
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	f003 020f 	and.w	r2, r3, #15
 800c81c:	6879      	ldr	r1, [r7, #4]
 800c81e:	4613      	mov	r3, r2
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	4413      	add	r3, r2
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	440b      	add	r3, r1
 800c828:	3324      	adds	r3, #36	; 0x24
 800c82a:	2201      	movs	r2, #1
 800c82c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2200      	movs	r2, #0
 800c832:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c83c:	687a      	ldr	r2, [r7, #4]
 800c83e:	33b0      	adds	r3, #176	; 0xb0
 800c840:	009b      	lsls	r3, r3, #2
 800c842:	4413      	add	r3, r2
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	2200      	movs	r2, #0
 800c84e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c852:	68fb      	ldr	r3, [r7, #12]
 800c854:	2200      	movs	r2, #0
 800c856:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c85a:	68fb      	ldr	r3, [r7, #12]
 800c85c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c860:	2b00      	cmp	r3, #0
 800c862:	d101      	bne.n	800c868 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c864:	2302      	movs	r3, #2
 800c866:	e018      	b.n	800c89a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	7c1b      	ldrb	r3, [r3, #16]
 800c86c:	2b00      	cmp	r3, #0
 800c86e:	d10a      	bne.n	800c886 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c870:	4b0d      	ldr	r3, [pc, #52]	; (800c8a8 <USBD_CDC_Init+0x1e8>)
 800c872:	7819      	ldrb	r1, [r3, #0]
 800c874:	68fb      	ldr	r3, [r7, #12]
 800c876:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c87a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f004 fe26 	bl	80114d0 <USBD_LL_PrepareReceive>
 800c884:	e008      	b.n	800c898 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c886:	4b08      	ldr	r3, [pc, #32]	; (800c8a8 <USBD_CDC_Init+0x1e8>)
 800c888:	7819      	ldrb	r1, [r3, #0]
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c890:	2340      	movs	r3, #64	; 0x40
 800c892:	6878      	ldr	r0, [r7, #4]
 800c894:	f004 fe1c 	bl	80114d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3710      	adds	r7, #16
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}
 800c8a2:	bf00      	nop
 800c8a4:	200000b7 	.word	0x200000b7
 800c8a8:	200000b8 	.word	0x200000b8
 800c8ac:	200000b9 	.word	0x200000b9

0800c8b0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b082      	sub	sp, #8
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	6078      	str	r0, [r7, #4]
 800c8b8:	460b      	mov	r3, r1
 800c8ba:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c8bc:	4b3a      	ldr	r3, [pc, #232]	; (800c9a8 <USBD_CDC_DeInit+0xf8>)
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	4619      	mov	r1, r3
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f004 fd3b 	bl	801133e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c8c8:	4b37      	ldr	r3, [pc, #220]	; (800c9a8 <USBD_CDC_DeInit+0xf8>)
 800c8ca:	781b      	ldrb	r3, [r3, #0]
 800c8cc:	f003 020f 	and.w	r2, r3, #15
 800c8d0:	6879      	ldr	r1, [r7, #4]
 800c8d2:	4613      	mov	r3, r2
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	4413      	add	r3, r2
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	440b      	add	r3, r1
 800c8dc:	3324      	adds	r3, #36	; 0x24
 800c8de:	2200      	movs	r2, #0
 800c8e0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c8e2:	4b32      	ldr	r3, [pc, #200]	; (800c9ac <USBD_CDC_DeInit+0xfc>)
 800c8e4:	781b      	ldrb	r3, [r3, #0]
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	6878      	ldr	r0, [r7, #4]
 800c8ea:	f004 fd28 	bl	801133e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c8ee:	4b2f      	ldr	r3, [pc, #188]	; (800c9ac <USBD_CDC_DeInit+0xfc>)
 800c8f0:	781b      	ldrb	r3, [r3, #0]
 800c8f2:	f003 020f 	and.w	r2, r3, #15
 800c8f6:	6879      	ldr	r1, [r7, #4]
 800c8f8:	4613      	mov	r3, r2
 800c8fa:	009b      	lsls	r3, r3, #2
 800c8fc:	4413      	add	r3, r2
 800c8fe:	009b      	lsls	r3, r3, #2
 800c900:	440b      	add	r3, r1
 800c902:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c906:	2200      	movs	r2, #0
 800c908:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c90a:	4b29      	ldr	r3, [pc, #164]	; (800c9b0 <USBD_CDC_DeInit+0x100>)
 800c90c:	781b      	ldrb	r3, [r3, #0]
 800c90e:	4619      	mov	r1, r3
 800c910:	6878      	ldr	r0, [r7, #4]
 800c912:	f004 fd14 	bl	801133e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c916:	4b26      	ldr	r3, [pc, #152]	; (800c9b0 <USBD_CDC_DeInit+0x100>)
 800c918:	781b      	ldrb	r3, [r3, #0]
 800c91a:	f003 020f 	and.w	r2, r3, #15
 800c91e:	6879      	ldr	r1, [r7, #4]
 800c920:	4613      	mov	r3, r2
 800c922:	009b      	lsls	r3, r3, #2
 800c924:	4413      	add	r3, r2
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	440b      	add	r3, r1
 800c92a:	3324      	adds	r3, #36	; 0x24
 800c92c:	2200      	movs	r2, #0
 800c92e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c930:	4b1f      	ldr	r3, [pc, #124]	; (800c9b0 <USBD_CDC_DeInit+0x100>)
 800c932:	781b      	ldrb	r3, [r3, #0]
 800c934:	f003 020f 	and.w	r2, r3, #15
 800c938:	6879      	ldr	r1, [r7, #4]
 800c93a:	4613      	mov	r3, r2
 800c93c:	009b      	lsls	r3, r3, #2
 800c93e:	4413      	add	r3, r2
 800c940:	009b      	lsls	r3, r3, #2
 800c942:	440b      	add	r3, r1
 800c944:	3326      	adds	r3, #38	; 0x26
 800c946:	2200      	movs	r2, #0
 800c948:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	32b0      	adds	r2, #176	; 0xb0
 800c954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d01f      	beq.n	800c99c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c962:	687a      	ldr	r2, [r7, #4]
 800c964:	33b0      	adds	r3, #176	; 0xb0
 800c966:	009b      	lsls	r3, r3, #2
 800c968:	4413      	add	r3, r2
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	685b      	ldr	r3, [r3, #4]
 800c96e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	32b0      	adds	r2, #176	; 0xb0
 800c97a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c97e:	4618      	mov	r0, r3
 800c980:	f004 fde8 	bl	8011554 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	32b0      	adds	r2, #176	; 0xb0
 800c98e:	2100      	movs	r1, #0
 800c990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c99c:	2300      	movs	r3, #0
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3708      	adds	r7, #8
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}
 800c9a6:	bf00      	nop
 800c9a8:	200000b7 	.word	0x200000b7
 800c9ac:	200000b8 	.word	0x200000b8
 800c9b0:	200000b9 	.word	0x200000b9

0800c9b4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c9b4:	b580      	push	{r7, lr}
 800c9b6:	b086      	sub	sp, #24
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
 800c9bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	32b0      	adds	r2, #176	; 0xb0
 800c9c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9cc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c9ce:	2300      	movs	r3, #0
 800c9d0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c9da:	693b      	ldr	r3, [r7, #16]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d101      	bne.n	800c9e4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c9e0:	2303      	movs	r3, #3
 800c9e2:	e0bf      	b.n	800cb64 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d050      	beq.n	800ca92 <USBD_CDC_Setup+0xde>
 800c9f0:	2b20      	cmp	r3, #32
 800c9f2:	f040 80af 	bne.w	800cb54 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	88db      	ldrh	r3, [r3, #6]
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d03a      	beq.n	800ca74 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c9fe:	683b      	ldr	r3, [r7, #0]
 800ca00:	781b      	ldrb	r3, [r3, #0]
 800ca02:	b25b      	sxtb	r3, r3
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	da1b      	bge.n	800ca40 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ca0e:	687a      	ldr	r2, [r7, #4]
 800ca10:	33b0      	adds	r3, #176	; 0xb0
 800ca12:	009b      	lsls	r3, r3, #2
 800ca14:	4413      	add	r3, r2
 800ca16:	685b      	ldr	r3, [r3, #4]
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	683a      	ldr	r2, [r7, #0]
 800ca1c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ca1e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ca20:	683a      	ldr	r2, [r7, #0]
 800ca22:	88d2      	ldrh	r2, [r2, #6]
 800ca24:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ca26:	683b      	ldr	r3, [r7, #0]
 800ca28:	88db      	ldrh	r3, [r3, #6]
 800ca2a:	2b07      	cmp	r3, #7
 800ca2c:	bf28      	it	cs
 800ca2e:	2307      	movcs	r3, #7
 800ca30:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ca32:	693b      	ldr	r3, [r7, #16]
 800ca34:	89fa      	ldrh	r2, [r7, #14]
 800ca36:	4619      	mov	r1, r3
 800ca38:	6878      	ldr	r0, [r7, #4]
 800ca3a:	f001 fd89 	bl	800e550 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ca3e:	e090      	b.n	800cb62 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	785a      	ldrb	r2, [r3, #1]
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	88db      	ldrh	r3, [r3, #6]
 800ca4e:	2b3f      	cmp	r3, #63	; 0x3f
 800ca50:	d803      	bhi.n	800ca5a <USBD_CDC_Setup+0xa6>
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	88db      	ldrh	r3, [r3, #6]
 800ca56:	b2da      	uxtb	r2, r3
 800ca58:	e000      	b.n	800ca5c <USBD_CDC_Setup+0xa8>
 800ca5a:	2240      	movs	r2, #64	; 0x40
 800ca5c:	693b      	ldr	r3, [r7, #16]
 800ca5e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800ca62:	6939      	ldr	r1, [r7, #16]
 800ca64:	693b      	ldr	r3, [r7, #16]
 800ca66:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800ca6a:	461a      	mov	r2, r3
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f001 fd9b 	bl	800e5a8 <USBD_CtlPrepareRx>
      break;
 800ca72:	e076      	b.n	800cb62 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ca7a:	687a      	ldr	r2, [r7, #4]
 800ca7c:	33b0      	adds	r3, #176	; 0xb0
 800ca7e:	009b      	lsls	r3, r3, #2
 800ca80:	4413      	add	r3, r2
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	689b      	ldr	r3, [r3, #8]
 800ca86:	683a      	ldr	r2, [r7, #0]
 800ca88:	7850      	ldrb	r0, [r2, #1]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	6839      	ldr	r1, [r7, #0]
 800ca8e:	4798      	blx	r3
      break;
 800ca90:	e067      	b.n	800cb62 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	785b      	ldrb	r3, [r3, #1]
 800ca96:	2b0b      	cmp	r3, #11
 800ca98:	d851      	bhi.n	800cb3e <USBD_CDC_Setup+0x18a>
 800ca9a:	a201      	add	r2, pc, #4	; (adr r2, 800caa0 <USBD_CDC_Setup+0xec>)
 800ca9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caa0:	0800cad1 	.word	0x0800cad1
 800caa4:	0800cb4d 	.word	0x0800cb4d
 800caa8:	0800cb3f 	.word	0x0800cb3f
 800caac:	0800cb3f 	.word	0x0800cb3f
 800cab0:	0800cb3f 	.word	0x0800cb3f
 800cab4:	0800cb3f 	.word	0x0800cb3f
 800cab8:	0800cb3f 	.word	0x0800cb3f
 800cabc:	0800cb3f 	.word	0x0800cb3f
 800cac0:	0800cb3f 	.word	0x0800cb3f
 800cac4:	0800cb3f 	.word	0x0800cb3f
 800cac8:	0800cafb 	.word	0x0800cafb
 800cacc:	0800cb25 	.word	0x0800cb25
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cad6:	b2db      	uxtb	r3, r3
 800cad8:	2b03      	cmp	r3, #3
 800cada:	d107      	bne.n	800caec <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cadc:	f107 030a 	add.w	r3, r7, #10
 800cae0:	2202      	movs	r2, #2
 800cae2:	4619      	mov	r1, r3
 800cae4:	6878      	ldr	r0, [r7, #4]
 800cae6:	f001 fd33 	bl	800e550 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800caea:	e032      	b.n	800cb52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800caec:	6839      	ldr	r1, [r7, #0]
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f001 fcbd 	bl	800e46e <USBD_CtlError>
            ret = USBD_FAIL;
 800caf4:	2303      	movs	r3, #3
 800caf6:	75fb      	strb	r3, [r7, #23]
          break;
 800caf8:	e02b      	b.n	800cb52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb00:	b2db      	uxtb	r3, r3
 800cb02:	2b03      	cmp	r3, #3
 800cb04:	d107      	bne.n	800cb16 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cb06:	f107 030d 	add.w	r3, r7, #13
 800cb0a:	2201      	movs	r2, #1
 800cb0c:	4619      	mov	r1, r3
 800cb0e:	6878      	ldr	r0, [r7, #4]
 800cb10:	f001 fd1e 	bl	800e550 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cb14:	e01d      	b.n	800cb52 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cb16:	6839      	ldr	r1, [r7, #0]
 800cb18:	6878      	ldr	r0, [r7, #4]
 800cb1a:	f001 fca8 	bl	800e46e <USBD_CtlError>
            ret = USBD_FAIL;
 800cb1e:	2303      	movs	r3, #3
 800cb20:	75fb      	strb	r3, [r7, #23]
          break;
 800cb22:	e016      	b.n	800cb52 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb2a:	b2db      	uxtb	r3, r3
 800cb2c:	2b03      	cmp	r3, #3
 800cb2e:	d00f      	beq.n	800cb50 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cb30:	6839      	ldr	r1, [r7, #0]
 800cb32:	6878      	ldr	r0, [r7, #4]
 800cb34:	f001 fc9b 	bl	800e46e <USBD_CtlError>
            ret = USBD_FAIL;
 800cb38:	2303      	movs	r3, #3
 800cb3a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cb3c:	e008      	b.n	800cb50 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cb3e:	6839      	ldr	r1, [r7, #0]
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f001 fc94 	bl	800e46e <USBD_CtlError>
          ret = USBD_FAIL;
 800cb46:	2303      	movs	r3, #3
 800cb48:	75fb      	strb	r3, [r7, #23]
          break;
 800cb4a:	e002      	b.n	800cb52 <USBD_CDC_Setup+0x19e>
          break;
 800cb4c:	bf00      	nop
 800cb4e:	e008      	b.n	800cb62 <USBD_CDC_Setup+0x1ae>
          break;
 800cb50:	bf00      	nop
      }
      break;
 800cb52:	e006      	b.n	800cb62 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cb54:	6839      	ldr	r1, [r7, #0]
 800cb56:	6878      	ldr	r0, [r7, #4]
 800cb58:	f001 fc89 	bl	800e46e <USBD_CtlError>
      ret = USBD_FAIL;
 800cb5c:	2303      	movs	r3, #3
 800cb5e:	75fb      	strb	r3, [r7, #23]
      break;
 800cb60:	bf00      	nop
  }

  return (uint8_t)ret;
 800cb62:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3718      	adds	r7, #24
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}

0800cb6c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cb6c:	b580      	push	{r7, lr}
 800cb6e:	b084      	sub	sp, #16
 800cb70:	af00      	add	r7, sp, #0
 800cb72:	6078      	str	r0, [r7, #4]
 800cb74:	460b      	mov	r3, r1
 800cb76:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cb7e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	32b0      	adds	r2, #176	; 0xb0
 800cb8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb8e:	2b00      	cmp	r3, #0
 800cb90:	d101      	bne.n	800cb96 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800cb92:	2303      	movs	r3, #3
 800cb94:	e065      	b.n	800cc62 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	32b0      	adds	r2, #176	; 0xb0
 800cba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cba4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cba6:	78fb      	ldrb	r3, [r7, #3]
 800cba8:	f003 020f 	and.w	r2, r3, #15
 800cbac:	6879      	ldr	r1, [r7, #4]
 800cbae:	4613      	mov	r3, r2
 800cbb0:	009b      	lsls	r3, r3, #2
 800cbb2:	4413      	add	r3, r2
 800cbb4:	009b      	lsls	r3, r3, #2
 800cbb6:	440b      	add	r3, r1
 800cbb8:	3318      	adds	r3, #24
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d02f      	beq.n	800cc20 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cbc0:	78fb      	ldrb	r3, [r7, #3]
 800cbc2:	f003 020f 	and.w	r2, r3, #15
 800cbc6:	6879      	ldr	r1, [r7, #4]
 800cbc8:	4613      	mov	r3, r2
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	4413      	add	r3, r2
 800cbce:	009b      	lsls	r3, r3, #2
 800cbd0:	440b      	add	r3, r1
 800cbd2:	3318      	adds	r3, #24
 800cbd4:	681a      	ldr	r2, [r3, #0]
 800cbd6:	78fb      	ldrb	r3, [r7, #3]
 800cbd8:	f003 010f 	and.w	r1, r3, #15
 800cbdc:	68f8      	ldr	r0, [r7, #12]
 800cbde:	460b      	mov	r3, r1
 800cbe0:	00db      	lsls	r3, r3, #3
 800cbe2:	440b      	add	r3, r1
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	4403      	add	r3, r0
 800cbe8:	3348      	adds	r3, #72	; 0x48
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	fbb2 f1f3 	udiv	r1, r2, r3
 800cbf0:	fb01 f303 	mul.w	r3, r1, r3
 800cbf4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d112      	bne.n	800cc20 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cbfa:	78fb      	ldrb	r3, [r7, #3]
 800cbfc:	f003 020f 	and.w	r2, r3, #15
 800cc00:	6879      	ldr	r1, [r7, #4]
 800cc02:	4613      	mov	r3, r2
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	4413      	add	r3, r2
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	440b      	add	r3, r1
 800cc0c:	3318      	adds	r3, #24
 800cc0e:	2200      	movs	r2, #0
 800cc10:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cc12:	78f9      	ldrb	r1, [r7, #3]
 800cc14:	2300      	movs	r3, #0
 800cc16:	2200      	movs	r2, #0
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f004 fc38 	bl	801148e <USBD_LL_Transmit>
 800cc1e:	e01f      	b.n	800cc60 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cc20:	68bb      	ldr	r3, [r7, #8]
 800cc22:	2200      	movs	r2, #0
 800cc24:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	33b0      	adds	r3, #176	; 0xb0
 800cc32:	009b      	lsls	r3, r3, #2
 800cc34:	4413      	add	r3, r2
 800cc36:	685b      	ldr	r3, [r3, #4]
 800cc38:	691b      	ldr	r3, [r3, #16]
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d010      	beq.n	800cc60 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cc44:	687a      	ldr	r2, [r7, #4]
 800cc46:	33b0      	adds	r3, #176	; 0xb0
 800cc48:	009b      	lsls	r3, r3, #2
 800cc4a:	4413      	add	r3, r2
 800cc4c:	685b      	ldr	r3, [r3, #4]
 800cc4e:	691b      	ldr	r3, [r3, #16]
 800cc50:	68ba      	ldr	r2, [r7, #8]
 800cc52:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800cc56:	68ba      	ldr	r2, [r7, #8]
 800cc58:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800cc5c:	78fa      	ldrb	r2, [r7, #3]
 800cc5e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800cc60:	2300      	movs	r3, #0
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3710      	adds	r7, #16
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}

0800cc6a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cc6a:	b580      	push	{r7, lr}
 800cc6c:	b084      	sub	sp, #16
 800cc6e:	af00      	add	r7, sp, #0
 800cc70:	6078      	str	r0, [r7, #4]
 800cc72:	460b      	mov	r3, r1
 800cc74:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	32b0      	adds	r2, #176	; 0xb0
 800cc80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc84:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	32b0      	adds	r2, #176	; 0xb0
 800cc90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d101      	bne.n	800cc9c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cc98:	2303      	movs	r3, #3
 800cc9a:	e01a      	b.n	800ccd2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800cc9c:	78fb      	ldrb	r3, [r7, #3]
 800cc9e:	4619      	mov	r1, r3
 800cca0:	6878      	ldr	r0, [r7, #4]
 800cca2:	f004 fc36 	bl	8011512 <USBD_LL_GetRxDataSize>
 800cca6:	4602      	mov	r2, r0
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ccb4:	687a      	ldr	r2, [r7, #4]
 800ccb6:	33b0      	adds	r3, #176	; 0xb0
 800ccb8:	009b      	lsls	r3, r3, #2
 800ccba:	4413      	add	r3, r2
 800ccbc:	685b      	ldr	r3, [r3, #4]
 800ccbe:	68db      	ldr	r3, [r3, #12]
 800ccc0:	68fa      	ldr	r2, [r7, #12]
 800ccc2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ccc6:	68fa      	ldr	r2, [r7, #12]
 800ccc8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cccc:	4611      	mov	r1, r2
 800ccce:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ccd0:	2300      	movs	r3, #0
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	3710      	adds	r7, #16
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	bd80      	pop	{r7, pc}

0800ccda <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ccda:	b580      	push	{r7, lr}
 800ccdc:	b084      	sub	sp, #16
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	32b0      	adds	r2, #176	; 0xb0
 800ccec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccf0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	2b00      	cmp	r3, #0
 800ccf6:	d101      	bne.n	800ccfc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ccf8:	2303      	movs	r3, #3
 800ccfa:	e025      	b.n	800cd48 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd02:	687a      	ldr	r2, [r7, #4]
 800cd04:	33b0      	adds	r3, #176	; 0xb0
 800cd06:	009b      	lsls	r3, r3, #2
 800cd08:	4413      	add	r3, r2
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d01a      	beq.n	800cd46 <USBD_CDC_EP0_RxReady+0x6c>
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cd16:	2bff      	cmp	r3, #255	; 0xff
 800cd18:	d015      	beq.n	800cd46 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd20:	687a      	ldr	r2, [r7, #4]
 800cd22:	33b0      	adds	r3, #176	; 0xb0
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	4413      	add	r3, r2
 800cd28:	685b      	ldr	r3, [r3, #4]
 800cd2a:	689b      	ldr	r3, [r3, #8]
 800cd2c:	68fa      	ldr	r2, [r7, #12]
 800cd2e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800cd32:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800cd34:	68fa      	ldr	r2, [r7, #12]
 800cd36:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cd3a:	b292      	uxth	r2, r2
 800cd3c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	22ff      	movs	r2, #255	; 0xff
 800cd42:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800cd46:	2300      	movs	r3, #0
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3710      	adds	r7, #16
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b086      	sub	sp, #24
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cd58:	2182      	movs	r1, #130	; 0x82
 800cd5a:	4818      	ldr	r0, [pc, #96]	; (800cdbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cd5c:	f000 fd4f 	bl	800d7fe <USBD_GetEpDesc>
 800cd60:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cd62:	2101      	movs	r1, #1
 800cd64:	4815      	ldr	r0, [pc, #84]	; (800cdbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cd66:	f000 fd4a 	bl	800d7fe <USBD_GetEpDesc>
 800cd6a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cd6c:	2181      	movs	r1, #129	; 0x81
 800cd6e:	4813      	ldr	r0, [pc, #76]	; (800cdbc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cd70:	f000 fd45 	bl	800d7fe <USBD_GetEpDesc>
 800cd74:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cd76:	697b      	ldr	r3, [r7, #20]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d002      	beq.n	800cd82 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	2210      	movs	r2, #16
 800cd80:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d006      	beq.n	800cd96 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd90:	711a      	strb	r2, [r3, #4]
 800cd92:	2200      	movs	r2, #0
 800cd94:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d006      	beq.n	800cdaa <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	2200      	movs	r2, #0
 800cda0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cda4:	711a      	strb	r2, [r3, #4]
 800cda6:	2200      	movs	r2, #0
 800cda8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	2243      	movs	r2, #67	; 0x43
 800cdae:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cdb0:	4b02      	ldr	r3, [pc, #8]	; (800cdbc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800cdb2:	4618      	mov	r0, r3
 800cdb4:	3718      	adds	r7, #24
 800cdb6:	46bd      	mov	sp, r7
 800cdb8:	bd80      	pop	{r7, pc}
 800cdba:	bf00      	nop
 800cdbc:	20000074 	.word	0x20000074

0800cdc0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800cdc0:	b580      	push	{r7, lr}
 800cdc2:	b086      	sub	sp, #24
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cdc8:	2182      	movs	r1, #130	; 0x82
 800cdca:	4818      	ldr	r0, [pc, #96]	; (800ce2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cdcc:	f000 fd17 	bl	800d7fe <USBD_GetEpDesc>
 800cdd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cdd2:	2101      	movs	r1, #1
 800cdd4:	4815      	ldr	r0, [pc, #84]	; (800ce2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cdd6:	f000 fd12 	bl	800d7fe <USBD_GetEpDesc>
 800cdda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cddc:	2181      	movs	r1, #129	; 0x81
 800cdde:	4813      	ldr	r0, [pc, #76]	; (800ce2c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800cde0:	f000 fd0d 	bl	800d7fe <USBD_GetEpDesc>
 800cde4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d002      	beq.n	800cdf2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800cdec:	697b      	ldr	r3, [r7, #20]
 800cdee:	2210      	movs	r2, #16
 800cdf0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d006      	beq.n	800ce06 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800cdf8:	693b      	ldr	r3, [r7, #16]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	711a      	strb	r2, [r3, #4]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f042 0202 	orr.w	r2, r2, #2
 800ce04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ce06:	68fb      	ldr	r3, [r7, #12]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d006      	beq.n	800ce1a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	2200      	movs	r2, #0
 800ce10:	711a      	strb	r2, [r3, #4]
 800ce12:	2200      	movs	r2, #0
 800ce14:	f042 0202 	orr.w	r2, r2, #2
 800ce18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	2243      	movs	r2, #67	; 0x43
 800ce1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ce20:	4b02      	ldr	r3, [pc, #8]	; (800ce2c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ce22:	4618      	mov	r0, r3
 800ce24:	3718      	adds	r7, #24
 800ce26:	46bd      	mov	sp, r7
 800ce28:	bd80      	pop	{r7, pc}
 800ce2a:	bf00      	nop
 800ce2c:	20000074 	.word	0x20000074

0800ce30 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b086      	sub	sp, #24
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ce38:	2182      	movs	r1, #130	; 0x82
 800ce3a:	4818      	ldr	r0, [pc, #96]	; (800ce9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ce3c:	f000 fcdf 	bl	800d7fe <USBD_GetEpDesc>
 800ce40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ce42:	2101      	movs	r1, #1
 800ce44:	4815      	ldr	r0, [pc, #84]	; (800ce9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ce46:	f000 fcda 	bl	800d7fe <USBD_GetEpDesc>
 800ce4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ce4c:	2181      	movs	r1, #129	; 0x81
 800ce4e:	4813      	ldr	r0, [pc, #76]	; (800ce9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ce50:	f000 fcd5 	bl	800d7fe <USBD_GetEpDesc>
 800ce54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d002      	beq.n	800ce62 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ce5c:	697b      	ldr	r3, [r7, #20]
 800ce5e:	2210      	movs	r2, #16
 800ce60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ce62:	693b      	ldr	r3, [r7, #16]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d006      	beq.n	800ce76 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ce68:	693b      	ldr	r3, [r7, #16]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce70:	711a      	strb	r2, [r3, #4]
 800ce72:	2200      	movs	r2, #0
 800ce74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d006      	beq.n	800ce8a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	2200      	movs	r2, #0
 800ce80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce84:	711a      	strb	r2, [r3, #4]
 800ce86:	2200      	movs	r2, #0
 800ce88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	2243      	movs	r2, #67	; 0x43
 800ce8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ce90:	4b02      	ldr	r3, [pc, #8]	; (800ce9c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3718      	adds	r7, #24
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	20000074 	.word	0x20000074

0800cea0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cea0:	b480      	push	{r7}
 800cea2:	b083      	sub	sp, #12
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	220a      	movs	r2, #10
 800ceac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ceae:	4b03      	ldr	r3, [pc, #12]	; (800cebc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ceb0:	4618      	mov	r0, r3
 800ceb2:	370c      	adds	r7, #12
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr
 800cebc:	20000030 	.word	0x20000030

0800cec0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d101      	bne.n	800ced4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ced0:	2303      	movs	r3, #3
 800ced2:	e009      	b.n	800cee8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ceda:	687a      	ldr	r2, [r7, #4]
 800cedc:	33b0      	adds	r3, #176	; 0xb0
 800cede:	009b      	lsls	r3, r3, #2
 800cee0:	4413      	add	r3, r2
 800cee2:	683a      	ldr	r2, [r7, #0]
 800cee4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cee6:	2300      	movs	r3, #0
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	370c      	adds	r7, #12
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr

0800cef4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cef4:	b480      	push	{r7}
 800cef6:	b087      	sub	sp, #28
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	60b9      	str	r1, [r7, #8]
 800cefe:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	32b0      	adds	r2, #176	; 0xb0
 800cf0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf0e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d101      	bne.n	800cf1a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cf16:	2303      	movs	r3, #3
 800cf18:	e008      	b.n	800cf2c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	68ba      	ldr	r2, [r7, #8]
 800cf1e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cf22:	697b      	ldr	r3, [r7, #20]
 800cf24:	687a      	ldr	r2, [r7, #4]
 800cf26:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cf2a:	2300      	movs	r3, #0
}
 800cf2c:	4618      	mov	r0, r3
 800cf2e:	371c      	adds	r7, #28
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b085      	sub	sp, #20
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
 800cf40:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	32b0      	adds	r2, #176	; 0xb0
 800cf4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf50:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d101      	bne.n	800cf5c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cf58:	2303      	movs	r3, #3
 800cf5a:	e004      	b.n	800cf66 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	683a      	ldr	r2, [r7, #0]
 800cf60:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cf64:	2300      	movs	r3, #0
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3714      	adds	r7, #20
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr
	...

0800cf74 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cf74:	b580      	push	{r7, lr}
 800cf76:	b084      	sub	sp, #16
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	32b0      	adds	r2, #176	; 0xb0
 800cf86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf8a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cf8c:	2301      	movs	r3, #1
 800cf8e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	32b0      	adds	r2, #176	; 0xb0
 800cf9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d101      	bne.n	800cfa6 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cfa2:	2303      	movs	r3, #3
 800cfa4:	e025      	b.n	800cff2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800cfa6:	68bb      	ldr	r3, [r7, #8]
 800cfa8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d11f      	bne.n	800cff0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800cfb8:	4b10      	ldr	r3, [pc, #64]	; (800cffc <USBD_CDC_TransmitPacket+0x88>)
 800cfba:	781b      	ldrb	r3, [r3, #0]
 800cfbc:	f003 020f 	and.w	r2, r3, #15
 800cfc0:	68bb      	ldr	r3, [r7, #8]
 800cfc2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	4613      	mov	r3, r2
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	4413      	add	r3, r2
 800cfce:	009b      	lsls	r3, r3, #2
 800cfd0:	4403      	add	r3, r0
 800cfd2:	3318      	adds	r3, #24
 800cfd4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800cfd6:	4b09      	ldr	r3, [pc, #36]	; (800cffc <USBD_CDC_TransmitPacket+0x88>)
 800cfd8:	7819      	ldrb	r1, [r3, #0]
 800cfda:	68bb      	ldr	r3, [r7, #8]
 800cfdc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800cfe0:	68bb      	ldr	r3, [r7, #8]
 800cfe2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cfe6:	6878      	ldr	r0, [r7, #4]
 800cfe8:	f004 fa51 	bl	801148e <USBD_LL_Transmit>

    ret = USBD_OK;
 800cfec:	2300      	movs	r3, #0
 800cfee:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cff0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cff2:	4618      	mov	r0, r3
 800cff4:	3710      	adds	r7, #16
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bd80      	pop	{r7, pc}
 800cffa:	bf00      	nop
 800cffc:	200000b7 	.word	0x200000b7

0800d000 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b084      	sub	sp, #16
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	32b0      	adds	r2, #176	; 0xb0
 800d012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d016:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	32b0      	adds	r2, #176	; 0xb0
 800d022:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d101      	bne.n	800d02e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d02a:	2303      	movs	r3, #3
 800d02c:	e018      	b.n	800d060 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	7c1b      	ldrb	r3, [r3, #16]
 800d032:	2b00      	cmp	r3, #0
 800d034:	d10a      	bne.n	800d04c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d036:	4b0c      	ldr	r3, [pc, #48]	; (800d068 <USBD_CDC_ReceivePacket+0x68>)
 800d038:	7819      	ldrb	r1, [r3, #0]
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d040:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d044:	6878      	ldr	r0, [r7, #4]
 800d046:	f004 fa43 	bl	80114d0 <USBD_LL_PrepareReceive>
 800d04a:	e008      	b.n	800d05e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d04c:	4b06      	ldr	r3, [pc, #24]	; (800d068 <USBD_CDC_ReceivePacket+0x68>)
 800d04e:	7819      	ldrb	r1, [r3, #0]
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d056:	2340      	movs	r3, #64	; 0x40
 800d058:	6878      	ldr	r0, [r7, #4]
 800d05a:	f004 fa39 	bl	80114d0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d05e:	2300      	movs	r3, #0
}
 800d060:	4618      	mov	r0, r3
 800d062:	3710      	adds	r7, #16
 800d064:	46bd      	mov	sp, r7
 800d066:	bd80      	pop	{r7, pc}
 800d068:	200000b8 	.word	0x200000b8

0800d06c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b086      	sub	sp, #24
 800d070:	af00      	add	r7, sp, #0
 800d072:	60f8      	str	r0, [r7, #12]
 800d074:	60b9      	str	r1, [r7, #8]
 800d076:	4613      	mov	r3, r2
 800d078:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d101      	bne.n	800d084 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d080:	2303      	movs	r3, #3
 800d082:	e01f      	b.n	800d0c4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d084:	68fb      	ldr	r3, [r7, #12]
 800d086:	2200      	movs	r2, #0
 800d088:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2200      	movs	r2, #0
 800d090:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2200      	movs	r2, #0
 800d098:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d003      	beq.n	800d0aa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
 800d0a4:	68ba      	ldr	r2, [r7, #8]
 800d0a6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	2201      	movs	r2, #1
 800d0ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d0b2:	68fb      	ldr	r3, [r7, #12]
 800d0b4:	79fa      	ldrb	r2, [r7, #7]
 800d0b6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	f004 f8b3 	bl	8011224 <USBD_LL_Init>
 800d0be:	4603      	mov	r3, r0
 800d0c0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d0c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	3718      	adds	r7, #24
 800d0c8:	46bd      	mov	sp, r7
 800d0ca:	bd80      	pop	{r7, pc}

0800d0cc <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d0d6:	2300      	movs	r3, #0
 800d0d8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	2b00      	cmp	r3, #0
 800d0de:	d101      	bne.n	800d0e4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d0e0:	2303      	movs	r3, #3
 800d0e2:	e025      	b.n	800d130 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	683a      	ldr	r2, [r7, #0]
 800d0e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	32ae      	adds	r2, #174	; 0xae
 800d0f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d00f      	beq.n	800d120 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	32ae      	adds	r2, #174	; 0xae
 800d10a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d110:	f107 020e 	add.w	r2, r7, #14
 800d114:	4610      	mov	r0, r2
 800d116:	4798      	blx	r3
 800d118:	4602      	mov	r2, r0
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d126:	1c5a      	adds	r2, r3, #1
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3710      	adds	r7, #16
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}

0800d138 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d138:	b580      	push	{r7, lr}
 800d13a:	b082      	sub	sp, #8
 800d13c:	af00      	add	r7, sp, #0
 800d13e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f004 f8bb 	bl	80112bc <USBD_LL_Start>
 800d146:	4603      	mov	r3, r0
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3708      	adds	r7, #8
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}

0800d150 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d150:	b480      	push	{r7}
 800d152:	b083      	sub	sp, #12
 800d154:	af00      	add	r7, sp, #0
 800d156:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d158:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	370c      	adds	r7, #12
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr

0800d166 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d166:	b580      	push	{r7, lr}
 800d168:	b084      	sub	sp, #16
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
 800d16e:	460b      	mov	r3, r1
 800d170:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d172:	2300      	movs	r3, #0
 800d174:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d009      	beq.n	800d194 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	78fa      	ldrb	r2, [r7, #3]
 800d18a:	4611      	mov	r1, r2
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	4798      	blx	r3
 800d190:	4603      	mov	r3, r0
 800d192:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d194:	7bfb      	ldrb	r3, [r7, #15]
}
 800d196:	4618      	mov	r0, r3
 800d198:	3710      	adds	r7, #16
 800d19a:	46bd      	mov	sp, r7
 800d19c:	bd80      	pop	{r7, pc}

0800d19e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d19e:	b580      	push	{r7, lr}
 800d1a0:	b084      	sub	sp, #16
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	6078      	str	r0, [r7, #4]
 800d1a6:	460b      	mov	r3, r1
 800d1a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1aa:	2300      	movs	r3, #0
 800d1ac:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1b4:	685b      	ldr	r3, [r3, #4]
 800d1b6:	78fa      	ldrb	r2, [r7, #3]
 800d1b8:	4611      	mov	r1, r2
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	4798      	blx	r3
 800d1be:	4603      	mov	r3, r0
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d001      	beq.n	800d1c8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d1c4:	2303      	movs	r3, #3
 800d1c6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	3710      	adds	r7, #16
 800d1ce:	46bd      	mov	sp, r7
 800d1d0:	bd80      	pop	{r7, pc}

0800d1d2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d1d2:	b580      	push	{r7, lr}
 800d1d4:	b084      	sub	sp, #16
 800d1d6:	af00      	add	r7, sp, #0
 800d1d8:	6078      	str	r0, [r7, #4]
 800d1da:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d1e2:	6839      	ldr	r1, [r7, #0]
 800d1e4:	4618      	mov	r0, r3
 800d1e6:	f001 f908 	bl	800e3fa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2201      	movs	r2, #1
 800d1ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d1f8:	461a      	mov	r2, r3
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d206:	f003 031f 	and.w	r3, r3, #31
 800d20a:	2b02      	cmp	r3, #2
 800d20c:	d01a      	beq.n	800d244 <USBD_LL_SetupStage+0x72>
 800d20e:	2b02      	cmp	r3, #2
 800d210:	d822      	bhi.n	800d258 <USBD_LL_SetupStage+0x86>
 800d212:	2b00      	cmp	r3, #0
 800d214:	d002      	beq.n	800d21c <USBD_LL_SetupStage+0x4a>
 800d216:	2b01      	cmp	r3, #1
 800d218:	d00a      	beq.n	800d230 <USBD_LL_SetupStage+0x5e>
 800d21a:	e01d      	b.n	800d258 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d222:	4619      	mov	r1, r3
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f000 fb5f 	bl	800d8e8 <USBD_StdDevReq>
 800d22a:	4603      	mov	r3, r0
 800d22c:	73fb      	strb	r3, [r7, #15]
      break;
 800d22e:	e020      	b.n	800d272 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d236:	4619      	mov	r1, r3
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 fbc7 	bl	800d9cc <USBD_StdItfReq>
 800d23e:	4603      	mov	r3, r0
 800d240:	73fb      	strb	r3, [r7, #15]
      break;
 800d242:	e016      	b.n	800d272 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d24a:	4619      	mov	r1, r3
 800d24c:	6878      	ldr	r0, [r7, #4]
 800d24e:	f000 fc29 	bl	800daa4 <USBD_StdEPReq>
 800d252:	4603      	mov	r3, r0
 800d254:	73fb      	strb	r3, [r7, #15]
      break;
 800d256:	e00c      	b.n	800d272 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d25e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d262:	b2db      	uxtb	r3, r3
 800d264:	4619      	mov	r1, r3
 800d266:	6878      	ldr	r0, [r7, #4]
 800d268:	f004 f888 	bl	801137c <USBD_LL_StallEP>
 800d26c:	4603      	mov	r3, r0
 800d26e:	73fb      	strb	r3, [r7, #15]
      break;
 800d270:	bf00      	nop
  }

  return ret;
 800d272:	7bfb      	ldrb	r3, [r7, #15]
}
 800d274:	4618      	mov	r0, r3
 800d276:	3710      	adds	r7, #16
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b086      	sub	sp, #24
 800d280:	af00      	add	r7, sp, #0
 800d282:	60f8      	str	r0, [r7, #12]
 800d284:	460b      	mov	r3, r1
 800d286:	607a      	str	r2, [r7, #4]
 800d288:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d28a:	2300      	movs	r3, #0
 800d28c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d28e:	7afb      	ldrb	r3, [r7, #11]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d16e      	bne.n	800d372 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d29a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d29c:	68fb      	ldr	r3, [r7, #12]
 800d29e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d2a2:	2b03      	cmp	r3, #3
 800d2a4:	f040 8098 	bne.w	800d3d8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	689a      	ldr	r2, [r3, #8]
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	68db      	ldr	r3, [r3, #12]
 800d2b0:	429a      	cmp	r2, r3
 800d2b2:	d913      	bls.n	800d2dc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d2b4:	693b      	ldr	r3, [r7, #16]
 800d2b6:	689a      	ldr	r2, [r3, #8]
 800d2b8:	693b      	ldr	r3, [r7, #16]
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	1ad2      	subs	r2, r2, r3
 800d2be:	693b      	ldr	r3, [r7, #16]
 800d2c0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	68da      	ldr	r2, [r3, #12]
 800d2c6:	693b      	ldr	r3, [r7, #16]
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	bf28      	it	cs
 800d2ce:	4613      	movcs	r3, r2
 800d2d0:	461a      	mov	r2, r3
 800d2d2:	6879      	ldr	r1, [r7, #4]
 800d2d4:	68f8      	ldr	r0, [r7, #12]
 800d2d6:	f001 f984 	bl	800e5e2 <USBD_CtlContinueRx>
 800d2da:	e07d      	b.n	800d3d8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d2e2:	f003 031f 	and.w	r3, r3, #31
 800d2e6:	2b02      	cmp	r3, #2
 800d2e8:	d014      	beq.n	800d314 <USBD_LL_DataOutStage+0x98>
 800d2ea:	2b02      	cmp	r3, #2
 800d2ec:	d81d      	bhi.n	800d32a <USBD_LL_DataOutStage+0xae>
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d002      	beq.n	800d2f8 <USBD_LL_DataOutStage+0x7c>
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d003      	beq.n	800d2fe <USBD_LL_DataOutStage+0x82>
 800d2f6:	e018      	b.n	800d32a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d2f8:	2300      	movs	r3, #0
 800d2fa:	75bb      	strb	r3, [r7, #22]
            break;
 800d2fc:	e018      	b.n	800d330 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d2fe:	68fb      	ldr	r3, [r7, #12]
 800d300:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d304:	b2db      	uxtb	r3, r3
 800d306:	4619      	mov	r1, r3
 800d308:	68f8      	ldr	r0, [r7, #12]
 800d30a:	f000 fa5e 	bl	800d7ca <USBD_CoreFindIF>
 800d30e:	4603      	mov	r3, r0
 800d310:	75bb      	strb	r3, [r7, #22]
            break;
 800d312:	e00d      	b.n	800d330 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d31a:	b2db      	uxtb	r3, r3
 800d31c:	4619      	mov	r1, r3
 800d31e:	68f8      	ldr	r0, [r7, #12]
 800d320:	f000 fa60 	bl	800d7e4 <USBD_CoreFindEP>
 800d324:	4603      	mov	r3, r0
 800d326:	75bb      	strb	r3, [r7, #22]
            break;
 800d328:	e002      	b.n	800d330 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d32a:	2300      	movs	r3, #0
 800d32c:	75bb      	strb	r3, [r7, #22]
            break;
 800d32e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d330:	7dbb      	ldrb	r3, [r7, #22]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d119      	bne.n	800d36a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d33c:	b2db      	uxtb	r3, r3
 800d33e:	2b03      	cmp	r3, #3
 800d340:	d113      	bne.n	800d36a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d342:	7dba      	ldrb	r2, [r7, #22]
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	32ae      	adds	r2, #174	; 0xae
 800d348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d34c:	691b      	ldr	r3, [r3, #16]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d00b      	beq.n	800d36a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d352:	7dba      	ldrb	r2, [r7, #22]
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d35a:	7dba      	ldrb	r2, [r7, #22]
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	32ae      	adds	r2, #174	; 0xae
 800d360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d364:	691b      	ldr	r3, [r3, #16]
 800d366:	68f8      	ldr	r0, [r7, #12]
 800d368:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d36a:	68f8      	ldr	r0, [r7, #12]
 800d36c:	f001 f94a 	bl	800e604 <USBD_CtlSendStatus>
 800d370:	e032      	b.n	800d3d8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d372:	7afb      	ldrb	r3, [r7, #11]
 800d374:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	4619      	mov	r1, r3
 800d37c:	68f8      	ldr	r0, [r7, #12]
 800d37e:	f000 fa31 	bl	800d7e4 <USBD_CoreFindEP>
 800d382:	4603      	mov	r3, r0
 800d384:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d386:	7dbb      	ldrb	r3, [r7, #22]
 800d388:	2bff      	cmp	r3, #255	; 0xff
 800d38a:	d025      	beq.n	800d3d8 <USBD_LL_DataOutStage+0x15c>
 800d38c:	7dbb      	ldrb	r3, [r7, #22]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d122      	bne.n	800d3d8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	2b03      	cmp	r3, #3
 800d39c:	d117      	bne.n	800d3ce <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d39e:	7dba      	ldrb	r2, [r7, #22]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	32ae      	adds	r2, #174	; 0xae
 800d3a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3a8:	699b      	ldr	r3, [r3, #24]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00f      	beq.n	800d3ce <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d3ae:	7dba      	ldrb	r2, [r7, #22]
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d3b6:	7dba      	ldrb	r2, [r7, #22]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	32ae      	adds	r2, #174	; 0xae
 800d3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3c0:	699b      	ldr	r3, [r3, #24]
 800d3c2:	7afa      	ldrb	r2, [r7, #11]
 800d3c4:	4611      	mov	r1, r2
 800d3c6:	68f8      	ldr	r0, [r7, #12]
 800d3c8:	4798      	blx	r3
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d3ce:	7dfb      	ldrb	r3, [r7, #23]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d001      	beq.n	800d3d8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d3d4:	7dfb      	ldrb	r3, [r7, #23]
 800d3d6:	e000      	b.n	800d3da <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d3d8:	2300      	movs	r3, #0
}
 800d3da:	4618      	mov	r0, r3
 800d3dc:	3718      	adds	r7, #24
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b086      	sub	sp, #24
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	60f8      	str	r0, [r7, #12]
 800d3ea:	460b      	mov	r3, r1
 800d3ec:	607a      	str	r2, [r7, #4]
 800d3ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d3f0:	7afb      	ldrb	r3, [r7, #11]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d16f      	bne.n	800d4d6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d3f6:	68fb      	ldr	r3, [r7, #12]
 800d3f8:	3314      	adds	r3, #20
 800d3fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d402:	2b02      	cmp	r3, #2
 800d404:	d15a      	bne.n	800d4bc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	689a      	ldr	r2, [r3, #8]
 800d40a:	693b      	ldr	r3, [r7, #16]
 800d40c:	68db      	ldr	r3, [r3, #12]
 800d40e:	429a      	cmp	r2, r3
 800d410:	d914      	bls.n	800d43c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	689a      	ldr	r2, [r3, #8]
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	68db      	ldr	r3, [r3, #12]
 800d41a:	1ad2      	subs	r2, r2, r3
 800d41c:	693b      	ldr	r3, [r7, #16]
 800d41e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	689b      	ldr	r3, [r3, #8]
 800d424:	461a      	mov	r2, r3
 800d426:	6879      	ldr	r1, [r7, #4]
 800d428:	68f8      	ldr	r0, [r7, #12]
 800d42a:	f001 f8ac 	bl	800e586 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d42e:	2300      	movs	r3, #0
 800d430:	2200      	movs	r2, #0
 800d432:	2100      	movs	r1, #0
 800d434:	68f8      	ldr	r0, [r7, #12]
 800d436:	f004 f84b 	bl	80114d0 <USBD_LL_PrepareReceive>
 800d43a:	e03f      	b.n	800d4bc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	68da      	ldr	r2, [r3, #12]
 800d440:	693b      	ldr	r3, [r7, #16]
 800d442:	689b      	ldr	r3, [r3, #8]
 800d444:	429a      	cmp	r2, r3
 800d446:	d11c      	bne.n	800d482 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	685a      	ldr	r2, [r3, #4]
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d450:	429a      	cmp	r2, r3
 800d452:	d316      	bcc.n	800d482 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d454:	693b      	ldr	r3, [r7, #16]
 800d456:	685a      	ldr	r2, [r3, #4]
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d45e:	429a      	cmp	r2, r3
 800d460:	d20f      	bcs.n	800d482 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d462:	2200      	movs	r2, #0
 800d464:	2100      	movs	r1, #0
 800d466:	68f8      	ldr	r0, [r7, #12]
 800d468:	f001 f88d 	bl	800e586 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	2200      	movs	r2, #0
 800d470:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d474:	2300      	movs	r3, #0
 800d476:	2200      	movs	r2, #0
 800d478:	2100      	movs	r1, #0
 800d47a:	68f8      	ldr	r0, [r7, #12]
 800d47c:	f004 f828 	bl	80114d0 <USBD_LL_PrepareReceive>
 800d480:	e01c      	b.n	800d4bc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d488:	b2db      	uxtb	r3, r3
 800d48a:	2b03      	cmp	r3, #3
 800d48c:	d10f      	bne.n	800d4ae <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d494:	68db      	ldr	r3, [r3, #12]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d009      	beq.n	800d4ae <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	2200      	movs	r2, #0
 800d49e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4a8:	68db      	ldr	r3, [r3, #12]
 800d4aa:	68f8      	ldr	r0, [r7, #12]
 800d4ac:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d4ae:	2180      	movs	r1, #128	; 0x80
 800d4b0:	68f8      	ldr	r0, [r7, #12]
 800d4b2:	f003 ff63 	bl	801137c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d4b6:	68f8      	ldr	r0, [r7, #12]
 800d4b8:	f001 f8b7 	bl	800e62a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d03a      	beq.n	800d53c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d4c6:	68f8      	ldr	r0, [r7, #12]
 800d4c8:	f7ff fe42 	bl	800d150 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	2200      	movs	r2, #0
 800d4d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d4d4:	e032      	b.n	800d53c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d4d6:	7afb      	ldrb	r3, [r7, #11]
 800d4d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d4dc:	b2db      	uxtb	r3, r3
 800d4de:	4619      	mov	r1, r3
 800d4e0:	68f8      	ldr	r0, [r7, #12]
 800d4e2:	f000 f97f 	bl	800d7e4 <USBD_CoreFindEP>
 800d4e6:	4603      	mov	r3, r0
 800d4e8:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d4ea:	7dfb      	ldrb	r3, [r7, #23]
 800d4ec:	2bff      	cmp	r3, #255	; 0xff
 800d4ee:	d025      	beq.n	800d53c <USBD_LL_DataInStage+0x15a>
 800d4f0:	7dfb      	ldrb	r3, [r7, #23]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d122      	bne.n	800d53c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4fc:	b2db      	uxtb	r3, r3
 800d4fe:	2b03      	cmp	r3, #3
 800d500:	d11c      	bne.n	800d53c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d502:	7dfa      	ldrb	r2, [r7, #23]
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	32ae      	adds	r2, #174	; 0xae
 800d508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d50c:	695b      	ldr	r3, [r3, #20]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d014      	beq.n	800d53c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d512:	7dfa      	ldrb	r2, [r7, #23]
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d51a:	7dfa      	ldrb	r2, [r7, #23]
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	32ae      	adds	r2, #174	; 0xae
 800d520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d524:	695b      	ldr	r3, [r3, #20]
 800d526:	7afa      	ldrb	r2, [r7, #11]
 800d528:	4611      	mov	r1, r2
 800d52a:	68f8      	ldr	r0, [r7, #12]
 800d52c:	4798      	blx	r3
 800d52e:	4603      	mov	r3, r0
 800d530:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d532:	7dbb      	ldrb	r3, [r7, #22]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d001      	beq.n	800d53c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d538:	7dbb      	ldrb	r3, [r7, #22]
 800d53a:	e000      	b.n	800d53e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d53c:	2300      	movs	r3, #0
}
 800d53e:	4618      	mov	r0, r3
 800d540:	3718      	adds	r7, #24
 800d542:	46bd      	mov	sp, r7
 800d544:	bd80      	pop	{r7, pc}

0800d546 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d546:	b580      	push	{r7, lr}
 800d548:	b084      	sub	sp, #16
 800d54a:	af00      	add	r7, sp, #0
 800d54c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d54e:	2300      	movs	r3, #0
 800d550:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	2201      	movs	r2, #1
 800d556:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	2200      	movs	r2, #0
 800d55e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	2200      	movs	r2, #0
 800d566:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	2200      	movs	r2, #0
 800d56c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2200      	movs	r2, #0
 800d574:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d57e:	2b00      	cmp	r3, #0
 800d580:	d014      	beq.n	800d5ac <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d588:	685b      	ldr	r3, [r3, #4]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d00e      	beq.n	800d5ac <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d594:	685b      	ldr	r3, [r3, #4]
 800d596:	687a      	ldr	r2, [r7, #4]
 800d598:	6852      	ldr	r2, [r2, #4]
 800d59a:	b2d2      	uxtb	r2, r2
 800d59c:	4611      	mov	r1, r2
 800d59e:	6878      	ldr	r0, [r7, #4]
 800d5a0:	4798      	blx	r3
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d001      	beq.n	800d5ac <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d5a8:	2303      	movs	r3, #3
 800d5aa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d5ac:	2340      	movs	r3, #64	; 0x40
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	2100      	movs	r1, #0
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f003 fe9d 	bl	80112f2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2201      	movs	r2, #1
 800d5bc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	2240      	movs	r2, #64	; 0x40
 800d5c4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d5c8:	2340      	movs	r3, #64	; 0x40
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	2180      	movs	r1, #128	; 0x80
 800d5ce:	6878      	ldr	r0, [r7, #4]
 800d5d0:	f003 fe8f 	bl	80112f2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	2240      	movs	r2, #64	; 0x40
 800d5de:	621a      	str	r2, [r3, #32]

  return ret;
 800d5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	3710      	adds	r7, #16
 800d5e6:	46bd      	mov	sp, r7
 800d5e8:	bd80      	pop	{r7, pc}

0800d5ea <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d5ea:	b480      	push	{r7}
 800d5ec:	b083      	sub	sp, #12
 800d5ee:	af00      	add	r7, sp, #0
 800d5f0:	6078      	str	r0, [r7, #4]
 800d5f2:	460b      	mov	r3, r1
 800d5f4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	78fa      	ldrb	r2, [r7, #3]
 800d5fa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d5fc:	2300      	movs	r3, #0
}
 800d5fe:	4618      	mov	r0, r3
 800d600:	370c      	adds	r7, #12
 800d602:	46bd      	mov	sp, r7
 800d604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d608:	4770      	bx	lr

0800d60a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d60a:	b480      	push	{r7}
 800d60c:	b083      	sub	sp, #12
 800d60e:	af00      	add	r7, sp, #0
 800d610:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d618:	b2da      	uxtb	r2, r3
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2204      	movs	r2, #4
 800d624:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d628:	2300      	movs	r3, #0
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	370c      	adds	r7, #12
 800d62e:	46bd      	mov	sp, r7
 800d630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d634:	4770      	bx	lr

0800d636 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d636:	b480      	push	{r7}
 800d638:	b083      	sub	sp, #12
 800d63a:	af00      	add	r7, sp, #0
 800d63c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d644:	b2db      	uxtb	r3, r3
 800d646:	2b04      	cmp	r3, #4
 800d648:	d106      	bne.n	800d658 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d650:	b2da      	uxtb	r2, r3
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d658:	2300      	movs	r3, #0
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	370c      	adds	r7, #12
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr

0800d666 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b082      	sub	sp, #8
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d674:	b2db      	uxtb	r3, r3
 800d676:	2b03      	cmp	r3, #3
 800d678:	d110      	bne.n	800d69c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d680:	2b00      	cmp	r3, #0
 800d682:	d00b      	beq.n	800d69c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d68a:	69db      	ldr	r3, [r3, #28]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d005      	beq.n	800d69c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d696:	69db      	ldr	r3, [r3, #28]
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d69c:	2300      	movs	r3, #0
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3708      	adds	r7, #8
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}

0800d6a6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d6a6:	b580      	push	{r7, lr}
 800d6a8:	b082      	sub	sp, #8
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
 800d6ae:	460b      	mov	r3, r1
 800d6b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	32ae      	adds	r2, #174	; 0xae
 800d6bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d101      	bne.n	800d6c8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d6c4:	2303      	movs	r3, #3
 800d6c6:	e01c      	b.n	800d702 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6ce:	b2db      	uxtb	r3, r3
 800d6d0:	2b03      	cmp	r3, #3
 800d6d2:	d115      	bne.n	800d700 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	32ae      	adds	r2, #174	; 0xae
 800d6de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6e2:	6a1b      	ldr	r3, [r3, #32]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d00b      	beq.n	800d700 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	32ae      	adds	r2, #174	; 0xae
 800d6f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6f6:	6a1b      	ldr	r3, [r3, #32]
 800d6f8:	78fa      	ldrb	r2, [r7, #3]
 800d6fa:	4611      	mov	r1, r2
 800d6fc:	6878      	ldr	r0, [r7, #4]
 800d6fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d700:	2300      	movs	r3, #0
}
 800d702:	4618      	mov	r0, r3
 800d704:	3708      	adds	r7, #8
 800d706:	46bd      	mov	sp, r7
 800d708:	bd80      	pop	{r7, pc}

0800d70a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d70a:	b580      	push	{r7, lr}
 800d70c:	b082      	sub	sp, #8
 800d70e:	af00      	add	r7, sp, #0
 800d710:	6078      	str	r0, [r7, #4]
 800d712:	460b      	mov	r3, r1
 800d714:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	32ae      	adds	r2, #174	; 0xae
 800d720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d724:	2b00      	cmp	r3, #0
 800d726:	d101      	bne.n	800d72c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d728:	2303      	movs	r3, #3
 800d72a:	e01c      	b.n	800d766 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d732:	b2db      	uxtb	r3, r3
 800d734:	2b03      	cmp	r3, #3
 800d736:	d115      	bne.n	800d764 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	32ae      	adds	r2, #174	; 0xae
 800d742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d00b      	beq.n	800d764 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	32ae      	adds	r2, #174	; 0xae
 800d756:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d75a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d75c:	78fa      	ldrb	r2, [r7, #3]
 800d75e:	4611      	mov	r1, r2
 800d760:	6878      	ldr	r0, [r7, #4]
 800d762:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d764:	2300      	movs	r3, #0
}
 800d766:	4618      	mov	r0, r3
 800d768:	3708      	adds	r7, #8
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d76e:	b480      	push	{r7}
 800d770:	b083      	sub	sp, #12
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d776:	2300      	movs	r3, #0
}
 800d778:	4618      	mov	r0, r3
 800d77a:	370c      	adds	r7, #12
 800d77c:	46bd      	mov	sp, r7
 800d77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d782:	4770      	bx	lr

0800d784 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d784:	b580      	push	{r7, lr}
 800d786:	b084      	sub	sp, #16
 800d788:	af00      	add	r7, sp, #0
 800d78a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d78c:	2300      	movs	r3, #0
 800d78e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	2201      	movs	r2, #1
 800d794:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d00e      	beq.n	800d7c0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7a8:	685b      	ldr	r3, [r3, #4]
 800d7aa:	687a      	ldr	r2, [r7, #4]
 800d7ac:	6852      	ldr	r2, [r2, #4]
 800d7ae:	b2d2      	uxtb	r2, r2
 800d7b0:	4611      	mov	r1, r2
 800d7b2:	6878      	ldr	r0, [r7, #4]
 800d7b4:	4798      	blx	r3
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d001      	beq.n	800d7c0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d7bc:	2303      	movs	r3, #3
 800d7be:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d7c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3710      	adds	r7, #16
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}

0800d7ca <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d7ca:	b480      	push	{r7}
 800d7cc:	b083      	sub	sp, #12
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
 800d7d2:	460b      	mov	r3, r1
 800d7d4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d7d6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	370c      	adds	r7, #12
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7e2:	4770      	bx	lr

0800d7e4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d7e4:	b480      	push	{r7}
 800d7e6:	b083      	sub	sp, #12
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	6078      	str	r0, [r7, #4]
 800d7ec:	460b      	mov	r3, r1
 800d7ee:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d7f0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	370c      	adds	r7, #12
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fc:	4770      	bx	lr

0800d7fe <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d7fe:	b580      	push	{r7, lr}
 800d800:	b086      	sub	sp, #24
 800d802:	af00      	add	r7, sp, #0
 800d804:	6078      	str	r0, [r7, #4]
 800d806:	460b      	mov	r3, r1
 800d808:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d812:	2300      	movs	r3, #0
 800d814:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	885b      	ldrh	r3, [r3, #2]
 800d81a:	b29a      	uxth	r2, r3
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	b29b      	uxth	r3, r3
 800d822:	429a      	cmp	r2, r3
 800d824:	d920      	bls.n	800d868 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	781b      	ldrb	r3, [r3, #0]
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d82e:	e013      	b.n	800d858 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d830:	f107 030a 	add.w	r3, r7, #10
 800d834:	4619      	mov	r1, r3
 800d836:	6978      	ldr	r0, [r7, #20]
 800d838:	f000 f81b 	bl	800d872 <USBD_GetNextDesc>
 800d83c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	785b      	ldrb	r3, [r3, #1]
 800d842:	2b05      	cmp	r3, #5
 800d844:	d108      	bne.n	800d858 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d846:	697b      	ldr	r3, [r7, #20]
 800d848:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d84a:	693b      	ldr	r3, [r7, #16]
 800d84c:	789b      	ldrb	r3, [r3, #2]
 800d84e:	78fa      	ldrb	r2, [r7, #3]
 800d850:	429a      	cmp	r2, r3
 800d852:	d008      	beq.n	800d866 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d854:	2300      	movs	r3, #0
 800d856:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	885b      	ldrh	r3, [r3, #2]
 800d85c:	b29a      	uxth	r2, r3
 800d85e:	897b      	ldrh	r3, [r7, #10]
 800d860:	429a      	cmp	r2, r3
 800d862:	d8e5      	bhi.n	800d830 <USBD_GetEpDesc+0x32>
 800d864:	e000      	b.n	800d868 <USBD_GetEpDesc+0x6a>
          break;
 800d866:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d868:	693b      	ldr	r3, [r7, #16]
}
 800d86a:	4618      	mov	r0, r3
 800d86c:	3718      	adds	r7, #24
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd80      	pop	{r7, pc}

0800d872 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d872:	b480      	push	{r7}
 800d874:	b085      	sub	sp, #20
 800d876:	af00      	add	r7, sp, #0
 800d878:	6078      	str	r0, [r7, #4]
 800d87a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	881a      	ldrh	r2, [r3, #0]
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	781b      	ldrb	r3, [r3, #0]
 800d888:	b29b      	uxth	r3, r3
 800d88a:	4413      	add	r3, r2
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	461a      	mov	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	4413      	add	r3, r2
 800d89c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d89e:	68fb      	ldr	r3, [r7, #12]
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3714      	adds	r7, #20
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8aa:	4770      	bx	lr

0800d8ac <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b087      	sub	sp, #28
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d8b8:	697b      	ldr	r3, [r7, #20]
 800d8ba:	781b      	ldrb	r3, [r3, #0]
 800d8bc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	3301      	adds	r3, #1
 800d8c2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d8c4:	697b      	ldr	r3, [r7, #20]
 800d8c6:	781b      	ldrb	r3, [r3, #0]
 800d8c8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d8ca:	8a3b      	ldrh	r3, [r7, #16]
 800d8cc:	021b      	lsls	r3, r3, #8
 800d8ce:	b21a      	sxth	r2, r3
 800d8d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	b21b      	sxth	r3, r3
 800d8d8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d8da:	89fb      	ldrh	r3, [r7, #14]
}
 800d8dc:	4618      	mov	r0, r3
 800d8de:	371c      	adds	r7, #28
 800d8e0:	46bd      	mov	sp, r7
 800d8e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e6:	4770      	bx	lr

0800d8e8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d8e8:	b580      	push	{r7, lr}
 800d8ea:	b084      	sub	sp, #16
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	6078      	str	r0, [r7, #4]
 800d8f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d8fe:	2b40      	cmp	r3, #64	; 0x40
 800d900:	d005      	beq.n	800d90e <USBD_StdDevReq+0x26>
 800d902:	2b40      	cmp	r3, #64	; 0x40
 800d904:	d857      	bhi.n	800d9b6 <USBD_StdDevReq+0xce>
 800d906:	2b00      	cmp	r3, #0
 800d908:	d00f      	beq.n	800d92a <USBD_StdDevReq+0x42>
 800d90a:	2b20      	cmp	r3, #32
 800d90c:	d153      	bne.n	800d9b6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	32ae      	adds	r2, #174	; 0xae
 800d918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d91c:	689b      	ldr	r3, [r3, #8]
 800d91e:	6839      	ldr	r1, [r7, #0]
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	4798      	blx	r3
 800d924:	4603      	mov	r3, r0
 800d926:	73fb      	strb	r3, [r7, #15]
      break;
 800d928:	e04a      	b.n	800d9c0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	785b      	ldrb	r3, [r3, #1]
 800d92e:	2b09      	cmp	r3, #9
 800d930:	d83b      	bhi.n	800d9aa <USBD_StdDevReq+0xc2>
 800d932:	a201      	add	r2, pc, #4	; (adr r2, 800d938 <USBD_StdDevReq+0x50>)
 800d934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d938:	0800d98d 	.word	0x0800d98d
 800d93c:	0800d9a1 	.word	0x0800d9a1
 800d940:	0800d9ab 	.word	0x0800d9ab
 800d944:	0800d997 	.word	0x0800d997
 800d948:	0800d9ab 	.word	0x0800d9ab
 800d94c:	0800d96b 	.word	0x0800d96b
 800d950:	0800d961 	.word	0x0800d961
 800d954:	0800d9ab 	.word	0x0800d9ab
 800d958:	0800d983 	.word	0x0800d983
 800d95c:	0800d975 	.word	0x0800d975
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d960:	6839      	ldr	r1, [r7, #0]
 800d962:	6878      	ldr	r0, [r7, #4]
 800d964:	f000 fa3c 	bl	800dde0 <USBD_GetDescriptor>
          break;
 800d968:	e024      	b.n	800d9b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d96a:	6839      	ldr	r1, [r7, #0]
 800d96c:	6878      	ldr	r0, [r7, #4]
 800d96e:	f000 fba1 	bl	800e0b4 <USBD_SetAddress>
          break;
 800d972:	e01f      	b.n	800d9b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d974:	6839      	ldr	r1, [r7, #0]
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	f000 fbe0 	bl	800e13c <USBD_SetConfig>
 800d97c:	4603      	mov	r3, r0
 800d97e:	73fb      	strb	r3, [r7, #15]
          break;
 800d980:	e018      	b.n	800d9b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d982:	6839      	ldr	r1, [r7, #0]
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f000 fc83 	bl	800e290 <USBD_GetConfig>
          break;
 800d98a:	e013      	b.n	800d9b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d98c:	6839      	ldr	r1, [r7, #0]
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f000 fcb4 	bl	800e2fc <USBD_GetStatus>
          break;
 800d994:	e00e      	b.n	800d9b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d996:	6839      	ldr	r1, [r7, #0]
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f000 fce3 	bl	800e364 <USBD_SetFeature>
          break;
 800d99e:	e009      	b.n	800d9b4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d9a0:	6839      	ldr	r1, [r7, #0]
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f000 fd07 	bl	800e3b6 <USBD_ClrFeature>
          break;
 800d9a8:	e004      	b.n	800d9b4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d9aa:	6839      	ldr	r1, [r7, #0]
 800d9ac:	6878      	ldr	r0, [r7, #4]
 800d9ae:	f000 fd5e 	bl	800e46e <USBD_CtlError>
          break;
 800d9b2:	bf00      	nop
      }
      break;
 800d9b4:	e004      	b.n	800d9c0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d9b6:	6839      	ldr	r1, [r7, #0]
 800d9b8:	6878      	ldr	r0, [r7, #4]
 800d9ba:	f000 fd58 	bl	800e46e <USBD_CtlError>
      break;
 800d9be:	bf00      	nop
  }

  return ret;
 800d9c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	3710      	adds	r7, #16
 800d9c6:	46bd      	mov	sp, r7
 800d9c8:	bd80      	pop	{r7, pc}
 800d9ca:	bf00      	nop

0800d9cc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9cc:	b580      	push	{r7, lr}
 800d9ce:	b084      	sub	sp, #16
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
 800d9d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d9d6:	2300      	movs	r3, #0
 800d9d8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d9da:	683b      	ldr	r3, [r7, #0]
 800d9dc:	781b      	ldrb	r3, [r3, #0]
 800d9de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d9e2:	2b40      	cmp	r3, #64	; 0x40
 800d9e4:	d005      	beq.n	800d9f2 <USBD_StdItfReq+0x26>
 800d9e6:	2b40      	cmp	r3, #64	; 0x40
 800d9e8:	d852      	bhi.n	800da90 <USBD_StdItfReq+0xc4>
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d001      	beq.n	800d9f2 <USBD_StdItfReq+0x26>
 800d9ee:	2b20      	cmp	r3, #32
 800d9f0:	d14e      	bne.n	800da90 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9f8:	b2db      	uxtb	r3, r3
 800d9fa:	3b01      	subs	r3, #1
 800d9fc:	2b02      	cmp	r3, #2
 800d9fe:	d840      	bhi.n	800da82 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	889b      	ldrh	r3, [r3, #4]
 800da04:	b2db      	uxtb	r3, r3
 800da06:	2b01      	cmp	r3, #1
 800da08:	d836      	bhi.n	800da78 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	889b      	ldrh	r3, [r3, #4]
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	4619      	mov	r1, r3
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	f7ff fed9 	bl	800d7ca <USBD_CoreFindIF>
 800da18:	4603      	mov	r3, r0
 800da1a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800da1c:	7bbb      	ldrb	r3, [r7, #14]
 800da1e:	2bff      	cmp	r3, #255	; 0xff
 800da20:	d01d      	beq.n	800da5e <USBD_StdItfReq+0x92>
 800da22:	7bbb      	ldrb	r3, [r7, #14]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d11a      	bne.n	800da5e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800da28:	7bba      	ldrb	r2, [r7, #14]
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	32ae      	adds	r2, #174	; 0xae
 800da2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da32:	689b      	ldr	r3, [r3, #8]
 800da34:	2b00      	cmp	r3, #0
 800da36:	d00f      	beq.n	800da58 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800da38:	7bba      	ldrb	r2, [r7, #14]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800da40:	7bba      	ldrb	r2, [r7, #14]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	32ae      	adds	r2, #174	; 0xae
 800da46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da4a:	689b      	ldr	r3, [r3, #8]
 800da4c:	6839      	ldr	r1, [r7, #0]
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	4798      	blx	r3
 800da52:	4603      	mov	r3, r0
 800da54:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800da56:	e004      	b.n	800da62 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800da58:	2303      	movs	r3, #3
 800da5a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800da5c:	e001      	b.n	800da62 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800da5e:	2303      	movs	r3, #3
 800da60:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	88db      	ldrh	r3, [r3, #6]
 800da66:	2b00      	cmp	r3, #0
 800da68:	d110      	bne.n	800da8c <USBD_StdItfReq+0xc0>
 800da6a:	7bfb      	ldrb	r3, [r7, #15]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d10d      	bne.n	800da8c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800da70:	6878      	ldr	r0, [r7, #4]
 800da72:	f000 fdc7 	bl	800e604 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800da76:	e009      	b.n	800da8c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800da78:	6839      	ldr	r1, [r7, #0]
 800da7a:	6878      	ldr	r0, [r7, #4]
 800da7c:	f000 fcf7 	bl	800e46e <USBD_CtlError>
          break;
 800da80:	e004      	b.n	800da8c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800da82:	6839      	ldr	r1, [r7, #0]
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f000 fcf2 	bl	800e46e <USBD_CtlError>
          break;
 800da8a:	e000      	b.n	800da8e <USBD_StdItfReq+0xc2>
          break;
 800da8c:	bf00      	nop
      }
      break;
 800da8e:	e004      	b.n	800da9a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800da90:	6839      	ldr	r1, [r7, #0]
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f000 fceb 	bl	800e46e <USBD_CtlError>
      break;
 800da98:	bf00      	nop
  }

  return ret;
 800da9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800da9c:	4618      	mov	r0, r3
 800da9e:	3710      	adds	r7, #16
 800daa0:	46bd      	mov	sp, r7
 800daa2:	bd80      	pop	{r7, pc}

0800daa4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b084      	sub	sp, #16
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	6078      	str	r0, [r7, #4]
 800daac:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800daae:	2300      	movs	r3, #0
 800dab0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	889b      	ldrh	r3, [r3, #4]
 800dab6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dab8:	683b      	ldr	r3, [r7, #0]
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dac0:	2b40      	cmp	r3, #64	; 0x40
 800dac2:	d007      	beq.n	800dad4 <USBD_StdEPReq+0x30>
 800dac4:	2b40      	cmp	r3, #64	; 0x40
 800dac6:	f200 817f 	bhi.w	800ddc8 <USBD_StdEPReq+0x324>
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d02a      	beq.n	800db24 <USBD_StdEPReq+0x80>
 800dace:	2b20      	cmp	r3, #32
 800dad0:	f040 817a 	bne.w	800ddc8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800dad4:	7bbb      	ldrb	r3, [r7, #14]
 800dad6:	4619      	mov	r1, r3
 800dad8:	6878      	ldr	r0, [r7, #4]
 800dada:	f7ff fe83 	bl	800d7e4 <USBD_CoreFindEP>
 800dade:	4603      	mov	r3, r0
 800dae0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dae2:	7b7b      	ldrb	r3, [r7, #13]
 800dae4:	2bff      	cmp	r3, #255	; 0xff
 800dae6:	f000 8174 	beq.w	800ddd2 <USBD_StdEPReq+0x32e>
 800daea:	7b7b      	ldrb	r3, [r7, #13]
 800daec:	2b00      	cmp	r3, #0
 800daee:	f040 8170 	bne.w	800ddd2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800daf2:	7b7a      	ldrb	r2, [r7, #13]
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800dafa:	7b7a      	ldrb	r2, [r7, #13]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	32ae      	adds	r2, #174	; 0xae
 800db00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db04:	689b      	ldr	r3, [r3, #8]
 800db06:	2b00      	cmp	r3, #0
 800db08:	f000 8163 	beq.w	800ddd2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800db0c:	7b7a      	ldrb	r2, [r7, #13]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	32ae      	adds	r2, #174	; 0xae
 800db12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db16:	689b      	ldr	r3, [r3, #8]
 800db18:	6839      	ldr	r1, [r7, #0]
 800db1a:	6878      	ldr	r0, [r7, #4]
 800db1c:	4798      	blx	r3
 800db1e:	4603      	mov	r3, r0
 800db20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800db22:	e156      	b.n	800ddd2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800db24:	683b      	ldr	r3, [r7, #0]
 800db26:	785b      	ldrb	r3, [r3, #1]
 800db28:	2b03      	cmp	r3, #3
 800db2a:	d008      	beq.n	800db3e <USBD_StdEPReq+0x9a>
 800db2c:	2b03      	cmp	r3, #3
 800db2e:	f300 8145 	bgt.w	800ddbc <USBD_StdEPReq+0x318>
 800db32:	2b00      	cmp	r3, #0
 800db34:	f000 809b 	beq.w	800dc6e <USBD_StdEPReq+0x1ca>
 800db38:	2b01      	cmp	r3, #1
 800db3a:	d03c      	beq.n	800dbb6 <USBD_StdEPReq+0x112>
 800db3c:	e13e      	b.n	800ddbc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db44:	b2db      	uxtb	r3, r3
 800db46:	2b02      	cmp	r3, #2
 800db48:	d002      	beq.n	800db50 <USBD_StdEPReq+0xac>
 800db4a:	2b03      	cmp	r3, #3
 800db4c:	d016      	beq.n	800db7c <USBD_StdEPReq+0xd8>
 800db4e:	e02c      	b.n	800dbaa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800db50:	7bbb      	ldrb	r3, [r7, #14]
 800db52:	2b00      	cmp	r3, #0
 800db54:	d00d      	beq.n	800db72 <USBD_StdEPReq+0xce>
 800db56:	7bbb      	ldrb	r3, [r7, #14]
 800db58:	2b80      	cmp	r3, #128	; 0x80
 800db5a:	d00a      	beq.n	800db72 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800db5c:	7bbb      	ldrb	r3, [r7, #14]
 800db5e:	4619      	mov	r1, r3
 800db60:	6878      	ldr	r0, [r7, #4]
 800db62:	f003 fc0b 	bl	801137c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800db66:	2180      	movs	r1, #128	; 0x80
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f003 fc07 	bl	801137c <USBD_LL_StallEP>
 800db6e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800db70:	e020      	b.n	800dbb4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800db72:	6839      	ldr	r1, [r7, #0]
 800db74:	6878      	ldr	r0, [r7, #4]
 800db76:	f000 fc7a 	bl	800e46e <USBD_CtlError>
              break;
 800db7a:	e01b      	b.n	800dbb4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	885b      	ldrh	r3, [r3, #2]
 800db80:	2b00      	cmp	r3, #0
 800db82:	d10e      	bne.n	800dba2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800db84:	7bbb      	ldrb	r3, [r7, #14]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d00b      	beq.n	800dba2 <USBD_StdEPReq+0xfe>
 800db8a:	7bbb      	ldrb	r3, [r7, #14]
 800db8c:	2b80      	cmp	r3, #128	; 0x80
 800db8e:	d008      	beq.n	800dba2 <USBD_StdEPReq+0xfe>
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	88db      	ldrh	r3, [r3, #6]
 800db94:	2b00      	cmp	r3, #0
 800db96:	d104      	bne.n	800dba2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800db98:	7bbb      	ldrb	r3, [r7, #14]
 800db9a:	4619      	mov	r1, r3
 800db9c:	6878      	ldr	r0, [r7, #4]
 800db9e:	f003 fbed 	bl	801137c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dba2:	6878      	ldr	r0, [r7, #4]
 800dba4:	f000 fd2e 	bl	800e604 <USBD_CtlSendStatus>

              break;
 800dba8:	e004      	b.n	800dbb4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800dbaa:	6839      	ldr	r1, [r7, #0]
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f000 fc5e 	bl	800e46e <USBD_CtlError>
              break;
 800dbb2:	bf00      	nop
          }
          break;
 800dbb4:	e107      	b.n	800ddc6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	2b02      	cmp	r3, #2
 800dbc0:	d002      	beq.n	800dbc8 <USBD_StdEPReq+0x124>
 800dbc2:	2b03      	cmp	r3, #3
 800dbc4:	d016      	beq.n	800dbf4 <USBD_StdEPReq+0x150>
 800dbc6:	e04b      	b.n	800dc60 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dbc8:	7bbb      	ldrb	r3, [r7, #14]
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d00d      	beq.n	800dbea <USBD_StdEPReq+0x146>
 800dbce:	7bbb      	ldrb	r3, [r7, #14]
 800dbd0:	2b80      	cmp	r3, #128	; 0x80
 800dbd2:	d00a      	beq.n	800dbea <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dbd4:	7bbb      	ldrb	r3, [r7, #14]
 800dbd6:	4619      	mov	r1, r3
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f003 fbcf 	bl	801137c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dbde:	2180      	movs	r1, #128	; 0x80
 800dbe0:	6878      	ldr	r0, [r7, #4]
 800dbe2:	f003 fbcb 	bl	801137c <USBD_LL_StallEP>
 800dbe6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dbe8:	e040      	b.n	800dc6c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800dbea:	6839      	ldr	r1, [r7, #0]
 800dbec:	6878      	ldr	r0, [r7, #4]
 800dbee:	f000 fc3e 	bl	800e46e <USBD_CtlError>
              break;
 800dbf2:	e03b      	b.n	800dc6c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dbf4:	683b      	ldr	r3, [r7, #0]
 800dbf6:	885b      	ldrh	r3, [r3, #2]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d136      	bne.n	800dc6a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dbfc:	7bbb      	ldrb	r3, [r7, #14]
 800dbfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d004      	beq.n	800dc10 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dc06:	7bbb      	ldrb	r3, [r7, #14]
 800dc08:	4619      	mov	r1, r3
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f003 fbd5 	bl	80113ba <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dc10:	6878      	ldr	r0, [r7, #4]
 800dc12:	f000 fcf7 	bl	800e604 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800dc16:	7bbb      	ldrb	r3, [r7, #14]
 800dc18:	4619      	mov	r1, r3
 800dc1a:	6878      	ldr	r0, [r7, #4]
 800dc1c:	f7ff fde2 	bl	800d7e4 <USBD_CoreFindEP>
 800dc20:	4603      	mov	r3, r0
 800dc22:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dc24:	7b7b      	ldrb	r3, [r7, #13]
 800dc26:	2bff      	cmp	r3, #255	; 0xff
 800dc28:	d01f      	beq.n	800dc6a <USBD_StdEPReq+0x1c6>
 800dc2a:	7b7b      	ldrb	r3, [r7, #13]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d11c      	bne.n	800dc6a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dc30:	7b7a      	ldrb	r2, [r7, #13]
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dc38:	7b7a      	ldrb	r2, [r7, #13]
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	32ae      	adds	r2, #174	; 0xae
 800dc3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc42:	689b      	ldr	r3, [r3, #8]
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	d010      	beq.n	800dc6a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dc48:	7b7a      	ldrb	r2, [r7, #13]
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	32ae      	adds	r2, #174	; 0xae
 800dc4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc52:	689b      	ldr	r3, [r3, #8]
 800dc54:	6839      	ldr	r1, [r7, #0]
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	4798      	blx	r3
 800dc5a:	4603      	mov	r3, r0
 800dc5c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800dc5e:	e004      	b.n	800dc6a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dc60:	6839      	ldr	r1, [r7, #0]
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	f000 fc03 	bl	800e46e <USBD_CtlError>
              break;
 800dc68:	e000      	b.n	800dc6c <USBD_StdEPReq+0x1c8>
              break;
 800dc6a:	bf00      	nop
          }
          break;
 800dc6c:	e0ab      	b.n	800ddc6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc74:	b2db      	uxtb	r3, r3
 800dc76:	2b02      	cmp	r3, #2
 800dc78:	d002      	beq.n	800dc80 <USBD_StdEPReq+0x1dc>
 800dc7a:	2b03      	cmp	r3, #3
 800dc7c:	d032      	beq.n	800dce4 <USBD_StdEPReq+0x240>
 800dc7e:	e097      	b.n	800ddb0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc80:	7bbb      	ldrb	r3, [r7, #14]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d007      	beq.n	800dc96 <USBD_StdEPReq+0x1f2>
 800dc86:	7bbb      	ldrb	r3, [r7, #14]
 800dc88:	2b80      	cmp	r3, #128	; 0x80
 800dc8a:	d004      	beq.n	800dc96 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800dc8c:	6839      	ldr	r1, [r7, #0]
 800dc8e:	6878      	ldr	r0, [r7, #4]
 800dc90:	f000 fbed 	bl	800e46e <USBD_CtlError>
                break;
 800dc94:	e091      	b.n	800ddba <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dc96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	da0b      	bge.n	800dcb6 <USBD_StdEPReq+0x212>
 800dc9e:	7bbb      	ldrb	r3, [r7, #14]
 800dca0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dca4:	4613      	mov	r3, r2
 800dca6:	009b      	lsls	r3, r3, #2
 800dca8:	4413      	add	r3, r2
 800dcaa:	009b      	lsls	r3, r3, #2
 800dcac:	3310      	adds	r3, #16
 800dcae:	687a      	ldr	r2, [r7, #4]
 800dcb0:	4413      	add	r3, r2
 800dcb2:	3304      	adds	r3, #4
 800dcb4:	e00b      	b.n	800dcce <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dcb6:	7bbb      	ldrb	r3, [r7, #14]
 800dcb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dcbc:	4613      	mov	r3, r2
 800dcbe:	009b      	lsls	r3, r3, #2
 800dcc0:	4413      	add	r3, r2
 800dcc2:	009b      	lsls	r3, r3, #2
 800dcc4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dcc8:	687a      	ldr	r2, [r7, #4]
 800dcca:	4413      	add	r3, r2
 800dccc:	3304      	adds	r3, #4
 800dcce:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dcd0:	68bb      	ldr	r3, [r7, #8]
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	2202      	movs	r2, #2
 800dcda:	4619      	mov	r1, r3
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f000 fc37 	bl	800e550 <USBD_CtlSendData>
              break;
 800dce2:	e06a      	b.n	800ddba <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dce4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	da11      	bge.n	800dd10 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dcec:	7bbb      	ldrb	r3, [r7, #14]
 800dcee:	f003 020f 	and.w	r2, r3, #15
 800dcf2:	6879      	ldr	r1, [r7, #4]
 800dcf4:	4613      	mov	r3, r2
 800dcf6:	009b      	lsls	r3, r3, #2
 800dcf8:	4413      	add	r3, r2
 800dcfa:	009b      	lsls	r3, r3, #2
 800dcfc:	440b      	add	r3, r1
 800dcfe:	3324      	adds	r3, #36	; 0x24
 800dd00:	881b      	ldrh	r3, [r3, #0]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d117      	bne.n	800dd36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dd06:	6839      	ldr	r1, [r7, #0]
 800dd08:	6878      	ldr	r0, [r7, #4]
 800dd0a:	f000 fbb0 	bl	800e46e <USBD_CtlError>
                  break;
 800dd0e:	e054      	b.n	800ddba <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dd10:	7bbb      	ldrb	r3, [r7, #14]
 800dd12:	f003 020f 	and.w	r2, r3, #15
 800dd16:	6879      	ldr	r1, [r7, #4]
 800dd18:	4613      	mov	r3, r2
 800dd1a:	009b      	lsls	r3, r3, #2
 800dd1c:	4413      	add	r3, r2
 800dd1e:	009b      	lsls	r3, r3, #2
 800dd20:	440b      	add	r3, r1
 800dd22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dd26:	881b      	ldrh	r3, [r3, #0]
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d104      	bne.n	800dd36 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dd2c:	6839      	ldr	r1, [r7, #0]
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 fb9d 	bl	800e46e <USBD_CtlError>
                  break;
 800dd34:	e041      	b.n	800ddba <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	da0b      	bge.n	800dd56 <USBD_StdEPReq+0x2b2>
 800dd3e:	7bbb      	ldrb	r3, [r7, #14]
 800dd40:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd44:	4613      	mov	r3, r2
 800dd46:	009b      	lsls	r3, r3, #2
 800dd48:	4413      	add	r3, r2
 800dd4a:	009b      	lsls	r3, r3, #2
 800dd4c:	3310      	adds	r3, #16
 800dd4e:	687a      	ldr	r2, [r7, #4]
 800dd50:	4413      	add	r3, r2
 800dd52:	3304      	adds	r3, #4
 800dd54:	e00b      	b.n	800dd6e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dd56:	7bbb      	ldrb	r3, [r7, #14]
 800dd58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd5c:	4613      	mov	r3, r2
 800dd5e:	009b      	lsls	r3, r3, #2
 800dd60:	4413      	add	r3, r2
 800dd62:	009b      	lsls	r3, r3, #2
 800dd64:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dd68:	687a      	ldr	r2, [r7, #4]
 800dd6a:	4413      	add	r3, r2
 800dd6c:	3304      	adds	r3, #4
 800dd6e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800dd70:	7bbb      	ldrb	r3, [r7, #14]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d002      	beq.n	800dd7c <USBD_StdEPReq+0x2d8>
 800dd76:	7bbb      	ldrb	r3, [r7, #14]
 800dd78:	2b80      	cmp	r3, #128	; 0x80
 800dd7a:	d103      	bne.n	800dd84 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800dd7c:	68bb      	ldr	r3, [r7, #8]
 800dd7e:	2200      	movs	r2, #0
 800dd80:	601a      	str	r2, [r3, #0]
 800dd82:	e00e      	b.n	800dda2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dd84:	7bbb      	ldrb	r3, [r7, #14]
 800dd86:	4619      	mov	r1, r3
 800dd88:	6878      	ldr	r0, [r7, #4]
 800dd8a:	f003 fb35 	bl	80113f8 <USBD_LL_IsStallEP>
 800dd8e:	4603      	mov	r3, r0
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d003      	beq.n	800dd9c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	2201      	movs	r2, #1
 800dd98:	601a      	str	r2, [r3, #0]
 800dd9a:	e002      	b.n	800dda2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800dd9c:	68bb      	ldr	r3, [r7, #8]
 800dd9e:	2200      	movs	r2, #0
 800dda0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dda2:	68bb      	ldr	r3, [r7, #8]
 800dda4:	2202      	movs	r2, #2
 800dda6:	4619      	mov	r1, r3
 800dda8:	6878      	ldr	r0, [r7, #4]
 800ddaa:	f000 fbd1 	bl	800e550 <USBD_CtlSendData>
              break;
 800ddae:	e004      	b.n	800ddba <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800ddb0:	6839      	ldr	r1, [r7, #0]
 800ddb2:	6878      	ldr	r0, [r7, #4]
 800ddb4:	f000 fb5b 	bl	800e46e <USBD_CtlError>
              break;
 800ddb8:	bf00      	nop
          }
          break;
 800ddba:	e004      	b.n	800ddc6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800ddbc:	6839      	ldr	r1, [r7, #0]
 800ddbe:	6878      	ldr	r0, [r7, #4]
 800ddc0:	f000 fb55 	bl	800e46e <USBD_CtlError>
          break;
 800ddc4:	bf00      	nop
      }
      break;
 800ddc6:	e005      	b.n	800ddd4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ddc8:	6839      	ldr	r1, [r7, #0]
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f000 fb4f 	bl	800e46e <USBD_CtlError>
      break;
 800ddd0:	e000      	b.n	800ddd4 <USBD_StdEPReq+0x330>
      break;
 800ddd2:	bf00      	nop
  }

  return ret;
 800ddd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	3710      	adds	r7, #16
 800ddda:	46bd      	mov	sp, r7
 800dddc:	bd80      	pop	{r7, pc}
	...

0800dde0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b084      	sub	sp, #16
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	6078      	str	r0, [r7, #4]
 800dde8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ddea:	2300      	movs	r3, #0
 800ddec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ddf6:	683b      	ldr	r3, [r7, #0]
 800ddf8:	885b      	ldrh	r3, [r3, #2]
 800ddfa:	0a1b      	lsrs	r3, r3, #8
 800ddfc:	b29b      	uxth	r3, r3
 800ddfe:	3b01      	subs	r3, #1
 800de00:	2b06      	cmp	r3, #6
 800de02:	f200 8128 	bhi.w	800e056 <USBD_GetDescriptor+0x276>
 800de06:	a201      	add	r2, pc, #4	; (adr r2, 800de0c <USBD_GetDescriptor+0x2c>)
 800de08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de0c:	0800de29 	.word	0x0800de29
 800de10:	0800de41 	.word	0x0800de41
 800de14:	0800de81 	.word	0x0800de81
 800de18:	0800e057 	.word	0x0800e057
 800de1c:	0800e057 	.word	0x0800e057
 800de20:	0800dff7 	.word	0x0800dff7
 800de24:	0800e023 	.word	0x0800e023
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	687a      	ldr	r2, [r7, #4]
 800de32:	7c12      	ldrb	r2, [r2, #16]
 800de34:	f107 0108 	add.w	r1, r7, #8
 800de38:	4610      	mov	r0, r2
 800de3a:	4798      	blx	r3
 800de3c:	60f8      	str	r0, [r7, #12]
      break;
 800de3e:	e112      	b.n	800e066 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	7c1b      	ldrb	r3, [r3, #16]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d10d      	bne.n	800de64 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de50:	f107 0208 	add.w	r2, r7, #8
 800de54:	4610      	mov	r0, r2
 800de56:	4798      	blx	r3
 800de58:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800de5a:	68fb      	ldr	r3, [r7, #12]
 800de5c:	3301      	adds	r3, #1
 800de5e:	2202      	movs	r2, #2
 800de60:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800de62:	e100      	b.n	800e066 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800de6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de6c:	f107 0208 	add.w	r2, r7, #8
 800de70:	4610      	mov	r0, r2
 800de72:	4798      	blx	r3
 800de74:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	3301      	adds	r3, #1
 800de7a:	2202      	movs	r2, #2
 800de7c:	701a      	strb	r2, [r3, #0]
      break;
 800de7e:	e0f2      	b.n	800e066 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	885b      	ldrh	r3, [r3, #2]
 800de84:	b2db      	uxtb	r3, r3
 800de86:	2b05      	cmp	r3, #5
 800de88:	f200 80ac 	bhi.w	800dfe4 <USBD_GetDescriptor+0x204>
 800de8c:	a201      	add	r2, pc, #4	; (adr r2, 800de94 <USBD_GetDescriptor+0xb4>)
 800de8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de92:	bf00      	nop
 800de94:	0800dead 	.word	0x0800dead
 800de98:	0800dee1 	.word	0x0800dee1
 800de9c:	0800df15 	.word	0x0800df15
 800dea0:	0800df49 	.word	0x0800df49
 800dea4:	0800df7d 	.word	0x0800df7d
 800dea8:	0800dfb1 	.word	0x0800dfb1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800deb2:	685b      	ldr	r3, [r3, #4]
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d00b      	beq.n	800ded0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800debe:	685b      	ldr	r3, [r3, #4]
 800dec0:	687a      	ldr	r2, [r7, #4]
 800dec2:	7c12      	ldrb	r2, [r2, #16]
 800dec4:	f107 0108 	add.w	r1, r7, #8
 800dec8:	4610      	mov	r0, r2
 800deca:	4798      	blx	r3
 800decc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dece:	e091      	b.n	800dff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ded0:	6839      	ldr	r1, [r7, #0]
 800ded2:	6878      	ldr	r0, [r7, #4]
 800ded4:	f000 facb 	bl	800e46e <USBD_CtlError>
            err++;
 800ded8:	7afb      	ldrb	r3, [r7, #11]
 800deda:	3301      	adds	r3, #1
 800dedc:	72fb      	strb	r3, [r7, #11]
          break;
 800dede:	e089      	b.n	800dff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dee6:	689b      	ldr	r3, [r3, #8]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d00b      	beq.n	800df04 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800def2:	689b      	ldr	r3, [r3, #8]
 800def4:	687a      	ldr	r2, [r7, #4]
 800def6:	7c12      	ldrb	r2, [r2, #16]
 800def8:	f107 0108 	add.w	r1, r7, #8
 800defc:	4610      	mov	r0, r2
 800defe:	4798      	blx	r3
 800df00:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df02:	e077      	b.n	800dff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800df04:	6839      	ldr	r1, [r7, #0]
 800df06:	6878      	ldr	r0, [r7, #4]
 800df08:	f000 fab1 	bl	800e46e <USBD_CtlError>
            err++;
 800df0c:	7afb      	ldrb	r3, [r7, #11]
 800df0e:	3301      	adds	r3, #1
 800df10:	72fb      	strb	r3, [r7, #11]
          break;
 800df12:	e06f      	b.n	800dff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df1a:	68db      	ldr	r3, [r3, #12]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d00b      	beq.n	800df38 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df26:	68db      	ldr	r3, [r3, #12]
 800df28:	687a      	ldr	r2, [r7, #4]
 800df2a:	7c12      	ldrb	r2, [r2, #16]
 800df2c:	f107 0108 	add.w	r1, r7, #8
 800df30:	4610      	mov	r0, r2
 800df32:	4798      	blx	r3
 800df34:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df36:	e05d      	b.n	800dff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800df38:	6839      	ldr	r1, [r7, #0]
 800df3a:	6878      	ldr	r0, [r7, #4]
 800df3c:	f000 fa97 	bl	800e46e <USBD_CtlError>
            err++;
 800df40:	7afb      	ldrb	r3, [r7, #11]
 800df42:	3301      	adds	r3, #1
 800df44:	72fb      	strb	r3, [r7, #11]
          break;
 800df46:	e055      	b.n	800dff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df4e:	691b      	ldr	r3, [r3, #16]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d00b      	beq.n	800df6c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df5a:	691b      	ldr	r3, [r3, #16]
 800df5c:	687a      	ldr	r2, [r7, #4]
 800df5e:	7c12      	ldrb	r2, [r2, #16]
 800df60:	f107 0108 	add.w	r1, r7, #8
 800df64:	4610      	mov	r0, r2
 800df66:	4798      	blx	r3
 800df68:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df6a:	e043      	b.n	800dff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800df6c:	6839      	ldr	r1, [r7, #0]
 800df6e:	6878      	ldr	r0, [r7, #4]
 800df70:	f000 fa7d 	bl	800e46e <USBD_CtlError>
            err++;
 800df74:	7afb      	ldrb	r3, [r7, #11]
 800df76:	3301      	adds	r3, #1
 800df78:	72fb      	strb	r3, [r7, #11]
          break;
 800df7a:	e03b      	b.n	800dff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df82:	695b      	ldr	r3, [r3, #20]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d00b      	beq.n	800dfa0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800df88:	687b      	ldr	r3, [r7, #4]
 800df8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df8e:	695b      	ldr	r3, [r3, #20]
 800df90:	687a      	ldr	r2, [r7, #4]
 800df92:	7c12      	ldrb	r2, [r2, #16]
 800df94:	f107 0108 	add.w	r1, r7, #8
 800df98:	4610      	mov	r0, r2
 800df9a:	4798      	blx	r3
 800df9c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df9e:	e029      	b.n	800dff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dfa0:	6839      	ldr	r1, [r7, #0]
 800dfa2:	6878      	ldr	r0, [r7, #4]
 800dfa4:	f000 fa63 	bl	800e46e <USBD_CtlError>
            err++;
 800dfa8:	7afb      	ldrb	r3, [r7, #11]
 800dfaa:	3301      	adds	r3, #1
 800dfac:	72fb      	strb	r3, [r7, #11]
          break;
 800dfae:	e021      	b.n	800dff4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfb6:	699b      	ldr	r3, [r3, #24]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d00b      	beq.n	800dfd4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfc2:	699b      	ldr	r3, [r3, #24]
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	7c12      	ldrb	r2, [r2, #16]
 800dfc8:	f107 0108 	add.w	r1, r7, #8
 800dfcc:	4610      	mov	r0, r2
 800dfce:	4798      	blx	r3
 800dfd0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfd2:	e00f      	b.n	800dff4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dfd4:	6839      	ldr	r1, [r7, #0]
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f000 fa49 	bl	800e46e <USBD_CtlError>
            err++;
 800dfdc:	7afb      	ldrb	r3, [r7, #11]
 800dfde:	3301      	adds	r3, #1
 800dfe0:	72fb      	strb	r3, [r7, #11]
          break;
 800dfe2:	e007      	b.n	800dff4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dfe4:	6839      	ldr	r1, [r7, #0]
 800dfe6:	6878      	ldr	r0, [r7, #4]
 800dfe8:	f000 fa41 	bl	800e46e <USBD_CtlError>
          err++;
 800dfec:	7afb      	ldrb	r3, [r7, #11]
 800dfee:	3301      	adds	r3, #1
 800dff0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dff2:	bf00      	nop
      }
      break;
 800dff4:	e037      	b.n	800e066 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	7c1b      	ldrb	r3, [r3, #16]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d109      	bne.n	800e012 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e006:	f107 0208 	add.w	r2, r7, #8
 800e00a:	4610      	mov	r0, r2
 800e00c:	4798      	blx	r3
 800e00e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e010:	e029      	b.n	800e066 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e012:	6839      	ldr	r1, [r7, #0]
 800e014:	6878      	ldr	r0, [r7, #4]
 800e016:	f000 fa2a 	bl	800e46e <USBD_CtlError>
        err++;
 800e01a:	7afb      	ldrb	r3, [r7, #11]
 800e01c:	3301      	adds	r3, #1
 800e01e:	72fb      	strb	r3, [r7, #11]
      break;
 800e020:	e021      	b.n	800e066 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	7c1b      	ldrb	r3, [r3, #16]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d10d      	bne.n	800e046 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e032:	f107 0208 	add.w	r2, r7, #8
 800e036:	4610      	mov	r0, r2
 800e038:	4798      	blx	r3
 800e03a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	3301      	adds	r3, #1
 800e040:	2207      	movs	r2, #7
 800e042:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e044:	e00f      	b.n	800e066 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e046:	6839      	ldr	r1, [r7, #0]
 800e048:	6878      	ldr	r0, [r7, #4]
 800e04a:	f000 fa10 	bl	800e46e <USBD_CtlError>
        err++;
 800e04e:	7afb      	ldrb	r3, [r7, #11]
 800e050:	3301      	adds	r3, #1
 800e052:	72fb      	strb	r3, [r7, #11]
      break;
 800e054:	e007      	b.n	800e066 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e056:	6839      	ldr	r1, [r7, #0]
 800e058:	6878      	ldr	r0, [r7, #4]
 800e05a:	f000 fa08 	bl	800e46e <USBD_CtlError>
      err++;
 800e05e:	7afb      	ldrb	r3, [r7, #11]
 800e060:	3301      	adds	r3, #1
 800e062:	72fb      	strb	r3, [r7, #11]
      break;
 800e064:	bf00      	nop
  }

  if (err != 0U)
 800e066:	7afb      	ldrb	r3, [r7, #11]
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d11e      	bne.n	800e0aa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	88db      	ldrh	r3, [r3, #6]
 800e070:	2b00      	cmp	r3, #0
 800e072:	d016      	beq.n	800e0a2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e074:	893b      	ldrh	r3, [r7, #8]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d00e      	beq.n	800e098 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e07a:	683b      	ldr	r3, [r7, #0]
 800e07c:	88da      	ldrh	r2, [r3, #6]
 800e07e:	893b      	ldrh	r3, [r7, #8]
 800e080:	4293      	cmp	r3, r2
 800e082:	bf28      	it	cs
 800e084:	4613      	movcs	r3, r2
 800e086:	b29b      	uxth	r3, r3
 800e088:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e08a:	893b      	ldrh	r3, [r7, #8]
 800e08c:	461a      	mov	r2, r3
 800e08e:	68f9      	ldr	r1, [r7, #12]
 800e090:	6878      	ldr	r0, [r7, #4]
 800e092:	f000 fa5d 	bl	800e550 <USBD_CtlSendData>
 800e096:	e009      	b.n	800e0ac <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e098:	6839      	ldr	r1, [r7, #0]
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f000 f9e7 	bl	800e46e <USBD_CtlError>
 800e0a0:	e004      	b.n	800e0ac <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f000 faae 	bl	800e604 <USBD_CtlSendStatus>
 800e0a8:	e000      	b.n	800e0ac <USBD_GetDescriptor+0x2cc>
    return;
 800e0aa:	bf00      	nop
  }
}
 800e0ac:	3710      	adds	r7, #16
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}
 800e0b2:	bf00      	nop

0800e0b4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0b4:	b580      	push	{r7, lr}
 800e0b6:	b084      	sub	sp, #16
 800e0b8:	af00      	add	r7, sp, #0
 800e0ba:	6078      	str	r0, [r7, #4]
 800e0bc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	889b      	ldrh	r3, [r3, #4]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d131      	bne.n	800e12a <USBD_SetAddress+0x76>
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	88db      	ldrh	r3, [r3, #6]
 800e0ca:	2b00      	cmp	r3, #0
 800e0cc:	d12d      	bne.n	800e12a <USBD_SetAddress+0x76>
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	885b      	ldrh	r3, [r3, #2]
 800e0d2:	2b7f      	cmp	r3, #127	; 0x7f
 800e0d4:	d829      	bhi.n	800e12a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	885b      	ldrh	r3, [r3, #2]
 800e0da:	b2db      	uxtb	r3, r3
 800e0dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e0e0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0e8:	b2db      	uxtb	r3, r3
 800e0ea:	2b03      	cmp	r3, #3
 800e0ec:	d104      	bne.n	800e0f8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e0ee:	6839      	ldr	r1, [r7, #0]
 800e0f0:	6878      	ldr	r0, [r7, #4]
 800e0f2:	f000 f9bc 	bl	800e46e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0f6:	e01d      	b.n	800e134 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	7bfa      	ldrb	r2, [r7, #15]
 800e0fc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e100:	7bfb      	ldrb	r3, [r7, #15]
 800e102:	4619      	mov	r1, r3
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f003 f9a3 	bl	8011450 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e10a:	6878      	ldr	r0, [r7, #4]
 800e10c:	f000 fa7a 	bl	800e604 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e110:	7bfb      	ldrb	r3, [r7, #15]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d004      	beq.n	800e120 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2202      	movs	r2, #2
 800e11a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e11e:	e009      	b.n	800e134 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2201      	movs	r2, #1
 800e124:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e128:	e004      	b.n	800e134 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e12a:	6839      	ldr	r1, [r7, #0]
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f000 f99e 	bl	800e46e <USBD_CtlError>
  }
}
 800e132:	bf00      	nop
 800e134:	bf00      	nop
 800e136:	3710      	adds	r7, #16
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b084      	sub	sp, #16
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e146:	2300      	movs	r3, #0
 800e148:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	885b      	ldrh	r3, [r3, #2]
 800e14e:	b2da      	uxtb	r2, r3
 800e150:	4b4e      	ldr	r3, [pc, #312]	; (800e28c <USBD_SetConfig+0x150>)
 800e152:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e154:	4b4d      	ldr	r3, [pc, #308]	; (800e28c <USBD_SetConfig+0x150>)
 800e156:	781b      	ldrb	r3, [r3, #0]
 800e158:	2b01      	cmp	r3, #1
 800e15a:	d905      	bls.n	800e168 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e15c:	6839      	ldr	r1, [r7, #0]
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 f985 	bl	800e46e <USBD_CtlError>
    return USBD_FAIL;
 800e164:	2303      	movs	r3, #3
 800e166:	e08c      	b.n	800e282 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e16e:	b2db      	uxtb	r3, r3
 800e170:	2b02      	cmp	r3, #2
 800e172:	d002      	beq.n	800e17a <USBD_SetConfig+0x3e>
 800e174:	2b03      	cmp	r3, #3
 800e176:	d029      	beq.n	800e1cc <USBD_SetConfig+0x90>
 800e178:	e075      	b.n	800e266 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e17a:	4b44      	ldr	r3, [pc, #272]	; (800e28c <USBD_SetConfig+0x150>)
 800e17c:	781b      	ldrb	r3, [r3, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d020      	beq.n	800e1c4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e182:	4b42      	ldr	r3, [pc, #264]	; (800e28c <USBD_SetConfig+0x150>)
 800e184:	781b      	ldrb	r3, [r3, #0]
 800e186:	461a      	mov	r2, r3
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e18c:	4b3f      	ldr	r3, [pc, #252]	; (800e28c <USBD_SetConfig+0x150>)
 800e18e:	781b      	ldrb	r3, [r3, #0]
 800e190:	4619      	mov	r1, r3
 800e192:	6878      	ldr	r0, [r7, #4]
 800e194:	f7fe ffe7 	bl	800d166 <USBD_SetClassConfig>
 800e198:	4603      	mov	r3, r0
 800e19a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e19c:	7bfb      	ldrb	r3, [r7, #15]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d008      	beq.n	800e1b4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e1a2:	6839      	ldr	r1, [r7, #0]
 800e1a4:	6878      	ldr	r0, [r7, #4]
 800e1a6:	f000 f962 	bl	800e46e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2202      	movs	r2, #2
 800e1ae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e1b2:	e065      	b.n	800e280 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e1b4:	6878      	ldr	r0, [r7, #4]
 800e1b6:	f000 fa25 	bl	800e604 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	2203      	movs	r2, #3
 800e1be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e1c2:	e05d      	b.n	800e280 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f000 fa1d 	bl	800e604 <USBD_CtlSendStatus>
      break;
 800e1ca:	e059      	b.n	800e280 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e1cc:	4b2f      	ldr	r3, [pc, #188]	; (800e28c <USBD_SetConfig+0x150>)
 800e1ce:	781b      	ldrb	r3, [r3, #0]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d112      	bne.n	800e1fa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	2202      	movs	r2, #2
 800e1d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e1dc:	4b2b      	ldr	r3, [pc, #172]	; (800e28c <USBD_SetConfig+0x150>)
 800e1de:	781b      	ldrb	r3, [r3, #0]
 800e1e0:	461a      	mov	r2, r3
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e1e6:	4b29      	ldr	r3, [pc, #164]	; (800e28c <USBD_SetConfig+0x150>)
 800e1e8:	781b      	ldrb	r3, [r3, #0]
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f7fe ffd6 	bl	800d19e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f000 fa06 	bl	800e604 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e1f8:	e042      	b.n	800e280 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e1fa:	4b24      	ldr	r3, [pc, #144]	; (800e28c <USBD_SetConfig+0x150>)
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	461a      	mov	r2, r3
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	685b      	ldr	r3, [r3, #4]
 800e204:	429a      	cmp	r2, r3
 800e206:	d02a      	beq.n	800e25e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	685b      	ldr	r3, [r3, #4]
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	4619      	mov	r1, r3
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f7fe ffc4 	bl	800d19e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e216:	4b1d      	ldr	r3, [pc, #116]	; (800e28c <USBD_SetConfig+0x150>)
 800e218:	781b      	ldrb	r3, [r3, #0]
 800e21a:	461a      	mov	r2, r3
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e220:	4b1a      	ldr	r3, [pc, #104]	; (800e28c <USBD_SetConfig+0x150>)
 800e222:	781b      	ldrb	r3, [r3, #0]
 800e224:	4619      	mov	r1, r3
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f7fe ff9d 	bl	800d166 <USBD_SetClassConfig>
 800e22c:	4603      	mov	r3, r0
 800e22e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e230:	7bfb      	ldrb	r3, [r7, #15]
 800e232:	2b00      	cmp	r3, #0
 800e234:	d00f      	beq.n	800e256 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e236:	6839      	ldr	r1, [r7, #0]
 800e238:	6878      	ldr	r0, [r7, #4]
 800e23a:	f000 f918 	bl	800e46e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	685b      	ldr	r3, [r3, #4]
 800e242:	b2db      	uxtb	r3, r3
 800e244:	4619      	mov	r1, r3
 800e246:	6878      	ldr	r0, [r7, #4]
 800e248:	f7fe ffa9 	bl	800d19e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	2202      	movs	r2, #2
 800e250:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e254:	e014      	b.n	800e280 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f000 f9d4 	bl	800e604 <USBD_CtlSendStatus>
      break;
 800e25c:	e010      	b.n	800e280 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	f000 f9d0 	bl	800e604 <USBD_CtlSendStatus>
      break;
 800e264:	e00c      	b.n	800e280 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e266:	6839      	ldr	r1, [r7, #0]
 800e268:	6878      	ldr	r0, [r7, #4]
 800e26a:	f000 f900 	bl	800e46e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e26e:	4b07      	ldr	r3, [pc, #28]	; (800e28c <USBD_SetConfig+0x150>)
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	4619      	mov	r1, r3
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f7fe ff92 	bl	800d19e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e27a:	2303      	movs	r3, #3
 800e27c:	73fb      	strb	r3, [r7, #15]
      break;
 800e27e:	bf00      	nop
  }

  return ret;
 800e280:	7bfb      	ldrb	r3, [r7, #15]
}
 800e282:	4618      	mov	r0, r3
 800e284:	3710      	adds	r7, #16
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	20000ac4 	.word	0x20000ac4

0800e290 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b082      	sub	sp, #8
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
 800e298:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e29a:	683b      	ldr	r3, [r7, #0]
 800e29c:	88db      	ldrh	r3, [r3, #6]
 800e29e:	2b01      	cmp	r3, #1
 800e2a0:	d004      	beq.n	800e2ac <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e2a2:	6839      	ldr	r1, [r7, #0]
 800e2a4:	6878      	ldr	r0, [r7, #4]
 800e2a6:	f000 f8e2 	bl	800e46e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e2aa:	e023      	b.n	800e2f4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2b2:	b2db      	uxtb	r3, r3
 800e2b4:	2b02      	cmp	r3, #2
 800e2b6:	dc02      	bgt.n	800e2be <USBD_GetConfig+0x2e>
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	dc03      	bgt.n	800e2c4 <USBD_GetConfig+0x34>
 800e2bc:	e015      	b.n	800e2ea <USBD_GetConfig+0x5a>
 800e2be:	2b03      	cmp	r3, #3
 800e2c0:	d00b      	beq.n	800e2da <USBD_GetConfig+0x4a>
 800e2c2:	e012      	b.n	800e2ea <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	3308      	adds	r3, #8
 800e2ce:	2201      	movs	r2, #1
 800e2d0:	4619      	mov	r1, r3
 800e2d2:	6878      	ldr	r0, [r7, #4]
 800e2d4:	f000 f93c 	bl	800e550 <USBD_CtlSendData>
        break;
 800e2d8:	e00c      	b.n	800e2f4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	3304      	adds	r3, #4
 800e2de:	2201      	movs	r2, #1
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f000 f934 	bl	800e550 <USBD_CtlSendData>
        break;
 800e2e8:	e004      	b.n	800e2f4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e2ea:	6839      	ldr	r1, [r7, #0]
 800e2ec:	6878      	ldr	r0, [r7, #4]
 800e2ee:	f000 f8be 	bl	800e46e <USBD_CtlError>
        break;
 800e2f2:	bf00      	nop
}
 800e2f4:	bf00      	nop
 800e2f6:	3708      	adds	r7, #8
 800e2f8:	46bd      	mov	sp, r7
 800e2fa:	bd80      	pop	{r7, pc}

0800e2fc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b082      	sub	sp, #8
 800e300:	af00      	add	r7, sp, #0
 800e302:	6078      	str	r0, [r7, #4]
 800e304:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e30c:	b2db      	uxtb	r3, r3
 800e30e:	3b01      	subs	r3, #1
 800e310:	2b02      	cmp	r3, #2
 800e312:	d81e      	bhi.n	800e352 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	88db      	ldrh	r3, [r3, #6]
 800e318:	2b02      	cmp	r3, #2
 800e31a:	d004      	beq.n	800e326 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e31c:	6839      	ldr	r1, [r7, #0]
 800e31e:	6878      	ldr	r0, [r7, #4]
 800e320:	f000 f8a5 	bl	800e46e <USBD_CtlError>
        break;
 800e324:	e01a      	b.n	800e35c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2201      	movs	r2, #1
 800e32a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e332:	2b00      	cmp	r3, #0
 800e334:	d005      	beq.n	800e342 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	68db      	ldr	r3, [r3, #12]
 800e33a:	f043 0202 	orr.w	r2, r3, #2
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	330c      	adds	r3, #12
 800e346:	2202      	movs	r2, #2
 800e348:	4619      	mov	r1, r3
 800e34a:	6878      	ldr	r0, [r7, #4]
 800e34c:	f000 f900 	bl	800e550 <USBD_CtlSendData>
      break;
 800e350:	e004      	b.n	800e35c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e352:	6839      	ldr	r1, [r7, #0]
 800e354:	6878      	ldr	r0, [r7, #4]
 800e356:	f000 f88a 	bl	800e46e <USBD_CtlError>
      break;
 800e35a:	bf00      	nop
  }
}
 800e35c:	bf00      	nop
 800e35e:	3708      	adds	r7, #8
 800e360:	46bd      	mov	sp, r7
 800e362:	bd80      	pop	{r7, pc}

0800e364 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e364:	b580      	push	{r7, lr}
 800e366:	b082      	sub	sp, #8
 800e368:	af00      	add	r7, sp, #0
 800e36a:	6078      	str	r0, [r7, #4]
 800e36c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	885b      	ldrh	r3, [r3, #2]
 800e372:	2b01      	cmp	r3, #1
 800e374:	d107      	bne.n	800e386 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2201      	movs	r2, #1
 800e37a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f000 f940 	bl	800e604 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e384:	e013      	b.n	800e3ae <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e386:	683b      	ldr	r3, [r7, #0]
 800e388:	885b      	ldrh	r3, [r3, #2]
 800e38a:	2b02      	cmp	r3, #2
 800e38c:	d10b      	bne.n	800e3a6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e38e:	683b      	ldr	r3, [r7, #0]
 800e390:	889b      	ldrh	r3, [r3, #4]
 800e392:	0a1b      	lsrs	r3, r3, #8
 800e394:	b29b      	uxth	r3, r3
 800e396:	b2da      	uxtb	r2, r3
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e39e:	6878      	ldr	r0, [r7, #4]
 800e3a0:	f000 f930 	bl	800e604 <USBD_CtlSendStatus>
}
 800e3a4:	e003      	b.n	800e3ae <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e3a6:	6839      	ldr	r1, [r7, #0]
 800e3a8:	6878      	ldr	r0, [r7, #4]
 800e3aa:	f000 f860 	bl	800e46e <USBD_CtlError>
}
 800e3ae:	bf00      	nop
 800e3b0:	3708      	adds	r7, #8
 800e3b2:	46bd      	mov	sp, r7
 800e3b4:	bd80      	pop	{r7, pc}

0800e3b6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3b6:	b580      	push	{r7, lr}
 800e3b8:	b082      	sub	sp, #8
 800e3ba:	af00      	add	r7, sp, #0
 800e3bc:	6078      	str	r0, [r7, #4]
 800e3be:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e3c6:	b2db      	uxtb	r3, r3
 800e3c8:	3b01      	subs	r3, #1
 800e3ca:	2b02      	cmp	r3, #2
 800e3cc:	d80b      	bhi.n	800e3e6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e3ce:	683b      	ldr	r3, [r7, #0]
 800e3d0:	885b      	ldrh	r3, [r3, #2]
 800e3d2:	2b01      	cmp	r3, #1
 800e3d4:	d10c      	bne.n	800e3f0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	2200      	movs	r2, #0
 800e3da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f000 f910 	bl	800e604 <USBD_CtlSendStatus>
      }
      break;
 800e3e4:	e004      	b.n	800e3f0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e3e6:	6839      	ldr	r1, [r7, #0]
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f000 f840 	bl	800e46e <USBD_CtlError>
      break;
 800e3ee:	e000      	b.n	800e3f2 <USBD_ClrFeature+0x3c>
      break;
 800e3f0:	bf00      	nop
  }
}
 800e3f2:	bf00      	nop
 800e3f4:	3708      	adds	r7, #8
 800e3f6:	46bd      	mov	sp, r7
 800e3f8:	bd80      	pop	{r7, pc}

0800e3fa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e3fa:	b580      	push	{r7, lr}
 800e3fc:	b084      	sub	sp, #16
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
 800e402:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	781a      	ldrb	r2, [r3, #0]
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	3301      	adds	r3, #1
 800e414:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	781a      	ldrb	r2, [r3, #0]
 800e41a:	687b      	ldr	r3, [r7, #4]
 800e41c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	3301      	adds	r3, #1
 800e422:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e424:	68f8      	ldr	r0, [r7, #12]
 800e426:	f7ff fa41 	bl	800d8ac <SWAPBYTE>
 800e42a:	4603      	mov	r3, r0
 800e42c:	461a      	mov	r2, r3
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	3301      	adds	r3, #1
 800e436:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	3301      	adds	r3, #1
 800e43c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e43e:	68f8      	ldr	r0, [r7, #12]
 800e440:	f7ff fa34 	bl	800d8ac <SWAPBYTE>
 800e444:	4603      	mov	r3, r0
 800e446:	461a      	mov	r2, r3
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	3301      	adds	r3, #1
 800e450:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	3301      	adds	r3, #1
 800e456:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e458:	68f8      	ldr	r0, [r7, #12]
 800e45a:	f7ff fa27 	bl	800d8ac <SWAPBYTE>
 800e45e:	4603      	mov	r3, r0
 800e460:	461a      	mov	r2, r3
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	80da      	strh	r2, [r3, #6]
}
 800e466:	bf00      	nop
 800e468:	3710      	adds	r7, #16
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}

0800e46e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e46e:	b580      	push	{r7, lr}
 800e470:	b082      	sub	sp, #8
 800e472:	af00      	add	r7, sp, #0
 800e474:	6078      	str	r0, [r7, #4]
 800e476:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e478:	2180      	movs	r1, #128	; 0x80
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f002 ff7e 	bl	801137c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e480:	2100      	movs	r1, #0
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f002 ff7a 	bl	801137c <USBD_LL_StallEP>
}
 800e488:	bf00      	nop
 800e48a:	3708      	adds	r7, #8
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e490:	b580      	push	{r7, lr}
 800e492:	b086      	sub	sp, #24
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e49c:	2300      	movs	r3, #0
 800e49e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e4a0:	68fb      	ldr	r3, [r7, #12]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d036      	beq.n	800e514 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e4aa:	6938      	ldr	r0, [r7, #16]
 800e4ac:	f000 f836 	bl	800e51c <USBD_GetLen>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	005b      	lsls	r3, r3, #1
 800e4b8:	b29a      	uxth	r2, r3
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e4be:	7dfb      	ldrb	r3, [r7, #23]
 800e4c0:	68ba      	ldr	r2, [r7, #8]
 800e4c2:	4413      	add	r3, r2
 800e4c4:	687a      	ldr	r2, [r7, #4]
 800e4c6:	7812      	ldrb	r2, [r2, #0]
 800e4c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800e4ca:	7dfb      	ldrb	r3, [r7, #23]
 800e4cc:	3301      	adds	r3, #1
 800e4ce:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e4d0:	7dfb      	ldrb	r3, [r7, #23]
 800e4d2:	68ba      	ldr	r2, [r7, #8]
 800e4d4:	4413      	add	r3, r2
 800e4d6:	2203      	movs	r2, #3
 800e4d8:	701a      	strb	r2, [r3, #0]
  idx++;
 800e4da:	7dfb      	ldrb	r3, [r7, #23]
 800e4dc:	3301      	adds	r3, #1
 800e4de:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e4e0:	e013      	b.n	800e50a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e4e2:	7dfb      	ldrb	r3, [r7, #23]
 800e4e4:	68ba      	ldr	r2, [r7, #8]
 800e4e6:	4413      	add	r3, r2
 800e4e8:	693a      	ldr	r2, [r7, #16]
 800e4ea:	7812      	ldrb	r2, [r2, #0]
 800e4ec:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e4ee:	693b      	ldr	r3, [r7, #16]
 800e4f0:	3301      	adds	r3, #1
 800e4f2:	613b      	str	r3, [r7, #16]
    idx++;
 800e4f4:	7dfb      	ldrb	r3, [r7, #23]
 800e4f6:	3301      	adds	r3, #1
 800e4f8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e4fa:	7dfb      	ldrb	r3, [r7, #23]
 800e4fc:	68ba      	ldr	r2, [r7, #8]
 800e4fe:	4413      	add	r3, r2
 800e500:	2200      	movs	r2, #0
 800e502:	701a      	strb	r2, [r3, #0]
    idx++;
 800e504:	7dfb      	ldrb	r3, [r7, #23]
 800e506:	3301      	adds	r3, #1
 800e508:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e50a:	693b      	ldr	r3, [r7, #16]
 800e50c:	781b      	ldrb	r3, [r3, #0]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d1e7      	bne.n	800e4e2 <USBD_GetString+0x52>
 800e512:	e000      	b.n	800e516 <USBD_GetString+0x86>
    return;
 800e514:	bf00      	nop
  }
}
 800e516:	3718      	adds	r7, #24
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}

0800e51c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b085      	sub	sp, #20
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e524:	2300      	movs	r3, #0
 800e526:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e52c:	e005      	b.n	800e53a <USBD_GetLen+0x1e>
  {
    len++;
 800e52e:	7bfb      	ldrb	r3, [r7, #15]
 800e530:	3301      	adds	r3, #1
 800e532:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e534:	68bb      	ldr	r3, [r7, #8]
 800e536:	3301      	adds	r3, #1
 800e538:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e53a:	68bb      	ldr	r3, [r7, #8]
 800e53c:	781b      	ldrb	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d1f5      	bne.n	800e52e <USBD_GetLen+0x12>
  }

  return len;
 800e542:	7bfb      	ldrb	r3, [r7, #15]
}
 800e544:	4618      	mov	r0, r3
 800e546:	3714      	adds	r7, #20
 800e548:	46bd      	mov	sp, r7
 800e54a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e54e:	4770      	bx	lr

0800e550 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	60f8      	str	r0, [r7, #12]
 800e558:	60b9      	str	r1, [r7, #8]
 800e55a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	2202      	movs	r2, #2
 800e560:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	687a      	ldr	r2, [r7, #4]
 800e568:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	687a      	ldr	r2, [r7, #4]
 800e56e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	68ba      	ldr	r2, [r7, #8]
 800e574:	2100      	movs	r1, #0
 800e576:	68f8      	ldr	r0, [r7, #12]
 800e578:	f002 ff89 	bl	801148e <USBD_LL_Transmit>

  return USBD_OK;
 800e57c:	2300      	movs	r3, #0
}
 800e57e:	4618      	mov	r0, r3
 800e580:	3710      	adds	r7, #16
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}

0800e586 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e586:	b580      	push	{r7, lr}
 800e588:	b084      	sub	sp, #16
 800e58a:	af00      	add	r7, sp, #0
 800e58c:	60f8      	str	r0, [r7, #12]
 800e58e:	60b9      	str	r1, [r7, #8]
 800e590:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	68ba      	ldr	r2, [r7, #8]
 800e596:	2100      	movs	r1, #0
 800e598:	68f8      	ldr	r0, [r7, #12]
 800e59a:	f002 ff78 	bl	801148e <USBD_LL_Transmit>

  return USBD_OK;
 800e59e:	2300      	movs	r3, #0
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3710      	adds	r7, #16
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}

0800e5a8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e5a8:	b580      	push	{r7, lr}
 800e5aa:	b084      	sub	sp, #16
 800e5ac:	af00      	add	r7, sp, #0
 800e5ae:	60f8      	str	r0, [r7, #12]
 800e5b0:	60b9      	str	r1, [r7, #8]
 800e5b2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	2203      	movs	r2, #3
 800e5b8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	687a      	ldr	r2, [r7, #4]
 800e5c0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	687a      	ldr	r2, [r7, #4]
 800e5c8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	68ba      	ldr	r2, [r7, #8]
 800e5d0:	2100      	movs	r1, #0
 800e5d2:	68f8      	ldr	r0, [r7, #12]
 800e5d4:	f002 ff7c 	bl	80114d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e5d8:	2300      	movs	r3, #0
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3710      	adds	r7, #16
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}

0800e5e2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e5e2:	b580      	push	{r7, lr}
 800e5e4:	b084      	sub	sp, #16
 800e5e6:	af00      	add	r7, sp, #0
 800e5e8:	60f8      	str	r0, [r7, #12]
 800e5ea:	60b9      	str	r1, [r7, #8]
 800e5ec:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	68ba      	ldr	r2, [r7, #8]
 800e5f2:	2100      	movs	r1, #0
 800e5f4:	68f8      	ldr	r0, [r7, #12]
 800e5f6:	f002 ff6b 	bl	80114d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e5fa:	2300      	movs	r3, #0
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3710      	adds	r7, #16
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b082      	sub	sp, #8
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2204      	movs	r2, #4
 800e610:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e614:	2300      	movs	r3, #0
 800e616:	2200      	movs	r2, #0
 800e618:	2100      	movs	r1, #0
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f002 ff37 	bl	801148e <USBD_LL_Transmit>

  return USBD_OK;
 800e620:	2300      	movs	r3, #0
}
 800e622:	4618      	mov	r0, r3
 800e624:	3708      	adds	r7, #8
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}

0800e62a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e62a:	b580      	push	{r7, lr}
 800e62c:	b082      	sub	sp, #8
 800e62e:	af00      	add	r7, sp, #0
 800e630:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	2205      	movs	r2, #5
 800e636:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e63a:	2300      	movs	r3, #0
 800e63c:	2200      	movs	r2, #0
 800e63e:	2100      	movs	r1, #0
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f002 ff45 	bl	80114d0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e646:	2300      	movs	r3, #0
}
 800e648:	4618      	mov	r0, r3
 800e64a:	3708      	adds	r7, #8
 800e64c:	46bd      	mov	sp, r7
 800e64e:	bd80      	pop	{r7, pc}

0800e650 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e650:	b580      	push	{r7, lr}
 800e652:	b084      	sub	sp, #16
 800e654:	af00      	add	r7, sp, #0
 800e656:	4603      	mov	r3, r0
 800e658:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e65a:	79fb      	ldrb	r3, [r7, #7]
 800e65c:	4a08      	ldr	r2, [pc, #32]	; (800e680 <disk_status+0x30>)
 800e65e:	009b      	lsls	r3, r3, #2
 800e660:	4413      	add	r3, r2
 800e662:	685b      	ldr	r3, [r3, #4]
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	79fa      	ldrb	r2, [r7, #7]
 800e668:	4905      	ldr	r1, [pc, #20]	; (800e680 <disk_status+0x30>)
 800e66a:	440a      	add	r2, r1
 800e66c:	7a12      	ldrb	r2, [r2, #8]
 800e66e:	4610      	mov	r0, r2
 800e670:	4798      	blx	r3
 800e672:	4603      	mov	r3, r0
 800e674:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e676:	7bfb      	ldrb	r3, [r7, #15]
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3710      	adds	r7, #16
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}
 800e680:	20000af0 	.word	0x20000af0

0800e684 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e684:	b580      	push	{r7, lr}
 800e686:	b084      	sub	sp, #16
 800e688:	af00      	add	r7, sp, #0
 800e68a:	4603      	mov	r3, r0
 800e68c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e68e:	2300      	movs	r3, #0
 800e690:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e692:	79fb      	ldrb	r3, [r7, #7]
 800e694:	4a0d      	ldr	r2, [pc, #52]	; (800e6cc <disk_initialize+0x48>)
 800e696:	5cd3      	ldrb	r3, [r2, r3]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d111      	bne.n	800e6c0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e69c:	79fb      	ldrb	r3, [r7, #7]
 800e69e:	4a0b      	ldr	r2, [pc, #44]	; (800e6cc <disk_initialize+0x48>)
 800e6a0:	2101      	movs	r1, #1
 800e6a2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e6a4:	79fb      	ldrb	r3, [r7, #7]
 800e6a6:	4a09      	ldr	r2, [pc, #36]	; (800e6cc <disk_initialize+0x48>)
 800e6a8:	009b      	lsls	r3, r3, #2
 800e6aa:	4413      	add	r3, r2
 800e6ac:	685b      	ldr	r3, [r3, #4]
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	79fa      	ldrb	r2, [r7, #7]
 800e6b2:	4906      	ldr	r1, [pc, #24]	; (800e6cc <disk_initialize+0x48>)
 800e6b4:	440a      	add	r2, r1
 800e6b6:	7a12      	ldrb	r2, [r2, #8]
 800e6b8:	4610      	mov	r0, r2
 800e6ba:	4798      	blx	r3
 800e6bc:	4603      	mov	r3, r0
 800e6be:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3710      	adds	r7, #16
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	bd80      	pop	{r7, pc}
 800e6ca:	bf00      	nop
 800e6cc:	20000af0 	.word	0x20000af0

0800e6d0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e6d0:	b590      	push	{r4, r7, lr}
 800e6d2:	b087      	sub	sp, #28
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	60b9      	str	r1, [r7, #8]
 800e6d8:	607a      	str	r2, [r7, #4]
 800e6da:	603b      	str	r3, [r7, #0]
 800e6dc:	4603      	mov	r3, r0
 800e6de:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e6e0:	7bfb      	ldrb	r3, [r7, #15]
 800e6e2:	4a0a      	ldr	r2, [pc, #40]	; (800e70c <disk_read+0x3c>)
 800e6e4:	009b      	lsls	r3, r3, #2
 800e6e6:	4413      	add	r3, r2
 800e6e8:	685b      	ldr	r3, [r3, #4]
 800e6ea:	689c      	ldr	r4, [r3, #8]
 800e6ec:	7bfb      	ldrb	r3, [r7, #15]
 800e6ee:	4a07      	ldr	r2, [pc, #28]	; (800e70c <disk_read+0x3c>)
 800e6f0:	4413      	add	r3, r2
 800e6f2:	7a18      	ldrb	r0, [r3, #8]
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	687a      	ldr	r2, [r7, #4]
 800e6f8:	68b9      	ldr	r1, [r7, #8]
 800e6fa:	47a0      	blx	r4
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	75fb      	strb	r3, [r7, #23]
  return res;
 800e700:	7dfb      	ldrb	r3, [r7, #23]
}
 800e702:	4618      	mov	r0, r3
 800e704:	371c      	adds	r7, #28
 800e706:	46bd      	mov	sp, r7
 800e708:	bd90      	pop	{r4, r7, pc}
 800e70a:	bf00      	nop
 800e70c:	20000af0 	.word	0x20000af0

0800e710 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e710:	b590      	push	{r4, r7, lr}
 800e712:	b087      	sub	sp, #28
 800e714:	af00      	add	r7, sp, #0
 800e716:	60b9      	str	r1, [r7, #8]
 800e718:	607a      	str	r2, [r7, #4]
 800e71a:	603b      	str	r3, [r7, #0]
 800e71c:	4603      	mov	r3, r0
 800e71e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e720:	7bfb      	ldrb	r3, [r7, #15]
 800e722:	4a0a      	ldr	r2, [pc, #40]	; (800e74c <disk_write+0x3c>)
 800e724:	009b      	lsls	r3, r3, #2
 800e726:	4413      	add	r3, r2
 800e728:	685b      	ldr	r3, [r3, #4]
 800e72a:	68dc      	ldr	r4, [r3, #12]
 800e72c:	7bfb      	ldrb	r3, [r7, #15]
 800e72e:	4a07      	ldr	r2, [pc, #28]	; (800e74c <disk_write+0x3c>)
 800e730:	4413      	add	r3, r2
 800e732:	7a18      	ldrb	r0, [r3, #8]
 800e734:	683b      	ldr	r3, [r7, #0]
 800e736:	687a      	ldr	r2, [r7, #4]
 800e738:	68b9      	ldr	r1, [r7, #8]
 800e73a:	47a0      	blx	r4
 800e73c:	4603      	mov	r3, r0
 800e73e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e740:	7dfb      	ldrb	r3, [r7, #23]
}
 800e742:	4618      	mov	r0, r3
 800e744:	371c      	adds	r7, #28
 800e746:	46bd      	mov	sp, r7
 800e748:	bd90      	pop	{r4, r7, pc}
 800e74a:	bf00      	nop
 800e74c:	20000af0 	.word	0x20000af0

0800e750 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b084      	sub	sp, #16
 800e754:	af00      	add	r7, sp, #0
 800e756:	4603      	mov	r3, r0
 800e758:	603a      	str	r2, [r7, #0]
 800e75a:	71fb      	strb	r3, [r7, #7]
 800e75c:	460b      	mov	r3, r1
 800e75e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e760:	79fb      	ldrb	r3, [r7, #7]
 800e762:	4a09      	ldr	r2, [pc, #36]	; (800e788 <disk_ioctl+0x38>)
 800e764:	009b      	lsls	r3, r3, #2
 800e766:	4413      	add	r3, r2
 800e768:	685b      	ldr	r3, [r3, #4]
 800e76a:	691b      	ldr	r3, [r3, #16]
 800e76c:	79fa      	ldrb	r2, [r7, #7]
 800e76e:	4906      	ldr	r1, [pc, #24]	; (800e788 <disk_ioctl+0x38>)
 800e770:	440a      	add	r2, r1
 800e772:	7a10      	ldrb	r0, [r2, #8]
 800e774:	79b9      	ldrb	r1, [r7, #6]
 800e776:	683a      	ldr	r2, [r7, #0]
 800e778:	4798      	blx	r3
 800e77a:	4603      	mov	r3, r0
 800e77c:	73fb      	strb	r3, [r7, #15]
  return res;
 800e77e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e780:	4618      	mov	r0, r3
 800e782:	3710      	adds	r7, #16
 800e784:	46bd      	mov	sp, r7
 800e786:	bd80      	pop	{r7, pc}
 800e788:	20000af0 	.word	0x20000af0

0800e78c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e78c:	b480      	push	{r7}
 800e78e:	b085      	sub	sp, #20
 800e790:	af00      	add	r7, sp, #0
 800e792:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	3301      	adds	r3, #1
 800e798:	781b      	ldrb	r3, [r3, #0]
 800e79a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e79c:	89fb      	ldrh	r3, [r7, #14]
 800e79e:	021b      	lsls	r3, r3, #8
 800e7a0:	b21a      	sxth	r2, r3
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	781b      	ldrb	r3, [r3, #0]
 800e7a6:	b21b      	sxth	r3, r3
 800e7a8:	4313      	orrs	r3, r2
 800e7aa:	b21b      	sxth	r3, r3
 800e7ac:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e7ae:	89fb      	ldrh	r3, [r7, #14]
}
 800e7b0:	4618      	mov	r0, r3
 800e7b2:	3714      	adds	r7, #20
 800e7b4:	46bd      	mov	sp, r7
 800e7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ba:	4770      	bx	lr

0800e7bc <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e7bc:	b480      	push	{r7}
 800e7be:	b085      	sub	sp, #20
 800e7c0:	af00      	add	r7, sp, #0
 800e7c2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	3303      	adds	r3, #3
 800e7c8:	781b      	ldrb	r3, [r3, #0]
 800e7ca:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	021b      	lsls	r3, r3, #8
 800e7d0:	687a      	ldr	r2, [r7, #4]
 800e7d2:	3202      	adds	r2, #2
 800e7d4:	7812      	ldrb	r2, [r2, #0]
 800e7d6:	4313      	orrs	r3, r2
 800e7d8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e7da:	68fb      	ldr	r3, [r7, #12]
 800e7dc:	021b      	lsls	r3, r3, #8
 800e7de:	687a      	ldr	r2, [r7, #4]
 800e7e0:	3201      	adds	r2, #1
 800e7e2:	7812      	ldrb	r2, [r2, #0]
 800e7e4:	4313      	orrs	r3, r2
 800e7e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	021b      	lsls	r3, r3, #8
 800e7ec:	687a      	ldr	r2, [r7, #4]
 800e7ee:	7812      	ldrb	r2, [r2, #0]
 800e7f0:	4313      	orrs	r3, r2
 800e7f2:	60fb      	str	r3, [r7, #12]
	return rv;
 800e7f4:	68fb      	ldr	r3, [r7, #12]
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3714      	adds	r7, #20
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e800:	4770      	bx	lr

0800e802 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e802:	b480      	push	{r7}
 800e804:	b083      	sub	sp, #12
 800e806:	af00      	add	r7, sp, #0
 800e808:	6078      	str	r0, [r7, #4]
 800e80a:	460b      	mov	r3, r1
 800e80c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	1c5a      	adds	r2, r3, #1
 800e812:	607a      	str	r2, [r7, #4]
 800e814:	887a      	ldrh	r2, [r7, #2]
 800e816:	b2d2      	uxtb	r2, r2
 800e818:	701a      	strb	r2, [r3, #0]
 800e81a:	887b      	ldrh	r3, [r7, #2]
 800e81c:	0a1b      	lsrs	r3, r3, #8
 800e81e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	1c5a      	adds	r2, r3, #1
 800e824:	607a      	str	r2, [r7, #4]
 800e826:	887a      	ldrh	r2, [r7, #2]
 800e828:	b2d2      	uxtb	r2, r2
 800e82a:	701a      	strb	r2, [r3, #0]
}
 800e82c:	bf00      	nop
 800e82e:	370c      	adds	r7, #12
 800e830:	46bd      	mov	sp, r7
 800e832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e836:	4770      	bx	lr

0800e838 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e838:	b480      	push	{r7}
 800e83a:	b083      	sub	sp, #12
 800e83c:	af00      	add	r7, sp, #0
 800e83e:	6078      	str	r0, [r7, #4]
 800e840:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	1c5a      	adds	r2, r3, #1
 800e846:	607a      	str	r2, [r7, #4]
 800e848:	683a      	ldr	r2, [r7, #0]
 800e84a:	b2d2      	uxtb	r2, r2
 800e84c:	701a      	strb	r2, [r3, #0]
 800e84e:	683b      	ldr	r3, [r7, #0]
 800e850:	0a1b      	lsrs	r3, r3, #8
 800e852:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	1c5a      	adds	r2, r3, #1
 800e858:	607a      	str	r2, [r7, #4]
 800e85a:	683a      	ldr	r2, [r7, #0]
 800e85c:	b2d2      	uxtb	r2, r2
 800e85e:	701a      	strb	r2, [r3, #0]
 800e860:	683b      	ldr	r3, [r7, #0]
 800e862:	0a1b      	lsrs	r3, r3, #8
 800e864:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	1c5a      	adds	r2, r3, #1
 800e86a:	607a      	str	r2, [r7, #4]
 800e86c:	683a      	ldr	r2, [r7, #0]
 800e86e:	b2d2      	uxtb	r2, r2
 800e870:	701a      	strb	r2, [r3, #0]
 800e872:	683b      	ldr	r3, [r7, #0]
 800e874:	0a1b      	lsrs	r3, r3, #8
 800e876:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	1c5a      	adds	r2, r3, #1
 800e87c:	607a      	str	r2, [r7, #4]
 800e87e:	683a      	ldr	r2, [r7, #0]
 800e880:	b2d2      	uxtb	r2, r2
 800e882:	701a      	strb	r2, [r3, #0]
}
 800e884:	bf00      	nop
 800e886:	370c      	adds	r7, #12
 800e888:	46bd      	mov	sp, r7
 800e88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e88e:	4770      	bx	lr

0800e890 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e890:	b480      	push	{r7}
 800e892:	b087      	sub	sp, #28
 800e894:	af00      	add	r7, sp, #0
 800e896:	60f8      	str	r0, [r7, #12]
 800e898:	60b9      	str	r1, [r7, #8]
 800e89a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e8a0:	68bb      	ldr	r3, [r7, #8]
 800e8a2:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	2b00      	cmp	r3, #0
 800e8a8:	d00d      	beq.n	800e8c6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e8aa:	693a      	ldr	r2, [r7, #16]
 800e8ac:	1c53      	adds	r3, r2, #1
 800e8ae:	613b      	str	r3, [r7, #16]
 800e8b0:	697b      	ldr	r3, [r7, #20]
 800e8b2:	1c59      	adds	r1, r3, #1
 800e8b4:	6179      	str	r1, [r7, #20]
 800e8b6:	7812      	ldrb	r2, [r2, #0]
 800e8b8:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	3b01      	subs	r3, #1
 800e8be:	607b      	str	r3, [r7, #4]
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d1f1      	bne.n	800e8aa <mem_cpy+0x1a>
	}
}
 800e8c6:	bf00      	nop
 800e8c8:	371c      	adds	r7, #28
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d0:	4770      	bx	lr

0800e8d2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e8d2:	b480      	push	{r7}
 800e8d4:	b087      	sub	sp, #28
 800e8d6:	af00      	add	r7, sp, #0
 800e8d8:	60f8      	str	r0, [r7, #12]
 800e8da:	60b9      	str	r1, [r7, #8]
 800e8dc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e8de:	68fb      	ldr	r3, [r7, #12]
 800e8e0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e8e2:	697b      	ldr	r3, [r7, #20]
 800e8e4:	1c5a      	adds	r2, r3, #1
 800e8e6:	617a      	str	r2, [r7, #20]
 800e8e8:	68ba      	ldr	r2, [r7, #8]
 800e8ea:	b2d2      	uxtb	r2, r2
 800e8ec:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	3b01      	subs	r3, #1
 800e8f2:	607b      	str	r3, [r7, #4]
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d1f3      	bne.n	800e8e2 <mem_set+0x10>
}
 800e8fa:	bf00      	nop
 800e8fc:	bf00      	nop
 800e8fe:	371c      	adds	r7, #28
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr

0800e908 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e908:	b480      	push	{r7}
 800e90a:	b089      	sub	sp, #36	; 0x24
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	60f8      	str	r0, [r7, #12]
 800e910:	60b9      	str	r1, [r7, #8]
 800e912:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e914:	68fb      	ldr	r3, [r7, #12]
 800e916:	61fb      	str	r3, [r7, #28]
 800e918:	68bb      	ldr	r3, [r7, #8]
 800e91a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e91c:	2300      	movs	r3, #0
 800e91e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e920:	69fb      	ldr	r3, [r7, #28]
 800e922:	1c5a      	adds	r2, r3, #1
 800e924:	61fa      	str	r2, [r7, #28]
 800e926:	781b      	ldrb	r3, [r3, #0]
 800e928:	4619      	mov	r1, r3
 800e92a:	69bb      	ldr	r3, [r7, #24]
 800e92c:	1c5a      	adds	r2, r3, #1
 800e92e:	61ba      	str	r2, [r7, #24]
 800e930:	781b      	ldrb	r3, [r3, #0]
 800e932:	1acb      	subs	r3, r1, r3
 800e934:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	3b01      	subs	r3, #1
 800e93a:	607b      	str	r3, [r7, #4]
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d002      	beq.n	800e948 <mem_cmp+0x40>
 800e942:	697b      	ldr	r3, [r7, #20]
 800e944:	2b00      	cmp	r3, #0
 800e946:	d0eb      	beq.n	800e920 <mem_cmp+0x18>

	return r;
 800e948:	697b      	ldr	r3, [r7, #20]
}
 800e94a:	4618      	mov	r0, r3
 800e94c:	3724      	adds	r7, #36	; 0x24
 800e94e:	46bd      	mov	sp, r7
 800e950:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e954:	4770      	bx	lr

0800e956 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e956:	b480      	push	{r7}
 800e958:	b083      	sub	sp, #12
 800e95a:	af00      	add	r7, sp, #0
 800e95c:	6078      	str	r0, [r7, #4]
 800e95e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e960:	e002      	b.n	800e968 <chk_chr+0x12>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	3301      	adds	r3, #1
 800e966:	607b      	str	r3, [r7, #4]
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	781b      	ldrb	r3, [r3, #0]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d005      	beq.n	800e97c <chk_chr+0x26>
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	781b      	ldrb	r3, [r3, #0]
 800e974:	461a      	mov	r2, r3
 800e976:	683b      	ldr	r3, [r7, #0]
 800e978:	4293      	cmp	r3, r2
 800e97a:	d1f2      	bne.n	800e962 <chk_chr+0xc>
	return *str;
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	781b      	ldrb	r3, [r3, #0]
}
 800e980:	4618      	mov	r0, r3
 800e982:	370c      	adds	r7, #12
 800e984:	46bd      	mov	sp, r7
 800e986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98a:	4770      	bx	lr

0800e98c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e98c:	b480      	push	{r7}
 800e98e:	b085      	sub	sp, #20
 800e990:	af00      	add	r7, sp, #0
 800e992:	6078      	str	r0, [r7, #4]
 800e994:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e996:	2300      	movs	r3, #0
 800e998:	60bb      	str	r3, [r7, #8]
 800e99a:	68bb      	ldr	r3, [r7, #8]
 800e99c:	60fb      	str	r3, [r7, #12]
 800e99e:	e029      	b.n	800e9f4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e9a0:	4a27      	ldr	r2, [pc, #156]	; (800ea40 <chk_lock+0xb4>)
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	011b      	lsls	r3, r3, #4
 800e9a6:	4413      	add	r3, r2
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d01d      	beq.n	800e9ea <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e9ae:	4a24      	ldr	r2, [pc, #144]	; (800ea40 <chk_lock+0xb4>)
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	011b      	lsls	r3, r3, #4
 800e9b4:	4413      	add	r3, r2
 800e9b6:	681a      	ldr	r2, [r3, #0]
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	429a      	cmp	r2, r3
 800e9be:	d116      	bne.n	800e9ee <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e9c0:	4a1f      	ldr	r2, [pc, #124]	; (800ea40 <chk_lock+0xb4>)
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	011b      	lsls	r3, r3, #4
 800e9c6:	4413      	add	r3, r2
 800e9c8:	3304      	adds	r3, #4
 800e9ca:	681a      	ldr	r2, [r3, #0]
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	d10c      	bne.n	800e9ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e9d4:	4a1a      	ldr	r2, [pc, #104]	; (800ea40 <chk_lock+0xb4>)
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	011b      	lsls	r3, r3, #4
 800e9da:	4413      	add	r3, r2
 800e9dc:	3308      	adds	r3, #8
 800e9de:	681a      	ldr	r2, [r3, #0]
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	d102      	bne.n	800e9ee <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e9e8:	e007      	b.n	800e9fa <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e9ea:	2301      	movs	r3, #1
 800e9ec:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e9ee:	68fb      	ldr	r3, [r7, #12]
 800e9f0:	3301      	adds	r3, #1
 800e9f2:	60fb      	str	r3, [r7, #12]
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	2b01      	cmp	r3, #1
 800e9f8:	d9d2      	bls.n	800e9a0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e9fa:	68fb      	ldr	r3, [r7, #12]
 800e9fc:	2b02      	cmp	r3, #2
 800e9fe:	d109      	bne.n	800ea14 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ea00:	68bb      	ldr	r3, [r7, #8]
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	d102      	bne.n	800ea0c <chk_lock+0x80>
 800ea06:	683b      	ldr	r3, [r7, #0]
 800ea08:	2b02      	cmp	r3, #2
 800ea0a:	d101      	bne.n	800ea10 <chk_lock+0x84>
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	e010      	b.n	800ea32 <chk_lock+0xa6>
 800ea10:	2312      	movs	r3, #18
 800ea12:	e00e      	b.n	800ea32 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ea14:	683b      	ldr	r3, [r7, #0]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d108      	bne.n	800ea2c <chk_lock+0xa0>
 800ea1a:	4a09      	ldr	r2, [pc, #36]	; (800ea40 <chk_lock+0xb4>)
 800ea1c:	68fb      	ldr	r3, [r7, #12]
 800ea1e:	011b      	lsls	r3, r3, #4
 800ea20:	4413      	add	r3, r2
 800ea22:	330c      	adds	r3, #12
 800ea24:	881b      	ldrh	r3, [r3, #0]
 800ea26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea2a:	d101      	bne.n	800ea30 <chk_lock+0xa4>
 800ea2c:	2310      	movs	r3, #16
 800ea2e:	e000      	b.n	800ea32 <chk_lock+0xa6>
 800ea30:	2300      	movs	r3, #0
}
 800ea32:	4618      	mov	r0, r3
 800ea34:	3714      	adds	r7, #20
 800ea36:	46bd      	mov	sp, r7
 800ea38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3c:	4770      	bx	lr
 800ea3e:	bf00      	nop
 800ea40:	20000ad0 	.word	0x20000ad0

0800ea44 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ea4a:	2300      	movs	r3, #0
 800ea4c:	607b      	str	r3, [r7, #4]
 800ea4e:	e002      	b.n	800ea56 <enq_lock+0x12>
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	3301      	adds	r3, #1
 800ea54:	607b      	str	r3, [r7, #4]
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	2b01      	cmp	r3, #1
 800ea5a:	d806      	bhi.n	800ea6a <enq_lock+0x26>
 800ea5c:	4a09      	ldr	r2, [pc, #36]	; (800ea84 <enq_lock+0x40>)
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	011b      	lsls	r3, r3, #4
 800ea62:	4413      	add	r3, r2
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	d1f2      	bne.n	800ea50 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2b02      	cmp	r3, #2
 800ea6e:	bf14      	ite	ne
 800ea70:	2301      	movne	r3, #1
 800ea72:	2300      	moveq	r3, #0
 800ea74:	b2db      	uxtb	r3, r3
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	370c      	adds	r7, #12
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea80:	4770      	bx	lr
 800ea82:	bf00      	nop
 800ea84:	20000ad0 	.word	0x20000ad0

0800ea88 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b085      	sub	sp, #20
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
 800ea90:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ea92:	2300      	movs	r3, #0
 800ea94:	60fb      	str	r3, [r7, #12]
 800ea96:	e01f      	b.n	800ead8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ea98:	4a41      	ldr	r2, [pc, #260]	; (800eba0 <inc_lock+0x118>)
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	011b      	lsls	r3, r3, #4
 800ea9e:	4413      	add	r3, r2
 800eaa0:	681a      	ldr	r2, [r3, #0]
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	429a      	cmp	r2, r3
 800eaa8:	d113      	bne.n	800ead2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800eaaa:	4a3d      	ldr	r2, [pc, #244]	; (800eba0 <inc_lock+0x118>)
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	011b      	lsls	r3, r3, #4
 800eab0:	4413      	add	r3, r2
 800eab2:	3304      	adds	r3, #4
 800eab4:	681a      	ldr	r2, [r3, #0]
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d109      	bne.n	800ead2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800eabe:	4a38      	ldr	r2, [pc, #224]	; (800eba0 <inc_lock+0x118>)
 800eac0:	68fb      	ldr	r3, [r7, #12]
 800eac2:	011b      	lsls	r3, r3, #4
 800eac4:	4413      	add	r3, r2
 800eac6:	3308      	adds	r3, #8
 800eac8:	681a      	ldr	r2, [r3, #0]
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800eace:	429a      	cmp	r2, r3
 800ead0:	d006      	beq.n	800eae0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ead2:	68fb      	ldr	r3, [r7, #12]
 800ead4:	3301      	adds	r3, #1
 800ead6:	60fb      	str	r3, [r7, #12]
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	2b01      	cmp	r3, #1
 800eadc:	d9dc      	bls.n	800ea98 <inc_lock+0x10>
 800eade:	e000      	b.n	800eae2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800eae0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	2b02      	cmp	r3, #2
 800eae6:	d132      	bne.n	800eb4e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800eae8:	2300      	movs	r3, #0
 800eaea:	60fb      	str	r3, [r7, #12]
 800eaec:	e002      	b.n	800eaf4 <inc_lock+0x6c>
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	60fb      	str	r3, [r7, #12]
 800eaf4:	68fb      	ldr	r3, [r7, #12]
 800eaf6:	2b01      	cmp	r3, #1
 800eaf8:	d806      	bhi.n	800eb08 <inc_lock+0x80>
 800eafa:	4a29      	ldr	r2, [pc, #164]	; (800eba0 <inc_lock+0x118>)
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	011b      	lsls	r3, r3, #4
 800eb00:	4413      	add	r3, r2
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d1f2      	bne.n	800eaee <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	2b02      	cmp	r3, #2
 800eb0c:	d101      	bne.n	800eb12 <inc_lock+0x8a>
 800eb0e:	2300      	movs	r3, #0
 800eb10:	e040      	b.n	800eb94 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681a      	ldr	r2, [r3, #0]
 800eb16:	4922      	ldr	r1, [pc, #136]	; (800eba0 <inc_lock+0x118>)
 800eb18:	68fb      	ldr	r3, [r7, #12]
 800eb1a:	011b      	lsls	r3, r3, #4
 800eb1c:	440b      	add	r3, r1
 800eb1e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	689a      	ldr	r2, [r3, #8]
 800eb24:	491e      	ldr	r1, [pc, #120]	; (800eba0 <inc_lock+0x118>)
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	011b      	lsls	r3, r3, #4
 800eb2a:	440b      	add	r3, r1
 800eb2c:	3304      	adds	r3, #4
 800eb2e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	695a      	ldr	r2, [r3, #20]
 800eb34:	491a      	ldr	r1, [pc, #104]	; (800eba0 <inc_lock+0x118>)
 800eb36:	68fb      	ldr	r3, [r7, #12]
 800eb38:	011b      	lsls	r3, r3, #4
 800eb3a:	440b      	add	r3, r1
 800eb3c:	3308      	adds	r3, #8
 800eb3e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800eb40:	4a17      	ldr	r2, [pc, #92]	; (800eba0 <inc_lock+0x118>)
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	011b      	lsls	r3, r3, #4
 800eb46:	4413      	add	r3, r2
 800eb48:	330c      	adds	r3, #12
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800eb4e:	683b      	ldr	r3, [r7, #0]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d009      	beq.n	800eb68 <inc_lock+0xe0>
 800eb54:	4a12      	ldr	r2, [pc, #72]	; (800eba0 <inc_lock+0x118>)
 800eb56:	68fb      	ldr	r3, [r7, #12]
 800eb58:	011b      	lsls	r3, r3, #4
 800eb5a:	4413      	add	r3, r2
 800eb5c:	330c      	adds	r3, #12
 800eb5e:	881b      	ldrh	r3, [r3, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d001      	beq.n	800eb68 <inc_lock+0xe0>
 800eb64:	2300      	movs	r3, #0
 800eb66:	e015      	b.n	800eb94 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	d108      	bne.n	800eb80 <inc_lock+0xf8>
 800eb6e:	4a0c      	ldr	r2, [pc, #48]	; (800eba0 <inc_lock+0x118>)
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	011b      	lsls	r3, r3, #4
 800eb74:	4413      	add	r3, r2
 800eb76:	330c      	adds	r3, #12
 800eb78:	881b      	ldrh	r3, [r3, #0]
 800eb7a:	3301      	adds	r3, #1
 800eb7c:	b29a      	uxth	r2, r3
 800eb7e:	e001      	b.n	800eb84 <inc_lock+0xfc>
 800eb80:	f44f 7280 	mov.w	r2, #256	; 0x100
 800eb84:	4906      	ldr	r1, [pc, #24]	; (800eba0 <inc_lock+0x118>)
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	011b      	lsls	r3, r3, #4
 800eb8a:	440b      	add	r3, r1
 800eb8c:	330c      	adds	r3, #12
 800eb8e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	3301      	adds	r3, #1
}
 800eb94:	4618      	mov	r0, r3
 800eb96:	3714      	adds	r7, #20
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb9e:	4770      	bx	lr
 800eba0:	20000ad0 	.word	0x20000ad0

0800eba4 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800eba4:	b480      	push	{r7}
 800eba6:	b085      	sub	sp, #20
 800eba8:	af00      	add	r7, sp, #0
 800ebaa:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	3b01      	subs	r3, #1
 800ebb0:	607b      	str	r3, [r7, #4]
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	2b01      	cmp	r3, #1
 800ebb6:	d825      	bhi.n	800ec04 <dec_lock+0x60>
		n = Files[i].ctr;
 800ebb8:	4a17      	ldr	r2, [pc, #92]	; (800ec18 <dec_lock+0x74>)
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	011b      	lsls	r3, r3, #4
 800ebbe:	4413      	add	r3, r2
 800ebc0:	330c      	adds	r3, #12
 800ebc2:	881b      	ldrh	r3, [r3, #0]
 800ebc4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ebc6:	89fb      	ldrh	r3, [r7, #14]
 800ebc8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ebcc:	d101      	bne.n	800ebd2 <dec_lock+0x2e>
 800ebce:	2300      	movs	r3, #0
 800ebd0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ebd2:	89fb      	ldrh	r3, [r7, #14]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d002      	beq.n	800ebde <dec_lock+0x3a>
 800ebd8:	89fb      	ldrh	r3, [r7, #14]
 800ebda:	3b01      	subs	r3, #1
 800ebdc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ebde:	4a0e      	ldr	r2, [pc, #56]	; (800ec18 <dec_lock+0x74>)
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	011b      	lsls	r3, r3, #4
 800ebe4:	4413      	add	r3, r2
 800ebe6:	330c      	adds	r3, #12
 800ebe8:	89fa      	ldrh	r2, [r7, #14]
 800ebea:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ebec:	89fb      	ldrh	r3, [r7, #14]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d105      	bne.n	800ebfe <dec_lock+0x5a>
 800ebf2:	4a09      	ldr	r2, [pc, #36]	; (800ec18 <dec_lock+0x74>)
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	011b      	lsls	r3, r3, #4
 800ebf8:	4413      	add	r3, r2
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ebfe:	2300      	movs	r3, #0
 800ec00:	737b      	strb	r3, [r7, #13]
 800ec02:	e001      	b.n	800ec08 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ec04:	2302      	movs	r3, #2
 800ec06:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ec08:	7b7b      	ldrb	r3, [r7, #13]
}
 800ec0a:	4618      	mov	r0, r3
 800ec0c:	3714      	adds	r7, #20
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec14:	4770      	bx	lr
 800ec16:	bf00      	nop
 800ec18:	20000ad0 	.word	0x20000ad0

0800ec1c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ec1c:	b480      	push	{r7}
 800ec1e:	b085      	sub	sp, #20
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ec24:	2300      	movs	r3, #0
 800ec26:	60fb      	str	r3, [r7, #12]
 800ec28:	e010      	b.n	800ec4c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ec2a:	4a0d      	ldr	r2, [pc, #52]	; (800ec60 <clear_lock+0x44>)
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	011b      	lsls	r3, r3, #4
 800ec30:	4413      	add	r3, r2
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	687a      	ldr	r2, [r7, #4]
 800ec36:	429a      	cmp	r2, r3
 800ec38:	d105      	bne.n	800ec46 <clear_lock+0x2a>
 800ec3a:	4a09      	ldr	r2, [pc, #36]	; (800ec60 <clear_lock+0x44>)
 800ec3c:	68fb      	ldr	r3, [r7, #12]
 800ec3e:	011b      	lsls	r3, r3, #4
 800ec40:	4413      	add	r3, r2
 800ec42:	2200      	movs	r2, #0
 800ec44:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ec46:	68fb      	ldr	r3, [r7, #12]
 800ec48:	3301      	adds	r3, #1
 800ec4a:	60fb      	str	r3, [r7, #12]
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	2b01      	cmp	r3, #1
 800ec50:	d9eb      	bls.n	800ec2a <clear_lock+0xe>
	}
}
 800ec52:	bf00      	nop
 800ec54:	bf00      	nop
 800ec56:	3714      	adds	r7, #20
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec5e:	4770      	bx	lr
 800ec60:	20000ad0 	.word	0x20000ad0

0800ec64 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b086      	sub	sp, #24
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	78db      	ldrb	r3, [r3, #3]
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d034      	beq.n	800ece2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec7c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	7858      	ldrb	r0, [r3, #1]
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ec88:	2301      	movs	r3, #1
 800ec8a:	697a      	ldr	r2, [r7, #20]
 800ec8c:	f7ff fd40 	bl	800e710 <disk_write>
 800ec90:	4603      	mov	r3, r0
 800ec92:	2b00      	cmp	r3, #0
 800ec94:	d002      	beq.n	800ec9c <sync_window+0x38>
			res = FR_DISK_ERR;
 800ec96:	2301      	movs	r3, #1
 800ec98:	73fb      	strb	r3, [r7, #15]
 800ec9a:	e022      	b.n	800ece2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	2200      	movs	r2, #0
 800eca0:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca6:	697a      	ldr	r2, [r7, #20]
 800eca8:	1ad2      	subs	r2, r2, r3
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	69db      	ldr	r3, [r3, #28]
 800ecae:	429a      	cmp	r2, r3
 800ecb0:	d217      	bcs.n	800ece2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	789b      	ldrb	r3, [r3, #2]
 800ecb6:	613b      	str	r3, [r7, #16]
 800ecb8:	e010      	b.n	800ecdc <sync_window+0x78>
					wsect += fs->fsize;
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	69db      	ldr	r3, [r3, #28]
 800ecbe:	697a      	ldr	r2, [r7, #20]
 800ecc0:	4413      	add	r3, r2
 800ecc2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	7858      	ldrb	r0, [r3, #1]
 800ecc8:	687b      	ldr	r3, [r7, #4]
 800ecca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ecce:	2301      	movs	r3, #1
 800ecd0:	697a      	ldr	r2, [r7, #20]
 800ecd2:	f7ff fd1d 	bl	800e710 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ecd6:	693b      	ldr	r3, [r7, #16]
 800ecd8:	3b01      	subs	r3, #1
 800ecda:	613b      	str	r3, [r7, #16]
 800ecdc:	693b      	ldr	r3, [r7, #16]
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	d8eb      	bhi.n	800ecba <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ece2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ece4:	4618      	mov	r0, r3
 800ece6:	3718      	adds	r7, #24
 800ece8:	46bd      	mov	sp, r7
 800ecea:	bd80      	pop	{r7, pc}

0800ecec <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ecec:	b580      	push	{r7, lr}
 800ecee:	b084      	sub	sp, #16
 800ecf0:	af00      	add	r7, sp, #0
 800ecf2:	6078      	str	r0, [r7, #4]
 800ecf4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecfe:	683a      	ldr	r2, [r7, #0]
 800ed00:	429a      	cmp	r2, r3
 800ed02:	d01b      	beq.n	800ed3c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ed04:	6878      	ldr	r0, [r7, #4]
 800ed06:	f7ff ffad 	bl	800ec64 <sync_window>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ed0e:	7bfb      	ldrb	r3, [r7, #15]
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d113      	bne.n	800ed3c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	7858      	ldrb	r0, [r3, #1]
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ed1e:	2301      	movs	r3, #1
 800ed20:	683a      	ldr	r2, [r7, #0]
 800ed22:	f7ff fcd5 	bl	800e6d0 <disk_read>
 800ed26:	4603      	mov	r3, r0
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	d004      	beq.n	800ed36 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ed2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed30:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ed32:	2301      	movs	r3, #1
 800ed34:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	683a      	ldr	r2, [r7, #0]
 800ed3a:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800ed3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3710      	adds	r7, #16
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
	...

0800ed48 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b084      	sub	sp, #16
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	f7ff ff87 	bl	800ec64 <sync_window>
 800ed56:	4603      	mov	r3, r0
 800ed58:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ed5a:	7bfb      	ldrb	r3, [r7, #15]
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	d159      	bne.n	800ee14 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	781b      	ldrb	r3, [r3, #0]
 800ed64:	2b03      	cmp	r3, #3
 800ed66:	d149      	bne.n	800edfc <sync_fs+0xb4>
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	791b      	ldrb	r3, [r3, #4]
 800ed6c:	2b01      	cmp	r3, #1
 800ed6e:	d145      	bne.n	800edfc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	899b      	ldrh	r3, [r3, #12]
 800ed7a:	461a      	mov	r2, r3
 800ed7c:	2100      	movs	r1, #0
 800ed7e:	f7ff fda8 	bl	800e8d2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	3334      	adds	r3, #52	; 0x34
 800ed86:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ed8a:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800ed8e:	4618      	mov	r0, r3
 800ed90:	f7ff fd37 	bl	800e802 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	3334      	adds	r3, #52	; 0x34
 800ed98:	4921      	ldr	r1, [pc, #132]	; (800ee20 <sync_fs+0xd8>)
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	f7ff fd4c 	bl	800e838 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	3334      	adds	r3, #52	; 0x34
 800eda4:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800eda8:	491e      	ldr	r1, [pc, #120]	; (800ee24 <sync_fs+0xdc>)
 800edaa:	4618      	mov	r0, r3
 800edac:	f7ff fd44 	bl	800e838 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	3334      	adds	r3, #52	; 0x34
 800edb4:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	695b      	ldr	r3, [r3, #20]
 800edbc:	4619      	mov	r1, r3
 800edbe:	4610      	mov	r0, r2
 800edc0:	f7ff fd3a 	bl	800e838 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	3334      	adds	r3, #52	; 0x34
 800edc8:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	691b      	ldr	r3, [r3, #16]
 800edd0:	4619      	mov	r1, r3
 800edd2:	4610      	mov	r0, r2
 800edd4:	f7ff fd30 	bl	800e838 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	6a1b      	ldr	r3, [r3, #32]
 800eddc:	1c5a      	adds	r2, r3, #1
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	7858      	ldrb	r0, [r3, #1]
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800edf0:	2301      	movs	r3, #1
 800edf2:	f7ff fc8d 	bl	800e710 <disk_write>
			fs->fsi_flag = 0;
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	2200      	movs	r2, #0
 800edfa:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	785b      	ldrb	r3, [r3, #1]
 800ee00:	2200      	movs	r2, #0
 800ee02:	2100      	movs	r1, #0
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7ff fca3 	bl	800e750 <disk_ioctl>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d001      	beq.n	800ee14 <sync_fs+0xcc>
 800ee10:	2301      	movs	r3, #1
 800ee12:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ee14:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3710      	adds	r7, #16
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}
 800ee1e:	bf00      	nop
 800ee20:	41615252 	.word	0x41615252
 800ee24:	61417272 	.word	0x61417272

0800ee28 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ee28:	b480      	push	{r7}
 800ee2a:	b083      	sub	sp, #12
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ee32:	683b      	ldr	r3, [r7, #0]
 800ee34:	3b02      	subs	r3, #2
 800ee36:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	699b      	ldr	r3, [r3, #24]
 800ee3c:	3b02      	subs	r3, #2
 800ee3e:	683a      	ldr	r2, [r7, #0]
 800ee40:	429a      	cmp	r2, r3
 800ee42:	d301      	bcc.n	800ee48 <clust2sect+0x20>
 800ee44:	2300      	movs	r3, #0
 800ee46:	e008      	b.n	800ee5a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	895b      	ldrh	r3, [r3, #10]
 800ee4c:	461a      	mov	r2, r3
 800ee4e:	683b      	ldr	r3, [r7, #0]
 800ee50:	fb03 f202 	mul.w	r2, r3, r2
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee58:	4413      	add	r3, r2
}
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	370c      	adds	r7, #12
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee64:	4770      	bx	lr

0800ee66 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800ee66:	b580      	push	{r7, lr}
 800ee68:	b086      	sub	sp, #24
 800ee6a:	af00      	add	r7, sp, #0
 800ee6c:	6078      	str	r0, [r7, #4]
 800ee6e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800ee76:	683b      	ldr	r3, [r7, #0]
 800ee78:	2b01      	cmp	r3, #1
 800ee7a:	d904      	bls.n	800ee86 <get_fat+0x20>
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	699b      	ldr	r3, [r3, #24]
 800ee80:	683a      	ldr	r2, [r7, #0]
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d302      	bcc.n	800ee8c <get_fat+0x26>
		val = 1;	/* Internal error */
 800ee86:	2301      	movs	r3, #1
 800ee88:	617b      	str	r3, [r7, #20]
 800ee8a:	e0bb      	b.n	800f004 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ee8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ee90:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	2b03      	cmp	r3, #3
 800ee98:	f000 8083 	beq.w	800efa2 <get_fat+0x13c>
 800ee9c:	2b03      	cmp	r3, #3
 800ee9e:	f300 80a7 	bgt.w	800eff0 <get_fat+0x18a>
 800eea2:	2b01      	cmp	r3, #1
 800eea4:	d002      	beq.n	800eeac <get_fat+0x46>
 800eea6:	2b02      	cmp	r3, #2
 800eea8:	d056      	beq.n	800ef58 <get_fat+0xf2>
 800eeaa:	e0a1      	b.n	800eff0 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800eeac:	683b      	ldr	r3, [r7, #0]
 800eeae:	60fb      	str	r3, [r7, #12]
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	085b      	lsrs	r3, r3, #1
 800eeb4:	68fa      	ldr	r2, [r7, #12]
 800eeb6:	4413      	add	r3, r2
 800eeb8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eeba:	693b      	ldr	r3, [r7, #16]
 800eebc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eebe:	693b      	ldr	r3, [r7, #16]
 800eec0:	899b      	ldrh	r3, [r3, #12]
 800eec2:	4619      	mov	r1, r3
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	fbb3 f3f1 	udiv	r3, r3, r1
 800eeca:	4413      	add	r3, r2
 800eecc:	4619      	mov	r1, r3
 800eece:	6938      	ldr	r0, [r7, #16]
 800eed0:	f7ff ff0c 	bl	800ecec <move_window>
 800eed4:	4603      	mov	r3, r0
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	f040 808d 	bne.w	800eff6 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800eedc:	68fb      	ldr	r3, [r7, #12]
 800eede:	1c5a      	adds	r2, r3, #1
 800eee0:	60fa      	str	r2, [r7, #12]
 800eee2:	693a      	ldr	r2, [r7, #16]
 800eee4:	8992      	ldrh	r2, [r2, #12]
 800eee6:	fbb3 f1f2 	udiv	r1, r3, r2
 800eeea:	fb01 f202 	mul.w	r2, r1, r2
 800eeee:	1a9b      	subs	r3, r3, r2
 800eef0:	693a      	ldr	r2, [r7, #16]
 800eef2:	4413      	add	r3, r2
 800eef4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800eef8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eefe:	693b      	ldr	r3, [r7, #16]
 800ef00:	899b      	ldrh	r3, [r3, #12]
 800ef02:	4619      	mov	r1, r3
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef0a:	4413      	add	r3, r2
 800ef0c:	4619      	mov	r1, r3
 800ef0e:	6938      	ldr	r0, [r7, #16]
 800ef10:	f7ff feec 	bl	800ecec <move_window>
 800ef14:	4603      	mov	r3, r0
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d16f      	bne.n	800effa <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	899b      	ldrh	r3, [r3, #12]
 800ef1e:	461a      	mov	r2, r3
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef26:	fb01 f202 	mul.w	r2, r1, r2
 800ef2a:	1a9b      	subs	r3, r3, r2
 800ef2c:	693a      	ldr	r2, [r7, #16]
 800ef2e:	4413      	add	r3, r2
 800ef30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ef34:	021b      	lsls	r3, r3, #8
 800ef36:	461a      	mov	r2, r3
 800ef38:	68bb      	ldr	r3, [r7, #8]
 800ef3a:	4313      	orrs	r3, r2
 800ef3c:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	f003 0301 	and.w	r3, r3, #1
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d002      	beq.n	800ef4e <get_fat+0xe8>
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	091b      	lsrs	r3, r3, #4
 800ef4c:	e002      	b.n	800ef54 <get_fat+0xee>
 800ef4e:	68bb      	ldr	r3, [r7, #8]
 800ef50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ef54:	617b      	str	r3, [r7, #20]
			break;
 800ef56:	e055      	b.n	800f004 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef5c:	693b      	ldr	r3, [r7, #16]
 800ef5e:	899b      	ldrh	r3, [r3, #12]
 800ef60:	085b      	lsrs	r3, r3, #1
 800ef62:	b29b      	uxth	r3, r3
 800ef64:	4619      	mov	r1, r3
 800ef66:	683b      	ldr	r3, [r7, #0]
 800ef68:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef6c:	4413      	add	r3, r2
 800ef6e:	4619      	mov	r1, r3
 800ef70:	6938      	ldr	r0, [r7, #16]
 800ef72:	f7ff febb 	bl	800ecec <move_window>
 800ef76:	4603      	mov	r3, r0
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d140      	bne.n	800effe <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ef7c:	693b      	ldr	r3, [r7, #16]
 800ef7e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ef82:	683b      	ldr	r3, [r7, #0]
 800ef84:	005b      	lsls	r3, r3, #1
 800ef86:	693a      	ldr	r2, [r7, #16]
 800ef88:	8992      	ldrh	r2, [r2, #12]
 800ef8a:	fbb3 f0f2 	udiv	r0, r3, r2
 800ef8e:	fb00 f202 	mul.w	r2, r0, r2
 800ef92:	1a9b      	subs	r3, r3, r2
 800ef94:	440b      	add	r3, r1
 800ef96:	4618      	mov	r0, r3
 800ef98:	f7ff fbf8 	bl	800e78c <ld_word>
 800ef9c:	4603      	mov	r3, r0
 800ef9e:	617b      	str	r3, [r7, #20]
			break;
 800efa0:	e030      	b.n	800f004 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800efa2:	693b      	ldr	r3, [r7, #16]
 800efa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	899b      	ldrh	r3, [r3, #12]
 800efaa:	089b      	lsrs	r3, r3, #2
 800efac:	b29b      	uxth	r3, r3
 800efae:	4619      	mov	r1, r3
 800efb0:	683b      	ldr	r3, [r7, #0]
 800efb2:	fbb3 f3f1 	udiv	r3, r3, r1
 800efb6:	4413      	add	r3, r2
 800efb8:	4619      	mov	r1, r3
 800efba:	6938      	ldr	r0, [r7, #16]
 800efbc:	f7ff fe96 	bl	800ecec <move_window>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d11d      	bne.n	800f002 <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	009b      	lsls	r3, r3, #2
 800efd0:	693a      	ldr	r2, [r7, #16]
 800efd2:	8992      	ldrh	r2, [r2, #12]
 800efd4:	fbb3 f0f2 	udiv	r0, r3, r2
 800efd8:	fb00 f202 	mul.w	r2, r0, r2
 800efdc:	1a9b      	subs	r3, r3, r2
 800efde:	440b      	add	r3, r1
 800efe0:	4618      	mov	r0, r3
 800efe2:	f7ff fbeb 	bl	800e7bc <ld_dword>
 800efe6:	4603      	mov	r3, r0
 800efe8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800efec:	617b      	str	r3, [r7, #20]
			break;
 800efee:	e009      	b.n	800f004 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800eff0:	2301      	movs	r3, #1
 800eff2:	617b      	str	r3, [r7, #20]
 800eff4:	e006      	b.n	800f004 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eff6:	bf00      	nop
 800eff8:	e004      	b.n	800f004 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800effa:	bf00      	nop
 800effc:	e002      	b.n	800f004 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800effe:	bf00      	nop
 800f000:	e000      	b.n	800f004 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f002:	bf00      	nop
		}
	}

	return val;
 800f004:	697b      	ldr	r3, [r7, #20]
}
 800f006:	4618      	mov	r0, r3
 800f008:	3718      	adds	r7, #24
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}

0800f00e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f00e:	b590      	push	{r4, r7, lr}
 800f010:	b089      	sub	sp, #36	; 0x24
 800f012:	af00      	add	r7, sp, #0
 800f014:	60f8      	str	r0, [r7, #12]
 800f016:	60b9      	str	r1, [r7, #8]
 800f018:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f01a:	2302      	movs	r3, #2
 800f01c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	2b01      	cmp	r3, #1
 800f022:	f240 8109 	bls.w	800f238 <put_fat+0x22a>
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	699b      	ldr	r3, [r3, #24]
 800f02a:	68ba      	ldr	r2, [r7, #8]
 800f02c:	429a      	cmp	r2, r3
 800f02e:	f080 8103 	bcs.w	800f238 <put_fat+0x22a>
		switch (fs->fs_type) {
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	781b      	ldrb	r3, [r3, #0]
 800f036:	2b03      	cmp	r3, #3
 800f038:	f000 80b6 	beq.w	800f1a8 <put_fat+0x19a>
 800f03c:	2b03      	cmp	r3, #3
 800f03e:	f300 80fb 	bgt.w	800f238 <put_fat+0x22a>
 800f042:	2b01      	cmp	r3, #1
 800f044:	d003      	beq.n	800f04e <put_fat+0x40>
 800f046:	2b02      	cmp	r3, #2
 800f048:	f000 8083 	beq.w	800f152 <put_fat+0x144>
 800f04c:	e0f4      	b.n	800f238 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f04e:	68bb      	ldr	r3, [r7, #8]
 800f050:	61bb      	str	r3, [r7, #24]
 800f052:	69bb      	ldr	r3, [r7, #24]
 800f054:	085b      	lsrs	r3, r3, #1
 800f056:	69ba      	ldr	r2, [r7, #24]
 800f058:	4413      	add	r3, r2
 800f05a:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f060:	68fb      	ldr	r3, [r7, #12]
 800f062:	899b      	ldrh	r3, [r3, #12]
 800f064:	4619      	mov	r1, r3
 800f066:	69bb      	ldr	r3, [r7, #24]
 800f068:	fbb3 f3f1 	udiv	r3, r3, r1
 800f06c:	4413      	add	r3, r2
 800f06e:	4619      	mov	r1, r3
 800f070:	68f8      	ldr	r0, [r7, #12]
 800f072:	f7ff fe3b 	bl	800ecec <move_window>
 800f076:	4603      	mov	r3, r0
 800f078:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f07a:	7ffb      	ldrb	r3, [r7, #31]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	f040 80d4 	bne.w	800f22a <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f088:	69bb      	ldr	r3, [r7, #24]
 800f08a:	1c5a      	adds	r2, r3, #1
 800f08c:	61ba      	str	r2, [r7, #24]
 800f08e:	68fa      	ldr	r2, [r7, #12]
 800f090:	8992      	ldrh	r2, [r2, #12]
 800f092:	fbb3 f0f2 	udiv	r0, r3, r2
 800f096:	fb00 f202 	mul.w	r2, r0, r2
 800f09a:	1a9b      	subs	r3, r3, r2
 800f09c:	440b      	add	r3, r1
 800f09e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	f003 0301 	and.w	r3, r3, #1
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d00d      	beq.n	800f0c6 <put_fat+0xb8>
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	b25b      	sxtb	r3, r3
 800f0b0:	f003 030f 	and.w	r3, r3, #15
 800f0b4:	b25a      	sxtb	r2, r3
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	b2db      	uxtb	r3, r3
 800f0ba:	011b      	lsls	r3, r3, #4
 800f0bc:	b25b      	sxtb	r3, r3
 800f0be:	4313      	orrs	r3, r2
 800f0c0:	b25b      	sxtb	r3, r3
 800f0c2:	b2db      	uxtb	r3, r3
 800f0c4:	e001      	b.n	800f0ca <put_fat+0xbc>
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	697a      	ldr	r2, [r7, #20]
 800f0cc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f0ce:	68fb      	ldr	r3, [r7, #12]
 800f0d0:	2201      	movs	r2, #1
 800f0d2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	899b      	ldrh	r3, [r3, #12]
 800f0dc:	4619      	mov	r1, r3
 800f0de:	69bb      	ldr	r3, [r7, #24]
 800f0e0:	fbb3 f3f1 	udiv	r3, r3, r1
 800f0e4:	4413      	add	r3, r2
 800f0e6:	4619      	mov	r1, r3
 800f0e8:	68f8      	ldr	r0, [r7, #12]
 800f0ea:	f7ff fdff 	bl	800ecec <move_window>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f0f2:	7ffb      	ldrb	r3, [r7, #31]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	f040 809a 	bne.w	800f22e <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	899b      	ldrh	r3, [r3, #12]
 800f104:	461a      	mov	r2, r3
 800f106:	69bb      	ldr	r3, [r7, #24]
 800f108:	fbb3 f0f2 	udiv	r0, r3, r2
 800f10c:	fb00 f202 	mul.w	r2, r0, r2
 800f110:	1a9b      	subs	r3, r3, r2
 800f112:	440b      	add	r3, r1
 800f114:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f116:	68bb      	ldr	r3, [r7, #8]
 800f118:	f003 0301 	and.w	r3, r3, #1
 800f11c:	2b00      	cmp	r3, #0
 800f11e:	d003      	beq.n	800f128 <put_fat+0x11a>
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	091b      	lsrs	r3, r3, #4
 800f124:	b2db      	uxtb	r3, r3
 800f126:	e00e      	b.n	800f146 <put_fat+0x138>
 800f128:	697b      	ldr	r3, [r7, #20]
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	b25b      	sxtb	r3, r3
 800f12e:	f023 030f 	bic.w	r3, r3, #15
 800f132:	b25a      	sxtb	r2, r3
 800f134:	687b      	ldr	r3, [r7, #4]
 800f136:	0a1b      	lsrs	r3, r3, #8
 800f138:	b25b      	sxtb	r3, r3
 800f13a:	f003 030f 	and.w	r3, r3, #15
 800f13e:	b25b      	sxtb	r3, r3
 800f140:	4313      	orrs	r3, r2
 800f142:	b25b      	sxtb	r3, r3
 800f144:	b2db      	uxtb	r3, r3
 800f146:	697a      	ldr	r2, [r7, #20]
 800f148:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	2201      	movs	r2, #1
 800f14e:	70da      	strb	r2, [r3, #3]
			break;
 800f150:	e072      	b.n	800f238 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	899b      	ldrh	r3, [r3, #12]
 800f15a:	085b      	lsrs	r3, r3, #1
 800f15c:	b29b      	uxth	r3, r3
 800f15e:	4619      	mov	r1, r3
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	fbb3 f3f1 	udiv	r3, r3, r1
 800f166:	4413      	add	r3, r2
 800f168:	4619      	mov	r1, r3
 800f16a:	68f8      	ldr	r0, [r7, #12]
 800f16c:	f7ff fdbe 	bl	800ecec <move_window>
 800f170:	4603      	mov	r3, r0
 800f172:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f174:	7ffb      	ldrb	r3, [r7, #31]
 800f176:	2b00      	cmp	r3, #0
 800f178:	d15b      	bne.n	800f232 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	005b      	lsls	r3, r3, #1
 800f184:	68fa      	ldr	r2, [r7, #12]
 800f186:	8992      	ldrh	r2, [r2, #12]
 800f188:	fbb3 f0f2 	udiv	r0, r3, r2
 800f18c:	fb00 f202 	mul.w	r2, r0, r2
 800f190:	1a9b      	subs	r3, r3, r2
 800f192:	440b      	add	r3, r1
 800f194:	687a      	ldr	r2, [r7, #4]
 800f196:	b292      	uxth	r2, r2
 800f198:	4611      	mov	r1, r2
 800f19a:	4618      	mov	r0, r3
 800f19c:	f7ff fb31 	bl	800e802 <st_word>
			fs->wflag = 1;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	2201      	movs	r2, #1
 800f1a4:	70da      	strb	r2, [r3, #3]
			break;
 800f1a6:	e047      	b.n	800f238 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f1a8:	68fb      	ldr	r3, [r7, #12]
 800f1aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1ac:	68fb      	ldr	r3, [r7, #12]
 800f1ae:	899b      	ldrh	r3, [r3, #12]
 800f1b0:	089b      	lsrs	r3, r3, #2
 800f1b2:	b29b      	uxth	r3, r3
 800f1b4:	4619      	mov	r1, r3
 800f1b6:	68bb      	ldr	r3, [r7, #8]
 800f1b8:	fbb3 f3f1 	udiv	r3, r3, r1
 800f1bc:	4413      	add	r3, r2
 800f1be:	4619      	mov	r1, r3
 800f1c0:	68f8      	ldr	r0, [r7, #12]
 800f1c2:	f7ff fd93 	bl	800ecec <move_window>
 800f1c6:	4603      	mov	r3, r0
 800f1c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f1ca:	7ffb      	ldrb	r3, [r7, #31]
 800f1cc:	2b00      	cmp	r3, #0
 800f1ce:	d132      	bne.n	800f236 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	009b      	lsls	r3, r3, #2
 800f1e0:	68fa      	ldr	r2, [r7, #12]
 800f1e2:	8992      	ldrh	r2, [r2, #12]
 800f1e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800f1e8:	fb00 f202 	mul.w	r2, r0, r2
 800f1ec:	1a9b      	subs	r3, r3, r2
 800f1ee:	440b      	add	r3, r1
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f7ff fae3 	bl	800e7bc <ld_dword>
 800f1f6:	4603      	mov	r3, r0
 800f1f8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f1fc:	4323      	orrs	r3, r4
 800f1fe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f206:	68bb      	ldr	r3, [r7, #8]
 800f208:	009b      	lsls	r3, r3, #2
 800f20a:	68fa      	ldr	r2, [r7, #12]
 800f20c:	8992      	ldrh	r2, [r2, #12]
 800f20e:	fbb3 f0f2 	udiv	r0, r3, r2
 800f212:	fb00 f202 	mul.w	r2, r0, r2
 800f216:	1a9b      	subs	r3, r3, r2
 800f218:	440b      	add	r3, r1
 800f21a:	6879      	ldr	r1, [r7, #4]
 800f21c:	4618      	mov	r0, r3
 800f21e:	f7ff fb0b 	bl	800e838 <st_dword>
			fs->wflag = 1;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	2201      	movs	r2, #1
 800f226:	70da      	strb	r2, [r3, #3]
			break;
 800f228:	e006      	b.n	800f238 <put_fat+0x22a>
			if (res != FR_OK) break;
 800f22a:	bf00      	nop
 800f22c:	e004      	b.n	800f238 <put_fat+0x22a>
			if (res != FR_OK) break;
 800f22e:	bf00      	nop
 800f230:	e002      	b.n	800f238 <put_fat+0x22a>
			if (res != FR_OK) break;
 800f232:	bf00      	nop
 800f234:	e000      	b.n	800f238 <put_fat+0x22a>
			if (res != FR_OK) break;
 800f236:	bf00      	nop
		}
	}
	return res;
 800f238:	7ffb      	ldrb	r3, [r7, #31]
}
 800f23a:	4618      	mov	r0, r3
 800f23c:	3724      	adds	r7, #36	; 0x24
 800f23e:	46bd      	mov	sp, r7
 800f240:	bd90      	pop	{r4, r7, pc}

0800f242 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f242:	b580      	push	{r7, lr}
 800f244:	b088      	sub	sp, #32
 800f246:	af00      	add	r7, sp, #0
 800f248:	60f8      	str	r0, [r7, #12]
 800f24a:	60b9      	str	r1, [r7, #8]
 800f24c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f24e:	2300      	movs	r3, #0
 800f250:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f252:	68fb      	ldr	r3, [r7, #12]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d904      	bls.n	800f268 <remove_chain+0x26>
 800f25e:	69bb      	ldr	r3, [r7, #24]
 800f260:	699b      	ldr	r3, [r3, #24]
 800f262:	68ba      	ldr	r2, [r7, #8]
 800f264:	429a      	cmp	r2, r3
 800f266:	d301      	bcc.n	800f26c <remove_chain+0x2a>
 800f268:	2302      	movs	r3, #2
 800f26a:	e04b      	b.n	800f304 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d00c      	beq.n	800f28c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f272:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f276:	6879      	ldr	r1, [r7, #4]
 800f278:	69b8      	ldr	r0, [r7, #24]
 800f27a:	f7ff fec8 	bl	800f00e <put_fat>
 800f27e:	4603      	mov	r3, r0
 800f280:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f282:	7ffb      	ldrb	r3, [r7, #31]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d001      	beq.n	800f28c <remove_chain+0x4a>
 800f288:	7ffb      	ldrb	r3, [r7, #31]
 800f28a:	e03b      	b.n	800f304 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f28c:	68b9      	ldr	r1, [r7, #8]
 800f28e:	68f8      	ldr	r0, [r7, #12]
 800f290:	f7ff fde9 	bl	800ee66 <get_fat>
 800f294:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	2b00      	cmp	r3, #0
 800f29a:	d031      	beq.n	800f300 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f29c:	697b      	ldr	r3, [r7, #20]
 800f29e:	2b01      	cmp	r3, #1
 800f2a0:	d101      	bne.n	800f2a6 <remove_chain+0x64>
 800f2a2:	2302      	movs	r3, #2
 800f2a4:	e02e      	b.n	800f304 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f2a6:	697b      	ldr	r3, [r7, #20]
 800f2a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f2ac:	d101      	bne.n	800f2b2 <remove_chain+0x70>
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	e028      	b.n	800f304 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f2b2:	2200      	movs	r2, #0
 800f2b4:	68b9      	ldr	r1, [r7, #8]
 800f2b6:	69b8      	ldr	r0, [r7, #24]
 800f2b8:	f7ff fea9 	bl	800f00e <put_fat>
 800f2bc:	4603      	mov	r3, r0
 800f2be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f2c0:	7ffb      	ldrb	r3, [r7, #31]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d001      	beq.n	800f2ca <remove_chain+0x88>
 800f2c6:	7ffb      	ldrb	r3, [r7, #31]
 800f2c8:	e01c      	b.n	800f304 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f2ca:	69bb      	ldr	r3, [r7, #24]
 800f2cc:	695a      	ldr	r2, [r3, #20]
 800f2ce:	69bb      	ldr	r3, [r7, #24]
 800f2d0:	699b      	ldr	r3, [r3, #24]
 800f2d2:	3b02      	subs	r3, #2
 800f2d4:	429a      	cmp	r2, r3
 800f2d6:	d20b      	bcs.n	800f2f0 <remove_chain+0xae>
			fs->free_clst++;
 800f2d8:	69bb      	ldr	r3, [r7, #24]
 800f2da:	695b      	ldr	r3, [r3, #20]
 800f2dc:	1c5a      	adds	r2, r3, #1
 800f2de:	69bb      	ldr	r3, [r7, #24]
 800f2e0:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f2e2:	69bb      	ldr	r3, [r7, #24]
 800f2e4:	791b      	ldrb	r3, [r3, #4]
 800f2e6:	f043 0301 	orr.w	r3, r3, #1
 800f2ea:	b2da      	uxtb	r2, r3
 800f2ec:	69bb      	ldr	r3, [r7, #24]
 800f2ee:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f2f0:	697b      	ldr	r3, [r7, #20]
 800f2f2:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f2f4:	69bb      	ldr	r3, [r7, #24]
 800f2f6:	699b      	ldr	r3, [r3, #24]
 800f2f8:	68ba      	ldr	r2, [r7, #8]
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d3c6      	bcc.n	800f28c <remove_chain+0x4a>
 800f2fe:	e000      	b.n	800f302 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f300:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f302:	2300      	movs	r3, #0
}
 800f304:	4618      	mov	r0, r3
 800f306:	3720      	adds	r7, #32
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f30c:	b580      	push	{r7, lr}
 800f30e:	b088      	sub	sp, #32
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d10d      	bne.n	800f33e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f322:	693b      	ldr	r3, [r7, #16]
 800f324:	691b      	ldr	r3, [r3, #16]
 800f326:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f328:	69bb      	ldr	r3, [r7, #24]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d004      	beq.n	800f338 <create_chain+0x2c>
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	699b      	ldr	r3, [r3, #24]
 800f332:	69ba      	ldr	r2, [r7, #24]
 800f334:	429a      	cmp	r2, r3
 800f336:	d31b      	bcc.n	800f370 <create_chain+0x64>
 800f338:	2301      	movs	r3, #1
 800f33a:	61bb      	str	r3, [r7, #24]
 800f33c:	e018      	b.n	800f370 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f33e:	6839      	ldr	r1, [r7, #0]
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f7ff fd90 	bl	800ee66 <get_fat>
 800f346:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f348:	68fb      	ldr	r3, [r7, #12]
 800f34a:	2b01      	cmp	r3, #1
 800f34c:	d801      	bhi.n	800f352 <create_chain+0x46>
 800f34e:	2301      	movs	r3, #1
 800f350:	e070      	b.n	800f434 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f352:	68fb      	ldr	r3, [r7, #12]
 800f354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f358:	d101      	bne.n	800f35e <create_chain+0x52>
 800f35a:	68fb      	ldr	r3, [r7, #12]
 800f35c:	e06a      	b.n	800f434 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	699b      	ldr	r3, [r3, #24]
 800f362:	68fa      	ldr	r2, [r7, #12]
 800f364:	429a      	cmp	r2, r3
 800f366:	d201      	bcs.n	800f36c <create_chain+0x60>
 800f368:	68fb      	ldr	r3, [r7, #12]
 800f36a:	e063      	b.n	800f434 <create_chain+0x128>
		scl = clst;
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f370:	69bb      	ldr	r3, [r7, #24]
 800f372:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f374:	69fb      	ldr	r3, [r7, #28]
 800f376:	3301      	adds	r3, #1
 800f378:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f37a:	693b      	ldr	r3, [r7, #16]
 800f37c:	699b      	ldr	r3, [r3, #24]
 800f37e:	69fa      	ldr	r2, [r7, #28]
 800f380:	429a      	cmp	r2, r3
 800f382:	d307      	bcc.n	800f394 <create_chain+0x88>
				ncl = 2;
 800f384:	2302      	movs	r3, #2
 800f386:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f388:	69fa      	ldr	r2, [r7, #28]
 800f38a:	69bb      	ldr	r3, [r7, #24]
 800f38c:	429a      	cmp	r2, r3
 800f38e:	d901      	bls.n	800f394 <create_chain+0x88>
 800f390:	2300      	movs	r3, #0
 800f392:	e04f      	b.n	800f434 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f394:	69f9      	ldr	r1, [r7, #28]
 800f396:	6878      	ldr	r0, [r7, #4]
 800f398:	f7ff fd65 	bl	800ee66 <get_fat>
 800f39c:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d00e      	beq.n	800f3c2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2b01      	cmp	r3, #1
 800f3a8:	d003      	beq.n	800f3b2 <create_chain+0xa6>
 800f3aa:	68fb      	ldr	r3, [r7, #12]
 800f3ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3b0:	d101      	bne.n	800f3b6 <create_chain+0xaa>
 800f3b2:	68fb      	ldr	r3, [r7, #12]
 800f3b4:	e03e      	b.n	800f434 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f3b6:	69fa      	ldr	r2, [r7, #28]
 800f3b8:	69bb      	ldr	r3, [r7, #24]
 800f3ba:	429a      	cmp	r2, r3
 800f3bc:	d1da      	bne.n	800f374 <create_chain+0x68>
 800f3be:	2300      	movs	r3, #0
 800f3c0:	e038      	b.n	800f434 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f3c2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f3c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f3c8:	69f9      	ldr	r1, [r7, #28]
 800f3ca:	6938      	ldr	r0, [r7, #16]
 800f3cc:	f7ff fe1f 	bl	800f00e <put_fat>
 800f3d0:	4603      	mov	r3, r0
 800f3d2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f3d4:	7dfb      	ldrb	r3, [r7, #23]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d109      	bne.n	800f3ee <create_chain+0xe2>
 800f3da:	683b      	ldr	r3, [r7, #0]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d006      	beq.n	800f3ee <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f3e0:	69fa      	ldr	r2, [r7, #28]
 800f3e2:	6839      	ldr	r1, [r7, #0]
 800f3e4:	6938      	ldr	r0, [r7, #16]
 800f3e6:	f7ff fe12 	bl	800f00e <put_fat>
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f3ee:	7dfb      	ldrb	r3, [r7, #23]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d116      	bne.n	800f422 <create_chain+0x116>
		fs->last_clst = ncl;
 800f3f4:	693b      	ldr	r3, [r7, #16]
 800f3f6:	69fa      	ldr	r2, [r7, #28]
 800f3f8:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f3fa:	693b      	ldr	r3, [r7, #16]
 800f3fc:	695a      	ldr	r2, [r3, #20]
 800f3fe:	693b      	ldr	r3, [r7, #16]
 800f400:	699b      	ldr	r3, [r3, #24]
 800f402:	3b02      	subs	r3, #2
 800f404:	429a      	cmp	r2, r3
 800f406:	d804      	bhi.n	800f412 <create_chain+0x106>
 800f408:	693b      	ldr	r3, [r7, #16]
 800f40a:	695b      	ldr	r3, [r3, #20]
 800f40c:	1e5a      	subs	r2, r3, #1
 800f40e:	693b      	ldr	r3, [r7, #16]
 800f410:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f412:	693b      	ldr	r3, [r7, #16]
 800f414:	791b      	ldrb	r3, [r3, #4]
 800f416:	f043 0301 	orr.w	r3, r3, #1
 800f41a:	b2da      	uxtb	r2, r3
 800f41c:	693b      	ldr	r3, [r7, #16]
 800f41e:	711a      	strb	r2, [r3, #4]
 800f420:	e007      	b.n	800f432 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f422:	7dfb      	ldrb	r3, [r7, #23]
 800f424:	2b01      	cmp	r3, #1
 800f426:	d102      	bne.n	800f42e <create_chain+0x122>
 800f428:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f42c:	e000      	b.n	800f430 <create_chain+0x124>
 800f42e:	2301      	movs	r3, #1
 800f430:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f432:	69fb      	ldr	r3, [r7, #28]
}
 800f434:	4618      	mov	r0, r3
 800f436:	3720      	adds	r7, #32
 800f438:	46bd      	mov	sp, r7
 800f43a:	bd80      	pop	{r7, pc}

0800f43c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f43c:	b480      	push	{r7}
 800f43e:	b087      	sub	sp, #28
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
 800f444:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f450:	3304      	adds	r3, #4
 800f452:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	899b      	ldrh	r3, [r3, #12]
 800f458:	461a      	mov	r2, r3
 800f45a:	683b      	ldr	r3, [r7, #0]
 800f45c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f460:	68fa      	ldr	r2, [r7, #12]
 800f462:	8952      	ldrh	r2, [r2, #10]
 800f464:	fbb3 f3f2 	udiv	r3, r3, r2
 800f468:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	1d1a      	adds	r2, r3, #4
 800f46e:	613a      	str	r2, [r7, #16]
 800f470:	681b      	ldr	r3, [r3, #0]
 800f472:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f474:	68bb      	ldr	r3, [r7, #8]
 800f476:	2b00      	cmp	r3, #0
 800f478:	d101      	bne.n	800f47e <clmt_clust+0x42>
 800f47a:	2300      	movs	r3, #0
 800f47c:	e010      	b.n	800f4a0 <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800f47e:	697a      	ldr	r2, [r7, #20]
 800f480:	68bb      	ldr	r3, [r7, #8]
 800f482:	429a      	cmp	r2, r3
 800f484:	d307      	bcc.n	800f496 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800f486:	697a      	ldr	r2, [r7, #20]
 800f488:	68bb      	ldr	r3, [r7, #8]
 800f48a:	1ad3      	subs	r3, r2, r3
 800f48c:	617b      	str	r3, [r7, #20]
 800f48e:	693b      	ldr	r3, [r7, #16]
 800f490:	3304      	adds	r3, #4
 800f492:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f494:	e7e9      	b.n	800f46a <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800f496:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f498:	693b      	ldr	r3, [r7, #16]
 800f49a:	681a      	ldr	r2, [r3, #0]
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	4413      	add	r3, r2
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	371c      	adds	r7, #28
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr

0800f4ac <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b086      	sub	sp, #24
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f4c2:	d204      	bcs.n	800f4ce <dir_sdi+0x22>
 800f4c4:	683b      	ldr	r3, [r7, #0]
 800f4c6:	f003 031f 	and.w	r3, r3, #31
 800f4ca:	2b00      	cmp	r3, #0
 800f4cc:	d001      	beq.n	800f4d2 <dir_sdi+0x26>
		return FR_INT_ERR;
 800f4ce:	2302      	movs	r3, #2
 800f4d0:	e071      	b.n	800f5b6 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	683a      	ldr	r2, [r7, #0]
 800f4d6:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	689b      	ldr	r3, [r3, #8]
 800f4dc:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f4de:	697b      	ldr	r3, [r7, #20]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d106      	bne.n	800f4f2 <dir_sdi+0x46>
 800f4e4:	693b      	ldr	r3, [r7, #16]
 800f4e6:	781b      	ldrb	r3, [r3, #0]
 800f4e8:	2b02      	cmp	r3, #2
 800f4ea:	d902      	bls.n	800f4f2 <dir_sdi+0x46>
		clst = fs->dirbase;
 800f4ec:	693b      	ldr	r3, [r7, #16]
 800f4ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f4f0:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f4f2:	697b      	ldr	r3, [r7, #20]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d10c      	bne.n	800f512 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f4f8:	683b      	ldr	r3, [r7, #0]
 800f4fa:	095b      	lsrs	r3, r3, #5
 800f4fc:	693a      	ldr	r2, [r7, #16]
 800f4fe:	8912      	ldrh	r2, [r2, #8]
 800f500:	4293      	cmp	r3, r2
 800f502:	d301      	bcc.n	800f508 <dir_sdi+0x5c>
 800f504:	2302      	movs	r3, #2
 800f506:	e056      	b.n	800f5b6 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f508:	693b      	ldr	r3, [r7, #16]
 800f50a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	61da      	str	r2, [r3, #28]
 800f510:	e02d      	b.n	800f56e <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f512:	693b      	ldr	r3, [r7, #16]
 800f514:	895b      	ldrh	r3, [r3, #10]
 800f516:	461a      	mov	r2, r3
 800f518:	693b      	ldr	r3, [r7, #16]
 800f51a:	899b      	ldrh	r3, [r3, #12]
 800f51c:	fb02 f303 	mul.w	r3, r2, r3
 800f520:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f522:	e019      	b.n	800f558 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	6979      	ldr	r1, [r7, #20]
 800f528:	4618      	mov	r0, r3
 800f52a:	f7ff fc9c 	bl	800ee66 <get_fat>
 800f52e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f530:	697b      	ldr	r3, [r7, #20]
 800f532:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f536:	d101      	bne.n	800f53c <dir_sdi+0x90>
 800f538:	2301      	movs	r3, #1
 800f53a:	e03c      	b.n	800f5b6 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f53c:	697b      	ldr	r3, [r7, #20]
 800f53e:	2b01      	cmp	r3, #1
 800f540:	d904      	bls.n	800f54c <dir_sdi+0xa0>
 800f542:	693b      	ldr	r3, [r7, #16]
 800f544:	699b      	ldr	r3, [r3, #24]
 800f546:	697a      	ldr	r2, [r7, #20]
 800f548:	429a      	cmp	r2, r3
 800f54a:	d301      	bcc.n	800f550 <dir_sdi+0xa4>
 800f54c:	2302      	movs	r3, #2
 800f54e:	e032      	b.n	800f5b6 <dir_sdi+0x10a>
			ofs -= csz;
 800f550:	683a      	ldr	r2, [r7, #0]
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	1ad3      	subs	r3, r2, r3
 800f556:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f558:	683a      	ldr	r2, [r7, #0]
 800f55a:	68fb      	ldr	r3, [r7, #12]
 800f55c:	429a      	cmp	r2, r3
 800f55e:	d2e1      	bcs.n	800f524 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f560:	6979      	ldr	r1, [r7, #20]
 800f562:	6938      	ldr	r0, [r7, #16]
 800f564:	f7ff fc60 	bl	800ee28 <clust2sect>
 800f568:	4602      	mov	r2, r0
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	697a      	ldr	r2, [r7, #20]
 800f572:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	69db      	ldr	r3, [r3, #28]
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d101      	bne.n	800f580 <dir_sdi+0xd4>
 800f57c:	2302      	movs	r3, #2
 800f57e:	e01a      	b.n	800f5b6 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	69da      	ldr	r2, [r3, #28]
 800f584:	693b      	ldr	r3, [r7, #16]
 800f586:	899b      	ldrh	r3, [r3, #12]
 800f588:	4619      	mov	r1, r3
 800f58a:	683b      	ldr	r3, [r7, #0]
 800f58c:	fbb3 f3f1 	udiv	r3, r3, r1
 800f590:	441a      	add	r2, r3
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f596:	693b      	ldr	r3, [r7, #16]
 800f598:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	899b      	ldrh	r3, [r3, #12]
 800f5a0:	461a      	mov	r2, r3
 800f5a2:	683b      	ldr	r3, [r7, #0]
 800f5a4:	fbb3 f0f2 	udiv	r0, r3, r2
 800f5a8:	fb00 f202 	mul.w	r2, r0, r2
 800f5ac:	1a9b      	subs	r3, r3, r2
 800f5ae:	18ca      	adds	r2, r1, r3
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f5b4:	2300      	movs	r3, #0
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3718      	adds	r7, #24
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}

0800f5be <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f5be:	b580      	push	{r7, lr}
 800f5c0:	b086      	sub	sp, #24
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	6078      	str	r0, [r7, #4]
 800f5c6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	681b      	ldr	r3, [r3, #0]
 800f5cc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	695b      	ldr	r3, [r3, #20]
 800f5d2:	3320      	adds	r3, #32
 800f5d4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f5d6:	687b      	ldr	r3, [r7, #4]
 800f5d8:	69db      	ldr	r3, [r3, #28]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d003      	beq.n	800f5e6 <dir_next+0x28>
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f5e4:	d301      	bcc.n	800f5ea <dir_next+0x2c>
 800f5e6:	2304      	movs	r3, #4
 800f5e8:	e0bb      	b.n	800f762 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	899b      	ldrh	r3, [r3, #12]
 800f5ee:	461a      	mov	r2, r3
 800f5f0:	68bb      	ldr	r3, [r7, #8]
 800f5f2:	fbb3 f1f2 	udiv	r1, r3, r2
 800f5f6:	fb01 f202 	mul.w	r2, r1, r2
 800f5fa:	1a9b      	subs	r3, r3, r2
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	f040 809d 	bne.w	800f73c <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	69db      	ldr	r3, [r3, #28]
 800f606:	1c5a      	adds	r2, r3, #1
 800f608:	687b      	ldr	r3, [r7, #4]
 800f60a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	699b      	ldr	r3, [r3, #24]
 800f610:	2b00      	cmp	r3, #0
 800f612:	d10b      	bne.n	800f62c <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	095b      	lsrs	r3, r3, #5
 800f618:	68fa      	ldr	r2, [r7, #12]
 800f61a:	8912      	ldrh	r2, [r2, #8]
 800f61c:	4293      	cmp	r3, r2
 800f61e:	f0c0 808d 	bcc.w	800f73c <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2200      	movs	r2, #0
 800f626:	61da      	str	r2, [r3, #28]
 800f628:	2304      	movs	r3, #4
 800f62a:	e09a      	b.n	800f762 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	899b      	ldrh	r3, [r3, #12]
 800f630:	461a      	mov	r2, r3
 800f632:	68bb      	ldr	r3, [r7, #8]
 800f634:	fbb3 f3f2 	udiv	r3, r3, r2
 800f638:	68fa      	ldr	r2, [r7, #12]
 800f63a:	8952      	ldrh	r2, [r2, #10]
 800f63c:	3a01      	subs	r2, #1
 800f63e:	4013      	ands	r3, r2
 800f640:	2b00      	cmp	r3, #0
 800f642:	d17b      	bne.n	800f73c <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f644:	687a      	ldr	r2, [r7, #4]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	699b      	ldr	r3, [r3, #24]
 800f64a:	4619      	mov	r1, r3
 800f64c:	4610      	mov	r0, r2
 800f64e:	f7ff fc0a 	bl	800ee66 <get_fat>
 800f652:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f654:	697b      	ldr	r3, [r7, #20]
 800f656:	2b01      	cmp	r3, #1
 800f658:	d801      	bhi.n	800f65e <dir_next+0xa0>
 800f65a:	2302      	movs	r3, #2
 800f65c:	e081      	b.n	800f762 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f65e:	697b      	ldr	r3, [r7, #20]
 800f660:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f664:	d101      	bne.n	800f66a <dir_next+0xac>
 800f666:	2301      	movs	r3, #1
 800f668:	e07b      	b.n	800f762 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	699b      	ldr	r3, [r3, #24]
 800f66e:	697a      	ldr	r2, [r7, #20]
 800f670:	429a      	cmp	r2, r3
 800f672:	d359      	bcc.n	800f728 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f674:	683b      	ldr	r3, [r7, #0]
 800f676:	2b00      	cmp	r3, #0
 800f678:	d104      	bne.n	800f684 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	2200      	movs	r2, #0
 800f67e:	61da      	str	r2, [r3, #28]
 800f680:	2304      	movs	r3, #4
 800f682:	e06e      	b.n	800f762 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f684:	687a      	ldr	r2, [r7, #4]
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	699b      	ldr	r3, [r3, #24]
 800f68a:	4619      	mov	r1, r3
 800f68c:	4610      	mov	r0, r2
 800f68e:	f7ff fe3d 	bl	800f30c <create_chain>
 800f692:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f694:	697b      	ldr	r3, [r7, #20]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d101      	bne.n	800f69e <dir_next+0xe0>
 800f69a:	2307      	movs	r3, #7
 800f69c:	e061      	b.n	800f762 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	2b01      	cmp	r3, #1
 800f6a2:	d101      	bne.n	800f6a8 <dir_next+0xea>
 800f6a4:	2302      	movs	r3, #2
 800f6a6:	e05c      	b.n	800f762 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f6a8:	697b      	ldr	r3, [r7, #20]
 800f6aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6ae:	d101      	bne.n	800f6b4 <dir_next+0xf6>
 800f6b0:	2301      	movs	r3, #1
 800f6b2:	e056      	b.n	800f762 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f6b4:	68f8      	ldr	r0, [r7, #12]
 800f6b6:	f7ff fad5 	bl	800ec64 <sync_window>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	d001      	beq.n	800f6c4 <dir_next+0x106>
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	e04e      	b.n	800f762 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	899b      	ldrh	r3, [r3, #12]
 800f6ce:	461a      	mov	r2, r3
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	f7ff f8fe 	bl	800e8d2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	613b      	str	r3, [r7, #16]
 800f6da:	6979      	ldr	r1, [r7, #20]
 800f6dc:	68f8      	ldr	r0, [r7, #12]
 800f6de:	f7ff fba3 	bl	800ee28 <clust2sect>
 800f6e2:	4602      	mov	r2, r0
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	631a      	str	r2, [r3, #48]	; 0x30
 800f6e8:	e012      	b.n	800f710 <dir_next+0x152>
						fs->wflag = 1;
 800f6ea:	68fb      	ldr	r3, [r7, #12]
 800f6ec:	2201      	movs	r2, #1
 800f6ee:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f6f0:	68f8      	ldr	r0, [r7, #12]
 800f6f2:	f7ff fab7 	bl	800ec64 <sync_window>
 800f6f6:	4603      	mov	r3, r0
 800f6f8:	2b00      	cmp	r3, #0
 800f6fa:	d001      	beq.n	800f700 <dir_next+0x142>
 800f6fc:	2301      	movs	r3, #1
 800f6fe:	e030      	b.n	800f762 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f700:	693b      	ldr	r3, [r7, #16]
 800f702:	3301      	adds	r3, #1
 800f704:	613b      	str	r3, [r7, #16]
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f70a:	1c5a      	adds	r2, r3, #1
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	631a      	str	r2, [r3, #48]	; 0x30
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	895b      	ldrh	r3, [r3, #10]
 800f714:	461a      	mov	r2, r3
 800f716:	693b      	ldr	r3, [r7, #16]
 800f718:	4293      	cmp	r3, r2
 800f71a:	d3e6      	bcc.n	800f6ea <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	1ad2      	subs	r2, r2, r3
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	697a      	ldr	r2, [r7, #20]
 800f72c:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f72e:	6979      	ldr	r1, [r7, #20]
 800f730:	68f8      	ldr	r0, [r7, #12]
 800f732:	f7ff fb79 	bl	800ee28 <clust2sect>
 800f736:	4602      	mov	r2, r0
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	68ba      	ldr	r2, [r7, #8]
 800f740:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	899b      	ldrh	r3, [r3, #12]
 800f74c:	461a      	mov	r2, r3
 800f74e:	68bb      	ldr	r3, [r7, #8]
 800f750:	fbb3 f0f2 	udiv	r0, r3, r2
 800f754:	fb00 f202 	mul.w	r2, r0, r2
 800f758:	1a9b      	subs	r3, r3, r2
 800f75a:	18ca      	adds	r2, r1, r3
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f760:	2300      	movs	r3, #0
}
 800f762:	4618      	mov	r0, r3
 800f764:	3718      	adds	r7, #24
 800f766:	46bd      	mov	sp, r7
 800f768:	bd80      	pop	{r7, pc}

0800f76a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f76a:	b580      	push	{r7, lr}
 800f76c:	b086      	sub	sp, #24
 800f76e:	af00      	add	r7, sp, #0
 800f770:	6078      	str	r0, [r7, #4]
 800f772:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f77a:	2100      	movs	r1, #0
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f7ff fe95 	bl	800f4ac <dir_sdi>
 800f782:	4603      	mov	r3, r0
 800f784:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f786:	7dfb      	ldrb	r3, [r7, #23]
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d12b      	bne.n	800f7e4 <dir_alloc+0x7a>
		n = 0;
 800f78c:	2300      	movs	r3, #0
 800f78e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	69db      	ldr	r3, [r3, #28]
 800f794:	4619      	mov	r1, r3
 800f796:	68f8      	ldr	r0, [r7, #12]
 800f798:	f7ff faa8 	bl	800ecec <move_window>
 800f79c:	4603      	mov	r3, r0
 800f79e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f7a0:	7dfb      	ldrb	r3, [r7, #23]
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d11d      	bne.n	800f7e2 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6a1b      	ldr	r3, [r3, #32]
 800f7aa:	781b      	ldrb	r3, [r3, #0]
 800f7ac:	2be5      	cmp	r3, #229	; 0xe5
 800f7ae:	d004      	beq.n	800f7ba <dir_alloc+0x50>
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	6a1b      	ldr	r3, [r3, #32]
 800f7b4:	781b      	ldrb	r3, [r3, #0]
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d107      	bne.n	800f7ca <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	3301      	adds	r3, #1
 800f7be:	613b      	str	r3, [r7, #16]
 800f7c0:	693a      	ldr	r2, [r7, #16]
 800f7c2:	683b      	ldr	r3, [r7, #0]
 800f7c4:	429a      	cmp	r2, r3
 800f7c6:	d102      	bne.n	800f7ce <dir_alloc+0x64>
 800f7c8:	e00c      	b.n	800f7e4 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f7ca:	2300      	movs	r3, #0
 800f7cc:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f7ce:	2101      	movs	r1, #1
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f7ff fef4 	bl	800f5be <dir_next>
 800f7d6:	4603      	mov	r3, r0
 800f7d8:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f7da:	7dfb      	ldrb	r3, [r7, #23]
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d0d7      	beq.n	800f790 <dir_alloc+0x26>
 800f7e0:	e000      	b.n	800f7e4 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f7e2:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f7e4:	7dfb      	ldrb	r3, [r7, #23]
 800f7e6:	2b04      	cmp	r3, #4
 800f7e8:	d101      	bne.n	800f7ee <dir_alloc+0x84>
 800f7ea:	2307      	movs	r3, #7
 800f7ec:	75fb      	strb	r3, [r7, #23]
	return res;
 800f7ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3718      	adds	r7, #24
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	bd80      	pop	{r7, pc}

0800f7f8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f7f8:	b580      	push	{r7, lr}
 800f7fa:	b084      	sub	sp, #16
 800f7fc:	af00      	add	r7, sp, #0
 800f7fe:	6078      	str	r0, [r7, #4]
 800f800:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f802:	683b      	ldr	r3, [r7, #0]
 800f804:	331a      	adds	r3, #26
 800f806:	4618      	mov	r0, r3
 800f808:	f7fe ffc0 	bl	800e78c <ld_word>
 800f80c:	4603      	mov	r3, r0
 800f80e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	781b      	ldrb	r3, [r3, #0]
 800f814:	2b03      	cmp	r3, #3
 800f816:	d109      	bne.n	800f82c <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f818:	683b      	ldr	r3, [r7, #0]
 800f81a:	3314      	adds	r3, #20
 800f81c:	4618      	mov	r0, r3
 800f81e:	f7fe ffb5 	bl	800e78c <ld_word>
 800f822:	4603      	mov	r3, r0
 800f824:	041b      	lsls	r3, r3, #16
 800f826:	68fa      	ldr	r2, [r7, #12]
 800f828:	4313      	orrs	r3, r2
 800f82a:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f82c:	68fb      	ldr	r3, [r7, #12]
}
 800f82e:	4618      	mov	r0, r3
 800f830:	3710      	adds	r7, #16
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}

0800f836 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f836:	b580      	push	{r7, lr}
 800f838:	b084      	sub	sp, #16
 800f83a:	af00      	add	r7, sp, #0
 800f83c:	60f8      	str	r0, [r7, #12]
 800f83e:	60b9      	str	r1, [r7, #8]
 800f840:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f842:	68bb      	ldr	r3, [r7, #8]
 800f844:	331a      	adds	r3, #26
 800f846:	687a      	ldr	r2, [r7, #4]
 800f848:	b292      	uxth	r2, r2
 800f84a:	4611      	mov	r1, r2
 800f84c:	4618      	mov	r0, r3
 800f84e:	f7fe ffd8 	bl	800e802 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	781b      	ldrb	r3, [r3, #0]
 800f856:	2b03      	cmp	r3, #3
 800f858:	d109      	bne.n	800f86e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f85a:	68bb      	ldr	r3, [r7, #8]
 800f85c:	f103 0214 	add.w	r2, r3, #20
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	0c1b      	lsrs	r3, r3, #16
 800f864:	b29b      	uxth	r3, r3
 800f866:	4619      	mov	r1, r3
 800f868:	4610      	mov	r0, r2
 800f86a:	f7fe ffca 	bl	800e802 <st_word>
	}
}
 800f86e:	bf00      	nop
 800f870:	3710      	adds	r7, #16
 800f872:	46bd      	mov	sp, r7
 800f874:	bd80      	pop	{r7, pc}

0800f876 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f876:	b580      	push	{r7, lr}
 800f878:	b086      	sub	sp, #24
 800f87a:	af00      	add	r7, sp, #0
 800f87c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f884:	2100      	movs	r1, #0
 800f886:	6878      	ldr	r0, [r7, #4]
 800f888:	f7ff fe10 	bl	800f4ac <dir_sdi>
 800f88c:	4603      	mov	r3, r0
 800f88e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f890:	7dfb      	ldrb	r3, [r7, #23]
 800f892:	2b00      	cmp	r3, #0
 800f894:	d001      	beq.n	800f89a <dir_find+0x24>
 800f896:	7dfb      	ldrb	r3, [r7, #23]
 800f898:	e03e      	b.n	800f918 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	69db      	ldr	r3, [r3, #28]
 800f89e:	4619      	mov	r1, r3
 800f8a0:	6938      	ldr	r0, [r7, #16]
 800f8a2:	f7ff fa23 	bl	800ecec <move_window>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f8aa:	7dfb      	ldrb	r3, [r7, #23]
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d12f      	bne.n	800f910 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	6a1b      	ldr	r3, [r3, #32]
 800f8b4:	781b      	ldrb	r3, [r3, #0]
 800f8b6:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f8b8:	7bfb      	ldrb	r3, [r7, #15]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d102      	bne.n	800f8c4 <dir_find+0x4e>
 800f8be:	2304      	movs	r3, #4
 800f8c0:	75fb      	strb	r3, [r7, #23]
 800f8c2:	e028      	b.n	800f916 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	6a1b      	ldr	r3, [r3, #32]
 800f8c8:	330b      	adds	r3, #11
 800f8ca:	781b      	ldrb	r3, [r3, #0]
 800f8cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f8d0:	b2da      	uxtb	r2, r3
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6a1b      	ldr	r3, [r3, #32]
 800f8da:	330b      	adds	r3, #11
 800f8dc:	781b      	ldrb	r3, [r3, #0]
 800f8de:	f003 0308 	and.w	r3, r3, #8
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d10a      	bne.n	800f8fc <dir_find+0x86>
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	6a18      	ldr	r0, [r3, #32]
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	3324      	adds	r3, #36	; 0x24
 800f8ee:	220b      	movs	r2, #11
 800f8f0:	4619      	mov	r1, r3
 800f8f2:	f7ff f809 	bl	800e908 <mem_cmp>
 800f8f6:	4603      	mov	r3, r0
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d00b      	beq.n	800f914 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f8fc:	2100      	movs	r1, #0
 800f8fe:	6878      	ldr	r0, [r7, #4]
 800f900:	f7ff fe5d 	bl	800f5be <dir_next>
 800f904:	4603      	mov	r3, r0
 800f906:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f908:	7dfb      	ldrb	r3, [r7, #23]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d0c5      	beq.n	800f89a <dir_find+0x24>
 800f90e:	e002      	b.n	800f916 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f910:	bf00      	nop
 800f912:	e000      	b.n	800f916 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f914:	bf00      	nop

	return res;
 800f916:	7dfb      	ldrb	r3, [r7, #23]
}
 800f918:	4618      	mov	r0, r3
 800f91a:	3718      	adds	r7, #24
 800f91c:	46bd      	mov	sp, r7
 800f91e:	bd80      	pop	{r7, pc}

0800f920 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f920:	b580      	push	{r7, lr}
 800f922:	b084      	sub	sp, #16
 800f924:	af00      	add	r7, sp, #0
 800f926:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f92e:	2101      	movs	r1, #1
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f7ff ff1a 	bl	800f76a <dir_alloc>
 800f936:	4603      	mov	r3, r0
 800f938:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f93a:	7bfb      	ldrb	r3, [r7, #15]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d11c      	bne.n	800f97a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	69db      	ldr	r3, [r3, #28]
 800f944:	4619      	mov	r1, r3
 800f946:	68b8      	ldr	r0, [r7, #8]
 800f948:	f7ff f9d0 	bl	800ecec <move_window>
 800f94c:	4603      	mov	r3, r0
 800f94e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f950:	7bfb      	ldrb	r3, [r7, #15]
 800f952:	2b00      	cmp	r3, #0
 800f954:	d111      	bne.n	800f97a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	6a1b      	ldr	r3, [r3, #32]
 800f95a:	2220      	movs	r2, #32
 800f95c:	2100      	movs	r1, #0
 800f95e:	4618      	mov	r0, r3
 800f960:	f7fe ffb7 	bl	800e8d2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6a18      	ldr	r0, [r3, #32]
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	3324      	adds	r3, #36	; 0x24
 800f96c:	220b      	movs	r2, #11
 800f96e:	4619      	mov	r1, r3
 800f970:	f7fe ff8e 	bl	800e890 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f974:	68bb      	ldr	r3, [r7, #8]
 800f976:	2201      	movs	r2, #1
 800f978:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f97a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f97c:	4618      	mov	r0, r3
 800f97e:	3710      	adds	r7, #16
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}

0800f984 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f984:	b580      	push	{r7, lr}
 800f986:	b088      	sub	sp, #32
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
 800f98c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f98e:	683b      	ldr	r3, [r7, #0]
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	60fb      	str	r3, [r7, #12]
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	3324      	adds	r3, #36	; 0x24
 800f998:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f99a:	220b      	movs	r2, #11
 800f99c:	2120      	movs	r1, #32
 800f99e:	68b8      	ldr	r0, [r7, #8]
 800f9a0:	f7fe ff97 	bl	800e8d2 <mem_set>
	si = i = 0; ni = 8;
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	613b      	str	r3, [r7, #16]
 800f9a8:	693b      	ldr	r3, [r7, #16]
 800f9aa:	61fb      	str	r3, [r7, #28]
 800f9ac:	2308      	movs	r3, #8
 800f9ae:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800f9b0:	69fb      	ldr	r3, [r7, #28]
 800f9b2:	1c5a      	adds	r2, r3, #1
 800f9b4:	61fa      	str	r2, [r7, #28]
 800f9b6:	68fa      	ldr	r2, [r7, #12]
 800f9b8:	4413      	add	r3, r2
 800f9ba:	781b      	ldrb	r3, [r3, #0]
 800f9bc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800f9be:	7efb      	ldrb	r3, [r7, #27]
 800f9c0:	2b20      	cmp	r3, #32
 800f9c2:	d94e      	bls.n	800fa62 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800f9c4:	7efb      	ldrb	r3, [r7, #27]
 800f9c6:	2b2f      	cmp	r3, #47	; 0x2f
 800f9c8:	d006      	beq.n	800f9d8 <create_name+0x54>
 800f9ca:	7efb      	ldrb	r3, [r7, #27]
 800f9cc:	2b5c      	cmp	r3, #92	; 0x5c
 800f9ce:	d110      	bne.n	800f9f2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800f9d0:	e002      	b.n	800f9d8 <create_name+0x54>
 800f9d2:	69fb      	ldr	r3, [r7, #28]
 800f9d4:	3301      	adds	r3, #1
 800f9d6:	61fb      	str	r3, [r7, #28]
 800f9d8:	68fa      	ldr	r2, [r7, #12]
 800f9da:	69fb      	ldr	r3, [r7, #28]
 800f9dc:	4413      	add	r3, r2
 800f9de:	781b      	ldrb	r3, [r3, #0]
 800f9e0:	2b2f      	cmp	r3, #47	; 0x2f
 800f9e2:	d0f6      	beq.n	800f9d2 <create_name+0x4e>
 800f9e4:	68fa      	ldr	r2, [r7, #12]
 800f9e6:	69fb      	ldr	r3, [r7, #28]
 800f9e8:	4413      	add	r3, r2
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	2b5c      	cmp	r3, #92	; 0x5c
 800f9ee:	d0f0      	beq.n	800f9d2 <create_name+0x4e>
			break;
 800f9f0:	e038      	b.n	800fa64 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800f9f2:	7efb      	ldrb	r3, [r7, #27]
 800f9f4:	2b2e      	cmp	r3, #46	; 0x2e
 800f9f6:	d003      	beq.n	800fa00 <create_name+0x7c>
 800f9f8:	693a      	ldr	r2, [r7, #16]
 800f9fa:	697b      	ldr	r3, [r7, #20]
 800f9fc:	429a      	cmp	r2, r3
 800f9fe:	d30c      	bcc.n	800fa1a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fa00:	697b      	ldr	r3, [r7, #20]
 800fa02:	2b0b      	cmp	r3, #11
 800fa04:	d002      	beq.n	800fa0c <create_name+0x88>
 800fa06:	7efb      	ldrb	r3, [r7, #27]
 800fa08:	2b2e      	cmp	r3, #46	; 0x2e
 800fa0a:	d001      	beq.n	800fa10 <create_name+0x8c>
 800fa0c:	2306      	movs	r3, #6
 800fa0e:	e044      	b.n	800fa9a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800fa10:	2308      	movs	r3, #8
 800fa12:	613b      	str	r3, [r7, #16]
 800fa14:	230b      	movs	r3, #11
 800fa16:	617b      	str	r3, [r7, #20]
			continue;
 800fa18:	e022      	b.n	800fa60 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fa1a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	da04      	bge.n	800fa2c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fa22:	7efb      	ldrb	r3, [r7, #27]
 800fa24:	3b80      	subs	r3, #128	; 0x80
 800fa26:	4a1f      	ldr	r2, [pc, #124]	; (800faa4 <create_name+0x120>)
 800fa28:	5cd3      	ldrb	r3, [r2, r3]
 800fa2a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fa2c:	7efb      	ldrb	r3, [r7, #27]
 800fa2e:	4619      	mov	r1, r3
 800fa30:	481d      	ldr	r0, [pc, #116]	; (800faa8 <create_name+0x124>)
 800fa32:	f7fe ff90 	bl	800e956 <chk_chr>
 800fa36:	4603      	mov	r3, r0
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d001      	beq.n	800fa40 <create_name+0xbc>
 800fa3c:	2306      	movs	r3, #6
 800fa3e:	e02c      	b.n	800fa9a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fa40:	7efb      	ldrb	r3, [r7, #27]
 800fa42:	2b60      	cmp	r3, #96	; 0x60
 800fa44:	d905      	bls.n	800fa52 <create_name+0xce>
 800fa46:	7efb      	ldrb	r3, [r7, #27]
 800fa48:	2b7a      	cmp	r3, #122	; 0x7a
 800fa4a:	d802      	bhi.n	800fa52 <create_name+0xce>
 800fa4c:	7efb      	ldrb	r3, [r7, #27]
 800fa4e:	3b20      	subs	r3, #32
 800fa50:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800fa52:	693b      	ldr	r3, [r7, #16]
 800fa54:	1c5a      	adds	r2, r3, #1
 800fa56:	613a      	str	r2, [r7, #16]
 800fa58:	68ba      	ldr	r2, [r7, #8]
 800fa5a:	4413      	add	r3, r2
 800fa5c:	7efa      	ldrb	r2, [r7, #27]
 800fa5e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fa60:	e7a6      	b.n	800f9b0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fa62:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fa64:	68fa      	ldr	r2, [r7, #12]
 800fa66:	69fb      	ldr	r3, [r7, #28]
 800fa68:	441a      	add	r2, r3
 800fa6a:	683b      	ldr	r3, [r7, #0]
 800fa6c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800fa6e:	693b      	ldr	r3, [r7, #16]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	d101      	bne.n	800fa78 <create_name+0xf4>
 800fa74:	2306      	movs	r3, #6
 800fa76:	e010      	b.n	800fa9a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fa78:	68bb      	ldr	r3, [r7, #8]
 800fa7a:	781b      	ldrb	r3, [r3, #0]
 800fa7c:	2be5      	cmp	r3, #229	; 0xe5
 800fa7e:	d102      	bne.n	800fa86 <create_name+0x102>
 800fa80:	68bb      	ldr	r3, [r7, #8]
 800fa82:	2205      	movs	r2, #5
 800fa84:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fa86:	7efb      	ldrb	r3, [r7, #27]
 800fa88:	2b20      	cmp	r3, #32
 800fa8a:	d801      	bhi.n	800fa90 <create_name+0x10c>
 800fa8c:	2204      	movs	r2, #4
 800fa8e:	e000      	b.n	800fa92 <create_name+0x10e>
 800fa90:	2200      	movs	r2, #0
 800fa92:	68bb      	ldr	r3, [r7, #8]
 800fa94:	330b      	adds	r3, #11
 800fa96:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800fa98:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	3720      	adds	r7, #32
 800fa9e:	46bd      	mov	sp, r7
 800faa0:	bd80      	pop	{r7, pc}
 800faa2:	bf00      	nop
 800faa4:	080157c4 	.word	0x080157c4
 800faa8:	08015704 	.word	0x08015704

0800faac <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b086      	sub	sp, #24
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
 800fab4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	681b      	ldr	r3, [r3, #0]
 800fabe:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fac0:	e002      	b.n	800fac8 <follow_path+0x1c>
 800fac2:	683b      	ldr	r3, [r7, #0]
 800fac4:	3301      	adds	r3, #1
 800fac6:	603b      	str	r3, [r7, #0]
 800fac8:	683b      	ldr	r3, [r7, #0]
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	2b2f      	cmp	r3, #47	; 0x2f
 800face:	d0f8      	beq.n	800fac2 <follow_path+0x16>
 800fad0:	683b      	ldr	r3, [r7, #0]
 800fad2:	781b      	ldrb	r3, [r3, #0]
 800fad4:	2b5c      	cmp	r3, #92	; 0x5c
 800fad6:	d0f4      	beq.n	800fac2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	2200      	movs	r2, #0
 800fadc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	781b      	ldrb	r3, [r3, #0]
 800fae2:	2b1f      	cmp	r3, #31
 800fae4:	d80a      	bhi.n	800fafc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fae6:	687b      	ldr	r3, [r7, #4]
 800fae8:	2280      	movs	r2, #128	; 0x80
 800faea:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800faee:	2100      	movs	r1, #0
 800faf0:	6878      	ldr	r0, [r7, #4]
 800faf2:	f7ff fcdb 	bl	800f4ac <dir_sdi>
 800faf6:	4603      	mov	r3, r0
 800faf8:	75fb      	strb	r3, [r7, #23]
 800fafa:	e048      	b.n	800fb8e <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fafc:	463b      	mov	r3, r7
 800fafe:	4619      	mov	r1, r3
 800fb00:	6878      	ldr	r0, [r7, #4]
 800fb02:	f7ff ff3f 	bl	800f984 <create_name>
 800fb06:	4603      	mov	r3, r0
 800fb08:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fb0a:	7dfb      	ldrb	r3, [r7, #23]
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d139      	bne.n	800fb84 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fb10:	6878      	ldr	r0, [r7, #4]
 800fb12:	f7ff feb0 	bl	800f876 <dir_find>
 800fb16:	4603      	mov	r3, r0
 800fb18:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fb1a:	687b      	ldr	r3, [r7, #4]
 800fb1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fb20:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fb22:	7dfb      	ldrb	r3, [r7, #23]
 800fb24:	2b00      	cmp	r3, #0
 800fb26:	d00a      	beq.n	800fb3e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fb28:	7dfb      	ldrb	r3, [r7, #23]
 800fb2a:	2b04      	cmp	r3, #4
 800fb2c:	d12c      	bne.n	800fb88 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fb2e:	7afb      	ldrb	r3, [r7, #11]
 800fb30:	f003 0304 	and.w	r3, r3, #4
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d127      	bne.n	800fb88 <follow_path+0xdc>
 800fb38:	2305      	movs	r3, #5
 800fb3a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fb3c:	e024      	b.n	800fb88 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fb3e:	7afb      	ldrb	r3, [r7, #11]
 800fb40:	f003 0304 	and.w	r3, r3, #4
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d121      	bne.n	800fb8c <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fb48:	693b      	ldr	r3, [r7, #16]
 800fb4a:	799b      	ldrb	r3, [r3, #6]
 800fb4c:	f003 0310 	and.w	r3, r3, #16
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d102      	bne.n	800fb5a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fb54:	2305      	movs	r3, #5
 800fb56:	75fb      	strb	r3, [r7, #23]
 800fb58:	e019      	b.n	800fb8e <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	695b      	ldr	r3, [r3, #20]
 800fb64:	68fa      	ldr	r2, [r7, #12]
 800fb66:	8992      	ldrh	r2, [r2, #12]
 800fb68:	fbb3 f0f2 	udiv	r0, r3, r2
 800fb6c:	fb00 f202 	mul.w	r2, r0, r2
 800fb70:	1a9b      	subs	r3, r3, r2
 800fb72:	440b      	add	r3, r1
 800fb74:	4619      	mov	r1, r3
 800fb76:	68f8      	ldr	r0, [r7, #12]
 800fb78:	f7ff fe3e 	bl	800f7f8 <ld_clust>
 800fb7c:	4602      	mov	r2, r0
 800fb7e:	693b      	ldr	r3, [r7, #16]
 800fb80:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fb82:	e7bb      	b.n	800fafc <follow_path+0x50>
			if (res != FR_OK) break;
 800fb84:	bf00      	nop
 800fb86:	e002      	b.n	800fb8e <follow_path+0xe2>
				break;
 800fb88:	bf00      	nop
 800fb8a:	e000      	b.n	800fb8e <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fb8c:	bf00      	nop
			}
		}
	}

	return res;
 800fb8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb90:	4618      	mov	r0, r3
 800fb92:	3718      	adds	r7, #24
 800fb94:	46bd      	mov	sp, r7
 800fb96:	bd80      	pop	{r7, pc}

0800fb98 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fb98:	b480      	push	{r7}
 800fb9a:	b087      	sub	sp, #28
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fba4:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d031      	beq.n	800fc12 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	617b      	str	r3, [r7, #20]
 800fbb4:	e002      	b.n	800fbbc <get_ldnumber+0x24>
 800fbb6:	697b      	ldr	r3, [r7, #20]
 800fbb8:	3301      	adds	r3, #1
 800fbba:	617b      	str	r3, [r7, #20]
 800fbbc:	697b      	ldr	r3, [r7, #20]
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	2b20      	cmp	r3, #32
 800fbc2:	d903      	bls.n	800fbcc <get_ldnumber+0x34>
 800fbc4:	697b      	ldr	r3, [r7, #20]
 800fbc6:	781b      	ldrb	r3, [r3, #0]
 800fbc8:	2b3a      	cmp	r3, #58	; 0x3a
 800fbca:	d1f4      	bne.n	800fbb6 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	781b      	ldrb	r3, [r3, #0]
 800fbd0:	2b3a      	cmp	r3, #58	; 0x3a
 800fbd2:	d11c      	bne.n	800fc0e <get_ldnumber+0x76>
			tp = *path;
 800fbd4:	687b      	ldr	r3, [r7, #4]
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	1c5a      	adds	r2, r3, #1
 800fbde:	60fa      	str	r2, [r7, #12]
 800fbe0:	781b      	ldrb	r3, [r3, #0]
 800fbe2:	3b30      	subs	r3, #48	; 0x30
 800fbe4:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	2b09      	cmp	r3, #9
 800fbea:	d80e      	bhi.n	800fc0a <get_ldnumber+0x72>
 800fbec:	68fa      	ldr	r2, [r7, #12]
 800fbee:	697b      	ldr	r3, [r7, #20]
 800fbf0:	429a      	cmp	r2, r3
 800fbf2:	d10a      	bne.n	800fc0a <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fbf4:	68bb      	ldr	r3, [r7, #8]
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d107      	bne.n	800fc0a <get_ldnumber+0x72>
					vol = (int)i;
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fbfe:	697b      	ldr	r3, [r7, #20]
 800fc00:	3301      	adds	r3, #1
 800fc02:	617b      	str	r3, [r7, #20]
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	697a      	ldr	r2, [r7, #20]
 800fc08:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fc0a:	693b      	ldr	r3, [r7, #16]
 800fc0c:	e002      	b.n	800fc14 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fc0e:	2300      	movs	r3, #0
 800fc10:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fc12:	693b      	ldr	r3, [r7, #16]
}
 800fc14:	4618      	mov	r0, r3
 800fc16:	371c      	adds	r7, #28
 800fc18:	46bd      	mov	sp, r7
 800fc1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc1e:	4770      	bx	lr

0800fc20 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b082      	sub	sp, #8
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
 800fc28:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	2200      	movs	r2, #0
 800fc2e:	70da      	strb	r2, [r3, #3]
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc36:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fc38:	6839      	ldr	r1, [r7, #0]
 800fc3a:	6878      	ldr	r0, [r7, #4]
 800fc3c:	f7ff f856 	bl	800ecec <move_window>
 800fc40:	4603      	mov	r3, r0
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d001      	beq.n	800fc4a <check_fs+0x2a>
 800fc46:	2304      	movs	r3, #4
 800fc48:	e038      	b.n	800fcbc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fc4a:	687b      	ldr	r3, [r7, #4]
 800fc4c:	3334      	adds	r3, #52	; 0x34
 800fc4e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fc52:	4618      	mov	r0, r3
 800fc54:	f7fe fd9a 	bl	800e78c <ld_word>
 800fc58:	4603      	mov	r3, r0
 800fc5a:	461a      	mov	r2, r3
 800fc5c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fc60:	429a      	cmp	r2, r3
 800fc62:	d001      	beq.n	800fc68 <check_fs+0x48>
 800fc64:	2303      	movs	r3, #3
 800fc66:	e029      	b.n	800fcbc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc6e:	2be9      	cmp	r3, #233	; 0xe9
 800fc70:	d009      	beq.n	800fc86 <check_fs+0x66>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fc78:	2beb      	cmp	r3, #235	; 0xeb
 800fc7a:	d11e      	bne.n	800fcba <check_fs+0x9a>
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800fc82:	2b90      	cmp	r3, #144	; 0x90
 800fc84:	d119      	bne.n	800fcba <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	3334      	adds	r3, #52	; 0x34
 800fc8a:	3336      	adds	r3, #54	; 0x36
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7fe fd95 	bl	800e7bc <ld_dword>
 800fc92:	4603      	mov	r3, r0
 800fc94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fc98:	4a0a      	ldr	r2, [pc, #40]	; (800fcc4 <check_fs+0xa4>)
 800fc9a:	4293      	cmp	r3, r2
 800fc9c:	d101      	bne.n	800fca2 <check_fs+0x82>
 800fc9e:	2300      	movs	r3, #0
 800fca0:	e00c      	b.n	800fcbc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	3334      	adds	r3, #52	; 0x34
 800fca6:	3352      	adds	r3, #82	; 0x52
 800fca8:	4618      	mov	r0, r3
 800fcaa:	f7fe fd87 	bl	800e7bc <ld_dword>
 800fcae:	4603      	mov	r3, r0
 800fcb0:	4a05      	ldr	r2, [pc, #20]	; (800fcc8 <check_fs+0xa8>)
 800fcb2:	4293      	cmp	r3, r2
 800fcb4:	d101      	bne.n	800fcba <check_fs+0x9a>
 800fcb6:	2300      	movs	r3, #0
 800fcb8:	e000      	b.n	800fcbc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fcba:	2302      	movs	r3, #2
}
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	3708      	adds	r7, #8
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	00544146 	.word	0x00544146
 800fcc8:	33544146 	.word	0x33544146

0800fccc <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fccc:	b580      	push	{r7, lr}
 800fcce:	b096      	sub	sp, #88	; 0x58
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	60f8      	str	r0, [r7, #12]
 800fcd4:	60b9      	str	r1, [r7, #8]
 800fcd6:	4613      	mov	r3, r2
 800fcd8:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fcda:	68bb      	ldr	r3, [r7, #8]
 800fcdc:	2200      	movs	r2, #0
 800fcde:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fce0:	68f8      	ldr	r0, [r7, #12]
 800fce2:	f7ff ff59 	bl	800fb98 <get_ldnumber>
 800fce6:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	da01      	bge.n	800fcf2 <find_volume+0x26>
 800fcee:	230b      	movs	r3, #11
 800fcf0:	e262      	b.n	80101b8 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fcf2:	4a9f      	ldr	r2, [pc, #636]	; (800ff70 <find_volume+0x2a4>)
 800fcf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcf6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcfa:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fcfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d101      	bne.n	800fd06 <find_volume+0x3a>
 800fd02:	230c      	movs	r3, #12
 800fd04:	e258      	b.n	80101b8 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fd06:	68bb      	ldr	r3, [r7, #8]
 800fd08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd0a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fd0c:	79fb      	ldrb	r3, [r7, #7]
 800fd0e:	f023 0301 	bic.w	r3, r3, #1
 800fd12:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd16:	781b      	ldrb	r3, [r3, #0]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d01a      	beq.n	800fd52 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd1e:	785b      	ldrb	r3, [r3, #1]
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7fe fc95 	bl	800e650 <disk_status>
 800fd26:	4603      	mov	r3, r0
 800fd28:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fd2c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd30:	f003 0301 	and.w	r3, r3, #1
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d10c      	bne.n	800fd52 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fd38:	79fb      	ldrb	r3, [r7, #7]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d007      	beq.n	800fd4e <find_volume+0x82>
 800fd3e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd42:	f003 0304 	and.w	r3, r3, #4
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d001      	beq.n	800fd4e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fd4a:	230a      	movs	r3, #10
 800fd4c:	e234      	b.n	80101b8 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800fd4e:	2300      	movs	r3, #0
 800fd50:	e232      	b.n	80101b8 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fd52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd54:	2200      	movs	r2, #0
 800fd56:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fd58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd5a:	b2da      	uxtb	r2, r3
 800fd5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd5e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fd60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd62:	785b      	ldrb	r3, [r3, #1]
 800fd64:	4618      	mov	r0, r3
 800fd66:	f7fe fc8d 	bl	800e684 <disk_initialize>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fd70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd74:	f003 0301 	and.w	r3, r3, #1
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d001      	beq.n	800fd80 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fd7c:	2303      	movs	r3, #3
 800fd7e:	e21b      	b.n	80101b8 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fd80:	79fb      	ldrb	r3, [r7, #7]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d007      	beq.n	800fd96 <find_volume+0xca>
 800fd86:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd8a:	f003 0304 	and.w	r3, r3, #4
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d001      	beq.n	800fd96 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fd92:	230a      	movs	r3, #10
 800fd94:	e210      	b.n	80101b8 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800fd96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd98:	7858      	ldrb	r0, [r3, #1]
 800fd9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd9c:	330c      	adds	r3, #12
 800fd9e:	461a      	mov	r2, r3
 800fda0:	2102      	movs	r1, #2
 800fda2:	f7fe fcd5 	bl	800e750 <disk_ioctl>
 800fda6:	4603      	mov	r3, r0
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d001      	beq.n	800fdb0 <find_volume+0xe4>
 800fdac:	2301      	movs	r3, #1
 800fdae:	e203      	b.n	80101b8 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800fdb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb2:	899b      	ldrh	r3, [r3, #12]
 800fdb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fdb8:	d80d      	bhi.n	800fdd6 <find_volume+0x10a>
 800fdba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdbc:	899b      	ldrh	r3, [r3, #12]
 800fdbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fdc2:	d308      	bcc.n	800fdd6 <find_volume+0x10a>
 800fdc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc6:	899b      	ldrh	r3, [r3, #12]
 800fdc8:	461a      	mov	r2, r3
 800fdca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdcc:	899b      	ldrh	r3, [r3, #12]
 800fdce:	3b01      	subs	r3, #1
 800fdd0:	4013      	ands	r3, r2
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d001      	beq.n	800fdda <find_volume+0x10e>
 800fdd6:	2301      	movs	r3, #1
 800fdd8:	e1ee      	b.n	80101b8 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fdda:	2300      	movs	r3, #0
 800fddc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fdde:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fde0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fde2:	f7ff ff1d 	bl	800fc20 <check_fs>
 800fde6:	4603      	mov	r3, r0
 800fde8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fdec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fdf0:	2b02      	cmp	r3, #2
 800fdf2:	d149      	bne.n	800fe88 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	643b      	str	r3, [r7, #64]	; 0x40
 800fdf8:	e01e      	b.n	800fe38 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fdfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdfc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fe00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe02:	011b      	lsls	r3, r3, #4
 800fe04:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fe08:	4413      	add	r3, r2
 800fe0a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fe0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe0e:	3304      	adds	r3, #4
 800fe10:	781b      	ldrb	r3, [r3, #0]
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d006      	beq.n	800fe24 <find_volume+0x158>
 800fe16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe18:	3308      	adds	r3, #8
 800fe1a:	4618      	mov	r0, r3
 800fe1c:	f7fe fcce 	bl	800e7bc <ld_dword>
 800fe20:	4602      	mov	r2, r0
 800fe22:	e000      	b.n	800fe26 <find_volume+0x15a>
 800fe24:	2200      	movs	r2, #0
 800fe26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe28:	009b      	lsls	r3, r3, #2
 800fe2a:	3358      	adds	r3, #88	; 0x58
 800fe2c:	443b      	add	r3, r7
 800fe2e:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fe32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe34:	3301      	adds	r3, #1
 800fe36:	643b      	str	r3, [r7, #64]	; 0x40
 800fe38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe3a:	2b03      	cmp	r3, #3
 800fe3c:	d9dd      	bls.n	800fdfa <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fe3e:	2300      	movs	r3, #0
 800fe40:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fe42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d002      	beq.n	800fe4e <find_volume+0x182>
 800fe48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe4a:	3b01      	subs	r3, #1
 800fe4c:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800fe4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe50:	009b      	lsls	r3, r3, #2
 800fe52:	3358      	adds	r3, #88	; 0x58
 800fe54:	443b      	add	r3, r7
 800fe56:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800fe5a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800fe5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d005      	beq.n	800fe6e <find_volume+0x1a2>
 800fe62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fe64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fe66:	f7ff fedb 	bl	800fc20 <check_fs>
 800fe6a:	4603      	mov	r3, r0
 800fe6c:	e000      	b.n	800fe70 <find_volume+0x1a4>
 800fe6e:	2303      	movs	r3, #3
 800fe70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fe74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe78:	2b01      	cmp	r3, #1
 800fe7a:	d905      	bls.n	800fe88 <find_volume+0x1bc>
 800fe7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe7e:	3301      	adds	r3, #1
 800fe80:	643b      	str	r3, [r7, #64]	; 0x40
 800fe82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe84:	2b03      	cmp	r3, #3
 800fe86:	d9e2      	bls.n	800fe4e <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fe88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe8c:	2b04      	cmp	r3, #4
 800fe8e:	d101      	bne.n	800fe94 <find_volume+0x1c8>
 800fe90:	2301      	movs	r3, #1
 800fe92:	e191      	b.n	80101b8 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fe94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe98:	2b01      	cmp	r3, #1
 800fe9a:	d901      	bls.n	800fea0 <find_volume+0x1d4>
 800fe9c:	230d      	movs	r3, #13
 800fe9e:	e18b      	b.n	80101b8 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fea2:	3334      	adds	r3, #52	; 0x34
 800fea4:	330b      	adds	r3, #11
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7fe fc70 	bl	800e78c <ld_word>
 800feac:	4603      	mov	r3, r0
 800feae:	461a      	mov	r2, r3
 800feb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feb2:	899b      	ldrh	r3, [r3, #12]
 800feb4:	429a      	cmp	r2, r3
 800feb6:	d001      	beq.n	800febc <find_volume+0x1f0>
 800feb8:	230d      	movs	r3, #13
 800feba:	e17d      	b.n	80101b8 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800febc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800febe:	3334      	adds	r3, #52	; 0x34
 800fec0:	3316      	adds	r3, #22
 800fec2:	4618      	mov	r0, r3
 800fec4:	f7fe fc62 	bl	800e78c <ld_word>
 800fec8:	4603      	mov	r3, r0
 800feca:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800fecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d106      	bne.n	800fee0 <find_volume+0x214>
 800fed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed4:	3334      	adds	r3, #52	; 0x34
 800fed6:	3324      	adds	r3, #36	; 0x24
 800fed8:	4618      	mov	r0, r3
 800feda:	f7fe fc6f 	bl	800e7bc <ld_dword>
 800fede:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800fee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800fee4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800fee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fee8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800feec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800feee:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800fef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fef2:	789b      	ldrb	r3, [r3, #2]
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	d005      	beq.n	800ff04 <find_volume+0x238>
 800fef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefa:	789b      	ldrb	r3, [r3, #2]
 800fefc:	2b02      	cmp	r3, #2
 800fefe:	d001      	beq.n	800ff04 <find_volume+0x238>
 800ff00:	230d      	movs	r3, #13
 800ff02:	e159      	b.n	80101b8 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ff04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff06:	789b      	ldrb	r3, [r3, #2]
 800ff08:	461a      	mov	r2, r3
 800ff0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff0c:	fb02 f303 	mul.w	r3, r2, r3
 800ff10:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ff12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ff18:	b29a      	uxth	r2, r3
 800ff1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ff1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff20:	895b      	ldrh	r3, [r3, #10]
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d008      	beq.n	800ff38 <find_volume+0x26c>
 800ff26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff28:	895b      	ldrh	r3, [r3, #10]
 800ff2a:	461a      	mov	r2, r3
 800ff2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff2e:	895b      	ldrh	r3, [r3, #10]
 800ff30:	3b01      	subs	r3, #1
 800ff32:	4013      	ands	r3, r2
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d001      	beq.n	800ff3c <find_volume+0x270>
 800ff38:	230d      	movs	r3, #13
 800ff3a:	e13d      	b.n	80101b8 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ff3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff3e:	3334      	adds	r3, #52	; 0x34
 800ff40:	3311      	adds	r3, #17
 800ff42:	4618      	mov	r0, r3
 800ff44:	f7fe fc22 	bl	800e78c <ld_word>
 800ff48:	4603      	mov	r3, r0
 800ff4a:	461a      	mov	r2, r3
 800ff4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ff50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff52:	891b      	ldrh	r3, [r3, #8]
 800ff54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ff56:	8992      	ldrh	r2, [r2, #12]
 800ff58:	0952      	lsrs	r2, r2, #5
 800ff5a:	b292      	uxth	r2, r2
 800ff5c:	fbb3 f1f2 	udiv	r1, r3, r2
 800ff60:	fb01 f202 	mul.w	r2, r1, r2
 800ff64:	1a9b      	subs	r3, r3, r2
 800ff66:	b29b      	uxth	r3, r3
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d003      	beq.n	800ff74 <find_volume+0x2a8>
 800ff6c:	230d      	movs	r3, #13
 800ff6e:	e123      	b.n	80101b8 <find_volume+0x4ec>
 800ff70:	20000ac8 	.word	0x20000ac8

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ff74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff76:	3334      	adds	r3, #52	; 0x34
 800ff78:	3313      	adds	r3, #19
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	f7fe fc06 	bl	800e78c <ld_word>
 800ff80:	4603      	mov	r3, r0
 800ff82:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ff84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ff86:	2b00      	cmp	r3, #0
 800ff88:	d106      	bne.n	800ff98 <find_volume+0x2cc>
 800ff8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff8c:	3334      	adds	r3, #52	; 0x34
 800ff8e:	3320      	adds	r3, #32
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7fe fc13 	bl	800e7bc <ld_dword>
 800ff96:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ff98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff9a:	3334      	adds	r3, #52	; 0x34
 800ff9c:	330e      	adds	r3, #14
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7fe fbf4 	bl	800e78c <ld_word>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ffa8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d101      	bne.n	800ffb2 <find_volume+0x2e6>
 800ffae:	230d      	movs	r3, #13
 800ffb0:	e102      	b.n	80101b8 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ffb2:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ffb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ffb6:	4413      	add	r3, r2
 800ffb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffba:	8911      	ldrh	r1, [r2, #8]
 800ffbc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffbe:	8992      	ldrh	r2, [r2, #12]
 800ffc0:	0952      	lsrs	r2, r2, #5
 800ffc2:	b292      	uxth	r2, r2
 800ffc4:	fbb1 f2f2 	udiv	r2, r1, r2
 800ffc8:	b292      	uxth	r2, r2
 800ffca:	4413      	add	r3, r2
 800ffcc:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ffce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ffd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d201      	bcs.n	800ffda <find_volume+0x30e>
 800ffd6:	230d      	movs	r3, #13
 800ffd8:	e0ee      	b.n	80101b8 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ffda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ffdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ffde:	1ad3      	subs	r3, r2, r3
 800ffe0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffe2:	8952      	ldrh	r2, [r2, #10]
 800ffe4:	fbb3 f3f2 	udiv	r3, r3, r2
 800ffe8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ffea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d101      	bne.n	800fff4 <find_volume+0x328>
 800fff0:	230d      	movs	r3, #13
 800fff2:	e0e1      	b.n	80101b8 <find_volume+0x4ec>
		fmt = FS_FAT32;
 800fff4:	2303      	movs	r3, #3
 800fff6:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800fffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fffc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010000:	4293      	cmp	r3, r2
 8010002:	d802      	bhi.n	801000a <find_volume+0x33e>
 8010004:	2302      	movs	r3, #2
 8010006:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801000a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010010:	4293      	cmp	r3, r2
 8010012:	d802      	bhi.n	801001a <find_volume+0x34e>
 8010014:	2301      	movs	r3, #1
 8010016:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801001a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801001c:	1c9a      	adds	r2, r3, #2
 801001e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010020:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010024:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010026:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010028:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801002a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801002c:	441a      	add	r2, r3
 801002e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010030:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010032:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010036:	441a      	add	r2, r3
 8010038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801003a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801003c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010040:	2b03      	cmp	r3, #3
 8010042:	d11e      	bne.n	8010082 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010046:	3334      	adds	r3, #52	; 0x34
 8010048:	332a      	adds	r3, #42	; 0x2a
 801004a:	4618      	mov	r0, r3
 801004c:	f7fe fb9e 	bl	800e78c <ld_word>
 8010050:	4603      	mov	r3, r0
 8010052:	2b00      	cmp	r3, #0
 8010054:	d001      	beq.n	801005a <find_volume+0x38e>
 8010056:	230d      	movs	r3, #13
 8010058:	e0ae      	b.n	80101b8 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801005a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801005c:	891b      	ldrh	r3, [r3, #8]
 801005e:	2b00      	cmp	r3, #0
 8010060:	d001      	beq.n	8010066 <find_volume+0x39a>
 8010062:	230d      	movs	r3, #13
 8010064:	e0a8      	b.n	80101b8 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010068:	3334      	adds	r3, #52	; 0x34
 801006a:	332c      	adds	r3, #44	; 0x2c
 801006c:	4618      	mov	r0, r3
 801006e:	f7fe fba5 	bl	800e7bc <ld_dword>
 8010072:	4602      	mov	r2, r0
 8010074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010076:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010078:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801007a:	699b      	ldr	r3, [r3, #24]
 801007c:	009b      	lsls	r3, r3, #2
 801007e:	647b      	str	r3, [r7, #68]	; 0x44
 8010080:	e01f      	b.n	80100c2 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010084:	891b      	ldrh	r3, [r3, #8]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d101      	bne.n	801008e <find_volume+0x3c2>
 801008a:	230d      	movs	r3, #13
 801008c:	e094      	b.n	80101b8 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801008e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010092:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010094:	441a      	add	r2, r3
 8010096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010098:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 801009a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801009e:	2b02      	cmp	r3, #2
 80100a0:	d103      	bne.n	80100aa <find_volume+0x3de>
 80100a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a4:	699b      	ldr	r3, [r3, #24]
 80100a6:	005b      	lsls	r3, r3, #1
 80100a8:	e00a      	b.n	80100c0 <find_volume+0x3f4>
 80100aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ac:	699a      	ldr	r2, [r3, #24]
 80100ae:	4613      	mov	r3, r2
 80100b0:	005b      	lsls	r3, r3, #1
 80100b2:	4413      	add	r3, r2
 80100b4:	085a      	lsrs	r2, r3, #1
 80100b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b8:	699b      	ldr	r3, [r3, #24]
 80100ba:	f003 0301 	and.w	r3, r3, #1
 80100be:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80100c0:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80100c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c4:	69da      	ldr	r2, [r3, #28]
 80100c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c8:	899b      	ldrh	r3, [r3, #12]
 80100ca:	4619      	mov	r1, r3
 80100cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100ce:	440b      	add	r3, r1
 80100d0:	3b01      	subs	r3, #1
 80100d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80100d4:	8989      	ldrh	r1, [r1, #12]
 80100d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80100da:	429a      	cmp	r2, r3
 80100dc:	d201      	bcs.n	80100e2 <find_volume+0x416>
 80100de:	230d      	movs	r3, #13
 80100e0:	e06a      	b.n	80101b8 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80100e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100e8:	615a      	str	r2, [r3, #20]
 80100ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ec:	695a      	ldr	r2, [r3, #20]
 80100ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f0:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80100f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f4:	2280      	movs	r2, #128	; 0x80
 80100f6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80100f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80100fc:	2b03      	cmp	r3, #3
 80100fe:	d149      	bne.n	8010194 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010100:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010102:	3334      	adds	r3, #52	; 0x34
 8010104:	3330      	adds	r3, #48	; 0x30
 8010106:	4618      	mov	r0, r3
 8010108:	f7fe fb40 	bl	800e78c <ld_word>
 801010c:	4603      	mov	r3, r0
 801010e:	2b01      	cmp	r3, #1
 8010110:	d140      	bne.n	8010194 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010112:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010114:	3301      	adds	r3, #1
 8010116:	4619      	mov	r1, r3
 8010118:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801011a:	f7fe fde7 	bl	800ecec <move_window>
 801011e:	4603      	mov	r3, r0
 8010120:	2b00      	cmp	r3, #0
 8010122:	d137      	bne.n	8010194 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8010124:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010126:	2200      	movs	r2, #0
 8010128:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801012a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801012c:	3334      	adds	r3, #52	; 0x34
 801012e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010132:	4618      	mov	r0, r3
 8010134:	f7fe fb2a 	bl	800e78c <ld_word>
 8010138:	4603      	mov	r3, r0
 801013a:	461a      	mov	r2, r3
 801013c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010140:	429a      	cmp	r2, r3
 8010142:	d127      	bne.n	8010194 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010146:	3334      	adds	r3, #52	; 0x34
 8010148:	4618      	mov	r0, r3
 801014a:	f7fe fb37 	bl	800e7bc <ld_dword>
 801014e:	4603      	mov	r3, r0
 8010150:	4a1b      	ldr	r2, [pc, #108]	; (80101c0 <find_volume+0x4f4>)
 8010152:	4293      	cmp	r3, r2
 8010154:	d11e      	bne.n	8010194 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010156:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010158:	3334      	adds	r3, #52	; 0x34
 801015a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801015e:	4618      	mov	r0, r3
 8010160:	f7fe fb2c 	bl	800e7bc <ld_dword>
 8010164:	4603      	mov	r3, r0
 8010166:	4a17      	ldr	r2, [pc, #92]	; (80101c4 <find_volume+0x4f8>)
 8010168:	4293      	cmp	r3, r2
 801016a:	d113      	bne.n	8010194 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801016c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801016e:	3334      	adds	r3, #52	; 0x34
 8010170:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010174:	4618      	mov	r0, r3
 8010176:	f7fe fb21 	bl	800e7bc <ld_dword>
 801017a:	4602      	mov	r2, r0
 801017c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801017e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010182:	3334      	adds	r3, #52	; 0x34
 8010184:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010188:	4618      	mov	r0, r3
 801018a:	f7fe fb17 	bl	800e7bc <ld_dword>
 801018e:	4602      	mov	r2, r0
 8010190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010192:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010196:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801019a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801019c:	4b0a      	ldr	r3, [pc, #40]	; (80101c8 <find_volume+0x4fc>)
 801019e:	881b      	ldrh	r3, [r3, #0]
 80101a0:	3301      	adds	r3, #1
 80101a2:	b29a      	uxth	r2, r3
 80101a4:	4b08      	ldr	r3, [pc, #32]	; (80101c8 <find_volume+0x4fc>)
 80101a6:	801a      	strh	r2, [r3, #0]
 80101a8:	4b07      	ldr	r3, [pc, #28]	; (80101c8 <find_volume+0x4fc>)
 80101aa:	881a      	ldrh	r2, [r3, #0]
 80101ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ae:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80101b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80101b2:	f7fe fd33 	bl	800ec1c <clear_lock>
#endif
	return FR_OK;
 80101b6:	2300      	movs	r3, #0
}
 80101b8:	4618      	mov	r0, r3
 80101ba:	3758      	adds	r7, #88	; 0x58
 80101bc:	46bd      	mov	sp, r7
 80101be:	bd80      	pop	{r7, pc}
 80101c0:	41615252 	.word	0x41615252
 80101c4:	61417272 	.word	0x61417272
 80101c8:	20000acc 	.word	0x20000acc

080101cc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b084      	sub	sp, #16
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80101d6:	2309      	movs	r3, #9
 80101d8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2b00      	cmp	r3, #0
 80101de:	d01c      	beq.n	801021a <validate+0x4e>
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d018      	beq.n	801021a <validate+0x4e>
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	781b      	ldrb	r3, [r3, #0]
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d013      	beq.n	801021a <validate+0x4e>
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	889a      	ldrh	r2, [r3, #4]
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	681b      	ldr	r3, [r3, #0]
 80101fa:	88db      	ldrh	r3, [r3, #6]
 80101fc:	429a      	cmp	r2, r3
 80101fe:	d10c      	bne.n	801021a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	681b      	ldr	r3, [r3, #0]
 8010204:	785b      	ldrb	r3, [r3, #1]
 8010206:	4618      	mov	r0, r3
 8010208:	f7fe fa22 	bl	800e650 <disk_status>
 801020c:	4603      	mov	r3, r0
 801020e:	f003 0301 	and.w	r3, r3, #1
 8010212:	2b00      	cmp	r3, #0
 8010214:	d101      	bne.n	801021a <validate+0x4e>
			res = FR_OK;
 8010216:	2300      	movs	r3, #0
 8010218:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801021a:	7bfb      	ldrb	r3, [r7, #15]
 801021c:	2b00      	cmp	r3, #0
 801021e:	d102      	bne.n	8010226 <validate+0x5a>
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	681b      	ldr	r3, [r3, #0]
 8010224:	e000      	b.n	8010228 <validate+0x5c>
 8010226:	2300      	movs	r3, #0
 8010228:	683a      	ldr	r2, [r7, #0]
 801022a:	6013      	str	r3, [r2, #0]
	return res;
 801022c:	7bfb      	ldrb	r3, [r7, #15]
}
 801022e:	4618      	mov	r0, r3
 8010230:	3710      	adds	r7, #16
 8010232:	46bd      	mov	sp, r7
 8010234:	bd80      	pop	{r7, pc}
	...

08010238 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b088      	sub	sp, #32
 801023c:	af00      	add	r7, sp, #0
 801023e:	60f8      	str	r0, [r7, #12]
 8010240:	60b9      	str	r1, [r7, #8]
 8010242:	4613      	mov	r3, r2
 8010244:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010246:	68bb      	ldr	r3, [r7, #8]
 8010248:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801024a:	f107 0310 	add.w	r3, r7, #16
 801024e:	4618      	mov	r0, r3
 8010250:	f7ff fca2 	bl	800fb98 <get_ldnumber>
 8010254:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010256:	69fb      	ldr	r3, [r7, #28]
 8010258:	2b00      	cmp	r3, #0
 801025a:	da01      	bge.n	8010260 <f_mount+0x28>
 801025c:	230b      	movs	r3, #11
 801025e:	e02b      	b.n	80102b8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8010260:	4a17      	ldr	r2, [pc, #92]	; (80102c0 <f_mount+0x88>)
 8010262:	69fb      	ldr	r3, [r7, #28]
 8010264:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010268:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 801026a:	69bb      	ldr	r3, [r7, #24]
 801026c:	2b00      	cmp	r3, #0
 801026e:	d005      	beq.n	801027c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8010270:	69b8      	ldr	r0, [r7, #24]
 8010272:	f7fe fcd3 	bl	800ec1c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010276:	69bb      	ldr	r3, [r7, #24]
 8010278:	2200      	movs	r2, #0
 801027a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	2b00      	cmp	r3, #0
 8010280:	d002      	beq.n	8010288 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	2200      	movs	r2, #0
 8010286:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010288:	68fa      	ldr	r2, [r7, #12]
 801028a:	490d      	ldr	r1, [pc, #52]	; (80102c0 <f_mount+0x88>)
 801028c:	69fb      	ldr	r3, [r7, #28]
 801028e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d002      	beq.n	801029e <f_mount+0x66>
 8010298:	79fb      	ldrb	r3, [r7, #7]
 801029a:	2b01      	cmp	r3, #1
 801029c:	d001      	beq.n	80102a2 <f_mount+0x6a>
 801029e:	2300      	movs	r3, #0
 80102a0:	e00a      	b.n	80102b8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80102a2:	f107 010c 	add.w	r1, r7, #12
 80102a6:	f107 0308 	add.w	r3, r7, #8
 80102aa:	2200      	movs	r2, #0
 80102ac:	4618      	mov	r0, r3
 80102ae:	f7ff fd0d 	bl	800fccc <find_volume>
 80102b2:	4603      	mov	r3, r0
 80102b4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80102b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80102b8:	4618      	mov	r0, r3
 80102ba:	3720      	adds	r7, #32
 80102bc:	46bd      	mov	sp, r7
 80102be:	bd80      	pop	{r7, pc}
 80102c0:	20000ac8 	.word	0x20000ac8

080102c4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80102c4:	b580      	push	{r7, lr}
 80102c6:	b098      	sub	sp, #96	; 0x60
 80102c8:	af00      	add	r7, sp, #0
 80102ca:	60f8      	str	r0, [r7, #12]
 80102cc:	60b9      	str	r1, [r7, #8]
 80102ce:	4613      	mov	r3, r2
 80102d0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	2b00      	cmp	r3, #0
 80102d6:	d101      	bne.n	80102dc <f_open+0x18>
 80102d8:	2309      	movs	r3, #9
 80102da:	e1bb      	b.n	8010654 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80102dc:	79fb      	ldrb	r3, [r7, #7]
 80102de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80102e2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80102e4:	79fa      	ldrb	r2, [r7, #7]
 80102e6:	f107 0110 	add.w	r1, r7, #16
 80102ea:	f107 0308 	add.w	r3, r7, #8
 80102ee:	4618      	mov	r0, r3
 80102f0:	f7ff fcec 	bl	800fccc <find_volume>
 80102f4:	4603      	mov	r3, r0
 80102f6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80102fa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80102fe:	2b00      	cmp	r3, #0
 8010300:	f040 819f 	bne.w	8010642 <f_open+0x37e>
		dj.obj.fs = fs;
 8010304:	693b      	ldr	r3, [r7, #16]
 8010306:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010308:	68ba      	ldr	r2, [r7, #8]
 801030a:	f107 0314 	add.w	r3, r7, #20
 801030e:	4611      	mov	r1, r2
 8010310:	4618      	mov	r0, r3
 8010312:	f7ff fbcb 	bl	800faac <follow_path>
 8010316:	4603      	mov	r3, r0
 8010318:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801031c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010320:	2b00      	cmp	r3, #0
 8010322:	d11a      	bne.n	801035a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010324:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010328:	b25b      	sxtb	r3, r3
 801032a:	2b00      	cmp	r3, #0
 801032c:	da03      	bge.n	8010336 <f_open+0x72>
				res = FR_INVALID_NAME;
 801032e:	2306      	movs	r3, #6
 8010330:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010334:	e011      	b.n	801035a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010336:	79fb      	ldrb	r3, [r7, #7]
 8010338:	f023 0301 	bic.w	r3, r3, #1
 801033c:	2b00      	cmp	r3, #0
 801033e:	bf14      	ite	ne
 8010340:	2301      	movne	r3, #1
 8010342:	2300      	moveq	r3, #0
 8010344:	b2db      	uxtb	r3, r3
 8010346:	461a      	mov	r2, r3
 8010348:	f107 0314 	add.w	r3, r7, #20
 801034c:	4611      	mov	r1, r2
 801034e:	4618      	mov	r0, r3
 8010350:	f7fe fb1c 	bl	800e98c <chk_lock>
 8010354:	4603      	mov	r3, r0
 8010356:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 801035a:	79fb      	ldrb	r3, [r7, #7]
 801035c:	f003 031c 	and.w	r3, r3, #28
 8010360:	2b00      	cmp	r3, #0
 8010362:	d07f      	beq.n	8010464 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010364:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010368:	2b00      	cmp	r3, #0
 801036a:	d017      	beq.n	801039c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 801036c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010370:	2b04      	cmp	r3, #4
 8010372:	d10e      	bne.n	8010392 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010374:	f7fe fb66 	bl	800ea44 <enq_lock>
 8010378:	4603      	mov	r3, r0
 801037a:	2b00      	cmp	r3, #0
 801037c:	d006      	beq.n	801038c <f_open+0xc8>
 801037e:	f107 0314 	add.w	r3, r7, #20
 8010382:	4618      	mov	r0, r3
 8010384:	f7ff facc 	bl	800f920 <dir_register>
 8010388:	4603      	mov	r3, r0
 801038a:	e000      	b.n	801038e <f_open+0xca>
 801038c:	2312      	movs	r3, #18
 801038e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8010392:	79fb      	ldrb	r3, [r7, #7]
 8010394:	f043 0308 	orr.w	r3, r3, #8
 8010398:	71fb      	strb	r3, [r7, #7]
 801039a:	e010      	b.n	80103be <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801039c:	7ebb      	ldrb	r3, [r7, #26]
 801039e:	f003 0311 	and.w	r3, r3, #17
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d003      	beq.n	80103ae <f_open+0xea>
					res = FR_DENIED;
 80103a6:	2307      	movs	r3, #7
 80103a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80103ac:	e007      	b.n	80103be <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80103ae:	79fb      	ldrb	r3, [r7, #7]
 80103b0:	f003 0304 	and.w	r3, r3, #4
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d002      	beq.n	80103be <f_open+0xfa>
 80103b8:	2308      	movs	r3, #8
 80103ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80103be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103c2:	2b00      	cmp	r3, #0
 80103c4:	d168      	bne.n	8010498 <f_open+0x1d4>
 80103c6:	79fb      	ldrb	r3, [r7, #7]
 80103c8:	f003 0308 	and.w	r3, r3, #8
 80103cc:	2b00      	cmp	r3, #0
 80103ce:	d063      	beq.n	8010498 <f_open+0x1d4>
				dw = GET_FATTIME();
 80103d0:	f7fb ff26 	bl	800c220 <get_fattime>
 80103d4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80103d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103d8:	330e      	adds	r3, #14
 80103da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80103dc:	4618      	mov	r0, r3
 80103de:	f7fe fa2b 	bl	800e838 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80103e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103e4:	3316      	adds	r3, #22
 80103e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80103e8:	4618      	mov	r0, r3
 80103ea:	f7fe fa25 	bl	800e838 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80103ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80103f0:	330b      	adds	r3, #11
 80103f2:	2220      	movs	r2, #32
 80103f4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80103f6:	693b      	ldr	r3, [r7, #16]
 80103f8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80103fa:	4611      	mov	r1, r2
 80103fc:	4618      	mov	r0, r3
 80103fe:	f7ff f9fb 	bl	800f7f8 <ld_clust>
 8010402:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010404:	693b      	ldr	r3, [r7, #16]
 8010406:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010408:	2200      	movs	r2, #0
 801040a:	4618      	mov	r0, r3
 801040c:	f7ff fa13 	bl	800f836 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8010410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010412:	331c      	adds	r3, #28
 8010414:	2100      	movs	r1, #0
 8010416:	4618      	mov	r0, r3
 8010418:	f7fe fa0e 	bl	800e838 <st_dword>
					fs->wflag = 1;
 801041c:	693b      	ldr	r3, [r7, #16]
 801041e:	2201      	movs	r2, #1
 8010420:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8010422:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010424:	2b00      	cmp	r3, #0
 8010426:	d037      	beq.n	8010498 <f_open+0x1d4>
						dw = fs->winsect;
 8010428:	693b      	ldr	r3, [r7, #16]
 801042a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801042c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801042e:	f107 0314 	add.w	r3, r7, #20
 8010432:	2200      	movs	r2, #0
 8010434:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010436:	4618      	mov	r0, r3
 8010438:	f7fe ff03 	bl	800f242 <remove_chain>
 801043c:	4603      	mov	r3, r0
 801043e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8010442:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010446:	2b00      	cmp	r3, #0
 8010448:	d126      	bne.n	8010498 <f_open+0x1d4>
							res = move_window(fs, dw);
 801044a:	693b      	ldr	r3, [r7, #16]
 801044c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801044e:	4618      	mov	r0, r3
 8010450:	f7fe fc4c 	bl	800ecec <move_window>
 8010454:	4603      	mov	r3, r0
 8010456:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801045a:	693b      	ldr	r3, [r7, #16]
 801045c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801045e:	3a01      	subs	r2, #1
 8010460:	611a      	str	r2, [r3, #16]
 8010462:	e019      	b.n	8010498 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010464:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010468:	2b00      	cmp	r3, #0
 801046a:	d115      	bne.n	8010498 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801046c:	7ebb      	ldrb	r3, [r7, #26]
 801046e:	f003 0310 	and.w	r3, r3, #16
 8010472:	2b00      	cmp	r3, #0
 8010474:	d003      	beq.n	801047e <f_open+0x1ba>
					res = FR_NO_FILE;
 8010476:	2304      	movs	r3, #4
 8010478:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801047c:	e00c      	b.n	8010498 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801047e:	79fb      	ldrb	r3, [r7, #7]
 8010480:	f003 0302 	and.w	r3, r3, #2
 8010484:	2b00      	cmp	r3, #0
 8010486:	d007      	beq.n	8010498 <f_open+0x1d4>
 8010488:	7ebb      	ldrb	r3, [r7, #26]
 801048a:	f003 0301 	and.w	r3, r3, #1
 801048e:	2b00      	cmp	r3, #0
 8010490:	d002      	beq.n	8010498 <f_open+0x1d4>
						res = FR_DENIED;
 8010492:	2307      	movs	r3, #7
 8010494:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8010498:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801049c:	2b00      	cmp	r3, #0
 801049e:	d128      	bne.n	80104f2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80104a0:	79fb      	ldrb	r3, [r7, #7]
 80104a2:	f003 0308 	and.w	r3, r3, #8
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	d003      	beq.n	80104b2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80104aa:	79fb      	ldrb	r3, [r7, #7]
 80104ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104b0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80104ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80104c0:	79fb      	ldrb	r3, [r7, #7]
 80104c2:	f023 0301 	bic.w	r3, r3, #1
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	bf14      	ite	ne
 80104ca:	2301      	movne	r3, #1
 80104cc:	2300      	moveq	r3, #0
 80104ce:	b2db      	uxtb	r3, r3
 80104d0:	461a      	mov	r2, r3
 80104d2:	f107 0314 	add.w	r3, r7, #20
 80104d6:	4611      	mov	r1, r2
 80104d8:	4618      	mov	r0, r3
 80104da:	f7fe fad5 	bl	800ea88 <inc_lock>
 80104de:	4602      	mov	r2, r0
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	691b      	ldr	r3, [r3, #16]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d102      	bne.n	80104f2 <f_open+0x22e>
 80104ec:	2302      	movs	r3, #2
 80104ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80104f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	f040 80a3 	bne.w	8010642 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80104fc:	693b      	ldr	r3, [r7, #16]
 80104fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010500:	4611      	mov	r1, r2
 8010502:	4618      	mov	r0, r3
 8010504:	f7ff f978 	bl	800f7f8 <ld_clust>
 8010508:	4602      	mov	r2, r0
 801050a:	68fb      	ldr	r3, [r7, #12]
 801050c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801050e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010510:	331c      	adds	r3, #28
 8010512:	4618      	mov	r0, r3
 8010514:	f7fe f952 	bl	800e7bc <ld_dword>
 8010518:	4602      	mov	r2, r0
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801051e:	68fb      	ldr	r3, [r7, #12]
 8010520:	2200      	movs	r2, #0
 8010522:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010524:	693a      	ldr	r2, [r7, #16]
 8010526:	68fb      	ldr	r3, [r7, #12]
 8010528:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801052a:	693b      	ldr	r3, [r7, #16]
 801052c:	88da      	ldrh	r2, [r3, #6]
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	79fa      	ldrb	r2, [r7, #7]
 8010536:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	2200      	movs	r2, #0
 801053c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801053e:	68fb      	ldr	r3, [r7, #12]
 8010540:	2200      	movs	r2, #0
 8010542:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	2200      	movs	r2, #0
 8010548:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	3330      	adds	r3, #48	; 0x30
 801054e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8010552:	2100      	movs	r1, #0
 8010554:	4618      	mov	r0, r3
 8010556:	f7fe f9bc 	bl	800e8d2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801055a:	79fb      	ldrb	r3, [r7, #7]
 801055c:	f003 0320 	and.w	r3, r3, #32
 8010560:	2b00      	cmp	r3, #0
 8010562:	d06e      	beq.n	8010642 <f_open+0x37e>
 8010564:	68fb      	ldr	r3, [r7, #12]
 8010566:	68db      	ldr	r3, [r3, #12]
 8010568:	2b00      	cmp	r3, #0
 801056a:	d06a      	beq.n	8010642 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	68da      	ldr	r2, [r3, #12]
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010574:	693b      	ldr	r3, [r7, #16]
 8010576:	895b      	ldrh	r3, [r3, #10]
 8010578:	461a      	mov	r2, r3
 801057a:	693b      	ldr	r3, [r7, #16]
 801057c:	899b      	ldrh	r3, [r3, #12]
 801057e:	fb02 f303 	mul.w	r3, r2, r3
 8010582:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	689b      	ldr	r3, [r3, #8]
 8010588:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	68db      	ldr	r3, [r3, #12]
 801058e:	657b      	str	r3, [r7, #84]	; 0x54
 8010590:	e016      	b.n	80105c0 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010596:	4618      	mov	r0, r3
 8010598:	f7fe fc65 	bl	800ee66 <get_fat>
 801059c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801059e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80105a0:	2b01      	cmp	r3, #1
 80105a2:	d802      	bhi.n	80105aa <f_open+0x2e6>
 80105a4:	2302      	movs	r3, #2
 80105a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80105aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80105ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80105b0:	d102      	bne.n	80105b8 <f_open+0x2f4>
 80105b2:	2301      	movs	r3, #1
 80105b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80105b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80105ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105bc:	1ad3      	subs	r3, r2, r3
 80105be:	657b      	str	r3, [r7, #84]	; 0x54
 80105c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d103      	bne.n	80105d0 <f_open+0x30c>
 80105c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80105ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80105cc:	429a      	cmp	r2, r3
 80105ce:	d8e0      	bhi.n	8010592 <f_open+0x2ce>
				}
				fp->clust = clst;
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80105d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80105d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80105da:	2b00      	cmp	r3, #0
 80105dc:	d131      	bne.n	8010642 <f_open+0x37e>
 80105de:	693b      	ldr	r3, [r7, #16]
 80105e0:	899b      	ldrh	r3, [r3, #12]
 80105e2:	461a      	mov	r2, r3
 80105e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80105e6:	fbb3 f1f2 	udiv	r1, r3, r2
 80105ea:	fb01 f202 	mul.w	r2, r1, r2
 80105ee:	1a9b      	subs	r3, r3, r2
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d026      	beq.n	8010642 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80105f4:	693b      	ldr	r3, [r7, #16]
 80105f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80105f8:	4618      	mov	r0, r3
 80105fa:	f7fe fc15 	bl	800ee28 <clust2sect>
 80105fe:	6478      	str	r0, [r7, #68]	; 0x44
 8010600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010602:	2b00      	cmp	r3, #0
 8010604:	d103      	bne.n	801060e <f_open+0x34a>
						res = FR_INT_ERR;
 8010606:	2302      	movs	r3, #2
 8010608:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801060c:	e019      	b.n	8010642 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801060e:	693b      	ldr	r3, [r7, #16]
 8010610:	899b      	ldrh	r3, [r3, #12]
 8010612:	461a      	mov	r2, r3
 8010614:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010616:	fbb3 f2f2 	udiv	r2, r3, r2
 801061a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801061c:	441a      	add	r2, r3
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010622:	693b      	ldr	r3, [r7, #16]
 8010624:	7858      	ldrb	r0, [r3, #1]
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	6a1a      	ldr	r2, [r3, #32]
 8010630:	2301      	movs	r3, #1
 8010632:	f7fe f84d 	bl	800e6d0 <disk_read>
 8010636:	4603      	mov	r3, r0
 8010638:	2b00      	cmp	r3, #0
 801063a:	d002      	beq.n	8010642 <f_open+0x37e>
 801063c:	2301      	movs	r3, #1
 801063e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010642:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010646:	2b00      	cmp	r3, #0
 8010648:	d002      	beq.n	8010650 <f_open+0x38c>
 801064a:	68fb      	ldr	r3, [r7, #12]
 801064c:	2200      	movs	r2, #0
 801064e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010650:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8010654:	4618      	mov	r0, r3
 8010656:	3760      	adds	r7, #96	; 0x60
 8010658:	46bd      	mov	sp, r7
 801065a:	bd80      	pop	{r7, pc}

0801065c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b08c      	sub	sp, #48	; 0x30
 8010660:	af00      	add	r7, sp, #0
 8010662:	60f8      	str	r0, [r7, #12]
 8010664:	60b9      	str	r1, [r7, #8]
 8010666:	607a      	str	r2, [r7, #4]
 8010668:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 801066a:	68bb      	ldr	r3, [r7, #8]
 801066c:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 801066e:	683b      	ldr	r3, [r7, #0]
 8010670:	2200      	movs	r2, #0
 8010672:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8010674:	68fb      	ldr	r3, [r7, #12]
 8010676:	f107 0210 	add.w	r2, r7, #16
 801067a:	4611      	mov	r1, r2
 801067c:	4618      	mov	r0, r3
 801067e:	f7ff fda5 	bl	80101cc <validate>
 8010682:	4603      	mov	r3, r0
 8010684:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010688:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801068c:	2b00      	cmp	r3, #0
 801068e:	d107      	bne.n	80106a0 <f_write+0x44>
 8010690:	68fb      	ldr	r3, [r7, #12]
 8010692:	7d5b      	ldrb	r3, [r3, #21]
 8010694:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010698:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801069c:	2b00      	cmp	r3, #0
 801069e:	d002      	beq.n	80106a6 <f_write+0x4a>
 80106a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106a4:	e16a      	b.n	801097c <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	7d1b      	ldrb	r3, [r3, #20]
 80106aa:	f003 0302 	and.w	r3, r3, #2
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d101      	bne.n	80106b6 <f_write+0x5a>
 80106b2:	2307      	movs	r3, #7
 80106b4:	e162      	b.n	801097c <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80106b6:	68fb      	ldr	r3, [r7, #12]
 80106b8:	699a      	ldr	r2, [r3, #24]
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	441a      	add	r2, r3
 80106be:	68fb      	ldr	r3, [r7, #12]
 80106c0:	699b      	ldr	r3, [r3, #24]
 80106c2:	429a      	cmp	r2, r3
 80106c4:	f080 814c 	bcs.w	8010960 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	699b      	ldr	r3, [r3, #24]
 80106cc:	43db      	mvns	r3, r3
 80106ce:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80106d0:	e146      	b.n	8010960 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80106d2:	68fb      	ldr	r3, [r7, #12]
 80106d4:	699b      	ldr	r3, [r3, #24]
 80106d6:	693a      	ldr	r2, [r7, #16]
 80106d8:	8992      	ldrh	r2, [r2, #12]
 80106da:	fbb3 f1f2 	udiv	r1, r3, r2
 80106de:	fb01 f202 	mul.w	r2, r1, r2
 80106e2:	1a9b      	subs	r3, r3, r2
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	f040 80f1 	bne.w	80108cc <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80106ea:	68fb      	ldr	r3, [r7, #12]
 80106ec:	699b      	ldr	r3, [r3, #24]
 80106ee:	693a      	ldr	r2, [r7, #16]
 80106f0:	8992      	ldrh	r2, [r2, #12]
 80106f2:	fbb3 f3f2 	udiv	r3, r3, r2
 80106f6:	693a      	ldr	r2, [r7, #16]
 80106f8:	8952      	ldrh	r2, [r2, #10]
 80106fa:	3a01      	subs	r2, #1
 80106fc:	4013      	ands	r3, r2
 80106fe:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8010700:	69bb      	ldr	r3, [r7, #24]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d143      	bne.n	801078e <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010706:	68fb      	ldr	r3, [r7, #12]
 8010708:	699b      	ldr	r3, [r3, #24]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d10c      	bne.n	8010728 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	689b      	ldr	r3, [r3, #8]
 8010712:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010716:	2b00      	cmp	r3, #0
 8010718:	d11a      	bne.n	8010750 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	2100      	movs	r1, #0
 801071e:	4618      	mov	r0, r3
 8010720:	f7fe fdf4 	bl	800f30c <create_chain>
 8010724:	62b8      	str	r0, [r7, #40]	; 0x28
 8010726:	e013      	b.n	8010750 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801072c:	2b00      	cmp	r3, #0
 801072e:	d007      	beq.n	8010740 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	699b      	ldr	r3, [r3, #24]
 8010734:	4619      	mov	r1, r3
 8010736:	68f8      	ldr	r0, [r7, #12]
 8010738:	f7fe fe80 	bl	800f43c <clmt_clust>
 801073c:	62b8      	str	r0, [r7, #40]	; 0x28
 801073e:	e007      	b.n	8010750 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8010740:	68fa      	ldr	r2, [r7, #12]
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	69db      	ldr	r3, [r3, #28]
 8010746:	4619      	mov	r1, r3
 8010748:	4610      	mov	r0, r2
 801074a:	f7fe fddf 	bl	800f30c <create_chain>
 801074e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8010750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010752:	2b00      	cmp	r3, #0
 8010754:	f000 8109 	beq.w	801096a <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8010758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801075a:	2b01      	cmp	r3, #1
 801075c:	d104      	bne.n	8010768 <f_write+0x10c>
 801075e:	68fb      	ldr	r3, [r7, #12]
 8010760:	2202      	movs	r2, #2
 8010762:	755a      	strb	r2, [r3, #21]
 8010764:	2302      	movs	r3, #2
 8010766:	e109      	b.n	801097c <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801076a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801076e:	d104      	bne.n	801077a <f_write+0x11e>
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	2201      	movs	r2, #1
 8010774:	755a      	strb	r2, [r3, #21]
 8010776:	2301      	movs	r3, #1
 8010778:	e100      	b.n	801097c <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 801077a:	68fb      	ldr	r3, [r7, #12]
 801077c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801077e:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8010780:	68fb      	ldr	r3, [r7, #12]
 8010782:	689b      	ldr	r3, [r3, #8]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d102      	bne.n	801078e <f_write+0x132>
 8010788:	68fb      	ldr	r3, [r7, #12]
 801078a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801078c:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 801078e:	68fb      	ldr	r3, [r7, #12]
 8010790:	7d1b      	ldrb	r3, [r3, #20]
 8010792:	b25b      	sxtb	r3, r3
 8010794:	2b00      	cmp	r3, #0
 8010796:	da18      	bge.n	80107ca <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010798:	693b      	ldr	r3, [r7, #16]
 801079a:	7858      	ldrb	r0, [r3, #1]
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	6a1a      	ldr	r2, [r3, #32]
 80107a6:	2301      	movs	r3, #1
 80107a8:	f7fd ffb2 	bl	800e710 <disk_write>
 80107ac:	4603      	mov	r3, r0
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d004      	beq.n	80107bc <f_write+0x160>
 80107b2:	68fb      	ldr	r3, [r7, #12]
 80107b4:	2201      	movs	r2, #1
 80107b6:	755a      	strb	r2, [r3, #21]
 80107b8:	2301      	movs	r3, #1
 80107ba:	e0df      	b.n	801097c <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80107bc:	68fb      	ldr	r3, [r7, #12]
 80107be:	7d1b      	ldrb	r3, [r3, #20]
 80107c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80107c4:	b2da      	uxtb	r2, r3
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80107ca:	693a      	ldr	r2, [r7, #16]
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	69db      	ldr	r3, [r3, #28]
 80107d0:	4619      	mov	r1, r3
 80107d2:	4610      	mov	r0, r2
 80107d4:	f7fe fb28 	bl	800ee28 <clust2sect>
 80107d8:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80107da:	697b      	ldr	r3, [r7, #20]
 80107dc:	2b00      	cmp	r3, #0
 80107de:	d104      	bne.n	80107ea <f_write+0x18e>
 80107e0:	68fb      	ldr	r3, [r7, #12]
 80107e2:	2202      	movs	r2, #2
 80107e4:	755a      	strb	r2, [r3, #21]
 80107e6:	2302      	movs	r3, #2
 80107e8:	e0c8      	b.n	801097c <f_write+0x320>
			sect += csect;
 80107ea:	697a      	ldr	r2, [r7, #20]
 80107ec:	69bb      	ldr	r3, [r7, #24]
 80107ee:	4413      	add	r3, r2
 80107f0:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80107f2:	693b      	ldr	r3, [r7, #16]
 80107f4:	899b      	ldrh	r3, [r3, #12]
 80107f6:	461a      	mov	r2, r3
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80107fe:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8010800:	6a3b      	ldr	r3, [r7, #32]
 8010802:	2b00      	cmp	r3, #0
 8010804:	d043      	beq.n	801088e <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010806:	69ba      	ldr	r2, [r7, #24]
 8010808:	6a3b      	ldr	r3, [r7, #32]
 801080a:	4413      	add	r3, r2
 801080c:	693a      	ldr	r2, [r7, #16]
 801080e:	8952      	ldrh	r2, [r2, #10]
 8010810:	4293      	cmp	r3, r2
 8010812:	d905      	bls.n	8010820 <f_write+0x1c4>
					cc = fs->csize - csect;
 8010814:	693b      	ldr	r3, [r7, #16]
 8010816:	895b      	ldrh	r3, [r3, #10]
 8010818:	461a      	mov	r2, r3
 801081a:	69bb      	ldr	r3, [r7, #24]
 801081c:	1ad3      	subs	r3, r2, r3
 801081e:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010820:	693b      	ldr	r3, [r7, #16]
 8010822:	7858      	ldrb	r0, [r3, #1]
 8010824:	6a3b      	ldr	r3, [r7, #32]
 8010826:	697a      	ldr	r2, [r7, #20]
 8010828:	69f9      	ldr	r1, [r7, #28]
 801082a:	f7fd ff71 	bl	800e710 <disk_write>
 801082e:	4603      	mov	r3, r0
 8010830:	2b00      	cmp	r3, #0
 8010832:	d004      	beq.n	801083e <f_write+0x1e2>
 8010834:	68fb      	ldr	r3, [r7, #12]
 8010836:	2201      	movs	r2, #1
 8010838:	755a      	strb	r2, [r3, #21]
 801083a:	2301      	movs	r3, #1
 801083c:	e09e      	b.n	801097c <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	6a1a      	ldr	r2, [r3, #32]
 8010842:	697b      	ldr	r3, [r7, #20]
 8010844:	1ad3      	subs	r3, r2, r3
 8010846:	6a3a      	ldr	r2, [r7, #32]
 8010848:	429a      	cmp	r2, r3
 801084a:	d918      	bls.n	801087e <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801084c:	68fb      	ldr	r3, [r7, #12]
 801084e:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	6a1a      	ldr	r2, [r3, #32]
 8010856:	697b      	ldr	r3, [r7, #20]
 8010858:	1ad3      	subs	r3, r2, r3
 801085a:	693a      	ldr	r2, [r7, #16]
 801085c:	8992      	ldrh	r2, [r2, #12]
 801085e:	fb02 f303 	mul.w	r3, r2, r3
 8010862:	69fa      	ldr	r2, [r7, #28]
 8010864:	18d1      	adds	r1, r2, r3
 8010866:	693b      	ldr	r3, [r7, #16]
 8010868:	899b      	ldrh	r3, [r3, #12]
 801086a:	461a      	mov	r2, r3
 801086c:	f7fe f810 	bl	800e890 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010870:	68fb      	ldr	r3, [r7, #12]
 8010872:	7d1b      	ldrb	r3, [r3, #20]
 8010874:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010878:	b2da      	uxtb	r2, r3
 801087a:	68fb      	ldr	r3, [r7, #12]
 801087c:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801087e:	693b      	ldr	r3, [r7, #16]
 8010880:	899b      	ldrh	r3, [r3, #12]
 8010882:	461a      	mov	r2, r3
 8010884:	6a3b      	ldr	r3, [r7, #32]
 8010886:	fb02 f303 	mul.w	r3, r2, r3
 801088a:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 801088c:	e04b      	b.n	8010926 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 801088e:	68fb      	ldr	r3, [r7, #12]
 8010890:	6a1b      	ldr	r3, [r3, #32]
 8010892:	697a      	ldr	r2, [r7, #20]
 8010894:	429a      	cmp	r2, r3
 8010896:	d016      	beq.n	80108c6 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8010898:	68fb      	ldr	r3, [r7, #12]
 801089a:	699a      	ldr	r2, [r3, #24]
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80108a0:	429a      	cmp	r2, r3
 80108a2:	d210      	bcs.n	80108c6 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	7858      	ldrb	r0, [r3, #1]
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80108ae:	2301      	movs	r3, #1
 80108b0:	697a      	ldr	r2, [r7, #20]
 80108b2:	f7fd ff0d 	bl	800e6d0 <disk_read>
 80108b6:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d004      	beq.n	80108c6 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80108bc:	68fb      	ldr	r3, [r7, #12]
 80108be:	2201      	movs	r2, #1
 80108c0:	755a      	strb	r2, [r3, #21]
 80108c2:	2301      	movs	r3, #1
 80108c4:	e05a      	b.n	801097c <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80108c6:	68fb      	ldr	r3, [r7, #12]
 80108c8:	697a      	ldr	r2, [r7, #20]
 80108ca:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80108cc:	693b      	ldr	r3, [r7, #16]
 80108ce:	899b      	ldrh	r3, [r3, #12]
 80108d0:	4618      	mov	r0, r3
 80108d2:	68fb      	ldr	r3, [r7, #12]
 80108d4:	699b      	ldr	r3, [r3, #24]
 80108d6:	693a      	ldr	r2, [r7, #16]
 80108d8:	8992      	ldrh	r2, [r2, #12]
 80108da:	fbb3 f1f2 	udiv	r1, r3, r2
 80108de:	fb01 f202 	mul.w	r2, r1, r2
 80108e2:	1a9b      	subs	r3, r3, r2
 80108e4:	1ac3      	subs	r3, r0, r3
 80108e6:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80108e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	429a      	cmp	r2, r3
 80108ee:	d901      	bls.n	80108f4 <f_write+0x298>
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	699b      	ldr	r3, [r3, #24]
 80108fe:	693a      	ldr	r2, [r7, #16]
 8010900:	8992      	ldrh	r2, [r2, #12]
 8010902:	fbb3 f0f2 	udiv	r0, r3, r2
 8010906:	fb00 f202 	mul.w	r2, r0, r2
 801090a:	1a9b      	subs	r3, r3, r2
 801090c:	440b      	add	r3, r1
 801090e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010910:	69f9      	ldr	r1, [r7, #28]
 8010912:	4618      	mov	r0, r3
 8010914:	f7fd ffbc 	bl	800e890 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	7d1b      	ldrb	r3, [r3, #20]
 801091c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010920:	b2da      	uxtb	r2, r3
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010926:	69fa      	ldr	r2, [r7, #28]
 8010928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801092a:	4413      	add	r3, r2
 801092c:	61fb      	str	r3, [r7, #28]
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	699a      	ldr	r2, [r3, #24]
 8010932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010934:	441a      	add	r2, r3
 8010936:	68fb      	ldr	r3, [r7, #12]
 8010938:	619a      	str	r2, [r3, #24]
 801093a:	68fb      	ldr	r3, [r7, #12]
 801093c:	68da      	ldr	r2, [r3, #12]
 801093e:	68fb      	ldr	r3, [r7, #12]
 8010940:	699b      	ldr	r3, [r3, #24]
 8010942:	429a      	cmp	r2, r3
 8010944:	bf38      	it	cc
 8010946:	461a      	movcc	r2, r3
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	60da      	str	r2, [r3, #12]
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	681a      	ldr	r2, [r3, #0]
 8010950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010952:	441a      	add	r2, r3
 8010954:	683b      	ldr	r3, [r7, #0]
 8010956:	601a      	str	r2, [r3, #0]
 8010958:	687a      	ldr	r2, [r7, #4]
 801095a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801095c:	1ad3      	subs	r3, r2, r3
 801095e:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	2b00      	cmp	r3, #0
 8010964:	f47f aeb5 	bne.w	80106d2 <f_write+0x76>
 8010968:	e000      	b.n	801096c <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801096a:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 801096c:	68fb      	ldr	r3, [r7, #12]
 801096e:	7d1b      	ldrb	r3, [r3, #20]
 8010970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010974:	b2da      	uxtb	r2, r3
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801097a:	2300      	movs	r3, #0
}
 801097c:	4618      	mov	r0, r3
 801097e:	3730      	adds	r7, #48	; 0x30
 8010980:	46bd      	mov	sp, r7
 8010982:	bd80      	pop	{r7, pc}

08010984 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b086      	sub	sp, #24
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f107 0208 	add.w	r2, r7, #8
 8010992:	4611      	mov	r1, r2
 8010994:	4618      	mov	r0, r3
 8010996:	f7ff fc19 	bl	80101cc <validate>
 801099a:	4603      	mov	r3, r0
 801099c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 801099e:	7dfb      	ldrb	r3, [r7, #23]
 80109a0:	2b00      	cmp	r3, #0
 80109a2:	d168      	bne.n	8010a76 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	7d1b      	ldrb	r3, [r3, #20]
 80109a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d062      	beq.n	8010a76 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80109b0:	687b      	ldr	r3, [r7, #4]
 80109b2:	7d1b      	ldrb	r3, [r3, #20]
 80109b4:	b25b      	sxtb	r3, r3
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	da15      	bge.n	80109e6 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80109ba:	68bb      	ldr	r3, [r7, #8]
 80109bc:	7858      	ldrb	r0, [r3, #1]
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	6a1a      	ldr	r2, [r3, #32]
 80109c8:	2301      	movs	r3, #1
 80109ca:	f7fd fea1 	bl	800e710 <disk_write>
 80109ce:	4603      	mov	r3, r0
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d001      	beq.n	80109d8 <f_sync+0x54>
 80109d4:	2301      	movs	r3, #1
 80109d6:	e04f      	b.n	8010a78 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	7d1b      	ldrb	r3, [r3, #20]
 80109dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80109e0:	b2da      	uxtb	r2, r3
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80109e6:	f7fb fc1b 	bl	800c220 <get_fattime>
 80109ea:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80109ec:	68ba      	ldr	r2, [r7, #8]
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109f2:	4619      	mov	r1, r3
 80109f4:	4610      	mov	r0, r2
 80109f6:	f7fe f979 	bl	800ecec <move_window>
 80109fa:	4603      	mov	r3, r0
 80109fc:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80109fe:	7dfb      	ldrb	r3, [r7, #23]
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d138      	bne.n	8010a76 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a08:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	330b      	adds	r3, #11
 8010a0e:	781a      	ldrb	r2, [r3, #0]
 8010a10:	68fb      	ldr	r3, [r7, #12]
 8010a12:	330b      	adds	r3, #11
 8010a14:	f042 0220 	orr.w	r2, r2, #32
 8010a18:	b2d2      	uxtb	r2, r2
 8010a1a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	6818      	ldr	r0, [r3, #0]
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	689b      	ldr	r3, [r3, #8]
 8010a24:	461a      	mov	r2, r3
 8010a26:	68f9      	ldr	r1, [r7, #12]
 8010a28:	f7fe ff05 	bl	800f836 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	f103 021c 	add.w	r2, r3, #28
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	68db      	ldr	r3, [r3, #12]
 8010a36:	4619      	mov	r1, r3
 8010a38:	4610      	mov	r0, r2
 8010a3a:	f7fd fefd 	bl	800e838 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010a3e:	68fb      	ldr	r3, [r7, #12]
 8010a40:	3316      	adds	r3, #22
 8010a42:	6939      	ldr	r1, [r7, #16]
 8010a44:	4618      	mov	r0, r3
 8010a46:	f7fd fef7 	bl	800e838 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010a4a:	68fb      	ldr	r3, [r7, #12]
 8010a4c:	3312      	adds	r3, #18
 8010a4e:	2100      	movs	r1, #0
 8010a50:	4618      	mov	r0, r3
 8010a52:	f7fd fed6 	bl	800e802 <st_word>
					fs->wflag = 1;
 8010a56:	68bb      	ldr	r3, [r7, #8]
 8010a58:	2201      	movs	r2, #1
 8010a5a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010a5c:	68bb      	ldr	r3, [r7, #8]
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7fe f972 	bl	800ed48 <sync_fs>
 8010a64:	4603      	mov	r3, r0
 8010a66:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	7d1b      	ldrb	r3, [r3, #20]
 8010a6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010a70:	b2da      	uxtb	r2, r3
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010a76:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a78:	4618      	mov	r0, r3
 8010a7a:	3718      	adds	r7, #24
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}

08010a80 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010a80:	b580      	push	{r7, lr}
 8010a82:	b084      	sub	sp, #16
 8010a84:	af00      	add	r7, sp, #0
 8010a86:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010a88:	6878      	ldr	r0, [r7, #4]
 8010a8a:	f7ff ff7b 	bl	8010984 <f_sync>
 8010a8e:	4603      	mov	r3, r0
 8010a90:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010a92:	7bfb      	ldrb	r3, [r7, #15]
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d118      	bne.n	8010aca <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f107 0208 	add.w	r2, r7, #8
 8010a9e:	4611      	mov	r1, r2
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7ff fb93 	bl	80101cc <validate>
 8010aa6:	4603      	mov	r3, r0
 8010aa8:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010aaa:	7bfb      	ldrb	r3, [r7, #15]
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d10c      	bne.n	8010aca <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	691b      	ldr	r3, [r3, #16]
 8010ab4:	4618      	mov	r0, r3
 8010ab6:	f7fe f875 	bl	800eba4 <dec_lock>
 8010aba:	4603      	mov	r3, r0
 8010abc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010abe:	7bfb      	ldrb	r3, [r7, #15]
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d102      	bne.n	8010aca <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8010acc:	4618      	mov	r0, r3
 8010ace:	3710      	adds	r7, #16
 8010ad0:	46bd      	mov	sp, r7
 8010ad2:	bd80      	pop	{r7, pc}

08010ad4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010ad4:	b480      	push	{r7}
 8010ad6:	b087      	sub	sp, #28
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	60f8      	str	r0, [r7, #12]
 8010adc:	60b9      	str	r1, [r7, #8]
 8010ade:	4613      	mov	r3, r2
 8010ae0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010ae2:	2301      	movs	r3, #1
 8010ae4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010aea:	4b1f      	ldr	r3, [pc, #124]	; (8010b68 <FATFS_LinkDriverEx+0x94>)
 8010aec:	7a5b      	ldrb	r3, [r3, #9]
 8010aee:	b2db      	uxtb	r3, r3
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d131      	bne.n	8010b58 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010af4:	4b1c      	ldr	r3, [pc, #112]	; (8010b68 <FATFS_LinkDriverEx+0x94>)
 8010af6:	7a5b      	ldrb	r3, [r3, #9]
 8010af8:	b2db      	uxtb	r3, r3
 8010afa:	461a      	mov	r2, r3
 8010afc:	4b1a      	ldr	r3, [pc, #104]	; (8010b68 <FATFS_LinkDriverEx+0x94>)
 8010afe:	2100      	movs	r1, #0
 8010b00:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010b02:	4b19      	ldr	r3, [pc, #100]	; (8010b68 <FATFS_LinkDriverEx+0x94>)
 8010b04:	7a5b      	ldrb	r3, [r3, #9]
 8010b06:	b2db      	uxtb	r3, r3
 8010b08:	4a17      	ldr	r2, [pc, #92]	; (8010b68 <FATFS_LinkDriverEx+0x94>)
 8010b0a:	009b      	lsls	r3, r3, #2
 8010b0c:	4413      	add	r3, r2
 8010b0e:	68fa      	ldr	r2, [r7, #12]
 8010b10:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010b12:	4b15      	ldr	r3, [pc, #84]	; (8010b68 <FATFS_LinkDriverEx+0x94>)
 8010b14:	7a5b      	ldrb	r3, [r3, #9]
 8010b16:	b2db      	uxtb	r3, r3
 8010b18:	461a      	mov	r2, r3
 8010b1a:	4b13      	ldr	r3, [pc, #76]	; (8010b68 <FATFS_LinkDriverEx+0x94>)
 8010b1c:	4413      	add	r3, r2
 8010b1e:	79fa      	ldrb	r2, [r7, #7]
 8010b20:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010b22:	4b11      	ldr	r3, [pc, #68]	; (8010b68 <FATFS_LinkDriverEx+0x94>)
 8010b24:	7a5b      	ldrb	r3, [r3, #9]
 8010b26:	b2db      	uxtb	r3, r3
 8010b28:	1c5a      	adds	r2, r3, #1
 8010b2a:	b2d1      	uxtb	r1, r2
 8010b2c:	4a0e      	ldr	r2, [pc, #56]	; (8010b68 <FATFS_LinkDriverEx+0x94>)
 8010b2e:	7251      	strb	r1, [r2, #9]
 8010b30:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010b32:	7dbb      	ldrb	r3, [r7, #22]
 8010b34:	3330      	adds	r3, #48	; 0x30
 8010b36:	b2da      	uxtb	r2, r3
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010b3c:	68bb      	ldr	r3, [r7, #8]
 8010b3e:	3301      	adds	r3, #1
 8010b40:	223a      	movs	r2, #58	; 0x3a
 8010b42:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010b44:	68bb      	ldr	r3, [r7, #8]
 8010b46:	3302      	adds	r3, #2
 8010b48:	222f      	movs	r2, #47	; 0x2f
 8010b4a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	3303      	adds	r3, #3
 8010b50:	2200      	movs	r2, #0
 8010b52:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010b54:	2300      	movs	r3, #0
 8010b56:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010b58:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b5a:	4618      	mov	r0, r3
 8010b5c:	371c      	adds	r7, #28
 8010b5e:	46bd      	mov	sp, r7
 8010b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b64:	4770      	bx	lr
 8010b66:	bf00      	nop
 8010b68:	20000af0 	.word	0x20000af0

08010b6c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010b6c:	b580      	push	{r7, lr}
 8010b6e:	b082      	sub	sp, #8
 8010b70:	af00      	add	r7, sp, #0
 8010b72:	6078      	str	r0, [r7, #4]
 8010b74:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010b76:	2200      	movs	r2, #0
 8010b78:	6839      	ldr	r1, [r7, #0]
 8010b7a:	6878      	ldr	r0, [r7, #4]
 8010b7c:	f7ff ffaa 	bl	8010ad4 <FATFS_LinkDriverEx>
 8010b80:	4603      	mov	r3, r0
}
 8010b82:	4618      	mov	r0, r3
 8010b84:	3708      	adds	r7, #8
 8010b86:	46bd      	mov	sp, r7
 8010b88:	bd80      	pop	{r7, pc}
	...

08010b8c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010b90:	2200      	movs	r2, #0
 8010b92:	4912      	ldr	r1, [pc, #72]	; (8010bdc <MX_USB_DEVICE_Init+0x50>)
 8010b94:	4812      	ldr	r0, [pc, #72]	; (8010be0 <MX_USB_DEVICE_Init+0x54>)
 8010b96:	f7fc fa69 	bl	800d06c <USBD_Init>
 8010b9a:	4603      	mov	r3, r0
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	d001      	beq.n	8010ba4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010ba0:	f7f2 f850 	bl	8002c44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010ba4:	490f      	ldr	r1, [pc, #60]	; (8010be4 <MX_USB_DEVICE_Init+0x58>)
 8010ba6:	480e      	ldr	r0, [pc, #56]	; (8010be0 <MX_USB_DEVICE_Init+0x54>)
 8010ba8:	f7fc fa90 	bl	800d0cc <USBD_RegisterClass>
 8010bac:	4603      	mov	r3, r0
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d001      	beq.n	8010bb6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010bb2:	f7f2 f847 	bl	8002c44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010bb6:	490c      	ldr	r1, [pc, #48]	; (8010be8 <MX_USB_DEVICE_Init+0x5c>)
 8010bb8:	4809      	ldr	r0, [pc, #36]	; (8010be0 <MX_USB_DEVICE_Init+0x54>)
 8010bba:	f7fc f981 	bl	800cec0 <USBD_CDC_RegisterInterface>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d001      	beq.n	8010bc8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010bc4:	f7f2 f83e 	bl	8002c44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010bc8:	4805      	ldr	r0, [pc, #20]	; (8010be0 <MX_USB_DEVICE_Init+0x54>)
 8010bca:	f7fc fab5 	bl	800d138 <USBD_Start>
 8010bce:	4603      	mov	r3, r0
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d001      	beq.n	8010bd8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010bd4:	f7f2 f836 	bl	8002c44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010bd8:	bf00      	nop
 8010bda:	bd80      	pop	{r7, pc}
 8010bdc:	200000d0 	.word	0x200000d0
 8010be0:	20000afc 	.word	0x20000afc
 8010be4:	2000003c 	.word	0x2000003c
 8010be8:	200000bc 	.word	0x200000bc

08010bec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010bec:	b580      	push	{r7, lr}
 8010bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010bf0:	2200      	movs	r2, #0
 8010bf2:	4905      	ldr	r1, [pc, #20]	; (8010c08 <CDC_Init_FS+0x1c>)
 8010bf4:	4805      	ldr	r0, [pc, #20]	; (8010c0c <CDC_Init_FS+0x20>)
 8010bf6:	f7fc f97d 	bl	800cef4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010bfa:	4905      	ldr	r1, [pc, #20]	; (8010c10 <CDC_Init_FS+0x24>)
 8010bfc:	4803      	ldr	r0, [pc, #12]	; (8010c0c <CDC_Init_FS+0x20>)
 8010bfe:	f7fc f99b 	bl	800cf38 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010c02:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010c04:	4618      	mov	r0, r3
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	200015d8 	.word	0x200015d8
 8010c0c:	20000afc 	.word	0x20000afc
 8010c10:	20000dd8 	.word	0x20000dd8

08010c14 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010c14:	b480      	push	{r7}
 8010c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010c18:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	46bd      	mov	sp, r7
 8010c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c22:	4770      	bx	lr

08010c24 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010c24:	b480      	push	{r7}
 8010c26:	b083      	sub	sp, #12
 8010c28:	af00      	add	r7, sp, #0
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	6039      	str	r1, [r7, #0]
 8010c2e:	71fb      	strb	r3, [r7, #7]
 8010c30:	4613      	mov	r3, r2
 8010c32:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010c34:	79fb      	ldrb	r3, [r7, #7]
 8010c36:	2b23      	cmp	r3, #35	; 0x23
 8010c38:	d84a      	bhi.n	8010cd0 <CDC_Control_FS+0xac>
 8010c3a:	a201      	add	r2, pc, #4	; (adr r2, 8010c40 <CDC_Control_FS+0x1c>)
 8010c3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c40:	08010cd1 	.word	0x08010cd1
 8010c44:	08010cd1 	.word	0x08010cd1
 8010c48:	08010cd1 	.word	0x08010cd1
 8010c4c:	08010cd1 	.word	0x08010cd1
 8010c50:	08010cd1 	.word	0x08010cd1
 8010c54:	08010cd1 	.word	0x08010cd1
 8010c58:	08010cd1 	.word	0x08010cd1
 8010c5c:	08010cd1 	.word	0x08010cd1
 8010c60:	08010cd1 	.word	0x08010cd1
 8010c64:	08010cd1 	.word	0x08010cd1
 8010c68:	08010cd1 	.word	0x08010cd1
 8010c6c:	08010cd1 	.word	0x08010cd1
 8010c70:	08010cd1 	.word	0x08010cd1
 8010c74:	08010cd1 	.word	0x08010cd1
 8010c78:	08010cd1 	.word	0x08010cd1
 8010c7c:	08010cd1 	.word	0x08010cd1
 8010c80:	08010cd1 	.word	0x08010cd1
 8010c84:	08010cd1 	.word	0x08010cd1
 8010c88:	08010cd1 	.word	0x08010cd1
 8010c8c:	08010cd1 	.word	0x08010cd1
 8010c90:	08010cd1 	.word	0x08010cd1
 8010c94:	08010cd1 	.word	0x08010cd1
 8010c98:	08010cd1 	.word	0x08010cd1
 8010c9c:	08010cd1 	.word	0x08010cd1
 8010ca0:	08010cd1 	.word	0x08010cd1
 8010ca4:	08010cd1 	.word	0x08010cd1
 8010ca8:	08010cd1 	.word	0x08010cd1
 8010cac:	08010cd1 	.word	0x08010cd1
 8010cb0:	08010cd1 	.word	0x08010cd1
 8010cb4:	08010cd1 	.word	0x08010cd1
 8010cb8:	08010cd1 	.word	0x08010cd1
 8010cbc:	08010cd1 	.word	0x08010cd1
 8010cc0:	08010cd1 	.word	0x08010cd1
 8010cc4:	08010cd1 	.word	0x08010cd1
 8010cc8:	08010cd1 	.word	0x08010cd1
 8010ccc:	08010cd1 	.word	0x08010cd1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010cd0:	bf00      	nop
  }

  return (USBD_OK);
 8010cd2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	370c      	adds	r7, #12
 8010cd8:	46bd      	mov	sp, r7
 8010cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cde:	4770      	bx	lr

08010ce0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b082      	sub	sp, #8
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
 8010ce8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010cea:	6879      	ldr	r1, [r7, #4]
 8010cec:	4805      	ldr	r0, [pc, #20]	; (8010d04 <CDC_Receive_FS+0x24>)
 8010cee:	f7fc f923 	bl	800cf38 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010cf2:	4804      	ldr	r0, [pc, #16]	; (8010d04 <CDC_Receive_FS+0x24>)
 8010cf4:	f7fc f984 	bl	800d000 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010cf8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	3708      	adds	r7, #8
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	20000afc 	.word	0x20000afc

08010d08 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b084      	sub	sp, #16
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
 8010d10:	460b      	mov	r3, r1
 8010d12:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010d14:	2300      	movs	r3, #0
 8010d16:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010d18:	4b0d      	ldr	r3, [pc, #52]	; (8010d50 <CDC_Transmit_FS+0x48>)
 8010d1a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d1e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010d20:	68bb      	ldr	r3, [r7, #8]
 8010d22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d001      	beq.n	8010d2e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010d2a:	2301      	movs	r3, #1
 8010d2c:	e00b      	b.n	8010d46 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010d2e:	887b      	ldrh	r3, [r7, #2]
 8010d30:	461a      	mov	r2, r3
 8010d32:	6879      	ldr	r1, [r7, #4]
 8010d34:	4806      	ldr	r0, [pc, #24]	; (8010d50 <CDC_Transmit_FS+0x48>)
 8010d36:	f7fc f8dd 	bl	800cef4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010d3a:	4805      	ldr	r0, [pc, #20]	; (8010d50 <CDC_Transmit_FS+0x48>)
 8010d3c:	f7fc f91a 	bl	800cf74 <USBD_CDC_TransmitPacket>
 8010d40:	4603      	mov	r3, r0
 8010d42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d46:	4618      	mov	r0, r3
 8010d48:	3710      	adds	r7, #16
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}
 8010d4e:	bf00      	nop
 8010d50:	20000afc 	.word	0x20000afc

08010d54 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010d54:	b480      	push	{r7}
 8010d56:	b087      	sub	sp, #28
 8010d58:	af00      	add	r7, sp, #0
 8010d5a:	60f8      	str	r0, [r7, #12]
 8010d5c:	60b9      	str	r1, [r7, #8]
 8010d5e:	4613      	mov	r3, r2
 8010d60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010d62:	2300      	movs	r3, #0
 8010d64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010d66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010d6a:	4618      	mov	r0, r3
 8010d6c:	371c      	adds	r7, #28
 8010d6e:	46bd      	mov	sp, r7
 8010d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d74:	4770      	bx	lr
	...

08010d78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d78:	b480      	push	{r7}
 8010d7a:	b083      	sub	sp, #12
 8010d7c:	af00      	add	r7, sp, #0
 8010d7e:	4603      	mov	r3, r0
 8010d80:	6039      	str	r1, [r7, #0]
 8010d82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010d84:	683b      	ldr	r3, [r7, #0]
 8010d86:	2212      	movs	r2, #18
 8010d88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010d8a:	4b03      	ldr	r3, [pc, #12]	; (8010d98 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010d8c:	4618      	mov	r0, r3
 8010d8e:	370c      	adds	r7, #12
 8010d90:	46bd      	mov	sp, r7
 8010d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d96:	4770      	bx	lr
 8010d98:	200000ec 	.word	0x200000ec

08010d9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010d9c:	b480      	push	{r7}
 8010d9e:	b083      	sub	sp, #12
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	4603      	mov	r3, r0
 8010da4:	6039      	str	r1, [r7, #0]
 8010da6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	2204      	movs	r2, #4
 8010dac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010dae:	4b03      	ldr	r3, [pc, #12]	; (8010dbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010db0:	4618      	mov	r0, r3
 8010db2:	370c      	adds	r7, #12
 8010db4:	46bd      	mov	sp, r7
 8010db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dba:	4770      	bx	lr
 8010dbc:	20000100 	.word	0x20000100

08010dc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b082      	sub	sp, #8
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	4603      	mov	r3, r0
 8010dc8:	6039      	str	r1, [r7, #0]
 8010dca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010dcc:	79fb      	ldrb	r3, [r7, #7]
 8010dce:	2b00      	cmp	r3, #0
 8010dd0:	d105      	bne.n	8010dde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010dd2:	683a      	ldr	r2, [r7, #0]
 8010dd4:	4907      	ldr	r1, [pc, #28]	; (8010df4 <USBD_FS_ProductStrDescriptor+0x34>)
 8010dd6:	4808      	ldr	r0, [pc, #32]	; (8010df8 <USBD_FS_ProductStrDescriptor+0x38>)
 8010dd8:	f7fd fb5a 	bl	800e490 <USBD_GetString>
 8010ddc:	e004      	b.n	8010de8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010dde:	683a      	ldr	r2, [r7, #0]
 8010de0:	4904      	ldr	r1, [pc, #16]	; (8010df4 <USBD_FS_ProductStrDescriptor+0x34>)
 8010de2:	4805      	ldr	r0, [pc, #20]	; (8010df8 <USBD_FS_ProductStrDescriptor+0x38>)
 8010de4:	f7fd fb54 	bl	800e490 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010de8:	4b02      	ldr	r3, [pc, #8]	; (8010df4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010dea:	4618      	mov	r0, r3
 8010dec:	3708      	adds	r7, #8
 8010dee:	46bd      	mov	sp, r7
 8010df0:	bd80      	pop	{r7, pc}
 8010df2:	bf00      	nop
 8010df4:	20001dd8 	.word	0x20001dd8
 8010df8:	08015748 	.word	0x08015748

08010dfc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010dfc:	b580      	push	{r7, lr}
 8010dfe:	b082      	sub	sp, #8
 8010e00:	af00      	add	r7, sp, #0
 8010e02:	4603      	mov	r3, r0
 8010e04:	6039      	str	r1, [r7, #0]
 8010e06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010e08:	683a      	ldr	r2, [r7, #0]
 8010e0a:	4904      	ldr	r1, [pc, #16]	; (8010e1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010e0c:	4804      	ldr	r0, [pc, #16]	; (8010e20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010e0e:	f7fd fb3f 	bl	800e490 <USBD_GetString>
  return USBD_StrDesc;
 8010e12:	4b02      	ldr	r3, [pc, #8]	; (8010e1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010e14:	4618      	mov	r0, r3
 8010e16:	3708      	adds	r7, #8
 8010e18:	46bd      	mov	sp, r7
 8010e1a:	bd80      	pop	{r7, pc}
 8010e1c:	20001dd8 	.word	0x20001dd8
 8010e20:	08015760 	.word	0x08015760

08010e24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b082      	sub	sp, #8
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	6039      	str	r1, [r7, #0]
 8010e2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010e30:	683b      	ldr	r3, [r7, #0]
 8010e32:	221a      	movs	r2, #26
 8010e34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010e36:	f000 f843 	bl	8010ec0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010e3a:	4b02      	ldr	r3, [pc, #8]	; (8010e44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3708      	adds	r7, #8
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}
 8010e44:	20000104 	.word	0x20000104

08010e48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e48:	b580      	push	{r7, lr}
 8010e4a:	b082      	sub	sp, #8
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	4603      	mov	r3, r0
 8010e50:	6039      	str	r1, [r7, #0]
 8010e52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010e54:	79fb      	ldrb	r3, [r7, #7]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d105      	bne.n	8010e66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010e5a:	683a      	ldr	r2, [r7, #0]
 8010e5c:	4907      	ldr	r1, [pc, #28]	; (8010e7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010e5e:	4808      	ldr	r0, [pc, #32]	; (8010e80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010e60:	f7fd fb16 	bl	800e490 <USBD_GetString>
 8010e64:	e004      	b.n	8010e70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010e66:	683a      	ldr	r2, [r7, #0]
 8010e68:	4904      	ldr	r1, [pc, #16]	; (8010e7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8010e6a:	4805      	ldr	r0, [pc, #20]	; (8010e80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8010e6c:	f7fd fb10 	bl	800e490 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010e70:	4b02      	ldr	r3, [pc, #8]	; (8010e7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010e72:	4618      	mov	r0, r3
 8010e74:	3708      	adds	r7, #8
 8010e76:	46bd      	mov	sp, r7
 8010e78:	bd80      	pop	{r7, pc}
 8010e7a:	bf00      	nop
 8010e7c:	20001dd8 	.word	0x20001dd8
 8010e80:	08015774 	.word	0x08015774

08010e84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b082      	sub	sp, #8
 8010e88:	af00      	add	r7, sp, #0
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	6039      	str	r1, [r7, #0]
 8010e8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010e90:	79fb      	ldrb	r3, [r7, #7]
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d105      	bne.n	8010ea2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010e96:	683a      	ldr	r2, [r7, #0]
 8010e98:	4907      	ldr	r1, [pc, #28]	; (8010eb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010e9a:	4808      	ldr	r0, [pc, #32]	; (8010ebc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010e9c:	f7fd faf8 	bl	800e490 <USBD_GetString>
 8010ea0:	e004      	b.n	8010eac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010ea2:	683a      	ldr	r2, [r7, #0]
 8010ea4:	4904      	ldr	r1, [pc, #16]	; (8010eb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010ea6:	4805      	ldr	r0, [pc, #20]	; (8010ebc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010ea8:	f7fd faf2 	bl	800e490 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010eac:	4b02      	ldr	r3, [pc, #8]	; (8010eb8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	3708      	adds	r7, #8
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}
 8010eb6:	bf00      	nop
 8010eb8:	20001dd8 	.word	0x20001dd8
 8010ebc:	08015780 	.word	0x08015780

08010ec0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b084      	sub	sp, #16
 8010ec4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010ec6:	4b0f      	ldr	r3, [pc, #60]	; (8010f04 <Get_SerialNum+0x44>)
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010ecc:	4b0e      	ldr	r3, [pc, #56]	; (8010f08 <Get_SerialNum+0x48>)
 8010ece:	681b      	ldr	r3, [r3, #0]
 8010ed0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010ed2:	4b0e      	ldr	r3, [pc, #56]	; (8010f0c <Get_SerialNum+0x4c>)
 8010ed4:	681b      	ldr	r3, [r3, #0]
 8010ed6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010ed8:	68fa      	ldr	r2, [r7, #12]
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	4413      	add	r3, r2
 8010ede:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	2b00      	cmp	r3, #0
 8010ee4:	d009      	beq.n	8010efa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010ee6:	2208      	movs	r2, #8
 8010ee8:	4909      	ldr	r1, [pc, #36]	; (8010f10 <Get_SerialNum+0x50>)
 8010eea:	68f8      	ldr	r0, [r7, #12]
 8010eec:	f000 f814 	bl	8010f18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010ef0:	2204      	movs	r2, #4
 8010ef2:	4908      	ldr	r1, [pc, #32]	; (8010f14 <Get_SerialNum+0x54>)
 8010ef4:	68b8      	ldr	r0, [r7, #8]
 8010ef6:	f000 f80f 	bl	8010f18 <IntToUnicode>
  }
}
 8010efa:	bf00      	nop
 8010efc:	3710      	adds	r7, #16
 8010efe:	46bd      	mov	sp, r7
 8010f00:	bd80      	pop	{r7, pc}
 8010f02:	bf00      	nop
 8010f04:	1fff7a10 	.word	0x1fff7a10
 8010f08:	1fff7a14 	.word	0x1fff7a14
 8010f0c:	1fff7a18 	.word	0x1fff7a18
 8010f10:	20000106 	.word	0x20000106
 8010f14:	20000116 	.word	0x20000116

08010f18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010f18:	b480      	push	{r7}
 8010f1a:	b087      	sub	sp, #28
 8010f1c:	af00      	add	r7, sp, #0
 8010f1e:	60f8      	str	r0, [r7, #12]
 8010f20:	60b9      	str	r1, [r7, #8]
 8010f22:	4613      	mov	r3, r2
 8010f24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010f26:	2300      	movs	r3, #0
 8010f28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010f2a:	2300      	movs	r3, #0
 8010f2c:	75fb      	strb	r3, [r7, #23]
 8010f2e:	e027      	b.n	8010f80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	0f1b      	lsrs	r3, r3, #28
 8010f34:	2b09      	cmp	r3, #9
 8010f36:	d80b      	bhi.n	8010f50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010f38:	68fb      	ldr	r3, [r7, #12]
 8010f3a:	0f1b      	lsrs	r3, r3, #28
 8010f3c:	b2da      	uxtb	r2, r3
 8010f3e:	7dfb      	ldrb	r3, [r7, #23]
 8010f40:	005b      	lsls	r3, r3, #1
 8010f42:	4619      	mov	r1, r3
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	440b      	add	r3, r1
 8010f48:	3230      	adds	r2, #48	; 0x30
 8010f4a:	b2d2      	uxtb	r2, r2
 8010f4c:	701a      	strb	r2, [r3, #0]
 8010f4e:	e00a      	b.n	8010f66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	0f1b      	lsrs	r3, r3, #28
 8010f54:	b2da      	uxtb	r2, r3
 8010f56:	7dfb      	ldrb	r3, [r7, #23]
 8010f58:	005b      	lsls	r3, r3, #1
 8010f5a:	4619      	mov	r1, r3
 8010f5c:	68bb      	ldr	r3, [r7, #8]
 8010f5e:	440b      	add	r3, r1
 8010f60:	3237      	adds	r2, #55	; 0x37
 8010f62:	b2d2      	uxtb	r2, r2
 8010f64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010f66:	68fb      	ldr	r3, [r7, #12]
 8010f68:	011b      	lsls	r3, r3, #4
 8010f6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010f6c:	7dfb      	ldrb	r3, [r7, #23]
 8010f6e:	005b      	lsls	r3, r3, #1
 8010f70:	3301      	adds	r3, #1
 8010f72:	68ba      	ldr	r2, [r7, #8]
 8010f74:	4413      	add	r3, r2
 8010f76:	2200      	movs	r2, #0
 8010f78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010f7a:	7dfb      	ldrb	r3, [r7, #23]
 8010f7c:	3301      	adds	r3, #1
 8010f7e:	75fb      	strb	r3, [r7, #23]
 8010f80:	7dfa      	ldrb	r2, [r7, #23]
 8010f82:	79fb      	ldrb	r3, [r7, #7]
 8010f84:	429a      	cmp	r2, r3
 8010f86:	d3d3      	bcc.n	8010f30 <IntToUnicode+0x18>
  }
}
 8010f88:	bf00      	nop
 8010f8a:	bf00      	nop
 8010f8c:	371c      	adds	r7, #28
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f94:	4770      	bx	lr
	...

08010f98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b08a      	sub	sp, #40	; 0x28
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010fa0:	f107 0314 	add.w	r3, r7, #20
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	601a      	str	r2, [r3, #0]
 8010fa8:	605a      	str	r2, [r3, #4]
 8010faa:	609a      	str	r2, [r3, #8]
 8010fac:	60da      	str	r2, [r3, #12]
 8010fae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8010fb8:	d13a      	bne.n	8011030 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8010fba:	2300      	movs	r3, #0
 8010fbc:	613b      	str	r3, [r7, #16]
 8010fbe:	4b1e      	ldr	r3, [pc, #120]	; (8011038 <HAL_PCD_MspInit+0xa0>)
 8010fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fc2:	4a1d      	ldr	r2, [pc, #116]	; (8011038 <HAL_PCD_MspInit+0xa0>)
 8010fc4:	f043 0301 	orr.w	r3, r3, #1
 8010fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8010fca:	4b1b      	ldr	r3, [pc, #108]	; (8011038 <HAL_PCD_MspInit+0xa0>)
 8010fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010fce:	f003 0301 	and.w	r3, r3, #1
 8010fd2:	613b      	str	r3, [r7, #16]
 8010fd4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8010fd6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8010fda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8010fdc:	2302      	movs	r3, #2
 8010fde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8010fe4:	2303      	movs	r3, #3
 8010fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8010fe8:	230a      	movs	r3, #10
 8010fea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8010fec:	f107 0314 	add.w	r3, r7, #20
 8010ff0:	4619      	mov	r1, r3
 8010ff2:	4812      	ldr	r0, [pc, #72]	; (801103c <HAL_PCD_MspInit+0xa4>)
 8010ff4:	f7f2 ff30 	bl	8003e58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8010ff8:	4b0f      	ldr	r3, [pc, #60]	; (8011038 <HAL_PCD_MspInit+0xa0>)
 8010ffa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ffc:	4a0e      	ldr	r2, [pc, #56]	; (8011038 <HAL_PCD_MspInit+0xa0>)
 8010ffe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011002:	6353      	str	r3, [r2, #52]	; 0x34
 8011004:	2300      	movs	r3, #0
 8011006:	60fb      	str	r3, [r7, #12]
 8011008:	4b0b      	ldr	r3, [pc, #44]	; (8011038 <HAL_PCD_MspInit+0xa0>)
 801100a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801100c:	4a0a      	ldr	r2, [pc, #40]	; (8011038 <HAL_PCD_MspInit+0xa0>)
 801100e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011012:	6453      	str	r3, [r2, #68]	; 0x44
 8011014:	4b08      	ldr	r3, [pc, #32]	; (8011038 <HAL_PCD_MspInit+0xa0>)
 8011016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011018:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801101c:	60fb      	str	r3, [r7, #12]
 801101e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011020:	2200      	movs	r2, #0
 8011022:	2100      	movs	r1, #0
 8011024:	2043      	movs	r0, #67	; 0x43
 8011026:	f7f2 fad2 	bl	80035ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801102a:	2043      	movs	r0, #67	; 0x43
 801102c:	f7f2 faeb 	bl	8003606 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011030:	bf00      	nop
 8011032:	3728      	adds	r7, #40	; 0x28
 8011034:	46bd      	mov	sp, r7
 8011036:	bd80      	pop	{r7, pc}
 8011038:	40023800 	.word	0x40023800
 801103c:	40020000 	.word	0x40020000

08011040 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b082      	sub	sp, #8
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 801104e:	687b      	ldr	r3, [r7, #4]
 8011050:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011054:	4619      	mov	r1, r3
 8011056:	4610      	mov	r0, r2
 8011058:	f7fc f8bb 	bl	800d1d2 <USBD_LL_SetupStage>
}
 801105c:	bf00      	nop
 801105e:	3708      	adds	r7, #8
 8011060:	46bd      	mov	sp, r7
 8011062:	bd80      	pop	{r7, pc}

08011064 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b082      	sub	sp, #8
 8011068:	af00      	add	r7, sp, #0
 801106a:	6078      	str	r0, [r7, #4]
 801106c:	460b      	mov	r3, r1
 801106e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011076:	78fa      	ldrb	r2, [r7, #3]
 8011078:	6879      	ldr	r1, [r7, #4]
 801107a:	4613      	mov	r3, r2
 801107c:	00db      	lsls	r3, r3, #3
 801107e:	4413      	add	r3, r2
 8011080:	009b      	lsls	r3, r3, #2
 8011082:	440b      	add	r3, r1
 8011084:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011088:	681a      	ldr	r2, [r3, #0]
 801108a:	78fb      	ldrb	r3, [r7, #3]
 801108c:	4619      	mov	r1, r3
 801108e:	f7fc f8f5 	bl	800d27c <USBD_LL_DataOutStage>
}
 8011092:	bf00      	nop
 8011094:	3708      	adds	r7, #8
 8011096:	46bd      	mov	sp, r7
 8011098:	bd80      	pop	{r7, pc}

0801109a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801109a:	b580      	push	{r7, lr}
 801109c:	b082      	sub	sp, #8
 801109e:	af00      	add	r7, sp, #0
 80110a0:	6078      	str	r0, [r7, #4]
 80110a2:	460b      	mov	r3, r1
 80110a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80110a6:	687b      	ldr	r3, [r7, #4]
 80110a8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80110ac:	78fa      	ldrb	r2, [r7, #3]
 80110ae:	6879      	ldr	r1, [r7, #4]
 80110b0:	4613      	mov	r3, r2
 80110b2:	00db      	lsls	r3, r3, #3
 80110b4:	4413      	add	r3, r2
 80110b6:	009b      	lsls	r3, r3, #2
 80110b8:	440b      	add	r3, r1
 80110ba:	334c      	adds	r3, #76	; 0x4c
 80110bc:	681a      	ldr	r2, [r3, #0]
 80110be:	78fb      	ldrb	r3, [r7, #3]
 80110c0:	4619      	mov	r1, r3
 80110c2:	f7fc f98e 	bl	800d3e2 <USBD_LL_DataInStage>
}
 80110c6:	bf00      	nop
 80110c8:	3708      	adds	r7, #8
 80110ca:	46bd      	mov	sp, r7
 80110cc:	bd80      	pop	{r7, pc}

080110ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110ce:	b580      	push	{r7, lr}
 80110d0:	b082      	sub	sp, #8
 80110d2:	af00      	add	r7, sp, #0
 80110d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80110d6:	687b      	ldr	r3, [r7, #4]
 80110d8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80110dc:	4618      	mov	r0, r3
 80110de:	f7fc fac2 	bl	800d666 <USBD_LL_SOF>
}
 80110e2:	bf00      	nop
 80110e4:	3708      	adds	r7, #8
 80110e6:	46bd      	mov	sp, r7
 80110e8:	bd80      	pop	{r7, pc}

080110ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110ea:	b580      	push	{r7, lr}
 80110ec:	b084      	sub	sp, #16
 80110ee:	af00      	add	r7, sp, #0
 80110f0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80110f2:	2301      	movs	r3, #1
 80110f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	68db      	ldr	r3, [r3, #12]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	d102      	bne.n	8011104 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80110fe:	2300      	movs	r3, #0
 8011100:	73fb      	strb	r3, [r7, #15]
 8011102:	e008      	b.n	8011116 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	68db      	ldr	r3, [r3, #12]
 8011108:	2b02      	cmp	r3, #2
 801110a:	d102      	bne.n	8011112 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801110c:	2301      	movs	r3, #1
 801110e:	73fb      	strb	r3, [r7, #15]
 8011110:	e001      	b.n	8011116 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011112:	f7f1 fd97 	bl	8002c44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011116:	687b      	ldr	r3, [r7, #4]
 8011118:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801111c:	7bfa      	ldrb	r2, [r7, #15]
 801111e:	4611      	mov	r1, r2
 8011120:	4618      	mov	r0, r3
 8011122:	f7fc fa62 	bl	800d5ea <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011126:	687b      	ldr	r3, [r7, #4]
 8011128:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801112c:	4618      	mov	r0, r3
 801112e:	f7fc fa0a 	bl	800d546 <USBD_LL_Reset>
}
 8011132:	bf00      	nop
 8011134:	3710      	adds	r7, #16
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}
	...

0801113c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801113c:	b580      	push	{r7, lr}
 801113e:	b082      	sub	sp, #8
 8011140:	af00      	add	r7, sp, #0
 8011142:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011144:	687b      	ldr	r3, [r7, #4]
 8011146:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801114a:	4618      	mov	r0, r3
 801114c:	f7fc fa5d 	bl	800d60a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	687a      	ldr	r2, [r7, #4]
 801115c:	6812      	ldr	r2, [r2, #0]
 801115e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011162:	f043 0301 	orr.w	r3, r3, #1
 8011166:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	6a1b      	ldr	r3, [r3, #32]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d005      	beq.n	801117c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011170:	4b04      	ldr	r3, [pc, #16]	; (8011184 <HAL_PCD_SuspendCallback+0x48>)
 8011172:	691b      	ldr	r3, [r3, #16]
 8011174:	4a03      	ldr	r2, [pc, #12]	; (8011184 <HAL_PCD_SuspendCallback+0x48>)
 8011176:	f043 0306 	orr.w	r3, r3, #6
 801117a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801117c:	bf00      	nop
 801117e:	3708      	adds	r7, #8
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}
 8011184:	e000ed00 	.word	0xe000ed00

08011188 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011188:	b580      	push	{r7, lr}
 801118a:	b082      	sub	sp, #8
 801118c:	af00      	add	r7, sp, #0
 801118e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011190:	687b      	ldr	r3, [r7, #4]
 8011192:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011196:	4618      	mov	r0, r3
 8011198:	f7fc fa4d 	bl	800d636 <USBD_LL_Resume>
}
 801119c:	bf00      	nop
 801119e:	3708      	adds	r7, #8
 80111a0:	46bd      	mov	sp, r7
 80111a2:	bd80      	pop	{r7, pc}

080111a4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111a4:	b580      	push	{r7, lr}
 80111a6:	b082      	sub	sp, #8
 80111a8:	af00      	add	r7, sp, #0
 80111aa:	6078      	str	r0, [r7, #4]
 80111ac:	460b      	mov	r3, r1
 80111ae:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80111b0:	687b      	ldr	r3, [r7, #4]
 80111b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80111b6:	78fa      	ldrb	r2, [r7, #3]
 80111b8:	4611      	mov	r1, r2
 80111ba:	4618      	mov	r0, r3
 80111bc:	f7fc faa5 	bl	800d70a <USBD_LL_IsoOUTIncomplete>
}
 80111c0:	bf00      	nop
 80111c2:	3708      	adds	r7, #8
 80111c4:	46bd      	mov	sp, r7
 80111c6:	bd80      	pop	{r7, pc}

080111c8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b082      	sub	sp, #8
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
 80111d0:	460b      	mov	r3, r1
 80111d2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80111da:	78fa      	ldrb	r2, [r7, #3]
 80111dc:	4611      	mov	r1, r2
 80111de:	4618      	mov	r0, r3
 80111e0:	f7fc fa61 	bl	800d6a6 <USBD_LL_IsoINIncomplete>
}
 80111e4:	bf00      	nop
 80111e6:	3708      	adds	r7, #8
 80111e8:	46bd      	mov	sp, r7
 80111ea:	bd80      	pop	{r7, pc}

080111ec <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b082      	sub	sp, #8
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80111f4:	687b      	ldr	r3, [r7, #4]
 80111f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80111fa:	4618      	mov	r0, r3
 80111fc:	f7fc fab7 	bl	800d76e <USBD_LL_DevConnected>
}
 8011200:	bf00      	nop
 8011202:	3708      	adds	r7, #8
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}

08011208 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b082      	sub	sp, #8
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011210:	687b      	ldr	r3, [r7, #4]
 8011212:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011216:	4618      	mov	r0, r3
 8011218:	f7fc fab4 	bl	800d784 <USBD_LL_DevDisconnected>
}
 801121c:	bf00      	nop
 801121e:	3708      	adds	r7, #8
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}

08011224 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	781b      	ldrb	r3, [r3, #0]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d13c      	bne.n	80112ae <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011234:	4a20      	ldr	r2, [pc, #128]	; (80112b8 <USBD_LL_Init+0x94>)
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	4a1e      	ldr	r2, [pc, #120]	; (80112b8 <USBD_LL_Init+0x94>)
 8011240:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011244:	4b1c      	ldr	r3, [pc, #112]	; (80112b8 <USBD_LL_Init+0x94>)
 8011246:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 801124a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 801124c:	4b1a      	ldr	r3, [pc, #104]	; (80112b8 <USBD_LL_Init+0x94>)
 801124e:	2204      	movs	r2, #4
 8011250:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8011252:	4b19      	ldr	r3, [pc, #100]	; (80112b8 <USBD_LL_Init+0x94>)
 8011254:	2202      	movs	r2, #2
 8011256:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011258:	4b17      	ldr	r3, [pc, #92]	; (80112b8 <USBD_LL_Init+0x94>)
 801125a:	2200      	movs	r2, #0
 801125c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801125e:	4b16      	ldr	r3, [pc, #88]	; (80112b8 <USBD_LL_Init+0x94>)
 8011260:	2202      	movs	r2, #2
 8011262:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011264:	4b14      	ldr	r3, [pc, #80]	; (80112b8 <USBD_LL_Init+0x94>)
 8011266:	2200      	movs	r2, #0
 8011268:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801126a:	4b13      	ldr	r3, [pc, #76]	; (80112b8 <USBD_LL_Init+0x94>)
 801126c:	2200      	movs	r2, #0
 801126e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8011270:	4b11      	ldr	r3, [pc, #68]	; (80112b8 <USBD_LL_Init+0x94>)
 8011272:	2200      	movs	r2, #0
 8011274:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011276:	4b10      	ldr	r3, [pc, #64]	; (80112b8 <USBD_LL_Init+0x94>)
 8011278:	2200      	movs	r2, #0
 801127a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801127c:	4b0e      	ldr	r3, [pc, #56]	; (80112b8 <USBD_LL_Init+0x94>)
 801127e:	2200      	movs	r2, #0
 8011280:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8011282:	480d      	ldr	r0, [pc, #52]	; (80112b8 <USBD_LL_Init+0x94>)
 8011284:	f7f3 ff4b 	bl	800511e <HAL_PCD_Init>
 8011288:	4603      	mov	r3, r0
 801128a:	2b00      	cmp	r3, #0
 801128c:	d001      	beq.n	8011292 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801128e:	f7f1 fcd9 	bl	8002c44 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8011292:	2180      	movs	r1, #128	; 0x80
 8011294:	4808      	ldr	r0, [pc, #32]	; (80112b8 <USBD_LL_Init+0x94>)
 8011296:	f7f5 f9a2 	bl	80065de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801129a:	2240      	movs	r2, #64	; 0x40
 801129c:	2100      	movs	r1, #0
 801129e:	4806      	ldr	r0, [pc, #24]	; (80112b8 <USBD_LL_Init+0x94>)
 80112a0:	f7f5 f956 	bl	8006550 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80112a4:	2280      	movs	r2, #128	; 0x80
 80112a6:	2101      	movs	r1, #1
 80112a8:	4803      	ldr	r0, [pc, #12]	; (80112b8 <USBD_LL_Init+0x94>)
 80112aa:	f7f5 f951 	bl	8006550 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80112ae:	2300      	movs	r3, #0
}
 80112b0:	4618      	mov	r0, r3
 80112b2:	3708      	adds	r7, #8
 80112b4:	46bd      	mov	sp, r7
 80112b6:	bd80      	pop	{r7, pc}
 80112b8:	20001fd8 	.word	0x20001fd8

080112bc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b084      	sub	sp, #16
 80112c0:	af00      	add	r7, sp, #0
 80112c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80112c4:	2300      	movs	r3, #0
 80112c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80112c8:	2300      	movs	r3, #0
 80112ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80112d2:	4618      	mov	r0, r3
 80112d4:	f7f4 f840 	bl	8005358 <HAL_PCD_Start>
 80112d8:	4603      	mov	r3, r0
 80112da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80112dc:	7bfb      	ldrb	r3, [r7, #15]
 80112de:	4618      	mov	r0, r3
 80112e0:	f000 f942 	bl	8011568 <USBD_Get_USB_Status>
 80112e4:	4603      	mov	r3, r0
 80112e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80112e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80112ea:	4618      	mov	r0, r3
 80112ec:	3710      	adds	r7, #16
 80112ee:	46bd      	mov	sp, r7
 80112f0:	bd80      	pop	{r7, pc}

080112f2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80112f2:	b580      	push	{r7, lr}
 80112f4:	b084      	sub	sp, #16
 80112f6:	af00      	add	r7, sp, #0
 80112f8:	6078      	str	r0, [r7, #4]
 80112fa:	4608      	mov	r0, r1
 80112fc:	4611      	mov	r1, r2
 80112fe:	461a      	mov	r2, r3
 8011300:	4603      	mov	r3, r0
 8011302:	70fb      	strb	r3, [r7, #3]
 8011304:	460b      	mov	r3, r1
 8011306:	70bb      	strb	r3, [r7, #2]
 8011308:	4613      	mov	r3, r2
 801130a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801130c:	2300      	movs	r3, #0
 801130e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011310:	2300      	movs	r3, #0
 8011312:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801131a:	78bb      	ldrb	r3, [r7, #2]
 801131c:	883a      	ldrh	r2, [r7, #0]
 801131e:	78f9      	ldrb	r1, [r7, #3]
 8011320:	f7f4 fd11 	bl	8005d46 <HAL_PCD_EP_Open>
 8011324:	4603      	mov	r3, r0
 8011326:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011328:	7bfb      	ldrb	r3, [r7, #15]
 801132a:	4618      	mov	r0, r3
 801132c:	f000 f91c 	bl	8011568 <USBD_Get_USB_Status>
 8011330:	4603      	mov	r3, r0
 8011332:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011334:	7bbb      	ldrb	r3, [r7, #14]
}
 8011336:	4618      	mov	r0, r3
 8011338:	3710      	adds	r7, #16
 801133a:	46bd      	mov	sp, r7
 801133c:	bd80      	pop	{r7, pc}

0801133e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801133e:	b580      	push	{r7, lr}
 8011340:	b084      	sub	sp, #16
 8011342:	af00      	add	r7, sp, #0
 8011344:	6078      	str	r0, [r7, #4]
 8011346:	460b      	mov	r3, r1
 8011348:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801134a:	2300      	movs	r3, #0
 801134c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801134e:	2300      	movs	r3, #0
 8011350:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011352:	687b      	ldr	r3, [r7, #4]
 8011354:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011358:	78fa      	ldrb	r2, [r7, #3]
 801135a:	4611      	mov	r1, r2
 801135c:	4618      	mov	r0, r3
 801135e:	f7f4 fd5a 	bl	8005e16 <HAL_PCD_EP_Close>
 8011362:	4603      	mov	r3, r0
 8011364:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011366:	7bfb      	ldrb	r3, [r7, #15]
 8011368:	4618      	mov	r0, r3
 801136a:	f000 f8fd 	bl	8011568 <USBD_Get_USB_Status>
 801136e:	4603      	mov	r3, r0
 8011370:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011372:	7bbb      	ldrb	r3, [r7, #14]
}
 8011374:	4618      	mov	r0, r3
 8011376:	3710      	adds	r7, #16
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}

0801137c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b084      	sub	sp, #16
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
 8011384:	460b      	mov	r3, r1
 8011386:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011388:	2300      	movs	r3, #0
 801138a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801138c:	2300      	movs	r3, #0
 801138e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011396:	78fa      	ldrb	r2, [r7, #3]
 8011398:	4611      	mov	r1, r2
 801139a:	4618      	mov	r0, r3
 801139c:	f7f4 fe32 	bl	8006004 <HAL_PCD_EP_SetStall>
 80113a0:	4603      	mov	r3, r0
 80113a2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113a4:	7bfb      	ldrb	r3, [r7, #15]
 80113a6:	4618      	mov	r0, r3
 80113a8:	f000 f8de 	bl	8011568 <USBD_Get_USB_Status>
 80113ac:	4603      	mov	r3, r0
 80113ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80113b2:	4618      	mov	r0, r3
 80113b4:	3710      	adds	r7, #16
 80113b6:	46bd      	mov	sp, r7
 80113b8:	bd80      	pop	{r7, pc}

080113ba <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80113ba:	b580      	push	{r7, lr}
 80113bc:	b084      	sub	sp, #16
 80113be:	af00      	add	r7, sp, #0
 80113c0:	6078      	str	r0, [r7, #4]
 80113c2:	460b      	mov	r3, r1
 80113c4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113c6:	2300      	movs	r3, #0
 80113c8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113ca:	2300      	movs	r3, #0
 80113cc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80113ce:	687b      	ldr	r3, [r7, #4]
 80113d0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80113d4:	78fa      	ldrb	r2, [r7, #3]
 80113d6:	4611      	mov	r1, r2
 80113d8:	4618      	mov	r0, r3
 80113da:	f7f4 fe77 	bl	80060cc <HAL_PCD_EP_ClrStall>
 80113de:	4603      	mov	r3, r0
 80113e0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113e2:	7bfb      	ldrb	r3, [r7, #15]
 80113e4:	4618      	mov	r0, r3
 80113e6:	f000 f8bf 	bl	8011568 <USBD_Get_USB_Status>
 80113ea:	4603      	mov	r3, r0
 80113ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113ee:	7bbb      	ldrb	r3, [r7, #14]
}
 80113f0:	4618      	mov	r0, r3
 80113f2:	3710      	adds	r7, #16
 80113f4:	46bd      	mov	sp, r7
 80113f6:	bd80      	pop	{r7, pc}

080113f8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80113f8:	b480      	push	{r7}
 80113fa:	b085      	sub	sp, #20
 80113fc:	af00      	add	r7, sp, #0
 80113fe:	6078      	str	r0, [r7, #4]
 8011400:	460b      	mov	r3, r1
 8011402:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011404:	687b      	ldr	r3, [r7, #4]
 8011406:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801140a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 801140c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011410:	2b00      	cmp	r3, #0
 8011412:	da0b      	bge.n	801142c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011414:	78fb      	ldrb	r3, [r7, #3]
 8011416:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801141a:	68f9      	ldr	r1, [r7, #12]
 801141c:	4613      	mov	r3, r2
 801141e:	00db      	lsls	r3, r3, #3
 8011420:	4413      	add	r3, r2
 8011422:	009b      	lsls	r3, r3, #2
 8011424:	440b      	add	r3, r1
 8011426:	333e      	adds	r3, #62	; 0x3e
 8011428:	781b      	ldrb	r3, [r3, #0]
 801142a:	e00b      	b.n	8011444 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801142c:	78fb      	ldrb	r3, [r7, #3]
 801142e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011432:	68f9      	ldr	r1, [r7, #12]
 8011434:	4613      	mov	r3, r2
 8011436:	00db      	lsls	r3, r3, #3
 8011438:	4413      	add	r3, r2
 801143a:	009b      	lsls	r3, r3, #2
 801143c:	440b      	add	r3, r1
 801143e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011442:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011444:	4618      	mov	r0, r3
 8011446:	3714      	adds	r7, #20
 8011448:	46bd      	mov	sp, r7
 801144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801144e:	4770      	bx	lr

08011450 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b084      	sub	sp, #16
 8011454:	af00      	add	r7, sp, #0
 8011456:	6078      	str	r0, [r7, #4]
 8011458:	460b      	mov	r3, r1
 801145a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801145c:	2300      	movs	r3, #0
 801145e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011460:	2300      	movs	r3, #0
 8011462:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801146a:	78fa      	ldrb	r2, [r7, #3]
 801146c:	4611      	mov	r1, r2
 801146e:	4618      	mov	r0, r3
 8011470:	f7f4 fc44 	bl	8005cfc <HAL_PCD_SetAddress>
 8011474:	4603      	mov	r3, r0
 8011476:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011478:	7bfb      	ldrb	r3, [r7, #15]
 801147a:	4618      	mov	r0, r3
 801147c:	f000 f874 	bl	8011568 <USBD_Get_USB_Status>
 8011480:	4603      	mov	r3, r0
 8011482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011484:	7bbb      	ldrb	r3, [r7, #14]
}
 8011486:	4618      	mov	r0, r3
 8011488:	3710      	adds	r7, #16
 801148a:	46bd      	mov	sp, r7
 801148c:	bd80      	pop	{r7, pc}

0801148e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801148e:	b580      	push	{r7, lr}
 8011490:	b086      	sub	sp, #24
 8011492:	af00      	add	r7, sp, #0
 8011494:	60f8      	str	r0, [r7, #12]
 8011496:	607a      	str	r2, [r7, #4]
 8011498:	603b      	str	r3, [r7, #0]
 801149a:	460b      	mov	r3, r1
 801149c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801149e:	2300      	movs	r3, #0
 80114a0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114a2:	2300      	movs	r3, #0
 80114a4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80114ac:	7af9      	ldrb	r1, [r7, #11]
 80114ae:	683b      	ldr	r3, [r7, #0]
 80114b0:	687a      	ldr	r2, [r7, #4]
 80114b2:	f7f4 fd5d 	bl	8005f70 <HAL_PCD_EP_Transmit>
 80114b6:	4603      	mov	r3, r0
 80114b8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114ba:	7dfb      	ldrb	r3, [r7, #23]
 80114bc:	4618      	mov	r0, r3
 80114be:	f000 f853 	bl	8011568 <USBD_Get_USB_Status>
 80114c2:	4603      	mov	r3, r0
 80114c4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80114c6:	7dbb      	ldrb	r3, [r7, #22]
}
 80114c8:	4618      	mov	r0, r3
 80114ca:	3718      	adds	r7, #24
 80114cc:	46bd      	mov	sp, r7
 80114ce:	bd80      	pop	{r7, pc}

080114d0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b086      	sub	sp, #24
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	60f8      	str	r0, [r7, #12]
 80114d8:	607a      	str	r2, [r7, #4]
 80114da:	603b      	str	r3, [r7, #0]
 80114dc:	460b      	mov	r3, r1
 80114de:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114e0:	2300      	movs	r3, #0
 80114e2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114e4:	2300      	movs	r3, #0
 80114e6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80114ee:	7af9      	ldrb	r1, [r7, #11]
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	687a      	ldr	r2, [r7, #4]
 80114f4:	f7f4 fcd9 	bl	8005eaa <HAL_PCD_EP_Receive>
 80114f8:	4603      	mov	r3, r0
 80114fa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114fc:	7dfb      	ldrb	r3, [r7, #23]
 80114fe:	4618      	mov	r0, r3
 8011500:	f000 f832 	bl	8011568 <USBD_Get_USB_Status>
 8011504:	4603      	mov	r3, r0
 8011506:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011508:	7dbb      	ldrb	r3, [r7, #22]
}
 801150a:	4618      	mov	r0, r3
 801150c:	3718      	adds	r7, #24
 801150e:	46bd      	mov	sp, r7
 8011510:	bd80      	pop	{r7, pc}

08011512 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011512:	b580      	push	{r7, lr}
 8011514:	b082      	sub	sp, #8
 8011516:	af00      	add	r7, sp, #0
 8011518:	6078      	str	r0, [r7, #4]
 801151a:	460b      	mov	r3, r1
 801151c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801151e:	687b      	ldr	r3, [r7, #4]
 8011520:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011524:	78fa      	ldrb	r2, [r7, #3]
 8011526:	4611      	mov	r1, r2
 8011528:	4618      	mov	r0, r3
 801152a:	f7f4 fd09 	bl	8005f40 <HAL_PCD_EP_GetRxCount>
 801152e:	4603      	mov	r3, r0
}
 8011530:	4618      	mov	r0, r3
 8011532:	3708      	adds	r7, #8
 8011534:	46bd      	mov	sp, r7
 8011536:	bd80      	pop	{r7, pc}

08011538 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011538:	b480      	push	{r7}
 801153a:	b083      	sub	sp, #12
 801153c:	af00      	add	r7, sp, #0
 801153e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011540:	4b03      	ldr	r3, [pc, #12]	; (8011550 <USBD_static_malloc+0x18>)
}
 8011542:	4618      	mov	r0, r3
 8011544:	370c      	adds	r7, #12
 8011546:	46bd      	mov	sp, r7
 8011548:	f85d 7b04 	ldr.w	r7, [sp], #4
 801154c:	4770      	bx	lr
 801154e:	bf00      	nop
 8011550:	200024e4 	.word	0x200024e4

08011554 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011554:	b480      	push	{r7}
 8011556:	b083      	sub	sp, #12
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]

}
 801155c:	bf00      	nop
 801155e:	370c      	adds	r7, #12
 8011560:	46bd      	mov	sp, r7
 8011562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011566:	4770      	bx	lr

08011568 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011568:	b480      	push	{r7}
 801156a:	b085      	sub	sp, #20
 801156c:	af00      	add	r7, sp, #0
 801156e:	4603      	mov	r3, r0
 8011570:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011572:	2300      	movs	r3, #0
 8011574:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011576:	79fb      	ldrb	r3, [r7, #7]
 8011578:	2b03      	cmp	r3, #3
 801157a:	d817      	bhi.n	80115ac <USBD_Get_USB_Status+0x44>
 801157c:	a201      	add	r2, pc, #4	; (adr r2, 8011584 <USBD_Get_USB_Status+0x1c>)
 801157e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011582:	bf00      	nop
 8011584:	08011595 	.word	0x08011595
 8011588:	0801159b 	.word	0x0801159b
 801158c:	080115a1 	.word	0x080115a1
 8011590:	080115a7 	.word	0x080115a7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011594:	2300      	movs	r3, #0
 8011596:	73fb      	strb	r3, [r7, #15]
    break;
 8011598:	e00b      	b.n	80115b2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801159a:	2303      	movs	r3, #3
 801159c:	73fb      	strb	r3, [r7, #15]
    break;
 801159e:	e008      	b.n	80115b2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80115a0:	2301      	movs	r3, #1
 80115a2:	73fb      	strb	r3, [r7, #15]
    break;
 80115a4:	e005      	b.n	80115b2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80115a6:	2303      	movs	r3, #3
 80115a8:	73fb      	strb	r3, [r7, #15]
    break;
 80115aa:	e002      	b.n	80115b2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80115ac:	2303      	movs	r3, #3
 80115ae:	73fb      	strb	r3, [r7, #15]
    break;
 80115b0:	bf00      	nop
  }
  return usb_status;
 80115b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80115b4:	4618      	mov	r0, r3
 80115b6:	3714      	adds	r7, #20
 80115b8:	46bd      	mov	sp, r7
 80115ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115be:	4770      	bx	lr

080115c0 <__cvt>:
 80115c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80115c4:	ec55 4b10 	vmov	r4, r5, d0
 80115c8:	2d00      	cmp	r5, #0
 80115ca:	460e      	mov	r6, r1
 80115cc:	4619      	mov	r1, r3
 80115ce:	462b      	mov	r3, r5
 80115d0:	bfbb      	ittet	lt
 80115d2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80115d6:	461d      	movlt	r5, r3
 80115d8:	2300      	movge	r3, #0
 80115da:	232d      	movlt	r3, #45	; 0x2d
 80115dc:	700b      	strb	r3, [r1, #0]
 80115de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80115e0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80115e4:	4691      	mov	r9, r2
 80115e6:	f023 0820 	bic.w	r8, r3, #32
 80115ea:	bfbc      	itt	lt
 80115ec:	4622      	movlt	r2, r4
 80115ee:	4614      	movlt	r4, r2
 80115f0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80115f4:	d005      	beq.n	8011602 <__cvt+0x42>
 80115f6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80115fa:	d100      	bne.n	80115fe <__cvt+0x3e>
 80115fc:	3601      	adds	r6, #1
 80115fe:	2102      	movs	r1, #2
 8011600:	e000      	b.n	8011604 <__cvt+0x44>
 8011602:	2103      	movs	r1, #3
 8011604:	ab03      	add	r3, sp, #12
 8011606:	9301      	str	r3, [sp, #4]
 8011608:	ab02      	add	r3, sp, #8
 801160a:	9300      	str	r3, [sp, #0]
 801160c:	ec45 4b10 	vmov	d0, r4, r5
 8011610:	4653      	mov	r3, sl
 8011612:	4632      	mov	r2, r6
 8011614:	f000 fdd8 	bl	80121c8 <_dtoa_r>
 8011618:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 801161c:	4607      	mov	r7, r0
 801161e:	d102      	bne.n	8011626 <__cvt+0x66>
 8011620:	f019 0f01 	tst.w	r9, #1
 8011624:	d022      	beq.n	801166c <__cvt+0xac>
 8011626:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 801162a:	eb07 0906 	add.w	r9, r7, r6
 801162e:	d110      	bne.n	8011652 <__cvt+0x92>
 8011630:	783b      	ldrb	r3, [r7, #0]
 8011632:	2b30      	cmp	r3, #48	; 0x30
 8011634:	d10a      	bne.n	801164c <__cvt+0x8c>
 8011636:	2200      	movs	r2, #0
 8011638:	2300      	movs	r3, #0
 801163a:	4620      	mov	r0, r4
 801163c:	4629      	mov	r1, r5
 801163e:	f7ef fa43 	bl	8000ac8 <__aeabi_dcmpeq>
 8011642:	b918      	cbnz	r0, 801164c <__cvt+0x8c>
 8011644:	f1c6 0601 	rsb	r6, r6, #1
 8011648:	f8ca 6000 	str.w	r6, [sl]
 801164c:	f8da 3000 	ldr.w	r3, [sl]
 8011650:	4499      	add	r9, r3
 8011652:	2200      	movs	r2, #0
 8011654:	2300      	movs	r3, #0
 8011656:	4620      	mov	r0, r4
 8011658:	4629      	mov	r1, r5
 801165a:	f7ef fa35 	bl	8000ac8 <__aeabi_dcmpeq>
 801165e:	b108      	cbz	r0, 8011664 <__cvt+0xa4>
 8011660:	f8cd 900c 	str.w	r9, [sp, #12]
 8011664:	2230      	movs	r2, #48	; 0x30
 8011666:	9b03      	ldr	r3, [sp, #12]
 8011668:	454b      	cmp	r3, r9
 801166a:	d307      	bcc.n	801167c <__cvt+0xbc>
 801166c:	9b03      	ldr	r3, [sp, #12]
 801166e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8011670:	1bdb      	subs	r3, r3, r7
 8011672:	4638      	mov	r0, r7
 8011674:	6013      	str	r3, [r2, #0]
 8011676:	b004      	add	sp, #16
 8011678:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801167c:	1c59      	adds	r1, r3, #1
 801167e:	9103      	str	r1, [sp, #12]
 8011680:	701a      	strb	r2, [r3, #0]
 8011682:	e7f0      	b.n	8011666 <__cvt+0xa6>

08011684 <__exponent>:
 8011684:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011686:	4603      	mov	r3, r0
 8011688:	2900      	cmp	r1, #0
 801168a:	bfb8      	it	lt
 801168c:	4249      	neglt	r1, r1
 801168e:	f803 2b02 	strb.w	r2, [r3], #2
 8011692:	bfb4      	ite	lt
 8011694:	222d      	movlt	r2, #45	; 0x2d
 8011696:	222b      	movge	r2, #43	; 0x2b
 8011698:	2909      	cmp	r1, #9
 801169a:	7042      	strb	r2, [r0, #1]
 801169c:	dd2a      	ble.n	80116f4 <__exponent+0x70>
 801169e:	f10d 0207 	add.w	r2, sp, #7
 80116a2:	4617      	mov	r7, r2
 80116a4:	260a      	movs	r6, #10
 80116a6:	4694      	mov	ip, r2
 80116a8:	fb91 f5f6 	sdiv	r5, r1, r6
 80116ac:	fb06 1415 	mls	r4, r6, r5, r1
 80116b0:	3430      	adds	r4, #48	; 0x30
 80116b2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80116b6:	460c      	mov	r4, r1
 80116b8:	2c63      	cmp	r4, #99	; 0x63
 80116ba:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 80116be:	4629      	mov	r1, r5
 80116c0:	dcf1      	bgt.n	80116a6 <__exponent+0x22>
 80116c2:	3130      	adds	r1, #48	; 0x30
 80116c4:	f1ac 0402 	sub.w	r4, ip, #2
 80116c8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80116cc:	1c41      	adds	r1, r0, #1
 80116ce:	4622      	mov	r2, r4
 80116d0:	42ba      	cmp	r2, r7
 80116d2:	d30a      	bcc.n	80116ea <__exponent+0x66>
 80116d4:	f10d 0209 	add.w	r2, sp, #9
 80116d8:	eba2 020c 	sub.w	r2, r2, ip
 80116dc:	42bc      	cmp	r4, r7
 80116de:	bf88      	it	hi
 80116e0:	2200      	movhi	r2, #0
 80116e2:	4413      	add	r3, r2
 80116e4:	1a18      	subs	r0, r3, r0
 80116e6:	b003      	add	sp, #12
 80116e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80116ea:	f812 5b01 	ldrb.w	r5, [r2], #1
 80116ee:	f801 5f01 	strb.w	r5, [r1, #1]!
 80116f2:	e7ed      	b.n	80116d0 <__exponent+0x4c>
 80116f4:	2330      	movs	r3, #48	; 0x30
 80116f6:	3130      	adds	r1, #48	; 0x30
 80116f8:	7083      	strb	r3, [r0, #2]
 80116fa:	70c1      	strb	r1, [r0, #3]
 80116fc:	1d03      	adds	r3, r0, #4
 80116fe:	e7f1      	b.n	80116e4 <__exponent+0x60>

08011700 <_printf_float>:
 8011700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011704:	ed2d 8b02 	vpush	{d8}
 8011708:	b08d      	sub	sp, #52	; 0x34
 801170a:	460c      	mov	r4, r1
 801170c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8011710:	4616      	mov	r6, r2
 8011712:	461f      	mov	r7, r3
 8011714:	4605      	mov	r5, r0
 8011716:	f000 fc91 	bl	801203c <_localeconv_r>
 801171a:	f8d0 a000 	ldr.w	sl, [r0]
 801171e:	4650      	mov	r0, sl
 8011720:	f7ee fda6 	bl	8000270 <strlen>
 8011724:	2300      	movs	r3, #0
 8011726:	930a      	str	r3, [sp, #40]	; 0x28
 8011728:	6823      	ldr	r3, [r4, #0]
 801172a:	9305      	str	r3, [sp, #20]
 801172c:	f8d8 3000 	ldr.w	r3, [r8]
 8011730:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011734:	3307      	adds	r3, #7
 8011736:	f023 0307 	bic.w	r3, r3, #7
 801173a:	f103 0208 	add.w	r2, r3, #8
 801173e:	f8c8 2000 	str.w	r2, [r8]
 8011742:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011746:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801174a:	9307      	str	r3, [sp, #28]
 801174c:	f8cd 8018 	str.w	r8, [sp, #24]
 8011750:	ee08 0a10 	vmov	s16, r0
 8011754:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8011758:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801175c:	4b9e      	ldr	r3, [pc, #632]	; (80119d8 <_printf_float+0x2d8>)
 801175e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011762:	f7ef f9e3 	bl	8000b2c <__aeabi_dcmpun>
 8011766:	bb88      	cbnz	r0, 80117cc <_printf_float+0xcc>
 8011768:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801176c:	4b9a      	ldr	r3, [pc, #616]	; (80119d8 <_printf_float+0x2d8>)
 801176e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011772:	f7ef f9bd 	bl	8000af0 <__aeabi_dcmple>
 8011776:	bb48      	cbnz	r0, 80117cc <_printf_float+0xcc>
 8011778:	2200      	movs	r2, #0
 801177a:	2300      	movs	r3, #0
 801177c:	4640      	mov	r0, r8
 801177e:	4649      	mov	r1, r9
 8011780:	f7ef f9ac 	bl	8000adc <__aeabi_dcmplt>
 8011784:	b110      	cbz	r0, 801178c <_printf_float+0x8c>
 8011786:	232d      	movs	r3, #45	; 0x2d
 8011788:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801178c:	4a93      	ldr	r2, [pc, #588]	; (80119dc <_printf_float+0x2dc>)
 801178e:	4b94      	ldr	r3, [pc, #592]	; (80119e0 <_printf_float+0x2e0>)
 8011790:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8011794:	bf94      	ite	ls
 8011796:	4690      	movls	r8, r2
 8011798:	4698      	movhi	r8, r3
 801179a:	2303      	movs	r3, #3
 801179c:	6123      	str	r3, [r4, #16]
 801179e:	9b05      	ldr	r3, [sp, #20]
 80117a0:	f023 0304 	bic.w	r3, r3, #4
 80117a4:	6023      	str	r3, [r4, #0]
 80117a6:	f04f 0900 	mov.w	r9, #0
 80117aa:	9700      	str	r7, [sp, #0]
 80117ac:	4633      	mov	r3, r6
 80117ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80117b0:	4621      	mov	r1, r4
 80117b2:	4628      	mov	r0, r5
 80117b4:	f000 f9da 	bl	8011b6c <_printf_common>
 80117b8:	3001      	adds	r0, #1
 80117ba:	f040 8090 	bne.w	80118de <_printf_float+0x1de>
 80117be:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80117c2:	b00d      	add	sp, #52	; 0x34
 80117c4:	ecbd 8b02 	vpop	{d8}
 80117c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117cc:	4642      	mov	r2, r8
 80117ce:	464b      	mov	r3, r9
 80117d0:	4640      	mov	r0, r8
 80117d2:	4649      	mov	r1, r9
 80117d4:	f7ef f9aa 	bl	8000b2c <__aeabi_dcmpun>
 80117d8:	b140      	cbz	r0, 80117ec <_printf_float+0xec>
 80117da:	464b      	mov	r3, r9
 80117dc:	2b00      	cmp	r3, #0
 80117de:	bfbc      	itt	lt
 80117e0:	232d      	movlt	r3, #45	; 0x2d
 80117e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80117e6:	4a7f      	ldr	r2, [pc, #508]	; (80119e4 <_printf_float+0x2e4>)
 80117e8:	4b7f      	ldr	r3, [pc, #508]	; (80119e8 <_printf_float+0x2e8>)
 80117ea:	e7d1      	b.n	8011790 <_printf_float+0x90>
 80117ec:	6863      	ldr	r3, [r4, #4]
 80117ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80117f2:	9206      	str	r2, [sp, #24]
 80117f4:	1c5a      	adds	r2, r3, #1
 80117f6:	d13f      	bne.n	8011878 <_printf_float+0x178>
 80117f8:	2306      	movs	r3, #6
 80117fa:	6063      	str	r3, [r4, #4]
 80117fc:	9b05      	ldr	r3, [sp, #20]
 80117fe:	6861      	ldr	r1, [r4, #4]
 8011800:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011804:	2300      	movs	r3, #0
 8011806:	9303      	str	r3, [sp, #12]
 8011808:	ab0a      	add	r3, sp, #40	; 0x28
 801180a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801180e:	ab09      	add	r3, sp, #36	; 0x24
 8011810:	ec49 8b10 	vmov	d0, r8, r9
 8011814:	9300      	str	r3, [sp, #0]
 8011816:	6022      	str	r2, [r4, #0]
 8011818:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801181c:	4628      	mov	r0, r5
 801181e:	f7ff fecf 	bl	80115c0 <__cvt>
 8011822:	9b06      	ldr	r3, [sp, #24]
 8011824:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011826:	2b47      	cmp	r3, #71	; 0x47
 8011828:	4680      	mov	r8, r0
 801182a:	d108      	bne.n	801183e <_printf_float+0x13e>
 801182c:	1cc8      	adds	r0, r1, #3
 801182e:	db02      	blt.n	8011836 <_printf_float+0x136>
 8011830:	6863      	ldr	r3, [r4, #4]
 8011832:	4299      	cmp	r1, r3
 8011834:	dd41      	ble.n	80118ba <_printf_float+0x1ba>
 8011836:	f1ab 0302 	sub.w	r3, fp, #2
 801183a:	fa5f fb83 	uxtb.w	fp, r3
 801183e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011842:	d820      	bhi.n	8011886 <_printf_float+0x186>
 8011844:	3901      	subs	r1, #1
 8011846:	465a      	mov	r2, fp
 8011848:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801184c:	9109      	str	r1, [sp, #36]	; 0x24
 801184e:	f7ff ff19 	bl	8011684 <__exponent>
 8011852:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011854:	1813      	adds	r3, r2, r0
 8011856:	2a01      	cmp	r2, #1
 8011858:	4681      	mov	r9, r0
 801185a:	6123      	str	r3, [r4, #16]
 801185c:	dc02      	bgt.n	8011864 <_printf_float+0x164>
 801185e:	6822      	ldr	r2, [r4, #0]
 8011860:	07d2      	lsls	r2, r2, #31
 8011862:	d501      	bpl.n	8011868 <_printf_float+0x168>
 8011864:	3301      	adds	r3, #1
 8011866:	6123      	str	r3, [r4, #16]
 8011868:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801186c:	2b00      	cmp	r3, #0
 801186e:	d09c      	beq.n	80117aa <_printf_float+0xaa>
 8011870:	232d      	movs	r3, #45	; 0x2d
 8011872:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011876:	e798      	b.n	80117aa <_printf_float+0xaa>
 8011878:	9a06      	ldr	r2, [sp, #24]
 801187a:	2a47      	cmp	r2, #71	; 0x47
 801187c:	d1be      	bne.n	80117fc <_printf_float+0xfc>
 801187e:	2b00      	cmp	r3, #0
 8011880:	d1bc      	bne.n	80117fc <_printf_float+0xfc>
 8011882:	2301      	movs	r3, #1
 8011884:	e7b9      	b.n	80117fa <_printf_float+0xfa>
 8011886:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801188a:	d118      	bne.n	80118be <_printf_float+0x1be>
 801188c:	2900      	cmp	r1, #0
 801188e:	6863      	ldr	r3, [r4, #4]
 8011890:	dd0b      	ble.n	80118aa <_printf_float+0x1aa>
 8011892:	6121      	str	r1, [r4, #16]
 8011894:	b913      	cbnz	r3, 801189c <_printf_float+0x19c>
 8011896:	6822      	ldr	r2, [r4, #0]
 8011898:	07d0      	lsls	r0, r2, #31
 801189a:	d502      	bpl.n	80118a2 <_printf_float+0x1a2>
 801189c:	3301      	adds	r3, #1
 801189e:	440b      	add	r3, r1
 80118a0:	6123      	str	r3, [r4, #16]
 80118a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80118a4:	f04f 0900 	mov.w	r9, #0
 80118a8:	e7de      	b.n	8011868 <_printf_float+0x168>
 80118aa:	b913      	cbnz	r3, 80118b2 <_printf_float+0x1b2>
 80118ac:	6822      	ldr	r2, [r4, #0]
 80118ae:	07d2      	lsls	r2, r2, #31
 80118b0:	d501      	bpl.n	80118b6 <_printf_float+0x1b6>
 80118b2:	3302      	adds	r3, #2
 80118b4:	e7f4      	b.n	80118a0 <_printf_float+0x1a0>
 80118b6:	2301      	movs	r3, #1
 80118b8:	e7f2      	b.n	80118a0 <_printf_float+0x1a0>
 80118ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80118be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118c0:	4299      	cmp	r1, r3
 80118c2:	db05      	blt.n	80118d0 <_printf_float+0x1d0>
 80118c4:	6823      	ldr	r3, [r4, #0]
 80118c6:	6121      	str	r1, [r4, #16]
 80118c8:	07d8      	lsls	r0, r3, #31
 80118ca:	d5ea      	bpl.n	80118a2 <_printf_float+0x1a2>
 80118cc:	1c4b      	adds	r3, r1, #1
 80118ce:	e7e7      	b.n	80118a0 <_printf_float+0x1a0>
 80118d0:	2900      	cmp	r1, #0
 80118d2:	bfd4      	ite	le
 80118d4:	f1c1 0202 	rsble	r2, r1, #2
 80118d8:	2201      	movgt	r2, #1
 80118da:	4413      	add	r3, r2
 80118dc:	e7e0      	b.n	80118a0 <_printf_float+0x1a0>
 80118de:	6823      	ldr	r3, [r4, #0]
 80118e0:	055a      	lsls	r2, r3, #21
 80118e2:	d407      	bmi.n	80118f4 <_printf_float+0x1f4>
 80118e4:	6923      	ldr	r3, [r4, #16]
 80118e6:	4642      	mov	r2, r8
 80118e8:	4631      	mov	r1, r6
 80118ea:	4628      	mov	r0, r5
 80118ec:	47b8      	blx	r7
 80118ee:	3001      	adds	r0, #1
 80118f0:	d12c      	bne.n	801194c <_printf_float+0x24c>
 80118f2:	e764      	b.n	80117be <_printf_float+0xbe>
 80118f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80118f8:	f240 80e0 	bls.w	8011abc <_printf_float+0x3bc>
 80118fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011900:	2200      	movs	r2, #0
 8011902:	2300      	movs	r3, #0
 8011904:	f7ef f8e0 	bl	8000ac8 <__aeabi_dcmpeq>
 8011908:	2800      	cmp	r0, #0
 801190a:	d034      	beq.n	8011976 <_printf_float+0x276>
 801190c:	4a37      	ldr	r2, [pc, #220]	; (80119ec <_printf_float+0x2ec>)
 801190e:	2301      	movs	r3, #1
 8011910:	4631      	mov	r1, r6
 8011912:	4628      	mov	r0, r5
 8011914:	47b8      	blx	r7
 8011916:	3001      	adds	r0, #1
 8011918:	f43f af51 	beq.w	80117be <_printf_float+0xbe>
 801191c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011920:	429a      	cmp	r2, r3
 8011922:	db02      	blt.n	801192a <_printf_float+0x22a>
 8011924:	6823      	ldr	r3, [r4, #0]
 8011926:	07d8      	lsls	r0, r3, #31
 8011928:	d510      	bpl.n	801194c <_printf_float+0x24c>
 801192a:	ee18 3a10 	vmov	r3, s16
 801192e:	4652      	mov	r2, sl
 8011930:	4631      	mov	r1, r6
 8011932:	4628      	mov	r0, r5
 8011934:	47b8      	blx	r7
 8011936:	3001      	adds	r0, #1
 8011938:	f43f af41 	beq.w	80117be <_printf_float+0xbe>
 801193c:	f04f 0800 	mov.w	r8, #0
 8011940:	f104 091a 	add.w	r9, r4, #26
 8011944:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011946:	3b01      	subs	r3, #1
 8011948:	4543      	cmp	r3, r8
 801194a:	dc09      	bgt.n	8011960 <_printf_float+0x260>
 801194c:	6823      	ldr	r3, [r4, #0]
 801194e:	079b      	lsls	r3, r3, #30
 8011950:	f100 8107 	bmi.w	8011b62 <_printf_float+0x462>
 8011954:	68e0      	ldr	r0, [r4, #12]
 8011956:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011958:	4298      	cmp	r0, r3
 801195a:	bfb8      	it	lt
 801195c:	4618      	movlt	r0, r3
 801195e:	e730      	b.n	80117c2 <_printf_float+0xc2>
 8011960:	2301      	movs	r3, #1
 8011962:	464a      	mov	r2, r9
 8011964:	4631      	mov	r1, r6
 8011966:	4628      	mov	r0, r5
 8011968:	47b8      	blx	r7
 801196a:	3001      	adds	r0, #1
 801196c:	f43f af27 	beq.w	80117be <_printf_float+0xbe>
 8011970:	f108 0801 	add.w	r8, r8, #1
 8011974:	e7e6      	b.n	8011944 <_printf_float+0x244>
 8011976:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011978:	2b00      	cmp	r3, #0
 801197a:	dc39      	bgt.n	80119f0 <_printf_float+0x2f0>
 801197c:	4a1b      	ldr	r2, [pc, #108]	; (80119ec <_printf_float+0x2ec>)
 801197e:	2301      	movs	r3, #1
 8011980:	4631      	mov	r1, r6
 8011982:	4628      	mov	r0, r5
 8011984:	47b8      	blx	r7
 8011986:	3001      	adds	r0, #1
 8011988:	f43f af19 	beq.w	80117be <_printf_float+0xbe>
 801198c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011990:	4313      	orrs	r3, r2
 8011992:	d102      	bne.n	801199a <_printf_float+0x29a>
 8011994:	6823      	ldr	r3, [r4, #0]
 8011996:	07d9      	lsls	r1, r3, #31
 8011998:	d5d8      	bpl.n	801194c <_printf_float+0x24c>
 801199a:	ee18 3a10 	vmov	r3, s16
 801199e:	4652      	mov	r2, sl
 80119a0:	4631      	mov	r1, r6
 80119a2:	4628      	mov	r0, r5
 80119a4:	47b8      	blx	r7
 80119a6:	3001      	adds	r0, #1
 80119a8:	f43f af09 	beq.w	80117be <_printf_float+0xbe>
 80119ac:	f04f 0900 	mov.w	r9, #0
 80119b0:	f104 0a1a 	add.w	sl, r4, #26
 80119b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119b6:	425b      	negs	r3, r3
 80119b8:	454b      	cmp	r3, r9
 80119ba:	dc01      	bgt.n	80119c0 <_printf_float+0x2c0>
 80119bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119be:	e792      	b.n	80118e6 <_printf_float+0x1e6>
 80119c0:	2301      	movs	r3, #1
 80119c2:	4652      	mov	r2, sl
 80119c4:	4631      	mov	r1, r6
 80119c6:	4628      	mov	r0, r5
 80119c8:	47b8      	blx	r7
 80119ca:	3001      	adds	r0, #1
 80119cc:	f43f aef7 	beq.w	80117be <_printf_float+0xbe>
 80119d0:	f109 0901 	add.w	r9, r9, #1
 80119d4:	e7ee      	b.n	80119b4 <_printf_float+0x2b4>
 80119d6:	bf00      	nop
 80119d8:	7fefffff 	.word	0x7fefffff
 80119dc:	08015844 	.word	0x08015844
 80119e0:	08015848 	.word	0x08015848
 80119e4:	0801584c 	.word	0x0801584c
 80119e8:	08015850 	.word	0x08015850
 80119ec:	08015854 	.word	0x08015854
 80119f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80119f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80119f4:	429a      	cmp	r2, r3
 80119f6:	bfa8      	it	ge
 80119f8:	461a      	movge	r2, r3
 80119fa:	2a00      	cmp	r2, #0
 80119fc:	4691      	mov	r9, r2
 80119fe:	dc37      	bgt.n	8011a70 <_printf_float+0x370>
 8011a00:	f04f 0b00 	mov.w	fp, #0
 8011a04:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011a08:	f104 021a 	add.w	r2, r4, #26
 8011a0c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011a0e:	9305      	str	r3, [sp, #20]
 8011a10:	eba3 0309 	sub.w	r3, r3, r9
 8011a14:	455b      	cmp	r3, fp
 8011a16:	dc33      	bgt.n	8011a80 <_printf_float+0x380>
 8011a18:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011a1c:	429a      	cmp	r2, r3
 8011a1e:	db3b      	blt.n	8011a98 <_printf_float+0x398>
 8011a20:	6823      	ldr	r3, [r4, #0]
 8011a22:	07da      	lsls	r2, r3, #31
 8011a24:	d438      	bmi.n	8011a98 <_printf_float+0x398>
 8011a26:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011a2a:	eba2 0903 	sub.w	r9, r2, r3
 8011a2e:	9b05      	ldr	r3, [sp, #20]
 8011a30:	1ad2      	subs	r2, r2, r3
 8011a32:	4591      	cmp	r9, r2
 8011a34:	bfa8      	it	ge
 8011a36:	4691      	movge	r9, r2
 8011a38:	f1b9 0f00 	cmp.w	r9, #0
 8011a3c:	dc35      	bgt.n	8011aaa <_printf_float+0x3aa>
 8011a3e:	f04f 0800 	mov.w	r8, #0
 8011a42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011a46:	f104 0a1a 	add.w	sl, r4, #26
 8011a4a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011a4e:	1a9b      	subs	r3, r3, r2
 8011a50:	eba3 0309 	sub.w	r3, r3, r9
 8011a54:	4543      	cmp	r3, r8
 8011a56:	f77f af79 	ble.w	801194c <_printf_float+0x24c>
 8011a5a:	2301      	movs	r3, #1
 8011a5c:	4652      	mov	r2, sl
 8011a5e:	4631      	mov	r1, r6
 8011a60:	4628      	mov	r0, r5
 8011a62:	47b8      	blx	r7
 8011a64:	3001      	adds	r0, #1
 8011a66:	f43f aeaa 	beq.w	80117be <_printf_float+0xbe>
 8011a6a:	f108 0801 	add.w	r8, r8, #1
 8011a6e:	e7ec      	b.n	8011a4a <_printf_float+0x34a>
 8011a70:	4613      	mov	r3, r2
 8011a72:	4631      	mov	r1, r6
 8011a74:	4642      	mov	r2, r8
 8011a76:	4628      	mov	r0, r5
 8011a78:	47b8      	blx	r7
 8011a7a:	3001      	adds	r0, #1
 8011a7c:	d1c0      	bne.n	8011a00 <_printf_float+0x300>
 8011a7e:	e69e      	b.n	80117be <_printf_float+0xbe>
 8011a80:	2301      	movs	r3, #1
 8011a82:	4631      	mov	r1, r6
 8011a84:	4628      	mov	r0, r5
 8011a86:	9205      	str	r2, [sp, #20]
 8011a88:	47b8      	blx	r7
 8011a8a:	3001      	adds	r0, #1
 8011a8c:	f43f ae97 	beq.w	80117be <_printf_float+0xbe>
 8011a90:	9a05      	ldr	r2, [sp, #20]
 8011a92:	f10b 0b01 	add.w	fp, fp, #1
 8011a96:	e7b9      	b.n	8011a0c <_printf_float+0x30c>
 8011a98:	ee18 3a10 	vmov	r3, s16
 8011a9c:	4652      	mov	r2, sl
 8011a9e:	4631      	mov	r1, r6
 8011aa0:	4628      	mov	r0, r5
 8011aa2:	47b8      	blx	r7
 8011aa4:	3001      	adds	r0, #1
 8011aa6:	d1be      	bne.n	8011a26 <_printf_float+0x326>
 8011aa8:	e689      	b.n	80117be <_printf_float+0xbe>
 8011aaa:	9a05      	ldr	r2, [sp, #20]
 8011aac:	464b      	mov	r3, r9
 8011aae:	4442      	add	r2, r8
 8011ab0:	4631      	mov	r1, r6
 8011ab2:	4628      	mov	r0, r5
 8011ab4:	47b8      	blx	r7
 8011ab6:	3001      	adds	r0, #1
 8011ab8:	d1c1      	bne.n	8011a3e <_printf_float+0x33e>
 8011aba:	e680      	b.n	80117be <_printf_float+0xbe>
 8011abc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011abe:	2a01      	cmp	r2, #1
 8011ac0:	dc01      	bgt.n	8011ac6 <_printf_float+0x3c6>
 8011ac2:	07db      	lsls	r3, r3, #31
 8011ac4:	d53a      	bpl.n	8011b3c <_printf_float+0x43c>
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	4642      	mov	r2, r8
 8011aca:	4631      	mov	r1, r6
 8011acc:	4628      	mov	r0, r5
 8011ace:	47b8      	blx	r7
 8011ad0:	3001      	adds	r0, #1
 8011ad2:	f43f ae74 	beq.w	80117be <_printf_float+0xbe>
 8011ad6:	ee18 3a10 	vmov	r3, s16
 8011ada:	4652      	mov	r2, sl
 8011adc:	4631      	mov	r1, r6
 8011ade:	4628      	mov	r0, r5
 8011ae0:	47b8      	blx	r7
 8011ae2:	3001      	adds	r0, #1
 8011ae4:	f43f ae6b 	beq.w	80117be <_printf_float+0xbe>
 8011ae8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011aec:	2200      	movs	r2, #0
 8011aee:	2300      	movs	r3, #0
 8011af0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8011af4:	f7ee ffe8 	bl	8000ac8 <__aeabi_dcmpeq>
 8011af8:	b9d8      	cbnz	r0, 8011b32 <_printf_float+0x432>
 8011afa:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8011afe:	f108 0201 	add.w	r2, r8, #1
 8011b02:	4631      	mov	r1, r6
 8011b04:	4628      	mov	r0, r5
 8011b06:	47b8      	blx	r7
 8011b08:	3001      	adds	r0, #1
 8011b0a:	d10e      	bne.n	8011b2a <_printf_float+0x42a>
 8011b0c:	e657      	b.n	80117be <_printf_float+0xbe>
 8011b0e:	2301      	movs	r3, #1
 8011b10:	4652      	mov	r2, sl
 8011b12:	4631      	mov	r1, r6
 8011b14:	4628      	mov	r0, r5
 8011b16:	47b8      	blx	r7
 8011b18:	3001      	adds	r0, #1
 8011b1a:	f43f ae50 	beq.w	80117be <_printf_float+0xbe>
 8011b1e:	f108 0801 	add.w	r8, r8, #1
 8011b22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b24:	3b01      	subs	r3, #1
 8011b26:	4543      	cmp	r3, r8
 8011b28:	dcf1      	bgt.n	8011b0e <_printf_float+0x40e>
 8011b2a:	464b      	mov	r3, r9
 8011b2c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011b30:	e6da      	b.n	80118e8 <_printf_float+0x1e8>
 8011b32:	f04f 0800 	mov.w	r8, #0
 8011b36:	f104 0a1a 	add.w	sl, r4, #26
 8011b3a:	e7f2      	b.n	8011b22 <_printf_float+0x422>
 8011b3c:	2301      	movs	r3, #1
 8011b3e:	4642      	mov	r2, r8
 8011b40:	e7df      	b.n	8011b02 <_printf_float+0x402>
 8011b42:	2301      	movs	r3, #1
 8011b44:	464a      	mov	r2, r9
 8011b46:	4631      	mov	r1, r6
 8011b48:	4628      	mov	r0, r5
 8011b4a:	47b8      	blx	r7
 8011b4c:	3001      	adds	r0, #1
 8011b4e:	f43f ae36 	beq.w	80117be <_printf_float+0xbe>
 8011b52:	f108 0801 	add.w	r8, r8, #1
 8011b56:	68e3      	ldr	r3, [r4, #12]
 8011b58:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011b5a:	1a5b      	subs	r3, r3, r1
 8011b5c:	4543      	cmp	r3, r8
 8011b5e:	dcf0      	bgt.n	8011b42 <_printf_float+0x442>
 8011b60:	e6f8      	b.n	8011954 <_printf_float+0x254>
 8011b62:	f04f 0800 	mov.w	r8, #0
 8011b66:	f104 0919 	add.w	r9, r4, #25
 8011b6a:	e7f4      	b.n	8011b56 <_printf_float+0x456>

08011b6c <_printf_common>:
 8011b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011b70:	4616      	mov	r6, r2
 8011b72:	4699      	mov	r9, r3
 8011b74:	688a      	ldr	r2, [r1, #8]
 8011b76:	690b      	ldr	r3, [r1, #16]
 8011b78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011b7c:	4293      	cmp	r3, r2
 8011b7e:	bfb8      	it	lt
 8011b80:	4613      	movlt	r3, r2
 8011b82:	6033      	str	r3, [r6, #0]
 8011b84:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011b88:	4607      	mov	r7, r0
 8011b8a:	460c      	mov	r4, r1
 8011b8c:	b10a      	cbz	r2, 8011b92 <_printf_common+0x26>
 8011b8e:	3301      	adds	r3, #1
 8011b90:	6033      	str	r3, [r6, #0]
 8011b92:	6823      	ldr	r3, [r4, #0]
 8011b94:	0699      	lsls	r1, r3, #26
 8011b96:	bf42      	ittt	mi
 8011b98:	6833      	ldrmi	r3, [r6, #0]
 8011b9a:	3302      	addmi	r3, #2
 8011b9c:	6033      	strmi	r3, [r6, #0]
 8011b9e:	6825      	ldr	r5, [r4, #0]
 8011ba0:	f015 0506 	ands.w	r5, r5, #6
 8011ba4:	d106      	bne.n	8011bb4 <_printf_common+0x48>
 8011ba6:	f104 0a19 	add.w	sl, r4, #25
 8011baa:	68e3      	ldr	r3, [r4, #12]
 8011bac:	6832      	ldr	r2, [r6, #0]
 8011bae:	1a9b      	subs	r3, r3, r2
 8011bb0:	42ab      	cmp	r3, r5
 8011bb2:	dc26      	bgt.n	8011c02 <_printf_common+0x96>
 8011bb4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011bb8:	1e13      	subs	r3, r2, #0
 8011bba:	6822      	ldr	r2, [r4, #0]
 8011bbc:	bf18      	it	ne
 8011bbe:	2301      	movne	r3, #1
 8011bc0:	0692      	lsls	r2, r2, #26
 8011bc2:	d42b      	bmi.n	8011c1c <_printf_common+0xb0>
 8011bc4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011bc8:	4649      	mov	r1, r9
 8011bca:	4638      	mov	r0, r7
 8011bcc:	47c0      	blx	r8
 8011bce:	3001      	adds	r0, #1
 8011bd0:	d01e      	beq.n	8011c10 <_printf_common+0xa4>
 8011bd2:	6823      	ldr	r3, [r4, #0]
 8011bd4:	6922      	ldr	r2, [r4, #16]
 8011bd6:	f003 0306 	and.w	r3, r3, #6
 8011bda:	2b04      	cmp	r3, #4
 8011bdc:	bf02      	ittt	eq
 8011bde:	68e5      	ldreq	r5, [r4, #12]
 8011be0:	6833      	ldreq	r3, [r6, #0]
 8011be2:	1aed      	subeq	r5, r5, r3
 8011be4:	68a3      	ldr	r3, [r4, #8]
 8011be6:	bf0c      	ite	eq
 8011be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011bec:	2500      	movne	r5, #0
 8011bee:	4293      	cmp	r3, r2
 8011bf0:	bfc4      	itt	gt
 8011bf2:	1a9b      	subgt	r3, r3, r2
 8011bf4:	18ed      	addgt	r5, r5, r3
 8011bf6:	2600      	movs	r6, #0
 8011bf8:	341a      	adds	r4, #26
 8011bfa:	42b5      	cmp	r5, r6
 8011bfc:	d11a      	bne.n	8011c34 <_printf_common+0xc8>
 8011bfe:	2000      	movs	r0, #0
 8011c00:	e008      	b.n	8011c14 <_printf_common+0xa8>
 8011c02:	2301      	movs	r3, #1
 8011c04:	4652      	mov	r2, sl
 8011c06:	4649      	mov	r1, r9
 8011c08:	4638      	mov	r0, r7
 8011c0a:	47c0      	blx	r8
 8011c0c:	3001      	adds	r0, #1
 8011c0e:	d103      	bne.n	8011c18 <_printf_common+0xac>
 8011c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c18:	3501      	adds	r5, #1
 8011c1a:	e7c6      	b.n	8011baa <_printf_common+0x3e>
 8011c1c:	18e1      	adds	r1, r4, r3
 8011c1e:	1c5a      	adds	r2, r3, #1
 8011c20:	2030      	movs	r0, #48	; 0x30
 8011c22:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011c26:	4422      	add	r2, r4
 8011c28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011c2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011c30:	3302      	adds	r3, #2
 8011c32:	e7c7      	b.n	8011bc4 <_printf_common+0x58>
 8011c34:	2301      	movs	r3, #1
 8011c36:	4622      	mov	r2, r4
 8011c38:	4649      	mov	r1, r9
 8011c3a:	4638      	mov	r0, r7
 8011c3c:	47c0      	blx	r8
 8011c3e:	3001      	adds	r0, #1
 8011c40:	d0e6      	beq.n	8011c10 <_printf_common+0xa4>
 8011c42:	3601      	adds	r6, #1
 8011c44:	e7d9      	b.n	8011bfa <_printf_common+0x8e>
	...

08011c48 <_printf_i>:
 8011c48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011c4c:	7e0f      	ldrb	r7, [r1, #24]
 8011c4e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011c50:	2f78      	cmp	r7, #120	; 0x78
 8011c52:	4691      	mov	r9, r2
 8011c54:	4680      	mov	r8, r0
 8011c56:	460c      	mov	r4, r1
 8011c58:	469a      	mov	sl, r3
 8011c5a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011c5e:	d807      	bhi.n	8011c70 <_printf_i+0x28>
 8011c60:	2f62      	cmp	r7, #98	; 0x62
 8011c62:	d80a      	bhi.n	8011c7a <_printf_i+0x32>
 8011c64:	2f00      	cmp	r7, #0
 8011c66:	f000 80d4 	beq.w	8011e12 <_printf_i+0x1ca>
 8011c6a:	2f58      	cmp	r7, #88	; 0x58
 8011c6c:	f000 80c0 	beq.w	8011df0 <_printf_i+0x1a8>
 8011c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c74:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011c78:	e03a      	b.n	8011cf0 <_printf_i+0xa8>
 8011c7a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011c7e:	2b15      	cmp	r3, #21
 8011c80:	d8f6      	bhi.n	8011c70 <_printf_i+0x28>
 8011c82:	a101      	add	r1, pc, #4	; (adr r1, 8011c88 <_printf_i+0x40>)
 8011c84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011c88:	08011ce1 	.word	0x08011ce1
 8011c8c:	08011cf5 	.word	0x08011cf5
 8011c90:	08011c71 	.word	0x08011c71
 8011c94:	08011c71 	.word	0x08011c71
 8011c98:	08011c71 	.word	0x08011c71
 8011c9c:	08011c71 	.word	0x08011c71
 8011ca0:	08011cf5 	.word	0x08011cf5
 8011ca4:	08011c71 	.word	0x08011c71
 8011ca8:	08011c71 	.word	0x08011c71
 8011cac:	08011c71 	.word	0x08011c71
 8011cb0:	08011c71 	.word	0x08011c71
 8011cb4:	08011df9 	.word	0x08011df9
 8011cb8:	08011d21 	.word	0x08011d21
 8011cbc:	08011db3 	.word	0x08011db3
 8011cc0:	08011c71 	.word	0x08011c71
 8011cc4:	08011c71 	.word	0x08011c71
 8011cc8:	08011e1b 	.word	0x08011e1b
 8011ccc:	08011c71 	.word	0x08011c71
 8011cd0:	08011d21 	.word	0x08011d21
 8011cd4:	08011c71 	.word	0x08011c71
 8011cd8:	08011c71 	.word	0x08011c71
 8011cdc:	08011dbb 	.word	0x08011dbb
 8011ce0:	682b      	ldr	r3, [r5, #0]
 8011ce2:	1d1a      	adds	r2, r3, #4
 8011ce4:	681b      	ldr	r3, [r3, #0]
 8011ce6:	602a      	str	r2, [r5, #0]
 8011ce8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011cec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011cf0:	2301      	movs	r3, #1
 8011cf2:	e09f      	b.n	8011e34 <_printf_i+0x1ec>
 8011cf4:	6820      	ldr	r0, [r4, #0]
 8011cf6:	682b      	ldr	r3, [r5, #0]
 8011cf8:	0607      	lsls	r7, r0, #24
 8011cfa:	f103 0104 	add.w	r1, r3, #4
 8011cfe:	6029      	str	r1, [r5, #0]
 8011d00:	d501      	bpl.n	8011d06 <_printf_i+0xbe>
 8011d02:	681e      	ldr	r6, [r3, #0]
 8011d04:	e003      	b.n	8011d0e <_printf_i+0xc6>
 8011d06:	0646      	lsls	r6, r0, #25
 8011d08:	d5fb      	bpl.n	8011d02 <_printf_i+0xba>
 8011d0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011d0e:	2e00      	cmp	r6, #0
 8011d10:	da03      	bge.n	8011d1a <_printf_i+0xd2>
 8011d12:	232d      	movs	r3, #45	; 0x2d
 8011d14:	4276      	negs	r6, r6
 8011d16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d1a:	485a      	ldr	r0, [pc, #360]	; (8011e84 <_printf_i+0x23c>)
 8011d1c:	230a      	movs	r3, #10
 8011d1e:	e012      	b.n	8011d46 <_printf_i+0xfe>
 8011d20:	682b      	ldr	r3, [r5, #0]
 8011d22:	6820      	ldr	r0, [r4, #0]
 8011d24:	1d19      	adds	r1, r3, #4
 8011d26:	6029      	str	r1, [r5, #0]
 8011d28:	0605      	lsls	r5, r0, #24
 8011d2a:	d501      	bpl.n	8011d30 <_printf_i+0xe8>
 8011d2c:	681e      	ldr	r6, [r3, #0]
 8011d2e:	e002      	b.n	8011d36 <_printf_i+0xee>
 8011d30:	0641      	lsls	r1, r0, #25
 8011d32:	d5fb      	bpl.n	8011d2c <_printf_i+0xe4>
 8011d34:	881e      	ldrh	r6, [r3, #0]
 8011d36:	4853      	ldr	r0, [pc, #332]	; (8011e84 <_printf_i+0x23c>)
 8011d38:	2f6f      	cmp	r7, #111	; 0x6f
 8011d3a:	bf0c      	ite	eq
 8011d3c:	2308      	moveq	r3, #8
 8011d3e:	230a      	movne	r3, #10
 8011d40:	2100      	movs	r1, #0
 8011d42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011d46:	6865      	ldr	r5, [r4, #4]
 8011d48:	60a5      	str	r5, [r4, #8]
 8011d4a:	2d00      	cmp	r5, #0
 8011d4c:	bfa2      	ittt	ge
 8011d4e:	6821      	ldrge	r1, [r4, #0]
 8011d50:	f021 0104 	bicge.w	r1, r1, #4
 8011d54:	6021      	strge	r1, [r4, #0]
 8011d56:	b90e      	cbnz	r6, 8011d5c <_printf_i+0x114>
 8011d58:	2d00      	cmp	r5, #0
 8011d5a:	d04b      	beq.n	8011df4 <_printf_i+0x1ac>
 8011d5c:	4615      	mov	r5, r2
 8011d5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8011d62:	fb03 6711 	mls	r7, r3, r1, r6
 8011d66:	5dc7      	ldrb	r7, [r0, r7]
 8011d68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011d6c:	4637      	mov	r7, r6
 8011d6e:	42bb      	cmp	r3, r7
 8011d70:	460e      	mov	r6, r1
 8011d72:	d9f4      	bls.n	8011d5e <_printf_i+0x116>
 8011d74:	2b08      	cmp	r3, #8
 8011d76:	d10b      	bne.n	8011d90 <_printf_i+0x148>
 8011d78:	6823      	ldr	r3, [r4, #0]
 8011d7a:	07de      	lsls	r6, r3, #31
 8011d7c:	d508      	bpl.n	8011d90 <_printf_i+0x148>
 8011d7e:	6923      	ldr	r3, [r4, #16]
 8011d80:	6861      	ldr	r1, [r4, #4]
 8011d82:	4299      	cmp	r1, r3
 8011d84:	bfde      	ittt	le
 8011d86:	2330      	movle	r3, #48	; 0x30
 8011d88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011d8c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011d90:	1b52      	subs	r2, r2, r5
 8011d92:	6122      	str	r2, [r4, #16]
 8011d94:	f8cd a000 	str.w	sl, [sp]
 8011d98:	464b      	mov	r3, r9
 8011d9a:	aa03      	add	r2, sp, #12
 8011d9c:	4621      	mov	r1, r4
 8011d9e:	4640      	mov	r0, r8
 8011da0:	f7ff fee4 	bl	8011b6c <_printf_common>
 8011da4:	3001      	adds	r0, #1
 8011da6:	d14a      	bne.n	8011e3e <_printf_i+0x1f6>
 8011da8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011dac:	b004      	add	sp, #16
 8011dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011db2:	6823      	ldr	r3, [r4, #0]
 8011db4:	f043 0320 	orr.w	r3, r3, #32
 8011db8:	6023      	str	r3, [r4, #0]
 8011dba:	4833      	ldr	r0, [pc, #204]	; (8011e88 <_printf_i+0x240>)
 8011dbc:	2778      	movs	r7, #120	; 0x78
 8011dbe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011dc2:	6823      	ldr	r3, [r4, #0]
 8011dc4:	6829      	ldr	r1, [r5, #0]
 8011dc6:	061f      	lsls	r7, r3, #24
 8011dc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8011dcc:	d402      	bmi.n	8011dd4 <_printf_i+0x18c>
 8011dce:	065f      	lsls	r7, r3, #25
 8011dd0:	bf48      	it	mi
 8011dd2:	b2b6      	uxthmi	r6, r6
 8011dd4:	07df      	lsls	r7, r3, #31
 8011dd6:	bf48      	it	mi
 8011dd8:	f043 0320 	orrmi.w	r3, r3, #32
 8011ddc:	6029      	str	r1, [r5, #0]
 8011dde:	bf48      	it	mi
 8011de0:	6023      	strmi	r3, [r4, #0]
 8011de2:	b91e      	cbnz	r6, 8011dec <_printf_i+0x1a4>
 8011de4:	6823      	ldr	r3, [r4, #0]
 8011de6:	f023 0320 	bic.w	r3, r3, #32
 8011dea:	6023      	str	r3, [r4, #0]
 8011dec:	2310      	movs	r3, #16
 8011dee:	e7a7      	b.n	8011d40 <_printf_i+0xf8>
 8011df0:	4824      	ldr	r0, [pc, #144]	; (8011e84 <_printf_i+0x23c>)
 8011df2:	e7e4      	b.n	8011dbe <_printf_i+0x176>
 8011df4:	4615      	mov	r5, r2
 8011df6:	e7bd      	b.n	8011d74 <_printf_i+0x12c>
 8011df8:	682b      	ldr	r3, [r5, #0]
 8011dfa:	6826      	ldr	r6, [r4, #0]
 8011dfc:	6961      	ldr	r1, [r4, #20]
 8011dfe:	1d18      	adds	r0, r3, #4
 8011e00:	6028      	str	r0, [r5, #0]
 8011e02:	0635      	lsls	r5, r6, #24
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	d501      	bpl.n	8011e0c <_printf_i+0x1c4>
 8011e08:	6019      	str	r1, [r3, #0]
 8011e0a:	e002      	b.n	8011e12 <_printf_i+0x1ca>
 8011e0c:	0670      	lsls	r0, r6, #25
 8011e0e:	d5fb      	bpl.n	8011e08 <_printf_i+0x1c0>
 8011e10:	8019      	strh	r1, [r3, #0]
 8011e12:	2300      	movs	r3, #0
 8011e14:	6123      	str	r3, [r4, #16]
 8011e16:	4615      	mov	r5, r2
 8011e18:	e7bc      	b.n	8011d94 <_printf_i+0x14c>
 8011e1a:	682b      	ldr	r3, [r5, #0]
 8011e1c:	1d1a      	adds	r2, r3, #4
 8011e1e:	602a      	str	r2, [r5, #0]
 8011e20:	681d      	ldr	r5, [r3, #0]
 8011e22:	6862      	ldr	r2, [r4, #4]
 8011e24:	2100      	movs	r1, #0
 8011e26:	4628      	mov	r0, r5
 8011e28:	f7ee f9d2 	bl	80001d0 <memchr>
 8011e2c:	b108      	cbz	r0, 8011e32 <_printf_i+0x1ea>
 8011e2e:	1b40      	subs	r0, r0, r5
 8011e30:	6060      	str	r0, [r4, #4]
 8011e32:	6863      	ldr	r3, [r4, #4]
 8011e34:	6123      	str	r3, [r4, #16]
 8011e36:	2300      	movs	r3, #0
 8011e38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e3c:	e7aa      	b.n	8011d94 <_printf_i+0x14c>
 8011e3e:	6923      	ldr	r3, [r4, #16]
 8011e40:	462a      	mov	r2, r5
 8011e42:	4649      	mov	r1, r9
 8011e44:	4640      	mov	r0, r8
 8011e46:	47d0      	blx	sl
 8011e48:	3001      	adds	r0, #1
 8011e4a:	d0ad      	beq.n	8011da8 <_printf_i+0x160>
 8011e4c:	6823      	ldr	r3, [r4, #0]
 8011e4e:	079b      	lsls	r3, r3, #30
 8011e50:	d413      	bmi.n	8011e7a <_printf_i+0x232>
 8011e52:	68e0      	ldr	r0, [r4, #12]
 8011e54:	9b03      	ldr	r3, [sp, #12]
 8011e56:	4298      	cmp	r0, r3
 8011e58:	bfb8      	it	lt
 8011e5a:	4618      	movlt	r0, r3
 8011e5c:	e7a6      	b.n	8011dac <_printf_i+0x164>
 8011e5e:	2301      	movs	r3, #1
 8011e60:	4632      	mov	r2, r6
 8011e62:	4649      	mov	r1, r9
 8011e64:	4640      	mov	r0, r8
 8011e66:	47d0      	blx	sl
 8011e68:	3001      	adds	r0, #1
 8011e6a:	d09d      	beq.n	8011da8 <_printf_i+0x160>
 8011e6c:	3501      	adds	r5, #1
 8011e6e:	68e3      	ldr	r3, [r4, #12]
 8011e70:	9903      	ldr	r1, [sp, #12]
 8011e72:	1a5b      	subs	r3, r3, r1
 8011e74:	42ab      	cmp	r3, r5
 8011e76:	dcf2      	bgt.n	8011e5e <_printf_i+0x216>
 8011e78:	e7eb      	b.n	8011e52 <_printf_i+0x20a>
 8011e7a:	2500      	movs	r5, #0
 8011e7c:	f104 0619 	add.w	r6, r4, #25
 8011e80:	e7f5      	b.n	8011e6e <_printf_i+0x226>
 8011e82:	bf00      	nop
 8011e84:	08015856 	.word	0x08015856
 8011e88:	08015867 	.word	0x08015867

08011e8c <siprintf>:
 8011e8c:	b40e      	push	{r1, r2, r3}
 8011e8e:	b500      	push	{lr}
 8011e90:	b09c      	sub	sp, #112	; 0x70
 8011e92:	ab1d      	add	r3, sp, #116	; 0x74
 8011e94:	9002      	str	r0, [sp, #8]
 8011e96:	9006      	str	r0, [sp, #24]
 8011e98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011e9c:	4809      	ldr	r0, [pc, #36]	; (8011ec4 <siprintf+0x38>)
 8011e9e:	9107      	str	r1, [sp, #28]
 8011ea0:	9104      	str	r1, [sp, #16]
 8011ea2:	4909      	ldr	r1, [pc, #36]	; (8011ec8 <siprintf+0x3c>)
 8011ea4:	f853 2b04 	ldr.w	r2, [r3], #4
 8011ea8:	9105      	str	r1, [sp, #20]
 8011eaa:	6800      	ldr	r0, [r0, #0]
 8011eac:	9301      	str	r3, [sp, #4]
 8011eae:	a902      	add	r1, sp, #8
 8011eb0:	f000 ffd6 	bl	8012e60 <_svfiprintf_r>
 8011eb4:	9b02      	ldr	r3, [sp, #8]
 8011eb6:	2200      	movs	r2, #0
 8011eb8:	701a      	strb	r2, [r3, #0]
 8011eba:	b01c      	add	sp, #112	; 0x70
 8011ebc:	f85d eb04 	ldr.w	lr, [sp], #4
 8011ec0:	b003      	add	sp, #12
 8011ec2:	4770      	bx	lr
 8011ec4:	20000178 	.word	0x20000178
 8011ec8:	ffff0208 	.word	0xffff0208

08011ecc <std>:
 8011ecc:	2300      	movs	r3, #0
 8011ece:	b510      	push	{r4, lr}
 8011ed0:	4604      	mov	r4, r0
 8011ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8011ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011eda:	6083      	str	r3, [r0, #8]
 8011edc:	8181      	strh	r1, [r0, #12]
 8011ede:	6643      	str	r3, [r0, #100]	; 0x64
 8011ee0:	81c2      	strh	r2, [r0, #14]
 8011ee2:	6183      	str	r3, [r0, #24]
 8011ee4:	4619      	mov	r1, r3
 8011ee6:	2208      	movs	r2, #8
 8011ee8:	305c      	adds	r0, #92	; 0x5c
 8011eea:	f000 f89f 	bl	801202c <memset>
 8011eee:	4b05      	ldr	r3, [pc, #20]	; (8011f04 <std+0x38>)
 8011ef0:	6263      	str	r3, [r4, #36]	; 0x24
 8011ef2:	4b05      	ldr	r3, [pc, #20]	; (8011f08 <std+0x3c>)
 8011ef4:	62a3      	str	r3, [r4, #40]	; 0x28
 8011ef6:	4b05      	ldr	r3, [pc, #20]	; (8011f0c <std+0x40>)
 8011ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011efa:	4b05      	ldr	r3, [pc, #20]	; (8011f10 <std+0x44>)
 8011efc:	6224      	str	r4, [r4, #32]
 8011efe:	6323      	str	r3, [r4, #48]	; 0x30
 8011f00:	bd10      	pop	{r4, pc}
 8011f02:	bf00      	nop
 8011f04:	08013a19 	.word	0x08013a19
 8011f08:	08013a3b 	.word	0x08013a3b
 8011f0c:	08013a73 	.word	0x08013a73
 8011f10:	08013a97 	.word	0x08013a97

08011f14 <stdio_exit_handler>:
 8011f14:	4a02      	ldr	r2, [pc, #8]	; (8011f20 <stdio_exit_handler+0xc>)
 8011f16:	4903      	ldr	r1, [pc, #12]	; (8011f24 <stdio_exit_handler+0x10>)
 8011f18:	4803      	ldr	r0, [pc, #12]	; (8011f28 <stdio_exit_handler+0x14>)
 8011f1a:	f000 b869 	b.w	8011ff0 <_fwalk_sglue>
 8011f1e:	bf00      	nop
 8011f20:	20000120 	.word	0x20000120
 8011f24:	080132b9 	.word	0x080132b9
 8011f28:	2000012c 	.word	0x2000012c

08011f2c <cleanup_stdio>:
 8011f2c:	6841      	ldr	r1, [r0, #4]
 8011f2e:	4b0c      	ldr	r3, [pc, #48]	; (8011f60 <cleanup_stdio+0x34>)
 8011f30:	4299      	cmp	r1, r3
 8011f32:	b510      	push	{r4, lr}
 8011f34:	4604      	mov	r4, r0
 8011f36:	d001      	beq.n	8011f3c <cleanup_stdio+0x10>
 8011f38:	f001 f9be 	bl	80132b8 <_fflush_r>
 8011f3c:	68a1      	ldr	r1, [r4, #8]
 8011f3e:	4b09      	ldr	r3, [pc, #36]	; (8011f64 <cleanup_stdio+0x38>)
 8011f40:	4299      	cmp	r1, r3
 8011f42:	d002      	beq.n	8011f4a <cleanup_stdio+0x1e>
 8011f44:	4620      	mov	r0, r4
 8011f46:	f001 f9b7 	bl	80132b8 <_fflush_r>
 8011f4a:	68e1      	ldr	r1, [r4, #12]
 8011f4c:	4b06      	ldr	r3, [pc, #24]	; (8011f68 <cleanup_stdio+0x3c>)
 8011f4e:	4299      	cmp	r1, r3
 8011f50:	d004      	beq.n	8011f5c <cleanup_stdio+0x30>
 8011f52:	4620      	mov	r0, r4
 8011f54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f58:	f001 b9ae 	b.w	80132b8 <_fflush_r>
 8011f5c:	bd10      	pop	{r4, pc}
 8011f5e:	bf00      	nop
 8011f60:	20002704 	.word	0x20002704
 8011f64:	2000276c 	.word	0x2000276c
 8011f68:	200027d4 	.word	0x200027d4

08011f6c <global_stdio_init.part.0>:
 8011f6c:	b510      	push	{r4, lr}
 8011f6e:	4b0b      	ldr	r3, [pc, #44]	; (8011f9c <global_stdio_init.part.0+0x30>)
 8011f70:	4c0b      	ldr	r4, [pc, #44]	; (8011fa0 <global_stdio_init.part.0+0x34>)
 8011f72:	4a0c      	ldr	r2, [pc, #48]	; (8011fa4 <global_stdio_init.part.0+0x38>)
 8011f74:	601a      	str	r2, [r3, #0]
 8011f76:	4620      	mov	r0, r4
 8011f78:	2200      	movs	r2, #0
 8011f7a:	2104      	movs	r1, #4
 8011f7c:	f7ff ffa6 	bl	8011ecc <std>
 8011f80:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011f84:	2201      	movs	r2, #1
 8011f86:	2109      	movs	r1, #9
 8011f88:	f7ff ffa0 	bl	8011ecc <std>
 8011f8c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011f90:	2202      	movs	r2, #2
 8011f92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011f96:	2112      	movs	r1, #18
 8011f98:	f7ff bf98 	b.w	8011ecc <std>
 8011f9c:	2000283c 	.word	0x2000283c
 8011fa0:	20002704 	.word	0x20002704
 8011fa4:	08011f15 	.word	0x08011f15

08011fa8 <__sfp_lock_acquire>:
 8011fa8:	4801      	ldr	r0, [pc, #4]	; (8011fb0 <__sfp_lock_acquire+0x8>)
 8011faa:	f000 b875 	b.w	8012098 <__retarget_lock_acquire_recursive>
 8011fae:	bf00      	nop
 8011fb0:	20002841 	.word	0x20002841

08011fb4 <__sfp_lock_release>:
 8011fb4:	4801      	ldr	r0, [pc, #4]	; (8011fbc <__sfp_lock_release+0x8>)
 8011fb6:	f000 b870 	b.w	801209a <__retarget_lock_release_recursive>
 8011fba:	bf00      	nop
 8011fbc:	20002841 	.word	0x20002841

08011fc0 <__sinit>:
 8011fc0:	b510      	push	{r4, lr}
 8011fc2:	4604      	mov	r4, r0
 8011fc4:	f7ff fff0 	bl	8011fa8 <__sfp_lock_acquire>
 8011fc8:	6a23      	ldr	r3, [r4, #32]
 8011fca:	b11b      	cbz	r3, 8011fd4 <__sinit+0x14>
 8011fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fd0:	f7ff bff0 	b.w	8011fb4 <__sfp_lock_release>
 8011fd4:	4b04      	ldr	r3, [pc, #16]	; (8011fe8 <__sinit+0x28>)
 8011fd6:	6223      	str	r3, [r4, #32]
 8011fd8:	4b04      	ldr	r3, [pc, #16]	; (8011fec <__sinit+0x2c>)
 8011fda:	681b      	ldr	r3, [r3, #0]
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d1f5      	bne.n	8011fcc <__sinit+0xc>
 8011fe0:	f7ff ffc4 	bl	8011f6c <global_stdio_init.part.0>
 8011fe4:	e7f2      	b.n	8011fcc <__sinit+0xc>
 8011fe6:	bf00      	nop
 8011fe8:	08011f2d 	.word	0x08011f2d
 8011fec:	2000283c 	.word	0x2000283c

08011ff0 <_fwalk_sglue>:
 8011ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011ff4:	4607      	mov	r7, r0
 8011ff6:	4688      	mov	r8, r1
 8011ff8:	4614      	mov	r4, r2
 8011ffa:	2600      	movs	r6, #0
 8011ffc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8012000:	f1b9 0901 	subs.w	r9, r9, #1
 8012004:	d505      	bpl.n	8012012 <_fwalk_sglue+0x22>
 8012006:	6824      	ldr	r4, [r4, #0]
 8012008:	2c00      	cmp	r4, #0
 801200a:	d1f7      	bne.n	8011ffc <_fwalk_sglue+0xc>
 801200c:	4630      	mov	r0, r6
 801200e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012012:	89ab      	ldrh	r3, [r5, #12]
 8012014:	2b01      	cmp	r3, #1
 8012016:	d907      	bls.n	8012028 <_fwalk_sglue+0x38>
 8012018:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801201c:	3301      	adds	r3, #1
 801201e:	d003      	beq.n	8012028 <_fwalk_sglue+0x38>
 8012020:	4629      	mov	r1, r5
 8012022:	4638      	mov	r0, r7
 8012024:	47c0      	blx	r8
 8012026:	4306      	orrs	r6, r0
 8012028:	3568      	adds	r5, #104	; 0x68
 801202a:	e7e9      	b.n	8012000 <_fwalk_sglue+0x10>

0801202c <memset>:
 801202c:	4402      	add	r2, r0
 801202e:	4603      	mov	r3, r0
 8012030:	4293      	cmp	r3, r2
 8012032:	d100      	bne.n	8012036 <memset+0xa>
 8012034:	4770      	bx	lr
 8012036:	f803 1b01 	strb.w	r1, [r3], #1
 801203a:	e7f9      	b.n	8012030 <memset+0x4>

0801203c <_localeconv_r>:
 801203c:	4800      	ldr	r0, [pc, #0]	; (8012040 <_localeconv_r+0x4>)
 801203e:	4770      	bx	lr
 8012040:	2000026c 	.word	0x2000026c

08012044 <__errno>:
 8012044:	4b01      	ldr	r3, [pc, #4]	; (801204c <__errno+0x8>)
 8012046:	6818      	ldr	r0, [r3, #0]
 8012048:	4770      	bx	lr
 801204a:	bf00      	nop
 801204c:	20000178 	.word	0x20000178

08012050 <__libc_init_array>:
 8012050:	b570      	push	{r4, r5, r6, lr}
 8012052:	4d0d      	ldr	r5, [pc, #52]	; (8012088 <__libc_init_array+0x38>)
 8012054:	4c0d      	ldr	r4, [pc, #52]	; (801208c <__libc_init_array+0x3c>)
 8012056:	1b64      	subs	r4, r4, r5
 8012058:	10a4      	asrs	r4, r4, #2
 801205a:	2600      	movs	r6, #0
 801205c:	42a6      	cmp	r6, r4
 801205e:	d109      	bne.n	8012074 <__libc_init_array+0x24>
 8012060:	4d0b      	ldr	r5, [pc, #44]	; (8012090 <__libc_init_array+0x40>)
 8012062:	4c0c      	ldr	r4, [pc, #48]	; (8012094 <__libc_init_array+0x44>)
 8012064:	f003 fb36 	bl	80156d4 <_init>
 8012068:	1b64      	subs	r4, r4, r5
 801206a:	10a4      	asrs	r4, r4, #2
 801206c:	2600      	movs	r6, #0
 801206e:	42a6      	cmp	r6, r4
 8012070:	d105      	bne.n	801207e <__libc_init_array+0x2e>
 8012072:	bd70      	pop	{r4, r5, r6, pc}
 8012074:	f855 3b04 	ldr.w	r3, [r5], #4
 8012078:	4798      	blx	r3
 801207a:	3601      	adds	r6, #1
 801207c:	e7ee      	b.n	801205c <__libc_init_array+0xc>
 801207e:	f855 3b04 	ldr.w	r3, [r5], #4
 8012082:	4798      	blx	r3
 8012084:	3601      	adds	r6, #1
 8012086:	e7f2      	b.n	801206e <__libc_init_array+0x1e>
 8012088:	08015c60 	.word	0x08015c60
 801208c:	08015c60 	.word	0x08015c60
 8012090:	08015c60 	.word	0x08015c60
 8012094:	08015c64 	.word	0x08015c64

08012098 <__retarget_lock_acquire_recursive>:
 8012098:	4770      	bx	lr

0801209a <__retarget_lock_release_recursive>:
 801209a:	4770      	bx	lr

0801209c <memcpy>:
 801209c:	440a      	add	r2, r1
 801209e:	4291      	cmp	r1, r2
 80120a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80120a4:	d100      	bne.n	80120a8 <memcpy+0xc>
 80120a6:	4770      	bx	lr
 80120a8:	b510      	push	{r4, lr}
 80120aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80120ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80120b2:	4291      	cmp	r1, r2
 80120b4:	d1f9      	bne.n	80120aa <memcpy+0xe>
 80120b6:	bd10      	pop	{r4, pc}

080120b8 <quorem>:
 80120b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120bc:	6903      	ldr	r3, [r0, #16]
 80120be:	690c      	ldr	r4, [r1, #16]
 80120c0:	42a3      	cmp	r3, r4
 80120c2:	4607      	mov	r7, r0
 80120c4:	db7e      	blt.n	80121c4 <quorem+0x10c>
 80120c6:	3c01      	subs	r4, #1
 80120c8:	f101 0814 	add.w	r8, r1, #20
 80120cc:	f100 0514 	add.w	r5, r0, #20
 80120d0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80120d4:	9301      	str	r3, [sp, #4]
 80120d6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80120da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80120de:	3301      	adds	r3, #1
 80120e0:	429a      	cmp	r2, r3
 80120e2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80120e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80120ea:	fbb2 f6f3 	udiv	r6, r2, r3
 80120ee:	d331      	bcc.n	8012154 <quorem+0x9c>
 80120f0:	f04f 0e00 	mov.w	lr, #0
 80120f4:	4640      	mov	r0, r8
 80120f6:	46ac      	mov	ip, r5
 80120f8:	46f2      	mov	sl, lr
 80120fa:	f850 2b04 	ldr.w	r2, [r0], #4
 80120fe:	b293      	uxth	r3, r2
 8012100:	fb06 e303 	mla	r3, r6, r3, lr
 8012104:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012108:	0c1a      	lsrs	r2, r3, #16
 801210a:	b29b      	uxth	r3, r3
 801210c:	ebaa 0303 	sub.w	r3, sl, r3
 8012110:	f8dc a000 	ldr.w	sl, [ip]
 8012114:	fa13 f38a 	uxtah	r3, r3, sl
 8012118:	fb06 220e 	mla	r2, r6, lr, r2
 801211c:	9300      	str	r3, [sp, #0]
 801211e:	9b00      	ldr	r3, [sp, #0]
 8012120:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012124:	b292      	uxth	r2, r2
 8012126:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801212a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801212e:	f8bd 3000 	ldrh.w	r3, [sp]
 8012132:	4581      	cmp	r9, r0
 8012134:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012138:	f84c 3b04 	str.w	r3, [ip], #4
 801213c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012140:	d2db      	bcs.n	80120fa <quorem+0x42>
 8012142:	f855 300b 	ldr.w	r3, [r5, fp]
 8012146:	b92b      	cbnz	r3, 8012154 <quorem+0x9c>
 8012148:	9b01      	ldr	r3, [sp, #4]
 801214a:	3b04      	subs	r3, #4
 801214c:	429d      	cmp	r5, r3
 801214e:	461a      	mov	r2, r3
 8012150:	d32c      	bcc.n	80121ac <quorem+0xf4>
 8012152:	613c      	str	r4, [r7, #16]
 8012154:	4638      	mov	r0, r7
 8012156:	f001 fb5f 	bl	8013818 <__mcmp>
 801215a:	2800      	cmp	r0, #0
 801215c:	db22      	blt.n	80121a4 <quorem+0xec>
 801215e:	3601      	adds	r6, #1
 8012160:	4629      	mov	r1, r5
 8012162:	2000      	movs	r0, #0
 8012164:	f858 2b04 	ldr.w	r2, [r8], #4
 8012168:	f8d1 c000 	ldr.w	ip, [r1]
 801216c:	b293      	uxth	r3, r2
 801216e:	1ac3      	subs	r3, r0, r3
 8012170:	0c12      	lsrs	r2, r2, #16
 8012172:	fa13 f38c 	uxtah	r3, r3, ip
 8012176:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801217a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801217e:	b29b      	uxth	r3, r3
 8012180:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012184:	45c1      	cmp	r9, r8
 8012186:	f841 3b04 	str.w	r3, [r1], #4
 801218a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801218e:	d2e9      	bcs.n	8012164 <quorem+0xac>
 8012190:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012194:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012198:	b922      	cbnz	r2, 80121a4 <quorem+0xec>
 801219a:	3b04      	subs	r3, #4
 801219c:	429d      	cmp	r5, r3
 801219e:	461a      	mov	r2, r3
 80121a0:	d30a      	bcc.n	80121b8 <quorem+0x100>
 80121a2:	613c      	str	r4, [r7, #16]
 80121a4:	4630      	mov	r0, r6
 80121a6:	b003      	add	sp, #12
 80121a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121ac:	6812      	ldr	r2, [r2, #0]
 80121ae:	3b04      	subs	r3, #4
 80121b0:	2a00      	cmp	r2, #0
 80121b2:	d1ce      	bne.n	8012152 <quorem+0x9a>
 80121b4:	3c01      	subs	r4, #1
 80121b6:	e7c9      	b.n	801214c <quorem+0x94>
 80121b8:	6812      	ldr	r2, [r2, #0]
 80121ba:	3b04      	subs	r3, #4
 80121bc:	2a00      	cmp	r2, #0
 80121be:	d1f0      	bne.n	80121a2 <quorem+0xea>
 80121c0:	3c01      	subs	r4, #1
 80121c2:	e7eb      	b.n	801219c <quorem+0xe4>
 80121c4:	2000      	movs	r0, #0
 80121c6:	e7ee      	b.n	80121a6 <quorem+0xee>

080121c8 <_dtoa_r>:
 80121c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80121cc:	ed2d 8b04 	vpush	{d8-d9}
 80121d0:	69c5      	ldr	r5, [r0, #28]
 80121d2:	b093      	sub	sp, #76	; 0x4c
 80121d4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80121d8:	ec57 6b10 	vmov	r6, r7, d0
 80121dc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80121e0:	9107      	str	r1, [sp, #28]
 80121e2:	4604      	mov	r4, r0
 80121e4:	920a      	str	r2, [sp, #40]	; 0x28
 80121e6:	930d      	str	r3, [sp, #52]	; 0x34
 80121e8:	b975      	cbnz	r5, 8012208 <_dtoa_r+0x40>
 80121ea:	2010      	movs	r0, #16
 80121ec:	f000 ff36 	bl	801305c <malloc>
 80121f0:	4602      	mov	r2, r0
 80121f2:	61e0      	str	r0, [r4, #28]
 80121f4:	b920      	cbnz	r0, 8012200 <_dtoa_r+0x38>
 80121f6:	4bae      	ldr	r3, [pc, #696]	; (80124b0 <_dtoa_r+0x2e8>)
 80121f8:	21ef      	movs	r1, #239	; 0xef
 80121fa:	48ae      	ldr	r0, [pc, #696]	; (80124b4 <_dtoa_r+0x2ec>)
 80121fc:	f001 fcee 	bl	8013bdc <__assert_func>
 8012200:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012204:	6005      	str	r5, [r0, #0]
 8012206:	60c5      	str	r5, [r0, #12]
 8012208:	69e3      	ldr	r3, [r4, #28]
 801220a:	6819      	ldr	r1, [r3, #0]
 801220c:	b151      	cbz	r1, 8012224 <_dtoa_r+0x5c>
 801220e:	685a      	ldr	r2, [r3, #4]
 8012210:	604a      	str	r2, [r1, #4]
 8012212:	2301      	movs	r3, #1
 8012214:	4093      	lsls	r3, r2
 8012216:	608b      	str	r3, [r1, #8]
 8012218:	4620      	mov	r0, r4
 801221a:	f001 f8c1 	bl	80133a0 <_Bfree>
 801221e:	69e3      	ldr	r3, [r4, #28]
 8012220:	2200      	movs	r2, #0
 8012222:	601a      	str	r2, [r3, #0]
 8012224:	1e3b      	subs	r3, r7, #0
 8012226:	bfbb      	ittet	lt
 8012228:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801222c:	9303      	strlt	r3, [sp, #12]
 801222e:	2300      	movge	r3, #0
 8012230:	2201      	movlt	r2, #1
 8012232:	bfac      	ite	ge
 8012234:	f8c8 3000 	strge.w	r3, [r8]
 8012238:	f8c8 2000 	strlt.w	r2, [r8]
 801223c:	4b9e      	ldr	r3, [pc, #632]	; (80124b8 <_dtoa_r+0x2f0>)
 801223e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8012242:	ea33 0308 	bics.w	r3, r3, r8
 8012246:	d11b      	bne.n	8012280 <_dtoa_r+0xb8>
 8012248:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801224a:	f242 730f 	movw	r3, #9999	; 0x270f
 801224e:	6013      	str	r3, [r2, #0]
 8012250:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8012254:	4333      	orrs	r3, r6
 8012256:	f000 8593 	beq.w	8012d80 <_dtoa_r+0xbb8>
 801225a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801225c:	b963      	cbnz	r3, 8012278 <_dtoa_r+0xb0>
 801225e:	4b97      	ldr	r3, [pc, #604]	; (80124bc <_dtoa_r+0x2f4>)
 8012260:	e027      	b.n	80122b2 <_dtoa_r+0xea>
 8012262:	4b97      	ldr	r3, [pc, #604]	; (80124c0 <_dtoa_r+0x2f8>)
 8012264:	9300      	str	r3, [sp, #0]
 8012266:	3308      	adds	r3, #8
 8012268:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801226a:	6013      	str	r3, [r2, #0]
 801226c:	9800      	ldr	r0, [sp, #0]
 801226e:	b013      	add	sp, #76	; 0x4c
 8012270:	ecbd 8b04 	vpop	{d8-d9}
 8012274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012278:	4b90      	ldr	r3, [pc, #576]	; (80124bc <_dtoa_r+0x2f4>)
 801227a:	9300      	str	r3, [sp, #0]
 801227c:	3303      	adds	r3, #3
 801227e:	e7f3      	b.n	8012268 <_dtoa_r+0xa0>
 8012280:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012284:	2200      	movs	r2, #0
 8012286:	ec51 0b17 	vmov	r0, r1, d7
 801228a:	eeb0 8a47 	vmov.f32	s16, s14
 801228e:	eef0 8a67 	vmov.f32	s17, s15
 8012292:	2300      	movs	r3, #0
 8012294:	f7ee fc18 	bl	8000ac8 <__aeabi_dcmpeq>
 8012298:	4681      	mov	r9, r0
 801229a:	b160      	cbz	r0, 80122b6 <_dtoa_r+0xee>
 801229c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801229e:	2301      	movs	r3, #1
 80122a0:	6013      	str	r3, [r2, #0]
 80122a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	f000 8568 	beq.w	8012d7a <_dtoa_r+0xbb2>
 80122aa:	4b86      	ldr	r3, [pc, #536]	; (80124c4 <_dtoa_r+0x2fc>)
 80122ac:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80122ae:	6013      	str	r3, [r2, #0]
 80122b0:	3b01      	subs	r3, #1
 80122b2:	9300      	str	r3, [sp, #0]
 80122b4:	e7da      	b.n	801226c <_dtoa_r+0xa4>
 80122b6:	aa10      	add	r2, sp, #64	; 0x40
 80122b8:	a911      	add	r1, sp, #68	; 0x44
 80122ba:	4620      	mov	r0, r4
 80122bc:	eeb0 0a48 	vmov.f32	s0, s16
 80122c0:	eef0 0a68 	vmov.f32	s1, s17
 80122c4:	f001 fb4e 	bl	8013964 <__d2b>
 80122c8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80122cc:	4682      	mov	sl, r0
 80122ce:	2d00      	cmp	r5, #0
 80122d0:	d07f      	beq.n	80123d2 <_dtoa_r+0x20a>
 80122d2:	ee18 3a90 	vmov	r3, s17
 80122d6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80122da:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80122de:	ec51 0b18 	vmov	r0, r1, d8
 80122e2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80122e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80122ea:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80122ee:	4619      	mov	r1, r3
 80122f0:	2200      	movs	r2, #0
 80122f2:	4b75      	ldr	r3, [pc, #468]	; (80124c8 <_dtoa_r+0x300>)
 80122f4:	f7ed ffc8 	bl	8000288 <__aeabi_dsub>
 80122f8:	a367      	add	r3, pc, #412	; (adr r3, 8012498 <_dtoa_r+0x2d0>)
 80122fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122fe:	f7ee f97b 	bl	80005f8 <__aeabi_dmul>
 8012302:	a367      	add	r3, pc, #412	; (adr r3, 80124a0 <_dtoa_r+0x2d8>)
 8012304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012308:	f7ed ffc0 	bl	800028c <__adddf3>
 801230c:	4606      	mov	r6, r0
 801230e:	4628      	mov	r0, r5
 8012310:	460f      	mov	r7, r1
 8012312:	f7ee f907 	bl	8000524 <__aeabi_i2d>
 8012316:	a364      	add	r3, pc, #400	; (adr r3, 80124a8 <_dtoa_r+0x2e0>)
 8012318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801231c:	f7ee f96c 	bl	80005f8 <__aeabi_dmul>
 8012320:	4602      	mov	r2, r0
 8012322:	460b      	mov	r3, r1
 8012324:	4630      	mov	r0, r6
 8012326:	4639      	mov	r1, r7
 8012328:	f7ed ffb0 	bl	800028c <__adddf3>
 801232c:	4606      	mov	r6, r0
 801232e:	460f      	mov	r7, r1
 8012330:	f7ee fc12 	bl	8000b58 <__aeabi_d2iz>
 8012334:	2200      	movs	r2, #0
 8012336:	4683      	mov	fp, r0
 8012338:	2300      	movs	r3, #0
 801233a:	4630      	mov	r0, r6
 801233c:	4639      	mov	r1, r7
 801233e:	f7ee fbcd 	bl	8000adc <__aeabi_dcmplt>
 8012342:	b148      	cbz	r0, 8012358 <_dtoa_r+0x190>
 8012344:	4658      	mov	r0, fp
 8012346:	f7ee f8ed 	bl	8000524 <__aeabi_i2d>
 801234a:	4632      	mov	r2, r6
 801234c:	463b      	mov	r3, r7
 801234e:	f7ee fbbb 	bl	8000ac8 <__aeabi_dcmpeq>
 8012352:	b908      	cbnz	r0, 8012358 <_dtoa_r+0x190>
 8012354:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012358:	f1bb 0f16 	cmp.w	fp, #22
 801235c:	d857      	bhi.n	801240e <_dtoa_r+0x246>
 801235e:	4b5b      	ldr	r3, [pc, #364]	; (80124cc <_dtoa_r+0x304>)
 8012360:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8012364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012368:	ec51 0b18 	vmov	r0, r1, d8
 801236c:	f7ee fbb6 	bl	8000adc <__aeabi_dcmplt>
 8012370:	2800      	cmp	r0, #0
 8012372:	d04e      	beq.n	8012412 <_dtoa_r+0x24a>
 8012374:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012378:	2300      	movs	r3, #0
 801237a:	930c      	str	r3, [sp, #48]	; 0x30
 801237c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801237e:	1b5b      	subs	r3, r3, r5
 8012380:	1e5a      	subs	r2, r3, #1
 8012382:	bf45      	ittet	mi
 8012384:	f1c3 0301 	rsbmi	r3, r3, #1
 8012388:	9305      	strmi	r3, [sp, #20]
 801238a:	2300      	movpl	r3, #0
 801238c:	2300      	movmi	r3, #0
 801238e:	9206      	str	r2, [sp, #24]
 8012390:	bf54      	ite	pl
 8012392:	9305      	strpl	r3, [sp, #20]
 8012394:	9306      	strmi	r3, [sp, #24]
 8012396:	f1bb 0f00 	cmp.w	fp, #0
 801239a:	db3c      	blt.n	8012416 <_dtoa_r+0x24e>
 801239c:	9b06      	ldr	r3, [sp, #24]
 801239e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80123a2:	445b      	add	r3, fp
 80123a4:	9306      	str	r3, [sp, #24]
 80123a6:	2300      	movs	r3, #0
 80123a8:	9308      	str	r3, [sp, #32]
 80123aa:	9b07      	ldr	r3, [sp, #28]
 80123ac:	2b09      	cmp	r3, #9
 80123ae:	d868      	bhi.n	8012482 <_dtoa_r+0x2ba>
 80123b0:	2b05      	cmp	r3, #5
 80123b2:	bfc4      	itt	gt
 80123b4:	3b04      	subgt	r3, #4
 80123b6:	9307      	strgt	r3, [sp, #28]
 80123b8:	9b07      	ldr	r3, [sp, #28]
 80123ba:	f1a3 0302 	sub.w	r3, r3, #2
 80123be:	bfcc      	ite	gt
 80123c0:	2500      	movgt	r5, #0
 80123c2:	2501      	movle	r5, #1
 80123c4:	2b03      	cmp	r3, #3
 80123c6:	f200 8085 	bhi.w	80124d4 <_dtoa_r+0x30c>
 80123ca:	e8df f003 	tbb	[pc, r3]
 80123ce:	3b2e      	.short	0x3b2e
 80123d0:	5839      	.short	0x5839
 80123d2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80123d6:	441d      	add	r5, r3
 80123d8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80123dc:	2b20      	cmp	r3, #32
 80123de:	bfc1      	itttt	gt
 80123e0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80123e4:	fa08 f803 	lslgt.w	r8, r8, r3
 80123e8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80123ec:	fa26 f303 	lsrgt.w	r3, r6, r3
 80123f0:	bfd6      	itet	le
 80123f2:	f1c3 0320 	rsble	r3, r3, #32
 80123f6:	ea48 0003 	orrgt.w	r0, r8, r3
 80123fa:	fa06 f003 	lslle.w	r0, r6, r3
 80123fe:	f7ee f881 	bl	8000504 <__aeabi_ui2d>
 8012402:	2201      	movs	r2, #1
 8012404:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8012408:	3d01      	subs	r5, #1
 801240a:	920e      	str	r2, [sp, #56]	; 0x38
 801240c:	e76f      	b.n	80122ee <_dtoa_r+0x126>
 801240e:	2301      	movs	r3, #1
 8012410:	e7b3      	b.n	801237a <_dtoa_r+0x1b2>
 8012412:	900c      	str	r0, [sp, #48]	; 0x30
 8012414:	e7b2      	b.n	801237c <_dtoa_r+0x1b4>
 8012416:	9b05      	ldr	r3, [sp, #20]
 8012418:	eba3 030b 	sub.w	r3, r3, fp
 801241c:	9305      	str	r3, [sp, #20]
 801241e:	f1cb 0300 	rsb	r3, fp, #0
 8012422:	9308      	str	r3, [sp, #32]
 8012424:	2300      	movs	r3, #0
 8012426:	930b      	str	r3, [sp, #44]	; 0x2c
 8012428:	e7bf      	b.n	80123aa <_dtoa_r+0x1e2>
 801242a:	2300      	movs	r3, #0
 801242c:	9309      	str	r3, [sp, #36]	; 0x24
 801242e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012430:	2b00      	cmp	r3, #0
 8012432:	dc52      	bgt.n	80124da <_dtoa_r+0x312>
 8012434:	2301      	movs	r3, #1
 8012436:	9301      	str	r3, [sp, #4]
 8012438:	9304      	str	r3, [sp, #16]
 801243a:	461a      	mov	r2, r3
 801243c:	920a      	str	r2, [sp, #40]	; 0x28
 801243e:	e00b      	b.n	8012458 <_dtoa_r+0x290>
 8012440:	2301      	movs	r3, #1
 8012442:	e7f3      	b.n	801242c <_dtoa_r+0x264>
 8012444:	2300      	movs	r3, #0
 8012446:	9309      	str	r3, [sp, #36]	; 0x24
 8012448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801244a:	445b      	add	r3, fp
 801244c:	9301      	str	r3, [sp, #4]
 801244e:	3301      	adds	r3, #1
 8012450:	2b01      	cmp	r3, #1
 8012452:	9304      	str	r3, [sp, #16]
 8012454:	bfb8      	it	lt
 8012456:	2301      	movlt	r3, #1
 8012458:	69e0      	ldr	r0, [r4, #28]
 801245a:	2100      	movs	r1, #0
 801245c:	2204      	movs	r2, #4
 801245e:	f102 0614 	add.w	r6, r2, #20
 8012462:	429e      	cmp	r6, r3
 8012464:	d93d      	bls.n	80124e2 <_dtoa_r+0x31a>
 8012466:	6041      	str	r1, [r0, #4]
 8012468:	4620      	mov	r0, r4
 801246a:	f000 ff59 	bl	8013320 <_Balloc>
 801246e:	9000      	str	r0, [sp, #0]
 8012470:	2800      	cmp	r0, #0
 8012472:	d139      	bne.n	80124e8 <_dtoa_r+0x320>
 8012474:	4b16      	ldr	r3, [pc, #88]	; (80124d0 <_dtoa_r+0x308>)
 8012476:	4602      	mov	r2, r0
 8012478:	f240 11af 	movw	r1, #431	; 0x1af
 801247c:	e6bd      	b.n	80121fa <_dtoa_r+0x32>
 801247e:	2301      	movs	r3, #1
 8012480:	e7e1      	b.n	8012446 <_dtoa_r+0x27e>
 8012482:	2501      	movs	r5, #1
 8012484:	2300      	movs	r3, #0
 8012486:	9307      	str	r3, [sp, #28]
 8012488:	9509      	str	r5, [sp, #36]	; 0x24
 801248a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801248e:	9301      	str	r3, [sp, #4]
 8012490:	9304      	str	r3, [sp, #16]
 8012492:	2200      	movs	r2, #0
 8012494:	2312      	movs	r3, #18
 8012496:	e7d1      	b.n	801243c <_dtoa_r+0x274>
 8012498:	636f4361 	.word	0x636f4361
 801249c:	3fd287a7 	.word	0x3fd287a7
 80124a0:	8b60c8b3 	.word	0x8b60c8b3
 80124a4:	3fc68a28 	.word	0x3fc68a28
 80124a8:	509f79fb 	.word	0x509f79fb
 80124ac:	3fd34413 	.word	0x3fd34413
 80124b0:	08015885 	.word	0x08015885
 80124b4:	0801589c 	.word	0x0801589c
 80124b8:	7ff00000 	.word	0x7ff00000
 80124bc:	08015881 	.word	0x08015881
 80124c0:	08015878 	.word	0x08015878
 80124c4:	08015855 	.word	0x08015855
 80124c8:	3ff80000 	.word	0x3ff80000
 80124cc:	08015998 	.word	0x08015998
 80124d0:	080158f4 	.word	0x080158f4
 80124d4:	2301      	movs	r3, #1
 80124d6:	9309      	str	r3, [sp, #36]	; 0x24
 80124d8:	e7d7      	b.n	801248a <_dtoa_r+0x2c2>
 80124da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124dc:	9301      	str	r3, [sp, #4]
 80124de:	9304      	str	r3, [sp, #16]
 80124e0:	e7ba      	b.n	8012458 <_dtoa_r+0x290>
 80124e2:	3101      	adds	r1, #1
 80124e4:	0052      	lsls	r2, r2, #1
 80124e6:	e7ba      	b.n	801245e <_dtoa_r+0x296>
 80124e8:	69e3      	ldr	r3, [r4, #28]
 80124ea:	9a00      	ldr	r2, [sp, #0]
 80124ec:	601a      	str	r2, [r3, #0]
 80124ee:	9b04      	ldr	r3, [sp, #16]
 80124f0:	2b0e      	cmp	r3, #14
 80124f2:	f200 80a8 	bhi.w	8012646 <_dtoa_r+0x47e>
 80124f6:	2d00      	cmp	r5, #0
 80124f8:	f000 80a5 	beq.w	8012646 <_dtoa_r+0x47e>
 80124fc:	f1bb 0f00 	cmp.w	fp, #0
 8012500:	dd38      	ble.n	8012574 <_dtoa_r+0x3ac>
 8012502:	4bc0      	ldr	r3, [pc, #768]	; (8012804 <_dtoa_r+0x63c>)
 8012504:	f00b 020f 	and.w	r2, fp, #15
 8012508:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801250c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012510:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012514:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012518:	d019      	beq.n	801254e <_dtoa_r+0x386>
 801251a:	4bbb      	ldr	r3, [pc, #748]	; (8012808 <_dtoa_r+0x640>)
 801251c:	ec51 0b18 	vmov	r0, r1, d8
 8012520:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012524:	f7ee f992 	bl	800084c <__aeabi_ddiv>
 8012528:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801252c:	f008 080f 	and.w	r8, r8, #15
 8012530:	2503      	movs	r5, #3
 8012532:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012808 <_dtoa_r+0x640>
 8012536:	f1b8 0f00 	cmp.w	r8, #0
 801253a:	d10a      	bne.n	8012552 <_dtoa_r+0x38a>
 801253c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8012540:	4632      	mov	r2, r6
 8012542:	463b      	mov	r3, r7
 8012544:	f7ee f982 	bl	800084c <__aeabi_ddiv>
 8012548:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801254c:	e02b      	b.n	80125a6 <_dtoa_r+0x3de>
 801254e:	2502      	movs	r5, #2
 8012550:	e7ef      	b.n	8012532 <_dtoa_r+0x36a>
 8012552:	f018 0f01 	tst.w	r8, #1
 8012556:	d008      	beq.n	801256a <_dtoa_r+0x3a2>
 8012558:	4630      	mov	r0, r6
 801255a:	4639      	mov	r1, r7
 801255c:	e9d9 2300 	ldrd	r2, r3, [r9]
 8012560:	f7ee f84a 	bl	80005f8 <__aeabi_dmul>
 8012564:	3501      	adds	r5, #1
 8012566:	4606      	mov	r6, r0
 8012568:	460f      	mov	r7, r1
 801256a:	ea4f 0868 	mov.w	r8, r8, asr #1
 801256e:	f109 0908 	add.w	r9, r9, #8
 8012572:	e7e0      	b.n	8012536 <_dtoa_r+0x36e>
 8012574:	f000 809f 	beq.w	80126b6 <_dtoa_r+0x4ee>
 8012578:	f1cb 0600 	rsb	r6, fp, #0
 801257c:	4ba1      	ldr	r3, [pc, #644]	; (8012804 <_dtoa_r+0x63c>)
 801257e:	4fa2      	ldr	r7, [pc, #648]	; (8012808 <_dtoa_r+0x640>)
 8012580:	f006 020f 	and.w	r2, r6, #15
 8012584:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012588:	e9d3 2300 	ldrd	r2, r3, [r3]
 801258c:	ec51 0b18 	vmov	r0, r1, d8
 8012590:	f7ee f832 	bl	80005f8 <__aeabi_dmul>
 8012594:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012598:	1136      	asrs	r6, r6, #4
 801259a:	2300      	movs	r3, #0
 801259c:	2502      	movs	r5, #2
 801259e:	2e00      	cmp	r6, #0
 80125a0:	d17e      	bne.n	80126a0 <_dtoa_r+0x4d8>
 80125a2:	2b00      	cmp	r3, #0
 80125a4:	d1d0      	bne.n	8012548 <_dtoa_r+0x380>
 80125a6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80125a8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	f000 8084 	beq.w	80126ba <_dtoa_r+0x4f2>
 80125b2:	4b96      	ldr	r3, [pc, #600]	; (801280c <_dtoa_r+0x644>)
 80125b4:	2200      	movs	r2, #0
 80125b6:	4640      	mov	r0, r8
 80125b8:	4649      	mov	r1, r9
 80125ba:	f7ee fa8f 	bl	8000adc <__aeabi_dcmplt>
 80125be:	2800      	cmp	r0, #0
 80125c0:	d07b      	beq.n	80126ba <_dtoa_r+0x4f2>
 80125c2:	9b04      	ldr	r3, [sp, #16]
 80125c4:	2b00      	cmp	r3, #0
 80125c6:	d078      	beq.n	80126ba <_dtoa_r+0x4f2>
 80125c8:	9b01      	ldr	r3, [sp, #4]
 80125ca:	2b00      	cmp	r3, #0
 80125cc:	dd39      	ble.n	8012642 <_dtoa_r+0x47a>
 80125ce:	4b90      	ldr	r3, [pc, #576]	; (8012810 <_dtoa_r+0x648>)
 80125d0:	2200      	movs	r2, #0
 80125d2:	4640      	mov	r0, r8
 80125d4:	4649      	mov	r1, r9
 80125d6:	f7ee f80f 	bl	80005f8 <__aeabi_dmul>
 80125da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125de:	9e01      	ldr	r6, [sp, #4]
 80125e0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 80125e4:	3501      	adds	r5, #1
 80125e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80125ea:	4628      	mov	r0, r5
 80125ec:	f7ed ff9a 	bl	8000524 <__aeabi_i2d>
 80125f0:	4642      	mov	r2, r8
 80125f2:	464b      	mov	r3, r9
 80125f4:	f7ee f800 	bl	80005f8 <__aeabi_dmul>
 80125f8:	4b86      	ldr	r3, [pc, #536]	; (8012814 <_dtoa_r+0x64c>)
 80125fa:	2200      	movs	r2, #0
 80125fc:	f7ed fe46 	bl	800028c <__adddf3>
 8012600:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012604:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012608:	9303      	str	r3, [sp, #12]
 801260a:	2e00      	cmp	r6, #0
 801260c:	d158      	bne.n	80126c0 <_dtoa_r+0x4f8>
 801260e:	4b82      	ldr	r3, [pc, #520]	; (8012818 <_dtoa_r+0x650>)
 8012610:	2200      	movs	r2, #0
 8012612:	4640      	mov	r0, r8
 8012614:	4649      	mov	r1, r9
 8012616:	f7ed fe37 	bl	8000288 <__aeabi_dsub>
 801261a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801261e:	4680      	mov	r8, r0
 8012620:	4689      	mov	r9, r1
 8012622:	f7ee fa79 	bl	8000b18 <__aeabi_dcmpgt>
 8012626:	2800      	cmp	r0, #0
 8012628:	f040 8296 	bne.w	8012b58 <_dtoa_r+0x990>
 801262c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012630:	4640      	mov	r0, r8
 8012632:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012636:	4649      	mov	r1, r9
 8012638:	f7ee fa50 	bl	8000adc <__aeabi_dcmplt>
 801263c:	2800      	cmp	r0, #0
 801263e:	f040 8289 	bne.w	8012b54 <_dtoa_r+0x98c>
 8012642:	ed8d 8b02 	vstr	d8, [sp, #8]
 8012646:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012648:	2b00      	cmp	r3, #0
 801264a:	f2c0 814e 	blt.w	80128ea <_dtoa_r+0x722>
 801264e:	f1bb 0f0e 	cmp.w	fp, #14
 8012652:	f300 814a 	bgt.w	80128ea <_dtoa_r+0x722>
 8012656:	4b6b      	ldr	r3, [pc, #428]	; (8012804 <_dtoa_r+0x63c>)
 8012658:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801265c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012660:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012662:	2b00      	cmp	r3, #0
 8012664:	f280 80dc 	bge.w	8012820 <_dtoa_r+0x658>
 8012668:	9b04      	ldr	r3, [sp, #16]
 801266a:	2b00      	cmp	r3, #0
 801266c:	f300 80d8 	bgt.w	8012820 <_dtoa_r+0x658>
 8012670:	f040 826f 	bne.w	8012b52 <_dtoa_r+0x98a>
 8012674:	4b68      	ldr	r3, [pc, #416]	; (8012818 <_dtoa_r+0x650>)
 8012676:	2200      	movs	r2, #0
 8012678:	4640      	mov	r0, r8
 801267a:	4649      	mov	r1, r9
 801267c:	f7ed ffbc 	bl	80005f8 <__aeabi_dmul>
 8012680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012684:	f7ee fa3e 	bl	8000b04 <__aeabi_dcmpge>
 8012688:	9e04      	ldr	r6, [sp, #16]
 801268a:	4637      	mov	r7, r6
 801268c:	2800      	cmp	r0, #0
 801268e:	f040 8245 	bne.w	8012b1c <_dtoa_r+0x954>
 8012692:	9d00      	ldr	r5, [sp, #0]
 8012694:	2331      	movs	r3, #49	; 0x31
 8012696:	f805 3b01 	strb.w	r3, [r5], #1
 801269a:	f10b 0b01 	add.w	fp, fp, #1
 801269e:	e241      	b.n	8012b24 <_dtoa_r+0x95c>
 80126a0:	07f2      	lsls	r2, r6, #31
 80126a2:	d505      	bpl.n	80126b0 <_dtoa_r+0x4e8>
 80126a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80126a8:	f7ed ffa6 	bl	80005f8 <__aeabi_dmul>
 80126ac:	3501      	adds	r5, #1
 80126ae:	2301      	movs	r3, #1
 80126b0:	1076      	asrs	r6, r6, #1
 80126b2:	3708      	adds	r7, #8
 80126b4:	e773      	b.n	801259e <_dtoa_r+0x3d6>
 80126b6:	2502      	movs	r5, #2
 80126b8:	e775      	b.n	80125a6 <_dtoa_r+0x3de>
 80126ba:	9e04      	ldr	r6, [sp, #16]
 80126bc:	465f      	mov	r7, fp
 80126be:	e792      	b.n	80125e6 <_dtoa_r+0x41e>
 80126c0:	9900      	ldr	r1, [sp, #0]
 80126c2:	4b50      	ldr	r3, [pc, #320]	; (8012804 <_dtoa_r+0x63c>)
 80126c4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80126c8:	4431      	add	r1, r6
 80126ca:	9102      	str	r1, [sp, #8]
 80126cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80126ce:	eeb0 9a47 	vmov.f32	s18, s14
 80126d2:	eef0 9a67 	vmov.f32	s19, s15
 80126d6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80126da:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80126de:	2900      	cmp	r1, #0
 80126e0:	d044      	beq.n	801276c <_dtoa_r+0x5a4>
 80126e2:	494e      	ldr	r1, [pc, #312]	; (801281c <_dtoa_r+0x654>)
 80126e4:	2000      	movs	r0, #0
 80126e6:	f7ee f8b1 	bl	800084c <__aeabi_ddiv>
 80126ea:	ec53 2b19 	vmov	r2, r3, d9
 80126ee:	f7ed fdcb 	bl	8000288 <__aeabi_dsub>
 80126f2:	9d00      	ldr	r5, [sp, #0]
 80126f4:	ec41 0b19 	vmov	d9, r0, r1
 80126f8:	4649      	mov	r1, r9
 80126fa:	4640      	mov	r0, r8
 80126fc:	f7ee fa2c 	bl	8000b58 <__aeabi_d2iz>
 8012700:	4606      	mov	r6, r0
 8012702:	f7ed ff0f 	bl	8000524 <__aeabi_i2d>
 8012706:	4602      	mov	r2, r0
 8012708:	460b      	mov	r3, r1
 801270a:	4640      	mov	r0, r8
 801270c:	4649      	mov	r1, r9
 801270e:	f7ed fdbb 	bl	8000288 <__aeabi_dsub>
 8012712:	3630      	adds	r6, #48	; 0x30
 8012714:	f805 6b01 	strb.w	r6, [r5], #1
 8012718:	ec53 2b19 	vmov	r2, r3, d9
 801271c:	4680      	mov	r8, r0
 801271e:	4689      	mov	r9, r1
 8012720:	f7ee f9dc 	bl	8000adc <__aeabi_dcmplt>
 8012724:	2800      	cmp	r0, #0
 8012726:	d164      	bne.n	80127f2 <_dtoa_r+0x62a>
 8012728:	4642      	mov	r2, r8
 801272a:	464b      	mov	r3, r9
 801272c:	4937      	ldr	r1, [pc, #220]	; (801280c <_dtoa_r+0x644>)
 801272e:	2000      	movs	r0, #0
 8012730:	f7ed fdaa 	bl	8000288 <__aeabi_dsub>
 8012734:	ec53 2b19 	vmov	r2, r3, d9
 8012738:	f7ee f9d0 	bl	8000adc <__aeabi_dcmplt>
 801273c:	2800      	cmp	r0, #0
 801273e:	f040 80b6 	bne.w	80128ae <_dtoa_r+0x6e6>
 8012742:	9b02      	ldr	r3, [sp, #8]
 8012744:	429d      	cmp	r5, r3
 8012746:	f43f af7c 	beq.w	8012642 <_dtoa_r+0x47a>
 801274a:	4b31      	ldr	r3, [pc, #196]	; (8012810 <_dtoa_r+0x648>)
 801274c:	ec51 0b19 	vmov	r0, r1, d9
 8012750:	2200      	movs	r2, #0
 8012752:	f7ed ff51 	bl	80005f8 <__aeabi_dmul>
 8012756:	4b2e      	ldr	r3, [pc, #184]	; (8012810 <_dtoa_r+0x648>)
 8012758:	ec41 0b19 	vmov	d9, r0, r1
 801275c:	2200      	movs	r2, #0
 801275e:	4640      	mov	r0, r8
 8012760:	4649      	mov	r1, r9
 8012762:	f7ed ff49 	bl	80005f8 <__aeabi_dmul>
 8012766:	4680      	mov	r8, r0
 8012768:	4689      	mov	r9, r1
 801276a:	e7c5      	b.n	80126f8 <_dtoa_r+0x530>
 801276c:	ec51 0b17 	vmov	r0, r1, d7
 8012770:	f7ed ff42 	bl	80005f8 <__aeabi_dmul>
 8012774:	9b02      	ldr	r3, [sp, #8]
 8012776:	9d00      	ldr	r5, [sp, #0]
 8012778:	930f      	str	r3, [sp, #60]	; 0x3c
 801277a:	ec41 0b19 	vmov	d9, r0, r1
 801277e:	4649      	mov	r1, r9
 8012780:	4640      	mov	r0, r8
 8012782:	f7ee f9e9 	bl	8000b58 <__aeabi_d2iz>
 8012786:	4606      	mov	r6, r0
 8012788:	f7ed fecc 	bl	8000524 <__aeabi_i2d>
 801278c:	3630      	adds	r6, #48	; 0x30
 801278e:	4602      	mov	r2, r0
 8012790:	460b      	mov	r3, r1
 8012792:	4640      	mov	r0, r8
 8012794:	4649      	mov	r1, r9
 8012796:	f7ed fd77 	bl	8000288 <__aeabi_dsub>
 801279a:	f805 6b01 	strb.w	r6, [r5], #1
 801279e:	9b02      	ldr	r3, [sp, #8]
 80127a0:	429d      	cmp	r5, r3
 80127a2:	4680      	mov	r8, r0
 80127a4:	4689      	mov	r9, r1
 80127a6:	f04f 0200 	mov.w	r2, #0
 80127aa:	d124      	bne.n	80127f6 <_dtoa_r+0x62e>
 80127ac:	4b1b      	ldr	r3, [pc, #108]	; (801281c <_dtoa_r+0x654>)
 80127ae:	ec51 0b19 	vmov	r0, r1, d9
 80127b2:	f7ed fd6b 	bl	800028c <__adddf3>
 80127b6:	4602      	mov	r2, r0
 80127b8:	460b      	mov	r3, r1
 80127ba:	4640      	mov	r0, r8
 80127bc:	4649      	mov	r1, r9
 80127be:	f7ee f9ab 	bl	8000b18 <__aeabi_dcmpgt>
 80127c2:	2800      	cmp	r0, #0
 80127c4:	d173      	bne.n	80128ae <_dtoa_r+0x6e6>
 80127c6:	ec53 2b19 	vmov	r2, r3, d9
 80127ca:	4914      	ldr	r1, [pc, #80]	; (801281c <_dtoa_r+0x654>)
 80127cc:	2000      	movs	r0, #0
 80127ce:	f7ed fd5b 	bl	8000288 <__aeabi_dsub>
 80127d2:	4602      	mov	r2, r0
 80127d4:	460b      	mov	r3, r1
 80127d6:	4640      	mov	r0, r8
 80127d8:	4649      	mov	r1, r9
 80127da:	f7ee f97f 	bl	8000adc <__aeabi_dcmplt>
 80127de:	2800      	cmp	r0, #0
 80127e0:	f43f af2f 	beq.w	8012642 <_dtoa_r+0x47a>
 80127e4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80127e6:	1e6b      	subs	r3, r5, #1
 80127e8:	930f      	str	r3, [sp, #60]	; 0x3c
 80127ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80127ee:	2b30      	cmp	r3, #48	; 0x30
 80127f0:	d0f8      	beq.n	80127e4 <_dtoa_r+0x61c>
 80127f2:	46bb      	mov	fp, r7
 80127f4:	e04a      	b.n	801288c <_dtoa_r+0x6c4>
 80127f6:	4b06      	ldr	r3, [pc, #24]	; (8012810 <_dtoa_r+0x648>)
 80127f8:	f7ed fefe 	bl	80005f8 <__aeabi_dmul>
 80127fc:	4680      	mov	r8, r0
 80127fe:	4689      	mov	r9, r1
 8012800:	e7bd      	b.n	801277e <_dtoa_r+0x5b6>
 8012802:	bf00      	nop
 8012804:	08015998 	.word	0x08015998
 8012808:	08015970 	.word	0x08015970
 801280c:	3ff00000 	.word	0x3ff00000
 8012810:	40240000 	.word	0x40240000
 8012814:	401c0000 	.word	0x401c0000
 8012818:	40140000 	.word	0x40140000
 801281c:	3fe00000 	.word	0x3fe00000
 8012820:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012824:	9d00      	ldr	r5, [sp, #0]
 8012826:	4642      	mov	r2, r8
 8012828:	464b      	mov	r3, r9
 801282a:	4630      	mov	r0, r6
 801282c:	4639      	mov	r1, r7
 801282e:	f7ee f80d 	bl	800084c <__aeabi_ddiv>
 8012832:	f7ee f991 	bl	8000b58 <__aeabi_d2iz>
 8012836:	9001      	str	r0, [sp, #4]
 8012838:	f7ed fe74 	bl	8000524 <__aeabi_i2d>
 801283c:	4642      	mov	r2, r8
 801283e:	464b      	mov	r3, r9
 8012840:	f7ed feda 	bl	80005f8 <__aeabi_dmul>
 8012844:	4602      	mov	r2, r0
 8012846:	460b      	mov	r3, r1
 8012848:	4630      	mov	r0, r6
 801284a:	4639      	mov	r1, r7
 801284c:	f7ed fd1c 	bl	8000288 <__aeabi_dsub>
 8012850:	9e01      	ldr	r6, [sp, #4]
 8012852:	9f04      	ldr	r7, [sp, #16]
 8012854:	3630      	adds	r6, #48	; 0x30
 8012856:	f805 6b01 	strb.w	r6, [r5], #1
 801285a:	9e00      	ldr	r6, [sp, #0]
 801285c:	1bae      	subs	r6, r5, r6
 801285e:	42b7      	cmp	r7, r6
 8012860:	4602      	mov	r2, r0
 8012862:	460b      	mov	r3, r1
 8012864:	d134      	bne.n	80128d0 <_dtoa_r+0x708>
 8012866:	f7ed fd11 	bl	800028c <__adddf3>
 801286a:	4642      	mov	r2, r8
 801286c:	464b      	mov	r3, r9
 801286e:	4606      	mov	r6, r0
 8012870:	460f      	mov	r7, r1
 8012872:	f7ee f951 	bl	8000b18 <__aeabi_dcmpgt>
 8012876:	b9c8      	cbnz	r0, 80128ac <_dtoa_r+0x6e4>
 8012878:	4642      	mov	r2, r8
 801287a:	464b      	mov	r3, r9
 801287c:	4630      	mov	r0, r6
 801287e:	4639      	mov	r1, r7
 8012880:	f7ee f922 	bl	8000ac8 <__aeabi_dcmpeq>
 8012884:	b110      	cbz	r0, 801288c <_dtoa_r+0x6c4>
 8012886:	9b01      	ldr	r3, [sp, #4]
 8012888:	07db      	lsls	r3, r3, #31
 801288a:	d40f      	bmi.n	80128ac <_dtoa_r+0x6e4>
 801288c:	4651      	mov	r1, sl
 801288e:	4620      	mov	r0, r4
 8012890:	f000 fd86 	bl	80133a0 <_Bfree>
 8012894:	2300      	movs	r3, #0
 8012896:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8012898:	702b      	strb	r3, [r5, #0]
 801289a:	f10b 0301 	add.w	r3, fp, #1
 801289e:	6013      	str	r3, [r2, #0]
 80128a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80128a2:	2b00      	cmp	r3, #0
 80128a4:	f43f ace2 	beq.w	801226c <_dtoa_r+0xa4>
 80128a8:	601d      	str	r5, [r3, #0]
 80128aa:	e4df      	b.n	801226c <_dtoa_r+0xa4>
 80128ac:	465f      	mov	r7, fp
 80128ae:	462b      	mov	r3, r5
 80128b0:	461d      	mov	r5, r3
 80128b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80128b6:	2a39      	cmp	r2, #57	; 0x39
 80128b8:	d106      	bne.n	80128c8 <_dtoa_r+0x700>
 80128ba:	9a00      	ldr	r2, [sp, #0]
 80128bc:	429a      	cmp	r2, r3
 80128be:	d1f7      	bne.n	80128b0 <_dtoa_r+0x6e8>
 80128c0:	9900      	ldr	r1, [sp, #0]
 80128c2:	2230      	movs	r2, #48	; 0x30
 80128c4:	3701      	adds	r7, #1
 80128c6:	700a      	strb	r2, [r1, #0]
 80128c8:	781a      	ldrb	r2, [r3, #0]
 80128ca:	3201      	adds	r2, #1
 80128cc:	701a      	strb	r2, [r3, #0]
 80128ce:	e790      	b.n	80127f2 <_dtoa_r+0x62a>
 80128d0:	4ba3      	ldr	r3, [pc, #652]	; (8012b60 <_dtoa_r+0x998>)
 80128d2:	2200      	movs	r2, #0
 80128d4:	f7ed fe90 	bl	80005f8 <__aeabi_dmul>
 80128d8:	2200      	movs	r2, #0
 80128da:	2300      	movs	r3, #0
 80128dc:	4606      	mov	r6, r0
 80128de:	460f      	mov	r7, r1
 80128e0:	f7ee f8f2 	bl	8000ac8 <__aeabi_dcmpeq>
 80128e4:	2800      	cmp	r0, #0
 80128e6:	d09e      	beq.n	8012826 <_dtoa_r+0x65e>
 80128e8:	e7d0      	b.n	801288c <_dtoa_r+0x6c4>
 80128ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80128ec:	2a00      	cmp	r2, #0
 80128ee:	f000 80ca 	beq.w	8012a86 <_dtoa_r+0x8be>
 80128f2:	9a07      	ldr	r2, [sp, #28]
 80128f4:	2a01      	cmp	r2, #1
 80128f6:	f300 80ad 	bgt.w	8012a54 <_dtoa_r+0x88c>
 80128fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80128fc:	2a00      	cmp	r2, #0
 80128fe:	f000 80a5 	beq.w	8012a4c <_dtoa_r+0x884>
 8012902:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012906:	9e08      	ldr	r6, [sp, #32]
 8012908:	9d05      	ldr	r5, [sp, #20]
 801290a:	9a05      	ldr	r2, [sp, #20]
 801290c:	441a      	add	r2, r3
 801290e:	9205      	str	r2, [sp, #20]
 8012910:	9a06      	ldr	r2, [sp, #24]
 8012912:	2101      	movs	r1, #1
 8012914:	441a      	add	r2, r3
 8012916:	4620      	mov	r0, r4
 8012918:	9206      	str	r2, [sp, #24]
 801291a:	f000 fdf7 	bl	801350c <__i2b>
 801291e:	4607      	mov	r7, r0
 8012920:	b165      	cbz	r5, 801293c <_dtoa_r+0x774>
 8012922:	9b06      	ldr	r3, [sp, #24]
 8012924:	2b00      	cmp	r3, #0
 8012926:	dd09      	ble.n	801293c <_dtoa_r+0x774>
 8012928:	42ab      	cmp	r3, r5
 801292a:	9a05      	ldr	r2, [sp, #20]
 801292c:	bfa8      	it	ge
 801292e:	462b      	movge	r3, r5
 8012930:	1ad2      	subs	r2, r2, r3
 8012932:	9205      	str	r2, [sp, #20]
 8012934:	9a06      	ldr	r2, [sp, #24]
 8012936:	1aed      	subs	r5, r5, r3
 8012938:	1ad3      	subs	r3, r2, r3
 801293a:	9306      	str	r3, [sp, #24]
 801293c:	9b08      	ldr	r3, [sp, #32]
 801293e:	b1f3      	cbz	r3, 801297e <_dtoa_r+0x7b6>
 8012940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012942:	2b00      	cmp	r3, #0
 8012944:	f000 80a3 	beq.w	8012a8e <_dtoa_r+0x8c6>
 8012948:	2e00      	cmp	r6, #0
 801294a:	dd10      	ble.n	801296e <_dtoa_r+0x7a6>
 801294c:	4639      	mov	r1, r7
 801294e:	4632      	mov	r2, r6
 8012950:	4620      	mov	r0, r4
 8012952:	f000 fe9b 	bl	801368c <__pow5mult>
 8012956:	4652      	mov	r2, sl
 8012958:	4601      	mov	r1, r0
 801295a:	4607      	mov	r7, r0
 801295c:	4620      	mov	r0, r4
 801295e:	f000 fdeb 	bl	8013538 <__multiply>
 8012962:	4651      	mov	r1, sl
 8012964:	4680      	mov	r8, r0
 8012966:	4620      	mov	r0, r4
 8012968:	f000 fd1a 	bl	80133a0 <_Bfree>
 801296c:	46c2      	mov	sl, r8
 801296e:	9b08      	ldr	r3, [sp, #32]
 8012970:	1b9a      	subs	r2, r3, r6
 8012972:	d004      	beq.n	801297e <_dtoa_r+0x7b6>
 8012974:	4651      	mov	r1, sl
 8012976:	4620      	mov	r0, r4
 8012978:	f000 fe88 	bl	801368c <__pow5mult>
 801297c:	4682      	mov	sl, r0
 801297e:	2101      	movs	r1, #1
 8012980:	4620      	mov	r0, r4
 8012982:	f000 fdc3 	bl	801350c <__i2b>
 8012986:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012988:	2b00      	cmp	r3, #0
 801298a:	4606      	mov	r6, r0
 801298c:	f340 8081 	ble.w	8012a92 <_dtoa_r+0x8ca>
 8012990:	461a      	mov	r2, r3
 8012992:	4601      	mov	r1, r0
 8012994:	4620      	mov	r0, r4
 8012996:	f000 fe79 	bl	801368c <__pow5mult>
 801299a:	9b07      	ldr	r3, [sp, #28]
 801299c:	2b01      	cmp	r3, #1
 801299e:	4606      	mov	r6, r0
 80129a0:	dd7a      	ble.n	8012a98 <_dtoa_r+0x8d0>
 80129a2:	f04f 0800 	mov.w	r8, #0
 80129a6:	6933      	ldr	r3, [r6, #16]
 80129a8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80129ac:	6918      	ldr	r0, [r3, #16]
 80129ae:	f000 fd5f 	bl	8013470 <__hi0bits>
 80129b2:	f1c0 0020 	rsb	r0, r0, #32
 80129b6:	9b06      	ldr	r3, [sp, #24]
 80129b8:	4418      	add	r0, r3
 80129ba:	f010 001f 	ands.w	r0, r0, #31
 80129be:	f000 8094 	beq.w	8012aea <_dtoa_r+0x922>
 80129c2:	f1c0 0320 	rsb	r3, r0, #32
 80129c6:	2b04      	cmp	r3, #4
 80129c8:	f340 8085 	ble.w	8012ad6 <_dtoa_r+0x90e>
 80129cc:	9b05      	ldr	r3, [sp, #20]
 80129ce:	f1c0 001c 	rsb	r0, r0, #28
 80129d2:	4403      	add	r3, r0
 80129d4:	9305      	str	r3, [sp, #20]
 80129d6:	9b06      	ldr	r3, [sp, #24]
 80129d8:	4403      	add	r3, r0
 80129da:	4405      	add	r5, r0
 80129dc:	9306      	str	r3, [sp, #24]
 80129de:	9b05      	ldr	r3, [sp, #20]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	dd05      	ble.n	80129f0 <_dtoa_r+0x828>
 80129e4:	4651      	mov	r1, sl
 80129e6:	461a      	mov	r2, r3
 80129e8:	4620      	mov	r0, r4
 80129ea:	f000 fea9 	bl	8013740 <__lshift>
 80129ee:	4682      	mov	sl, r0
 80129f0:	9b06      	ldr	r3, [sp, #24]
 80129f2:	2b00      	cmp	r3, #0
 80129f4:	dd05      	ble.n	8012a02 <_dtoa_r+0x83a>
 80129f6:	4631      	mov	r1, r6
 80129f8:	461a      	mov	r2, r3
 80129fa:	4620      	mov	r0, r4
 80129fc:	f000 fea0 	bl	8013740 <__lshift>
 8012a00:	4606      	mov	r6, r0
 8012a02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d072      	beq.n	8012aee <_dtoa_r+0x926>
 8012a08:	4631      	mov	r1, r6
 8012a0a:	4650      	mov	r0, sl
 8012a0c:	f000 ff04 	bl	8013818 <__mcmp>
 8012a10:	2800      	cmp	r0, #0
 8012a12:	da6c      	bge.n	8012aee <_dtoa_r+0x926>
 8012a14:	2300      	movs	r3, #0
 8012a16:	4651      	mov	r1, sl
 8012a18:	220a      	movs	r2, #10
 8012a1a:	4620      	mov	r0, r4
 8012a1c:	f000 fce2 	bl	80133e4 <__multadd>
 8012a20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a22:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012a26:	4682      	mov	sl, r0
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	f000 81b0 	beq.w	8012d8e <_dtoa_r+0xbc6>
 8012a2e:	2300      	movs	r3, #0
 8012a30:	4639      	mov	r1, r7
 8012a32:	220a      	movs	r2, #10
 8012a34:	4620      	mov	r0, r4
 8012a36:	f000 fcd5 	bl	80133e4 <__multadd>
 8012a3a:	9b01      	ldr	r3, [sp, #4]
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	4607      	mov	r7, r0
 8012a40:	f300 8096 	bgt.w	8012b70 <_dtoa_r+0x9a8>
 8012a44:	9b07      	ldr	r3, [sp, #28]
 8012a46:	2b02      	cmp	r3, #2
 8012a48:	dc59      	bgt.n	8012afe <_dtoa_r+0x936>
 8012a4a:	e091      	b.n	8012b70 <_dtoa_r+0x9a8>
 8012a4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012a4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012a52:	e758      	b.n	8012906 <_dtoa_r+0x73e>
 8012a54:	9b04      	ldr	r3, [sp, #16]
 8012a56:	1e5e      	subs	r6, r3, #1
 8012a58:	9b08      	ldr	r3, [sp, #32]
 8012a5a:	42b3      	cmp	r3, r6
 8012a5c:	bfbf      	itttt	lt
 8012a5e:	9b08      	ldrlt	r3, [sp, #32]
 8012a60:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8012a62:	9608      	strlt	r6, [sp, #32]
 8012a64:	1af3      	sublt	r3, r6, r3
 8012a66:	bfb4      	ite	lt
 8012a68:	18d2      	addlt	r2, r2, r3
 8012a6a:	1b9e      	subge	r6, r3, r6
 8012a6c:	9b04      	ldr	r3, [sp, #16]
 8012a6e:	bfbc      	itt	lt
 8012a70:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8012a72:	2600      	movlt	r6, #0
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	bfb7      	itett	lt
 8012a78:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8012a7c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012a80:	1a9d      	sublt	r5, r3, r2
 8012a82:	2300      	movlt	r3, #0
 8012a84:	e741      	b.n	801290a <_dtoa_r+0x742>
 8012a86:	9e08      	ldr	r6, [sp, #32]
 8012a88:	9d05      	ldr	r5, [sp, #20]
 8012a8a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012a8c:	e748      	b.n	8012920 <_dtoa_r+0x758>
 8012a8e:	9a08      	ldr	r2, [sp, #32]
 8012a90:	e770      	b.n	8012974 <_dtoa_r+0x7ac>
 8012a92:	9b07      	ldr	r3, [sp, #28]
 8012a94:	2b01      	cmp	r3, #1
 8012a96:	dc19      	bgt.n	8012acc <_dtoa_r+0x904>
 8012a98:	9b02      	ldr	r3, [sp, #8]
 8012a9a:	b9bb      	cbnz	r3, 8012acc <_dtoa_r+0x904>
 8012a9c:	9b03      	ldr	r3, [sp, #12]
 8012a9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012aa2:	b99b      	cbnz	r3, 8012acc <_dtoa_r+0x904>
 8012aa4:	9b03      	ldr	r3, [sp, #12]
 8012aa6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012aaa:	0d1b      	lsrs	r3, r3, #20
 8012aac:	051b      	lsls	r3, r3, #20
 8012aae:	b183      	cbz	r3, 8012ad2 <_dtoa_r+0x90a>
 8012ab0:	9b05      	ldr	r3, [sp, #20]
 8012ab2:	3301      	adds	r3, #1
 8012ab4:	9305      	str	r3, [sp, #20]
 8012ab6:	9b06      	ldr	r3, [sp, #24]
 8012ab8:	3301      	adds	r3, #1
 8012aba:	9306      	str	r3, [sp, #24]
 8012abc:	f04f 0801 	mov.w	r8, #1
 8012ac0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	f47f af6f 	bne.w	80129a6 <_dtoa_r+0x7de>
 8012ac8:	2001      	movs	r0, #1
 8012aca:	e774      	b.n	80129b6 <_dtoa_r+0x7ee>
 8012acc:	f04f 0800 	mov.w	r8, #0
 8012ad0:	e7f6      	b.n	8012ac0 <_dtoa_r+0x8f8>
 8012ad2:	4698      	mov	r8, r3
 8012ad4:	e7f4      	b.n	8012ac0 <_dtoa_r+0x8f8>
 8012ad6:	d082      	beq.n	80129de <_dtoa_r+0x816>
 8012ad8:	9a05      	ldr	r2, [sp, #20]
 8012ada:	331c      	adds	r3, #28
 8012adc:	441a      	add	r2, r3
 8012ade:	9205      	str	r2, [sp, #20]
 8012ae0:	9a06      	ldr	r2, [sp, #24]
 8012ae2:	441a      	add	r2, r3
 8012ae4:	441d      	add	r5, r3
 8012ae6:	9206      	str	r2, [sp, #24]
 8012ae8:	e779      	b.n	80129de <_dtoa_r+0x816>
 8012aea:	4603      	mov	r3, r0
 8012aec:	e7f4      	b.n	8012ad8 <_dtoa_r+0x910>
 8012aee:	9b04      	ldr	r3, [sp, #16]
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	dc37      	bgt.n	8012b64 <_dtoa_r+0x99c>
 8012af4:	9b07      	ldr	r3, [sp, #28]
 8012af6:	2b02      	cmp	r3, #2
 8012af8:	dd34      	ble.n	8012b64 <_dtoa_r+0x99c>
 8012afa:	9b04      	ldr	r3, [sp, #16]
 8012afc:	9301      	str	r3, [sp, #4]
 8012afe:	9b01      	ldr	r3, [sp, #4]
 8012b00:	b963      	cbnz	r3, 8012b1c <_dtoa_r+0x954>
 8012b02:	4631      	mov	r1, r6
 8012b04:	2205      	movs	r2, #5
 8012b06:	4620      	mov	r0, r4
 8012b08:	f000 fc6c 	bl	80133e4 <__multadd>
 8012b0c:	4601      	mov	r1, r0
 8012b0e:	4606      	mov	r6, r0
 8012b10:	4650      	mov	r0, sl
 8012b12:	f000 fe81 	bl	8013818 <__mcmp>
 8012b16:	2800      	cmp	r0, #0
 8012b18:	f73f adbb 	bgt.w	8012692 <_dtoa_r+0x4ca>
 8012b1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b1e:	9d00      	ldr	r5, [sp, #0]
 8012b20:	ea6f 0b03 	mvn.w	fp, r3
 8012b24:	f04f 0800 	mov.w	r8, #0
 8012b28:	4631      	mov	r1, r6
 8012b2a:	4620      	mov	r0, r4
 8012b2c:	f000 fc38 	bl	80133a0 <_Bfree>
 8012b30:	2f00      	cmp	r7, #0
 8012b32:	f43f aeab 	beq.w	801288c <_dtoa_r+0x6c4>
 8012b36:	f1b8 0f00 	cmp.w	r8, #0
 8012b3a:	d005      	beq.n	8012b48 <_dtoa_r+0x980>
 8012b3c:	45b8      	cmp	r8, r7
 8012b3e:	d003      	beq.n	8012b48 <_dtoa_r+0x980>
 8012b40:	4641      	mov	r1, r8
 8012b42:	4620      	mov	r0, r4
 8012b44:	f000 fc2c 	bl	80133a0 <_Bfree>
 8012b48:	4639      	mov	r1, r7
 8012b4a:	4620      	mov	r0, r4
 8012b4c:	f000 fc28 	bl	80133a0 <_Bfree>
 8012b50:	e69c      	b.n	801288c <_dtoa_r+0x6c4>
 8012b52:	2600      	movs	r6, #0
 8012b54:	4637      	mov	r7, r6
 8012b56:	e7e1      	b.n	8012b1c <_dtoa_r+0x954>
 8012b58:	46bb      	mov	fp, r7
 8012b5a:	4637      	mov	r7, r6
 8012b5c:	e599      	b.n	8012692 <_dtoa_r+0x4ca>
 8012b5e:	bf00      	nop
 8012b60:	40240000 	.word	0x40240000
 8012b64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	f000 80c8 	beq.w	8012cfc <_dtoa_r+0xb34>
 8012b6c:	9b04      	ldr	r3, [sp, #16]
 8012b6e:	9301      	str	r3, [sp, #4]
 8012b70:	2d00      	cmp	r5, #0
 8012b72:	dd05      	ble.n	8012b80 <_dtoa_r+0x9b8>
 8012b74:	4639      	mov	r1, r7
 8012b76:	462a      	mov	r2, r5
 8012b78:	4620      	mov	r0, r4
 8012b7a:	f000 fde1 	bl	8013740 <__lshift>
 8012b7e:	4607      	mov	r7, r0
 8012b80:	f1b8 0f00 	cmp.w	r8, #0
 8012b84:	d05b      	beq.n	8012c3e <_dtoa_r+0xa76>
 8012b86:	6879      	ldr	r1, [r7, #4]
 8012b88:	4620      	mov	r0, r4
 8012b8a:	f000 fbc9 	bl	8013320 <_Balloc>
 8012b8e:	4605      	mov	r5, r0
 8012b90:	b928      	cbnz	r0, 8012b9e <_dtoa_r+0x9d6>
 8012b92:	4b83      	ldr	r3, [pc, #524]	; (8012da0 <_dtoa_r+0xbd8>)
 8012b94:	4602      	mov	r2, r0
 8012b96:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012b9a:	f7ff bb2e 	b.w	80121fa <_dtoa_r+0x32>
 8012b9e:	693a      	ldr	r2, [r7, #16]
 8012ba0:	3202      	adds	r2, #2
 8012ba2:	0092      	lsls	r2, r2, #2
 8012ba4:	f107 010c 	add.w	r1, r7, #12
 8012ba8:	300c      	adds	r0, #12
 8012baa:	f7ff fa77 	bl	801209c <memcpy>
 8012bae:	2201      	movs	r2, #1
 8012bb0:	4629      	mov	r1, r5
 8012bb2:	4620      	mov	r0, r4
 8012bb4:	f000 fdc4 	bl	8013740 <__lshift>
 8012bb8:	9b00      	ldr	r3, [sp, #0]
 8012bba:	3301      	adds	r3, #1
 8012bbc:	9304      	str	r3, [sp, #16]
 8012bbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012bc2:	4413      	add	r3, r2
 8012bc4:	9308      	str	r3, [sp, #32]
 8012bc6:	9b02      	ldr	r3, [sp, #8]
 8012bc8:	f003 0301 	and.w	r3, r3, #1
 8012bcc:	46b8      	mov	r8, r7
 8012bce:	9306      	str	r3, [sp, #24]
 8012bd0:	4607      	mov	r7, r0
 8012bd2:	9b04      	ldr	r3, [sp, #16]
 8012bd4:	4631      	mov	r1, r6
 8012bd6:	3b01      	subs	r3, #1
 8012bd8:	4650      	mov	r0, sl
 8012bda:	9301      	str	r3, [sp, #4]
 8012bdc:	f7ff fa6c 	bl	80120b8 <quorem>
 8012be0:	4641      	mov	r1, r8
 8012be2:	9002      	str	r0, [sp, #8]
 8012be4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012be8:	4650      	mov	r0, sl
 8012bea:	f000 fe15 	bl	8013818 <__mcmp>
 8012bee:	463a      	mov	r2, r7
 8012bf0:	9005      	str	r0, [sp, #20]
 8012bf2:	4631      	mov	r1, r6
 8012bf4:	4620      	mov	r0, r4
 8012bf6:	f000 fe2b 	bl	8013850 <__mdiff>
 8012bfa:	68c2      	ldr	r2, [r0, #12]
 8012bfc:	4605      	mov	r5, r0
 8012bfe:	bb02      	cbnz	r2, 8012c42 <_dtoa_r+0xa7a>
 8012c00:	4601      	mov	r1, r0
 8012c02:	4650      	mov	r0, sl
 8012c04:	f000 fe08 	bl	8013818 <__mcmp>
 8012c08:	4602      	mov	r2, r0
 8012c0a:	4629      	mov	r1, r5
 8012c0c:	4620      	mov	r0, r4
 8012c0e:	9209      	str	r2, [sp, #36]	; 0x24
 8012c10:	f000 fbc6 	bl	80133a0 <_Bfree>
 8012c14:	9b07      	ldr	r3, [sp, #28]
 8012c16:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c18:	9d04      	ldr	r5, [sp, #16]
 8012c1a:	ea43 0102 	orr.w	r1, r3, r2
 8012c1e:	9b06      	ldr	r3, [sp, #24]
 8012c20:	4319      	orrs	r1, r3
 8012c22:	d110      	bne.n	8012c46 <_dtoa_r+0xa7e>
 8012c24:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012c28:	d029      	beq.n	8012c7e <_dtoa_r+0xab6>
 8012c2a:	9b05      	ldr	r3, [sp, #20]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	dd02      	ble.n	8012c36 <_dtoa_r+0xa6e>
 8012c30:	9b02      	ldr	r3, [sp, #8]
 8012c32:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8012c36:	9b01      	ldr	r3, [sp, #4]
 8012c38:	f883 9000 	strb.w	r9, [r3]
 8012c3c:	e774      	b.n	8012b28 <_dtoa_r+0x960>
 8012c3e:	4638      	mov	r0, r7
 8012c40:	e7ba      	b.n	8012bb8 <_dtoa_r+0x9f0>
 8012c42:	2201      	movs	r2, #1
 8012c44:	e7e1      	b.n	8012c0a <_dtoa_r+0xa42>
 8012c46:	9b05      	ldr	r3, [sp, #20]
 8012c48:	2b00      	cmp	r3, #0
 8012c4a:	db04      	blt.n	8012c56 <_dtoa_r+0xa8e>
 8012c4c:	9907      	ldr	r1, [sp, #28]
 8012c4e:	430b      	orrs	r3, r1
 8012c50:	9906      	ldr	r1, [sp, #24]
 8012c52:	430b      	orrs	r3, r1
 8012c54:	d120      	bne.n	8012c98 <_dtoa_r+0xad0>
 8012c56:	2a00      	cmp	r2, #0
 8012c58:	dded      	ble.n	8012c36 <_dtoa_r+0xa6e>
 8012c5a:	4651      	mov	r1, sl
 8012c5c:	2201      	movs	r2, #1
 8012c5e:	4620      	mov	r0, r4
 8012c60:	f000 fd6e 	bl	8013740 <__lshift>
 8012c64:	4631      	mov	r1, r6
 8012c66:	4682      	mov	sl, r0
 8012c68:	f000 fdd6 	bl	8013818 <__mcmp>
 8012c6c:	2800      	cmp	r0, #0
 8012c6e:	dc03      	bgt.n	8012c78 <_dtoa_r+0xab0>
 8012c70:	d1e1      	bne.n	8012c36 <_dtoa_r+0xa6e>
 8012c72:	f019 0f01 	tst.w	r9, #1
 8012c76:	d0de      	beq.n	8012c36 <_dtoa_r+0xa6e>
 8012c78:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012c7c:	d1d8      	bne.n	8012c30 <_dtoa_r+0xa68>
 8012c7e:	9a01      	ldr	r2, [sp, #4]
 8012c80:	2339      	movs	r3, #57	; 0x39
 8012c82:	7013      	strb	r3, [r2, #0]
 8012c84:	462b      	mov	r3, r5
 8012c86:	461d      	mov	r5, r3
 8012c88:	3b01      	subs	r3, #1
 8012c8a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012c8e:	2a39      	cmp	r2, #57	; 0x39
 8012c90:	d06c      	beq.n	8012d6c <_dtoa_r+0xba4>
 8012c92:	3201      	adds	r2, #1
 8012c94:	701a      	strb	r2, [r3, #0]
 8012c96:	e747      	b.n	8012b28 <_dtoa_r+0x960>
 8012c98:	2a00      	cmp	r2, #0
 8012c9a:	dd07      	ble.n	8012cac <_dtoa_r+0xae4>
 8012c9c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012ca0:	d0ed      	beq.n	8012c7e <_dtoa_r+0xab6>
 8012ca2:	9a01      	ldr	r2, [sp, #4]
 8012ca4:	f109 0301 	add.w	r3, r9, #1
 8012ca8:	7013      	strb	r3, [r2, #0]
 8012caa:	e73d      	b.n	8012b28 <_dtoa_r+0x960>
 8012cac:	9b04      	ldr	r3, [sp, #16]
 8012cae:	9a08      	ldr	r2, [sp, #32]
 8012cb0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8012cb4:	4293      	cmp	r3, r2
 8012cb6:	d043      	beq.n	8012d40 <_dtoa_r+0xb78>
 8012cb8:	4651      	mov	r1, sl
 8012cba:	2300      	movs	r3, #0
 8012cbc:	220a      	movs	r2, #10
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	f000 fb90 	bl	80133e4 <__multadd>
 8012cc4:	45b8      	cmp	r8, r7
 8012cc6:	4682      	mov	sl, r0
 8012cc8:	f04f 0300 	mov.w	r3, #0
 8012ccc:	f04f 020a 	mov.w	r2, #10
 8012cd0:	4641      	mov	r1, r8
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	d107      	bne.n	8012ce6 <_dtoa_r+0xb1e>
 8012cd6:	f000 fb85 	bl	80133e4 <__multadd>
 8012cda:	4680      	mov	r8, r0
 8012cdc:	4607      	mov	r7, r0
 8012cde:	9b04      	ldr	r3, [sp, #16]
 8012ce0:	3301      	adds	r3, #1
 8012ce2:	9304      	str	r3, [sp, #16]
 8012ce4:	e775      	b.n	8012bd2 <_dtoa_r+0xa0a>
 8012ce6:	f000 fb7d 	bl	80133e4 <__multadd>
 8012cea:	4639      	mov	r1, r7
 8012cec:	4680      	mov	r8, r0
 8012cee:	2300      	movs	r3, #0
 8012cf0:	220a      	movs	r2, #10
 8012cf2:	4620      	mov	r0, r4
 8012cf4:	f000 fb76 	bl	80133e4 <__multadd>
 8012cf8:	4607      	mov	r7, r0
 8012cfa:	e7f0      	b.n	8012cde <_dtoa_r+0xb16>
 8012cfc:	9b04      	ldr	r3, [sp, #16]
 8012cfe:	9301      	str	r3, [sp, #4]
 8012d00:	9d00      	ldr	r5, [sp, #0]
 8012d02:	4631      	mov	r1, r6
 8012d04:	4650      	mov	r0, sl
 8012d06:	f7ff f9d7 	bl	80120b8 <quorem>
 8012d0a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012d0e:	9b00      	ldr	r3, [sp, #0]
 8012d10:	f805 9b01 	strb.w	r9, [r5], #1
 8012d14:	1aea      	subs	r2, r5, r3
 8012d16:	9b01      	ldr	r3, [sp, #4]
 8012d18:	4293      	cmp	r3, r2
 8012d1a:	dd07      	ble.n	8012d2c <_dtoa_r+0xb64>
 8012d1c:	4651      	mov	r1, sl
 8012d1e:	2300      	movs	r3, #0
 8012d20:	220a      	movs	r2, #10
 8012d22:	4620      	mov	r0, r4
 8012d24:	f000 fb5e 	bl	80133e4 <__multadd>
 8012d28:	4682      	mov	sl, r0
 8012d2a:	e7ea      	b.n	8012d02 <_dtoa_r+0xb3a>
 8012d2c:	9b01      	ldr	r3, [sp, #4]
 8012d2e:	2b00      	cmp	r3, #0
 8012d30:	bfc8      	it	gt
 8012d32:	461d      	movgt	r5, r3
 8012d34:	9b00      	ldr	r3, [sp, #0]
 8012d36:	bfd8      	it	le
 8012d38:	2501      	movle	r5, #1
 8012d3a:	441d      	add	r5, r3
 8012d3c:	f04f 0800 	mov.w	r8, #0
 8012d40:	4651      	mov	r1, sl
 8012d42:	2201      	movs	r2, #1
 8012d44:	4620      	mov	r0, r4
 8012d46:	f000 fcfb 	bl	8013740 <__lshift>
 8012d4a:	4631      	mov	r1, r6
 8012d4c:	4682      	mov	sl, r0
 8012d4e:	f000 fd63 	bl	8013818 <__mcmp>
 8012d52:	2800      	cmp	r0, #0
 8012d54:	dc96      	bgt.n	8012c84 <_dtoa_r+0xabc>
 8012d56:	d102      	bne.n	8012d5e <_dtoa_r+0xb96>
 8012d58:	f019 0f01 	tst.w	r9, #1
 8012d5c:	d192      	bne.n	8012c84 <_dtoa_r+0xabc>
 8012d5e:	462b      	mov	r3, r5
 8012d60:	461d      	mov	r5, r3
 8012d62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012d66:	2a30      	cmp	r2, #48	; 0x30
 8012d68:	d0fa      	beq.n	8012d60 <_dtoa_r+0xb98>
 8012d6a:	e6dd      	b.n	8012b28 <_dtoa_r+0x960>
 8012d6c:	9a00      	ldr	r2, [sp, #0]
 8012d6e:	429a      	cmp	r2, r3
 8012d70:	d189      	bne.n	8012c86 <_dtoa_r+0xabe>
 8012d72:	f10b 0b01 	add.w	fp, fp, #1
 8012d76:	2331      	movs	r3, #49	; 0x31
 8012d78:	e796      	b.n	8012ca8 <_dtoa_r+0xae0>
 8012d7a:	4b0a      	ldr	r3, [pc, #40]	; (8012da4 <_dtoa_r+0xbdc>)
 8012d7c:	f7ff ba99 	b.w	80122b2 <_dtoa_r+0xea>
 8012d80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d82:	2b00      	cmp	r3, #0
 8012d84:	f47f aa6d 	bne.w	8012262 <_dtoa_r+0x9a>
 8012d88:	4b07      	ldr	r3, [pc, #28]	; (8012da8 <_dtoa_r+0xbe0>)
 8012d8a:	f7ff ba92 	b.w	80122b2 <_dtoa_r+0xea>
 8012d8e:	9b01      	ldr	r3, [sp, #4]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	dcb5      	bgt.n	8012d00 <_dtoa_r+0xb38>
 8012d94:	9b07      	ldr	r3, [sp, #28]
 8012d96:	2b02      	cmp	r3, #2
 8012d98:	f73f aeb1 	bgt.w	8012afe <_dtoa_r+0x936>
 8012d9c:	e7b0      	b.n	8012d00 <_dtoa_r+0xb38>
 8012d9e:	bf00      	nop
 8012da0:	080158f4 	.word	0x080158f4
 8012da4:	08015854 	.word	0x08015854
 8012da8:	08015878 	.word	0x08015878

08012dac <__ssputs_r>:
 8012dac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012db0:	688e      	ldr	r6, [r1, #8]
 8012db2:	461f      	mov	r7, r3
 8012db4:	42be      	cmp	r6, r7
 8012db6:	680b      	ldr	r3, [r1, #0]
 8012db8:	4682      	mov	sl, r0
 8012dba:	460c      	mov	r4, r1
 8012dbc:	4690      	mov	r8, r2
 8012dbe:	d82c      	bhi.n	8012e1a <__ssputs_r+0x6e>
 8012dc0:	898a      	ldrh	r2, [r1, #12]
 8012dc2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012dc6:	d026      	beq.n	8012e16 <__ssputs_r+0x6a>
 8012dc8:	6965      	ldr	r5, [r4, #20]
 8012dca:	6909      	ldr	r1, [r1, #16]
 8012dcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012dd0:	eba3 0901 	sub.w	r9, r3, r1
 8012dd4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012dd8:	1c7b      	adds	r3, r7, #1
 8012dda:	444b      	add	r3, r9
 8012ddc:	106d      	asrs	r5, r5, #1
 8012dde:	429d      	cmp	r5, r3
 8012de0:	bf38      	it	cc
 8012de2:	461d      	movcc	r5, r3
 8012de4:	0553      	lsls	r3, r2, #21
 8012de6:	d527      	bpl.n	8012e38 <__ssputs_r+0x8c>
 8012de8:	4629      	mov	r1, r5
 8012dea:	f000 f95f 	bl	80130ac <_malloc_r>
 8012dee:	4606      	mov	r6, r0
 8012df0:	b360      	cbz	r0, 8012e4c <__ssputs_r+0xa0>
 8012df2:	6921      	ldr	r1, [r4, #16]
 8012df4:	464a      	mov	r2, r9
 8012df6:	f7ff f951 	bl	801209c <memcpy>
 8012dfa:	89a3      	ldrh	r3, [r4, #12]
 8012dfc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012e00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e04:	81a3      	strh	r3, [r4, #12]
 8012e06:	6126      	str	r6, [r4, #16]
 8012e08:	6165      	str	r5, [r4, #20]
 8012e0a:	444e      	add	r6, r9
 8012e0c:	eba5 0509 	sub.w	r5, r5, r9
 8012e10:	6026      	str	r6, [r4, #0]
 8012e12:	60a5      	str	r5, [r4, #8]
 8012e14:	463e      	mov	r6, r7
 8012e16:	42be      	cmp	r6, r7
 8012e18:	d900      	bls.n	8012e1c <__ssputs_r+0x70>
 8012e1a:	463e      	mov	r6, r7
 8012e1c:	6820      	ldr	r0, [r4, #0]
 8012e1e:	4632      	mov	r2, r6
 8012e20:	4641      	mov	r1, r8
 8012e22:	f000 fe6b 	bl	8013afc <memmove>
 8012e26:	68a3      	ldr	r3, [r4, #8]
 8012e28:	1b9b      	subs	r3, r3, r6
 8012e2a:	60a3      	str	r3, [r4, #8]
 8012e2c:	6823      	ldr	r3, [r4, #0]
 8012e2e:	4433      	add	r3, r6
 8012e30:	6023      	str	r3, [r4, #0]
 8012e32:	2000      	movs	r0, #0
 8012e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e38:	462a      	mov	r2, r5
 8012e3a:	f000 fe30 	bl	8013a9e <_realloc_r>
 8012e3e:	4606      	mov	r6, r0
 8012e40:	2800      	cmp	r0, #0
 8012e42:	d1e0      	bne.n	8012e06 <__ssputs_r+0x5a>
 8012e44:	6921      	ldr	r1, [r4, #16]
 8012e46:	4650      	mov	r0, sl
 8012e48:	f000 fefc 	bl	8013c44 <_free_r>
 8012e4c:	230c      	movs	r3, #12
 8012e4e:	f8ca 3000 	str.w	r3, [sl]
 8012e52:	89a3      	ldrh	r3, [r4, #12]
 8012e54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e58:	81a3      	strh	r3, [r4, #12]
 8012e5a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e5e:	e7e9      	b.n	8012e34 <__ssputs_r+0x88>

08012e60 <_svfiprintf_r>:
 8012e60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e64:	4698      	mov	r8, r3
 8012e66:	898b      	ldrh	r3, [r1, #12]
 8012e68:	061b      	lsls	r3, r3, #24
 8012e6a:	b09d      	sub	sp, #116	; 0x74
 8012e6c:	4607      	mov	r7, r0
 8012e6e:	460d      	mov	r5, r1
 8012e70:	4614      	mov	r4, r2
 8012e72:	d50e      	bpl.n	8012e92 <_svfiprintf_r+0x32>
 8012e74:	690b      	ldr	r3, [r1, #16]
 8012e76:	b963      	cbnz	r3, 8012e92 <_svfiprintf_r+0x32>
 8012e78:	2140      	movs	r1, #64	; 0x40
 8012e7a:	f000 f917 	bl	80130ac <_malloc_r>
 8012e7e:	6028      	str	r0, [r5, #0]
 8012e80:	6128      	str	r0, [r5, #16]
 8012e82:	b920      	cbnz	r0, 8012e8e <_svfiprintf_r+0x2e>
 8012e84:	230c      	movs	r3, #12
 8012e86:	603b      	str	r3, [r7, #0]
 8012e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e8c:	e0d0      	b.n	8013030 <_svfiprintf_r+0x1d0>
 8012e8e:	2340      	movs	r3, #64	; 0x40
 8012e90:	616b      	str	r3, [r5, #20]
 8012e92:	2300      	movs	r3, #0
 8012e94:	9309      	str	r3, [sp, #36]	; 0x24
 8012e96:	2320      	movs	r3, #32
 8012e98:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012e9c:	f8cd 800c 	str.w	r8, [sp, #12]
 8012ea0:	2330      	movs	r3, #48	; 0x30
 8012ea2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013048 <_svfiprintf_r+0x1e8>
 8012ea6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012eaa:	f04f 0901 	mov.w	r9, #1
 8012eae:	4623      	mov	r3, r4
 8012eb0:	469a      	mov	sl, r3
 8012eb2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012eb6:	b10a      	cbz	r2, 8012ebc <_svfiprintf_r+0x5c>
 8012eb8:	2a25      	cmp	r2, #37	; 0x25
 8012eba:	d1f9      	bne.n	8012eb0 <_svfiprintf_r+0x50>
 8012ebc:	ebba 0b04 	subs.w	fp, sl, r4
 8012ec0:	d00b      	beq.n	8012eda <_svfiprintf_r+0x7a>
 8012ec2:	465b      	mov	r3, fp
 8012ec4:	4622      	mov	r2, r4
 8012ec6:	4629      	mov	r1, r5
 8012ec8:	4638      	mov	r0, r7
 8012eca:	f7ff ff6f 	bl	8012dac <__ssputs_r>
 8012ece:	3001      	adds	r0, #1
 8012ed0:	f000 80a9 	beq.w	8013026 <_svfiprintf_r+0x1c6>
 8012ed4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012ed6:	445a      	add	r2, fp
 8012ed8:	9209      	str	r2, [sp, #36]	; 0x24
 8012eda:	f89a 3000 	ldrb.w	r3, [sl]
 8012ede:	2b00      	cmp	r3, #0
 8012ee0:	f000 80a1 	beq.w	8013026 <_svfiprintf_r+0x1c6>
 8012ee4:	2300      	movs	r3, #0
 8012ee6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012eea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012eee:	f10a 0a01 	add.w	sl, sl, #1
 8012ef2:	9304      	str	r3, [sp, #16]
 8012ef4:	9307      	str	r3, [sp, #28]
 8012ef6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012efa:	931a      	str	r3, [sp, #104]	; 0x68
 8012efc:	4654      	mov	r4, sl
 8012efe:	2205      	movs	r2, #5
 8012f00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f04:	4850      	ldr	r0, [pc, #320]	; (8013048 <_svfiprintf_r+0x1e8>)
 8012f06:	f7ed f963 	bl	80001d0 <memchr>
 8012f0a:	9a04      	ldr	r2, [sp, #16]
 8012f0c:	b9d8      	cbnz	r0, 8012f46 <_svfiprintf_r+0xe6>
 8012f0e:	06d0      	lsls	r0, r2, #27
 8012f10:	bf44      	itt	mi
 8012f12:	2320      	movmi	r3, #32
 8012f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f18:	0711      	lsls	r1, r2, #28
 8012f1a:	bf44      	itt	mi
 8012f1c:	232b      	movmi	r3, #43	; 0x2b
 8012f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f22:	f89a 3000 	ldrb.w	r3, [sl]
 8012f26:	2b2a      	cmp	r3, #42	; 0x2a
 8012f28:	d015      	beq.n	8012f56 <_svfiprintf_r+0xf6>
 8012f2a:	9a07      	ldr	r2, [sp, #28]
 8012f2c:	4654      	mov	r4, sl
 8012f2e:	2000      	movs	r0, #0
 8012f30:	f04f 0c0a 	mov.w	ip, #10
 8012f34:	4621      	mov	r1, r4
 8012f36:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f3a:	3b30      	subs	r3, #48	; 0x30
 8012f3c:	2b09      	cmp	r3, #9
 8012f3e:	d94d      	bls.n	8012fdc <_svfiprintf_r+0x17c>
 8012f40:	b1b0      	cbz	r0, 8012f70 <_svfiprintf_r+0x110>
 8012f42:	9207      	str	r2, [sp, #28]
 8012f44:	e014      	b.n	8012f70 <_svfiprintf_r+0x110>
 8012f46:	eba0 0308 	sub.w	r3, r0, r8
 8012f4a:	fa09 f303 	lsl.w	r3, r9, r3
 8012f4e:	4313      	orrs	r3, r2
 8012f50:	9304      	str	r3, [sp, #16]
 8012f52:	46a2      	mov	sl, r4
 8012f54:	e7d2      	b.n	8012efc <_svfiprintf_r+0x9c>
 8012f56:	9b03      	ldr	r3, [sp, #12]
 8012f58:	1d19      	adds	r1, r3, #4
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	9103      	str	r1, [sp, #12]
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	bfbb      	ittet	lt
 8012f62:	425b      	neglt	r3, r3
 8012f64:	f042 0202 	orrlt.w	r2, r2, #2
 8012f68:	9307      	strge	r3, [sp, #28]
 8012f6a:	9307      	strlt	r3, [sp, #28]
 8012f6c:	bfb8      	it	lt
 8012f6e:	9204      	strlt	r2, [sp, #16]
 8012f70:	7823      	ldrb	r3, [r4, #0]
 8012f72:	2b2e      	cmp	r3, #46	; 0x2e
 8012f74:	d10c      	bne.n	8012f90 <_svfiprintf_r+0x130>
 8012f76:	7863      	ldrb	r3, [r4, #1]
 8012f78:	2b2a      	cmp	r3, #42	; 0x2a
 8012f7a:	d134      	bne.n	8012fe6 <_svfiprintf_r+0x186>
 8012f7c:	9b03      	ldr	r3, [sp, #12]
 8012f7e:	1d1a      	adds	r2, r3, #4
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	9203      	str	r2, [sp, #12]
 8012f84:	2b00      	cmp	r3, #0
 8012f86:	bfb8      	it	lt
 8012f88:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012f8c:	3402      	adds	r4, #2
 8012f8e:	9305      	str	r3, [sp, #20]
 8012f90:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013058 <_svfiprintf_r+0x1f8>
 8012f94:	7821      	ldrb	r1, [r4, #0]
 8012f96:	2203      	movs	r2, #3
 8012f98:	4650      	mov	r0, sl
 8012f9a:	f7ed f919 	bl	80001d0 <memchr>
 8012f9e:	b138      	cbz	r0, 8012fb0 <_svfiprintf_r+0x150>
 8012fa0:	9b04      	ldr	r3, [sp, #16]
 8012fa2:	eba0 000a 	sub.w	r0, r0, sl
 8012fa6:	2240      	movs	r2, #64	; 0x40
 8012fa8:	4082      	lsls	r2, r0
 8012faa:	4313      	orrs	r3, r2
 8012fac:	3401      	adds	r4, #1
 8012fae:	9304      	str	r3, [sp, #16]
 8012fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012fb4:	4825      	ldr	r0, [pc, #148]	; (801304c <_svfiprintf_r+0x1ec>)
 8012fb6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8012fba:	2206      	movs	r2, #6
 8012fbc:	f7ed f908 	bl	80001d0 <memchr>
 8012fc0:	2800      	cmp	r0, #0
 8012fc2:	d038      	beq.n	8013036 <_svfiprintf_r+0x1d6>
 8012fc4:	4b22      	ldr	r3, [pc, #136]	; (8013050 <_svfiprintf_r+0x1f0>)
 8012fc6:	bb1b      	cbnz	r3, 8013010 <_svfiprintf_r+0x1b0>
 8012fc8:	9b03      	ldr	r3, [sp, #12]
 8012fca:	3307      	adds	r3, #7
 8012fcc:	f023 0307 	bic.w	r3, r3, #7
 8012fd0:	3308      	adds	r3, #8
 8012fd2:	9303      	str	r3, [sp, #12]
 8012fd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012fd6:	4433      	add	r3, r6
 8012fd8:	9309      	str	r3, [sp, #36]	; 0x24
 8012fda:	e768      	b.n	8012eae <_svfiprintf_r+0x4e>
 8012fdc:	fb0c 3202 	mla	r2, ip, r2, r3
 8012fe0:	460c      	mov	r4, r1
 8012fe2:	2001      	movs	r0, #1
 8012fe4:	e7a6      	b.n	8012f34 <_svfiprintf_r+0xd4>
 8012fe6:	2300      	movs	r3, #0
 8012fe8:	3401      	adds	r4, #1
 8012fea:	9305      	str	r3, [sp, #20]
 8012fec:	4619      	mov	r1, r3
 8012fee:	f04f 0c0a 	mov.w	ip, #10
 8012ff2:	4620      	mov	r0, r4
 8012ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012ff8:	3a30      	subs	r2, #48	; 0x30
 8012ffa:	2a09      	cmp	r2, #9
 8012ffc:	d903      	bls.n	8013006 <_svfiprintf_r+0x1a6>
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d0c6      	beq.n	8012f90 <_svfiprintf_r+0x130>
 8013002:	9105      	str	r1, [sp, #20]
 8013004:	e7c4      	b.n	8012f90 <_svfiprintf_r+0x130>
 8013006:	fb0c 2101 	mla	r1, ip, r1, r2
 801300a:	4604      	mov	r4, r0
 801300c:	2301      	movs	r3, #1
 801300e:	e7f0      	b.n	8012ff2 <_svfiprintf_r+0x192>
 8013010:	ab03      	add	r3, sp, #12
 8013012:	9300      	str	r3, [sp, #0]
 8013014:	462a      	mov	r2, r5
 8013016:	4b0f      	ldr	r3, [pc, #60]	; (8013054 <_svfiprintf_r+0x1f4>)
 8013018:	a904      	add	r1, sp, #16
 801301a:	4638      	mov	r0, r7
 801301c:	f7fe fb70 	bl	8011700 <_printf_float>
 8013020:	1c42      	adds	r2, r0, #1
 8013022:	4606      	mov	r6, r0
 8013024:	d1d6      	bne.n	8012fd4 <_svfiprintf_r+0x174>
 8013026:	89ab      	ldrh	r3, [r5, #12]
 8013028:	065b      	lsls	r3, r3, #25
 801302a:	f53f af2d 	bmi.w	8012e88 <_svfiprintf_r+0x28>
 801302e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013030:	b01d      	add	sp, #116	; 0x74
 8013032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013036:	ab03      	add	r3, sp, #12
 8013038:	9300      	str	r3, [sp, #0]
 801303a:	462a      	mov	r2, r5
 801303c:	4b05      	ldr	r3, [pc, #20]	; (8013054 <_svfiprintf_r+0x1f4>)
 801303e:	a904      	add	r1, sp, #16
 8013040:	4638      	mov	r0, r7
 8013042:	f7fe fe01 	bl	8011c48 <_printf_i>
 8013046:	e7eb      	b.n	8013020 <_svfiprintf_r+0x1c0>
 8013048:	08015905 	.word	0x08015905
 801304c:	0801590f 	.word	0x0801590f
 8013050:	08011701 	.word	0x08011701
 8013054:	08012dad 	.word	0x08012dad
 8013058:	0801590b 	.word	0x0801590b

0801305c <malloc>:
 801305c:	4b02      	ldr	r3, [pc, #8]	; (8013068 <malloc+0xc>)
 801305e:	4601      	mov	r1, r0
 8013060:	6818      	ldr	r0, [r3, #0]
 8013062:	f000 b823 	b.w	80130ac <_malloc_r>
 8013066:	bf00      	nop
 8013068:	20000178 	.word	0x20000178

0801306c <sbrk_aligned>:
 801306c:	b570      	push	{r4, r5, r6, lr}
 801306e:	4e0e      	ldr	r6, [pc, #56]	; (80130a8 <sbrk_aligned+0x3c>)
 8013070:	460c      	mov	r4, r1
 8013072:	6831      	ldr	r1, [r6, #0]
 8013074:	4605      	mov	r5, r0
 8013076:	b911      	cbnz	r1, 801307e <sbrk_aligned+0x12>
 8013078:	f000 fd8e 	bl	8013b98 <_sbrk_r>
 801307c:	6030      	str	r0, [r6, #0]
 801307e:	4621      	mov	r1, r4
 8013080:	4628      	mov	r0, r5
 8013082:	f000 fd89 	bl	8013b98 <_sbrk_r>
 8013086:	1c43      	adds	r3, r0, #1
 8013088:	d00a      	beq.n	80130a0 <sbrk_aligned+0x34>
 801308a:	1cc4      	adds	r4, r0, #3
 801308c:	f024 0403 	bic.w	r4, r4, #3
 8013090:	42a0      	cmp	r0, r4
 8013092:	d007      	beq.n	80130a4 <sbrk_aligned+0x38>
 8013094:	1a21      	subs	r1, r4, r0
 8013096:	4628      	mov	r0, r5
 8013098:	f000 fd7e 	bl	8013b98 <_sbrk_r>
 801309c:	3001      	adds	r0, #1
 801309e:	d101      	bne.n	80130a4 <sbrk_aligned+0x38>
 80130a0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80130a4:	4620      	mov	r0, r4
 80130a6:	bd70      	pop	{r4, r5, r6, pc}
 80130a8:	20002848 	.word	0x20002848

080130ac <_malloc_r>:
 80130ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80130b0:	1ccd      	adds	r5, r1, #3
 80130b2:	f025 0503 	bic.w	r5, r5, #3
 80130b6:	3508      	adds	r5, #8
 80130b8:	2d0c      	cmp	r5, #12
 80130ba:	bf38      	it	cc
 80130bc:	250c      	movcc	r5, #12
 80130be:	2d00      	cmp	r5, #0
 80130c0:	4607      	mov	r7, r0
 80130c2:	db01      	blt.n	80130c8 <_malloc_r+0x1c>
 80130c4:	42a9      	cmp	r1, r5
 80130c6:	d905      	bls.n	80130d4 <_malloc_r+0x28>
 80130c8:	230c      	movs	r3, #12
 80130ca:	603b      	str	r3, [r7, #0]
 80130cc:	2600      	movs	r6, #0
 80130ce:	4630      	mov	r0, r6
 80130d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80130d4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80131a8 <_malloc_r+0xfc>
 80130d8:	f000 f916 	bl	8013308 <__malloc_lock>
 80130dc:	f8d8 3000 	ldr.w	r3, [r8]
 80130e0:	461c      	mov	r4, r3
 80130e2:	bb5c      	cbnz	r4, 801313c <_malloc_r+0x90>
 80130e4:	4629      	mov	r1, r5
 80130e6:	4638      	mov	r0, r7
 80130e8:	f7ff ffc0 	bl	801306c <sbrk_aligned>
 80130ec:	1c43      	adds	r3, r0, #1
 80130ee:	4604      	mov	r4, r0
 80130f0:	d155      	bne.n	801319e <_malloc_r+0xf2>
 80130f2:	f8d8 4000 	ldr.w	r4, [r8]
 80130f6:	4626      	mov	r6, r4
 80130f8:	2e00      	cmp	r6, #0
 80130fa:	d145      	bne.n	8013188 <_malloc_r+0xdc>
 80130fc:	2c00      	cmp	r4, #0
 80130fe:	d048      	beq.n	8013192 <_malloc_r+0xe6>
 8013100:	6823      	ldr	r3, [r4, #0]
 8013102:	4631      	mov	r1, r6
 8013104:	4638      	mov	r0, r7
 8013106:	eb04 0903 	add.w	r9, r4, r3
 801310a:	f000 fd45 	bl	8013b98 <_sbrk_r>
 801310e:	4581      	cmp	r9, r0
 8013110:	d13f      	bne.n	8013192 <_malloc_r+0xe6>
 8013112:	6821      	ldr	r1, [r4, #0]
 8013114:	1a6d      	subs	r5, r5, r1
 8013116:	4629      	mov	r1, r5
 8013118:	4638      	mov	r0, r7
 801311a:	f7ff ffa7 	bl	801306c <sbrk_aligned>
 801311e:	3001      	adds	r0, #1
 8013120:	d037      	beq.n	8013192 <_malloc_r+0xe6>
 8013122:	6823      	ldr	r3, [r4, #0]
 8013124:	442b      	add	r3, r5
 8013126:	6023      	str	r3, [r4, #0]
 8013128:	f8d8 3000 	ldr.w	r3, [r8]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d038      	beq.n	80131a2 <_malloc_r+0xf6>
 8013130:	685a      	ldr	r2, [r3, #4]
 8013132:	42a2      	cmp	r2, r4
 8013134:	d12b      	bne.n	801318e <_malloc_r+0xe2>
 8013136:	2200      	movs	r2, #0
 8013138:	605a      	str	r2, [r3, #4]
 801313a:	e00f      	b.n	801315c <_malloc_r+0xb0>
 801313c:	6822      	ldr	r2, [r4, #0]
 801313e:	1b52      	subs	r2, r2, r5
 8013140:	d41f      	bmi.n	8013182 <_malloc_r+0xd6>
 8013142:	2a0b      	cmp	r2, #11
 8013144:	d917      	bls.n	8013176 <_malloc_r+0xca>
 8013146:	1961      	adds	r1, r4, r5
 8013148:	42a3      	cmp	r3, r4
 801314a:	6025      	str	r5, [r4, #0]
 801314c:	bf18      	it	ne
 801314e:	6059      	strne	r1, [r3, #4]
 8013150:	6863      	ldr	r3, [r4, #4]
 8013152:	bf08      	it	eq
 8013154:	f8c8 1000 	streq.w	r1, [r8]
 8013158:	5162      	str	r2, [r4, r5]
 801315a:	604b      	str	r3, [r1, #4]
 801315c:	4638      	mov	r0, r7
 801315e:	f104 060b 	add.w	r6, r4, #11
 8013162:	f000 f8d7 	bl	8013314 <__malloc_unlock>
 8013166:	f026 0607 	bic.w	r6, r6, #7
 801316a:	1d23      	adds	r3, r4, #4
 801316c:	1af2      	subs	r2, r6, r3
 801316e:	d0ae      	beq.n	80130ce <_malloc_r+0x22>
 8013170:	1b9b      	subs	r3, r3, r6
 8013172:	50a3      	str	r3, [r4, r2]
 8013174:	e7ab      	b.n	80130ce <_malloc_r+0x22>
 8013176:	42a3      	cmp	r3, r4
 8013178:	6862      	ldr	r2, [r4, #4]
 801317a:	d1dd      	bne.n	8013138 <_malloc_r+0x8c>
 801317c:	f8c8 2000 	str.w	r2, [r8]
 8013180:	e7ec      	b.n	801315c <_malloc_r+0xb0>
 8013182:	4623      	mov	r3, r4
 8013184:	6864      	ldr	r4, [r4, #4]
 8013186:	e7ac      	b.n	80130e2 <_malloc_r+0x36>
 8013188:	4634      	mov	r4, r6
 801318a:	6876      	ldr	r6, [r6, #4]
 801318c:	e7b4      	b.n	80130f8 <_malloc_r+0x4c>
 801318e:	4613      	mov	r3, r2
 8013190:	e7cc      	b.n	801312c <_malloc_r+0x80>
 8013192:	230c      	movs	r3, #12
 8013194:	603b      	str	r3, [r7, #0]
 8013196:	4638      	mov	r0, r7
 8013198:	f000 f8bc 	bl	8013314 <__malloc_unlock>
 801319c:	e797      	b.n	80130ce <_malloc_r+0x22>
 801319e:	6025      	str	r5, [r4, #0]
 80131a0:	e7dc      	b.n	801315c <_malloc_r+0xb0>
 80131a2:	605b      	str	r3, [r3, #4]
 80131a4:	deff      	udf	#255	; 0xff
 80131a6:	bf00      	nop
 80131a8:	20002844 	.word	0x20002844

080131ac <__sflush_r>:
 80131ac:	898a      	ldrh	r2, [r1, #12]
 80131ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80131b2:	4605      	mov	r5, r0
 80131b4:	0710      	lsls	r0, r2, #28
 80131b6:	460c      	mov	r4, r1
 80131b8:	d458      	bmi.n	801326c <__sflush_r+0xc0>
 80131ba:	684b      	ldr	r3, [r1, #4]
 80131bc:	2b00      	cmp	r3, #0
 80131be:	dc05      	bgt.n	80131cc <__sflush_r+0x20>
 80131c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	dc02      	bgt.n	80131cc <__sflush_r+0x20>
 80131c6:	2000      	movs	r0, #0
 80131c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80131cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80131ce:	2e00      	cmp	r6, #0
 80131d0:	d0f9      	beq.n	80131c6 <__sflush_r+0x1a>
 80131d2:	2300      	movs	r3, #0
 80131d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80131d8:	682f      	ldr	r7, [r5, #0]
 80131da:	6a21      	ldr	r1, [r4, #32]
 80131dc:	602b      	str	r3, [r5, #0]
 80131de:	d032      	beq.n	8013246 <__sflush_r+0x9a>
 80131e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80131e2:	89a3      	ldrh	r3, [r4, #12]
 80131e4:	075a      	lsls	r2, r3, #29
 80131e6:	d505      	bpl.n	80131f4 <__sflush_r+0x48>
 80131e8:	6863      	ldr	r3, [r4, #4]
 80131ea:	1ac0      	subs	r0, r0, r3
 80131ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80131ee:	b10b      	cbz	r3, 80131f4 <__sflush_r+0x48>
 80131f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80131f2:	1ac0      	subs	r0, r0, r3
 80131f4:	2300      	movs	r3, #0
 80131f6:	4602      	mov	r2, r0
 80131f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80131fa:	6a21      	ldr	r1, [r4, #32]
 80131fc:	4628      	mov	r0, r5
 80131fe:	47b0      	blx	r6
 8013200:	1c43      	adds	r3, r0, #1
 8013202:	89a3      	ldrh	r3, [r4, #12]
 8013204:	d106      	bne.n	8013214 <__sflush_r+0x68>
 8013206:	6829      	ldr	r1, [r5, #0]
 8013208:	291d      	cmp	r1, #29
 801320a:	d82b      	bhi.n	8013264 <__sflush_r+0xb8>
 801320c:	4a29      	ldr	r2, [pc, #164]	; (80132b4 <__sflush_r+0x108>)
 801320e:	410a      	asrs	r2, r1
 8013210:	07d6      	lsls	r6, r2, #31
 8013212:	d427      	bmi.n	8013264 <__sflush_r+0xb8>
 8013214:	2200      	movs	r2, #0
 8013216:	6062      	str	r2, [r4, #4]
 8013218:	04d9      	lsls	r1, r3, #19
 801321a:	6922      	ldr	r2, [r4, #16]
 801321c:	6022      	str	r2, [r4, #0]
 801321e:	d504      	bpl.n	801322a <__sflush_r+0x7e>
 8013220:	1c42      	adds	r2, r0, #1
 8013222:	d101      	bne.n	8013228 <__sflush_r+0x7c>
 8013224:	682b      	ldr	r3, [r5, #0]
 8013226:	b903      	cbnz	r3, 801322a <__sflush_r+0x7e>
 8013228:	6560      	str	r0, [r4, #84]	; 0x54
 801322a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801322c:	602f      	str	r7, [r5, #0]
 801322e:	2900      	cmp	r1, #0
 8013230:	d0c9      	beq.n	80131c6 <__sflush_r+0x1a>
 8013232:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013236:	4299      	cmp	r1, r3
 8013238:	d002      	beq.n	8013240 <__sflush_r+0x94>
 801323a:	4628      	mov	r0, r5
 801323c:	f000 fd02 	bl	8013c44 <_free_r>
 8013240:	2000      	movs	r0, #0
 8013242:	6360      	str	r0, [r4, #52]	; 0x34
 8013244:	e7c0      	b.n	80131c8 <__sflush_r+0x1c>
 8013246:	2301      	movs	r3, #1
 8013248:	4628      	mov	r0, r5
 801324a:	47b0      	blx	r6
 801324c:	1c41      	adds	r1, r0, #1
 801324e:	d1c8      	bne.n	80131e2 <__sflush_r+0x36>
 8013250:	682b      	ldr	r3, [r5, #0]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d0c5      	beq.n	80131e2 <__sflush_r+0x36>
 8013256:	2b1d      	cmp	r3, #29
 8013258:	d001      	beq.n	801325e <__sflush_r+0xb2>
 801325a:	2b16      	cmp	r3, #22
 801325c:	d101      	bne.n	8013262 <__sflush_r+0xb6>
 801325e:	602f      	str	r7, [r5, #0]
 8013260:	e7b1      	b.n	80131c6 <__sflush_r+0x1a>
 8013262:	89a3      	ldrh	r3, [r4, #12]
 8013264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013268:	81a3      	strh	r3, [r4, #12]
 801326a:	e7ad      	b.n	80131c8 <__sflush_r+0x1c>
 801326c:	690f      	ldr	r7, [r1, #16]
 801326e:	2f00      	cmp	r7, #0
 8013270:	d0a9      	beq.n	80131c6 <__sflush_r+0x1a>
 8013272:	0793      	lsls	r3, r2, #30
 8013274:	680e      	ldr	r6, [r1, #0]
 8013276:	bf08      	it	eq
 8013278:	694b      	ldreq	r3, [r1, #20]
 801327a:	600f      	str	r7, [r1, #0]
 801327c:	bf18      	it	ne
 801327e:	2300      	movne	r3, #0
 8013280:	eba6 0807 	sub.w	r8, r6, r7
 8013284:	608b      	str	r3, [r1, #8]
 8013286:	f1b8 0f00 	cmp.w	r8, #0
 801328a:	dd9c      	ble.n	80131c6 <__sflush_r+0x1a>
 801328c:	6a21      	ldr	r1, [r4, #32]
 801328e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013290:	4643      	mov	r3, r8
 8013292:	463a      	mov	r2, r7
 8013294:	4628      	mov	r0, r5
 8013296:	47b0      	blx	r6
 8013298:	2800      	cmp	r0, #0
 801329a:	dc06      	bgt.n	80132aa <__sflush_r+0xfe>
 801329c:	89a3      	ldrh	r3, [r4, #12]
 801329e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132a2:	81a3      	strh	r3, [r4, #12]
 80132a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80132a8:	e78e      	b.n	80131c8 <__sflush_r+0x1c>
 80132aa:	4407      	add	r7, r0
 80132ac:	eba8 0800 	sub.w	r8, r8, r0
 80132b0:	e7e9      	b.n	8013286 <__sflush_r+0xda>
 80132b2:	bf00      	nop
 80132b4:	dfbffffe 	.word	0xdfbffffe

080132b8 <_fflush_r>:
 80132b8:	b538      	push	{r3, r4, r5, lr}
 80132ba:	690b      	ldr	r3, [r1, #16]
 80132bc:	4605      	mov	r5, r0
 80132be:	460c      	mov	r4, r1
 80132c0:	b913      	cbnz	r3, 80132c8 <_fflush_r+0x10>
 80132c2:	2500      	movs	r5, #0
 80132c4:	4628      	mov	r0, r5
 80132c6:	bd38      	pop	{r3, r4, r5, pc}
 80132c8:	b118      	cbz	r0, 80132d2 <_fflush_r+0x1a>
 80132ca:	6a03      	ldr	r3, [r0, #32]
 80132cc:	b90b      	cbnz	r3, 80132d2 <_fflush_r+0x1a>
 80132ce:	f7fe fe77 	bl	8011fc0 <__sinit>
 80132d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80132d6:	2b00      	cmp	r3, #0
 80132d8:	d0f3      	beq.n	80132c2 <_fflush_r+0xa>
 80132da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80132dc:	07d0      	lsls	r0, r2, #31
 80132de:	d404      	bmi.n	80132ea <_fflush_r+0x32>
 80132e0:	0599      	lsls	r1, r3, #22
 80132e2:	d402      	bmi.n	80132ea <_fflush_r+0x32>
 80132e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80132e6:	f7fe fed7 	bl	8012098 <__retarget_lock_acquire_recursive>
 80132ea:	4628      	mov	r0, r5
 80132ec:	4621      	mov	r1, r4
 80132ee:	f7ff ff5d 	bl	80131ac <__sflush_r>
 80132f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80132f4:	07da      	lsls	r2, r3, #31
 80132f6:	4605      	mov	r5, r0
 80132f8:	d4e4      	bmi.n	80132c4 <_fflush_r+0xc>
 80132fa:	89a3      	ldrh	r3, [r4, #12]
 80132fc:	059b      	lsls	r3, r3, #22
 80132fe:	d4e1      	bmi.n	80132c4 <_fflush_r+0xc>
 8013300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013302:	f7fe feca 	bl	801209a <__retarget_lock_release_recursive>
 8013306:	e7dd      	b.n	80132c4 <_fflush_r+0xc>

08013308 <__malloc_lock>:
 8013308:	4801      	ldr	r0, [pc, #4]	; (8013310 <__malloc_lock+0x8>)
 801330a:	f7fe bec5 	b.w	8012098 <__retarget_lock_acquire_recursive>
 801330e:	bf00      	nop
 8013310:	20002840 	.word	0x20002840

08013314 <__malloc_unlock>:
 8013314:	4801      	ldr	r0, [pc, #4]	; (801331c <__malloc_unlock+0x8>)
 8013316:	f7fe bec0 	b.w	801209a <__retarget_lock_release_recursive>
 801331a:	bf00      	nop
 801331c:	20002840 	.word	0x20002840

08013320 <_Balloc>:
 8013320:	b570      	push	{r4, r5, r6, lr}
 8013322:	69c6      	ldr	r6, [r0, #28]
 8013324:	4604      	mov	r4, r0
 8013326:	460d      	mov	r5, r1
 8013328:	b976      	cbnz	r6, 8013348 <_Balloc+0x28>
 801332a:	2010      	movs	r0, #16
 801332c:	f7ff fe96 	bl	801305c <malloc>
 8013330:	4602      	mov	r2, r0
 8013332:	61e0      	str	r0, [r4, #28]
 8013334:	b920      	cbnz	r0, 8013340 <_Balloc+0x20>
 8013336:	4b18      	ldr	r3, [pc, #96]	; (8013398 <_Balloc+0x78>)
 8013338:	4818      	ldr	r0, [pc, #96]	; (801339c <_Balloc+0x7c>)
 801333a:	216b      	movs	r1, #107	; 0x6b
 801333c:	f000 fc4e 	bl	8013bdc <__assert_func>
 8013340:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013344:	6006      	str	r6, [r0, #0]
 8013346:	60c6      	str	r6, [r0, #12]
 8013348:	69e6      	ldr	r6, [r4, #28]
 801334a:	68f3      	ldr	r3, [r6, #12]
 801334c:	b183      	cbz	r3, 8013370 <_Balloc+0x50>
 801334e:	69e3      	ldr	r3, [r4, #28]
 8013350:	68db      	ldr	r3, [r3, #12]
 8013352:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013356:	b9b8      	cbnz	r0, 8013388 <_Balloc+0x68>
 8013358:	2101      	movs	r1, #1
 801335a:	fa01 f605 	lsl.w	r6, r1, r5
 801335e:	1d72      	adds	r2, r6, #5
 8013360:	0092      	lsls	r2, r2, #2
 8013362:	4620      	mov	r0, r4
 8013364:	f000 fc58 	bl	8013c18 <_calloc_r>
 8013368:	b160      	cbz	r0, 8013384 <_Balloc+0x64>
 801336a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801336e:	e00e      	b.n	801338e <_Balloc+0x6e>
 8013370:	2221      	movs	r2, #33	; 0x21
 8013372:	2104      	movs	r1, #4
 8013374:	4620      	mov	r0, r4
 8013376:	f000 fc4f 	bl	8013c18 <_calloc_r>
 801337a:	69e3      	ldr	r3, [r4, #28]
 801337c:	60f0      	str	r0, [r6, #12]
 801337e:	68db      	ldr	r3, [r3, #12]
 8013380:	2b00      	cmp	r3, #0
 8013382:	d1e4      	bne.n	801334e <_Balloc+0x2e>
 8013384:	2000      	movs	r0, #0
 8013386:	bd70      	pop	{r4, r5, r6, pc}
 8013388:	6802      	ldr	r2, [r0, #0]
 801338a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801338e:	2300      	movs	r3, #0
 8013390:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013394:	e7f7      	b.n	8013386 <_Balloc+0x66>
 8013396:	bf00      	nop
 8013398:	08015885 	.word	0x08015885
 801339c:	08015916 	.word	0x08015916

080133a0 <_Bfree>:
 80133a0:	b570      	push	{r4, r5, r6, lr}
 80133a2:	69c6      	ldr	r6, [r0, #28]
 80133a4:	4605      	mov	r5, r0
 80133a6:	460c      	mov	r4, r1
 80133a8:	b976      	cbnz	r6, 80133c8 <_Bfree+0x28>
 80133aa:	2010      	movs	r0, #16
 80133ac:	f7ff fe56 	bl	801305c <malloc>
 80133b0:	4602      	mov	r2, r0
 80133b2:	61e8      	str	r0, [r5, #28]
 80133b4:	b920      	cbnz	r0, 80133c0 <_Bfree+0x20>
 80133b6:	4b09      	ldr	r3, [pc, #36]	; (80133dc <_Bfree+0x3c>)
 80133b8:	4809      	ldr	r0, [pc, #36]	; (80133e0 <_Bfree+0x40>)
 80133ba:	218f      	movs	r1, #143	; 0x8f
 80133bc:	f000 fc0e 	bl	8013bdc <__assert_func>
 80133c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80133c4:	6006      	str	r6, [r0, #0]
 80133c6:	60c6      	str	r6, [r0, #12]
 80133c8:	b13c      	cbz	r4, 80133da <_Bfree+0x3a>
 80133ca:	69eb      	ldr	r3, [r5, #28]
 80133cc:	6862      	ldr	r2, [r4, #4]
 80133ce:	68db      	ldr	r3, [r3, #12]
 80133d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80133d4:	6021      	str	r1, [r4, #0]
 80133d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80133da:	bd70      	pop	{r4, r5, r6, pc}
 80133dc:	08015885 	.word	0x08015885
 80133e0:	08015916 	.word	0x08015916

080133e4 <__multadd>:
 80133e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80133e8:	690d      	ldr	r5, [r1, #16]
 80133ea:	4607      	mov	r7, r0
 80133ec:	460c      	mov	r4, r1
 80133ee:	461e      	mov	r6, r3
 80133f0:	f101 0c14 	add.w	ip, r1, #20
 80133f4:	2000      	movs	r0, #0
 80133f6:	f8dc 3000 	ldr.w	r3, [ip]
 80133fa:	b299      	uxth	r1, r3
 80133fc:	fb02 6101 	mla	r1, r2, r1, r6
 8013400:	0c1e      	lsrs	r6, r3, #16
 8013402:	0c0b      	lsrs	r3, r1, #16
 8013404:	fb02 3306 	mla	r3, r2, r6, r3
 8013408:	b289      	uxth	r1, r1
 801340a:	3001      	adds	r0, #1
 801340c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013410:	4285      	cmp	r5, r0
 8013412:	f84c 1b04 	str.w	r1, [ip], #4
 8013416:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801341a:	dcec      	bgt.n	80133f6 <__multadd+0x12>
 801341c:	b30e      	cbz	r6, 8013462 <__multadd+0x7e>
 801341e:	68a3      	ldr	r3, [r4, #8]
 8013420:	42ab      	cmp	r3, r5
 8013422:	dc19      	bgt.n	8013458 <__multadd+0x74>
 8013424:	6861      	ldr	r1, [r4, #4]
 8013426:	4638      	mov	r0, r7
 8013428:	3101      	adds	r1, #1
 801342a:	f7ff ff79 	bl	8013320 <_Balloc>
 801342e:	4680      	mov	r8, r0
 8013430:	b928      	cbnz	r0, 801343e <__multadd+0x5a>
 8013432:	4602      	mov	r2, r0
 8013434:	4b0c      	ldr	r3, [pc, #48]	; (8013468 <__multadd+0x84>)
 8013436:	480d      	ldr	r0, [pc, #52]	; (801346c <__multadd+0x88>)
 8013438:	21ba      	movs	r1, #186	; 0xba
 801343a:	f000 fbcf 	bl	8013bdc <__assert_func>
 801343e:	6922      	ldr	r2, [r4, #16]
 8013440:	3202      	adds	r2, #2
 8013442:	f104 010c 	add.w	r1, r4, #12
 8013446:	0092      	lsls	r2, r2, #2
 8013448:	300c      	adds	r0, #12
 801344a:	f7fe fe27 	bl	801209c <memcpy>
 801344e:	4621      	mov	r1, r4
 8013450:	4638      	mov	r0, r7
 8013452:	f7ff ffa5 	bl	80133a0 <_Bfree>
 8013456:	4644      	mov	r4, r8
 8013458:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801345c:	3501      	adds	r5, #1
 801345e:	615e      	str	r6, [r3, #20]
 8013460:	6125      	str	r5, [r4, #16]
 8013462:	4620      	mov	r0, r4
 8013464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013468:	080158f4 	.word	0x080158f4
 801346c:	08015916 	.word	0x08015916

08013470 <__hi0bits>:
 8013470:	0c03      	lsrs	r3, r0, #16
 8013472:	041b      	lsls	r3, r3, #16
 8013474:	b9d3      	cbnz	r3, 80134ac <__hi0bits+0x3c>
 8013476:	0400      	lsls	r0, r0, #16
 8013478:	2310      	movs	r3, #16
 801347a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801347e:	bf04      	itt	eq
 8013480:	0200      	lsleq	r0, r0, #8
 8013482:	3308      	addeq	r3, #8
 8013484:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013488:	bf04      	itt	eq
 801348a:	0100      	lsleq	r0, r0, #4
 801348c:	3304      	addeq	r3, #4
 801348e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013492:	bf04      	itt	eq
 8013494:	0080      	lsleq	r0, r0, #2
 8013496:	3302      	addeq	r3, #2
 8013498:	2800      	cmp	r0, #0
 801349a:	db05      	blt.n	80134a8 <__hi0bits+0x38>
 801349c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80134a0:	f103 0301 	add.w	r3, r3, #1
 80134a4:	bf08      	it	eq
 80134a6:	2320      	moveq	r3, #32
 80134a8:	4618      	mov	r0, r3
 80134aa:	4770      	bx	lr
 80134ac:	2300      	movs	r3, #0
 80134ae:	e7e4      	b.n	801347a <__hi0bits+0xa>

080134b0 <__lo0bits>:
 80134b0:	6803      	ldr	r3, [r0, #0]
 80134b2:	f013 0207 	ands.w	r2, r3, #7
 80134b6:	d00c      	beq.n	80134d2 <__lo0bits+0x22>
 80134b8:	07d9      	lsls	r1, r3, #31
 80134ba:	d422      	bmi.n	8013502 <__lo0bits+0x52>
 80134bc:	079a      	lsls	r2, r3, #30
 80134be:	bf49      	itett	mi
 80134c0:	085b      	lsrmi	r3, r3, #1
 80134c2:	089b      	lsrpl	r3, r3, #2
 80134c4:	6003      	strmi	r3, [r0, #0]
 80134c6:	2201      	movmi	r2, #1
 80134c8:	bf5c      	itt	pl
 80134ca:	6003      	strpl	r3, [r0, #0]
 80134cc:	2202      	movpl	r2, #2
 80134ce:	4610      	mov	r0, r2
 80134d0:	4770      	bx	lr
 80134d2:	b299      	uxth	r1, r3
 80134d4:	b909      	cbnz	r1, 80134da <__lo0bits+0x2a>
 80134d6:	0c1b      	lsrs	r3, r3, #16
 80134d8:	2210      	movs	r2, #16
 80134da:	b2d9      	uxtb	r1, r3
 80134dc:	b909      	cbnz	r1, 80134e2 <__lo0bits+0x32>
 80134de:	3208      	adds	r2, #8
 80134e0:	0a1b      	lsrs	r3, r3, #8
 80134e2:	0719      	lsls	r1, r3, #28
 80134e4:	bf04      	itt	eq
 80134e6:	091b      	lsreq	r3, r3, #4
 80134e8:	3204      	addeq	r2, #4
 80134ea:	0799      	lsls	r1, r3, #30
 80134ec:	bf04      	itt	eq
 80134ee:	089b      	lsreq	r3, r3, #2
 80134f0:	3202      	addeq	r2, #2
 80134f2:	07d9      	lsls	r1, r3, #31
 80134f4:	d403      	bmi.n	80134fe <__lo0bits+0x4e>
 80134f6:	085b      	lsrs	r3, r3, #1
 80134f8:	f102 0201 	add.w	r2, r2, #1
 80134fc:	d003      	beq.n	8013506 <__lo0bits+0x56>
 80134fe:	6003      	str	r3, [r0, #0]
 8013500:	e7e5      	b.n	80134ce <__lo0bits+0x1e>
 8013502:	2200      	movs	r2, #0
 8013504:	e7e3      	b.n	80134ce <__lo0bits+0x1e>
 8013506:	2220      	movs	r2, #32
 8013508:	e7e1      	b.n	80134ce <__lo0bits+0x1e>
	...

0801350c <__i2b>:
 801350c:	b510      	push	{r4, lr}
 801350e:	460c      	mov	r4, r1
 8013510:	2101      	movs	r1, #1
 8013512:	f7ff ff05 	bl	8013320 <_Balloc>
 8013516:	4602      	mov	r2, r0
 8013518:	b928      	cbnz	r0, 8013526 <__i2b+0x1a>
 801351a:	4b05      	ldr	r3, [pc, #20]	; (8013530 <__i2b+0x24>)
 801351c:	4805      	ldr	r0, [pc, #20]	; (8013534 <__i2b+0x28>)
 801351e:	f240 1145 	movw	r1, #325	; 0x145
 8013522:	f000 fb5b 	bl	8013bdc <__assert_func>
 8013526:	2301      	movs	r3, #1
 8013528:	6144      	str	r4, [r0, #20]
 801352a:	6103      	str	r3, [r0, #16]
 801352c:	bd10      	pop	{r4, pc}
 801352e:	bf00      	nop
 8013530:	080158f4 	.word	0x080158f4
 8013534:	08015916 	.word	0x08015916

08013538 <__multiply>:
 8013538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801353c:	4691      	mov	r9, r2
 801353e:	690a      	ldr	r2, [r1, #16]
 8013540:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013544:	429a      	cmp	r2, r3
 8013546:	bfb8      	it	lt
 8013548:	460b      	movlt	r3, r1
 801354a:	460c      	mov	r4, r1
 801354c:	bfbc      	itt	lt
 801354e:	464c      	movlt	r4, r9
 8013550:	4699      	movlt	r9, r3
 8013552:	6927      	ldr	r7, [r4, #16]
 8013554:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013558:	68a3      	ldr	r3, [r4, #8]
 801355a:	6861      	ldr	r1, [r4, #4]
 801355c:	eb07 060a 	add.w	r6, r7, sl
 8013560:	42b3      	cmp	r3, r6
 8013562:	b085      	sub	sp, #20
 8013564:	bfb8      	it	lt
 8013566:	3101      	addlt	r1, #1
 8013568:	f7ff feda 	bl	8013320 <_Balloc>
 801356c:	b930      	cbnz	r0, 801357c <__multiply+0x44>
 801356e:	4602      	mov	r2, r0
 8013570:	4b44      	ldr	r3, [pc, #272]	; (8013684 <__multiply+0x14c>)
 8013572:	4845      	ldr	r0, [pc, #276]	; (8013688 <__multiply+0x150>)
 8013574:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8013578:	f000 fb30 	bl	8013bdc <__assert_func>
 801357c:	f100 0514 	add.w	r5, r0, #20
 8013580:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013584:	462b      	mov	r3, r5
 8013586:	2200      	movs	r2, #0
 8013588:	4543      	cmp	r3, r8
 801358a:	d321      	bcc.n	80135d0 <__multiply+0x98>
 801358c:	f104 0314 	add.w	r3, r4, #20
 8013590:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013594:	f109 0314 	add.w	r3, r9, #20
 8013598:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801359c:	9202      	str	r2, [sp, #8]
 801359e:	1b3a      	subs	r2, r7, r4
 80135a0:	3a15      	subs	r2, #21
 80135a2:	f022 0203 	bic.w	r2, r2, #3
 80135a6:	3204      	adds	r2, #4
 80135a8:	f104 0115 	add.w	r1, r4, #21
 80135ac:	428f      	cmp	r7, r1
 80135ae:	bf38      	it	cc
 80135b0:	2204      	movcc	r2, #4
 80135b2:	9201      	str	r2, [sp, #4]
 80135b4:	9a02      	ldr	r2, [sp, #8]
 80135b6:	9303      	str	r3, [sp, #12]
 80135b8:	429a      	cmp	r2, r3
 80135ba:	d80c      	bhi.n	80135d6 <__multiply+0x9e>
 80135bc:	2e00      	cmp	r6, #0
 80135be:	dd03      	ble.n	80135c8 <__multiply+0x90>
 80135c0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d05b      	beq.n	8013680 <__multiply+0x148>
 80135c8:	6106      	str	r6, [r0, #16]
 80135ca:	b005      	add	sp, #20
 80135cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80135d0:	f843 2b04 	str.w	r2, [r3], #4
 80135d4:	e7d8      	b.n	8013588 <__multiply+0x50>
 80135d6:	f8b3 a000 	ldrh.w	sl, [r3]
 80135da:	f1ba 0f00 	cmp.w	sl, #0
 80135de:	d024      	beq.n	801362a <__multiply+0xf2>
 80135e0:	f104 0e14 	add.w	lr, r4, #20
 80135e4:	46a9      	mov	r9, r5
 80135e6:	f04f 0c00 	mov.w	ip, #0
 80135ea:	f85e 2b04 	ldr.w	r2, [lr], #4
 80135ee:	f8d9 1000 	ldr.w	r1, [r9]
 80135f2:	fa1f fb82 	uxth.w	fp, r2
 80135f6:	b289      	uxth	r1, r1
 80135f8:	fb0a 110b 	mla	r1, sl, fp, r1
 80135fc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013600:	f8d9 2000 	ldr.w	r2, [r9]
 8013604:	4461      	add	r1, ip
 8013606:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801360a:	fb0a c20b 	mla	r2, sl, fp, ip
 801360e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013612:	b289      	uxth	r1, r1
 8013614:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013618:	4577      	cmp	r7, lr
 801361a:	f849 1b04 	str.w	r1, [r9], #4
 801361e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013622:	d8e2      	bhi.n	80135ea <__multiply+0xb2>
 8013624:	9a01      	ldr	r2, [sp, #4]
 8013626:	f845 c002 	str.w	ip, [r5, r2]
 801362a:	9a03      	ldr	r2, [sp, #12]
 801362c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013630:	3304      	adds	r3, #4
 8013632:	f1b9 0f00 	cmp.w	r9, #0
 8013636:	d021      	beq.n	801367c <__multiply+0x144>
 8013638:	6829      	ldr	r1, [r5, #0]
 801363a:	f104 0c14 	add.w	ip, r4, #20
 801363e:	46ae      	mov	lr, r5
 8013640:	f04f 0a00 	mov.w	sl, #0
 8013644:	f8bc b000 	ldrh.w	fp, [ip]
 8013648:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801364c:	fb09 220b 	mla	r2, r9, fp, r2
 8013650:	4452      	add	r2, sl
 8013652:	b289      	uxth	r1, r1
 8013654:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013658:	f84e 1b04 	str.w	r1, [lr], #4
 801365c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013660:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013664:	f8be 1000 	ldrh.w	r1, [lr]
 8013668:	fb09 110a 	mla	r1, r9, sl, r1
 801366c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8013670:	4567      	cmp	r7, ip
 8013672:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013676:	d8e5      	bhi.n	8013644 <__multiply+0x10c>
 8013678:	9a01      	ldr	r2, [sp, #4]
 801367a:	50a9      	str	r1, [r5, r2]
 801367c:	3504      	adds	r5, #4
 801367e:	e799      	b.n	80135b4 <__multiply+0x7c>
 8013680:	3e01      	subs	r6, #1
 8013682:	e79b      	b.n	80135bc <__multiply+0x84>
 8013684:	080158f4 	.word	0x080158f4
 8013688:	08015916 	.word	0x08015916

0801368c <__pow5mult>:
 801368c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013690:	4615      	mov	r5, r2
 8013692:	f012 0203 	ands.w	r2, r2, #3
 8013696:	4606      	mov	r6, r0
 8013698:	460f      	mov	r7, r1
 801369a:	d007      	beq.n	80136ac <__pow5mult+0x20>
 801369c:	4c25      	ldr	r4, [pc, #148]	; (8013734 <__pow5mult+0xa8>)
 801369e:	3a01      	subs	r2, #1
 80136a0:	2300      	movs	r3, #0
 80136a2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80136a6:	f7ff fe9d 	bl	80133e4 <__multadd>
 80136aa:	4607      	mov	r7, r0
 80136ac:	10ad      	asrs	r5, r5, #2
 80136ae:	d03d      	beq.n	801372c <__pow5mult+0xa0>
 80136b0:	69f4      	ldr	r4, [r6, #28]
 80136b2:	b97c      	cbnz	r4, 80136d4 <__pow5mult+0x48>
 80136b4:	2010      	movs	r0, #16
 80136b6:	f7ff fcd1 	bl	801305c <malloc>
 80136ba:	4602      	mov	r2, r0
 80136bc:	61f0      	str	r0, [r6, #28]
 80136be:	b928      	cbnz	r0, 80136cc <__pow5mult+0x40>
 80136c0:	4b1d      	ldr	r3, [pc, #116]	; (8013738 <__pow5mult+0xac>)
 80136c2:	481e      	ldr	r0, [pc, #120]	; (801373c <__pow5mult+0xb0>)
 80136c4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80136c8:	f000 fa88 	bl	8013bdc <__assert_func>
 80136cc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80136d0:	6004      	str	r4, [r0, #0]
 80136d2:	60c4      	str	r4, [r0, #12]
 80136d4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80136d8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80136dc:	b94c      	cbnz	r4, 80136f2 <__pow5mult+0x66>
 80136de:	f240 2171 	movw	r1, #625	; 0x271
 80136e2:	4630      	mov	r0, r6
 80136e4:	f7ff ff12 	bl	801350c <__i2b>
 80136e8:	2300      	movs	r3, #0
 80136ea:	f8c8 0008 	str.w	r0, [r8, #8]
 80136ee:	4604      	mov	r4, r0
 80136f0:	6003      	str	r3, [r0, #0]
 80136f2:	f04f 0900 	mov.w	r9, #0
 80136f6:	07eb      	lsls	r3, r5, #31
 80136f8:	d50a      	bpl.n	8013710 <__pow5mult+0x84>
 80136fa:	4639      	mov	r1, r7
 80136fc:	4622      	mov	r2, r4
 80136fe:	4630      	mov	r0, r6
 8013700:	f7ff ff1a 	bl	8013538 <__multiply>
 8013704:	4639      	mov	r1, r7
 8013706:	4680      	mov	r8, r0
 8013708:	4630      	mov	r0, r6
 801370a:	f7ff fe49 	bl	80133a0 <_Bfree>
 801370e:	4647      	mov	r7, r8
 8013710:	106d      	asrs	r5, r5, #1
 8013712:	d00b      	beq.n	801372c <__pow5mult+0xa0>
 8013714:	6820      	ldr	r0, [r4, #0]
 8013716:	b938      	cbnz	r0, 8013728 <__pow5mult+0x9c>
 8013718:	4622      	mov	r2, r4
 801371a:	4621      	mov	r1, r4
 801371c:	4630      	mov	r0, r6
 801371e:	f7ff ff0b 	bl	8013538 <__multiply>
 8013722:	6020      	str	r0, [r4, #0]
 8013724:	f8c0 9000 	str.w	r9, [r0]
 8013728:	4604      	mov	r4, r0
 801372a:	e7e4      	b.n	80136f6 <__pow5mult+0x6a>
 801372c:	4638      	mov	r0, r7
 801372e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013732:	bf00      	nop
 8013734:	08015a60 	.word	0x08015a60
 8013738:	08015885 	.word	0x08015885
 801373c:	08015916 	.word	0x08015916

08013740 <__lshift>:
 8013740:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013744:	460c      	mov	r4, r1
 8013746:	6849      	ldr	r1, [r1, #4]
 8013748:	6923      	ldr	r3, [r4, #16]
 801374a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801374e:	68a3      	ldr	r3, [r4, #8]
 8013750:	4607      	mov	r7, r0
 8013752:	4691      	mov	r9, r2
 8013754:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013758:	f108 0601 	add.w	r6, r8, #1
 801375c:	42b3      	cmp	r3, r6
 801375e:	db0b      	blt.n	8013778 <__lshift+0x38>
 8013760:	4638      	mov	r0, r7
 8013762:	f7ff fddd 	bl	8013320 <_Balloc>
 8013766:	4605      	mov	r5, r0
 8013768:	b948      	cbnz	r0, 801377e <__lshift+0x3e>
 801376a:	4602      	mov	r2, r0
 801376c:	4b28      	ldr	r3, [pc, #160]	; (8013810 <__lshift+0xd0>)
 801376e:	4829      	ldr	r0, [pc, #164]	; (8013814 <__lshift+0xd4>)
 8013770:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8013774:	f000 fa32 	bl	8013bdc <__assert_func>
 8013778:	3101      	adds	r1, #1
 801377a:	005b      	lsls	r3, r3, #1
 801377c:	e7ee      	b.n	801375c <__lshift+0x1c>
 801377e:	2300      	movs	r3, #0
 8013780:	f100 0114 	add.w	r1, r0, #20
 8013784:	f100 0210 	add.w	r2, r0, #16
 8013788:	4618      	mov	r0, r3
 801378a:	4553      	cmp	r3, sl
 801378c:	db33      	blt.n	80137f6 <__lshift+0xb6>
 801378e:	6920      	ldr	r0, [r4, #16]
 8013790:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013794:	f104 0314 	add.w	r3, r4, #20
 8013798:	f019 091f 	ands.w	r9, r9, #31
 801379c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80137a0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80137a4:	d02b      	beq.n	80137fe <__lshift+0xbe>
 80137a6:	f1c9 0e20 	rsb	lr, r9, #32
 80137aa:	468a      	mov	sl, r1
 80137ac:	2200      	movs	r2, #0
 80137ae:	6818      	ldr	r0, [r3, #0]
 80137b0:	fa00 f009 	lsl.w	r0, r0, r9
 80137b4:	4310      	orrs	r0, r2
 80137b6:	f84a 0b04 	str.w	r0, [sl], #4
 80137ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80137be:	459c      	cmp	ip, r3
 80137c0:	fa22 f20e 	lsr.w	r2, r2, lr
 80137c4:	d8f3      	bhi.n	80137ae <__lshift+0x6e>
 80137c6:	ebac 0304 	sub.w	r3, ip, r4
 80137ca:	3b15      	subs	r3, #21
 80137cc:	f023 0303 	bic.w	r3, r3, #3
 80137d0:	3304      	adds	r3, #4
 80137d2:	f104 0015 	add.w	r0, r4, #21
 80137d6:	4584      	cmp	ip, r0
 80137d8:	bf38      	it	cc
 80137da:	2304      	movcc	r3, #4
 80137dc:	50ca      	str	r2, [r1, r3]
 80137de:	b10a      	cbz	r2, 80137e4 <__lshift+0xa4>
 80137e0:	f108 0602 	add.w	r6, r8, #2
 80137e4:	3e01      	subs	r6, #1
 80137e6:	4638      	mov	r0, r7
 80137e8:	612e      	str	r6, [r5, #16]
 80137ea:	4621      	mov	r1, r4
 80137ec:	f7ff fdd8 	bl	80133a0 <_Bfree>
 80137f0:	4628      	mov	r0, r5
 80137f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80137f6:	f842 0f04 	str.w	r0, [r2, #4]!
 80137fa:	3301      	adds	r3, #1
 80137fc:	e7c5      	b.n	801378a <__lshift+0x4a>
 80137fe:	3904      	subs	r1, #4
 8013800:	f853 2b04 	ldr.w	r2, [r3], #4
 8013804:	f841 2f04 	str.w	r2, [r1, #4]!
 8013808:	459c      	cmp	ip, r3
 801380a:	d8f9      	bhi.n	8013800 <__lshift+0xc0>
 801380c:	e7ea      	b.n	80137e4 <__lshift+0xa4>
 801380e:	bf00      	nop
 8013810:	080158f4 	.word	0x080158f4
 8013814:	08015916 	.word	0x08015916

08013818 <__mcmp>:
 8013818:	b530      	push	{r4, r5, lr}
 801381a:	6902      	ldr	r2, [r0, #16]
 801381c:	690c      	ldr	r4, [r1, #16]
 801381e:	1b12      	subs	r2, r2, r4
 8013820:	d10e      	bne.n	8013840 <__mcmp+0x28>
 8013822:	f100 0314 	add.w	r3, r0, #20
 8013826:	3114      	adds	r1, #20
 8013828:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801382c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013830:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013834:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013838:	42a5      	cmp	r5, r4
 801383a:	d003      	beq.n	8013844 <__mcmp+0x2c>
 801383c:	d305      	bcc.n	801384a <__mcmp+0x32>
 801383e:	2201      	movs	r2, #1
 8013840:	4610      	mov	r0, r2
 8013842:	bd30      	pop	{r4, r5, pc}
 8013844:	4283      	cmp	r3, r0
 8013846:	d3f3      	bcc.n	8013830 <__mcmp+0x18>
 8013848:	e7fa      	b.n	8013840 <__mcmp+0x28>
 801384a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801384e:	e7f7      	b.n	8013840 <__mcmp+0x28>

08013850 <__mdiff>:
 8013850:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013854:	460c      	mov	r4, r1
 8013856:	4606      	mov	r6, r0
 8013858:	4611      	mov	r1, r2
 801385a:	4620      	mov	r0, r4
 801385c:	4690      	mov	r8, r2
 801385e:	f7ff ffdb 	bl	8013818 <__mcmp>
 8013862:	1e05      	subs	r5, r0, #0
 8013864:	d110      	bne.n	8013888 <__mdiff+0x38>
 8013866:	4629      	mov	r1, r5
 8013868:	4630      	mov	r0, r6
 801386a:	f7ff fd59 	bl	8013320 <_Balloc>
 801386e:	b930      	cbnz	r0, 801387e <__mdiff+0x2e>
 8013870:	4b3a      	ldr	r3, [pc, #232]	; (801395c <__mdiff+0x10c>)
 8013872:	4602      	mov	r2, r0
 8013874:	f240 2137 	movw	r1, #567	; 0x237
 8013878:	4839      	ldr	r0, [pc, #228]	; (8013960 <__mdiff+0x110>)
 801387a:	f000 f9af 	bl	8013bdc <__assert_func>
 801387e:	2301      	movs	r3, #1
 8013880:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013884:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013888:	bfa4      	itt	ge
 801388a:	4643      	movge	r3, r8
 801388c:	46a0      	movge	r8, r4
 801388e:	4630      	mov	r0, r6
 8013890:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013894:	bfa6      	itte	ge
 8013896:	461c      	movge	r4, r3
 8013898:	2500      	movge	r5, #0
 801389a:	2501      	movlt	r5, #1
 801389c:	f7ff fd40 	bl	8013320 <_Balloc>
 80138a0:	b920      	cbnz	r0, 80138ac <__mdiff+0x5c>
 80138a2:	4b2e      	ldr	r3, [pc, #184]	; (801395c <__mdiff+0x10c>)
 80138a4:	4602      	mov	r2, r0
 80138a6:	f240 2145 	movw	r1, #581	; 0x245
 80138aa:	e7e5      	b.n	8013878 <__mdiff+0x28>
 80138ac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80138b0:	6926      	ldr	r6, [r4, #16]
 80138b2:	60c5      	str	r5, [r0, #12]
 80138b4:	f104 0914 	add.w	r9, r4, #20
 80138b8:	f108 0514 	add.w	r5, r8, #20
 80138bc:	f100 0e14 	add.w	lr, r0, #20
 80138c0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80138c4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80138c8:	f108 0210 	add.w	r2, r8, #16
 80138cc:	46f2      	mov	sl, lr
 80138ce:	2100      	movs	r1, #0
 80138d0:	f859 3b04 	ldr.w	r3, [r9], #4
 80138d4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80138d8:	fa11 f88b 	uxtah	r8, r1, fp
 80138dc:	b299      	uxth	r1, r3
 80138de:	0c1b      	lsrs	r3, r3, #16
 80138e0:	eba8 0801 	sub.w	r8, r8, r1
 80138e4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80138e8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80138ec:	fa1f f888 	uxth.w	r8, r8
 80138f0:	1419      	asrs	r1, r3, #16
 80138f2:	454e      	cmp	r6, r9
 80138f4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80138f8:	f84a 3b04 	str.w	r3, [sl], #4
 80138fc:	d8e8      	bhi.n	80138d0 <__mdiff+0x80>
 80138fe:	1b33      	subs	r3, r6, r4
 8013900:	3b15      	subs	r3, #21
 8013902:	f023 0303 	bic.w	r3, r3, #3
 8013906:	3304      	adds	r3, #4
 8013908:	3415      	adds	r4, #21
 801390a:	42a6      	cmp	r6, r4
 801390c:	bf38      	it	cc
 801390e:	2304      	movcc	r3, #4
 8013910:	441d      	add	r5, r3
 8013912:	4473      	add	r3, lr
 8013914:	469e      	mov	lr, r3
 8013916:	462e      	mov	r6, r5
 8013918:	4566      	cmp	r6, ip
 801391a:	d30e      	bcc.n	801393a <__mdiff+0xea>
 801391c:	f10c 0203 	add.w	r2, ip, #3
 8013920:	1b52      	subs	r2, r2, r5
 8013922:	f022 0203 	bic.w	r2, r2, #3
 8013926:	3d03      	subs	r5, #3
 8013928:	45ac      	cmp	ip, r5
 801392a:	bf38      	it	cc
 801392c:	2200      	movcc	r2, #0
 801392e:	4413      	add	r3, r2
 8013930:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013934:	b17a      	cbz	r2, 8013956 <__mdiff+0x106>
 8013936:	6107      	str	r7, [r0, #16]
 8013938:	e7a4      	b.n	8013884 <__mdiff+0x34>
 801393a:	f856 8b04 	ldr.w	r8, [r6], #4
 801393e:	fa11 f288 	uxtah	r2, r1, r8
 8013942:	1414      	asrs	r4, r2, #16
 8013944:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013948:	b292      	uxth	r2, r2
 801394a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801394e:	f84e 2b04 	str.w	r2, [lr], #4
 8013952:	1421      	asrs	r1, r4, #16
 8013954:	e7e0      	b.n	8013918 <__mdiff+0xc8>
 8013956:	3f01      	subs	r7, #1
 8013958:	e7ea      	b.n	8013930 <__mdiff+0xe0>
 801395a:	bf00      	nop
 801395c:	080158f4 	.word	0x080158f4
 8013960:	08015916 	.word	0x08015916

08013964 <__d2b>:
 8013964:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013968:	460f      	mov	r7, r1
 801396a:	2101      	movs	r1, #1
 801396c:	ec59 8b10 	vmov	r8, r9, d0
 8013970:	4616      	mov	r6, r2
 8013972:	f7ff fcd5 	bl	8013320 <_Balloc>
 8013976:	4604      	mov	r4, r0
 8013978:	b930      	cbnz	r0, 8013988 <__d2b+0x24>
 801397a:	4602      	mov	r2, r0
 801397c:	4b24      	ldr	r3, [pc, #144]	; (8013a10 <__d2b+0xac>)
 801397e:	4825      	ldr	r0, [pc, #148]	; (8013a14 <__d2b+0xb0>)
 8013980:	f240 310f 	movw	r1, #783	; 0x30f
 8013984:	f000 f92a 	bl	8013bdc <__assert_func>
 8013988:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801398c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8013990:	bb2d      	cbnz	r5, 80139de <__d2b+0x7a>
 8013992:	9301      	str	r3, [sp, #4]
 8013994:	f1b8 0300 	subs.w	r3, r8, #0
 8013998:	d026      	beq.n	80139e8 <__d2b+0x84>
 801399a:	4668      	mov	r0, sp
 801399c:	9300      	str	r3, [sp, #0]
 801399e:	f7ff fd87 	bl	80134b0 <__lo0bits>
 80139a2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80139a6:	b1e8      	cbz	r0, 80139e4 <__d2b+0x80>
 80139a8:	f1c0 0320 	rsb	r3, r0, #32
 80139ac:	fa02 f303 	lsl.w	r3, r2, r3
 80139b0:	430b      	orrs	r3, r1
 80139b2:	40c2      	lsrs	r2, r0
 80139b4:	6163      	str	r3, [r4, #20]
 80139b6:	9201      	str	r2, [sp, #4]
 80139b8:	9b01      	ldr	r3, [sp, #4]
 80139ba:	61a3      	str	r3, [r4, #24]
 80139bc:	2b00      	cmp	r3, #0
 80139be:	bf14      	ite	ne
 80139c0:	2202      	movne	r2, #2
 80139c2:	2201      	moveq	r2, #1
 80139c4:	6122      	str	r2, [r4, #16]
 80139c6:	b1bd      	cbz	r5, 80139f8 <__d2b+0x94>
 80139c8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80139cc:	4405      	add	r5, r0
 80139ce:	603d      	str	r5, [r7, #0]
 80139d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80139d4:	6030      	str	r0, [r6, #0]
 80139d6:	4620      	mov	r0, r4
 80139d8:	b003      	add	sp, #12
 80139da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80139de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80139e2:	e7d6      	b.n	8013992 <__d2b+0x2e>
 80139e4:	6161      	str	r1, [r4, #20]
 80139e6:	e7e7      	b.n	80139b8 <__d2b+0x54>
 80139e8:	a801      	add	r0, sp, #4
 80139ea:	f7ff fd61 	bl	80134b0 <__lo0bits>
 80139ee:	9b01      	ldr	r3, [sp, #4]
 80139f0:	6163      	str	r3, [r4, #20]
 80139f2:	3020      	adds	r0, #32
 80139f4:	2201      	movs	r2, #1
 80139f6:	e7e5      	b.n	80139c4 <__d2b+0x60>
 80139f8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80139fc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013a00:	6038      	str	r0, [r7, #0]
 8013a02:	6918      	ldr	r0, [r3, #16]
 8013a04:	f7ff fd34 	bl	8013470 <__hi0bits>
 8013a08:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013a0c:	e7e2      	b.n	80139d4 <__d2b+0x70>
 8013a0e:	bf00      	nop
 8013a10:	080158f4 	.word	0x080158f4
 8013a14:	08015916 	.word	0x08015916

08013a18 <__sread>:
 8013a18:	b510      	push	{r4, lr}
 8013a1a:	460c      	mov	r4, r1
 8013a1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a20:	f000 f8a8 	bl	8013b74 <_read_r>
 8013a24:	2800      	cmp	r0, #0
 8013a26:	bfab      	itete	ge
 8013a28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013a2a:	89a3      	ldrhlt	r3, [r4, #12]
 8013a2c:	181b      	addge	r3, r3, r0
 8013a2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013a32:	bfac      	ite	ge
 8013a34:	6563      	strge	r3, [r4, #84]	; 0x54
 8013a36:	81a3      	strhlt	r3, [r4, #12]
 8013a38:	bd10      	pop	{r4, pc}

08013a3a <__swrite>:
 8013a3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a3e:	461f      	mov	r7, r3
 8013a40:	898b      	ldrh	r3, [r1, #12]
 8013a42:	05db      	lsls	r3, r3, #23
 8013a44:	4605      	mov	r5, r0
 8013a46:	460c      	mov	r4, r1
 8013a48:	4616      	mov	r6, r2
 8013a4a:	d505      	bpl.n	8013a58 <__swrite+0x1e>
 8013a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a50:	2302      	movs	r3, #2
 8013a52:	2200      	movs	r2, #0
 8013a54:	f000 f87c 	bl	8013b50 <_lseek_r>
 8013a58:	89a3      	ldrh	r3, [r4, #12]
 8013a5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013a5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013a62:	81a3      	strh	r3, [r4, #12]
 8013a64:	4632      	mov	r2, r6
 8013a66:	463b      	mov	r3, r7
 8013a68:	4628      	mov	r0, r5
 8013a6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013a6e:	f000 b8a3 	b.w	8013bb8 <_write_r>

08013a72 <__sseek>:
 8013a72:	b510      	push	{r4, lr}
 8013a74:	460c      	mov	r4, r1
 8013a76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a7a:	f000 f869 	bl	8013b50 <_lseek_r>
 8013a7e:	1c43      	adds	r3, r0, #1
 8013a80:	89a3      	ldrh	r3, [r4, #12]
 8013a82:	bf15      	itete	ne
 8013a84:	6560      	strne	r0, [r4, #84]	; 0x54
 8013a86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013a8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013a8e:	81a3      	strheq	r3, [r4, #12]
 8013a90:	bf18      	it	ne
 8013a92:	81a3      	strhne	r3, [r4, #12]
 8013a94:	bd10      	pop	{r4, pc}

08013a96 <__sclose>:
 8013a96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a9a:	f000 b849 	b.w	8013b30 <_close_r>

08013a9e <_realloc_r>:
 8013a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013aa2:	4680      	mov	r8, r0
 8013aa4:	4614      	mov	r4, r2
 8013aa6:	460e      	mov	r6, r1
 8013aa8:	b921      	cbnz	r1, 8013ab4 <_realloc_r+0x16>
 8013aaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013aae:	4611      	mov	r1, r2
 8013ab0:	f7ff bafc 	b.w	80130ac <_malloc_r>
 8013ab4:	b92a      	cbnz	r2, 8013ac2 <_realloc_r+0x24>
 8013ab6:	f000 f8c5 	bl	8013c44 <_free_r>
 8013aba:	4625      	mov	r5, r4
 8013abc:	4628      	mov	r0, r5
 8013abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013ac2:	f000 f91d 	bl	8013d00 <_malloc_usable_size_r>
 8013ac6:	4284      	cmp	r4, r0
 8013ac8:	4607      	mov	r7, r0
 8013aca:	d802      	bhi.n	8013ad2 <_realloc_r+0x34>
 8013acc:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013ad0:	d812      	bhi.n	8013af8 <_realloc_r+0x5a>
 8013ad2:	4621      	mov	r1, r4
 8013ad4:	4640      	mov	r0, r8
 8013ad6:	f7ff fae9 	bl	80130ac <_malloc_r>
 8013ada:	4605      	mov	r5, r0
 8013adc:	2800      	cmp	r0, #0
 8013ade:	d0ed      	beq.n	8013abc <_realloc_r+0x1e>
 8013ae0:	42bc      	cmp	r4, r7
 8013ae2:	4622      	mov	r2, r4
 8013ae4:	4631      	mov	r1, r6
 8013ae6:	bf28      	it	cs
 8013ae8:	463a      	movcs	r2, r7
 8013aea:	f7fe fad7 	bl	801209c <memcpy>
 8013aee:	4631      	mov	r1, r6
 8013af0:	4640      	mov	r0, r8
 8013af2:	f000 f8a7 	bl	8013c44 <_free_r>
 8013af6:	e7e1      	b.n	8013abc <_realloc_r+0x1e>
 8013af8:	4635      	mov	r5, r6
 8013afa:	e7df      	b.n	8013abc <_realloc_r+0x1e>

08013afc <memmove>:
 8013afc:	4288      	cmp	r0, r1
 8013afe:	b510      	push	{r4, lr}
 8013b00:	eb01 0402 	add.w	r4, r1, r2
 8013b04:	d902      	bls.n	8013b0c <memmove+0x10>
 8013b06:	4284      	cmp	r4, r0
 8013b08:	4623      	mov	r3, r4
 8013b0a:	d807      	bhi.n	8013b1c <memmove+0x20>
 8013b0c:	1e43      	subs	r3, r0, #1
 8013b0e:	42a1      	cmp	r1, r4
 8013b10:	d008      	beq.n	8013b24 <memmove+0x28>
 8013b12:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b16:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013b1a:	e7f8      	b.n	8013b0e <memmove+0x12>
 8013b1c:	4402      	add	r2, r0
 8013b1e:	4601      	mov	r1, r0
 8013b20:	428a      	cmp	r2, r1
 8013b22:	d100      	bne.n	8013b26 <memmove+0x2a>
 8013b24:	bd10      	pop	{r4, pc}
 8013b26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013b2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013b2e:	e7f7      	b.n	8013b20 <memmove+0x24>

08013b30 <_close_r>:
 8013b30:	b538      	push	{r3, r4, r5, lr}
 8013b32:	4d06      	ldr	r5, [pc, #24]	; (8013b4c <_close_r+0x1c>)
 8013b34:	2300      	movs	r3, #0
 8013b36:	4604      	mov	r4, r0
 8013b38:	4608      	mov	r0, r1
 8013b3a:	602b      	str	r3, [r5, #0]
 8013b3c:	f7ef fb2f 	bl	800319e <_close>
 8013b40:	1c43      	adds	r3, r0, #1
 8013b42:	d102      	bne.n	8013b4a <_close_r+0x1a>
 8013b44:	682b      	ldr	r3, [r5, #0]
 8013b46:	b103      	cbz	r3, 8013b4a <_close_r+0x1a>
 8013b48:	6023      	str	r3, [r4, #0]
 8013b4a:	bd38      	pop	{r3, r4, r5, pc}
 8013b4c:	2000284c 	.word	0x2000284c

08013b50 <_lseek_r>:
 8013b50:	b538      	push	{r3, r4, r5, lr}
 8013b52:	4d07      	ldr	r5, [pc, #28]	; (8013b70 <_lseek_r+0x20>)
 8013b54:	4604      	mov	r4, r0
 8013b56:	4608      	mov	r0, r1
 8013b58:	4611      	mov	r1, r2
 8013b5a:	2200      	movs	r2, #0
 8013b5c:	602a      	str	r2, [r5, #0]
 8013b5e:	461a      	mov	r2, r3
 8013b60:	f7ef fb44 	bl	80031ec <_lseek>
 8013b64:	1c43      	adds	r3, r0, #1
 8013b66:	d102      	bne.n	8013b6e <_lseek_r+0x1e>
 8013b68:	682b      	ldr	r3, [r5, #0]
 8013b6a:	b103      	cbz	r3, 8013b6e <_lseek_r+0x1e>
 8013b6c:	6023      	str	r3, [r4, #0]
 8013b6e:	bd38      	pop	{r3, r4, r5, pc}
 8013b70:	2000284c 	.word	0x2000284c

08013b74 <_read_r>:
 8013b74:	b538      	push	{r3, r4, r5, lr}
 8013b76:	4d07      	ldr	r5, [pc, #28]	; (8013b94 <_read_r+0x20>)
 8013b78:	4604      	mov	r4, r0
 8013b7a:	4608      	mov	r0, r1
 8013b7c:	4611      	mov	r1, r2
 8013b7e:	2200      	movs	r2, #0
 8013b80:	602a      	str	r2, [r5, #0]
 8013b82:	461a      	mov	r2, r3
 8013b84:	f7ef fad2 	bl	800312c <_read>
 8013b88:	1c43      	adds	r3, r0, #1
 8013b8a:	d102      	bne.n	8013b92 <_read_r+0x1e>
 8013b8c:	682b      	ldr	r3, [r5, #0]
 8013b8e:	b103      	cbz	r3, 8013b92 <_read_r+0x1e>
 8013b90:	6023      	str	r3, [r4, #0]
 8013b92:	bd38      	pop	{r3, r4, r5, pc}
 8013b94:	2000284c 	.word	0x2000284c

08013b98 <_sbrk_r>:
 8013b98:	b538      	push	{r3, r4, r5, lr}
 8013b9a:	4d06      	ldr	r5, [pc, #24]	; (8013bb4 <_sbrk_r+0x1c>)
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	4604      	mov	r4, r0
 8013ba0:	4608      	mov	r0, r1
 8013ba2:	602b      	str	r3, [r5, #0]
 8013ba4:	f7ef fb30 	bl	8003208 <_sbrk>
 8013ba8:	1c43      	adds	r3, r0, #1
 8013baa:	d102      	bne.n	8013bb2 <_sbrk_r+0x1a>
 8013bac:	682b      	ldr	r3, [r5, #0]
 8013bae:	b103      	cbz	r3, 8013bb2 <_sbrk_r+0x1a>
 8013bb0:	6023      	str	r3, [r4, #0]
 8013bb2:	bd38      	pop	{r3, r4, r5, pc}
 8013bb4:	2000284c 	.word	0x2000284c

08013bb8 <_write_r>:
 8013bb8:	b538      	push	{r3, r4, r5, lr}
 8013bba:	4d07      	ldr	r5, [pc, #28]	; (8013bd8 <_write_r+0x20>)
 8013bbc:	4604      	mov	r4, r0
 8013bbe:	4608      	mov	r0, r1
 8013bc0:	4611      	mov	r1, r2
 8013bc2:	2200      	movs	r2, #0
 8013bc4:	602a      	str	r2, [r5, #0]
 8013bc6:	461a      	mov	r2, r3
 8013bc8:	f7ef facd 	bl	8003166 <_write>
 8013bcc:	1c43      	adds	r3, r0, #1
 8013bce:	d102      	bne.n	8013bd6 <_write_r+0x1e>
 8013bd0:	682b      	ldr	r3, [r5, #0]
 8013bd2:	b103      	cbz	r3, 8013bd6 <_write_r+0x1e>
 8013bd4:	6023      	str	r3, [r4, #0]
 8013bd6:	bd38      	pop	{r3, r4, r5, pc}
 8013bd8:	2000284c 	.word	0x2000284c

08013bdc <__assert_func>:
 8013bdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013bde:	4614      	mov	r4, r2
 8013be0:	461a      	mov	r2, r3
 8013be2:	4b09      	ldr	r3, [pc, #36]	; (8013c08 <__assert_func+0x2c>)
 8013be4:	681b      	ldr	r3, [r3, #0]
 8013be6:	4605      	mov	r5, r0
 8013be8:	68d8      	ldr	r0, [r3, #12]
 8013bea:	b14c      	cbz	r4, 8013c00 <__assert_func+0x24>
 8013bec:	4b07      	ldr	r3, [pc, #28]	; (8013c0c <__assert_func+0x30>)
 8013bee:	9100      	str	r1, [sp, #0]
 8013bf0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013bf4:	4906      	ldr	r1, [pc, #24]	; (8013c10 <__assert_func+0x34>)
 8013bf6:	462b      	mov	r3, r5
 8013bf8:	f000 f88a 	bl	8013d10 <fiprintf>
 8013bfc:	f000 f8a7 	bl	8013d4e <abort>
 8013c00:	4b04      	ldr	r3, [pc, #16]	; (8013c14 <__assert_func+0x38>)
 8013c02:	461c      	mov	r4, r3
 8013c04:	e7f3      	b.n	8013bee <__assert_func+0x12>
 8013c06:	bf00      	nop
 8013c08:	20000178 	.word	0x20000178
 8013c0c:	08015b77 	.word	0x08015b77
 8013c10:	08015b84 	.word	0x08015b84
 8013c14:	08015bb2 	.word	0x08015bb2

08013c18 <_calloc_r>:
 8013c18:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c1a:	fba1 2402 	umull	r2, r4, r1, r2
 8013c1e:	b94c      	cbnz	r4, 8013c34 <_calloc_r+0x1c>
 8013c20:	4611      	mov	r1, r2
 8013c22:	9201      	str	r2, [sp, #4]
 8013c24:	f7ff fa42 	bl	80130ac <_malloc_r>
 8013c28:	9a01      	ldr	r2, [sp, #4]
 8013c2a:	4605      	mov	r5, r0
 8013c2c:	b930      	cbnz	r0, 8013c3c <_calloc_r+0x24>
 8013c2e:	4628      	mov	r0, r5
 8013c30:	b003      	add	sp, #12
 8013c32:	bd30      	pop	{r4, r5, pc}
 8013c34:	220c      	movs	r2, #12
 8013c36:	6002      	str	r2, [r0, #0]
 8013c38:	2500      	movs	r5, #0
 8013c3a:	e7f8      	b.n	8013c2e <_calloc_r+0x16>
 8013c3c:	4621      	mov	r1, r4
 8013c3e:	f7fe f9f5 	bl	801202c <memset>
 8013c42:	e7f4      	b.n	8013c2e <_calloc_r+0x16>

08013c44 <_free_r>:
 8013c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c46:	2900      	cmp	r1, #0
 8013c48:	d044      	beq.n	8013cd4 <_free_r+0x90>
 8013c4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c4e:	9001      	str	r0, [sp, #4]
 8013c50:	2b00      	cmp	r3, #0
 8013c52:	f1a1 0404 	sub.w	r4, r1, #4
 8013c56:	bfb8      	it	lt
 8013c58:	18e4      	addlt	r4, r4, r3
 8013c5a:	f7ff fb55 	bl	8013308 <__malloc_lock>
 8013c5e:	4a1e      	ldr	r2, [pc, #120]	; (8013cd8 <_free_r+0x94>)
 8013c60:	9801      	ldr	r0, [sp, #4]
 8013c62:	6813      	ldr	r3, [r2, #0]
 8013c64:	b933      	cbnz	r3, 8013c74 <_free_r+0x30>
 8013c66:	6063      	str	r3, [r4, #4]
 8013c68:	6014      	str	r4, [r2, #0]
 8013c6a:	b003      	add	sp, #12
 8013c6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013c70:	f7ff bb50 	b.w	8013314 <__malloc_unlock>
 8013c74:	42a3      	cmp	r3, r4
 8013c76:	d908      	bls.n	8013c8a <_free_r+0x46>
 8013c78:	6825      	ldr	r5, [r4, #0]
 8013c7a:	1961      	adds	r1, r4, r5
 8013c7c:	428b      	cmp	r3, r1
 8013c7e:	bf01      	itttt	eq
 8013c80:	6819      	ldreq	r1, [r3, #0]
 8013c82:	685b      	ldreq	r3, [r3, #4]
 8013c84:	1949      	addeq	r1, r1, r5
 8013c86:	6021      	streq	r1, [r4, #0]
 8013c88:	e7ed      	b.n	8013c66 <_free_r+0x22>
 8013c8a:	461a      	mov	r2, r3
 8013c8c:	685b      	ldr	r3, [r3, #4]
 8013c8e:	b10b      	cbz	r3, 8013c94 <_free_r+0x50>
 8013c90:	42a3      	cmp	r3, r4
 8013c92:	d9fa      	bls.n	8013c8a <_free_r+0x46>
 8013c94:	6811      	ldr	r1, [r2, #0]
 8013c96:	1855      	adds	r5, r2, r1
 8013c98:	42a5      	cmp	r5, r4
 8013c9a:	d10b      	bne.n	8013cb4 <_free_r+0x70>
 8013c9c:	6824      	ldr	r4, [r4, #0]
 8013c9e:	4421      	add	r1, r4
 8013ca0:	1854      	adds	r4, r2, r1
 8013ca2:	42a3      	cmp	r3, r4
 8013ca4:	6011      	str	r1, [r2, #0]
 8013ca6:	d1e0      	bne.n	8013c6a <_free_r+0x26>
 8013ca8:	681c      	ldr	r4, [r3, #0]
 8013caa:	685b      	ldr	r3, [r3, #4]
 8013cac:	6053      	str	r3, [r2, #4]
 8013cae:	440c      	add	r4, r1
 8013cb0:	6014      	str	r4, [r2, #0]
 8013cb2:	e7da      	b.n	8013c6a <_free_r+0x26>
 8013cb4:	d902      	bls.n	8013cbc <_free_r+0x78>
 8013cb6:	230c      	movs	r3, #12
 8013cb8:	6003      	str	r3, [r0, #0]
 8013cba:	e7d6      	b.n	8013c6a <_free_r+0x26>
 8013cbc:	6825      	ldr	r5, [r4, #0]
 8013cbe:	1961      	adds	r1, r4, r5
 8013cc0:	428b      	cmp	r3, r1
 8013cc2:	bf04      	itt	eq
 8013cc4:	6819      	ldreq	r1, [r3, #0]
 8013cc6:	685b      	ldreq	r3, [r3, #4]
 8013cc8:	6063      	str	r3, [r4, #4]
 8013cca:	bf04      	itt	eq
 8013ccc:	1949      	addeq	r1, r1, r5
 8013cce:	6021      	streq	r1, [r4, #0]
 8013cd0:	6054      	str	r4, [r2, #4]
 8013cd2:	e7ca      	b.n	8013c6a <_free_r+0x26>
 8013cd4:	b003      	add	sp, #12
 8013cd6:	bd30      	pop	{r4, r5, pc}
 8013cd8:	20002844 	.word	0x20002844

08013cdc <__ascii_mbtowc>:
 8013cdc:	b082      	sub	sp, #8
 8013cde:	b901      	cbnz	r1, 8013ce2 <__ascii_mbtowc+0x6>
 8013ce0:	a901      	add	r1, sp, #4
 8013ce2:	b142      	cbz	r2, 8013cf6 <__ascii_mbtowc+0x1a>
 8013ce4:	b14b      	cbz	r3, 8013cfa <__ascii_mbtowc+0x1e>
 8013ce6:	7813      	ldrb	r3, [r2, #0]
 8013ce8:	600b      	str	r3, [r1, #0]
 8013cea:	7812      	ldrb	r2, [r2, #0]
 8013cec:	1e10      	subs	r0, r2, #0
 8013cee:	bf18      	it	ne
 8013cf0:	2001      	movne	r0, #1
 8013cf2:	b002      	add	sp, #8
 8013cf4:	4770      	bx	lr
 8013cf6:	4610      	mov	r0, r2
 8013cf8:	e7fb      	b.n	8013cf2 <__ascii_mbtowc+0x16>
 8013cfa:	f06f 0001 	mvn.w	r0, #1
 8013cfe:	e7f8      	b.n	8013cf2 <__ascii_mbtowc+0x16>

08013d00 <_malloc_usable_size_r>:
 8013d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d04:	1f18      	subs	r0, r3, #4
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	bfbc      	itt	lt
 8013d0a:	580b      	ldrlt	r3, [r1, r0]
 8013d0c:	18c0      	addlt	r0, r0, r3
 8013d0e:	4770      	bx	lr

08013d10 <fiprintf>:
 8013d10:	b40e      	push	{r1, r2, r3}
 8013d12:	b503      	push	{r0, r1, lr}
 8013d14:	4601      	mov	r1, r0
 8013d16:	ab03      	add	r3, sp, #12
 8013d18:	4805      	ldr	r0, [pc, #20]	; (8013d30 <fiprintf+0x20>)
 8013d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d1e:	6800      	ldr	r0, [r0, #0]
 8013d20:	9301      	str	r3, [sp, #4]
 8013d22:	f000 f845 	bl	8013db0 <_vfiprintf_r>
 8013d26:	b002      	add	sp, #8
 8013d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8013d2c:	b003      	add	sp, #12
 8013d2e:	4770      	bx	lr
 8013d30:	20000178 	.word	0x20000178

08013d34 <__ascii_wctomb>:
 8013d34:	b149      	cbz	r1, 8013d4a <__ascii_wctomb+0x16>
 8013d36:	2aff      	cmp	r2, #255	; 0xff
 8013d38:	bf85      	ittet	hi
 8013d3a:	238a      	movhi	r3, #138	; 0x8a
 8013d3c:	6003      	strhi	r3, [r0, #0]
 8013d3e:	700a      	strbls	r2, [r1, #0]
 8013d40:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013d44:	bf98      	it	ls
 8013d46:	2001      	movls	r0, #1
 8013d48:	4770      	bx	lr
 8013d4a:	4608      	mov	r0, r1
 8013d4c:	4770      	bx	lr

08013d4e <abort>:
 8013d4e:	b508      	push	{r3, lr}
 8013d50:	2006      	movs	r0, #6
 8013d52:	f000 fa89 	bl	8014268 <raise>
 8013d56:	2001      	movs	r0, #1
 8013d58:	f7ef f9de 	bl	8003118 <_exit>

08013d5c <__sfputc_r>:
 8013d5c:	6893      	ldr	r3, [r2, #8]
 8013d5e:	3b01      	subs	r3, #1
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	b410      	push	{r4}
 8013d64:	6093      	str	r3, [r2, #8]
 8013d66:	da08      	bge.n	8013d7a <__sfputc_r+0x1e>
 8013d68:	6994      	ldr	r4, [r2, #24]
 8013d6a:	42a3      	cmp	r3, r4
 8013d6c:	db01      	blt.n	8013d72 <__sfputc_r+0x16>
 8013d6e:	290a      	cmp	r1, #10
 8013d70:	d103      	bne.n	8013d7a <__sfputc_r+0x1e>
 8013d72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d76:	f000 b935 	b.w	8013fe4 <__swbuf_r>
 8013d7a:	6813      	ldr	r3, [r2, #0]
 8013d7c:	1c58      	adds	r0, r3, #1
 8013d7e:	6010      	str	r0, [r2, #0]
 8013d80:	7019      	strb	r1, [r3, #0]
 8013d82:	4608      	mov	r0, r1
 8013d84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d88:	4770      	bx	lr

08013d8a <__sfputs_r>:
 8013d8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d8c:	4606      	mov	r6, r0
 8013d8e:	460f      	mov	r7, r1
 8013d90:	4614      	mov	r4, r2
 8013d92:	18d5      	adds	r5, r2, r3
 8013d94:	42ac      	cmp	r4, r5
 8013d96:	d101      	bne.n	8013d9c <__sfputs_r+0x12>
 8013d98:	2000      	movs	r0, #0
 8013d9a:	e007      	b.n	8013dac <__sfputs_r+0x22>
 8013d9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013da0:	463a      	mov	r2, r7
 8013da2:	4630      	mov	r0, r6
 8013da4:	f7ff ffda 	bl	8013d5c <__sfputc_r>
 8013da8:	1c43      	adds	r3, r0, #1
 8013daa:	d1f3      	bne.n	8013d94 <__sfputs_r+0xa>
 8013dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013db0 <_vfiprintf_r>:
 8013db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013db4:	460d      	mov	r5, r1
 8013db6:	b09d      	sub	sp, #116	; 0x74
 8013db8:	4614      	mov	r4, r2
 8013dba:	4698      	mov	r8, r3
 8013dbc:	4606      	mov	r6, r0
 8013dbe:	b118      	cbz	r0, 8013dc8 <_vfiprintf_r+0x18>
 8013dc0:	6a03      	ldr	r3, [r0, #32]
 8013dc2:	b90b      	cbnz	r3, 8013dc8 <_vfiprintf_r+0x18>
 8013dc4:	f7fe f8fc 	bl	8011fc0 <__sinit>
 8013dc8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013dca:	07d9      	lsls	r1, r3, #31
 8013dcc:	d405      	bmi.n	8013dda <_vfiprintf_r+0x2a>
 8013dce:	89ab      	ldrh	r3, [r5, #12]
 8013dd0:	059a      	lsls	r2, r3, #22
 8013dd2:	d402      	bmi.n	8013dda <_vfiprintf_r+0x2a>
 8013dd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013dd6:	f7fe f95f 	bl	8012098 <__retarget_lock_acquire_recursive>
 8013dda:	89ab      	ldrh	r3, [r5, #12]
 8013ddc:	071b      	lsls	r3, r3, #28
 8013dde:	d501      	bpl.n	8013de4 <_vfiprintf_r+0x34>
 8013de0:	692b      	ldr	r3, [r5, #16]
 8013de2:	b99b      	cbnz	r3, 8013e0c <_vfiprintf_r+0x5c>
 8013de4:	4629      	mov	r1, r5
 8013de6:	4630      	mov	r0, r6
 8013de8:	f000 f93a 	bl	8014060 <__swsetup_r>
 8013dec:	b170      	cbz	r0, 8013e0c <_vfiprintf_r+0x5c>
 8013dee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013df0:	07dc      	lsls	r4, r3, #31
 8013df2:	d504      	bpl.n	8013dfe <_vfiprintf_r+0x4e>
 8013df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013df8:	b01d      	add	sp, #116	; 0x74
 8013dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013dfe:	89ab      	ldrh	r3, [r5, #12]
 8013e00:	0598      	lsls	r0, r3, #22
 8013e02:	d4f7      	bmi.n	8013df4 <_vfiprintf_r+0x44>
 8013e04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e06:	f7fe f948 	bl	801209a <__retarget_lock_release_recursive>
 8013e0a:	e7f3      	b.n	8013df4 <_vfiprintf_r+0x44>
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	9309      	str	r3, [sp, #36]	; 0x24
 8013e10:	2320      	movs	r3, #32
 8013e12:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013e16:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e1a:	2330      	movs	r3, #48	; 0x30
 8013e1c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013fd0 <_vfiprintf_r+0x220>
 8013e20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013e24:	f04f 0901 	mov.w	r9, #1
 8013e28:	4623      	mov	r3, r4
 8013e2a:	469a      	mov	sl, r3
 8013e2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e30:	b10a      	cbz	r2, 8013e36 <_vfiprintf_r+0x86>
 8013e32:	2a25      	cmp	r2, #37	; 0x25
 8013e34:	d1f9      	bne.n	8013e2a <_vfiprintf_r+0x7a>
 8013e36:	ebba 0b04 	subs.w	fp, sl, r4
 8013e3a:	d00b      	beq.n	8013e54 <_vfiprintf_r+0xa4>
 8013e3c:	465b      	mov	r3, fp
 8013e3e:	4622      	mov	r2, r4
 8013e40:	4629      	mov	r1, r5
 8013e42:	4630      	mov	r0, r6
 8013e44:	f7ff ffa1 	bl	8013d8a <__sfputs_r>
 8013e48:	3001      	adds	r0, #1
 8013e4a:	f000 80a9 	beq.w	8013fa0 <_vfiprintf_r+0x1f0>
 8013e4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e50:	445a      	add	r2, fp
 8013e52:	9209      	str	r2, [sp, #36]	; 0x24
 8013e54:	f89a 3000 	ldrb.w	r3, [sl]
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	f000 80a1 	beq.w	8013fa0 <_vfiprintf_r+0x1f0>
 8013e5e:	2300      	movs	r3, #0
 8013e60:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013e64:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e68:	f10a 0a01 	add.w	sl, sl, #1
 8013e6c:	9304      	str	r3, [sp, #16]
 8013e6e:	9307      	str	r3, [sp, #28]
 8013e70:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013e74:	931a      	str	r3, [sp, #104]	; 0x68
 8013e76:	4654      	mov	r4, sl
 8013e78:	2205      	movs	r2, #5
 8013e7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e7e:	4854      	ldr	r0, [pc, #336]	; (8013fd0 <_vfiprintf_r+0x220>)
 8013e80:	f7ec f9a6 	bl	80001d0 <memchr>
 8013e84:	9a04      	ldr	r2, [sp, #16]
 8013e86:	b9d8      	cbnz	r0, 8013ec0 <_vfiprintf_r+0x110>
 8013e88:	06d1      	lsls	r1, r2, #27
 8013e8a:	bf44      	itt	mi
 8013e8c:	2320      	movmi	r3, #32
 8013e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e92:	0713      	lsls	r3, r2, #28
 8013e94:	bf44      	itt	mi
 8013e96:	232b      	movmi	r3, #43	; 0x2b
 8013e98:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013e9c:	f89a 3000 	ldrb.w	r3, [sl]
 8013ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8013ea2:	d015      	beq.n	8013ed0 <_vfiprintf_r+0x120>
 8013ea4:	9a07      	ldr	r2, [sp, #28]
 8013ea6:	4654      	mov	r4, sl
 8013ea8:	2000      	movs	r0, #0
 8013eaa:	f04f 0c0a 	mov.w	ip, #10
 8013eae:	4621      	mov	r1, r4
 8013eb0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013eb4:	3b30      	subs	r3, #48	; 0x30
 8013eb6:	2b09      	cmp	r3, #9
 8013eb8:	d94d      	bls.n	8013f56 <_vfiprintf_r+0x1a6>
 8013eba:	b1b0      	cbz	r0, 8013eea <_vfiprintf_r+0x13a>
 8013ebc:	9207      	str	r2, [sp, #28]
 8013ebe:	e014      	b.n	8013eea <_vfiprintf_r+0x13a>
 8013ec0:	eba0 0308 	sub.w	r3, r0, r8
 8013ec4:	fa09 f303 	lsl.w	r3, r9, r3
 8013ec8:	4313      	orrs	r3, r2
 8013eca:	9304      	str	r3, [sp, #16]
 8013ecc:	46a2      	mov	sl, r4
 8013ece:	e7d2      	b.n	8013e76 <_vfiprintf_r+0xc6>
 8013ed0:	9b03      	ldr	r3, [sp, #12]
 8013ed2:	1d19      	adds	r1, r3, #4
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	9103      	str	r1, [sp, #12]
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	bfbb      	ittet	lt
 8013edc:	425b      	neglt	r3, r3
 8013ede:	f042 0202 	orrlt.w	r2, r2, #2
 8013ee2:	9307      	strge	r3, [sp, #28]
 8013ee4:	9307      	strlt	r3, [sp, #28]
 8013ee6:	bfb8      	it	lt
 8013ee8:	9204      	strlt	r2, [sp, #16]
 8013eea:	7823      	ldrb	r3, [r4, #0]
 8013eec:	2b2e      	cmp	r3, #46	; 0x2e
 8013eee:	d10c      	bne.n	8013f0a <_vfiprintf_r+0x15a>
 8013ef0:	7863      	ldrb	r3, [r4, #1]
 8013ef2:	2b2a      	cmp	r3, #42	; 0x2a
 8013ef4:	d134      	bne.n	8013f60 <_vfiprintf_r+0x1b0>
 8013ef6:	9b03      	ldr	r3, [sp, #12]
 8013ef8:	1d1a      	adds	r2, r3, #4
 8013efa:	681b      	ldr	r3, [r3, #0]
 8013efc:	9203      	str	r2, [sp, #12]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	bfb8      	it	lt
 8013f02:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013f06:	3402      	adds	r4, #2
 8013f08:	9305      	str	r3, [sp, #20]
 8013f0a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013fe0 <_vfiprintf_r+0x230>
 8013f0e:	7821      	ldrb	r1, [r4, #0]
 8013f10:	2203      	movs	r2, #3
 8013f12:	4650      	mov	r0, sl
 8013f14:	f7ec f95c 	bl	80001d0 <memchr>
 8013f18:	b138      	cbz	r0, 8013f2a <_vfiprintf_r+0x17a>
 8013f1a:	9b04      	ldr	r3, [sp, #16]
 8013f1c:	eba0 000a 	sub.w	r0, r0, sl
 8013f20:	2240      	movs	r2, #64	; 0x40
 8013f22:	4082      	lsls	r2, r0
 8013f24:	4313      	orrs	r3, r2
 8013f26:	3401      	adds	r4, #1
 8013f28:	9304      	str	r3, [sp, #16]
 8013f2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f2e:	4829      	ldr	r0, [pc, #164]	; (8013fd4 <_vfiprintf_r+0x224>)
 8013f30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013f34:	2206      	movs	r2, #6
 8013f36:	f7ec f94b 	bl	80001d0 <memchr>
 8013f3a:	2800      	cmp	r0, #0
 8013f3c:	d03f      	beq.n	8013fbe <_vfiprintf_r+0x20e>
 8013f3e:	4b26      	ldr	r3, [pc, #152]	; (8013fd8 <_vfiprintf_r+0x228>)
 8013f40:	bb1b      	cbnz	r3, 8013f8a <_vfiprintf_r+0x1da>
 8013f42:	9b03      	ldr	r3, [sp, #12]
 8013f44:	3307      	adds	r3, #7
 8013f46:	f023 0307 	bic.w	r3, r3, #7
 8013f4a:	3308      	adds	r3, #8
 8013f4c:	9303      	str	r3, [sp, #12]
 8013f4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f50:	443b      	add	r3, r7
 8013f52:	9309      	str	r3, [sp, #36]	; 0x24
 8013f54:	e768      	b.n	8013e28 <_vfiprintf_r+0x78>
 8013f56:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f5a:	460c      	mov	r4, r1
 8013f5c:	2001      	movs	r0, #1
 8013f5e:	e7a6      	b.n	8013eae <_vfiprintf_r+0xfe>
 8013f60:	2300      	movs	r3, #0
 8013f62:	3401      	adds	r4, #1
 8013f64:	9305      	str	r3, [sp, #20]
 8013f66:	4619      	mov	r1, r3
 8013f68:	f04f 0c0a 	mov.w	ip, #10
 8013f6c:	4620      	mov	r0, r4
 8013f6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f72:	3a30      	subs	r2, #48	; 0x30
 8013f74:	2a09      	cmp	r2, #9
 8013f76:	d903      	bls.n	8013f80 <_vfiprintf_r+0x1d0>
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d0c6      	beq.n	8013f0a <_vfiprintf_r+0x15a>
 8013f7c:	9105      	str	r1, [sp, #20]
 8013f7e:	e7c4      	b.n	8013f0a <_vfiprintf_r+0x15a>
 8013f80:	fb0c 2101 	mla	r1, ip, r1, r2
 8013f84:	4604      	mov	r4, r0
 8013f86:	2301      	movs	r3, #1
 8013f88:	e7f0      	b.n	8013f6c <_vfiprintf_r+0x1bc>
 8013f8a:	ab03      	add	r3, sp, #12
 8013f8c:	9300      	str	r3, [sp, #0]
 8013f8e:	462a      	mov	r2, r5
 8013f90:	4b12      	ldr	r3, [pc, #72]	; (8013fdc <_vfiprintf_r+0x22c>)
 8013f92:	a904      	add	r1, sp, #16
 8013f94:	4630      	mov	r0, r6
 8013f96:	f7fd fbb3 	bl	8011700 <_printf_float>
 8013f9a:	4607      	mov	r7, r0
 8013f9c:	1c78      	adds	r0, r7, #1
 8013f9e:	d1d6      	bne.n	8013f4e <_vfiprintf_r+0x19e>
 8013fa0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013fa2:	07d9      	lsls	r1, r3, #31
 8013fa4:	d405      	bmi.n	8013fb2 <_vfiprintf_r+0x202>
 8013fa6:	89ab      	ldrh	r3, [r5, #12]
 8013fa8:	059a      	lsls	r2, r3, #22
 8013faa:	d402      	bmi.n	8013fb2 <_vfiprintf_r+0x202>
 8013fac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013fae:	f7fe f874 	bl	801209a <__retarget_lock_release_recursive>
 8013fb2:	89ab      	ldrh	r3, [r5, #12]
 8013fb4:	065b      	lsls	r3, r3, #25
 8013fb6:	f53f af1d 	bmi.w	8013df4 <_vfiprintf_r+0x44>
 8013fba:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013fbc:	e71c      	b.n	8013df8 <_vfiprintf_r+0x48>
 8013fbe:	ab03      	add	r3, sp, #12
 8013fc0:	9300      	str	r3, [sp, #0]
 8013fc2:	462a      	mov	r2, r5
 8013fc4:	4b05      	ldr	r3, [pc, #20]	; (8013fdc <_vfiprintf_r+0x22c>)
 8013fc6:	a904      	add	r1, sp, #16
 8013fc8:	4630      	mov	r0, r6
 8013fca:	f7fd fe3d 	bl	8011c48 <_printf_i>
 8013fce:	e7e4      	b.n	8013f9a <_vfiprintf_r+0x1ea>
 8013fd0:	08015905 	.word	0x08015905
 8013fd4:	0801590f 	.word	0x0801590f
 8013fd8:	08011701 	.word	0x08011701
 8013fdc:	08013d8b 	.word	0x08013d8b
 8013fe0:	0801590b 	.word	0x0801590b

08013fe4 <__swbuf_r>:
 8013fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013fe6:	460e      	mov	r6, r1
 8013fe8:	4614      	mov	r4, r2
 8013fea:	4605      	mov	r5, r0
 8013fec:	b118      	cbz	r0, 8013ff6 <__swbuf_r+0x12>
 8013fee:	6a03      	ldr	r3, [r0, #32]
 8013ff0:	b90b      	cbnz	r3, 8013ff6 <__swbuf_r+0x12>
 8013ff2:	f7fd ffe5 	bl	8011fc0 <__sinit>
 8013ff6:	69a3      	ldr	r3, [r4, #24]
 8013ff8:	60a3      	str	r3, [r4, #8]
 8013ffa:	89a3      	ldrh	r3, [r4, #12]
 8013ffc:	071a      	lsls	r2, r3, #28
 8013ffe:	d525      	bpl.n	801404c <__swbuf_r+0x68>
 8014000:	6923      	ldr	r3, [r4, #16]
 8014002:	b31b      	cbz	r3, 801404c <__swbuf_r+0x68>
 8014004:	6823      	ldr	r3, [r4, #0]
 8014006:	6922      	ldr	r2, [r4, #16]
 8014008:	1a98      	subs	r0, r3, r2
 801400a:	6963      	ldr	r3, [r4, #20]
 801400c:	b2f6      	uxtb	r6, r6
 801400e:	4283      	cmp	r3, r0
 8014010:	4637      	mov	r7, r6
 8014012:	dc04      	bgt.n	801401e <__swbuf_r+0x3a>
 8014014:	4621      	mov	r1, r4
 8014016:	4628      	mov	r0, r5
 8014018:	f7ff f94e 	bl	80132b8 <_fflush_r>
 801401c:	b9e0      	cbnz	r0, 8014058 <__swbuf_r+0x74>
 801401e:	68a3      	ldr	r3, [r4, #8]
 8014020:	3b01      	subs	r3, #1
 8014022:	60a3      	str	r3, [r4, #8]
 8014024:	6823      	ldr	r3, [r4, #0]
 8014026:	1c5a      	adds	r2, r3, #1
 8014028:	6022      	str	r2, [r4, #0]
 801402a:	701e      	strb	r6, [r3, #0]
 801402c:	6962      	ldr	r2, [r4, #20]
 801402e:	1c43      	adds	r3, r0, #1
 8014030:	429a      	cmp	r2, r3
 8014032:	d004      	beq.n	801403e <__swbuf_r+0x5a>
 8014034:	89a3      	ldrh	r3, [r4, #12]
 8014036:	07db      	lsls	r3, r3, #31
 8014038:	d506      	bpl.n	8014048 <__swbuf_r+0x64>
 801403a:	2e0a      	cmp	r6, #10
 801403c:	d104      	bne.n	8014048 <__swbuf_r+0x64>
 801403e:	4621      	mov	r1, r4
 8014040:	4628      	mov	r0, r5
 8014042:	f7ff f939 	bl	80132b8 <_fflush_r>
 8014046:	b938      	cbnz	r0, 8014058 <__swbuf_r+0x74>
 8014048:	4638      	mov	r0, r7
 801404a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801404c:	4621      	mov	r1, r4
 801404e:	4628      	mov	r0, r5
 8014050:	f000 f806 	bl	8014060 <__swsetup_r>
 8014054:	2800      	cmp	r0, #0
 8014056:	d0d5      	beq.n	8014004 <__swbuf_r+0x20>
 8014058:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801405c:	e7f4      	b.n	8014048 <__swbuf_r+0x64>
	...

08014060 <__swsetup_r>:
 8014060:	b538      	push	{r3, r4, r5, lr}
 8014062:	4b2a      	ldr	r3, [pc, #168]	; (801410c <__swsetup_r+0xac>)
 8014064:	4605      	mov	r5, r0
 8014066:	6818      	ldr	r0, [r3, #0]
 8014068:	460c      	mov	r4, r1
 801406a:	b118      	cbz	r0, 8014074 <__swsetup_r+0x14>
 801406c:	6a03      	ldr	r3, [r0, #32]
 801406e:	b90b      	cbnz	r3, 8014074 <__swsetup_r+0x14>
 8014070:	f7fd ffa6 	bl	8011fc0 <__sinit>
 8014074:	89a3      	ldrh	r3, [r4, #12]
 8014076:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801407a:	0718      	lsls	r0, r3, #28
 801407c:	d422      	bmi.n	80140c4 <__swsetup_r+0x64>
 801407e:	06d9      	lsls	r1, r3, #27
 8014080:	d407      	bmi.n	8014092 <__swsetup_r+0x32>
 8014082:	2309      	movs	r3, #9
 8014084:	602b      	str	r3, [r5, #0]
 8014086:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801408a:	81a3      	strh	r3, [r4, #12]
 801408c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014090:	e034      	b.n	80140fc <__swsetup_r+0x9c>
 8014092:	0758      	lsls	r0, r3, #29
 8014094:	d512      	bpl.n	80140bc <__swsetup_r+0x5c>
 8014096:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014098:	b141      	cbz	r1, 80140ac <__swsetup_r+0x4c>
 801409a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801409e:	4299      	cmp	r1, r3
 80140a0:	d002      	beq.n	80140a8 <__swsetup_r+0x48>
 80140a2:	4628      	mov	r0, r5
 80140a4:	f7ff fdce 	bl	8013c44 <_free_r>
 80140a8:	2300      	movs	r3, #0
 80140aa:	6363      	str	r3, [r4, #52]	; 0x34
 80140ac:	89a3      	ldrh	r3, [r4, #12]
 80140ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80140b2:	81a3      	strh	r3, [r4, #12]
 80140b4:	2300      	movs	r3, #0
 80140b6:	6063      	str	r3, [r4, #4]
 80140b8:	6923      	ldr	r3, [r4, #16]
 80140ba:	6023      	str	r3, [r4, #0]
 80140bc:	89a3      	ldrh	r3, [r4, #12]
 80140be:	f043 0308 	orr.w	r3, r3, #8
 80140c2:	81a3      	strh	r3, [r4, #12]
 80140c4:	6923      	ldr	r3, [r4, #16]
 80140c6:	b94b      	cbnz	r3, 80140dc <__swsetup_r+0x7c>
 80140c8:	89a3      	ldrh	r3, [r4, #12]
 80140ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80140ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80140d2:	d003      	beq.n	80140dc <__swsetup_r+0x7c>
 80140d4:	4621      	mov	r1, r4
 80140d6:	4628      	mov	r0, r5
 80140d8:	f000 f840 	bl	801415c <__smakebuf_r>
 80140dc:	89a0      	ldrh	r0, [r4, #12]
 80140de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80140e2:	f010 0301 	ands.w	r3, r0, #1
 80140e6:	d00a      	beq.n	80140fe <__swsetup_r+0x9e>
 80140e8:	2300      	movs	r3, #0
 80140ea:	60a3      	str	r3, [r4, #8]
 80140ec:	6963      	ldr	r3, [r4, #20]
 80140ee:	425b      	negs	r3, r3
 80140f0:	61a3      	str	r3, [r4, #24]
 80140f2:	6923      	ldr	r3, [r4, #16]
 80140f4:	b943      	cbnz	r3, 8014108 <__swsetup_r+0xa8>
 80140f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80140fa:	d1c4      	bne.n	8014086 <__swsetup_r+0x26>
 80140fc:	bd38      	pop	{r3, r4, r5, pc}
 80140fe:	0781      	lsls	r1, r0, #30
 8014100:	bf58      	it	pl
 8014102:	6963      	ldrpl	r3, [r4, #20]
 8014104:	60a3      	str	r3, [r4, #8]
 8014106:	e7f4      	b.n	80140f2 <__swsetup_r+0x92>
 8014108:	2000      	movs	r0, #0
 801410a:	e7f7      	b.n	80140fc <__swsetup_r+0x9c>
 801410c:	20000178 	.word	0x20000178

08014110 <__swhatbuf_r>:
 8014110:	b570      	push	{r4, r5, r6, lr}
 8014112:	460c      	mov	r4, r1
 8014114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014118:	2900      	cmp	r1, #0
 801411a:	b096      	sub	sp, #88	; 0x58
 801411c:	4615      	mov	r5, r2
 801411e:	461e      	mov	r6, r3
 8014120:	da0d      	bge.n	801413e <__swhatbuf_r+0x2e>
 8014122:	89a3      	ldrh	r3, [r4, #12]
 8014124:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014128:	f04f 0100 	mov.w	r1, #0
 801412c:	bf0c      	ite	eq
 801412e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014132:	2340      	movne	r3, #64	; 0x40
 8014134:	2000      	movs	r0, #0
 8014136:	6031      	str	r1, [r6, #0]
 8014138:	602b      	str	r3, [r5, #0]
 801413a:	b016      	add	sp, #88	; 0x58
 801413c:	bd70      	pop	{r4, r5, r6, pc}
 801413e:	466a      	mov	r2, sp
 8014140:	f000 f848 	bl	80141d4 <_fstat_r>
 8014144:	2800      	cmp	r0, #0
 8014146:	dbec      	blt.n	8014122 <__swhatbuf_r+0x12>
 8014148:	9901      	ldr	r1, [sp, #4]
 801414a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801414e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8014152:	4259      	negs	r1, r3
 8014154:	4159      	adcs	r1, r3
 8014156:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801415a:	e7eb      	b.n	8014134 <__swhatbuf_r+0x24>

0801415c <__smakebuf_r>:
 801415c:	898b      	ldrh	r3, [r1, #12]
 801415e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014160:	079d      	lsls	r5, r3, #30
 8014162:	4606      	mov	r6, r0
 8014164:	460c      	mov	r4, r1
 8014166:	d507      	bpl.n	8014178 <__smakebuf_r+0x1c>
 8014168:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801416c:	6023      	str	r3, [r4, #0]
 801416e:	6123      	str	r3, [r4, #16]
 8014170:	2301      	movs	r3, #1
 8014172:	6163      	str	r3, [r4, #20]
 8014174:	b002      	add	sp, #8
 8014176:	bd70      	pop	{r4, r5, r6, pc}
 8014178:	ab01      	add	r3, sp, #4
 801417a:	466a      	mov	r2, sp
 801417c:	f7ff ffc8 	bl	8014110 <__swhatbuf_r>
 8014180:	9900      	ldr	r1, [sp, #0]
 8014182:	4605      	mov	r5, r0
 8014184:	4630      	mov	r0, r6
 8014186:	f7fe ff91 	bl	80130ac <_malloc_r>
 801418a:	b948      	cbnz	r0, 80141a0 <__smakebuf_r+0x44>
 801418c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014190:	059a      	lsls	r2, r3, #22
 8014192:	d4ef      	bmi.n	8014174 <__smakebuf_r+0x18>
 8014194:	f023 0303 	bic.w	r3, r3, #3
 8014198:	f043 0302 	orr.w	r3, r3, #2
 801419c:	81a3      	strh	r3, [r4, #12]
 801419e:	e7e3      	b.n	8014168 <__smakebuf_r+0xc>
 80141a0:	89a3      	ldrh	r3, [r4, #12]
 80141a2:	6020      	str	r0, [r4, #0]
 80141a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80141a8:	81a3      	strh	r3, [r4, #12]
 80141aa:	9b00      	ldr	r3, [sp, #0]
 80141ac:	6163      	str	r3, [r4, #20]
 80141ae:	9b01      	ldr	r3, [sp, #4]
 80141b0:	6120      	str	r0, [r4, #16]
 80141b2:	b15b      	cbz	r3, 80141cc <__smakebuf_r+0x70>
 80141b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80141b8:	4630      	mov	r0, r6
 80141ba:	f000 f81d 	bl	80141f8 <_isatty_r>
 80141be:	b128      	cbz	r0, 80141cc <__smakebuf_r+0x70>
 80141c0:	89a3      	ldrh	r3, [r4, #12]
 80141c2:	f023 0303 	bic.w	r3, r3, #3
 80141c6:	f043 0301 	orr.w	r3, r3, #1
 80141ca:	81a3      	strh	r3, [r4, #12]
 80141cc:	89a3      	ldrh	r3, [r4, #12]
 80141ce:	431d      	orrs	r5, r3
 80141d0:	81a5      	strh	r5, [r4, #12]
 80141d2:	e7cf      	b.n	8014174 <__smakebuf_r+0x18>

080141d4 <_fstat_r>:
 80141d4:	b538      	push	{r3, r4, r5, lr}
 80141d6:	4d07      	ldr	r5, [pc, #28]	; (80141f4 <_fstat_r+0x20>)
 80141d8:	2300      	movs	r3, #0
 80141da:	4604      	mov	r4, r0
 80141dc:	4608      	mov	r0, r1
 80141de:	4611      	mov	r1, r2
 80141e0:	602b      	str	r3, [r5, #0]
 80141e2:	f7ee ffe8 	bl	80031b6 <_fstat>
 80141e6:	1c43      	adds	r3, r0, #1
 80141e8:	d102      	bne.n	80141f0 <_fstat_r+0x1c>
 80141ea:	682b      	ldr	r3, [r5, #0]
 80141ec:	b103      	cbz	r3, 80141f0 <_fstat_r+0x1c>
 80141ee:	6023      	str	r3, [r4, #0]
 80141f0:	bd38      	pop	{r3, r4, r5, pc}
 80141f2:	bf00      	nop
 80141f4:	2000284c 	.word	0x2000284c

080141f8 <_isatty_r>:
 80141f8:	b538      	push	{r3, r4, r5, lr}
 80141fa:	4d06      	ldr	r5, [pc, #24]	; (8014214 <_isatty_r+0x1c>)
 80141fc:	2300      	movs	r3, #0
 80141fe:	4604      	mov	r4, r0
 8014200:	4608      	mov	r0, r1
 8014202:	602b      	str	r3, [r5, #0]
 8014204:	f7ee ffe7 	bl	80031d6 <_isatty>
 8014208:	1c43      	adds	r3, r0, #1
 801420a:	d102      	bne.n	8014212 <_isatty_r+0x1a>
 801420c:	682b      	ldr	r3, [r5, #0]
 801420e:	b103      	cbz	r3, 8014212 <_isatty_r+0x1a>
 8014210:	6023      	str	r3, [r4, #0]
 8014212:	bd38      	pop	{r3, r4, r5, pc}
 8014214:	2000284c 	.word	0x2000284c

08014218 <_raise_r>:
 8014218:	291f      	cmp	r1, #31
 801421a:	b538      	push	{r3, r4, r5, lr}
 801421c:	4604      	mov	r4, r0
 801421e:	460d      	mov	r5, r1
 8014220:	d904      	bls.n	801422c <_raise_r+0x14>
 8014222:	2316      	movs	r3, #22
 8014224:	6003      	str	r3, [r0, #0]
 8014226:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801422a:	bd38      	pop	{r3, r4, r5, pc}
 801422c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801422e:	b112      	cbz	r2, 8014236 <_raise_r+0x1e>
 8014230:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014234:	b94b      	cbnz	r3, 801424a <_raise_r+0x32>
 8014236:	4620      	mov	r0, r4
 8014238:	f000 f830 	bl	801429c <_getpid_r>
 801423c:	462a      	mov	r2, r5
 801423e:	4601      	mov	r1, r0
 8014240:	4620      	mov	r0, r4
 8014242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014246:	f000 b817 	b.w	8014278 <_kill_r>
 801424a:	2b01      	cmp	r3, #1
 801424c:	d00a      	beq.n	8014264 <_raise_r+0x4c>
 801424e:	1c59      	adds	r1, r3, #1
 8014250:	d103      	bne.n	801425a <_raise_r+0x42>
 8014252:	2316      	movs	r3, #22
 8014254:	6003      	str	r3, [r0, #0]
 8014256:	2001      	movs	r0, #1
 8014258:	e7e7      	b.n	801422a <_raise_r+0x12>
 801425a:	2400      	movs	r4, #0
 801425c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014260:	4628      	mov	r0, r5
 8014262:	4798      	blx	r3
 8014264:	2000      	movs	r0, #0
 8014266:	e7e0      	b.n	801422a <_raise_r+0x12>

08014268 <raise>:
 8014268:	4b02      	ldr	r3, [pc, #8]	; (8014274 <raise+0xc>)
 801426a:	4601      	mov	r1, r0
 801426c:	6818      	ldr	r0, [r3, #0]
 801426e:	f7ff bfd3 	b.w	8014218 <_raise_r>
 8014272:	bf00      	nop
 8014274:	20000178 	.word	0x20000178

08014278 <_kill_r>:
 8014278:	b538      	push	{r3, r4, r5, lr}
 801427a:	4d07      	ldr	r5, [pc, #28]	; (8014298 <_kill_r+0x20>)
 801427c:	2300      	movs	r3, #0
 801427e:	4604      	mov	r4, r0
 8014280:	4608      	mov	r0, r1
 8014282:	4611      	mov	r1, r2
 8014284:	602b      	str	r3, [r5, #0]
 8014286:	f7ee ff37 	bl	80030f8 <_kill>
 801428a:	1c43      	adds	r3, r0, #1
 801428c:	d102      	bne.n	8014294 <_kill_r+0x1c>
 801428e:	682b      	ldr	r3, [r5, #0]
 8014290:	b103      	cbz	r3, 8014294 <_kill_r+0x1c>
 8014292:	6023      	str	r3, [r4, #0]
 8014294:	bd38      	pop	{r3, r4, r5, pc}
 8014296:	bf00      	nop
 8014298:	2000284c 	.word	0x2000284c

0801429c <_getpid_r>:
 801429c:	f7ee bf24 	b.w	80030e8 <_getpid>

080142a0 <atan2>:
 80142a0:	f000 b802 	b.w	80142a8 <__ieee754_atan2>
 80142a4:	0000      	movs	r0, r0
	...

080142a8 <__ieee754_atan2>:
 80142a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80142ac:	ec57 6b11 	vmov	r6, r7, d1
 80142b0:	4273      	negs	r3, r6
 80142b2:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8014430 <__ieee754_atan2+0x188>
 80142b6:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80142ba:	4333      	orrs	r3, r6
 80142bc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80142c0:	4543      	cmp	r3, r8
 80142c2:	ec51 0b10 	vmov	r0, r1, d0
 80142c6:	ee11 5a10 	vmov	r5, s2
 80142ca:	d80a      	bhi.n	80142e2 <__ieee754_atan2+0x3a>
 80142cc:	4244      	negs	r4, r0
 80142ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80142d2:	4304      	orrs	r4, r0
 80142d4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80142d8:	4544      	cmp	r4, r8
 80142da:	ee10 9a10 	vmov	r9, s0
 80142de:	468e      	mov	lr, r1
 80142e0:	d907      	bls.n	80142f2 <__ieee754_atan2+0x4a>
 80142e2:	4632      	mov	r2, r6
 80142e4:	463b      	mov	r3, r7
 80142e6:	f7eb ffd1 	bl	800028c <__adddf3>
 80142ea:	ec41 0b10 	vmov	d0, r0, r1
 80142ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80142f2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80142f6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80142fa:	4334      	orrs	r4, r6
 80142fc:	d103      	bne.n	8014306 <__ieee754_atan2+0x5e>
 80142fe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014302:	f000 b935 	b.w	8014570 <atan>
 8014306:	17bc      	asrs	r4, r7, #30
 8014308:	f004 0402 	and.w	r4, r4, #2
 801430c:	ea53 0909 	orrs.w	r9, r3, r9
 8014310:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8014314:	d107      	bne.n	8014326 <__ieee754_atan2+0x7e>
 8014316:	2c02      	cmp	r4, #2
 8014318:	d05f      	beq.n	80143da <__ieee754_atan2+0x132>
 801431a:	2c03      	cmp	r4, #3
 801431c:	d1e5      	bne.n	80142ea <__ieee754_atan2+0x42>
 801431e:	a140      	add	r1, pc, #256	; (adr r1, 8014420 <__ieee754_atan2+0x178>)
 8014320:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014324:	e7e1      	b.n	80142ea <__ieee754_atan2+0x42>
 8014326:	4315      	orrs	r5, r2
 8014328:	d106      	bne.n	8014338 <__ieee754_atan2+0x90>
 801432a:	f1be 0f00 	cmp.w	lr, #0
 801432e:	da5f      	bge.n	80143f0 <__ieee754_atan2+0x148>
 8014330:	a13d      	add	r1, pc, #244	; (adr r1, 8014428 <__ieee754_atan2+0x180>)
 8014332:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014336:	e7d8      	b.n	80142ea <__ieee754_atan2+0x42>
 8014338:	4542      	cmp	r2, r8
 801433a:	d10f      	bne.n	801435c <__ieee754_atan2+0xb4>
 801433c:	4293      	cmp	r3, r2
 801433e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8014342:	d107      	bne.n	8014354 <__ieee754_atan2+0xac>
 8014344:	2c02      	cmp	r4, #2
 8014346:	d84c      	bhi.n	80143e2 <__ieee754_atan2+0x13a>
 8014348:	4b33      	ldr	r3, [pc, #204]	; (8014418 <__ieee754_atan2+0x170>)
 801434a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801434e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8014352:	e7ca      	b.n	80142ea <__ieee754_atan2+0x42>
 8014354:	2c02      	cmp	r4, #2
 8014356:	d848      	bhi.n	80143ea <__ieee754_atan2+0x142>
 8014358:	4b30      	ldr	r3, [pc, #192]	; (801441c <__ieee754_atan2+0x174>)
 801435a:	e7f6      	b.n	801434a <__ieee754_atan2+0xa2>
 801435c:	4543      	cmp	r3, r8
 801435e:	d0e4      	beq.n	801432a <__ieee754_atan2+0x82>
 8014360:	1a9b      	subs	r3, r3, r2
 8014362:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8014366:	ea4f 5223 	mov.w	r2, r3, asr #20
 801436a:	da1e      	bge.n	80143aa <__ieee754_atan2+0x102>
 801436c:	2f00      	cmp	r7, #0
 801436e:	da01      	bge.n	8014374 <__ieee754_atan2+0xcc>
 8014370:	323c      	adds	r2, #60	; 0x3c
 8014372:	db1e      	blt.n	80143b2 <__ieee754_atan2+0x10a>
 8014374:	4632      	mov	r2, r6
 8014376:	463b      	mov	r3, r7
 8014378:	f7ec fa68 	bl	800084c <__aeabi_ddiv>
 801437c:	ec41 0b10 	vmov	d0, r0, r1
 8014380:	f000 fa96 	bl	80148b0 <fabs>
 8014384:	f000 f8f4 	bl	8014570 <atan>
 8014388:	ec51 0b10 	vmov	r0, r1, d0
 801438c:	2c01      	cmp	r4, #1
 801438e:	d013      	beq.n	80143b8 <__ieee754_atan2+0x110>
 8014390:	2c02      	cmp	r4, #2
 8014392:	d015      	beq.n	80143c0 <__ieee754_atan2+0x118>
 8014394:	2c00      	cmp	r4, #0
 8014396:	d0a8      	beq.n	80142ea <__ieee754_atan2+0x42>
 8014398:	a317      	add	r3, pc, #92	; (adr r3, 80143f8 <__ieee754_atan2+0x150>)
 801439a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801439e:	f7eb ff73 	bl	8000288 <__aeabi_dsub>
 80143a2:	a317      	add	r3, pc, #92	; (adr r3, 8014400 <__ieee754_atan2+0x158>)
 80143a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143a8:	e014      	b.n	80143d4 <__ieee754_atan2+0x12c>
 80143aa:	a117      	add	r1, pc, #92	; (adr r1, 8014408 <__ieee754_atan2+0x160>)
 80143ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143b0:	e7ec      	b.n	801438c <__ieee754_atan2+0xe4>
 80143b2:	2000      	movs	r0, #0
 80143b4:	2100      	movs	r1, #0
 80143b6:	e7e9      	b.n	801438c <__ieee754_atan2+0xe4>
 80143b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80143bc:	4619      	mov	r1, r3
 80143be:	e794      	b.n	80142ea <__ieee754_atan2+0x42>
 80143c0:	a30d      	add	r3, pc, #52	; (adr r3, 80143f8 <__ieee754_atan2+0x150>)
 80143c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143c6:	f7eb ff5f 	bl	8000288 <__aeabi_dsub>
 80143ca:	4602      	mov	r2, r0
 80143cc:	460b      	mov	r3, r1
 80143ce:	a10c      	add	r1, pc, #48	; (adr r1, 8014400 <__ieee754_atan2+0x158>)
 80143d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143d4:	f7eb ff58 	bl	8000288 <__aeabi_dsub>
 80143d8:	e787      	b.n	80142ea <__ieee754_atan2+0x42>
 80143da:	a109      	add	r1, pc, #36	; (adr r1, 8014400 <__ieee754_atan2+0x158>)
 80143dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143e0:	e783      	b.n	80142ea <__ieee754_atan2+0x42>
 80143e2:	a10b      	add	r1, pc, #44	; (adr r1, 8014410 <__ieee754_atan2+0x168>)
 80143e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143e8:	e77f      	b.n	80142ea <__ieee754_atan2+0x42>
 80143ea:	2000      	movs	r0, #0
 80143ec:	2100      	movs	r1, #0
 80143ee:	e77c      	b.n	80142ea <__ieee754_atan2+0x42>
 80143f0:	a105      	add	r1, pc, #20	; (adr r1, 8014408 <__ieee754_atan2+0x160>)
 80143f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80143f6:	e778      	b.n	80142ea <__ieee754_atan2+0x42>
 80143f8:	33145c07 	.word	0x33145c07
 80143fc:	3ca1a626 	.word	0x3ca1a626
 8014400:	54442d18 	.word	0x54442d18
 8014404:	400921fb 	.word	0x400921fb
 8014408:	54442d18 	.word	0x54442d18
 801440c:	3ff921fb 	.word	0x3ff921fb
 8014410:	54442d18 	.word	0x54442d18
 8014414:	3fe921fb 	.word	0x3fe921fb
 8014418:	08015bb8 	.word	0x08015bb8
 801441c:	08015bd0 	.word	0x08015bd0
 8014420:	54442d18 	.word	0x54442d18
 8014424:	c00921fb 	.word	0xc00921fb
 8014428:	54442d18 	.word	0x54442d18
 801442c:	bff921fb 	.word	0xbff921fb
 8014430:	7ff00000 	.word	0x7ff00000

08014434 <pow>:
 8014434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014436:	ed2d 8b02 	vpush	{d8}
 801443a:	eeb0 8a40 	vmov.f32	s16, s0
 801443e:	eef0 8a60 	vmov.f32	s17, s1
 8014442:	ec55 4b11 	vmov	r4, r5, d1
 8014446:	f000 fb6b 	bl	8014b20 <__ieee754_pow>
 801444a:	4622      	mov	r2, r4
 801444c:	462b      	mov	r3, r5
 801444e:	4620      	mov	r0, r4
 8014450:	4629      	mov	r1, r5
 8014452:	ec57 6b10 	vmov	r6, r7, d0
 8014456:	f7ec fb69 	bl	8000b2c <__aeabi_dcmpun>
 801445a:	2800      	cmp	r0, #0
 801445c:	d13b      	bne.n	80144d6 <pow+0xa2>
 801445e:	ec51 0b18 	vmov	r0, r1, d8
 8014462:	2200      	movs	r2, #0
 8014464:	2300      	movs	r3, #0
 8014466:	f7ec fb2f 	bl	8000ac8 <__aeabi_dcmpeq>
 801446a:	b1b8      	cbz	r0, 801449c <pow+0x68>
 801446c:	2200      	movs	r2, #0
 801446e:	2300      	movs	r3, #0
 8014470:	4620      	mov	r0, r4
 8014472:	4629      	mov	r1, r5
 8014474:	f7ec fb28 	bl	8000ac8 <__aeabi_dcmpeq>
 8014478:	2800      	cmp	r0, #0
 801447a:	d146      	bne.n	801450a <pow+0xd6>
 801447c:	ec45 4b10 	vmov	d0, r4, r5
 8014480:	f000 fa1f 	bl	80148c2 <finite>
 8014484:	b338      	cbz	r0, 80144d6 <pow+0xa2>
 8014486:	2200      	movs	r2, #0
 8014488:	2300      	movs	r3, #0
 801448a:	4620      	mov	r0, r4
 801448c:	4629      	mov	r1, r5
 801448e:	f7ec fb25 	bl	8000adc <__aeabi_dcmplt>
 8014492:	b300      	cbz	r0, 80144d6 <pow+0xa2>
 8014494:	f7fd fdd6 	bl	8012044 <__errno>
 8014498:	2322      	movs	r3, #34	; 0x22
 801449a:	e01b      	b.n	80144d4 <pow+0xa0>
 801449c:	ec47 6b10 	vmov	d0, r6, r7
 80144a0:	f000 fa0f 	bl	80148c2 <finite>
 80144a4:	b9e0      	cbnz	r0, 80144e0 <pow+0xac>
 80144a6:	eeb0 0a48 	vmov.f32	s0, s16
 80144aa:	eef0 0a68 	vmov.f32	s1, s17
 80144ae:	f000 fa08 	bl	80148c2 <finite>
 80144b2:	b1a8      	cbz	r0, 80144e0 <pow+0xac>
 80144b4:	ec45 4b10 	vmov	d0, r4, r5
 80144b8:	f000 fa03 	bl	80148c2 <finite>
 80144bc:	b180      	cbz	r0, 80144e0 <pow+0xac>
 80144be:	4632      	mov	r2, r6
 80144c0:	463b      	mov	r3, r7
 80144c2:	4630      	mov	r0, r6
 80144c4:	4639      	mov	r1, r7
 80144c6:	f7ec fb31 	bl	8000b2c <__aeabi_dcmpun>
 80144ca:	2800      	cmp	r0, #0
 80144cc:	d0e2      	beq.n	8014494 <pow+0x60>
 80144ce:	f7fd fdb9 	bl	8012044 <__errno>
 80144d2:	2321      	movs	r3, #33	; 0x21
 80144d4:	6003      	str	r3, [r0, #0]
 80144d6:	ecbd 8b02 	vpop	{d8}
 80144da:	ec47 6b10 	vmov	d0, r6, r7
 80144de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144e0:	2200      	movs	r2, #0
 80144e2:	2300      	movs	r3, #0
 80144e4:	4630      	mov	r0, r6
 80144e6:	4639      	mov	r1, r7
 80144e8:	f7ec faee 	bl	8000ac8 <__aeabi_dcmpeq>
 80144ec:	2800      	cmp	r0, #0
 80144ee:	d0f2      	beq.n	80144d6 <pow+0xa2>
 80144f0:	eeb0 0a48 	vmov.f32	s0, s16
 80144f4:	eef0 0a68 	vmov.f32	s1, s17
 80144f8:	f000 f9e3 	bl	80148c2 <finite>
 80144fc:	2800      	cmp	r0, #0
 80144fe:	d0ea      	beq.n	80144d6 <pow+0xa2>
 8014500:	ec45 4b10 	vmov	d0, r4, r5
 8014504:	f000 f9dd 	bl	80148c2 <finite>
 8014508:	e7c3      	b.n	8014492 <pow+0x5e>
 801450a:	4f01      	ldr	r7, [pc, #4]	; (8014510 <pow+0xdc>)
 801450c:	2600      	movs	r6, #0
 801450e:	e7e2      	b.n	80144d6 <pow+0xa2>
 8014510:	3ff00000 	.word	0x3ff00000

08014514 <sqrt>:
 8014514:	b538      	push	{r3, r4, r5, lr}
 8014516:	ed2d 8b02 	vpush	{d8}
 801451a:	ec55 4b10 	vmov	r4, r5, d0
 801451e:	f000 f9db 	bl	80148d8 <__ieee754_sqrt>
 8014522:	4622      	mov	r2, r4
 8014524:	462b      	mov	r3, r5
 8014526:	4620      	mov	r0, r4
 8014528:	4629      	mov	r1, r5
 801452a:	eeb0 8a40 	vmov.f32	s16, s0
 801452e:	eef0 8a60 	vmov.f32	s17, s1
 8014532:	f7ec fafb 	bl	8000b2c <__aeabi_dcmpun>
 8014536:	b990      	cbnz	r0, 801455e <sqrt+0x4a>
 8014538:	2200      	movs	r2, #0
 801453a:	2300      	movs	r3, #0
 801453c:	4620      	mov	r0, r4
 801453e:	4629      	mov	r1, r5
 8014540:	f7ec facc 	bl	8000adc <__aeabi_dcmplt>
 8014544:	b158      	cbz	r0, 801455e <sqrt+0x4a>
 8014546:	f7fd fd7d 	bl	8012044 <__errno>
 801454a:	2321      	movs	r3, #33	; 0x21
 801454c:	6003      	str	r3, [r0, #0]
 801454e:	2200      	movs	r2, #0
 8014550:	2300      	movs	r3, #0
 8014552:	4610      	mov	r0, r2
 8014554:	4619      	mov	r1, r3
 8014556:	f7ec f979 	bl	800084c <__aeabi_ddiv>
 801455a:	ec41 0b18 	vmov	d8, r0, r1
 801455e:	eeb0 0a48 	vmov.f32	s0, s16
 8014562:	eef0 0a68 	vmov.f32	s1, s17
 8014566:	ecbd 8b02 	vpop	{d8}
 801456a:	bd38      	pop	{r3, r4, r5, pc}
 801456c:	0000      	movs	r0, r0
	...

08014570 <atan>:
 8014570:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014574:	ec55 4b10 	vmov	r4, r5, d0
 8014578:	4bc3      	ldr	r3, [pc, #780]	; (8014888 <atan+0x318>)
 801457a:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801457e:	429e      	cmp	r6, r3
 8014580:	46ab      	mov	fp, r5
 8014582:	dd18      	ble.n	80145b6 <atan+0x46>
 8014584:	4bc1      	ldr	r3, [pc, #772]	; (801488c <atan+0x31c>)
 8014586:	429e      	cmp	r6, r3
 8014588:	dc01      	bgt.n	801458e <atan+0x1e>
 801458a:	d109      	bne.n	80145a0 <atan+0x30>
 801458c:	b144      	cbz	r4, 80145a0 <atan+0x30>
 801458e:	4622      	mov	r2, r4
 8014590:	462b      	mov	r3, r5
 8014592:	4620      	mov	r0, r4
 8014594:	4629      	mov	r1, r5
 8014596:	f7eb fe79 	bl	800028c <__adddf3>
 801459a:	4604      	mov	r4, r0
 801459c:	460d      	mov	r5, r1
 801459e:	e006      	b.n	80145ae <atan+0x3e>
 80145a0:	f1bb 0f00 	cmp.w	fp, #0
 80145a4:	f300 8131 	bgt.w	801480a <atan+0x29a>
 80145a8:	a59b      	add	r5, pc, #620	; (adr r5, 8014818 <atan+0x2a8>)
 80145aa:	e9d5 4500 	ldrd	r4, r5, [r5]
 80145ae:	ec45 4b10 	vmov	d0, r4, r5
 80145b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145b6:	4bb6      	ldr	r3, [pc, #728]	; (8014890 <atan+0x320>)
 80145b8:	429e      	cmp	r6, r3
 80145ba:	dc14      	bgt.n	80145e6 <atan+0x76>
 80145bc:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 80145c0:	429e      	cmp	r6, r3
 80145c2:	dc0d      	bgt.n	80145e0 <atan+0x70>
 80145c4:	a396      	add	r3, pc, #600	; (adr r3, 8014820 <atan+0x2b0>)
 80145c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145ca:	ee10 0a10 	vmov	r0, s0
 80145ce:	4629      	mov	r1, r5
 80145d0:	f7eb fe5c 	bl	800028c <__adddf3>
 80145d4:	4baf      	ldr	r3, [pc, #700]	; (8014894 <atan+0x324>)
 80145d6:	2200      	movs	r2, #0
 80145d8:	f7ec fa9e 	bl	8000b18 <__aeabi_dcmpgt>
 80145dc:	2800      	cmp	r0, #0
 80145de:	d1e6      	bne.n	80145ae <atan+0x3e>
 80145e0:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 80145e4:	e02b      	b.n	801463e <atan+0xce>
 80145e6:	f000 f963 	bl	80148b0 <fabs>
 80145ea:	4bab      	ldr	r3, [pc, #684]	; (8014898 <atan+0x328>)
 80145ec:	429e      	cmp	r6, r3
 80145ee:	ec55 4b10 	vmov	r4, r5, d0
 80145f2:	f300 80bf 	bgt.w	8014774 <atan+0x204>
 80145f6:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 80145fa:	429e      	cmp	r6, r3
 80145fc:	f300 80a0 	bgt.w	8014740 <atan+0x1d0>
 8014600:	ee10 2a10 	vmov	r2, s0
 8014604:	ee10 0a10 	vmov	r0, s0
 8014608:	462b      	mov	r3, r5
 801460a:	4629      	mov	r1, r5
 801460c:	f7eb fe3e 	bl	800028c <__adddf3>
 8014610:	4ba0      	ldr	r3, [pc, #640]	; (8014894 <atan+0x324>)
 8014612:	2200      	movs	r2, #0
 8014614:	f7eb fe38 	bl	8000288 <__aeabi_dsub>
 8014618:	2200      	movs	r2, #0
 801461a:	4606      	mov	r6, r0
 801461c:	460f      	mov	r7, r1
 801461e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014622:	4620      	mov	r0, r4
 8014624:	4629      	mov	r1, r5
 8014626:	f7eb fe31 	bl	800028c <__adddf3>
 801462a:	4602      	mov	r2, r0
 801462c:	460b      	mov	r3, r1
 801462e:	4630      	mov	r0, r6
 8014630:	4639      	mov	r1, r7
 8014632:	f7ec f90b 	bl	800084c <__aeabi_ddiv>
 8014636:	f04f 0a00 	mov.w	sl, #0
 801463a:	4604      	mov	r4, r0
 801463c:	460d      	mov	r5, r1
 801463e:	4622      	mov	r2, r4
 8014640:	462b      	mov	r3, r5
 8014642:	4620      	mov	r0, r4
 8014644:	4629      	mov	r1, r5
 8014646:	f7eb ffd7 	bl	80005f8 <__aeabi_dmul>
 801464a:	4602      	mov	r2, r0
 801464c:	460b      	mov	r3, r1
 801464e:	4680      	mov	r8, r0
 8014650:	4689      	mov	r9, r1
 8014652:	f7eb ffd1 	bl	80005f8 <__aeabi_dmul>
 8014656:	a374      	add	r3, pc, #464	; (adr r3, 8014828 <atan+0x2b8>)
 8014658:	e9d3 2300 	ldrd	r2, r3, [r3]
 801465c:	4606      	mov	r6, r0
 801465e:	460f      	mov	r7, r1
 8014660:	f7eb ffca 	bl	80005f8 <__aeabi_dmul>
 8014664:	a372      	add	r3, pc, #456	; (adr r3, 8014830 <atan+0x2c0>)
 8014666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801466a:	f7eb fe0f 	bl	800028c <__adddf3>
 801466e:	4632      	mov	r2, r6
 8014670:	463b      	mov	r3, r7
 8014672:	f7eb ffc1 	bl	80005f8 <__aeabi_dmul>
 8014676:	a370      	add	r3, pc, #448	; (adr r3, 8014838 <atan+0x2c8>)
 8014678:	e9d3 2300 	ldrd	r2, r3, [r3]
 801467c:	f7eb fe06 	bl	800028c <__adddf3>
 8014680:	4632      	mov	r2, r6
 8014682:	463b      	mov	r3, r7
 8014684:	f7eb ffb8 	bl	80005f8 <__aeabi_dmul>
 8014688:	a36d      	add	r3, pc, #436	; (adr r3, 8014840 <atan+0x2d0>)
 801468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801468e:	f7eb fdfd 	bl	800028c <__adddf3>
 8014692:	4632      	mov	r2, r6
 8014694:	463b      	mov	r3, r7
 8014696:	f7eb ffaf 	bl	80005f8 <__aeabi_dmul>
 801469a:	a36b      	add	r3, pc, #428	; (adr r3, 8014848 <atan+0x2d8>)
 801469c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146a0:	f7eb fdf4 	bl	800028c <__adddf3>
 80146a4:	4632      	mov	r2, r6
 80146a6:	463b      	mov	r3, r7
 80146a8:	f7eb ffa6 	bl	80005f8 <__aeabi_dmul>
 80146ac:	a368      	add	r3, pc, #416	; (adr r3, 8014850 <atan+0x2e0>)
 80146ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146b2:	f7eb fdeb 	bl	800028c <__adddf3>
 80146b6:	4642      	mov	r2, r8
 80146b8:	464b      	mov	r3, r9
 80146ba:	f7eb ff9d 	bl	80005f8 <__aeabi_dmul>
 80146be:	a366      	add	r3, pc, #408	; (adr r3, 8014858 <atan+0x2e8>)
 80146c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146c4:	4680      	mov	r8, r0
 80146c6:	4689      	mov	r9, r1
 80146c8:	4630      	mov	r0, r6
 80146ca:	4639      	mov	r1, r7
 80146cc:	f7eb ff94 	bl	80005f8 <__aeabi_dmul>
 80146d0:	a363      	add	r3, pc, #396	; (adr r3, 8014860 <atan+0x2f0>)
 80146d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146d6:	f7eb fdd7 	bl	8000288 <__aeabi_dsub>
 80146da:	4632      	mov	r2, r6
 80146dc:	463b      	mov	r3, r7
 80146de:	f7eb ff8b 	bl	80005f8 <__aeabi_dmul>
 80146e2:	a361      	add	r3, pc, #388	; (adr r3, 8014868 <atan+0x2f8>)
 80146e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146e8:	f7eb fdce 	bl	8000288 <__aeabi_dsub>
 80146ec:	4632      	mov	r2, r6
 80146ee:	463b      	mov	r3, r7
 80146f0:	f7eb ff82 	bl	80005f8 <__aeabi_dmul>
 80146f4:	a35e      	add	r3, pc, #376	; (adr r3, 8014870 <atan+0x300>)
 80146f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146fa:	f7eb fdc5 	bl	8000288 <__aeabi_dsub>
 80146fe:	4632      	mov	r2, r6
 8014700:	463b      	mov	r3, r7
 8014702:	f7eb ff79 	bl	80005f8 <__aeabi_dmul>
 8014706:	a35c      	add	r3, pc, #368	; (adr r3, 8014878 <atan+0x308>)
 8014708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801470c:	f7eb fdbc 	bl	8000288 <__aeabi_dsub>
 8014710:	4632      	mov	r2, r6
 8014712:	463b      	mov	r3, r7
 8014714:	f7eb ff70 	bl	80005f8 <__aeabi_dmul>
 8014718:	4602      	mov	r2, r0
 801471a:	460b      	mov	r3, r1
 801471c:	4640      	mov	r0, r8
 801471e:	4649      	mov	r1, r9
 8014720:	f7eb fdb4 	bl	800028c <__adddf3>
 8014724:	4622      	mov	r2, r4
 8014726:	462b      	mov	r3, r5
 8014728:	f7eb ff66 	bl	80005f8 <__aeabi_dmul>
 801472c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8014730:	4602      	mov	r2, r0
 8014732:	460b      	mov	r3, r1
 8014734:	d14b      	bne.n	80147ce <atan+0x25e>
 8014736:	4620      	mov	r0, r4
 8014738:	4629      	mov	r1, r5
 801473a:	f7eb fda5 	bl	8000288 <__aeabi_dsub>
 801473e:	e72c      	b.n	801459a <atan+0x2a>
 8014740:	ee10 0a10 	vmov	r0, s0
 8014744:	4b53      	ldr	r3, [pc, #332]	; (8014894 <atan+0x324>)
 8014746:	2200      	movs	r2, #0
 8014748:	4629      	mov	r1, r5
 801474a:	f7eb fd9d 	bl	8000288 <__aeabi_dsub>
 801474e:	4b51      	ldr	r3, [pc, #324]	; (8014894 <atan+0x324>)
 8014750:	4606      	mov	r6, r0
 8014752:	460f      	mov	r7, r1
 8014754:	2200      	movs	r2, #0
 8014756:	4620      	mov	r0, r4
 8014758:	4629      	mov	r1, r5
 801475a:	f7eb fd97 	bl	800028c <__adddf3>
 801475e:	4602      	mov	r2, r0
 8014760:	460b      	mov	r3, r1
 8014762:	4630      	mov	r0, r6
 8014764:	4639      	mov	r1, r7
 8014766:	f7ec f871 	bl	800084c <__aeabi_ddiv>
 801476a:	f04f 0a01 	mov.w	sl, #1
 801476e:	4604      	mov	r4, r0
 8014770:	460d      	mov	r5, r1
 8014772:	e764      	b.n	801463e <atan+0xce>
 8014774:	4b49      	ldr	r3, [pc, #292]	; (801489c <atan+0x32c>)
 8014776:	429e      	cmp	r6, r3
 8014778:	da1d      	bge.n	80147b6 <atan+0x246>
 801477a:	ee10 0a10 	vmov	r0, s0
 801477e:	4b48      	ldr	r3, [pc, #288]	; (80148a0 <atan+0x330>)
 8014780:	2200      	movs	r2, #0
 8014782:	4629      	mov	r1, r5
 8014784:	f7eb fd80 	bl	8000288 <__aeabi_dsub>
 8014788:	4b45      	ldr	r3, [pc, #276]	; (80148a0 <atan+0x330>)
 801478a:	4606      	mov	r6, r0
 801478c:	460f      	mov	r7, r1
 801478e:	2200      	movs	r2, #0
 8014790:	4620      	mov	r0, r4
 8014792:	4629      	mov	r1, r5
 8014794:	f7eb ff30 	bl	80005f8 <__aeabi_dmul>
 8014798:	4b3e      	ldr	r3, [pc, #248]	; (8014894 <atan+0x324>)
 801479a:	2200      	movs	r2, #0
 801479c:	f7eb fd76 	bl	800028c <__adddf3>
 80147a0:	4602      	mov	r2, r0
 80147a2:	460b      	mov	r3, r1
 80147a4:	4630      	mov	r0, r6
 80147a6:	4639      	mov	r1, r7
 80147a8:	f7ec f850 	bl	800084c <__aeabi_ddiv>
 80147ac:	f04f 0a02 	mov.w	sl, #2
 80147b0:	4604      	mov	r4, r0
 80147b2:	460d      	mov	r5, r1
 80147b4:	e743      	b.n	801463e <atan+0xce>
 80147b6:	462b      	mov	r3, r5
 80147b8:	ee10 2a10 	vmov	r2, s0
 80147bc:	4939      	ldr	r1, [pc, #228]	; (80148a4 <atan+0x334>)
 80147be:	2000      	movs	r0, #0
 80147c0:	f7ec f844 	bl	800084c <__aeabi_ddiv>
 80147c4:	f04f 0a03 	mov.w	sl, #3
 80147c8:	4604      	mov	r4, r0
 80147ca:	460d      	mov	r5, r1
 80147cc:	e737      	b.n	801463e <atan+0xce>
 80147ce:	4b36      	ldr	r3, [pc, #216]	; (80148a8 <atan+0x338>)
 80147d0:	4e36      	ldr	r6, [pc, #216]	; (80148ac <atan+0x33c>)
 80147d2:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80147d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147da:	f7eb fd55 	bl	8000288 <__aeabi_dsub>
 80147de:	4622      	mov	r2, r4
 80147e0:	462b      	mov	r3, r5
 80147e2:	f7eb fd51 	bl	8000288 <__aeabi_dsub>
 80147e6:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80147ea:	4602      	mov	r2, r0
 80147ec:	460b      	mov	r3, r1
 80147ee:	e9d6 0100 	ldrd	r0, r1, [r6]
 80147f2:	f7eb fd49 	bl	8000288 <__aeabi_dsub>
 80147f6:	f1bb 0f00 	cmp.w	fp, #0
 80147fa:	4604      	mov	r4, r0
 80147fc:	460d      	mov	r5, r1
 80147fe:	f6bf aed6 	bge.w	80145ae <atan+0x3e>
 8014802:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014806:	461d      	mov	r5, r3
 8014808:	e6d1      	b.n	80145ae <atan+0x3e>
 801480a:	a51d      	add	r5, pc, #116	; (adr r5, 8014880 <atan+0x310>)
 801480c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014810:	e6cd      	b.n	80145ae <atan+0x3e>
 8014812:	bf00      	nop
 8014814:	f3af 8000 	nop.w
 8014818:	54442d18 	.word	0x54442d18
 801481c:	bff921fb 	.word	0xbff921fb
 8014820:	8800759c 	.word	0x8800759c
 8014824:	7e37e43c 	.word	0x7e37e43c
 8014828:	e322da11 	.word	0xe322da11
 801482c:	3f90ad3a 	.word	0x3f90ad3a
 8014830:	24760deb 	.word	0x24760deb
 8014834:	3fa97b4b 	.word	0x3fa97b4b
 8014838:	a0d03d51 	.word	0xa0d03d51
 801483c:	3fb10d66 	.word	0x3fb10d66
 8014840:	c54c206e 	.word	0xc54c206e
 8014844:	3fb745cd 	.word	0x3fb745cd
 8014848:	920083ff 	.word	0x920083ff
 801484c:	3fc24924 	.word	0x3fc24924
 8014850:	5555550d 	.word	0x5555550d
 8014854:	3fd55555 	.word	0x3fd55555
 8014858:	2c6a6c2f 	.word	0x2c6a6c2f
 801485c:	bfa2b444 	.word	0xbfa2b444
 8014860:	52defd9a 	.word	0x52defd9a
 8014864:	3fadde2d 	.word	0x3fadde2d
 8014868:	af749a6d 	.word	0xaf749a6d
 801486c:	3fb3b0f2 	.word	0x3fb3b0f2
 8014870:	fe231671 	.word	0xfe231671
 8014874:	3fbc71c6 	.word	0x3fbc71c6
 8014878:	9998ebc4 	.word	0x9998ebc4
 801487c:	3fc99999 	.word	0x3fc99999
 8014880:	54442d18 	.word	0x54442d18
 8014884:	3ff921fb 	.word	0x3ff921fb
 8014888:	440fffff 	.word	0x440fffff
 801488c:	7ff00000 	.word	0x7ff00000
 8014890:	3fdbffff 	.word	0x3fdbffff
 8014894:	3ff00000 	.word	0x3ff00000
 8014898:	3ff2ffff 	.word	0x3ff2ffff
 801489c:	40038000 	.word	0x40038000
 80148a0:	3ff80000 	.word	0x3ff80000
 80148a4:	bff00000 	.word	0xbff00000
 80148a8:	08015c08 	.word	0x08015c08
 80148ac:	08015be8 	.word	0x08015be8

080148b0 <fabs>:
 80148b0:	ec51 0b10 	vmov	r0, r1, d0
 80148b4:	ee10 2a10 	vmov	r2, s0
 80148b8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80148bc:	ec43 2b10 	vmov	d0, r2, r3
 80148c0:	4770      	bx	lr

080148c2 <finite>:
 80148c2:	b082      	sub	sp, #8
 80148c4:	ed8d 0b00 	vstr	d0, [sp]
 80148c8:	9801      	ldr	r0, [sp, #4]
 80148ca:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80148ce:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80148d2:	0fc0      	lsrs	r0, r0, #31
 80148d4:	b002      	add	sp, #8
 80148d6:	4770      	bx	lr

080148d8 <__ieee754_sqrt>:
 80148d8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80148dc:	ec55 4b10 	vmov	r4, r5, d0
 80148e0:	4e67      	ldr	r6, [pc, #412]	; (8014a80 <__ieee754_sqrt+0x1a8>)
 80148e2:	43ae      	bics	r6, r5
 80148e4:	ee10 0a10 	vmov	r0, s0
 80148e8:	ee10 2a10 	vmov	r2, s0
 80148ec:	4629      	mov	r1, r5
 80148ee:	462b      	mov	r3, r5
 80148f0:	d10d      	bne.n	801490e <__ieee754_sqrt+0x36>
 80148f2:	f7eb fe81 	bl	80005f8 <__aeabi_dmul>
 80148f6:	4602      	mov	r2, r0
 80148f8:	460b      	mov	r3, r1
 80148fa:	4620      	mov	r0, r4
 80148fc:	4629      	mov	r1, r5
 80148fe:	f7eb fcc5 	bl	800028c <__adddf3>
 8014902:	4604      	mov	r4, r0
 8014904:	460d      	mov	r5, r1
 8014906:	ec45 4b10 	vmov	d0, r4, r5
 801490a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801490e:	2d00      	cmp	r5, #0
 8014910:	dc0b      	bgt.n	801492a <__ieee754_sqrt+0x52>
 8014912:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014916:	4326      	orrs	r6, r4
 8014918:	d0f5      	beq.n	8014906 <__ieee754_sqrt+0x2e>
 801491a:	b135      	cbz	r5, 801492a <__ieee754_sqrt+0x52>
 801491c:	f7eb fcb4 	bl	8000288 <__aeabi_dsub>
 8014920:	4602      	mov	r2, r0
 8014922:	460b      	mov	r3, r1
 8014924:	f7eb ff92 	bl	800084c <__aeabi_ddiv>
 8014928:	e7eb      	b.n	8014902 <__ieee754_sqrt+0x2a>
 801492a:	1509      	asrs	r1, r1, #20
 801492c:	f000 808d 	beq.w	8014a4a <__ieee754_sqrt+0x172>
 8014930:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014934:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8014938:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801493c:	07c9      	lsls	r1, r1, #31
 801493e:	bf5c      	itt	pl
 8014940:	005b      	lslpl	r3, r3, #1
 8014942:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 8014946:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801494a:	bf58      	it	pl
 801494c:	0052      	lslpl	r2, r2, #1
 801494e:	2500      	movs	r5, #0
 8014950:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014954:	1076      	asrs	r6, r6, #1
 8014956:	0052      	lsls	r2, r2, #1
 8014958:	f04f 0e16 	mov.w	lr, #22
 801495c:	46ac      	mov	ip, r5
 801495e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8014962:	eb0c 0001 	add.w	r0, ip, r1
 8014966:	4298      	cmp	r0, r3
 8014968:	bfde      	ittt	le
 801496a:	1a1b      	suble	r3, r3, r0
 801496c:	eb00 0c01 	addle.w	ip, r0, r1
 8014970:	186d      	addle	r5, r5, r1
 8014972:	005b      	lsls	r3, r3, #1
 8014974:	f1be 0e01 	subs.w	lr, lr, #1
 8014978:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801497c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014980:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8014984:	d1ed      	bne.n	8014962 <__ieee754_sqrt+0x8a>
 8014986:	4674      	mov	r4, lr
 8014988:	2720      	movs	r7, #32
 801498a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801498e:	4563      	cmp	r3, ip
 8014990:	eb01 000e 	add.w	r0, r1, lr
 8014994:	dc02      	bgt.n	801499c <__ieee754_sqrt+0xc4>
 8014996:	d113      	bne.n	80149c0 <__ieee754_sqrt+0xe8>
 8014998:	4290      	cmp	r0, r2
 801499a:	d811      	bhi.n	80149c0 <__ieee754_sqrt+0xe8>
 801499c:	2800      	cmp	r0, #0
 801499e:	eb00 0e01 	add.w	lr, r0, r1
 80149a2:	da57      	bge.n	8014a54 <__ieee754_sqrt+0x17c>
 80149a4:	f1be 0f00 	cmp.w	lr, #0
 80149a8:	db54      	blt.n	8014a54 <__ieee754_sqrt+0x17c>
 80149aa:	f10c 0801 	add.w	r8, ip, #1
 80149ae:	eba3 030c 	sub.w	r3, r3, ip
 80149b2:	4290      	cmp	r0, r2
 80149b4:	bf88      	it	hi
 80149b6:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80149ba:	1a12      	subs	r2, r2, r0
 80149bc:	440c      	add	r4, r1
 80149be:	46c4      	mov	ip, r8
 80149c0:	005b      	lsls	r3, r3, #1
 80149c2:	3f01      	subs	r7, #1
 80149c4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80149c8:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80149cc:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80149d0:	d1dd      	bne.n	801498e <__ieee754_sqrt+0xb6>
 80149d2:	4313      	orrs	r3, r2
 80149d4:	d01b      	beq.n	8014a0e <__ieee754_sqrt+0x136>
 80149d6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8014a84 <__ieee754_sqrt+0x1ac>
 80149da:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8014a88 <__ieee754_sqrt+0x1b0>
 80149de:	e9da 0100 	ldrd	r0, r1, [sl]
 80149e2:	e9db 2300 	ldrd	r2, r3, [fp]
 80149e6:	f7eb fc4f 	bl	8000288 <__aeabi_dsub>
 80149ea:	e9da 8900 	ldrd	r8, r9, [sl]
 80149ee:	4602      	mov	r2, r0
 80149f0:	460b      	mov	r3, r1
 80149f2:	4640      	mov	r0, r8
 80149f4:	4649      	mov	r1, r9
 80149f6:	f7ec f87b 	bl	8000af0 <__aeabi_dcmple>
 80149fa:	b140      	cbz	r0, 8014a0e <__ieee754_sqrt+0x136>
 80149fc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8014a00:	e9da 0100 	ldrd	r0, r1, [sl]
 8014a04:	e9db 2300 	ldrd	r2, r3, [fp]
 8014a08:	d126      	bne.n	8014a58 <__ieee754_sqrt+0x180>
 8014a0a:	3501      	adds	r5, #1
 8014a0c:	463c      	mov	r4, r7
 8014a0e:	106a      	asrs	r2, r5, #1
 8014a10:	0863      	lsrs	r3, r4, #1
 8014a12:	07e9      	lsls	r1, r5, #31
 8014a14:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8014a18:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8014a1c:	bf48      	it	mi
 8014a1e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8014a22:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8014a26:	461c      	mov	r4, r3
 8014a28:	e76d      	b.n	8014906 <__ieee754_sqrt+0x2e>
 8014a2a:	0ad3      	lsrs	r3, r2, #11
 8014a2c:	3815      	subs	r0, #21
 8014a2e:	0552      	lsls	r2, r2, #21
 8014a30:	2b00      	cmp	r3, #0
 8014a32:	d0fa      	beq.n	8014a2a <__ieee754_sqrt+0x152>
 8014a34:	02dc      	lsls	r4, r3, #11
 8014a36:	d50a      	bpl.n	8014a4e <__ieee754_sqrt+0x176>
 8014a38:	f1c1 0420 	rsb	r4, r1, #32
 8014a3c:	fa22 f404 	lsr.w	r4, r2, r4
 8014a40:	1e4d      	subs	r5, r1, #1
 8014a42:	408a      	lsls	r2, r1
 8014a44:	4323      	orrs	r3, r4
 8014a46:	1b41      	subs	r1, r0, r5
 8014a48:	e772      	b.n	8014930 <__ieee754_sqrt+0x58>
 8014a4a:	4608      	mov	r0, r1
 8014a4c:	e7f0      	b.n	8014a30 <__ieee754_sqrt+0x158>
 8014a4e:	005b      	lsls	r3, r3, #1
 8014a50:	3101      	adds	r1, #1
 8014a52:	e7ef      	b.n	8014a34 <__ieee754_sqrt+0x15c>
 8014a54:	46e0      	mov	r8, ip
 8014a56:	e7aa      	b.n	80149ae <__ieee754_sqrt+0xd6>
 8014a58:	f7eb fc18 	bl	800028c <__adddf3>
 8014a5c:	e9da 8900 	ldrd	r8, r9, [sl]
 8014a60:	4602      	mov	r2, r0
 8014a62:	460b      	mov	r3, r1
 8014a64:	4640      	mov	r0, r8
 8014a66:	4649      	mov	r1, r9
 8014a68:	f7ec f838 	bl	8000adc <__aeabi_dcmplt>
 8014a6c:	b120      	cbz	r0, 8014a78 <__ieee754_sqrt+0x1a0>
 8014a6e:	1ca0      	adds	r0, r4, #2
 8014a70:	bf08      	it	eq
 8014a72:	3501      	addeq	r5, #1
 8014a74:	3402      	adds	r4, #2
 8014a76:	e7ca      	b.n	8014a0e <__ieee754_sqrt+0x136>
 8014a78:	3401      	adds	r4, #1
 8014a7a:	f024 0401 	bic.w	r4, r4, #1
 8014a7e:	e7c6      	b.n	8014a0e <__ieee754_sqrt+0x136>
 8014a80:	7ff00000 	.word	0x7ff00000
 8014a84:	200002e8 	.word	0x200002e8
 8014a88:	200002f0 	.word	0x200002f0

08014a8c <round>:
 8014a8c:	ec53 2b10 	vmov	r2, r3, d0
 8014a90:	b570      	push	{r4, r5, r6, lr}
 8014a92:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8014a96:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8014a9a:	2813      	cmp	r0, #19
 8014a9c:	ee10 5a10 	vmov	r5, s0
 8014aa0:	4619      	mov	r1, r3
 8014aa2:	dc18      	bgt.n	8014ad6 <round+0x4a>
 8014aa4:	2800      	cmp	r0, #0
 8014aa6:	da09      	bge.n	8014abc <round+0x30>
 8014aa8:	3001      	adds	r0, #1
 8014aaa:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8014aae:	d103      	bne.n	8014ab8 <round+0x2c>
 8014ab0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8014ab4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8014ab8:	2300      	movs	r3, #0
 8014aba:	e02a      	b.n	8014b12 <round+0x86>
 8014abc:	4c16      	ldr	r4, [pc, #88]	; (8014b18 <round+0x8c>)
 8014abe:	4104      	asrs	r4, r0
 8014ac0:	ea03 0604 	and.w	r6, r3, r4
 8014ac4:	4316      	orrs	r6, r2
 8014ac6:	d011      	beq.n	8014aec <round+0x60>
 8014ac8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014acc:	4103      	asrs	r3, r0
 8014ace:	440b      	add	r3, r1
 8014ad0:	ea23 0104 	bic.w	r1, r3, r4
 8014ad4:	e7f0      	b.n	8014ab8 <round+0x2c>
 8014ad6:	2833      	cmp	r0, #51	; 0x33
 8014ad8:	dd0b      	ble.n	8014af2 <round+0x66>
 8014ada:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014ade:	d105      	bne.n	8014aec <round+0x60>
 8014ae0:	ee10 0a10 	vmov	r0, s0
 8014ae4:	f7eb fbd2 	bl	800028c <__adddf3>
 8014ae8:	4602      	mov	r2, r0
 8014aea:	460b      	mov	r3, r1
 8014aec:	ec43 2b10 	vmov	d0, r2, r3
 8014af0:	bd70      	pop	{r4, r5, r6, pc}
 8014af2:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8014af6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014afa:	40f4      	lsrs	r4, r6
 8014afc:	4214      	tst	r4, r2
 8014afe:	d0f5      	beq.n	8014aec <round+0x60>
 8014b00:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8014b04:	2301      	movs	r3, #1
 8014b06:	4083      	lsls	r3, r0
 8014b08:	195b      	adds	r3, r3, r5
 8014b0a:	bf28      	it	cs
 8014b0c:	3101      	addcs	r1, #1
 8014b0e:	ea23 0304 	bic.w	r3, r3, r4
 8014b12:	461a      	mov	r2, r3
 8014b14:	460b      	mov	r3, r1
 8014b16:	e7e9      	b.n	8014aec <round+0x60>
 8014b18:	000fffff 	.word	0x000fffff
 8014b1c:	00000000 	.word	0x00000000

08014b20 <__ieee754_pow>:
 8014b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b24:	ed2d 8b06 	vpush	{d8-d10}
 8014b28:	b089      	sub	sp, #36	; 0x24
 8014b2a:	ed8d 1b00 	vstr	d1, [sp]
 8014b2e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8014b32:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8014b36:	ea58 0102 	orrs.w	r1, r8, r2
 8014b3a:	ec57 6b10 	vmov	r6, r7, d0
 8014b3e:	d115      	bne.n	8014b6c <__ieee754_pow+0x4c>
 8014b40:	19b3      	adds	r3, r6, r6
 8014b42:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8014b46:	4152      	adcs	r2, r2
 8014b48:	4299      	cmp	r1, r3
 8014b4a:	4b89      	ldr	r3, [pc, #548]	; (8014d70 <__ieee754_pow+0x250>)
 8014b4c:	4193      	sbcs	r3, r2
 8014b4e:	f080 84d1 	bcs.w	80154f4 <__ieee754_pow+0x9d4>
 8014b52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014b56:	4630      	mov	r0, r6
 8014b58:	4639      	mov	r1, r7
 8014b5a:	f7eb fb97 	bl	800028c <__adddf3>
 8014b5e:	ec41 0b10 	vmov	d0, r0, r1
 8014b62:	b009      	add	sp, #36	; 0x24
 8014b64:	ecbd 8b06 	vpop	{d8-d10}
 8014b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b6c:	4b81      	ldr	r3, [pc, #516]	; (8014d74 <__ieee754_pow+0x254>)
 8014b6e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8014b72:	429c      	cmp	r4, r3
 8014b74:	ee10 aa10 	vmov	sl, s0
 8014b78:	463d      	mov	r5, r7
 8014b7a:	dc06      	bgt.n	8014b8a <__ieee754_pow+0x6a>
 8014b7c:	d101      	bne.n	8014b82 <__ieee754_pow+0x62>
 8014b7e:	2e00      	cmp	r6, #0
 8014b80:	d1e7      	bne.n	8014b52 <__ieee754_pow+0x32>
 8014b82:	4598      	cmp	r8, r3
 8014b84:	dc01      	bgt.n	8014b8a <__ieee754_pow+0x6a>
 8014b86:	d10f      	bne.n	8014ba8 <__ieee754_pow+0x88>
 8014b88:	b172      	cbz	r2, 8014ba8 <__ieee754_pow+0x88>
 8014b8a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8014b8e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8014b92:	ea55 050a 	orrs.w	r5, r5, sl
 8014b96:	d1dc      	bne.n	8014b52 <__ieee754_pow+0x32>
 8014b98:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014b9c:	18db      	adds	r3, r3, r3
 8014b9e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8014ba2:	4152      	adcs	r2, r2
 8014ba4:	429d      	cmp	r5, r3
 8014ba6:	e7d0      	b.n	8014b4a <__ieee754_pow+0x2a>
 8014ba8:	2d00      	cmp	r5, #0
 8014baa:	da3b      	bge.n	8014c24 <__ieee754_pow+0x104>
 8014bac:	4b72      	ldr	r3, [pc, #456]	; (8014d78 <__ieee754_pow+0x258>)
 8014bae:	4598      	cmp	r8, r3
 8014bb0:	dc51      	bgt.n	8014c56 <__ieee754_pow+0x136>
 8014bb2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8014bb6:	4598      	cmp	r8, r3
 8014bb8:	f340 84ab 	ble.w	8015512 <__ieee754_pow+0x9f2>
 8014bbc:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014bc0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014bc4:	2b14      	cmp	r3, #20
 8014bc6:	dd0f      	ble.n	8014be8 <__ieee754_pow+0xc8>
 8014bc8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014bcc:	fa22 f103 	lsr.w	r1, r2, r3
 8014bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8014bd4:	4293      	cmp	r3, r2
 8014bd6:	f040 849c 	bne.w	8015512 <__ieee754_pow+0x9f2>
 8014bda:	f001 0101 	and.w	r1, r1, #1
 8014bde:	f1c1 0302 	rsb	r3, r1, #2
 8014be2:	9304      	str	r3, [sp, #16]
 8014be4:	b182      	cbz	r2, 8014c08 <__ieee754_pow+0xe8>
 8014be6:	e05f      	b.n	8014ca8 <__ieee754_pow+0x188>
 8014be8:	2a00      	cmp	r2, #0
 8014bea:	d15b      	bne.n	8014ca4 <__ieee754_pow+0x184>
 8014bec:	f1c3 0314 	rsb	r3, r3, #20
 8014bf0:	fa48 f103 	asr.w	r1, r8, r3
 8014bf4:	fa01 f303 	lsl.w	r3, r1, r3
 8014bf8:	4543      	cmp	r3, r8
 8014bfa:	f040 8487 	bne.w	801550c <__ieee754_pow+0x9ec>
 8014bfe:	f001 0101 	and.w	r1, r1, #1
 8014c02:	f1c1 0302 	rsb	r3, r1, #2
 8014c06:	9304      	str	r3, [sp, #16]
 8014c08:	4b5c      	ldr	r3, [pc, #368]	; (8014d7c <__ieee754_pow+0x25c>)
 8014c0a:	4598      	cmp	r8, r3
 8014c0c:	d132      	bne.n	8014c74 <__ieee754_pow+0x154>
 8014c0e:	f1b9 0f00 	cmp.w	r9, #0
 8014c12:	f280 8477 	bge.w	8015504 <__ieee754_pow+0x9e4>
 8014c16:	4959      	ldr	r1, [pc, #356]	; (8014d7c <__ieee754_pow+0x25c>)
 8014c18:	4632      	mov	r2, r6
 8014c1a:	463b      	mov	r3, r7
 8014c1c:	2000      	movs	r0, #0
 8014c1e:	f7eb fe15 	bl	800084c <__aeabi_ddiv>
 8014c22:	e79c      	b.n	8014b5e <__ieee754_pow+0x3e>
 8014c24:	2300      	movs	r3, #0
 8014c26:	9304      	str	r3, [sp, #16]
 8014c28:	2a00      	cmp	r2, #0
 8014c2a:	d13d      	bne.n	8014ca8 <__ieee754_pow+0x188>
 8014c2c:	4b51      	ldr	r3, [pc, #324]	; (8014d74 <__ieee754_pow+0x254>)
 8014c2e:	4598      	cmp	r8, r3
 8014c30:	d1ea      	bne.n	8014c08 <__ieee754_pow+0xe8>
 8014c32:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014c36:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014c3a:	ea53 030a 	orrs.w	r3, r3, sl
 8014c3e:	f000 8459 	beq.w	80154f4 <__ieee754_pow+0x9d4>
 8014c42:	4b4f      	ldr	r3, [pc, #316]	; (8014d80 <__ieee754_pow+0x260>)
 8014c44:	429c      	cmp	r4, r3
 8014c46:	dd08      	ble.n	8014c5a <__ieee754_pow+0x13a>
 8014c48:	f1b9 0f00 	cmp.w	r9, #0
 8014c4c:	f2c0 8456 	blt.w	80154fc <__ieee754_pow+0x9dc>
 8014c50:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014c54:	e783      	b.n	8014b5e <__ieee754_pow+0x3e>
 8014c56:	2302      	movs	r3, #2
 8014c58:	e7e5      	b.n	8014c26 <__ieee754_pow+0x106>
 8014c5a:	f1b9 0f00 	cmp.w	r9, #0
 8014c5e:	f04f 0000 	mov.w	r0, #0
 8014c62:	f04f 0100 	mov.w	r1, #0
 8014c66:	f6bf af7a 	bge.w	8014b5e <__ieee754_pow+0x3e>
 8014c6a:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014c6e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014c72:	e774      	b.n	8014b5e <__ieee754_pow+0x3e>
 8014c74:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8014c78:	d106      	bne.n	8014c88 <__ieee754_pow+0x168>
 8014c7a:	4632      	mov	r2, r6
 8014c7c:	463b      	mov	r3, r7
 8014c7e:	4630      	mov	r0, r6
 8014c80:	4639      	mov	r1, r7
 8014c82:	f7eb fcb9 	bl	80005f8 <__aeabi_dmul>
 8014c86:	e76a      	b.n	8014b5e <__ieee754_pow+0x3e>
 8014c88:	4b3e      	ldr	r3, [pc, #248]	; (8014d84 <__ieee754_pow+0x264>)
 8014c8a:	4599      	cmp	r9, r3
 8014c8c:	d10c      	bne.n	8014ca8 <__ieee754_pow+0x188>
 8014c8e:	2d00      	cmp	r5, #0
 8014c90:	db0a      	blt.n	8014ca8 <__ieee754_pow+0x188>
 8014c92:	ec47 6b10 	vmov	d0, r6, r7
 8014c96:	b009      	add	sp, #36	; 0x24
 8014c98:	ecbd 8b06 	vpop	{d8-d10}
 8014c9c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014ca0:	f7ff be1a 	b.w	80148d8 <__ieee754_sqrt>
 8014ca4:	2300      	movs	r3, #0
 8014ca6:	9304      	str	r3, [sp, #16]
 8014ca8:	ec47 6b10 	vmov	d0, r6, r7
 8014cac:	f7ff fe00 	bl	80148b0 <fabs>
 8014cb0:	ec51 0b10 	vmov	r0, r1, d0
 8014cb4:	f1ba 0f00 	cmp.w	sl, #0
 8014cb8:	d129      	bne.n	8014d0e <__ieee754_pow+0x1ee>
 8014cba:	b124      	cbz	r4, 8014cc6 <__ieee754_pow+0x1a6>
 8014cbc:	4b2f      	ldr	r3, [pc, #188]	; (8014d7c <__ieee754_pow+0x25c>)
 8014cbe:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8014cc2:	429a      	cmp	r2, r3
 8014cc4:	d123      	bne.n	8014d0e <__ieee754_pow+0x1ee>
 8014cc6:	f1b9 0f00 	cmp.w	r9, #0
 8014cca:	da05      	bge.n	8014cd8 <__ieee754_pow+0x1b8>
 8014ccc:	4602      	mov	r2, r0
 8014cce:	460b      	mov	r3, r1
 8014cd0:	2000      	movs	r0, #0
 8014cd2:	492a      	ldr	r1, [pc, #168]	; (8014d7c <__ieee754_pow+0x25c>)
 8014cd4:	f7eb fdba 	bl	800084c <__aeabi_ddiv>
 8014cd8:	2d00      	cmp	r5, #0
 8014cda:	f6bf af40 	bge.w	8014b5e <__ieee754_pow+0x3e>
 8014cde:	9b04      	ldr	r3, [sp, #16]
 8014ce0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014ce4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014ce8:	431c      	orrs	r4, r3
 8014cea:	d108      	bne.n	8014cfe <__ieee754_pow+0x1de>
 8014cec:	4602      	mov	r2, r0
 8014cee:	460b      	mov	r3, r1
 8014cf0:	4610      	mov	r0, r2
 8014cf2:	4619      	mov	r1, r3
 8014cf4:	f7eb fac8 	bl	8000288 <__aeabi_dsub>
 8014cf8:	4602      	mov	r2, r0
 8014cfa:	460b      	mov	r3, r1
 8014cfc:	e78f      	b.n	8014c1e <__ieee754_pow+0xfe>
 8014cfe:	9b04      	ldr	r3, [sp, #16]
 8014d00:	2b01      	cmp	r3, #1
 8014d02:	f47f af2c 	bne.w	8014b5e <__ieee754_pow+0x3e>
 8014d06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d0a:	4619      	mov	r1, r3
 8014d0c:	e727      	b.n	8014b5e <__ieee754_pow+0x3e>
 8014d0e:	0feb      	lsrs	r3, r5, #31
 8014d10:	3b01      	subs	r3, #1
 8014d12:	9306      	str	r3, [sp, #24]
 8014d14:	9a06      	ldr	r2, [sp, #24]
 8014d16:	9b04      	ldr	r3, [sp, #16]
 8014d18:	4313      	orrs	r3, r2
 8014d1a:	d102      	bne.n	8014d22 <__ieee754_pow+0x202>
 8014d1c:	4632      	mov	r2, r6
 8014d1e:	463b      	mov	r3, r7
 8014d20:	e7e6      	b.n	8014cf0 <__ieee754_pow+0x1d0>
 8014d22:	4b19      	ldr	r3, [pc, #100]	; (8014d88 <__ieee754_pow+0x268>)
 8014d24:	4598      	cmp	r8, r3
 8014d26:	f340 80fb 	ble.w	8014f20 <__ieee754_pow+0x400>
 8014d2a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014d2e:	4598      	cmp	r8, r3
 8014d30:	4b13      	ldr	r3, [pc, #76]	; (8014d80 <__ieee754_pow+0x260>)
 8014d32:	dd0c      	ble.n	8014d4e <__ieee754_pow+0x22e>
 8014d34:	429c      	cmp	r4, r3
 8014d36:	dc0f      	bgt.n	8014d58 <__ieee754_pow+0x238>
 8014d38:	f1b9 0f00 	cmp.w	r9, #0
 8014d3c:	da0f      	bge.n	8014d5e <__ieee754_pow+0x23e>
 8014d3e:	2000      	movs	r0, #0
 8014d40:	b009      	add	sp, #36	; 0x24
 8014d42:	ecbd 8b06 	vpop	{d8-d10}
 8014d46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d4a:	f000 bc3a 	b.w	80155c2 <__math_oflow>
 8014d4e:	429c      	cmp	r4, r3
 8014d50:	dbf2      	blt.n	8014d38 <__ieee754_pow+0x218>
 8014d52:	4b0a      	ldr	r3, [pc, #40]	; (8014d7c <__ieee754_pow+0x25c>)
 8014d54:	429c      	cmp	r4, r3
 8014d56:	dd19      	ble.n	8014d8c <__ieee754_pow+0x26c>
 8014d58:	f1b9 0f00 	cmp.w	r9, #0
 8014d5c:	dcef      	bgt.n	8014d3e <__ieee754_pow+0x21e>
 8014d5e:	2000      	movs	r0, #0
 8014d60:	b009      	add	sp, #36	; 0x24
 8014d62:	ecbd 8b06 	vpop	{d8-d10}
 8014d66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d6a:	f000 bc21 	b.w	80155b0 <__math_uflow>
 8014d6e:	bf00      	nop
 8014d70:	fff00000 	.word	0xfff00000
 8014d74:	7ff00000 	.word	0x7ff00000
 8014d78:	433fffff 	.word	0x433fffff
 8014d7c:	3ff00000 	.word	0x3ff00000
 8014d80:	3fefffff 	.word	0x3fefffff
 8014d84:	3fe00000 	.word	0x3fe00000
 8014d88:	41e00000 	.word	0x41e00000
 8014d8c:	4b60      	ldr	r3, [pc, #384]	; (8014f10 <__ieee754_pow+0x3f0>)
 8014d8e:	2200      	movs	r2, #0
 8014d90:	f7eb fa7a 	bl	8000288 <__aeabi_dsub>
 8014d94:	a354      	add	r3, pc, #336	; (adr r3, 8014ee8 <__ieee754_pow+0x3c8>)
 8014d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d9a:	4604      	mov	r4, r0
 8014d9c:	460d      	mov	r5, r1
 8014d9e:	f7eb fc2b 	bl	80005f8 <__aeabi_dmul>
 8014da2:	a353      	add	r3, pc, #332	; (adr r3, 8014ef0 <__ieee754_pow+0x3d0>)
 8014da4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014da8:	4606      	mov	r6, r0
 8014daa:	460f      	mov	r7, r1
 8014dac:	4620      	mov	r0, r4
 8014dae:	4629      	mov	r1, r5
 8014db0:	f7eb fc22 	bl	80005f8 <__aeabi_dmul>
 8014db4:	4b57      	ldr	r3, [pc, #348]	; (8014f14 <__ieee754_pow+0x3f4>)
 8014db6:	4682      	mov	sl, r0
 8014db8:	468b      	mov	fp, r1
 8014dba:	2200      	movs	r2, #0
 8014dbc:	4620      	mov	r0, r4
 8014dbe:	4629      	mov	r1, r5
 8014dc0:	f7eb fc1a 	bl	80005f8 <__aeabi_dmul>
 8014dc4:	4602      	mov	r2, r0
 8014dc6:	460b      	mov	r3, r1
 8014dc8:	a14b      	add	r1, pc, #300	; (adr r1, 8014ef8 <__ieee754_pow+0x3d8>)
 8014dca:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014dce:	f7eb fa5b 	bl	8000288 <__aeabi_dsub>
 8014dd2:	4622      	mov	r2, r4
 8014dd4:	462b      	mov	r3, r5
 8014dd6:	f7eb fc0f 	bl	80005f8 <__aeabi_dmul>
 8014dda:	4602      	mov	r2, r0
 8014ddc:	460b      	mov	r3, r1
 8014dde:	2000      	movs	r0, #0
 8014de0:	494d      	ldr	r1, [pc, #308]	; (8014f18 <__ieee754_pow+0x3f8>)
 8014de2:	f7eb fa51 	bl	8000288 <__aeabi_dsub>
 8014de6:	4622      	mov	r2, r4
 8014de8:	4680      	mov	r8, r0
 8014dea:	4689      	mov	r9, r1
 8014dec:	462b      	mov	r3, r5
 8014dee:	4620      	mov	r0, r4
 8014df0:	4629      	mov	r1, r5
 8014df2:	f7eb fc01 	bl	80005f8 <__aeabi_dmul>
 8014df6:	4602      	mov	r2, r0
 8014df8:	460b      	mov	r3, r1
 8014dfa:	4640      	mov	r0, r8
 8014dfc:	4649      	mov	r1, r9
 8014dfe:	f7eb fbfb 	bl	80005f8 <__aeabi_dmul>
 8014e02:	a33f      	add	r3, pc, #252	; (adr r3, 8014f00 <__ieee754_pow+0x3e0>)
 8014e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e08:	f7eb fbf6 	bl	80005f8 <__aeabi_dmul>
 8014e0c:	4602      	mov	r2, r0
 8014e0e:	460b      	mov	r3, r1
 8014e10:	4650      	mov	r0, sl
 8014e12:	4659      	mov	r1, fp
 8014e14:	f7eb fa38 	bl	8000288 <__aeabi_dsub>
 8014e18:	4602      	mov	r2, r0
 8014e1a:	460b      	mov	r3, r1
 8014e1c:	4680      	mov	r8, r0
 8014e1e:	4689      	mov	r9, r1
 8014e20:	4630      	mov	r0, r6
 8014e22:	4639      	mov	r1, r7
 8014e24:	f7eb fa32 	bl	800028c <__adddf3>
 8014e28:	2000      	movs	r0, #0
 8014e2a:	4632      	mov	r2, r6
 8014e2c:	463b      	mov	r3, r7
 8014e2e:	4604      	mov	r4, r0
 8014e30:	460d      	mov	r5, r1
 8014e32:	f7eb fa29 	bl	8000288 <__aeabi_dsub>
 8014e36:	4602      	mov	r2, r0
 8014e38:	460b      	mov	r3, r1
 8014e3a:	4640      	mov	r0, r8
 8014e3c:	4649      	mov	r1, r9
 8014e3e:	f7eb fa23 	bl	8000288 <__aeabi_dsub>
 8014e42:	9b04      	ldr	r3, [sp, #16]
 8014e44:	9a06      	ldr	r2, [sp, #24]
 8014e46:	3b01      	subs	r3, #1
 8014e48:	4313      	orrs	r3, r2
 8014e4a:	4682      	mov	sl, r0
 8014e4c:	468b      	mov	fp, r1
 8014e4e:	f040 81e7 	bne.w	8015220 <__ieee754_pow+0x700>
 8014e52:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8014f08 <__ieee754_pow+0x3e8>
 8014e56:	eeb0 8a47 	vmov.f32	s16, s14
 8014e5a:	eef0 8a67 	vmov.f32	s17, s15
 8014e5e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014e62:	2600      	movs	r6, #0
 8014e64:	4632      	mov	r2, r6
 8014e66:	463b      	mov	r3, r7
 8014e68:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014e6c:	f7eb fa0c 	bl	8000288 <__aeabi_dsub>
 8014e70:	4622      	mov	r2, r4
 8014e72:	462b      	mov	r3, r5
 8014e74:	f7eb fbc0 	bl	80005f8 <__aeabi_dmul>
 8014e78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014e7c:	4680      	mov	r8, r0
 8014e7e:	4689      	mov	r9, r1
 8014e80:	4650      	mov	r0, sl
 8014e82:	4659      	mov	r1, fp
 8014e84:	f7eb fbb8 	bl	80005f8 <__aeabi_dmul>
 8014e88:	4602      	mov	r2, r0
 8014e8a:	460b      	mov	r3, r1
 8014e8c:	4640      	mov	r0, r8
 8014e8e:	4649      	mov	r1, r9
 8014e90:	f7eb f9fc 	bl	800028c <__adddf3>
 8014e94:	4632      	mov	r2, r6
 8014e96:	463b      	mov	r3, r7
 8014e98:	4680      	mov	r8, r0
 8014e9a:	4689      	mov	r9, r1
 8014e9c:	4620      	mov	r0, r4
 8014e9e:	4629      	mov	r1, r5
 8014ea0:	f7eb fbaa 	bl	80005f8 <__aeabi_dmul>
 8014ea4:	460b      	mov	r3, r1
 8014ea6:	4604      	mov	r4, r0
 8014ea8:	460d      	mov	r5, r1
 8014eaa:	4602      	mov	r2, r0
 8014eac:	4649      	mov	r1, r9
 8014eae:	4640      	mov	r0, r8
 8014eb0:	f7eb f9ec 	bl	800028c <__adddf3>
 8014eb4:	4b19      	ldr	r3, [pc, #100]	; (8014f1c <__ieee754_pow+0x3fc>)
 8014eb6:	4299      	cmp	r1, r3
 8014eb8:	ec45 4b19 	vmov	d9, r4, r5
 8014ebc:	4606      	mov	r6, r0
 8014ebe:	460f      	mov	r7, r1
 8014ec0:	468b      	mov	fp, r1
 8014ec2:	f340 82f0 	ble.w	80154a6 <__ieee754_pow+0x986>
 8014ec6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8014eca:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8014ece:	4303      	orrs	r3, r0
 8014ed0:	f000 81e4 	beq.w	801529c <__ieee754_pow+0x77c>
 8014ed4:	ec51 0b18 	vmov	r0, r1, d8
 8014ed8:	2200      	movs	r2, #0
 8014eda:	2300      	movs	r3, #0
 8014edc:	f7eb fdfe 	bl	8000adc <__aeabi_dcmplt>
 8014ee0:	3800      	subs	r0, #0
 8014ee2:	bf18      	it	ne
 8014ee4:	2001      	movne	r0, #1
 8014ee6:	e72b      	b.n	8014d40 <__ieee754_pow+0x220>
 8014ee8:	60000000 	.word	0x60000000
 8014eec:	3ff71547 	.word	0x3ff71547
 8014ef0:	f85ddf44 	.word	0xf85ddf44
 8014ef4:	3e54ae0b 	.word	0x3e54ae0b
 8014ef8:	55555555 	.word	0x55555555
 8014efc:	3fd55555 	.word	0x3fd55555
 8014f00:	652b82fe 	.word	0x652b82fe
 8014f04:	3ff71547 	.word	0x3ff71547
 8014f08:	00000000 	.word	0x00000000
 8014f0c:	bff00000 	.word	0xbff00000
 8014f10:	3ff00000 	.word	0x3ff00000
 8014f14:	3fd00000 	.word	0x3fd00000
 8014f18:	3fe00000 	.word	0x3fe00000
 8014f1c:	408fffff 	.word	0x408fffff
 8014f20:	4bd5      	ldr	r3, [pc, #852]	; (8015278 <__ieee754_pow+0x758>)
 8014f22:	402b      	ands	r3, r5
 8014f24:	2200      	movs	r2, #0
 8014f26:	b92b      	cbnz	r3, 8014f34 <__ieee754_pow+0x414>
 8014f28:	4bd4      	ldr	r3, [pc, #848]	; (801527c <__ieee754_pow+0x75c>)
 8014f2a:	f7eb fb65 	bl	80005f8 <__aeabi_dmul>
 8014f2e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014f32:	460c      	mov	r4, r1
 8014f34:	1523      	asrs	r3, r4, #20
 8014f36:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014f3a:	4413      	add	r3, r2
 8014f3c:	9305      	str	r3, [sp, #20]
 8014f3e:	4bd0      	ldr	r3, [pc, #832]	; (8015280 <__ieee754_pow+0x760>)
 8014f40:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014f44:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014f48:	429c      	cmp	r4, r3
 8014f4a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014f4e:	dd08      	ble.n	8014f62 <__ieee754_pow+0x442>
 8014f50:	4bcc      	ldr	r3, [pc, #816]	; (8015284 <__ieee754_pow+0x764>)
 8014f52:	429c      	cmp	r4, r3
 8014f54:	f340 8162 	ble.w	801521c <__ieee754_pow+0x6fc>
 8014f58:	9b05      	ldr	r3, [sp, #20]
 8014f5a:	3301      	adds	r3, #1
 8014f5c:	9305      	str	r3, [sp, #20]
 8014f5e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014f62:	2400      	movs	r4, #0
 8014f64:	00e3      	lsls	r3, r4, #3
 8014f66:	9307      	str	r3, [sp, #28]
 8014f68:	4bc7      	ldr	r3, [pc, #796]	; (8015288 <__ieee754_pow+0x768>)
 8014f6a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014f6e:	ed93 7b00 	vldr	d7, [r3]
 8014f72:	4629      	mov	r1, r5
 8014f74:	ec53 2b17 	vmov	r2, r3, d7
 8014f78:	eeb0 9a47 	vmov.f32	s18, s14
 8014f7c:	eef0 9a67 	vmov.f32	s19, s15
 8014f80:	4682      	mov	sl, r0
 8014f82:	f7eb f981 	bl	8000288 <__aeabi_dsub>
 8014f86:	4652      	mov	r2, sl
 8014f88:	4606      	mov	r6, r0
 8014f8a:	460f      	mov	r7, r1
 8014f8c:	462b      	mov	r3, r5
 8014f8e:	ec51 0b19 	vmov	r0, r1, d9
 8014f92:	f7eb f97b 	bl	800028c <__adddf3>
 8014f96:	4602      	mov	r2, r0
 8014f98:	460b      	mov	r3, r1
 8014f9a:	2000      	movs	r0, #0
 8014f9c:	49bb      	ldr	r1, [pc, #748]	; (801528c <__ieee754_pow+0x76c>)
 8014f9e:	f7eb fc55 	bl	800084c <__aeabi_ddiv>
 8014fa2:	ec41 0b1a 	vmov	d10, r0, r1
 8014fa6:	4602      	mov	r2, r0
 8014fa8:	460b      	mov	r3, r1
 8014faa:	4630      	mov	r0, r6
 8014fac:	4639      	mov	r1, r7
 8014fae:	f7eb fb23 	bl	80005f8 <__aeabi_dmul>
 8014fb2:	2300      	movs	r3, #0
 8014fb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014fb8:	9302      	str	r3, [sp, #8]
 8014fba:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8014fbe:	46ab      	mov	fp, r5
 8014fc0:	106d      	asrs	r5, r5, #1
 8014fc2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014fc6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8014fca:	ec41 0b18 	vmov	d8, r0, r1
 8014fce:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8014fd2:	2200      	movs	r2, #0
 8014fd4:	4640      	mov	r0, r8
 8014fd6:	4649      	mov	r1, r9
 8014fd8:	4614      	mov	r4, r2
 8014fda:	461d      	mov	r5, r3
 8014fdc:	f7eb fb0c 	bl	80005f8 <__aeabi_dmul>
 8014fe0:	4602      	mov	r2, r0
 8014fe2:	460b      	mov	r3, r1
 8014fe4:	4630      	mov	r0, r6
 8014fe6:	4639      	mov	r1, r7
 8014fe8:	f7eb f94e 	bl	8000288 <__aeabi_dsub>
 8014fec:	ec53 2b19 	vmov	r2, r3, d9
 8014ff0:	4606      	mov	r6, r0
 8014ff2:	460f      	mov	r7, r1
 8014ff4:	4620      	mov	r0, r4
 8014ff6:	4629      	mov	r1, r5
 8014ff8:	f7eb f946 	bl	8000288 <__aeabi_dsub>
 8014ffc:	4602      	mov	r2, r0
 8014ffe:	460b      	mov	r3, r1
 8015000:	4650      	mov	r0, sl
 8015002:	4659      	mov	r1, fp
 8015004:	f7eb f940 	bl	8000288 <__aeabi_dsub>
 8015008:	4642      	mov	r2, r8
 801500a:	464b      	mov	r3, r9
 801500c:	f7eb faf4 	bl	80005f8 <__aeabi_dmul>
 8015010:	4602      	mov	r2, r0
 8015012:	460b      	mov	r3, r1
 8015014:	4630      	mov	r0, r6
 8015016:	4639      	mov	r1, r7
 8015018:	f7eb f936 	bl	8000288 <__aeabi_dsub>
 801501c:	ec53 2b1a 	vmov	r2, r3, d10
 8015020:	f7eb faea 	bl	80005f8 <__aeabi_dmul>
 8015024:	ec53 2b18 	vmov	r2, r3, d8
 8015028:	ec41 0b19 	vmov	d9, r0, r1
 801502c:	ec51 0b18 	vmov	r0, r1, d8
 8015030:	f7eb fae2 	bl	80005f8 <__aeabi_dmul>
 8015034:	a37c      	add	r3, pc, #496	; (adr r3, 8015228 <__ieee754_pow+0x708>)
 8015036:	e9d3 2300 	ldrd	r2, r3, [r3]
 801503a:	4604      	mov	r4, r0
 801503c:	460d      	mov	r5, r1
 801503e:	f7eb fadb 	bl	80005f8 <__aeabi_dmul>
 8015042:	a37b      	add	r3, pc, #492	; (adr r3, 8015230 <__ieee754_pow+0x710>)
 8015044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015048:	f7eb f920 	bl	800028c <__adddf3>
 801504c:	4622      	mov	r2, r4
 801504e:	462b      	mov	r3, r5
 8015050:	f7eb fad2 	bl	80005f8 <__aeabi_dmul>
 8015054:	a378      	add	r3, pc, #480	; (adr r3, 8015238 <__ieee754_pow+0x718>)
 8015056:	e9d3 2300 	ldrd	r2, r3, [r3]
 801505a:	f7eb f917 	bl	800028c <__adddf3>
 801505e:	4622      	mov	r2, r4
 8015060:	462b      	mov	r3, r5
 8015062:	f7eb fac9 	bl	80005f8 <__aeabi_dmul>
 8015066:	a376      	add	r3, pc, #472	; (adr r3, 8015240 <__ieee754_pow+0x720>)
 8015068:	e9d3 2300 	ldrd	r2, r3, [r3]
 801506c:	f7eb f90e 	bl	800028c <__adddf3>
 8015070:	4622      	mov	r2, r4
 8015072:	462b      	mov	r3, r5
 8015074:	f7eb fac0 	bl	80005f8 <__aeabi_dmul>
 8015078:	a373      	add	r3, pc, #460	; (adr r3, 8015248 <__ieee754_pow+0x728>)
 801507a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801507e:	f7eb f905 	bl	800028c <__adddf3>
 8015082:	4622      	mov	r2, r4
 8015084:	462b      	mov	r3, r5
 8015086:	f7eb fab7 	bl	80005f8 <__aeabi_dmul>
 801508a:	a371      	add	r3, pc, #452	; (adr r3, 8015250 <__ieee754_pow+0x730>)
 801508c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015090:	f7eb f8fc 	bl	800028c <__adddf3>
 8015094:	4622      	mov	r2, r4
 8015096:	4606      	mov	r6, r0
 8015098:	460f      	mov	r7, r1
 801509a:	462b      	mov	r3, r5
 801509c:	4620      	mov	r0, r4
 801509e:	4629      	mov	r1, r5
 80150a0:	f7eb faaa 	bl	80005f8 <__aeabi_dmul>
 80150a4:	4602      	mov	r2, r0
 80150a6:	460b      	mov	r3, r1
 80150a8:	4630      	mov	r0, r6
 80150aa:	4639      	mov	r1, r7
 80150ac:	f7eb faa4 	bl	80005f8 <__aeabi_dmul>
 80150b0:	4642      	mov	r2, r8
 80150b2:	4604      	mov	r4, r0
 80150b4:	460d      	mov	r5, r1
 80150b6:	464b      	mov	r3, r9
 80150b8:	ec51 0b18 	vmov	r0, r1, d8
 80150bc:	f7eb f8e6 	bl	800028c <__adddf3>
 80150c0:	ec53 2b19 	vmov	r2, r3, d9
 80150c4:	f7eb fa98 	bl	80005f8 <__aeabi_dmul>
 80150c8:	4622      	mov	r2, r4
 80150ca:	462b      	mov	r3, r5
 80150cc:	f7eb f8de 	bl	800028c <__adddf3>
 80150d0:	4642      	mov	r2, r8
 80150d2:	4682      	mov	sl, r0
 80150d4:	468b      	mov	fp, r1
 80150d6:	464b      	mov	r3, r9
 80150d8:	4640      	mov	r0, r8
 80150da:	4649      	mov	r1, r9
 80150dc:	f7eb fa8c 	bl	80005f8 <__aeabi_dmul>
 80150e0:	4b6b      	ldr	r3, [pc, #428]	; (8015290 <__ieee754_pow+0x770>)
 80150e2:	2200      	movs	r2, #0
 80150e4:	4606      	mov	r6, r0
 80150e6:	460f      	mov	r7, r1
 80150e8:	f7eb f8d0 	bl	800028c <__adddf3>
 80150ec:	4652      	mov	r2, sl
 80150ee:	465b      	mov	r3, fp
 80150f0:	f7eb f8cc 	bl	800028c <__adddf3>
 80150f4:	2000      	movs	r0, #0
 80150f6:	4604      	mov	r4, r0
 80150f8:	460d      	mov	r5, r1
 80150fa:	4602      	mov	r2, r0
 80150fc:	460b      	mov	r3, r1
 80150fe:	4640      	mov	r0, r8
 8015100:	4649      	mov	r1, r9
 8015102:	f7eb fa79 	bl	80005f8 <__aeabi_dmul>
 8015106:	4b62      	ldr	r3, [pc, #392]	; (8015290 <__ieee754_pow+0x770>)
 8015108:	4680      	mov	r8, r0
 801510a:	4689      	mov	r9, r1
 801510c:	2200      	movs	r2, #0
 801510e:	4620      	mov	r0, r4
 8015110:	4629      	mov	r1, r5
 8015112:	f7eb f8b9 	bl	8000288 <__aeabi_dsub>
 8015116:	4632      	mov	r2, r6
 8015118:	463b      	mov	r3, r7
 801511a:	f7eb f8b5 	bl	8000288 <__aeabi_dsub>
 801511e:	4602      	mov	r2, r0
 8015120:	460b      	mov	r3, r1
 8015122:	4650      	mov	r0, sl
 8015124:	4659      	mov	r1, fp
 8015126:	f7eb f8af 	bl	8000288 <__aeabi_dsub>
 801512a:	ec53 2b18 	vmov	r2, r3, d8
 801512e:	f7eb fa63 	bl	80005f8 <__aeabi_dmul>
 8015132:	4622      	mov	r2, r4
 8015134:	4606      	mov	r6, r0
 8015136:	460f      	mov	r7, r1
 8015138:	462b      	mov	r3, r5
 801513a:	ec51 0b19 	vmov	r0, r1, d9
 801513e:	f7eb fa5b 	bl	80005f8 <__aeabi_dmul>
 8015142:	4602      	mov	r2, r0
 8015144:	460b      	mov	r3, r1
 8015146:	4630      	mov	r0, r6
 8015148:	4639      	mov	r1, r7
 801514a:	f7eb f89f 	bl	800028c <__adddf3>
 801514e:	4606      	mov	r6, r0
 8015150:	460f      	mov	r7, r1
 8015152:	4602      	mov	r2, r0
 8015154:	460b      	mov	r3, r1
 8015156:	4640      	mov	r0, r8
 8015158:	4649      	mov	r1, r9
 801515a:	f7eb f897 	bl	800028c <__adddf3>
 801515e:	a33e      	add	r3, pc, #248	; (adr r3, 8015258 <__ieee754_pow+0x738>)
 8015160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015164:	2000      	movs	r0, #0
 8015166:	4604      	mov	r4, r0
 8015168:	460d      	mov	r5, r1
 801516a:	f7eb fa45 	bl	80005f8 <__aeabi_dmul>
 801516e:	4642      	mov	r2, r8
 8015170:	ec41 0b18 	vmov	d8, r0, r1
 8015174:	464b      	mov	r3, r9
 8015176:	4620      	mov	r0, r4
 8015178:	4629      	mov	r1, r5
 801517a:	f7eb f885 	bl	8000288 <__aeabi_dsub>
 801517e:	4602      	mov	r2, r0
 8015180:	460b      	mov	r3, r1
 8015182:	4630      	mov	r0, r6
 8015184:	4639      	mov	r1, r7
 8015186:	f7eb f87f 	bl	8000288 <__aeabi_dsub>
 801518a:	a335      	add	r3, pc, #212	; (adr r3, 8015260 <__ieee754_pow+0x740>)
 801518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015190:	f7eb fa32 	bl	80005f8 <__aeabi_dmul>
 8015194:	a334      	add	r3, pc, #208	; (adr r3, 8015268 <__ieee754_pow+0x748>)
 8015196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801519a:	4606      	mov	r6, r0
 801519c:	460f      	mov	r7, r1
 801519e:	4620      	mov	r0, r4
 80151a0:	4629      	mov	r1, r5
 80151a2:	f7eb fa29 	bl	80005f8 <__aeabi_dmul>
 80151a6:	4602      	mov	r2, r0
 80151a8:	460b      	mov	r3, r1
 80151aa:	4630      	mov	r0, r6
 80151ac:	4639      	mov	r1, r7
 80151ae:	f7eb f86d 	bl	800028c <__adddf3>
 80151b2:	9a07      	ldr	r2, [sp, #28]
 80151b4:	4b37      	ldr	r3, [pc, #220]	; (8015294 <__ieee754_pow+0x774>)
 80151b6:	4413      	add	r3, r2
 80151b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151bc:	f7eb f866 	bl	800028c <__adddf3>
 80151c0:	4682      	mov	sl, r0
 80151c2:	9805      	ldr	r0, [sp, #20]
 80151c4:	468b      	mov	fp, r1
 80151c6:	f7eb f9ad 	bl	8000524 <__aeabi_i2d>
 80151ca:	9a07      	ldr	r2, [sp, #28]
 80151cc:	4b32      	ldr	r3, [pc, #200]	; (8015298 <__ieee754_pow+0x778>)
 80151ce:	4413      	add	r3, r2
 80151d0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80151d4:	4606      	mov	r6, r0
 80151d6:	460f      	mov	r7, r1
 80151d8:	4652      	mov	r2, sl
 80151da:	465b      	mov	r3, fp
 80151dc:	ec51 0b18 	vmov	r0, r1, d8
 80151e0:	f7eb f854 	bl	800028c <__adddf3>
 80151e4:	4642      	mov	r2, r8
 80151e6:	464b      	mov	r3, r9
 80151e8:	f7eb f850 	bl	800028c <__adddf3>
 80151ec:	4632      	mov	r2, r6
 80151ee:	463b      	mov	r3, r7
 80151f0:	f7eb f84c 	bl	800028c <__adddf3>
 80151f4:	2000      	movs	r0, #0
 80151f6:	4632      	mov	r2, r6
 80151f8:	463b      	mov	r3, r7
 80151fa:	4604      	mov	r4, r0
 80151fc:	460d      	mov	r5, r1
 80151fe:	f7eb f843 	bl	8000288 <__aeabi_dsub>
 8015202:	4642      	mov	r2, r8
 8015204:	464b      	mov	r3, r9
 8015206:	f7eb f83f 	bl	8000288 <__aeabi_dsub>
 801520a:	ec53 2b18 	vmov	r2, r3, d8
 801520e:	f7eb f83b 	bl	8000288 <__aeabi_dsub>
 8015212:	4602      	mov	r2, r0
 8015214:	460b      	mov	r3, r1
 8015216:	4650      	mov	r0, sl
 8015218:	4659      	mov	r1, fp
 801521a:	e610      	b.n	8014e3e <__ieee754_pow+0x31e>
 801521c:	2401      	movs	r4, #1
 801521e:	e6a1      	b.n	8014f64 <__ieee754_pow+0x444>
 8015220:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8015270 <__ieee754_pow+0x750>
 8015224:	e617      	b.n	8014e56 <__ieee754_pow+0x336>
 8015226:	bf00      	nop
 8015228:	4a454eef 	.word	0x4a454eef
 801522c:	3fca7e28 	.word	0x3fca7e28
 8015230:	93c9db65 	.word	0x93c9db65
 8015234:	3fcd864a 	.word	0x3fcd864a
 8015238:	a91d4101 	.word	0xa91d4101
 801523c:	3fd17460 	.word	0x3fd17460
 8015240:	518f264d 	.word	0x518f264d
 8015244:	3fd55555 	.word	0x3fd55555
 8015248:	db6fabff 	.word	0xdb6fabff
 801524c:	3fdb6db6 	.word	0x3fdb6db6
 8015250:	33333303 	.word	0x33333303
 8015254:	3fe33333 	.word	0x3fe33333
 8015258:	e0000000 	.word	0xe0000000
 801525c:	3feec709 	.word	0x3feec709
 8015260:	dc3a03fd 	.word	0xdc3a03fd
 8015264:	3feec709 	.word	0x3feec709
 8015268:	145b01f5 	.word	0x145b01f5
 801526c:	be3e2fe0 	.word	0xbe3e2fe0
 8015270:	00000000 	.word	0x00000000
 8015274:	3ff00000 	.word	0x3ff00000
 8015278:	7ff00000 	.word	0x7ff00000
 801527c:	43400000 	.word	0x43400000
 8015280:	0003988e 	.word	0x0003988e
 8015284:	000bb679 	.word	0x000bb679
 8015288:	08015c28 	.word	0x08015c28
 801528c:	3ff00000 	.word	0x3ff00000
 8015290:	40080000 	.word	0x40080000
 8015294:	08015c48 	.word	0x08015c48
 8015298:	08015c38 	.word	0x08015c38
 801529c:	a3b3      	add	r3, pc, #716	; (adr r3, 801556c <__ieee754_pow+0xa4c>)
 801529e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80152a2:	4640      	mov	r0, r8
 80152a4:	4649      	mov	r1, r9
 80152a6:	f7ea fff1 	bl	800028c <__adddf3>
 80152aa:	4622      	mov	r2, r4
 80152ac:	ec41 0b1a 	vmov	d10, r0, r1
 80152b0:	462b      	mov	r3, r5
 80152b2:	4630      	mov	r0, r6
 80152b4:	4639      	mov	r1, r7
 80152b6:	f7ea ffe7 	bl	8000288 <__aeabi_dsub>
 80152ba:	4602      	mov	r2, r0
 80152bc:	460b      	mov	r3, r1
 80152be:	ec51 0b1a 	vmov	r0, r1, d10
 80152c2:	f7eb fc29 	bl	8000b18 <__aeabi_dcmpgt>
 80152c6:	2800      	cmp	r0, #0
 80152c8:	f47f ae04 	bne.w	8014ed4 <__ieee754_pow+0x3b4>
 80152cc:	4aa2      	ldr	r2, [pc, #648]	; (8015558 <__ieee754_pow+0xa38>)
 80152ce:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80152d2:	4293      	cmp	r3, r2
 80152d4:	f340 8107 	ble.w	80154e6 <__ieee754_pow+0x9c6>
 80152d8:	151b      	asrs	r3, r3, #20
 80152da:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80152de:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80152e2:	fa4a fa03 	asr.w	sl, sl, r3
 80152e6:	44da      	add	sl, fp
 80152e8:	f3ca 510a 	ubfx	r1, sl, #20, #11
 80152ec:	489b      	ldr	r0, [pc, #620]	; (801555c <__ieee754_pow+0xa3c>)
 80152ee:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80152f2:	4108      	asrs	r0, r1
 80152f4:	ea00 030a 	and.w	r3, r0, sl
 80152f8:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 80152fc:	f1c1 0114 	rsb	r1, r1, #20
 8015300:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8015304:	fa4a fa01 	asr.w	sl, sl, r1
 8015308:	f1bb 0f00 	cmp.w	fp, #0
 801530c:	f04f 0200 	mov.w	r2, #0
 8015310:	4620      	mov	r0, r4
 8015312:	4629      	mov	r1, r5
 8015314:	bfb8      	it	lt
 8015316:	f1ca 0a00 	rsblt	sl, sl, #0
 801531a:	f7ea ffb5 	bl	8000288 <__aeabi_dsub>
 801531e:	ec41 0b19 	vmov	d9, r0, r1
 8015322:	4642      	mov	r2, r8
 8015324:	464b      	mov	r3, r9
 8015326:	ec51 0b19 	vmov	r0, r1, d9
 801532a:	f7ea ffaf 	bl	800028c <__adddf3>
 801532e:	a37a      	add	r3, pc, #488	; (adr r3, 8015518 <__ieee754_pow+0x9f8>)
 8015330:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015334:	2000      	movs	r0, #0
 8015336:	4604      	mov	r4, r0
 8015338:	460d      	mov	r5, r1
 801533a:	f7eb f95d 	bl	80005f8 <__aeabi_dmul>
 801533e:	ec53 2b19 	vmov	r2, r3, d9
 8015342:	4606      	mov	r6, r0
 8015344:	460f      	mov	r7, r1
 8015346:	4620      	mov	r0, r4
 8015348:	4629      	mov	r1, r5
 801534a:	f7ea ff9d 	bl	8000288 <__aeabi_dsub>
 801534e:	4602      	mov	r2, r0
 8015350:	460b      	mov	r3, r1
 8015352:	4640      	mov	r0, r8
 8015354:	4649      	mov	r1, r9
 8015356:	f7ea ff97 	bl	8000288 <__aeabi_dsub>
 801535a:	a371      	add	r3, pc, #452	; (adr r3, 8015520 <__ieee754_pow+0xa00>)
 801535c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015360:	f7eb f94a 	bl	80005f8 <__aeabi_dmul>
 8015364:	a370      	add	r3, pc, #448	; (adr r3, 8015528 <__ieee754_pow+0xa08>)
 8015366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801536a:	4680      	mov	r8, r0
 801536c:	4689      	mov	r9, r1
 801536e:	4620      	mov	r0, r4
 8015370:	4629      	mov	r1, r5
 8015372:	f7eb f941 	bl	80005f8 <__aeabi_dmul>
 8015376:	4602      	mov	r2, r0
 8015378:	460b      	mov	r3, r1
 801537a:	4640      	mov	r0, r8
 801537c:	4649      	mov	r1, r9
 801537e:	f7ea ff85 	bl	800028c <__adddf3>
 8015382:	4604      	mov	r4, r0
 8015384:	460d      	mov	r5, r1
 8015386:	4602      	mov	r2, r0
 8015388:	460b      	mov	r3, r1
 801538a:	4630      	mov	r0, r6
 801538c:	4639      	mov	r1, r7
 801538e:	f7ea ff7d 	bl	800028c <__adddf3>
 8015392:	4632      	mov	r2, r6
 8015394:	463b      	mov	r3, r7
 8015396:	4680      	mov	r8, r0
 8015398:	4689      	mov	r9, r1
 801539a:	f7ea ff75 	bl	8000288 <__aeabi_dsub>
 801539e:	4602      	mov	r2, r0
 80153a0:	460b      	mov	r3, r1
 80153a2:	4620      	mov	r0, r4
 80153a4:	4629      	mov	r1, r5
 80153a6:	f7ea ff6f 	bl	8000288 <__aeabi_dsub>
 80153aa:	4642      	mov	r2, r8
 80153ac:	4606      	mov	r6, r0
 80153ae:	460f      	mov	r7, r1
 80153b0:	464b      	mov	r3, r9
 80153b2:	4640      	mov	r0, r8
 80153b4:	4649      	mov	r1, r9
 80153b6:	f7eb f91f 	bl	80005f8 <__aeabi_dmul>
 80153ba:	a35d      	add	r3, pc, #372	; (adr r3, 8015530 <__ieee754_pow+0xa10>)
 80153bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153c0:	4604      	mov	r4, r0
 80153c2:	460d      	mov	r5, r1
 80153c4:	f7eb f918 	bl	80005f8 <__aeabi_dmul>
 80153c8:	a35b      	add	r3, pc, #364	; (adr r3, 8015538 <__ieee754_pow+0xa18>)
 80153ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ce:	f7ea ff5b 	bl	8000288 <__aeabi_dsub>
 80153d2:	4622      	mov	r2, r4
 80153d4:	462b      	mov	r3, r5
 80153d6:	f7eb f90f 	bl	80005f8 <__aeabi_dmul>
 80153da:	a359      	add	r3, pc, #356	; (adr r3, 8015540 <__ieee754_pow+0xa20>)
 80153dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153e0:	f7ea ff54 	bl	800028c <__adddf3>
 80153e4:	4622      	mov	r2, r4
 80153e6:	462b      	mov	r3, r5
 80153e8:	f7eb f906 	bl	80005f8 <__aeabi_dmul>
 80153ec:	a356      	add	r3, pc, #344	; (adr r3, 8015548 <__ieee754_pow+0xa28>)
 80153ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153f2:	f7ea ff49 	bl	8000288 <__aeabi_dsub>
 80153f6:	4622      	mov	r2, r4
 80153f8:	462b      	mov	r3, r5
 80153fa:	f7eb f8fd 	bl	80005f8 <__aeabi_dmul>
 80153fe:	a354      	add	r3, pc, #336	; (adr r3, 8015550 <__ieee754_pow+0xa30>)
 8015400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015404:	f7ea ff42 	bl	800028c <__adddf3>
 8015408:	4622      	mov	r2, r4
 801540a:	462b      	mov	r3, r5
 801540c:	f7eb f8f4 	bl	80005f8 <__aeabi_dmul>
 8015410:	4602      	mov	r2, r0
 8015412:	460b      	mov	r3, r1
 8015414:	4640      	mov	r0, r8
 8015416:	4649      	mov	r1, r9
 8015418:	f7ea ff36 	bl	8000288 <__aeabi_dsub>
 801541c:	4604      	mov	r4, r0
 801541e:	460d      	mov	r5, r1
 8015420:	4602      	mov	r2, r0
 8015422:	460b      	mov	r3, r1
 8015424:	4640      	mov	r0, r8
 8015426:	4649      	mov	r1, r9
 8015428:	f7eb f8e6 	bl	80005f8 <__aeabi_dmul>
 801542c:	2200      	movs	r2, #0
 801542e:	ec41 0b19 	vmov	d9, r0, r1
 8015432:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015436:	4620      	mov	r0, r4
 8015438:	4629      	mov	r1, r5
 801543a:	f7ea ff25 	bl	8000288 <__aeabi_dsub>
 801543e:	4602      	mov	r2, r0
 8015440:	460b      	mov	r3, r1
 8015442:	ec51 0b19 	vmov	r0, r1, d9
 8015446:	f7eb fa01 	bl	800084c <__aeabi_ddiv>
 801544a:	4632      	mov	r2, r6
 801544c:	4604      	mov	r4, r0
 801544e:	460d      	mov	r5, r1
 8015450:	463b      	mov	r3, r7
 8015452:	4640      	mov	r0, r8
 8015454:	4649      	mov	r1, r9
 8015456:	f7eb f8cf 	bl	80005f8 <__aeabi_dmul>
 801545a:	4632      	mov	r2, r6
 801545c:	463b      	mov	r3, r7
 801545e:	f7ea ff15 	bl	800028c <__adddf3>
 8015462:	4602      	mov	r2, r0
 8015464:	460b      	mov	r3, r1
 8015466:	4620      	mov	r0, r4
 8015468:	4629      	mov	r1, r5
 801546a:	f7ea ff0d 	bl	8000288 <__aeabi_dsub>
 801546e:	4642      	mov	r2, r8
 8015470:	464b      	mov	r3, r9
 8015472:	f7ea ff09 	bl	8000288 <__aeabi_dsub>
 8015476:	460b      	mov	r3, r1
 8015478:	4602      	mov	r2, r0
 801547a:	4939      	ldr	r1, [pc, #228]	; (8015560 <__ieee754_pow+0xa40>)
 801547c:	2000      	movs	r0, #0
 801547e:	f7ea ff03 	bl	8000288 <__aeabi_dsub>
 8015482:	ec41 0b10 	vmov	d0, r0, r1
 8015486:	ee10 3a90 	vmov	r3, s1
 801548a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 801548e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8015492:	da2b      	bge.n	80154ec <__ieee754_pow+0x9cc>
 8015494:	4650      	mov	r0, sl
 8015496:	f000 f89f 	bl	80155d8 <scalbn>
 801549a:	ec51 0b10 	vmov	r0, r1, d0
 801549e:	ec53 2b18 	vmov	r2, r3, d8
 80154a2:	f7ff bbee 	b.w	8014c82 <__ieee754_pow+0x162>
 80154a6:	4b2f      	ldr	r3, [pc, #188]	; (8015564 <__ieee754_pow+0xa44>)
 80154a8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80154ac:	429e      	cmp	r6, r3
 80154ae:	f77f af0d 	ble.w	80152cc <__ieee754_pow+0x7ac>
 80154b2:	4b2d      	ldr	r3, [pc, #180]	; (8015568 <__ieee754_pow+0xa48>)
 80154b4:	440b      	add	r3, r1
 80154b6:	4303      	orrs	r3, r0
 80154b8:	d009      	beq.n	80154ce <__ieee754_pow+0x9ae>
 80154ba:	ec51 0b18 	vmov	r0, r1, d8
 80154be:	2200      	movs	r2, #0
 80154c0:	2300      	movs	r3, #0
 80154c2:	f7eb fb0b 	bl	8000adc <__aeabi_dcmplt>
 80154c6:	3800      	subs	r0, #0
 80154c8:	bf18      	it	ne
 80154ca:	2001      	movne	r0, #1
 80154cc:	e448      	b.n	8014d60 <__ieee754_pow+0x240>
 80154ce:	4622      	mov	r2, r4
 80154d0:	462b      	mov	r3, r5
 80154d2:	f7ea fed9 	bl	8000288 <__aeabi_dsub>
 80154d6:	4642      	mov	r2, r8
 80154d8:	464b      	mov	r3, r9
 80154da:	f7eb fb13 	bl	8000b04 <__aeabi_dcmpge>
 80154de:	2800      	cmp	r0, #0
 80154e0:	f43f aef4 	beq.w	80152cc <__ieee754_pow+0x7ac>
 80154e4:	e7e9      	b.n	80154ba <__ieee754_pow+0x99a>
 80154e6:	f04f 0a00 	mov.w	sl, #0
 80154ea:	e71a      	b.n	8015322 <__ieee754_pow+0x802>
 80154ec:	ec51 0b10 	vmov	r0, r1, d0
 80154f0:	4619      	mov	r1, r3
 80154f2:	e7d4      	b.n	801549e <__ieee754_pow+0x97e>
 80154f4:	491a      	ldr	r1, [pc, #104]	; (8015560 <__ieee754_pow+0xa40>)
 80154f6:	2000      	movs	r0, #0
 80154f8:	f7ff bb31 	b.w	8014b5e <__ieee754_pow+0x3e>
 80154fc:	2000      	movs	r0, #0
 80154fe:	2100      	movs	r1, #0
 8015500:	f7ff bb2d 	b.w	8014b5e <__ieee754_pow+0x3e>
 8015504:	4630      	mov	r0, r6
 8015506:	4639      	mov	r1, r7
 8015508:	f7ff bb29 	b.w	8014b5e <__ieee754_pow+0x3e>
 801550c:	9204      	str	r2, [sp, #16]
 801550e:	f7ff bb7b 	b.w	8014c08 <__ieee754_pow+0xe8>
 8015512:	2300      	movs	r3, #0
 8015514:	f7ff bb65 	b.w	8014be2 <__ieee754_pow+0xc2>
 8015518:	00000000 	.word	0x00000000
 801551c:	3fe62e43 	.word	0x3fe62e43
 8015520:	fefa39ef 	.word	0xfefa39ef
 8015524:	3fe62e42 	.word	0x3fe62e42
 8015528:	0ca86c39 	.word	0x0ca86c39
 801552c:	be205c61 	.word	0xbe205c61
 8015530:	72bea4d0 	.word	0x72bea4d0
 8015534:	3e663769 	.word	0x3e663769
 8015538:	c5d26bf1 	.word	0xc5d26bf1
 801553c:	3ebbbd41 	.word	0x3ebbbd41
 8015540:	af25de2c 	.word	0xaf25de2c
 8015544:	3f11566a 	.word	0x3f11566a
 8015548:	16bebd93 	.word	0x16bebd93
 801554c:	3f66c16c 	.word	0x3f66c16c
 8015550:	5555553e 	.word	0x5555553e
 8015554:	3fc55555 	.word	0x3fc55555
 8015558:	3fe00000 	.word	0x3fe00000
 801555c:	fff00000 	.word	0xfff00000
 8015560:	3ff00000 	.word	0x3ff00000
 8015564:	4090cbff 	.word	0x4090cbff
 8015568:	3f6f3400 	.word	0x3f6f3400
 801556c:	652b82fe 	.word	0x652b82fe
 8015570:	3c971547 	.word	0x3c971547

08015574 <with_errno>:
 8015574:	b570      	push	{r4, r5, r6, lr}
 8015576:	4604      	mov	r4, r0
 8015578:	460d      	mov	r5, r1
 801557a:	4616      	mov	r6, r2
 801557c:	f7fc fd62 	bl	8012044 <__errno>
 8015580:	4629      	mov	r1, r5
 8015582:	6006      	str	r6, [r0, #0]
 8015584:	4620      	mov	r0, r4
 8015586:	bd70      	pop	{r4, r5, r6, pc}

08015588 <xflow>:
 8015588:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801558a:	4614      	mov	r4, r2
 801558c:	461d      	mov	r5, r3
 801558e:	b108      	cbz	r0, 8015594 <xflow+0xc>
 8015590:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8015594:	e9cd 2300 	strd	r2, r3, [sp]
 8015598:	e9dd 2300 	ldrd	r2, r3, [sp]
 801559c:	4620      	mov	r0, r4
 801559e:	4629      	mov	r1, r5
 80155a0:	f7eb f82a 	bl	80005f8 <__aeabi_dmul>
 80155a4:	2222      	movs	r2, #34	; 0x22
 80155a6:	b003      	add	sp, #12
 80155a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80155ac:	f7ff bfe2 	b.w	8015574 <with_errno>

080155b0 <__math_uflow>:
 80155b0:	b508      	push	{r3, lr}
 80155b2:	2200      	movs	r2, #0
 80155b4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80155b8:	f7ff ffe6 	bl	8015588 <xflow>
 80155bc:	ec41 0b10 	vmov	d0, r0, r1
 80155c0:	bd08      	pop	{r3, pc}

080155c2 <__math_oflow>:
 80155c2:	b508      	push	{r3, lr}
 80155c4:	2200      	movs	r2, #0
 80155c6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80155ca:	f7ff ffdd 	bl	8015588 <xflow>
 80155ce:	ec41 0b10 	vmov	d0, r0, r1
 80155d2:	bd08      	pop	{r3, pc}
 80155d4:	0000      	movs	r0, r0
	...

080155d8 <scalbn>:
 80155d8:	b570      	push	{r4, r5, r6, lr}
 80155da:	ec55 4b10 	vmov	r4, r5, d0
 80155de:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80155e2:	4606      	mov	r6, r0
 80155e4:	462b      	mov	r3, r5
 80155e6:	b999      	cbnz	r1, 8015610 <scalbn+0x38>
 80155e8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80155ec:	4323      	orrs	r3, r4
 80155ee:	d03f      	beq.n	8015670 <scalbn+0x98>
 80155f0:	4b35      	ldr	r3, [pc, #212]	; (80156c8 <scalbn+0xf0>)
 80155f2:	4629      	mov	r1, r5
 80155f4:	ee10 0a10 	vmov	r0, s0
 80155f8:	2200      	movs	r2, #0
 80155fa:	f7ea fffd 	bl	80005f8 <__aeabi_dmul>
 80155fe:	4b33      	ldr	r3, [pc, #204]	; (80156cc <scalbn+0xf4>)
 8015600:	429e      	cmp	r6, r3
 8015602:	4604      	mov	r4, r0
 8015604:	460d      	mov	r5, r1
 8015606:	da10      	bge.n	801562a <scalbn+0x52>
 8015608:	a327      	add	r3, pc, #156	; (adr r3, 80156a8 <scalbn+0xd0>)
 801560a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801560e:	e01f      	b.n	8015650 <scalbn+0x78>
 8015610:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8015614:	4291      	cmp	r1, r2
 8015616:	d10c      	bne.n	8015632 <scalbn+0x5a>
 8015618:	ee10 2a10 	vmov	r2, s0
 801561c:	4620      	mov	r0, r4
 801561e:	4629      	mov	r1, r5
 8015620:	f7ea fe34 	bl	800028c <__adddf3>
 8015624:	4604      	mov	r4, r0
 8015626:	460d      	mov	r5, r1
 8015628:	e022      	b.n	8015670 <scalbn+0x98>
 801562a:	460b      	mov	r3, r1
 801562c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8015630:	3936      	subs	r1, #54	; 0x36
 8015632:	f24c 3250 	movw	r2, #50000	; 0xc350
 8015636:	4296      	cmp	r6, r2
 8015638:	dd0d      	ble.n	8015656 <scalbn+0x7e>
 801563a:	2d00      	cmp	r5, #0
 801563c:	a11c      	add	r1, pc, #112	; (adr r1, 80156b0 <scalbn+0xd8>)
 801563e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015642:	da02      	bge.n	801564a <scalbn+0x72>
 8015644:	a11c      	add	r1, pc, #112	; (adr r1, 80156b8 <scalbn+0xe0>)
 8015646:	e9d1 0100 	ldrd	r0, r1, [r1]
 801564a:	a319      	add	r3, pc, #100	; (adr r3, 80156b0 <scalbn+0xd8>)
 801564c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015650:	f7ea ffd2 	bl	80005f8 <__aeabi_dmul>
 8015654:	e7e6      	b.n	8015624 <scalbn+0x4c>
 8015656:	1872      	adds	r2, r6, r1
 8015658:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801565c:	428a      	cmp	r2, r1
 801565e:	dcec      	bgt.n	801563a <scalbn+0x62>
 8015660:	2a00      	cmp	r2, #0
 8015662:	dd08      	ble.n	8015676 <scalbn+0x9e>
 8015664:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015668:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801566c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015670:	ec45 4b10 	vmov	d0, r4, r5
 8015674:	bd70      	pop	{r4, r5, r6, pc}
 8015676:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801567a:	da08      	bge.n	801568e <scalbn+0xb6>
 801567c:	2d00      	cmp	r5, #0
 801567e:	a10a      	add	r1, pc, #40	; (adr r1, 80156a8 <scalbn+0xd0>)
 8015680:	e9d1 0100 	ldrd	r0, r1, [r1]
 8015684:	dac0      	bge.n	8015608 <scalbn+0x30>
 8015686:	a10e      	add	r1, pc, #56	; (adr r1, 80156c0 <scalbn+0xe8>)
 8015688:	e9d1 0100 	ldrd	r0, r1, [r1]
 801568c:	e7bc      	b.n	8015608 <scalbn+0x30>
 801568e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015692:	3236      	adds	r2, #54	; 0x36
 8015694:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015698:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801569c:	4620      	mov	r0, r4
 801569e:	4b0c      	ldr	r3, [pc, #48]	; (80156d0 <scalbn+0xf8>)
 80156a0:	2200      	movs	r2, #0
 80156a2:	e7d5      	b.n	8015650 <scalbn+0x78>
 80156a4:	f3af 8000 	nop.w
 80156a8:	c2f8f359 	.word	0xc2f8f359
 80156ac:	01a56e1f 	.word	0x01a56e1f
 80156b0:	8800759c 	.word	0x8800759c
 80156b4:	7e37e43c 	.word	0x7e37e43c
 80156b8:	8800759c 	.word	0x8800759c
 80156bc:	fe37e43c 	.word	0xfe37e43c
 80156c0:	c2f8f359 	.word	0xc2f8f359
 80156c4:	81a56e1f 	.word	0x81a56e1f
 80156c8:	43500000 	.word	0x43500000
 80156cc:	ffff3cb0 	.word	0xffff3cb0
 80156d0:	3c900000 	.word	0x3c900000

080156d4 <_init>:
 80156d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156d6:	bf00      	nop
 80156d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156da:	bc08      	pop	{r3}
 80156dc:	469e      	mov	lr, r3
 80156de:	4770      	bx	lr

080156e0 <_fini>:
 80156e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80156e2:	bf00      	nop
 80156e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80156e6:	bc08      	pop	{r3}
 80156e8:	469e      	mov	lr, r3
 80156ea:	4770      	bx	lr
