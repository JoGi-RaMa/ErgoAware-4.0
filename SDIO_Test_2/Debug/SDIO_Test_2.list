
SDIO_Test_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001227c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08012410  08012410  00022410  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012878  08012878  000302d8  2**0
                  CONTENTS
  4 .ARM          00000008  08012878  08012878  00022878  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012880  08012880  000302d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012880  08012880  00022880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012884  08012884  00022884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d8  20000000  08012888  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302d8  2**0
                  CONTENTS
 10 .bss          000020e8  200002d8  200002d8  000302d8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200023c0  200023c0  000302d8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302d8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030308  2**0
                  CONTENTS, READONLY
 14 .debug_info   000206ec  00000000  00000000  0003034b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004ccc  00000000  00000000  00050a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c50  00000000  00000000  00055708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000015e2  00000000  00000000  00057358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00008010  00000000  00000000  0005893a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023e20  00000000  00000000  0006094a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cf666  00000000  00000000  0008476a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008bf4  00000000  00000000  00153dd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0015c9c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002d8 	.word	0x200002d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080123f4 	.word	0x080123f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002dc 	.word	0x200002dc
 80001cc:	080123f4 	.word	0x080123f4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <LSM6DSOX_begin>:
int16_t data_gyr[3];
int16_t data_temp[1];


int LSM6DSOX_begin(I2C_HandleTypeDef* I2Cx, uint8_t imu_address) // Wake up the sensor boards -> Configurations
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	70fb      	strb	r3, [r7, #3]
//  }
	
	// I2C_HandleTypeDef* I2CX = I2Cx;
	

  if (LSM6DSOX_readRegister8(I2Cx, imu_address, LSM6DSOX_WHO_AM_I_REG) != 0x6C) {
 8000eb0:	78fb      	ldrb	r3, [r7, #3]
 8000eb2:	220f      	movs	r2, #15
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	6878      	ldr	r0, [r7, #4]
 8000eb8:	f000 f834 	bl	8000f24 <LSM6DSOX_readRegister8>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b6c      	cmp	r3, #108	; 0x6c
 8000ec0:	d006      	beq.n	8000ed0 <LSM6DSOX_begin+0x2c>
    //end();
		// I2C_HandleTypeDef* I2Cx = I2Cx; // Resende
		LSM6DSOX_end(I2Cx, imu_address);
 8000ec2:	78fb      	ldrb	r3, [r7, #3]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f000 f881 	bl	8000fce <LSM6DSOX_end>
    return 0;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e01f      	b.n	8000f10 <LSM6DSOX_begin+0x6c>
	// FASTSETTL_MODE_XL = 0 -> Enables LPF2 and fast-setting mode 
	// HP_SLOPE_XL_EN = 0
	// XL_FS_MODE = 0
	// LOW_PASS_ON_6D = 0
	// 00000000 -> 0x00
	LSM6DSOX_writeRegister8(I2Cx, imu_address, LSM6DSOX_CTRL8_XL, 0x00); // Resende
 8000ed0:	78f9      	ldrb	r1, [r7, #3]
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	2217      	movs	r2, #23
 8000ed6:	6878      	ldr	r0, [r7, #4]
 8000ed8:	f000 f856 	bl	8000f88 <LSM6DSOX_writeRegister8>
	// For 16g: FS_XS = 01
	// For 4g: FS_XS = 10
	// For 2g: FS_XS = 00
	// LPF2_XL_EN = 0 -> disable LPF2 in acc acquisition
	// 10000100 -> 0x84
  LSM6DSOX_writeRegister8(I2Cx, imu_address, LSM6DSOX_CTRL1_XL, 0x84);
 8000edc:	78f9      	ldrb	r1, [r7, #3]
 8000ede:	2384      	movs	r3, #132	; 0x84
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f000 f850 	bl	8000f88 <LSM6DSOX_writeRegister8>
	acc_FS = 16; //g
 8000ee8:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <LSM6DSOX_begin+0x74>)
 8000eea:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8000eee:	601a      	str	r2, [r3, #0]
	// HPM_GN = 00 => (16mHz)
	// OIS_ON_EN = 0
	// USR_OFF_ON_OUT = 0
	// OIS_ON = 0
	// 00000000 -> 0x00
	LSM6DSOX_writeRegister8(I2Cx, imu_address, LSM6DSOX_CTRL7_G, 0x00);
 8000ef0:	78f9      	ldrb	r1, [r7, #3]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	2216      	movs	r2, #22
 8000ef6:	6878      	ldr	r0, [r7, #4]
 8000ef8:	f000 f846 	bl	8000f88 <LSM6DSOX_writeRegister8>
	// For 500dps: FS_G = 01
	// For 1000dps: FS_G = 10
	// For 2000dps: FS_G = 11
	// FS_125 = 0
	// 10001100 -> 0x8C
  LSM6DSOX_writeRegister8(I2Cx, imu_address, LSM6DSOX_CTRL2_G, 0x74);
 8000efc:	78f9      	ldrb	r1, [r7, #3]
 8000efe:	2374      	movs	r3, #116	; 0x74
 8000f00:	2211      	movs	r2, #17
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f000 f840 	bl	8000f88 <LSM6DSOX_writeRegister8>
  gyr_FS = 500; // dps
 8000f08:	4b04      	ldr	r3, [pc, #16]	; (8000f1c <LSM6DSOX_begin+0x78>)
 8000f0a:	4a05      	ldr	r2, [pc, #20]	; (8000f20 <LSM6DSOX_begin+0x7c>)
 8000f0c:	601a      	str	r2, [r3, #0]

  return 1;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	3708      	adds	r7, #8
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	200002f4 	.word	0x200002f4
 8000f1c:	200002f8 	.word	0x200002f8
 8000f20:	43fa0000 	.word	0x43fa0000

08000f24 <LSM6DSOX_readRegister8>:



uint8_t LSM6DSOX_readRegister8(I2C_HandleTypeDef* I2Cx, uint8_t imu_address, uint8_t reg) { // Altered to include various i2c peripheral addresses - Resende
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af02      	add	r7, sp, #8
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	70fb      	strb	r3, [r7, #3]
 8000f30:	4613      	mov	r3, r2
 8000f32:	70bb      	strb	r3, [r7, #2]

  uint8_t x;
  HAL_StatusTypeDef result;
	// I2C_HandleTypeDef* I2Cx = I2Cx; // TODO: Remove this after and see if it works - Resende
  
  result = HAL_I2C_Master_Transmit( I2Cx, (imu_address << 1), &reg, 1, 10 ); // Original device address - (LSM6DSOX_ADDRESS << 1) - Resende
 8000f34:	78fb      	ldrb	r3, [r7, #3]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	005b      	lsls	r3, r3, #1
 8000f3a:	b299      	uxth	r1, r3
 8000f3c:	1cba      	adds	r2, r7, #2
 8000f3e:	230a      	movs	r3, #10
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	2301      	movs	r3, #1
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f002 feef 	bl	8003d28 <HAL_I2C_Master_Transmit>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	73fb      	strb	r3, [r7, #15]
  if( result != HAL_OK ) 
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <LSM6DSOX_readRegister8+0x34>
  {
    /*Failed to send register value to driver*/
    x = 0;
 8000f54:	2300      	movs	r3, #0
 8000f56:	73bb      	strb	r3, [r7, #14]
  }
  
  result = HAL_I2C_Master_Receive ( I2Cx, (imu_address << 1) , &x  , 1, 10 ); // TODO: Try to commute the least valued bit to 1 - read mode
 8000f58:	78fb      	ldrb	r3, [r7, #3]
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	b299      	uxth	r1, r3
 8000f60:	f107 020e 	add.w	r2, r7, #14
 8000f64:	230a      	movs	r3, #10
 8000f66:	9300      	str	r3, [sp, #0]
 8000f68:	2301      	movs	r3, #1
 8000f6a:	6878      	ldr	r0, [r7, #4]
 8000f6c:	f002 ffda 	bl	8003f24 <HAL_I2C_Master_Receive>
 8000f70:	4603      	mov	r3, r0
 8000f72:	73fb      	strb	r3, [r7, #15]
  if( result != HAL_OK ) 
 8000f74:	7bfb      	ldrb	r3, [r7, #15]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <LSM6DSOX_readRegister8+0x5a>
  {
    /*Failed to send register value to driver*/
    x = 0;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	73bb      	strb	r3, [r7, #14]
  }
  
  return x;
 8000f7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <LSM6DSOX_writeRegister8>:


void LSM6DSOX_writeRegister8(I2C_HandleTypeDef* I2Cx, uint8_t imu_address, uint8_t reg, uint8_t val) { // Altered to include various i2c peripheral addresses - Resende
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	4608      	mov	r0, r1
 8000f92:	4611      	mov	r1, r2
 8000f94:	461a      	mov	r2, r3
 8000f96:	4603      	mov	r3, r0
 8000f98:	70fb      	strb	r3, [r7, #3]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	70bb      	strb	r3, [r7, #2]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	707b      	strb	r3, [r7, #1]
   
  HAL_StatusTypeDef result;
  // I2C_HandleTypeDef* I2Cx = I2Cx; // TODO: Remove this after and see if this works - Resende
  uint8_t data[2];
  
  data[0] = reg;
 8000fa2:	78bb      	ldrb	r3, [r7, #2]
 8000fa4:	733b      	strb	r3, [r7, #12]
  data[1] = val;
 8000fa6:	787b      	ldrb	r3, [r7, #1]
 8000fa8:	737b      	strb	r3, [r7, #13]
  
  result = HAL_I2C_Master_Transmit( I2Cx, (imu_address << 1), data, 2, 10 ); // Original device address - (LSM6DSOX_ADDRESS << 1) - Resende
 8000faa:	78fb      	ldrb	r3, [r7, #3]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	b299      	uxth	r1, r3
 8000fb2:	f107 020c 	add.w	r2, r7, #12
 8000fb6:	230a      	movs	r3, #10
 8000fb8:	9300      	str	r3, [sp, #0]
 8000fba:	2302      	movs	r3, #2
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	f002 feb3 	bl	8003d28 <HAL_I2C_Master_Transmit>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	73fb      	strb	r3, [r7, #15]
  if( result != HAL_OK ) 
  {
    /*Failed to send register value to driver*/    
  }
  
}
 8000fc6:	bf00      	nop
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <LSM6DSOX_end>:

void LSM6DSOX_end(I2C_HandleTypeDef* I2Cx, uint8_t imu_address)
{
 8000fce:	b580      	push	{r7, lr}
 8000fd0:	b082      	sub	sp, #8
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	70fb      	strb	r3, [r7, #3]
		
		// I2C_HandleTypeDef* I2Cx = I2Cx // Resende
	
    LSM6DSOX_writeRegister8(I2Cx, imu_address, LSM6DSOX_CTRL2_G, 0x00);
 8000fda:	78f9      	ldrb	r1, [r7, #3]
 8000fdc:	2300      	movs	r3, #0
 8000fde:	2211      	movs	r2, #17
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f7ff ffd1 	bl	8000f88 <LSM6DSOX_writeRegister8>
    LSM6DSOX_writeRegister8(I2Cx, imu_address, LSM6DSOX_CTRL1_XL, 0x00);
 8000fe6:	78f9      	ldrb	r1, [r7, #3]
 8000fe8:	2300      	movs	r3, #0
 8000fea:	2210      	movs	r2, #16
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ffcb 	bl	8000f88 <LSM6DSOX_writeRegister8>
    // Desconnectar I2C _wire->end();
  
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
	...

08000ffc <LSM6DSOX_readAcceleration>:

//returns data in g
int LSM6DSOX_readAcceleration(I2C_HandleTypeDef* I2Cx, uint8_t imu_address, float* x, float* y, float* z)
{	
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b088      	sub	sp, #32
 8001000:	af02      	add	r7, sp, #8
 8001002:	60f8      	str	r0, [r7, #12]
 8001004:	607a      	str	r2, [r7, #4]
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	460b      	mov	r3, r1
 800100a:	72fb      	strb	r3, [r7, #11]
	// I2C_HandleTypeDef* I2Cx = I2Cx // Resende
  int16_t data[3];

  if (!LSM6DSOX_readRegisters(I2Cx, imu_address, LSM6DSOX_OUTX_L_XL, (uint8_t*)data, sizeof(data))) {
 800100c:	f107 0310 	add.w	r3, r7, #16
 8001010:	7af9      	ldrb	r1, [r7, #11]
 8001012:	2206      	movs	r2, #6
 8001014:	9200      	str	r2, [sp, #0]
 8001016:	2228      	movs	r2, #40	; 0x28
 8001018:	68f8      	ldr	r0, [r7, #12]
 800101a:	f000 f8d7 	bl	80011cc <LSM6DSOX_readRegisters>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d107      	bne.n	8001034 <LSM6DSOX_readAcceleration+0x38>
    x = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	607b      	str	r3, [r7, #4]
    y = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	603b      	str	r3, [r7, #0]
    z = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	623b      	str	r3, [r7, #32]

    return 0;
 8001030:	2300      	movs	r3, #0
 8001032:	e036      	b.n	80010a2 <LSM6DSOX_readAcceleration+0xa6>
  }

  *x = data[0] * acc_FS / 32768.0; // (2^16)/2 = 32768 (it is dividev by two since data is int16 - signed values - with allowed negative values)
 8001034:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001038:	ee07 3a90 	vmov	s15, r3
 800103c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <LSM6DSOX_readAcceleration+0xb0>)
 8001042:	edd3 7a00 	vldr	s15, [r3]
 8001046:	ee27 7a27 	vmul.f32	s14, s14, s15
 800104a:	eddf 6a19 	vldr	s13, [pc, #100]	; 80010b0 <LSM6DSOX_readAcceleration+0xb4>
 800104e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	edc3 7a00 	vstr	s15, [r3]
  *y = data[1] * acc_FS / 32768.0;
 8001058:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800105c:	ee07 3a90 	vmov	s15, r3
 8001060:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <LSM6DSOX_readAcceleration+0xb0>)
 8001066:	edd3 7a00 	vldr	s15, [r3]
 800106a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800106e:	eddf 6a10 	vldr	s13, [pc, #64]	; 80010b0 <LSM6DSOX_readAcceleration+0xb4>
 8001072:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	edc3 7a00 	vstr	s15, [r3]
  *z = data[2] * acc_FS / 32768.0;
 800107c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001080:	ee07 3a90 	vmov	s15, r3
 8001084:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001088:	4b08      	ldr	r3, [pc, #32]	; (80010ac <LSM6DSOX_readAcceleration+0xb0>)
 800108a:	edd3 7a00 	vldr	s15, [r3]
 800108e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001092:	eddf 6a07 	vldr	s13, [pc, #28]	; 80010b0 <LSM6DSOX_readAcceleration+0xb4>
 8001096:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800109a:	6a3b      	ldr	r3, [r7, #32]
 800109c:	edc3 7a00 	vstr	s15, [r3]

  return 1;
 80010a0:	2301      	movs	r3, #1
	
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	3718      	adds	r7, #24
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	200002f4 	.word	0x200002f4
 80010b0:	47000000 	.word	0x47000000

080010b4 <LSM6DSOX_accelerationAvailable>:
	}
}


int LSM6DSOX_accelerationAvailable(I2C_HandleTypeDef* I2Cx, uint8_t imu_address)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
 80010bc:	460b      	mov	r3, r1
 80010be:	70fb      	strb	r3, [r7, #3]
	//I2C_HandleTypeDef* I2Cx = I2Cx // Resende
  if (LSM6DSOX_readRegister8(I2Cx, imu_address, LSM6DSOX_STATUS_REG) & 0x01) {
 80010c0:	78fb      	ldrb	r3, [r7, #3]
 80010c2:	221e      	movs	r2, #30
 80010c4:	4619      	mov	r1, r3
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ff2c 	bl	8000f24 <LSM6DSOX_readRegister8>
 80010cc:	4603      	mov	r3, r0
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <LSM6DSOX_accelerationAvailable+0x26>
    return 1;
 80010d6:	2301      	movs	r3, #1
 80010d8:	e000      	b.n	80010dc <LSM6DSOX_accelerationAvailable+0x28>
  }

  return 0;
 80010da:	2300      	movs	r3, #0
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <LSM6DSOX_readGyroscope>:


//returns data in dps
int LSM6DSOX_readGyroscope(I2C_HandleTypeDef* I2Cx, uint8_t imu_address, float* x, float* y, float* z)
{		
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af02      	add	r7, sp, #8
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	607a      	str	r2, [r7, #4]
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	460b      	mov	r3, r1
 80010f2:	72fb      	strb	r3, [r7, #11]
		//I2C_HandleTypeDef* I2Cx = I2Cx //Resende
	  int16_t data[3];

  if (!LSM6DSOX_readRegisters(I2Cx, imu_address, LSM6DSOX_OUTX_L_G, (uint8_t*)data, sizeof(data))) {
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	7af9      	ldrb	r1, [r7, #11]
 80010fa:	2206      	movs	r2, #6
 80010fc:	9200      	str	r2, [sp, #0]
 80010fe:	2222      	movs	r2, #34	; 0x22
 8001100:	68f8      	ldr	r0, [r7, #12]
 8001102:	f000 f863 	bl	80011cc <LSM6DSOX_readRegisters>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d107      	bne.n	800111c <LSM6DSOX_readGyroscope+0x38>
    x = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	607b      	str	r3, [r7, #4]
    y = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	603b      	str	r3, [r7, #0]
    z = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	623b      	str	r3, [r7, #32]

    return 0;
 8001118:	2300      	movs	r3, #0
 800111a:	e036      	b.n	800118a <LSM6DSOX_readGyroscope+0xa6>
  }
	
	*x = data[0] * gyr_FS / 32768.0;  // (2^16)/2 = 32768 (it is dividev by two since data is int16 - signed values - with allowed negative values)
 800111c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001128:	4b1a      	ldr	r3, [pc, #104]	; (8001194 <LSM6DSOX_readGyroscope+0xb0>)
 800112a:	edd3 7a00 	vldr	s15, [r3]
 800112e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001132:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001198 <LSM6DSOX_readGyroscope+0xb4>
 8001136:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	edc3 7a00 	vstr	s15, [r3]
  *y = data[1] * gyr_FS / 32768.0;  // (2^16)/2 = 32768 (it is dividev by two since data is int16 - signed values - with allowed negative values)
 8001140:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001144:	ee07 3a90 	vmov	s15, r3
 8001148:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800114c:	4b11      	ldr	r3, [pc, #68]	; (8001194 <LSM6DSOX_readGyroscope+0xb0>)
 800114e:	edd3 7a00 	vldr	s15, [r3]
 8001152:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001156:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001198 <LSM6DSOX_readGyroscope+0xb4>
 800115a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	edc3 7a00 	vstr	s15, [r3]
  *z = data[2] * gyr_FS / 32768.0; // (2^16)/2 = 32768 (it is dividev by two since data is int16 - signed values - with allowed negative values) 
 8001164:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001168:	ee07 3a90 	vmov	s15, r3
 800116c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <LSM6DSOX_readGyroscope+0xb0>)
 8001172:	edd3 7a00 	vldr	s15, [r3]
 8001176:	ee27 7a27 	vmul.f32	s14, s14, s15
 800117a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001198 <LSM6DSOX_readGyroscope+0xb4>
 800117e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001182:	6a3b      	ldr	r3, [r7, #32]
 8001184:	edc3 7a00 	vstr	s15, [r3]
	
  return 1;
 8001188:	2301      	movs	r3, #1
	
}
 800118a:	4618      	mov	r0, r3
 800118c:	3718      	adds	r7, #24
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200002f8 	.word	0x200002f8
 8001198:	47000000 	.word	0x47000000

0800119c <LSM6DSOX_gyroscopeAvailable>:
		return *data_gyr;
	}
}

int LSM6DSOX_gyroscopeAvailable(I2C_HandleTypeDef* I2Cx, uint8_t imu_address)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
	//I2C_HandleTypeDef* I2Cx = I2Cx
  if (LSM6DSOX_readRegister8(I2Cx, imu_address, LSM6DSOX_STATUS_REG) & 0x02) {
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	221e      	movs	r2, #30
 80011ac:	4619      	mov	r1, r3
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f7ff feb8 	bl	8000f24 <LSM6DSOX_readRegister8>
 80011b4:	4603      	mov	r3, r0
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <LSM6DSOX_gyroscopeAvailable+0x26>
    return 1;
 80011be:	2301      	movs	r3, #1
 80011c0:	e000      	b.n	80011c4 <LSM6DSOX_gyroscopeAvailable+0x28>
  }

  return 0;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <LSM6DSOX_readRegisters>:
}



int LSM6DSOX_readRegisters(I2C_HandleTypeDef* I2Cx, uint8_t imu_address , uint8_t address, uint8_t* data, uint16_t length)
{	
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b088      	sub	sp, #32
 80011d0:	af02      	add	r7, sp, #8
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	460b      	mov	r3, r1
 80011d8:	72fb      	strb	r3, [r7, #11]
 80011da:	4613      	mov	r3, r2
 80011dc:	72bb      	strb	r3, [r7, #10]
	uint8_t x;
  HAL_StatusTypeDef result;
	//I2C_HandleTypeDef* I2Cx = I2Cx // TODO: Remove this after and see if this works
  
  result = HAL_I2C_Master_Transmit( I2Cx, (imu_address << 1), &address, 1, 10 ); // Original address - (LSM6DSOX_ADDRESS << 1) - Resende
 80011de:	7afb      	ldrb	r3, [r7, #11]
 80011e0:	b29b      	uxth	r3, r3
 80011e2:	005b      	lsls	r3, r3, #1
 80011e4:	b299      	uxth	r1, r3
 80011e6:	f107 020a 	add.w	r2, r7, #10
 80011ea:	230a      	movs	r3, #10
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	2301      	movs	r3, #1
 80011f0:	68f8      	ldr	r0, [r7, #12]
 80011f2:	f002 fd99 	bl	8003d28 <HAL_I2C_Master_Transmit>
 80011f6:	4603      	mov	r3, r0
 80011f8:	75fb      	strb	r3, [r7, #23]
  if( result != HAL_OK ) 
 80011fa:	7dfb      	ldrb	r3, [r7, #23]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <LSM6DSOX_readRegisters+0x38>
  {
    /*Failed to send register value to driver*/
    //x = 0;
		return 0;
 8001200:	2300      	movs	r3, #0
 8001202:	e012      	b.n	800122a <LSM6DSOX_readRegisters+0x5e>
  }
  
  result = HAL_I2C_Master_Receive ( I2Cx, (imu_address << 1), data, length, 10);
 8001204:	7afb      	ldrb	r3, [r7, #11]
 8001206:	b29b      	uxth	r3, r3
 8001208:	005b      	lsls	r3, r3, #1
 800120a:	b299      	uxth	r1, r3
 800120c:	8c3b      	ldrh	r3, [r7, #32]
 800120e:	220a      	movs	r2, #10
 8001210:	9200      	str	r2, [sp, #0]
 8001212:	687a      	ldr	r2, [r7, #4]
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f002 fe85 	bl	8003f24 <HAL_I2C_Master_Receive>
 800121a:	4603      	mov	r3, r0
 800121c:	75fb      	strb	r3, [r7, #23]
  if( result != HAL_OK ) 
 800121e:	7dfb      	ldrb	r3, [r7, #23]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <LSM6DSOX_readRegisters+0x5c>
  {
    /*Failed to send register value to driver*/
    //x = 0;
		return 0;
 8001224:	2300      	movs	r3, #0
 8001226:	e000      	b.n	800122a <LSM6DSOX_readRegisters+0x5e>
  }
  
  return 1;
 8001228:	2301      	movs	r3, #1
	//return x;
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <IMU_Initialization>:
SDI_areas Gyro_integral[2] = {0};
Accel_angles Acc_ang[2] = {0};
Estimated_angles Estim_ang[2] = {0};

int IMU_Initialization()
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
	int i;
	int initialization_flag;
	for(i = 0; i<2; i++)
 800123a:	2300      	movs	r3, #0
 800123c:	607b      	str	r3, [r7, #4]
 800123e:	e035      	b.n	80012ac <IMU_Initialization+0x78>
	{
		if(IMU_ON_OFF[i] == 0)
 8001240:	4a1e      	ldr	r2, [pc, #120]	; (80012bc <IMU_Initialization+0x88>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001248:	2b00      	cmp	r3, #0
 800124a:	d12c      	bne.n	80012a6 <IMU_Initialization+0x72>
		{
			switch(i)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <IMU_Initialization+0x26>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d013      	beq.n	8001280 <IMU_Initialization+0x4c>
 8001258:	e025      	b.n	80012a6 <IMU_Initialization+0x72>
			{
			case 0:
				initialization_flag = LSM6DSOX_begin(&hi2c1, LSM6DSOX_ADDRESS_1);
 800125a:	216a      	movs	r1, #106	; 0x6a
 800125c:	4818      	ldr	r0, [pc, #96]	; (80012c0 <IMU_Initialization+0x8c>)
 800125e:	f7ff fe21 	bl	8000ea4 <LSM6DSOX_begin>
 8001262:	6038      	str	r0, [r7, #0]
				if (initialization_flag == 0)
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d104      	bne.n	8001274 <IMU_Initialization+0x40>
				{
					BlinkLED(200, 3);
 800126a:	2103      	movs	r1, #3
 800126c:	20c8      	movs	r0, #200	; 0xc8
 800126e:	f000 fe1f 	bl	8001eb0 <BlinkLED>
				}
				else
				{
					IMU_ON_OFF[i] = 1;
				}
				break;
 8001272:	e018      	b.n	80012a6 <IMU_Initialization+0x72>
					IMU_ON_OFF[i] = 1;
 8001274:	4a11      	ldr	r2, [pc, #68]	; (80012bc <IMU_Initialization+0x88>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2101      	movs	r1, #1
 800127a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800127e:	e012      	b.n	80012a6 <IMU_Initialization+0x72>


			case 1:
				initialization_flag = LSM6DSOX_begin(&hi2c1, LSM6DSOX_ADDRESS_2);
 8001280:	216b      	movs	r1, #107	; 0x6b
 8001282:	480f      	ldr	r0, [pc, #60]	; (80012c0 <IMU_Initialization+0x8c>)
 8001284:	f7ff fe0e 	bl	8000ea4 <LSM6DSOX_begin>
 8001288:	6038      	str	r0, [r7, #0]
				if (initialization_flag == 0)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d104      	bne.n	800129a <IMU_Initialization+0x66>
				{
					BlinkLED(200, 4);
 8001290:	2104      	movs	r1, #4
 8001292:	20c8      	movs	r0, #200	; 0xc8
 8001294:	f000 fe0c 	bl	8001eb0 <BlinkLED>
				}
				else
				{
					IMU_ON_OFF[i] = 1;
				}
				break;
 8001298:	e004      	b.n	80012a4 <IMU_Initialization+0x70>
					IMU_ON_OFF[i] = 1;
 800129a:	4a08      	ldr	r2, [pc, #32]	; (80012bc <IMU_Initialization+0x88>)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2101      	movs	r1, #1
 80012a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 80012a4:	bf00      	nop
	for(i = 0; i<2; i++)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	3301      	adds	r3, #1
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	ddc6      	ble.n	8001240 <IMU_Initialization+0xc>
			}
		}
	}
	return initialization_flag;
 80012b2:	683b      	ldr	r3, [r7, #0]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2000052c 	.word	0x2000052c
 80012c0:	200002fc 	.word	0x200002fc
 80012c4:	00000000 	.word	0x00000000

080012c8 <Accelerometer_Gyroscope_Calibration>:

int Accelerometer_Gyroscope_Calibration()
{
 80012c8:	b5b0      	push	{r4, r5, r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af02      	add	r7, sp, #8
	int i, elapsed_time;
	int calibration_samples = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
	int begin_calibration = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	607b      	str	r3, [r7, #4]
	do
	{

		for(i = 0; i<2; i++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	e239      	b.n	8001750 <Accelerometer_Gyroscope_Calibration+0x488>
		{
			switch(i)
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d004      	beq.n	80012ec <Accelerometer_Gyroscope_Calibration+0x24>
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	f000 811d 	beq.w	8001524 <Accelerometer_Gyroscope_Calibration+0x25c>
 80012ea:	e22e      	b.n	800174a <Accelerometer_Gyroscope_Calibration+0x482>
			{
			case 0:
				if((LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_1) == 1) &
 80012ec:	216a      	movs	r1, #106	; 0x6a
 80012ee:	4889      	ldr	r0, [pc, #548]	; (8001514 <Accelerometer_Gyroscope_Calibration+0x24c>)
 80012f0:	f7ff fee0 	bl	80010b4 <LSM6DSOX_accelerationAvailable>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	bf0c      	ite	eq
 80012fa:	2301      	moveq	r3, #1
 80012fc:	2300      	movne	r3, #0
 80012fe:	b2dc      	uxtb	r4, r3
						(LSM6DSOX_gyroscopeAvailable(&hi2c1, LSM6DSOX_ADDRESS_1) == 1))
 8001300:	216a      	movs	r1, #106	; 0x6a
 8001302:	4884      	ldr	r0, [pc, #528]	; (8001514 <Accelerometer_Gyroscope_Calibration+0x24c>)
 8001304:	f7ff ff4a 	bl	800119c <LSM6DSOX_gyroscopeAvailable>
 8001308:	4603      	mov	r3, r0
				if((LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_1) == 1) &
 800130a:	2b01      	cmp	r3, #1
 800130c:	bf0c      	ite	eq
 800130e:	2301      	moveq	r3, #1
 8001310:	2300      	movne	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	4023      	ands	r3, r4
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d03e      	beq.n	800139a <Accelerometer_Gyroscope_Calibration+0xd2>
				{
					LSM6DSOX_readAcceleration(&hi2c1, LSM6DSOX_ADDRESS_1, &IMUrawdata[i].Accelerometer_X, &IMUrawdata[i].Accelerometer_Y, &IMUrawdata[i].Accelerometer_Z);
 800131c:	68fa      	ldr	r2, [r7, #12]
 800131e:	4613      	mov	r3, r2
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	4413      	add	r3, r2
 8001324:	00db      	lsls	r3, r3, #3
 8001326:	4a7c      	ldr	r2, [pc, #496]	; (8001518 <Accelerometer_Gyroscope_Calibration+0x250>)
 8001328:	1899      	adds	r1, r3, r2
 800132a:	68fa      	ldr	r2, [r7, #12]
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	4a78      	ldr	r2, [pc, #480]	; (8001518 <Accelerometer_Gyroscope_Calibration+0x250>)
 8001336:	4413      	add	r3, r2
 8001338:	1d18      	adds	r0, r3, #4
 800133a:	68fa      	ldr	r2, [r7, #12]
 800133c:	4613      	mov	r3, r2
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	4413      	add	r3, r2
 8001342:	00db      	lsls	r3, r3, #3
 8001344:	3308      	adds	r3, #8
 8001346:	4a74      	ldr	r2, [pc, #464]	; (8001518 <Accelerometer_Gyroscope_Calibration+0x250>)
 8001348:	4413      	add	r3, r2
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	4603      	mov	r3, r0
 800134e:	460a      	mov	r2, r1
 8001350:	216a      	movs	r1, #106	; 0x6a
 8001352:	4870      	ldr	r0, [pc, #448]	; (8001514 <Accelerometer_Gyroscope_Calibration+0x24c>)
 8001354:	f7ff fe52 	bl	8000ffc <LSM6DSOX_readAcceleration>
					LSM6DSOX_readGyroscope(&hi2c1, LSM6DSOX_ADDRESS_1, &IMUrawdata[i].Gyroscope_X, &IMUrawdata[i].Gyroscope_Y, &IMUrawdata[i].Gyroscope_Z);
 8001358:	68fa      	ldr	r2, [r7, #12]
 800135a:	4613      	mov	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4413      	add	r3, r2
 8001360:	00db      	lsls	r3, r3, #3
 8001362:	3308      	adds	r3, #8
 8001364:	4a6c      	ldr	r2, [pc, #432]	; (8001518 <Accelerometer_Gyroscope_Calibration+0x250>)
 8001366:	4413      	add	r3, r2
 8001368:	1d19      	adds	r1, r3, #4
 800136a:	68fa      	ldr	r2, [r7, #12]
 800136c:	4613      	mov	r3, r2
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	4413      	add	r3, r2
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	3310      	adds	r3, #16
 8001376:	4a68      	ldr	r2, [pc, #416]	; (8001518 <Accelerometer_Gyroscope_Calibration+0x250>)
 8001378:	1898      	adds	r0, r3, r2
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	3310      	adds	r3, #16
 8001386:	4a64      	ldr	r2, [pc, #400]	; (8001518 <Accelerometer_Gyroscope_Calibration+0x250>)
 8001388:	4413      	add	r3, r2
 800138a:	3304      	adds	r3, #4
 800138c:	9300      	str	r3, [sp, #0]
 800138e:	4603      	mov	r3, r0
 8001390:	460a      	mov	r2, r1
 8001392:	216a      	movs	r1, #106	; 0x6a
 8001394:	485f      	ldr	r0, [pc, #380]	; (8001514 <Accelerometer_Gyroscope_Calibration+0x24c>)
 8001396:	f7ff fea5 	bl	80010e4 <LSM6DSOX_readGyroscope>
				}
				accelerometer_mean[i][0] += IMUrawdata[i].Accelerometer_X;
 800139a:	4960      	ldr	r1, [pc, #384]	; (800151c <Accelerometer_Gyroscope_Calibration+0x254>)
 800139c:	68fa      	ldr	r2, [r7, #12]
 800139e:	4613      	mov	r3, r2
 80013a0:	005b      	lsls	r3, r3, #1
 80013a2:	4413      	add	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	440b      	add	r3, r1
 80013a8:	ed93 7a00 	vldr	s14, [r3]
 80013ac:	495a      	ldr	r1, [pc, #360]	; (8001518 <Accelerometer_Gyroscope_Calibration+0x250>)
 80013ae:	68fa      	ldr	r2, [r7, #12]
 80013b0:	4613      	mov	r3, r2
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	00db      	lsls	r3, r3, #3
 80013b8:	440b      	add	r3, r1
 80013ba:	edd3 7a00 	vldr	s15, [r3]
 80013be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013c2:	4956      	ldr	r1, [pc, #344]	; (800151c <Accelerometer_Gyroscope_Calibration+0x254>)
 80013c4:	68fa      	ldr	r2, [r7, #12]
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	edc3 7a00 	vstr	s15, [r3]
				accelerometer_mean[i][1] += IMUrawdata[i].Accelerometer_Y;
 80013d4:	4951      	ldr	r1, [pc, #324]	; (800151c <Accelerometer_Gyroscope_Calibration+0x254>)
 80013d6:	68fa      	ldr	r2, [r7, #12]
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	3304      	adds	r3, #4
 80013e4:	ed93 7a00 	vldr	s14, [r3]
 80013e8:	494b      	ldr	r1, [pc, #300]	; (8001518 <Accelerometer_Gyroscope_Calibration+0x250>)
 80013ea:	68fa      	ldr	r2, [r7, #12]
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	440b      	add	r3, r1
 80013f6:	3304      	adds	r3, #4
 80013f8:	edd3 7a00 	vldr	s15, [r3]
 80013fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001400:	4946      	ldr	r1, [pc, #280]	; (800151c <Accelerometer_Gyroscope_Calibration+0x254>)
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	4613      	mov	r3, r2
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4413      	add	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	440b      	add	r3, r1
 800140e:	3304      	adds	r3, #4
 8001410:	edc3 7a00 	vstr	s15, [r3]
				accelerometer_mean[i][2] += IMUrawdata[i].Accelerometer_Z;
 8001414:	4941      	ldr	r1, [pc, #260]	; (800151c <Accelerometer_Gyroscope_Calibration+0x254>)
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	4613      	mov	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	4413      	add	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	440b      	add	r3, r1
 8001422:	3308      	adds	r3, #8
 8001424:	ed93 7a00 	vldr	s14, [r3]
 8001428:	493b      	ldr	r1, [pc, #236]	; (8001518 <Accelerometer_Gyroscope_Calibration+0x250>)
 800142a:	68fa      	ldr	r2, [r7, #12]
 800142c:	4613      	mov	r3, r2
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	4413      	add	r3, r2
 8001432:	00db      	lsls	r3, r3, #3
 8001434:	440b      	add	r3, r1
 8001436:	3308      	adds	r3, #8
 8001438:	edd3 7a00 	vldr	s15, [r3]
 800143c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001440:	4936      	ldr	r1, [pc, #216]	; (800151c <Accelerometer_Gyroscope_Calibration+0x254>)
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	4613      	mov	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	4413      	add	r3, r2
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	440b      	add	r3, r1
 800144e:	3308      	adds	r3, #8
 8001450:	edc3 7a00 	vstr	s15, [r3]
				gyroscope_offset[i][0] += IMUrawdata[i].Gyroscope_X;
 8001454:	4932      	ldr	r1, [pc, #200]	; (8001520 <Accelerometer_Gyroscope_Calibration+0x258>)
 8001456:	68fa      	ldr	r2, [r7, #12]
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	440b      	add	r3, r1
 8001462:	ed93 7a00 	vldr	s14, [r3]
 8001466:	492c      	ldr	r1, [pc, #176]	; (8001518 <Accelerometer_Gyroscope_Calibration+0x250>)
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	4613      	mov	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	4413      	add	r3, r2
 8001470:	00db      	lsls	r3, r3, #3
 8001472:	440b      	add	r3, r1
 8001474:	330c      	adds	r3, #12
 8001476:	edd3 7a00 	vldr	s15, [r3]
 800147a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800147e:	4928      	ldr	r1, [pc, #160]	; (8001520 <Accelerometer_Gyroscope_Calibration+0x258>)
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	edc3 7a00 	vstr	s15, [r3]
				gyroscope_offset[i][1] += IMUrawdata[i].Gyroscope_Y;
 8001490:	4923      	ldr	r1, [pc, #140]	; (8001520 <Accelerometer_Gyroscope_Calibration+0x258>)
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	4613      	mov	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	009b      	lsls	r3, r3, #2
 800149c:	440b      	add	r3, r1
 800149e:	3304      	adds	r3, #4
 80014a0:	ed93 7a00 	vldr	s14, [r3]
 80014a4:	491c      	ldr	r1, [pc, #112]	; (8001518 <Accelerometer_Gyroscope_Calibration+0x250>)
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	4613      	mov	r3, r2
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4413      	add	r3, r2
 80014ae:	00db      	lsls	r3, r3, #3
 80014b0:	440b      	add	r3, r1
 80014b2:	3310      	adds	r3, #16
 80014b4:	edd3 7a00 	vldr	s15, [r3]
 80014b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014bc:	4918      	ldr	r1, [pc, #96]	; (8001520 <Accelerometer_Gyroscope_Calibration+0x258>)
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	4613      	mov	r3, r2
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	4413      	add	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	440b      	add	r3, r1
 80014ca:	3304      	adds	r3, #4
 80014cc:	edc3 7a00 	vstr	s15, [r3]
				gyroscope_offset[i][2] += IMUrawdata[i].Gyroscope_Z;
 80014d0:	4913      	ldr	r1, [pc, #76]	; (8001520 <Accelerometer_Gyroscope_Calibration+0x258>)
 80014d2:	68fa      	ldr	r2, [r7, #12]
 80014d4:	4613      	mov	r3, r2
 80014d6:	005b      	lsls	r3, r3, #1
 80014d8:	4413      	add	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	3308      	adds	r3, #8
 80014e0:	ed93 7a00 	vldr	s14, [r3]
 80014e4:	490c      	ldr	r1, [pc, #48]	; (8001518 <Accelerometer_Gyroscope_Calibration+0x250>)
 80014e6:	68fa      	ldr	r2, [r7, #12]
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	440b      	add	r3, r1
 80014f2:	3314      	adds	r3, #20
 80014f4:	edd3 7a00 	vldr	s15, [r3]
 80014f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014fc:	4908      	ldr	r1, [pc, #32]	; (8001520 <Accelerometer_Gyroscope_Calibration+0x258>)
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	440b      	add	r3, r1
 800150a:	3308      	adds	r3, #8
 800150c:	edc3 7a00 	vstr	s15, [r3]

				break;
 8001510:	e11b      	b.n	800174a <Accelerometer_Gyroscope_Calibration+0x482>
 8001512:	bf00      	nop
 8001514:	200002fc 	.word	0x200002fc
 8001518:	2000056c 	.word	0x2000056c
 800151c:	20000534 	.word	0x20000534
 8001520:	2000054c 	.word	0x2000054c

			case 1:
				if((LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_2) == 1) &
 8001524:	216b      	movs	r1, #107	; 0x6b
 8001526:	4895      	ldr	r0, [pc, #596]	; (800177c <Accelerometer_Gyroscope_Calibration+0x4b4>)
 8001528:	f7ff fdc4 	bl	80010b4 <LSM6DSOX_accelerationAvailable>
 800152c:	4603      	mov	r3, r0
 800152e:	2b01      	cmp	r3, #1
 8001530:	bf0c      	ite	eq
 8001532:	2301      	moveq	r3, #1
 8001534:	2300      	movne	r3, #0
 8001536:	b2dc      	uxtb	r4, r3
						(LSM6DSOX_gyroscopeAvailable(&hi2c1, LSM6DSOX_ADDRESS_2) == 1))
 8001538:	216b      	movs	r1, #107	; 0x6b
 800153a:	4890      	ldr	r0, [pc, #576]	; (800177c <Accelerometer_Gyroscope_Calibration+0x4b4>)
 800153c:	f7ff fe2e 	bl	800119c <LSM6DSOX_gyroscopeAvailable>
 8001540:	4603      	mov	r3, r0
				if((LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_2) == 1) &
 8001542:	2b01      	cmp	r3, #1
 8001544:	bf0c      	ite	eq
 8001546:	2301      	moveq	r3, #1
 8001548:	2300      	movne	r3, #0
 800154a:	b2db      	uxtb	r3, r3
 800154c:	4023      	ands	r3, r4
 800154e:	b2db      	uxtb	r3, r3
 8001550:	2b00      	cmp	r3, #0
 8001552:	d03e      	beq.n	80015d2 <Accelerometer_Gyroscope_Calibration+0x30a>
				{
					LSM6DSOX_readAcceleration(&hi2c1, LSM6DSOX_ADDRESS_2, &IMUrawdata[i].Accelerometer_X, &IMUrawdata[i].Accelerometer_Y, &IMUrawdata[i].Accelerometer_Z);
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	00db      	lsls	r3, r3, #3
 800155e:	4a88      	ldr	r2, [pc, #544]	; (8001780 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 8001560:	1899      	adds	r1, r3, r2
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4613      	mov	r3, r2
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	4413      	add	r3, r2
 800156a:	00db      	lsls	r3, r3, #3
 800156c:	4a84      	ldr	r2, [pc, #528]	; (8001780 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 800156e:	4413      	add	r3, r2
 8001570:	1d18      	adds	r0, r3, #4
 8001572:	68fa      	ldr	r2, [r7, #12]
 8001574:	4613      	mov	r3, r2
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	4413      	add	r3, r2
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	3308      	adds	r3, #8
 800157e:	4a80      	ldr	r2, [pc, #512]	; (8001780 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 8001580:	4413      	add	r3, r2
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	4603      	mov	r3, r0
 8001586:	460a      	mov	r2, r1
 8001588:	216b      	movs	r1, #107	; 0x6b
 800158a:	487c      	ldr	r0, [pc, #496]	; (800177c <Accelerometer_Gyroscope_Calibration+0x4b4>)
 800158c:	f7ff fd36 	bl	8000ffc <LSM6DSOX_readAcceleration>
					LSM6DSOX_readGyroscope(&hi2c1, LSM6DSOX_ADDRESS_2, &IMUrawdata[i].Gyroscope_X, &IMUrawdata[i].Gyroscope_Y, &IMUrawdata[i].Gyroscope_Z);
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	3308      	adds	r3, #8
 800159c:	4a78      	ldr	r2, [pc, #480]	; (8001780 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 800159e:	4413      	add	r3, r2
 80015a0:	1d19      	adds	r1, r3, #4
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	3310      	adds	r3, #16
 80015ae:	4a74      	ldr	r2, [pc, #464]	; (8001780 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 80015b0:	1898      	adds	r0, r3, r2
 80015b2:	68fa      	ldr	r2, [r7, #12]
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	00db      	lsls	r3, r3, #3
 80015bc:	3310      	adds	r3, #16
 80015be:	4a70      	ldr	r2, [pc, #448]	; (8001780 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 80015c0:	4413      	add	r3, r2
 80015c2:	3304      	adds	r3, #4
 80015c4:	9300      	str	r3, [sp, #0]
 80015c6:	4603      	mov	r3, r0
 80015c8:	460a      	mov	r2, r1
 80015ca:	216b      	movs	r1, #107	; 0x6b
 80015cc:	486b      	ldr	r0, [pc, #428]	; (800177c <Accelerometer_Gyroscope_Calibration+0x4b4>)
 80015ce:	f7ff fd89 	bl	80010e4 <LSM6DSOX_readGyroscope>
				}
				accelerometer_mean[i][0] += IMUrawdata[i].Accelerometer_X;
 80015d2:	496c      	ldr	r1, [pc, #432]	; (8001784 <Accelerometer_Gyroscope_Calibration+0x4bc>)
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	4613      	mov	r3, r2
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	4413      	add	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	440b      	add	r3, r1
 80015e0:	ed93 7a00 	vldr	s14, [r3]
 80015e4:	4966      	ldr	r1, [pc, #408]	; (8001780 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	4613      	mov	r3, r2
 80015ea:	005b      	lsls	r3, r3, #1
 80015ec:	4413      	add	r3, r2
 80015ee:	00db      	lsls	r3, r3, #3
 80015f0:	440b      	add	r3, r1
 80015f2:	edd3 7a00 	vldr	s15, [r3]
 80015f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015fa:	4962      	ldr	r1, [pc, #392]	; (8001784 <Accelerometer_Gyroscope_Calibration+0x4bc>)
 80015fc:	68fa      	ldr	r2, [r7, #12]
 80015fe:	4613      	mov	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	4413      	add	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	440b      	add	r3, r1
 8001608:	edc3 7a00 	vstr	s15, [r3]
				accelerometer_mean[i][1] += IMUrawdata[i].Accelerometer_Y;
 800160c:	495d      	ldr	r1, [pc, #372]	; (8001784 <Accelerometer_Gyroscope_Calibration+0x4bc>)
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	440b      	add	r3, r1
 800161a:	3304      	adds	r3, #4
 800161c:	ed93 7a00 	vldr	s14, [r3]
 8001620:	4957      	ldr	r1, [pc, #348]	; (8001780 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	4613      	mov	r3, r2
 8001626:	005b      	lsls	r3, r3, #1
 8001628:	4413      	add	r3, r2
 800162a:	00db      	lsls	r3, r3, #3
 800162c:	440b      	add	r3, r1
 800162e:	3304      	adds	r3, #4
 8001630:	edd3 7a00 	vldr	s15, [r3]
 8001634:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001638:	4952      	ldr	r1, [pc, #328]	; (8001784 <Accelerometer_Gyroscope_Calibration+0x4bc>)
 800163a:	68fa      	ldr	r2, [r7, #12]
 800163c:	4613      	mov	r3, r2
 800163e:	005b      	lsls	r3, r3, #1
 8001640:	4413      	add	r3, r2
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	3304      	adds	r3, #4
 8001648:	edc3 7a00 	vstr	s15, [r3]
				accelerometer_mean[i][2] += IMUrawdata[i].Accelerometer_Z;
 800164c:	494d      	ldr	r1, [pc, #308]	; (8001784 <Accelerometer_Gyroscope_Calibration+0x4bc>)
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	440b      	add	r3, r1
 800165a:	3308      	adds	r3, #8
 800165c:	ed93 7a00 	vldr	s14, [r3]
 8001660:	4947      	ldr	r1, [pc, #284]	; (8001780 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 8001662:	68fa      	ldr	r2, [r7, #12]
 8001664:	4613      	mov	r3, r2
 8001666:	005b      	lsls	r3, r3, #1
 8001668:	4413      	add	r3, r2
 800166a:	00db      	lsls	r3, r3, #3
 800166c:	440b      	add	r3, r1
 800166e:	3308      	adds	r3, #8
 8001670:	edd3 7a00 	vldr	s15, [r3]
 8001674:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001678:	4942      	ldr	r1, [pc, #264]	; (8001784 <Accelerometer_Gyroscope_Calibration+0x4bc>)
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	4613      	mov	r3, r2
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	4413      	add	r3, r2
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	440b      	add	r3, r1
 8001686:	3308      	adds	r3, #8
 8001688:	edc3 7a00 	vstr	s15, [r3]
				gyroscope_offset[i][0] += IMUrawdata[i].Gyroscope_X;
 800168c:	493e      	ldr	r1, [pc, #248]	; (8001788 <Accelerometer_Gyroscope_Calibration+0x4c0>)
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	4613      	mov	r3, r2
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	ed93 7a00 	vldr	s14, [r3]
 800169e:	4938      	ldr	r1, [pc, #224]	; (8001780 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 80016a0:	68fa      	ldr	r2, [r7, #12]
 80016a2:	4613      	mov	r3, r2
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	4413      	add	r3, r2
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	440b      	add	r3, r1
 80016ac:	330c      	adds	r3, #12
 80016ae:	edd3 7a00 	vldr	s15, [r3]
 80016b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b6:	4934      	ldr	r1, [pc, #208]	; (8001788 <Accelerometer_Gyroscope_Calibration+0x4c0>)
 80016b8:	68fa      	ldr	r2, [r7, #12]
 80016ba:	4613      	mov	r3, r2
 80016bc:	005b      	lsls	r3, r3, #1
 80016be:	4413      	add	r3, r2
 80016c0:	009b      	lsls	r3, r3, #2
 80016c2:	440b      	add	r3, r1
 80016c4:	edc3 7a00 	vstr	s15, [r3]
				gyroscope_offset[i][1] += IMUrawdata[i].Gyroscope_Y;
 80016c8:	492f      	ldr	r1, [pc, #188]	; (8001788 <Accelerometer_Gyroscope_Calibration+0x4c0>)
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	4613      	mov	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	3304      	adds	r3, #4
 80016d8:	ed93 7a00 	vldr	s14, [r3]
 80016dc:	4928      	ldr	r1, [pc, #160]	; (8001780 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	440b      	add	r3, r1
 80016ea:	3310      	adds	r3, #16
 80016ec:	edd3 7a00 	vldr	s15, [r3]
 80016f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f4:	4924      	ldr	r1, [pc, #144]	; (8001788 <Accelerometer_Gyroscope_Calibration+0x4c0>)
 80016f6:	68fa      	ldr	r2, [r7, #12]
 80016f8:	4613      	mov	r3, r2
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4413      	add	r3, r2
 80016fe:	009b      	lsls	r3, r3, #2
 8001700:	440b      	add	r3, r1
 8001702:	3304      	adds	r3, #4
 8001704:	edc3 7a00 	vstr	s15, [r3]
				gyroscope_offset[i][2] += IMUrawdata[i].Gyroscope_Z;
 8001708:	491f      	ldr	r1, [pc, #124]	; (8001788 <Accelerometer_Gyroscope_Calibration+0x4c0>)
 800170a:	68fa      	ldr	r2, [r7, #12]
 800170c:	4613      	mov	r3, r2
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	4413      	add	r3, r2
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	440b      	add	r3, r1
 8001716:	3308      	adds	r3, #8
 8001718:	ed93 7a00 	vldr	s14, [r3]
 800171c:	4918      	ldr	r1, [pc, #96]	; (8001780 <Accelerometer_Gyroscope_Calibration+0x4b8>)
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	4613      	mov	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	440b      	add	r3, r1
 800172a:	3314      	adds	r3, #20
 800172c:	edd3 7a00 	vldr	s15, [r3]
 8001730:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001734:	4914      	ldr	r1, [pc, #80]	; (8001788 <Accelerometer_Gyroscope_Calibration+0x4c0>)
 8001736:	68fa      	ldr	r2, [r7, #12]
 8001738:	4613      	mov	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4413      	add	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	440b      	add	r3, r1
 8001742:	3308      	adds	r3, #8
 8001744:	edc3 7a00 	vstr	s15, [r3]

				break;
 8001748:	bf00      	nop
		for(i = 0; i<2; i++)
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	3301      	adds	r3, #1
 800174e:	60fb      	str	r3, [r7, #12]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2b01      	cmp	r3, #1
 8001754:	f77f adc2 	ble.w	80012dc <Accelerometer_Gyroscope_Calibration+0x14>
			}
		}

		++calibration_samples;
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	3301      	adds	r3, #1
 800175c:	60bb      	str	r3, [r7, #8]
		elapsed_time = HAL_GetTick() - begin_calibration;
 800175e:	f001 fa81 	bl	8002c64 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	603b      	str	r3, [r7, #0]
	}while(elapsed_time < (Calibration_Time * 1000));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001770:	4293      	cmp	r3, r2
 8001772:	f77f adb0 	ble.w	80012d6 <Accelerometer_Gyroscope_Calibration+0xe>

	for(i = 0; i<2; i++)
 8001776:	2300      	movs	r3, #0
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	e114      	b.n	80019a6 <Accelerometer_Gyroscope_Calibration+0x6de>
 800177c:	200002fc 	.word	0x200002fc
 8001780:	2000056c 	.word	0x2000056c
 8001784:	20000534 	.word	0x20000534
 8001788:	2000054c 	.word	0x2000054c
	{
		accelerometer_mean[i][0] = accelerometer_mean[i][0]/calibration_samples;
 800178c:	498c      	ldr	r1, [pc, #560]	; (80019c0 <Accelerometer_Gyroscope_Calibration+0x6f8>)
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	4613      	mov	r3, r2
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	4413      	add	r3, r2
 8001796:	009b      	lsls	r3, r3, #2
 8001798:	440b      	add	r3, r1
 800179a:	edd3 6a00 	vldr	s13, [r3]
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	ee07 3a90 	vmov	s15, r3
 80017a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017ac:	4984      	ldr	r1, [pc, #528]	; (80019c0 <Accelerometer_Gyroscope_Calibration+0x6f8>)
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4613      	mov	r3, r2
 80017b2:	005b      	lsls	r3, r3, #1
 80017b4:	4413      	add	r3, r2
 80017b6:	009b      	lsls	r3, r3, #2
 80017b8:	440b      	add	r3, r1
 80017ba:	edc3 7a00 	vstr	s15, [r3]
		accelerometer_mean[i][1] = accelerometer_mean[i][1]/calibration_samples;
 80017be:	4980      	ldr	r1, [pc, #512]	; (80019c0 <Accelerometer_Gyroscope_Calibration+0x6f8>)
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4613      	mov	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	440b      	add	r3, r1
 80017cc:	3304      	adds	r3, #4
 80017ce:	edd3 6a00 	vldr	s13, [r3]
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	ee07 3a90 	vmov	s15, r3
 80017d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017dc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017e0:	4977      	ldr	r1, [pc, #476]	; (80019c0 <Accelerometer_Gyroscope_Calibration+0x6f8>)
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	3304      	adds	r3, #4
 80017f0:	edc3 7a00 	vstr	s15, [r3]
		accelerometer_mean[i][2] = accelerometer_mean[i][2]/calibration_samples;
 80017f4:	4972      	ldr	r1, [pc, #456]	; (80019c0 <Accelerometer_Gyroscope_Calibration+0x6f8>)
 80017f6:	68fa      	ldr	r2, [r7, #12]
 80017f8:	4613      	mov	r3, r2
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	4413      	add	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	440b      	add	r3, r1
 8001802:	3308      	adds	r3, #8
 8001804:	edd3 6a00 	vldr	s13, [r3]
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	ee07 3a90 	vmov	s15, r3
 800180e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001812:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001816:	496a      	ldr	r1, [pc, #424]	; (80019c0 <Accelerometer_Gyroscope_Calibration+0x6f8>)
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4613      	mov	r3, r2
 800181c:	005b      	lsls	r3, r3, #1
 800181e:	4413      	add	r3, r2
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	440b      	add	r3, r1
 8001824:	3308      	adds	r3, #8
 8001826:	edc3 7a00 	vstr	s15, [r3]
		gyroscope_offset[i][0] = gyroscope_offset[i][0]/calibration_samples;
 800182a:	4966      	ldr	r1, [pc, #408]	; (80019c4 <Accelerometer_Gyroscope_Calibration+0x6fc>)
 800182c:	68fa      	ldr	r2, [r7, #12]
 800182e:	4613      	mov	r3, r2
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4413      	add	r3, r2
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	edd3 6a00 	vldr	s13, [r3]
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	ee07 3a90 	vmov	s15, r3
 8001842:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001846:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800184a:	495e      	ldr	r1, [pc, #376]	; (80019c4 <Accelerometer_Gyroscope_Calibration+0x6fc>)
 800184c:	68fa      	ldr	r2, [r7, #12]
 800184e:	4613      	mov	r3, r2
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4413      	add	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	440b      	add	r3, r1
 8001858:	edc3 7a00 	vstr	s15, [r3]
		gyroscope_offset[i][1] = gyroscope_offset[i][1]/calibration_samples;
 800185c:	4959      	ldr	r1, [pc, #356]	; (80019c4 <Accelerometer_Gyroscope_Calibration+0x6fc>)
 800185e:	68fa      	ldr	r2, [r7, #12]
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	440b      	add	r3, r1
 800186a:	3304      	adds	r3, #4
 800186c:	edd3 6a00 	vldr	s13, [r3]
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	ee07 3a90 	vmov	s15, r3
 8001876:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800187a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800187e:	4951      	ldr	r1, [pc, #324]	; (80019c4 <Accelerometer_Gyroscope_Calibration+0x6fc>)
 8001880:	68fa      	ldr	r2, [r7, #12]
 8001882:	4613      	mov	r3, r2
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	4413      	add	r3, r2
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	440b      	add	r3, r1
 800188c:	3304      	adds	r3, #4
 800188e:	edc3 7a00 	vstr	s15, [r3]
		gyroscope_offset[i][2] = gyroscope_offset[i][2]/calibration_samples;
 8001892:	494c      	ldr	r1, [pc, #304]	; (80019c4 <Accelerometer_Gyroscope_Calibration+0x6fc>)
 8001894:	68fa      	ldr	r2, [r7, #12]
 8001896:	4613      	mov	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	4413      	add	r3, r2
 800189c:	009b      	lsls	r3, r3, #2
 800189e:	440b      	add	r3, r1
 80018a0:	3308      	adds	r3, #8
 80018a2:	edd3 6a00 	vldr	s13, [r3]
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	ee07 3a90 	vmov	s15, r3
 80018ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018b4:	4943      	ldr	r1, [pc, #268]	; (80019c4 <Accelerometer_Gyroscope_Calibration+0x6fc>)
 80018b6:	68fa      	ldr	r2, [r7, #12]
 80018b8:	4613      	mov	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	3308      	adds	r3, #8
 80018c4:	edc3 7a00 	vstr	s15, [r3]

		norm_acceleration[i] = round(sqrt(pow(accelerometer_mean[i][0], 2) + pow(accelerometer_mean[i][1], 2) + pow(accelerometer_mean[i][2], 2)));
 80018c8:	493d      	ldr	r1, [pc, #244]	; (80019c0 <Accelerometer_Gyroscope_Calibration+0x6f8>)
 80018ca:	68fa      	ldr	r2, [r7, #12]
 80018cc:	4613      	mov	r3, r2
 80018ce:	005b      	lsls	r3, r3, #1
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe35 	bl	8000548 <__aeabi_f2d>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	ed9f 1b35 	vldr	d1, [pc, #212]	; 80019b8 <Accelerometer_Gyroscope_Calibration+0x6f0>
 80018e6:	ec43 2b10 	vmov	d0, r2, r3
 80018ea:	f00f fdd7 	bl	801149c <pow>
 80018ee:	ec55 4b10 	vmov	r4, r5, d0
 80018f2:	4933      	ldr	r1, [pc, #204]	; (80019c0 <Accelerometer_Gyroscope_Calibration+0x6f8>)
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	4613      	mov	r3, r2
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	4413      	add	r3, r2
 80018fc:	009b      	lsls	r3, r3, #2
 80018fe:	440b      	add	r3, r1
 8001900:	3304      	adds	r3, #4
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fe1f 	bl	8000548 <__aeabi_f2d>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	ed9f 1b2a 	vldr	d1, [pc, #168]	; 80019b8 <Accelerometer_Gyroscope_Calibration+0x6f0>
 8001912:	ec43 2b10 	vmov	d0, r2, r3
 8001916:	f00f fdc1 	bl	801149c <pow>
 800191a:	ec53 2b10 	vmov	r2, r3, d0
 800191e:	4620      	mov	r0, r4
 8001920:	4629      	mov	r1, r5
 8001922:	f7fe fcb3 	bl	800028c <__adddf3>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	4614      	mov	r4, r2
 800192c:	461d      	mov	r5, r3
 800192e:	4924      	ldr	r1, [pc, #144]	; (80019c0 <Accelerometer_Gyroscope_Calibration+0x6f8>)
 8001930:	68fa      	ldr	r2, [r7, #12]
 8001932:	4613      	mov	r3, r2
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	4413      	add	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	440b      	add	r3, r1
 800193c:	3308      	adds	r3, #8
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4618      	mov	r0, r3
 8001942:	f7fe fe01 	bl	8000548 <__aeabi_f2d>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 80019b8 <Accelerometer_Gyroscope_Calibration+0x6f0>
 800194e:	ec43 2b10 	vmov	d0, r2, r3
 8001952:	f00f fda3 	bl	801149c <pow>
 8001956:	ec53 2b10 	vmov	r2, r3, d0
 800195a:	4620      	mov	r0, r4
 800195c:	4629      	mov	r1, r5
 800195e:	f7fe fc95 	bl	800028c <__adddf3>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	ec43 2b17 	vmov	d7, r2, r3
 800196a:	eeb0 0a47 	vmov.f32	s0, s14
 800196e:	eef0 0a67 	vmov.f32	s1, s15
 8001972:	f00f fe03 	bl	801157c <sqrt>
 8001976:	eeb0 7a40 	vmov.f32	s14, s0
 800197a:	eef0 7a60 	vmov.f32	s15, s1
 800197e:	eeb0 0a47 	vmov.f32	s0, s14
 8001982:	eef0 0a67 	vmov.f32	s1, s15
 8001986:	f00f ff13 	bl	80117b0 <round>
 800198a:	ec53 2b10 	vmov	r2, r3, d0
 800198e:	4610      	mov	r0, r2
 8001990:	4619      	mov	r1, r3
 8001992:	f7ff f8e1 	bl	8000b58 <__aeabi_d2iz>
 8001996:	4602      	mov	r2, r0
 8001998:	490b      	ldr	r1, [pc, #44]	; (80019c8 <Accelerometer_Gyroscope_Calibration+0x700>)
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(i = 0; i<2; i++)
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	3301      	adds	r3, #1
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2b01      	cmp	r3, #1
 80019aa:	f77f aeef 	ble.w	800178c <Accelerometer_Gyroscope_Calibration+0x4c4>
	}

	return 0;
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3710      	adds	r7, #16
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bdb0      	pop	{r4, r5, r7, pc}
 80019b8:	00000000 	.word	0x00000000
 80019bc:	40000000 	.word	0x40000000
 80019c0:	20000534 	.word	0x20000534
 80019c4:	2000054c 	.word	0x2000054c
 80019c8:	20000564 	.word	0x20000564

080019cc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a07      	ldr	r2, [pc, #28]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d105      	bne.n	80019e8 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		flag = 1;
 80019dc:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80019de:	2201      	movs	r2, #1
 80019e0:	601a      	str	r2, [r3, #0]
		emg_flag = 1;
 80019e2:	4b06      	ldr	r3, [pc, #24]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x30>)
 80019e4:	2201      	movs	r2, #1
 80019e6:	601a      	str	r2, [r3, #0]
	}

}
 80019e8:	bf00      	nop
 80019ea:	370c      	adds	r7, #12
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	20000494 	.word	0x20000494
 80019f8:	20000524 	.word	0x20000524
 80019fc:	20000528 	.word	0x20000528

08001a00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a04:	b092      	sub	sp, #72	; 0x48
 8001a06:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a08:	f001 f8c6 	bl	8002b98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a0c:	f000 f87e 	bl	8001b0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a10:	f000 f9d2 	bl	8001db8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001a14:	f000 f9a8 	bl	8001d68 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8001a18:	f000 f910 	bl	8001c3c <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001a1c:	f009 ff34 	bl	800b888 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001a20:	f00c f9b0 	bl	800dd84 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001a24:	f000 f92a 	bl	8001c7c <MX_TIM2_Init>
  MX_I2C1_Init();
 8001a28:	f000 f8da 	bl	8001be0 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001a2c:	f000 f972 	bl	8001d14 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  IMU_Initialization();
 8001a30:	f7ff fc00 	bl	8001234 <IMU_Initialization>
  Accelerometer_Gyroscope_Calibration();
 8001a34:	f7ff fc48 	bl	80012c8 <Accelerometer_Gyroscope_Calibration>
  HAL_TIM_Base_Start_IT(&htim2);
 8001a38:	482d      	ldr	r0, [pc, #180]	; (8001af0 <main+0xf0>)
 8001a3a:	f006 fa1d 	bl	8007e78 <HAL_TIM_Base_Start_IT>

  LSM6DSOX_writeRegister8(&hi2c1, LSM6DSOX_ADDRESS_1, LSM6DSOX_CTRL1_XL, 0x44);
 8001a3e:	2344      	movs	r3, #68	; 0x44
 8001a40:	2210      	movs	r2, #16
 8001a42:	216a      	movs	r1, #106	; 0x6a
 8001a44:	482b      	ldr	r0, [pc, #172]	; (8001af4 <main+0xf4>)
 8001a46:	f7ff fa9f 	bl	8000f88 <LSM6DSOX_writeRegister8>
  LSM6DSOX_writeRegister8(&hi2c1, LSM6DSOX_ADDRESS_2, LSM6DSOX_CTRL1_XL, 0x44);
 8001a4a:	2344      	movs	r3, #68	; 0x44
 8001a4c:	2210      	movs	r2, #16
 8001a4e:	216b      	movs	r1, #107	; 0x6b
 8001a50:	4828      	ldr	r0, [pc, #160]	; (8001af4 <main+0xf4>)
 8001a52:	f7ff fa99 	bl	8000f88 <LSM6DSOX_writeRegister8>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(flag == 1)
 8001a56:	4b28      	ldr	r3, [pc, #160]	; (8001af8 <main+0xf8>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d1fb      	bne.n	8001a56 <main+0x56>
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001a5e:	2201      	movs	r2, #1
 8001a60:	2104      	movs	r1, #4
 8001a62:	4826      	ldr	r0, [pc, #152]	; (8001afc <main+0xfc>)
 8001a64:	f002 f802 	bl	8003a6c <HAL_GPIO_WritePin>

		  char temp_buffer[TEMP_BUFFER_SIZE];
		  Gyro_Reading();
 8001a68:	f000 fa4a 	bl	8001f00 <Gyro_Reading>
		  n_int++;
 8001a6c:	4b24      	ldr	r3, [pc, #144]	; (8001b00 <main+0x100>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	3301      	adds	r3, #1
 8001a72:	4a23      	ldr	r2, [pc, #140]	; (8001b00 <main+0x100>)
 8001a74:	6013      	str	r3, [r2, #0]
		  if(n_int == 6)
 8001a76:	4b22      	ldr	r3, [pc, #136]	; (8001b00 <main+0x100>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	2b06      	cmp	r3, #6
 8001a7c:	d134      	bne.n	8001ae8 <main+0xe8>
		  {

			  Acc_Mag_Reading();
 8001a7e:	f000 fc17 	bl	80022b0 <Acc_Mag_Reading>

			  /*int temp_length = sprintf((char*)temp_buffer, "%.3f;%.3f;%.3f;%.3f;%.3f;%.3f\n",
					 );*/

			  int temp_length = sprintf((char*)temp_buffer, "0.00;0.00;0.00;%.3f;%.3f;%.3f\n",
			  					   Acc_data[0].x, Acc_data[0].y, Acc_data[0].z);
 8001a82:	4b20      	ldr	r3, [pc, #128]	; (8001b04 <main+0x104>)
 8001a84:	681b      	ldr	r3, [r3, #0]
			  int temp_length = sprintf((char*)temp_buffer, "0.00;0.00;0.00;%.3f;%.3f;%.3f\n",
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7fe fd5e 	bl	8000548 <__aeabi_f2d>
 8001a8c:	4680      	mov	r8, r0
 8001a8e:	4689      	mov	r9, r1
			  					   Acc_data[0].x, Acc_data[0].y, Acc_data[0].z);
 8001a90:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <main+0x104>)
 8001a92:	685b      	ldr	r3, [r3, #4]
			  int temp_length = sprintf((char*)temp_buffer, "0.00;0.00;0.00;%.3f;%.3f;%.3f\n",
 8001a94:	4618      	mov	r0, r3
 8001a96:	f7fe fd57 	bl	8000548 <__aeabi_f2d>
 8001a9a:	4604      	mov	r4, r0
 8001a9c:	460d      	mov	r5, r1
			  					   Acc_data[0].x, Acc_data[0].y, Acc_data[0].z);
 8001a9e:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <main+0x104>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
			  int temp_length = sprintf((char*)temp_buffer, "0.00;0.00;0.00;%.3f;%.3f;%.3f\n",
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f7fe fd50 	bl	8000548 <__aeabi_f2d>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4638      	mov	r0, r7
 8001aae:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ab2:	e9cd 4500 	strd	r4, r5, [sp]
 8001ab6:	4642      	mov	r2, r8
 8001ab8:	464b      	mov	r3, r9
 8001aba:	4913      	ldr	r1, [pc, #76]	; (8001b08 <main+0x108>)
 8001abc:	f00d fae2 	bl	800f084 <siprintf>
 8001ac0:	6378      	str	r0, [r7, #52]	; 0x34

			  CDC_Transmit_FS((uint8_t*)temp_buffer, strlen(temp_buffer));
 8001ac2:	463b      	mov	r3, r7
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7fe fbd3 	bl	8000270 <strlen>
 8001aca:	4603      	mov	r3, r0
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	463b      	mov	r3, r7
 8001ad0:	4611      	mov	r1, r2
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f00c fa14 	bl	800df00 <CDC_Transmit_FS>
				  memset(&SDIareas[i].area_x, 0, sizeof(SDIareas[i].area_x));
				  memset(&SDIareas[i].area_y, 0, sizeof(SDIareas[i].area_y));
				  memset(&SDIareas[i].area_z, 0, sizeof(SDIareas[i].area_z));
			  }*/

			  n_int = 0;
 8001ad8:	4b09      	ldr	r3, [pc, #36]	; (8001b00 <main+0x100>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
			  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2104      	movs	r1, #4
 8001ae2:	4806      	ldr	r0, [pc, #24]	; (8001afc <main+0xfc>)
 8001ae4:	f001 ffc2 	bl	8003a6c <HAL_GPIO_WritePin>

		  }

		  flag = 0;
 8001ae8:	4b03      	ldr	r3, [pc, #12]	; (8001af8 <main+0xf8>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	601a      	str	r2, [r3, #0]
	  if(flag == 1)
 8001aee:	e7b2      	b.n	8001a56 <main+0x56>
 8001af0:	20000494 	.word	0x20000494
 8001af4:	200002fc 	.word	0x200002fc
 8001af8:	20000524 	.word	0x20000524
 8001afc:	40020800 	.word	0x40020800
 8001b00:	20000520 	.word	0x20000520
 8001b04:	2000062c 	.word	0x2000062c
 8001b08:	08012410 	.word	0x08012410

08001b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b094      	sub	sp, #80	; 0x50
 8001b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b12:	f107 0320 	add.w	r3, r7, #32
 8001b16:	2230      	movs	r2, #48	; 0x30
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f00d fb82 	bl	800f224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	4b28      	ldr	r3, [pc, #160]	; (8001bd8 <SystemClock_Config+0xcc>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	4a27      	ldr	r2, [pc, #156]	; (8001bd8 <SystemClock_Config+0xcc>)
 8001b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b40:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <SystemClock_Config+0xcc>)
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <SystemClock_Config+0xd0>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a21      	ldr	r2, [pc, #132]	; (8001bdc <SystemClock_Config+0xd0>)
 8001b56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b5a:	6013      	str	r3, [r2, #0]
 8001b5c:	4b1f      	ldr	r3, [pc, #124]	; (8001bdc <SystemClock_Config+0xd0>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b64:	607b      	str	r3, [r7, #4]
 8001b66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001b6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001b70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b72:	2302      	movs	r3, #2
 8001b74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001b76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001b7c:	2306      	movs	r3, #6
 8001b7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001b80:	23a8      	movs	r3, #168	; 0xa8
 8001b82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001b84:	2302      	movs	r3, #2
 8001b86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001b88:	2307      	movs	r3, #7
 8001b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b8c:	f107 0320 	add.w	r3, r7, #32
 8001b90:	4618      	mov	r0, r3
 8001b92:	f004 f997 	bl	8005ec4 <HAL_RCC_OscConfig>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001b9c:	f000 fca8 	bl	80024f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001bac:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001bb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001bb2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001bb8:	f107 030c 	add.w	r3, r7, #12
 8001bbc:	2105      	movs	r1, #5
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f004 fbf8 	bl	80063b4 <HAL_RCC_ClockConfig>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001bca:	f000 fc91 	bl	80024f0 <Error_Handler>
  }
}
 8001bce:	bf00      	nop
 8001bd0:	3750      	adds	r7, #80	; 0x50
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40007000 	.word	0x40007000

08001be0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001be4:	4b12      	ldr	r3, [pc, #72]	; (8001c30 <MX_I2C1_Init+0x50>)
 8001be6:	4a13      	ldr	r2, [pc, #76]	; (8001c34 <MX_I2C1_Init+0x54>)
 8001be8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001bea:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_I2C1_Init+0x50>)
 8001bec:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <MX_I2C1_Init+0x58>)
 8001bee:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <MX_I2C1_Init+0x50>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <MX_I2C1_Init+0x50>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <MX_I2C1_Init+0x50>)
 8001bfe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c02:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c04:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <MX_I2C1_Init+0x50>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c0a:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <MX_I2C1_Init+0x50>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c10:	4b07      	ldr	r3, [pc, #28]	; (8001c30 <MX_I2C1_Init+0x50>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c16:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <MX_I2C1_Init+0x50>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c1c:	4804      	ldr	r0, [pc, #16]	; (8001c30 <MX_I2C1_Init+0x50>)
 8001c1e:	f001 ff3f 	bl	8003aa0 <HAL_I2C_Init>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c28:	f000 fc62 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c2c:	bf00      	nop
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	200002fc 	.word	0x200002fc
 8001c34:	40005400 	.word	0x40005400
 8001c38:	00061a80 	.word	0x00061a80

08001c3c <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <MX_SDIO_SD_Init+0x38>)
 8001c42:	4a0d      	ldr	r2, [pc, #52]	; (8001c78 <MX_SDIO_SD_Init+0x3c>)
 8001c44:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <MX_SDIO_SD_Init+0x38>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001c4c:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <MX_SDIO_SD_Init+0x38>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001c52:	4b08      	ldr	r3, [pc, #32]	; (8001c74 <MX_SDIO_SD_Init+0x38>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001c58:	4b06      	ldr	r3, [pc, #24]	; (8001c74 <MX_SDIO_SD_Init+0x38>)
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001c5e:	4b05      	ldr	r3, [pc, #20]	; (8001c74 <MX_SDIO_SD_Init+0x38>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001c64:	4b03      	ldr	r3, [pc, #12]	; (8001c74 <MX_SDIO_SD_Init+0x38>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	20000350 	.word	0x20000350
 8001c78:	40012c00 	.word	0x40012c00

08001c7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c82:	f107 0308 	add.w	r3, r7, #8
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c90:	463b      	mov	r3, r7
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c98:	4b1d      	ldr	r3, [pc, #116]	; (8001d10 <MX_TIM2_Init+0x94>)
 8001c9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c9e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4200-1;
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <MX_TIM2_Init+0x94>)
 8001ca2:	f241 0267 	movw	r2, #4199	; 0x1067
 8001ca6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca8:	4b19      	ldr	r3, [pc, #100]	; (8001d10 <MX_TIM2_Init+0x94>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 33-1;
 8001cae:	4b18      	ldr	r3, [pc, #96]	; (8001d10 <MX_TIM2_Init+0x94>)
 8001cb0:	2220      	movs	r2, #32
 8001cb2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb4:	4b16      	ldr	r3, [pc, #88]	; (8001d10 <MX_TIM2_Init+0x94>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cba:	4b15      	ldr	r3, [pc, #84]	; (8001d10 <MX_TIM2_Init+0x94>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001cc0:	4813      	ldr	r0, [pc, #76]	; (8001d10 <MX_TIM2_Init+0x94>)
 8001cc2:	f006 f88a 	bl	8007dda <HAL_TIM_Base_Init>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ccc:	f000 fc10 	bl	80024f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cd6:	f107 0308 	add.w	r3, r7, #8
 8001cda:	4619      	mov	r1, r3
 8001cdc:	480c      	ldr	r0, [pc, #48]	; (8001d10 <MX_TIM2_Init+0x94>)
 8001cde:	f006 fa43 	bl	8008168 <HAL_TIM_ConfigClockSource>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001ce8:	f000 fc02 	bl	80024f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cec:	2300      	movs	r3, #0
 8001cee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cf4:	463b      	mov	r3, r7
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	4805      	ldr	r0, [pc, #20]	; (8001d10 <MX_TIM2_Init+0x94>)
 8001cfa:	f006 fc5f 	bl	80085bc <HAL_TIMEx_MasterConfigSynchronization>
 8001cfe:	4603      	mov	r3, r0
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d001      	beq.n	8001d08 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001d04:	f000 fbf4 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001d08:	bf00      	nop
 8001d0a:	3718      	adds	r7, #24
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	20000494 	.word	0x20000494

08001d14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d18:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <MX_USART3_UART_Init+0x48>)
 8001d1a:	4a11      	ldr	r2, [pc, #68]	; (8001d60 <MX_USART3_UART_Init+0x4c>)
 8001d1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 249600;
 8001d1e:	4b0f      	ldr	r3, [pc, #60]	; (8001d5c <MX_USART3_UART_Init+0x48>)
 8001d20:	4a10      	ldr	r2, [pc, #64]	; (8001d64 <MX_USART3_UART_Init+0x50>)
 8001d22:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d24:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <MX_USART3_UART_Init+0x48>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <MX_USART3_UART_Init+0x48>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d30:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <MX_USART3_UART_Init+0x48>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <MX_USART3_UART_Init+0x48>)
 8001d38:	220c      	movs	r2, #12
 8001d3a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d3c:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <MX_USART3_UART_Init+0x48>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <MX_USART3_UART_Init+0x48>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d48:	4804      	ldr	r0, [pc, #16]	; (8001d5c <MX_USART3_UART_Init+0x48>)
 8001d4a:	f006 fcc7 	bl	80086dc <HAL_UART_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8001d54:	f000 fbcc 	bl	80024f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	200004dc 	.word	0x200004dc
 8001d60:	40004800 	.word	0x40004800
 8001d64:	0003cf00 	.word	0x0003cf00

08001d68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	4b10      	ldr	r3, [pc, #64]	; (8001db4 <MX_DMA_Init+0x4c>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a0f      	ldr	r2, [pc, #60]	; (8001db4 <MX_DMA_Init+0x4c>)
 8001d78:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b0d      	ldr	r3, [pc, #52]	; (8001db4 <MX_DMA_Init+0x4c>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d86:	607b      	str	r3, [r7, #4]
 8001d88:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	203b      	movs	r0, #59	; 0x3b
 8001d90:	f001 f873 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001d94:	203b      	movs	r0, #59	; 0x3b
 8001d96:	f001 f88c 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	2045      	movs	r0, #69	; 0x45
 8001da0:	f001 f86b 	bl	8002e7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001da4:	2045      	movs	r0, #69	; 0x45
 8001da6:	f001 f884 	bl	8002eb2 <HAL_NVIC_EnableIRQ>

}
 8001daa:	bf00      	nop
 8001dac:	3708      	adds	r7, #8
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023800 	.word	0x40023800

08001db8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dbe:	f107 0314 	add.w	r3, r7, #20
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]
 8001dca:	60da      	str	r2, [r3, #12]
 8001dcc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001dce:	2300      	movs	r3, #0
 8001dd0:	613b      	str	r3, [r7, #16]
 8001dd2:	4b34      	ldr	r3, [pc, #208]	; (8001ea4 <MX_GPIO_Init+0xec>)
 8001dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd6:	4a33      	ldr	r2, [pc, #204]	; (8001ea4 <MX_GPIO_Init+0xec>)
 8001dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dde:	4b31      	ldr	r3, [pc, #196]	; (8001ea4 <MX_GPIO_Init+0xec>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001de6:	613b      	str	r3, [r7, #16]
 8001de8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	60fb      	str	r3, [r7, #12]
 8001dee:	4b2d      	ldr	r3, [pc, #180]	; (8001ea4 <MX_GPIO_Init+0xec>)
 8001df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df2:	4a2c      	ldr	r2, [pc, #176]	; (8001ea4 <MX_GPIO_Init+0xec>)
 8001df4:	f043 0304 	orr.w	r3, r3, #4
 8001df8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfa:	4b2a      	ldr	r3, [pc, #168]	; (8001ea4 <MX_GPIO_Init+0xec>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dfe:	f003 0304 	and.w	r3, r3, #4
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	4b26      	ldr	r3, [pc, #152]	; (8001ea4 <MX_GPIO_Init+0xec>)
 8001e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0e:	4a25      	ldr	r2, [pc, #148]	; (8001ea4 <MX_GPIO_Init+0xec>)
 8001e10:	f043 0302 	orr.w	r3, r3, #2
 8001e14:	6313      	str	r3, [r2, #48]	; 0x30
 8001e16:	4b23      	ldr	r3, [pc, #140]	; (8001ea4 <MX_GPIO_Init+0xec>)
 8001e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	60bb      	str	r3, [r7, #8]
 8001e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	2300      	movs	r3, #0
 8001e24:	607b      	str	r3, [r7, #4]
 8001e26:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <MX_GPIO_Init+0xec>)
 8001e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2a:	4a1e      	ldr	r2, [pc, #120]	; (8001ea4 <MX_GPIO_Init+0xec>)
 8001e2c:	f043 0301 	orr.w	r3, r3, #1
 8001e30:	6313      	str	r3, [r2, #48]	; 0x30
 8001e32:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <MX_GPIO_Init+0xec>)
 8001e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	607b      	str	r3, [r7, #4]
 8001e3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e3e:	2300      	movs	r3, #0
 8001e40:	603b      	str	r3, [r7, #0]
 8001e42:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <MX_GPIO_Init+0xec>)
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	4a17      	ldr	r2, [pc, #92]	; (8001ea4 <MX_GPIO_Init+0xec>)
 8001e48:	f043 0308 	orr.w	r3, r3, #8
 8001e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <MX_GPIO_Init+0xec>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	f003 0308 	and.w	r3, r3, #8
 8001e56:	603b      	str	r3, [r7, #0]
 8001e58:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_2, GPIO_PIN_RESET);
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	2106      	movs	r1, #6
 8001e5e:	4812      	ldr	r0, [pc, #72]	; (8001ea8 <MX_GPIO_Init+0xf0>)
 8001e60:	f001 fe04 	bl	8003a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC1 PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001e64:	2306      	movs	r3, #6
 8001e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e70:	2300      	movs	r3, #0
 8001e72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e74:	f107 0314 	add.w	r3, r7, #20
 8001e78:	4619      	mov	r1, r3
 8001e7a:	480b      	ldr	r0, [pc, #44]	; (8001ea8 <MX_GPIO_Init+0xf0>)
 8001e7c:	f001 fc42 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8e:	f107 0314 	add.w	r3, r7, #20
 8001e92:	4619      	mov	r1, r3
 8001e94:	4805      	ldr	r0, [pc, #20]	; (8001eac <MX_GPIO_Init+0xf4>)
 8001e96:	f001 fc35 	bl	8003704 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8001e9a:	bf00      	nop
 8001e9c:	3728      	adds	r7, #40	; 0x28
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40020800 	.word	0x40020800
 8001eac:	40020400 	.word	0x40020400

08001eb0 <BlinkLED>:
	return stat;

}


void BlinkLED(uint32_t blink_delay, uint8_t num_blinks) {
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	460b      	mov	r3, r1
 8001eba:	70fb      	strb	r3, [r7, #3]
  for ( int i = 0; i < num_blinks; i++ ) {
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e012      	b.n	8001ee8 <BlinkLED+0x38>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	2102      	movs	r1, #2
 8001ec6:	480d      	ldr	r0, [pc, #52]	; (8001efc <BlinkLED+0x4c>)
 8001ec8:	f001 fdd0 	bl	8003a6c <HAL_GPIO_WritePin>
    HAL_Delay(blink_delay);
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 fed5 	bl	8002c7c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	4809      	ldr	r0, [pc, #36]	; (8001efc <BlinkLED+0x4c>)
 8001ed8:	f001 fdc8 	bl	8003a6c <HAL_GPIO_WritePin>
    HAL_Delay(blink_delay);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 fecd 	bl	8002c7c <HAL_Delay>
  for ( int i = 0; i < num_blinks; i++ ) {
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	60fb      	str	r3, [r7, #12]
 8001ee8:	78fb      	ldrb	r3, [r7, #3]
 8001eea:	68fa      	ldr	r2, [r7, #12]
 8001eec:	429a      	cmp	r2, r3
 8001eee:	dbe8      	blt.n	8001ec2 <BlinkLED+0x12>
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40020800 	.word	0x40020800

08001f00 <Gyro_Reading>:

void Gyro_Reading()
{
 8001f00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f04:	b08e      	sub	sp, #56	; 0x38
 8001f06:	af04      	add	r7, sp, #16
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001f08:	2201      	movs	r2, #1
 8001f0a:	2102      	movs	r1, #2
 8001f0c:	48b8      	ldr	r0, [pc, #736]	; (80021f0 <Gyro_Reading+0x2f0>)
 8001f0e:	f001 fdad 	bl	8003a6c <HAL_GPIO_WritePin>
	int i;
	char test_buffer[30];
	for(i = 0;i < 2;i++)
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
 8001f16:	e179      	b.n	800220c <Gyro_Reading+0x30c>
	{
		switch(i)
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d004      	beq.n	8001f28 <Gyro_Reading+0x28>
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	f000 80b2 	beq.w	800208a <Gyro_Reading+0x18a>
 8001f26:	e16e      	b.n	8002206 <Gyro_Reading+0x306>
		{
			case 0:
				if(LSM6DSOX_gyroscopeAvailable(&hi2c1, LSM6DSOX_ADDRESS_1)==1)
 8001f28:	216a      	movs	r1, #106	; 0x6a
 8001f2a:	48b2      	ldr	r0, [pc, #712]	; (80021f4 <Gyro_Reading+0x2f4>)
 8001f2c:	f7ff f936 	bl	800119c <LSM6DSOX_gyroscopeAvailable>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	f040 815a 	bne.w	80021ec <Gyro_Reading+0x2ec>
				{
					LSM6DSOX_readGyroscope(&hi2c1, LSM6DSOX_ADDRESS_1, &Gyro_data[i].x[n_int-1], &Gyro_data[i].y[n_int-1], &Gyro_data[i].z[n_int-1]);
 8001f38:	4baf      	ldr	r3, [pc, #700]	; (80021f8 <Gyro_Reading+0x2f8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	1e59      	subs	r1, r3, #1
 8001f3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f40:	4613      	mov	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	005b      	lsls	r3, r3, #1
 8001f48:	440b      	add	r3, r1
 8001f4a:	009b      	lsls	r3, r3, #2
 8001f4c:	4aab      	ldr	r2, [pc, #684]	; (80021fc <Gyro_Reading+0x2fc>)
 8001f4e:	1898      	adds	r0, r3, r2
 8001f50:	4ba9      	ldr	r3, [pc, #676]	; (80021f8 <Gyro_Reading+0x2f8>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	1e59      	subs	r1, r3, #1
 8001f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f58:	4613      	mov	r3, r2
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	005b      	lsls	r3, r3, #1
 8001f60:	440b      	add	r3, r1
 8001f62:	3306      	adds	r3, #6
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4aa5      	ldr	r2, [pc, #660]	; (80021fc <Gyro_Reading+0x2fc>)
 8001f68:	189c      	adds	r4, r3, r2
 8001f6a:	4ba3      	ldr	r3, [pc, #652]	; (80021f8 <Gyro_Reading+0x2f8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	1e59      	subs	r1, r3, #1
 8001f70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f72:	4613      	mov	r3, r2
 8001f74:	00db      	lsls	r3, r3, #3
 8001f76:	4413      	add	r3, r2
 8001f78:	005b      	lsls	r3, r3, #1
 8001f7a:	440b      	add	r3, r1
 8001f7c:	330c      	adds	r3, #12
 8001f7e:	009b      	lsls	r3, r3, #2
 8001f80:	4a9e      	ldr	r2, [pc, #632]	; (80021fc <Gyro_Reading+0x2fc>)
 8001f82:	4413      	add	r3, r2
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	4623      	mov	r3, r4
 8001f88:	4602      	mov	r2, r0
 8001f8a:	216a      	movs	r1, #106	; 0x6a
 8001f8c:	4899      	ldr	r0, [pc, #612]	; (80021f4 <Gyro_Reading+0x2f4>)
 8001f8e:	f7ff f8a9 	bl	80010e4 <LSM6DSOX_readGyroscope>
					Gyro_data[i].x[n_int-1] -= gyroscope_offset[i][0];
 8001f92:	4b99      	ldr	r3, [pc, #612]	; (80021f8 <Gyro_Reading+0x2f8>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	1e59      	subs	r1, r3, #1
 8001f98:	4898      	ldr	r0, [pc, #608]	; (80021fc <Gyro_Reading+0x2fc>)
 8001f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	00db      	lsls	r3, r3, #3
 8001fa0:	4413      	add	r3, r2
 8001fa2:	005b      	lsls	r3, r3, #1
 8001fa4:	440b      	add	r3, r1
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4403      	add	r3, r0
 8001faa:	ed93 7a00 	vldr	s14, [r3]
 8001fae:	4994      	ldr	r1, [pc, #592]	; (8002200 <Gyro_Reading+0x300>)
 8001fb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb2:	4613      	mov	r3, r2
 8001fb4:	005b      	lsls	r3, r3, #1
 8001fb6:	4413      	add	r3, r2
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	440b      	add	r3, r1
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	4b8d      	ldr	r3, [pc, #564]	; (80021f8 <Gyro_Reading+0x2f8>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	1e59      	subs	r1, r3, #1
 8001fc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001fca:	488c      	ldr	r0, [pc, #560]	; (80021fc <Gyro_Reading+0x2fc>)
 8001fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fce:	4613      	mov	r3, r2
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	4413      	add	r3, r2
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	440b      	add	r3, r1
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	4403      	add	r3, r0
 8001fdc:	edc3 7a00 	vstr	s15, [r3]
					Gyro_data[i].y[n_int-1] -= gyroscope_offset[i][1];
 8001fe0:	4b85      	ldr	r3, [pc, #532]	; (80021f8 <Gyro_Reading+0x2f8>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	1e59      	subs	r1, r3, #1
 8001fe6:	4885      	ldr	r0, [pc, #532]	; (80021fc <Gyro_Reading+0x2fc>)
 8001fe8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fea:	4613      	mov	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	4413      	add	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	440b      	add	r3, r1
 8001ff4:	3306      	adds	r3, #6
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4403      	add	r3, r0
 8001ffa:	ed93 7a00 	vldr	s14, [r3]
 8001ffe:	4980      	ldr	r1, [pc, #512]	; (8002200 <Gyro_Reading+0x300>)
 8002000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002002:	4613      	mov	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4413      	add	r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	3304      	adds	r3, #4
 800200e:	edd3 7a00 	vldr	s15, [r3]
 8002012:	4b79      	ldr	r3, [pc, #484]	; (80021f8 <Gyro_Reading+0x2f8>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	1e59      	subs	r1, r3, #1
 8002018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800201c:	4877      	ldr	r0, [pc, #476]	; (80021fc <Gyro_Reading+0x2fc>)
 800201e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	440b      	add	r3, r1
 800202a:	3306      	adds	r3, #6
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	4403      	add	r3, r0
 8002030:	edc3 7a00 	vstr	s15, [r3]
					Gyro_data[i].z[n_int-1] -= gyroscope_offset[i][2];
 8002034:	4b70      	ldr	r3, [pc, #448]	; (80021f8 <Gyro_Reading+0x2f8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	1e59      	subs	r1, r3, #1
 800203a:	4870      	ldr	r0, [pc, #448]	; (80021fc <Gyro_Reading+0x2fc>)
 800203c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	005b      	lsls	r3, r3, #1
 8002046:	440b      	add	r3, r1
 8002048:	330c      	adds	r3, #12
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	4403      	add	r3, r0
 800204e:	ed93 7a00 	vldr	s14, [r3]
 8002052:	496b      	ldr	r1, [pc, #428]	; (8002200 <Gyro_Reading+0x300>)
 8002054:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002056:	4613      	mov	r3, r2
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	4413      	add	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	3308      	adds	r3, #8
 8002062:	edd3 7a00 	vldr	s15, [r3]
 8002066:	4b64      	ldr	r3, [pc, #400]	; (80021f8 <Gyro_Reading+0x2f8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	1e59      	subs	r1, r3, #1
 800206c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002070:	4862      	ldr	r0, [pc, #392]	; (80021fc <Gyro_Reading+0x2fc>)
 8002072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002074:	4613      	mov	r3, r2
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	4413      	add	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	440b      	add	r3, r1
 800207e:	330c      	adds	r3, #12
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	4403      	add	r3, r0
 8002084:	edc3 7a00 	vstr	s15, [r3]
				}
				break;
 8002088:	e0b0      	b.n	80021ec <Gyro_Reading+0x2ec>

			case 1:
				if(LSM6DSOX_gyroscopeAvailable(&hi2c1, LSM6DSOX_ADDRESS_2)==1)
 800208a:	216b      	movs	r1, #107	; 0x6b
 800208c:	4859      	ldr	r0, [pc, #356]	; (80021f4 <Gyro_Reading+0x2f4>)
 800208e:	f7ff f885 	bl	800119c <LSM6DSOX_gyroscopeAvailable>
 8002092:	4603      	mov	r3, r0
 8002094:	2b01      	cmp	r3, #1
 8002096:	f040 80b5 	bne.w	8002204 <Gyro_Reading+0x304>
				{
					LSM6DSOX_readGyroscope(&hi2c1, LSM6DSOX_ADDRESS_2, &Gyro_data[i].x[n_int-1], &Gyro_data[i].y[n_int-1], &Gyro_data[i].z[n_int-1]);
 800209a:	4b57      	ldr	r3, [pc, #348]	; (80021f8 <Gyro_Reading+0x2f8>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	1e59      	subs	r1, r3, #1
 80020a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020a2:	4613      	mov	r3, r2
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4413      	add	r3, r2
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	440b      	add	r3, r1
 80020ac:	009b      	lsls	r3, r3, #2
 80020ae:	4a53      	ldr	r2, [pc, #332]	; (80021fc <Gyro_Reading+0x2fc>)
 80020b0:	1898      	adds	r0, r3, r2
 80020b2:	4b51      	ldr	r3, [pc, #324]	; (80021f8 <Gyro_Reading+0x2f8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	1e59      	subs	r1, r3, #1
 80020b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ba:	4613      	mov	r3, r2
 80020bc:	00db      	lsls	r3, r3, #3
 80020be:	4413      	add	r3, r2
 80020c0:	005b      	lsls	r3, r3, #1
 80020c2:	440b      	add	r3, r1
 80020c4:	3306      	adds	r3, #6
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4a4c      	ldr	r2, [pc, #304]	; (80021fc <Gyro_Reading+0x2fc>)
 80020ca:	189c      	adds	r4, r3, r2
 80020cc:	4b4a      	ldr	r3, [pc, #296]	; (80021f8 <Gyro_Reading+0x2f8>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	1e59      	subs	r1, r3, #1
 80020d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	440b      	add	r3, r1
 80020de:	330c      	adds	r3, #12
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4a46      	ldr	r2, [pc, #280]	; (80021fc <Gyro_Reading+0x2fc>)
 80020e4:	4413      	add	r3, r2
 80020e6:	9300      	str	r3, [sp, #0]
 80020e8:	4623      	mov	r3, r4
 80020ea:	4602      	mov	r2, r0
 80020ec:	216b      	movs	r1, #107	; 0x6b
 80020ee:	4841      	ldr	r0, [pc, #260]	; (80021f4 <Gyro_Reading+0x2f4>)
 80020f0:	f7fe fff8 	bl	80010e4 <LSM6DSOX_readGyroscope>
					Gyro_data[i].x[n_int-1] -= gyroscope_offset[i][0];
 80020f4:	4b40      	ldr	r3, [pc, #256]	; (80021f8 <Gyro_Reading+0x2f8>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	1e59      	subs	r1, r3, #1
 80020fa:	4840      	ldr	r0, [pc, #256]	; (80021fc <Gyro_Reading+0x2fc>)
 80020fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020fe:	4613      	mov	r3, r2
 8002100:	00db      	lsls	r3, r3, #3
 8002102:	4413      	add	r3, r2
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	440b      	add	r3, r1
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4403      	add	r3, r0
 800210c:	ed93 7a00 	vldr	s14, [r3]
 8002110:	493b      	ldr	r1, [pc, #236]	; (8002200 <Gyro_Reading+0x300>)
 8002112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002114:	4613      	mov	r3, r2
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	440b      	add	r3, r1
 800211e:	edd3 7a00 	vldr	s15, [r3]
 8002122:	4b35      	ldr	r3, [pc, #212]	; (80021f8 <Gyro_Reading+0x2f8>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	1e59      	subs	r1, r3, #1
 8002128:	ee77 7a67 	vsub.f32	s15, s14, s15
 800212c:	4833      	ldr	r0, [pc, #204]	; (80021fc <Gyro_Reading+0x2fc>)
 800212e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002130:	4613      	mov	r3, r2
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	4413      	add	r3, r2
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	440b      	add	r3, r1
 800213a:	009b      	lsls	r3, r3, #2
 800213c:	4403      	add	r3, r0
 800213e:	edc3 7a00 	vstr	s15, [r3]
					Gyro_data[i].y[n_int-1] -= gyroscope_offset[i][1];
 8002142:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <Gyro_Reading+0x2f8>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	1e59      	subs	r1, r3, #1
 8002148:	482c      	ldr	r0, [pc, #176]	; (80021fc <Gyro_Reading+0x2fc>)
 800214a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4413      	add	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	440b      	add	r3, r1
 8002156:	3306      	adds	r3, #6
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	4403      	add	r3, r0
 800215c:	ed93 7a00 	vldr	s14, [r3]
 8002160:	4927      	ldr	r1, [pc, #156]	; (8002200 <Gyro_Reading+0x300>)
 8002162:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	440b      	add	r3, r1
 800216e:	3304      	adds	r3, #4
 8002170:	edd3 7a00 	vldr	s15, [r3]
 8002174:	4b20      	ldr	r3, [pc, #128]	; (80021f8 <Gyro_Reading+0x2f8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	1e59      	subs	r1, r3, #1
 800217a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217e:	481f      	ldr	r0, [pc, #124]	; (80021fc <Gyro_Reading+0x2fc>)
 8002180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002182:	4613      	mov	r3, r2
 8002184:	00db      	lsls	r3, r3, #3
 8002186:	4413      	add	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	440b      	add	r3, r1
 800218c:	3306      	adds	r3, #6
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	4403      	add	r3, r0
 8002192:	edc3 7a00 	vstr	s15, [r3]
					Gyro_data[i].z[n_int-1] -= gyroscope_offset[i][2];
 8002196:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <Gyro_Reading+0x2f8>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	1e59      	subs	r1, r3, #1
 800219c:	4817      	ldr	r0, [pc, #92]	; (80021fc <Gyro_Reading+0x2fc>)
 800219e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021a0:	4613      	mov	r3, r2
 80021a2:	00db      	lsls	r3, r3, #3
 80021a4:	4413      	add	r3, r2
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	440b      	add	r3, r1
 80021aa:	330c      	adds	r3, #12
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	4403      	add	r3, r0
 80021b0:	ed93 7a00 	vldr	s14, [r3]
 80021b4:	4912      	ldr	r1, [pc, #72]	; (8002200 <Gyro_Reading+0x300>)
 80021b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021b8:	4613      	mov	r3, r2
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4413      	add	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	440b      	add	r3, r1
 80021c2:	3308      	adds	r3, #8
 80021c4:	edd3 7a00 	vldr	s15, [r3]
 80021c8:	4b0b      	ldr	r3, [pc, #44]	; (80021f8 <Gyro_Reading+0x2f8>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	1e59      	subs	r1, r3, #1
 80021ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d2:	480a      	ldr	r0, [pc, #40]	; (80021fc <Gyro_Reading+0x2fc>)
 80021d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d6:	4613      	mov	r3, r2
 80021d8:	00db      	lsls	r3, r3, #3
 80021da:	4413      	add	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	440b      	add	r3, r1
 80021e0:	330c      	adds	r3, #12
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	4403      	add	r3, r0
 80021e6:	edc3 7a00 	vstr	s15, [r3]
				}
				break;
 80021ea:	e00b      	b.n	8002204 <Gyro_Reading+0x304>
				break;
 80021ec:	bf00      	nop
 80021ee:	e00a      	b.n	8002206 <Gyro_Reading+0x306>
 80021f0:	40020800 	.word	0x40020800
 80021f4:	200002fc 	.word	0x200002fc
 80021f8:	20000520 	.word	0x20000520
 80021fc:	2000059c 	.word	0x2000059c
 8002200:	2000054c 	.word	0x2000054c
				break;
 8002204:	bf00      	nop
	for(i = 0;i < 2;i++)
 8002206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002208:	3301      	adds	r3, #1
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
 800220c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220e:	2b01      	cmp	r3, #1
 8002210:	f77f ae82 	ble.w	8001f18 <Gyro_Reading+0x18>
		}
	}
	sprintf((char*)test_buffer, "%.3f;%.3f;%.3f;0.000;0.000;0.000\n", Gyro_data[0].x[n_int-1], Gyro_data[0].y[n_int-1], Gyro_data[0].z[n_int-1]);
 8002214:	4b22      	ldr	r3, [pc, #136]	; (80022a0 <Gyro_Reading+0x3a0>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	3b01      	subs	r3, #1
 800221a:	4a22      	ldr	r2, [pc, #136]	; (80022a4 <Gyro_Reading+0x3a4>)
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	4413      	add	r3, r2
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe f990 	bl	8000548 <__aeabi_f2d>
 8002228:	4680      	mov	r8, r0
 800222a:	4689      	mov	r9, r1
 800222c:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <Gyro_Reading+0x3a0>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	3b01      	subs	r3, #1
 8002232:	4a1c      	ldr	r2, [pc, #112]	; (80022a4 <Gyro_Reading+0x3a4>)
 8002234:	3306      	adds	r3, #6
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe f983 	bl	8000548 <__aeabi_f2d>
 8002242:	4604      	mov	r4, r0
 8002244:	460d      	mov	r5, r1
 8002246:	4b16      	ldr	r3, [pc, #88]	; (80022a0 <Gyro_Reading+0x3a0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	3b01      	subs	r3, #1
 800224c:	4a15      	ldr	r2, [pc, #84]	; (80022a4 <Gyro_Reading+0x3a4>)
 800224e:	330c      	adds	r3, #12
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4618      	mov	r0, r3
 8002258:	f7fe f976 	bl	8000548 <__aeabi_f2d>
 800225c:	4602      	mov	r2, r0
 800225e:	460b      	mov	r3, r1
 8002260:	1d38      	adds	r0, r7, #4
 8002262:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002266:	e9cd 4500 	strd	r4, r5, [sp]
 800226a:	4642      	mov	r2, r8
 800226c:	464b      	mov	r3, r9
 800226e:	490e      	ldr	r1, [pc, #56]	; (80022a8 <Gyro_Reading+0x3a8>)
 8002270:	f00c ff08 	bl	800f084 <siprintf>
	CDC_Transmit_FS((uint8_t*)test_buffer, strlen(test_buffer));
 8002274:	1d3b      	adds	r3, r7, #4
 8002276:	4618      	mov	r0, r3
 8002278:	f7fd fffa 	bl	8000270 <strlen>
 800227c:	4603      	mov	r3, r0
 800227e:	b29a      	uxth	r2, r3
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	4611      	mov	r1, r2
 8002284:	4618      	mov	r0, r3
 8002286:	f00b fe3b 	bl	800df00 <CDC_Transmit_FS>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800228a:	2200      	movs	r2, #0
 800228c:	2102      	movs	r1, #2
 800228e:	4807      	ldr	r0, [pc, #28]	; (80022ac <Gyro_Reading+0x3ac>)
 8002290:	f001 fbec 	bl	8003a6c <HAL_GPIO_WritePin>
}
 8002294:	bf00      	nop
 8002296:	3728      	adds	r7, #40	; 0x28
 8002298:	46bd      	mov	sp, r7
 800229a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800229e:	bf00      	nop
 80022a0:	20000520 	.word	0x20000520
 80022a4:	2000059c 	.word	0x2000059c
 80022a8:	08012430 	.word	0x08012430
 80022ac:	40020800 	.word	0x40020800

080022b0 <Acc_Mag_Reading>:

void Acc_Mag_Reading()
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b084      	sub	sp, #16
 80022b4:	af02      	add	r7, sp, #8
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
	int i;

	for(i = 0;i < 2;i++)
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	e109      	b.n	80024d0 <Acc_Mag_Reading+0x220>
	  {
		  switch(i)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <Acc_Mag_Reading+0x1a>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d07f      	beq.n	80023c8 <Acc_Mag_Reading+0x118>
 80022c8:	e0ff      	b.n	80024ca <Acc_Mag_Reading+0x21a>
		  {
		  case 0:
			  if(LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_1)==1)
 80022ca:	216a      	movs	r1, #106	; 0x6a
 80022cc:	4885      	ldr	r0, [pc, #532]	; (80024e4 <Acc_Mag_Reading+0x234>)
 80022ce:	f7fe fef1 	bl	80010b4 <LSM6DSOX_accelerationAvailable>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	f040 80f5 	bne.w	80024c4 <Acc_Mag_Reading+0x214>
			  {
				  LSM6DSOX_readAcceleration(&hi2c1, LSM6DSOX_ADDRESS_1, &Acc_data[i].x, &Acc_data[i].y, &Acc_data[i].z);
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	4613      	mov	r3, r2
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4413      	add	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4a80      	ldr	r2, [pc, #512]	; (80024e8 <Acc_Mag_Reading+0x238>)
 80022e6:	1899      	adds	r1, r3, r2
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	005b      	lsls	r3, r3, #1
 80022ee:	4413      	add	r3, r2
 80022f0:	009b      	lsls	r3, r3, #2
 80022f2:	4a7d      	ldr	r2, [pc, #500]	; (80024e8 <Acc_Mag_Reading+0x238>)
 80022f4:	4413      	add	r3, r2
 80022f6:	1d18      	adds	r0, r3, #4
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	4613      	mov	r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	4413      	add	r3, r2
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	3308      	adds	r3, #8
 8002304:	4a78      	ldr	r2, [pc, #480]	; (80024e8 <Acc_Mag_Reading+0x238>)
 8002306:	4413      	add	r3, r2
 8002308:	9300      	str	r3, [sp, #0]
 800230a:	4603      	mov	r3, r0
 800230c:	460a      	mov	r2, r1
 800230e:	216a      	movs	r1, #106	; 0x6a
 8002310:	4874      	ldr	r0, [pc, #464]	; (80024e4 <Acc_Mag_Reading+0x234>)
 8002312:	f7fe fe73 	bl	8000ffc <LSM6DSOX_readAcceleration>
				  Acc_data[i].x/=norm_acceleration[i];
 8002316:	4974      	ldr	r1, [pc, #464]	; (80024e8 <Acc_Mag_Reading+0x238>)
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	4413      	add	r3, r2
 8002320:	009b      	lsls	r3, r3, #2
 8002322:	440b      	add	r3, r1
 8002324:	edd3 6a00 	vldr	s13, [r3]
 8002328:	4a70      	ldr	r2, [pc, #448]	; (80024ec <Acc_Mag_Reading+0x23c>)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002330:	ee07 3a90 	vmov	s15, r3
 8002334:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002338:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800233c:	496a      	ldr	r1, [pc, #424]	; (80024e8 <Acc_Mag_Reading+0x238>)
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	4613      	mov	r3, r2
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	4413      	add	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	440b      	add	r3, r1
 800234a:	edc3 7a00 	vstr	s15, [r3]
				  Acc_data[i].y/=norm_acceleration[i];
 800234e:	4966      	ldr	r1, [pc, #408]	; (80024e8 <Acc_Mag_Reading+0x238>)
 8002350:	687a      	ldr	r2, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	4413      	add	r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	440b      	add	r3, r1
 800235c:	3304      	adds	r3, #4
 800235e:	edd3 6a00 	vldr	s13, [r3]
 8002362:	4a62      	ldr	r2, [pc, #392]	; (80024ec <Acc_Mag_Reading+0x23c>)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002376:	495c      	ldr	r1, [pc, #368]	; (80024e8 <Acc_Mag_Reading+0x238>)
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	440b      	add	r3, r1
 8002384:	3304      	adds	r3, #4
 8002386:	edc3 7a00 	vstr	s15, [r3]
				  Acc_data[i].z/=norm_acceleration[i];
 800238a:	4957      	ldr	r1, [pc, #348]	; (80024e8 <Acc_Mag_Reading+0x238>)
 800238c:	687a      	ldr	r2, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	3308      	adds	r3, #8
 800239a:	edd3 6a00 	vldr	s13, [r3]
 800239e:	4a53      	ldr	r2, [pc, #332]	; (80024ec <Acc_Mag_Reading+0x23c>)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023a6:	ee07 3a90 	vmov	s15, r3
 80023aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023ae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023b2:	494d      	ldr	r1, [pc, #308]	; (80024e8 <Acc_Mag_Reading+0x238>)
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	4613      	mov	r3, r2
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	3308      	adds	r3, #8
 80023c2:	edc3 7a00 	vstr	s15, [r3]
			  }
			  break;
 80023c6:	e07d      	b.n	80024c4 <Acc_Mag_Reading+0x214>

		  case 1:
			  if(LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_2)==1)
 80023c8:	216b      	movs	r1, #107	; 0x6b
 80023ca:	4846      	ldr	r0, [pc, #280]	; (80024e4 <Acc_Mag_Reading+0x234>)
 80023cc:	f7fe fe72 	bl	80010b4 <LSM6DSOX_accelerationAvailable>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d178      	bne.n	80024c8 <Acc_Mag_Reading+0x218>
			  {
				  LSM6DSOX_readAcceleration(&hi2c1, LSM6DSOX_ADDRESS_2, &Acc_data[i].x, &Acc_data[i].y, &Acc_data[i].z);
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4a41      	ldr	r2, [pc, #260]	; (80024e8 <Acc_Mag_Reading+0x238>)
 80023e2:	1899      	adds	r1, r3, r2
 80023e4:	687a      	ldr	r2, [r7, #4]
 80023e6:	4613      	mov	r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	4413      	add	r3, r2
 80023ec:	009b      	lsls	r3, r3, #2
 80023ee:	4a3e      	ldr	r2, [pc, #248]	; (80024e8 <Acc_Mag_Reading+0x238>)
 80023f0:	4413      	add	r3, r2
 80023f2:	1d18      	adds	r0, r3, #4
 80023f4:	687a      	ldr	r2, [r7, #4]
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	3308      	adds	r3, #8
 8002400:	4a39      	ldr	r2, [pc, #228]	; (80024e8 <Acc_Mag_Reading+0x238>)
 8002402:	4413      	add	r3, r2
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	4603      	mov	r3, r0
 8002408:	460a      	mov	r2, r1
 800240a:	216b      	movs	r1, #107	; 0x6b
 800240c:	4835      	ldr	r0, [pc, #212]	; (80024e4 <Acc_Mag_Reading+0x234>)
 800240e:	f7fe fdf5 	bl	8000ffc <LSM6DSOX_readAcceleration>
				  Acc_data[i].x/=norm_acceleration[i];
 8002412:	4935      	ldr	r1, [pc, #212]	; (80024e8 <Acc_Mag_Reading+0x238>)
 8002414:	687a      	ldr	r2, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	edd3 6a00 	vldr	s13, [r3]
 8002424:	4a31      	ldr	r2, [pc, #196]	; (80024ec <Acc_Mag_Reading+0x23c>)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242c:	ee07 3a90 	vmov	s15, r3
 8002430:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002438:	492b      	ldr	r1, [pc, #172]	; (80024e8 <Acc_Mag_Reading+0x238>)
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	edc3 7a00 	vstr	s15, [r3]
				  Acc_data[i].y/=norm_acceleration[i];
 800244a:	4927      	ldr	r1, [pc, #156]	; (80024e8 <Acc_Mag_Reading+0x238>)
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	009b      	lsls	r3, r3, #2
 8002456:	440b      	add	r3, r1
 8002458:	3304      	adds	r3, #4
 800245a:	edd3 6a00 	vldr	s13, [r3]
 800245e:	4a23      	ldr	r2, [pc, #140]	; (80024ec <Acc_Mag_Reading+0x23c>)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002466:	ee07 3a90 	vmov	s15, r3
 800246a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800246e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002472:	491d      	ldr	r1, [pc, #116]	; (80024e8 <Acc_Mag_Reading+0x238>)
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	4613      	mov	r3, r2
 8002478:	005b      	lsls	r3, r3, #1
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	440b      	add	r3, r1
 8002480:	3304      	adds	r3, #4
 8002482:	edc3 7a00 	vstr	s15, [r3]
				  Acc_data[i].z/=norm_acceleration[i];
 8002486:	4918      	ldr	r1, [pc, #96]	; (80024e8 <Acc_Mag_Reading+0x238>)
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	4413      	add	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	3308      	adds	r3, #8
 8002496:	edd3 6a00 	vldr	s13, [r3]
 800249a:	4a14      	ldr	r2, [pc, #80]	; (80024ec <Acc_Mag_Reading+0x23c>)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a2:	ee07 3a90 	vmov	s15, r3
 80024a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024ae:	490e      	ldr	r1, [pc, #56]	; (80024e8 <Acc_Mag_Reading+0x238>)
 80024b0:	687a      	ldr	r2, [r7, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	005b      	lsls	r3, r3, #1
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	440b      	add	r3, r1
 80024bc:	3308      	adds	r3, #8
 80024be:	edc3 7a00 	vstr	s15, [r3]
			  }
			  break;
 80024c2:	e001      	b.n	80024c8 <Acc_Mag_Reading+0x218>
			  break;
 80024c4:	bf00      	nop
 80024c6:	e000      	b.n	80024ca <Acc_Mag_Reading+0x21a>
			  break;
 80024c8:	bf00      	nop
	for(i = 0;i < 2;i++)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	3301      	adds	r3, #1
 80024ce:	607b      	str	r3, [r7, #4]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	f77f aef2 	ble.w	80022bc <Acc_Mag_Reading+0xc>
		  }
	  }

	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	200002fc 	.word	0x200002fc
 80024e8:	2000062c 	.word	0x2000062c
 80024ec:	20000564 	.word	0x20000564

080024f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024f4:	b672      	cpsid	i
}
 80024f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80024f8:	e7fe      	b.n	80024f8 <Error_Handler+0x8>
	...

080024fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	607b      	str	r3, [r7, #4]
 8002506:	4b10      	ldr	r3, [pc, #64]	; (8002548 <HAL_MspInit+0x4c>)
 8002508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250a:	4a0f      	ldr	r2, [pc, #60]	; (8002548 <HAL_MspInit+0x4c>)
 800250c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002510:	6453      	str	r3, [r2, #68]	; 0x44
 8002512:	4b0d      	ldr	r3, [pc, #52]	; (8002548 <HAL_MspInit+0x4c>)
 8002514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800251a:	607b      	str	r3, [r7, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800251e:	2300      	movs	r3, #0
 8002520:	603b      	str	r3, [r7, #0]
 8002522:	4b09      	ldr	r3, [pc, #36]	; (8002548 <HAL_MspInit+0x4c>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	4a08      	ldr	r2, [pc, #32]	; (8002548 <HAL_MspInit+0x4c>)
 8002528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800252c:	6413      	str	r3, [r2, #64]	; 0x40
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_MspInit+0x4c>)
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002536:	603b      	str	r3, [r7, #0]
 8002538:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800253a:	bf00      	nop
 800253c:	370c      	adds	r7, #12
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
 8002546:	bf00      	nop
 8002548:	40023800 	.word	0x40023800

0800254c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b08a      	sub	sp, #40	; 0x28
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002554:	f107 0314 	add.w	r3, r7, #20
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	605a      	str	r2, [r3, #4]
 800255e:	609a      	str	r2, [r3, #8]
 8002560:	60da      	str	r2, [r3, #12]
 8002562:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a19      	ldr	r2, [pc, #100]	; (80025d0 <HAL_I2C_MspInit+0x84>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d12b      	bne.n	80025c6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256e:	2300      	movs	r3, #0
 8002570:	613b      	str	r3, [r7, #16]
 8002572:	4b18      	ldr	r3, [pc, #96]	; (80025d4 <HAL_I2C_MspInit+0x88>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	4a17      	ldr	r2, [pc, #92]	; (80025d4 <HAL_I2C_MspInit+0x88>)
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	6313      	str	r3, [r2, #48]	; 0x30
 800257e:	4b15      	ldr	r3, [pc, #84]	; (80025d4 <HAL_I2C_MspInit+0x88>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	613b      	str	r3, [r7, #16]
 8002588:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800258a:	23c0      	movs	r3, #192	; 0xc0
 800258c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800258e:	2312      	movs	r3, #18
 8002590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002592:	2300      	movs	r3, #0
 8002594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002596:	2303      	movs	r3, #3
 8002598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800259a:	2304      	movs	r3, #4
 800259c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259e:	f107 0314 	add.w	r3, r7, #20
 80025a2:	4619      	mov	r1, r3
 80025a4:	480c      	ldr	r0, [pc, #48]	; (80025d8 <HAL_I2C_MspInit+0x8c>)
 80025a6:	f001 f8ad 	bl	8003704 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]
 80025ae:	4b09      	ldr	r3, [pc, #36]	; (80025d4 <HAL_I2C_MspInit+0x88>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	4a08      	ldr	r2, [pc, #32]	; (80025d4 <HAL_I2C_MspInit+0x88>)
 80025b4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025b8:	6413      	str	r3, [r2, #64]	; 0x40
 80025ba:	4b06      	ldr	r3, [pc, #24]	; (80025d4 <HAL_I2C_MspInit+0x88>)
 80025bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c2:	60fb      	str	r3, [r7, #12]
 80025c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80025c6:	bf00      	nop
 80025c8:	3728      	adds	r7, #40	; 0x28
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40005400 	.word	0x40005400
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40020400 	.word	0x40020400

080025dc <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b08a      	sub	sp, #40	; 0x28
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e4:	f107 0314 	add.w	r3, r7, #20
 80025e8:	2200      	movs	r2, #0
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	605a      	str	r2, [r3, #4]
 80025ee:	609a      	str	r2, [r3, #8]
 80025f0:	60da      	str	r2, [r3, #12]
 80025f2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a70      	ldr	r2, [pc, #448]	; (80027bc <HAL_SD_MspInit+0x1e0>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	f040 80da 	bne.w	80027b4 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002600:	2300      	movs	r3, #0
 8002602:	613b      	str	r3, [r7, #16]
 8002604:	4b6e      	ldr	r3, [pc, #440]	; (80027c0 <HAL_SD_MspInit+0x1e4>)
 8002606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002608:	4a6d      	ldr	r2, [pc, #436]	; (80027c0 <HAL_SD_MspInit+0x1e4>)
 800260a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800260e:	6453      	str	r3, [r2, #68]	; 0x44
 8002610:	4b6b      	ldr	r3, [pc, #428]	; (80027c0 <HAL_SD_MspInit+0x1e4>)
 8002612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002614:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002618:	613b      	str	r3, [r7, #16]
 800261a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800261c:	2300      	movs	r3, #0
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	4b67      	ldr	r3, [pc, #412]	; (80027c0 <HAL_SD_MspInit+0x1e4>)
 8002622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002624:	4a66      	ldr	r2, [pc, #408]	; (80027c0 <HAL_SD_MspInit+0x1e4>)
 8002626:	f043 0304 	orr.w	r3, r3, #4
 800262a:	6313      	str	r3, [r2, #48]	; 0x30
 800262c:	4b64      	ldr	r3, [pc, #400]	; (80027c0 <HAL_SD_MspInit+0x1e4>)
 800262e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002630:	f003 0304 	and.w	r3, r3, #4
 8002634:	60fb      	str	r3, [r7, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002638:	2300      	movs	r3, #0
 800263a:	60bb      	str	r3, [r7, #8]
 800263c:	4b60      	ldr	r3, [pc, #384]	; (80027c0 <HAL_SD_MspInit+0x1e4>)
 800263e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002640:	4a5f      	ldr	r2, [pc, #380]	; (80027c0 <HAL_SD_MspInit+0x1e4>)
 8002642:	f043 0308 	orr.w	r3, r3, #8
 8002646:	6313      	str	r3, [r2, #48]	; 0x30
 8002648:	4b5d      	ldr	r3, [pc, #372]	; (80027c0 <HAL_SD_MspInit+0x1e4>)
 800264a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800264c:	f003 0308 	and.w	r3, r3, #8
 8002650:	60bb      	str	r3, [r7, #8]
 8002652:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002654:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002658:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800265e:	2301      	movs	r3, #1
 8002660:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002662:	2303      	movs	r3, #3
 8002664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002666:	230c      	movs	r3, #12
 8002668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800266a:	f107 0314 	add.w	r3, r7, #20
 800266e:	4619      	mov	r1, r3
 8002670:	4854      	ldr	r0, [pc, #336]	; (80027c4 <HAL_SD_MspInit+0x1e8>)
 8002672:	f001 f847 	bl	8003704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002676:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800267a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800267c:	2302      	movs	r3, #2
 800267e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002684:	2303      	movs	r3, #3
 8002686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002688:	230c      	movs	r3, #12
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800268c:	f107 0314 	add.w	r3, r7, #20
 8002690:	4619      	mov	r1, r3
 8002692:	484c      	ldr	r0, [pc, #304]	; (80027c4 <HAL_SD_MspInit+0x1e8>)
 8002694:	f001 f836 	bl	8003704 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002698:	2304      	movs	r3, #4
 800269a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800269c:	2302      	movs	r3, #2
 800269e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026a0:	2301      	movs	r3, #1
 80026a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026a4:	2303      	movs	r3, #3
 80026a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80026a8:	230c      	movs	r3, #12
 80026aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026ac:	f107 0314 	add.w	r3, r7, #20
 80026b0:	4619      	mov	r1, r3
 80026b2:	4845      	ldr	r0, [pc, #276]	; (80027c8 <HAL_SD_MspInit+0x1ec>)
 80026b4:	f001 f826 	bl	8003704 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 80026b8:	4b44      	ldr	r3, [pc, #272]	; (80027cc <HAL_SD_MspInit+0x1f0>)
 80026ba:	4a45      	ldr	r2, [pc, #276]	; (80027d0 <HAL_SD_MspInit+0x1f4>)
 80026bc:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 80026be:	4b43      	ldr	r3, [pc, #268]	; (80027cc <HAL_SD_MspInit+0x1f0>)
 80026c0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026c4:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026c6:	4b41      	ldr	r3, [pc, #260]	; (80027cc <HAL_SD_MspInit+0x1f0>)
 80026c8:	2200      	movs	r2, #0
 80026ca:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026cc:	4b3f      	ldr	r3, [pc, #252]	; (80027cc <HAL_SD_MspInit+0x1f0>)
 80026ce:	2200      	movs	r2, #0
 80026d0:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026d2:	4b3e      	ldr	r3, [pc, #248]	; (80027cc <HAL_SD_MspInit+0x1f0>)
 80026d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026d8:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80026da:	4b3c      	ldr	r3, [pc, #240]	; (80027cc <HAL_SD_MspInit+0x1f0>)
 80026dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80026e0:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80026e2:	4b3a      	ldr	r3, [pc, #232]	; (80027cc <HAL_SD_MspInit+0x1f0>)
 80026e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80026e8:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 80026ea:	4b38      	ldr	r3, [pc, #224]	; (80027cc <HAL_SD_MspInit+0x1f0>)
 80026ec:	2220      	movs	r2, #32
 80026ee:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026f0:	4b36      	ldr	r3, [pc, #216]	; (80027cc <HAL_SD_MspInit+0x1f0>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80026f6:	4b35      	ldr	r3, [pc, #212]	; (80027cc <HAL_SD_MspInit+0x1f0>)
 80026f8:	2204      	movs	r2, #4
 80026fa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80026fc:	4b33      	ldr	r3, [pc, #204]	; (80027cc <HAL_SD_MspInit+0x1f0>)
 80026fe:	2203      	movs	r2, #3
 8002700:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002702:	4b32      	ldr	r3, [pc, #200]	; (80027cc <HAL_SD_MspInit+0x1f0>)
 8002704:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002708:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 800270a:	4b30      	ldr	r3, [pc, #192]	; (80027cc <HAL_SD_MspInit+0x1f0>)
 800270c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002710:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002712:	482e      	ldr	r0, [pc, #184]	; (80027cc <HAL_SD_MspInit+0x1f0>)
 8002714:	f000 fbe8 	bl	8002ee8 <HAL_DMA_Init>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 800271e:	f7ff fee7 	bl	80024f0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a29      	ldr	r2, [pc, #164]	; (80027cc <HAL_SD_MspInit+0x1f0>)
 8002726:	641a      	str	r2, [r3, #64]	; 0x40
 8002728:	4a28      	ldr	r2, [pc, #160]	; (80027cc <HAL_SD_MspInit+0x1f0>)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 800272e:	4b29      	ldr	r3, [pc, #164]	; (80027d4 <HAL_SD_MspInit+0x1f8>)
 8002730:	4a29      	ldr	r2, [pc, #164]	; (80027d8 <HAL_SD_MspInit+0x1fc>)
 8002732:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002734:	4b27      	ldr	r3, [pc, #156]	; (80027d4 <HAL_SD_MspInit+0x1f8>)
 8002736:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800273a:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800273c:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_SD_MspInit+0x1f8>)
 800273e:	2240      	movs	r2, #64	; 0x40
 8002740:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002742:	4b24      	ldr	r3, [pc, #144]	; (80027d4 <HAL_SD_MspInit+0x1f8>)
 8002744:	2200      	movs	r2, #0
 8002746:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002748:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <HAL_SD_MspInit+0x1f8>)
 800274a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800274e:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002750:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_SD_MspInit+0x1f8>)
 8002752:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002756:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002758:	4b1e      	ldr	r3, [pc, #120]	; (80027d4 <HAL_SD_MspInit+0x1f8>)
 800275a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800275e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002760:	4b1c      	ldr	r3, [pc, #112]	; (80027d4 <HAL_SD_MspInit+0x1f8>)
 8002762:	2220      	movs	r2, #32
 8002764:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002766:	4b1b      	ldr	r3, [pc, #108]	; (80027d4 <HAL_SD_MspInit+0x1f8>)
 8002768:	2200      	movs	r2, #0
 800276a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800276c:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <HAL_SD_MspInit+0x1f8>)
 800276e:	2204      	movs	r2, #4
 8002770:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002772:	4b18      	ldr	r3, [pc, #96]	; (80027d4 <HAL_SD_MspInit+0x1f8>)
 8002774:	2203      	movs	r2, #3
 8002776:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002778:	4b16      	ldr	r3, [pc, #88]	; (80027d4 <HAL_SD_MspInit+0x1f8>)
 800277a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800277e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002780:	4b14      	ldr	r3, [pc, #80]	; (80027d4 <HAL_SD_MspInit+0x1f8>)
 8002782:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002788:	4812      	ldr	r0, [pc, #72]	; (80027d4 <HAL_SD_MspInit+0x1f8>)
 800278a:	f000 fbad 	bl	8002ee8 <HAL_DMA_Init>
 800278e:	4603      	mov	r3, r0
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8002794:	f7ff feac 	bl	80024f0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a0e      	ldr	r2, [pc, #56]	; (80027d4 <HAL_SD_MspInit+0x1f8>)
 800279c:	63da      	str	r2, [r3, #60]	; 0x3c
 800279e:	4a0d      	ldr	r2, [pc, #52]	; (80027d4 <HAL_SD_MspInit+0x1f8>)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 80027a4:	2200      	movs	r2, #0
 80027a6:	2100      	movs	r1, #0
 80027a8:	2031      	movs	r0, #49	; 0x31
 80027aa:	f000 fb66 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 80027ae:	2031      	movs	r0, #49	; 0x31
 80027b0:	f000 fb7f 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80027b4:	bf00      	nop
 80027b6:	3728      	adds	r7, #40	; 0x28
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	40012c00 	.word	0x40012c00
 80027c0:	40023800 	.word	0x40023800
 80027c4:	40020800 	.word	0x40020800
 80027c8:	40020c00 	.word	0x40020c00
 80027cc:	200003d4 	.word	0x200003d4
 80027d0:	40026458 	.word	0x40026458
 80027d4:	20000434 	.word	0x20000434
 80027d8:	400264a0 	.word	0x400264a0

080027dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ec:	d115      	bne.n	800281a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027ee:	2300      	movs	r3, #0
 80027f0:	60fb      	str	r3, [r7, #12]
 80027f2:	4b0c      	ldr	r3, [pc, #48]	; (8002824 <HAL_TIM_Base_MspInit+0x48>)
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	4a0b      	ldr	r2, [pc, #44]	; (8002824 <HAL_TIM_Base_MspInit+0x48>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	6413      	str	r3, [r2, #64]	; 0x40
 80027fe:	4b09      	ldr	r3, [pc, #36]	; (8002824 <HAL_TIM_Base_MspInit+0x48>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f003 0301 	and.w	r3, r3, #1
 8002806:	60fb      	str	r3, [r7, #12]
 8002808:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800280a:	2200      	movs	r2, #0
 800280c:	2100      	movs	r1, #0
 800280e:	201c      	movs	r0, #28
 8002810:	f000 fb33 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002814:	201c      	movs	r0, #28
 8002816:	f000 fb4c 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800281a:	bf00      	nop
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800

08002828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b08a      	sub	sp, #40	; 0x28
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002830:	f107 0314 	add.w	r3, r7, #20
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]
 8002838:	605a      	str	r2, [r3, #4]
 800283a:	609a      	str	r2, [r3, #8]
 800283c:	60da      	str	r2, [r3, #12]
 800283e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1d      	ldr	r2, [pc, #116]	; (80028bc <HAL_UART_MspInit+0x94>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d134      	bne.n	80028b4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800284a:	2300      	movs	r3, #0
 800284c:	613b      	str	r3, [r7, #16]
 800284e:	4b1c      	ldr	r3, [pc, #112]	; (80028c0 <HAL_UART_MspInit+0x98>)
 8002850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002852:	4a1b      	ldr	r2, [pc, #108]	; (80028c0 <HAL_UART_MspInit+0x98>)
 8002854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002858:	6413      	str	r3, [r2, #64]	; 0x40
 800285a:	4b19      	ldr	r3, [pc, #100]	; (80028c0 <HAL_UART_MspInit+0x98>)
 800285c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002862:	613b      	str	r3, [r7, #16]
 8002864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002866:	2300      	movs	r3, #0
 8002868:	60fb      	str	r3, [r7, #12]
 800286a:	4b15      	ldr	r3, [pc, #84]	; (80028c0 <HAL_UART_MspInit+0x98>)
 800286c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286e:	4a14      	ldr	r2, [pc, #80]	; (80028c0 <HAL_UART_MspInit+0x98>)
 8002870:	f043 0302 	orr.w	r3, r3, #2
 8002874:	6313      	str	r3, [r2, #48]	; 0x30
 8002876:	4b12      	ldr	r3, [pc, #72]	; (80028c0 <HAL_UART_MspInit+0x98>)
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	60fb      	str	r3, [r7, #12]
 8002880:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002882:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002886:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288c:	2300      	movs	r3, #0
 800288e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002890:	2303      	movs	r3, #3
 8002892:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002894:	2307      	movs	r3, #7
 8002896:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002898:	f107 0314 	add.w	r3, r7, #20
 800289c:	4619      	mov	r1, r3
 800289e:	4809      	ldr	r0, [pc, #36]	; (80028c4 <HAL_UART_MspInit+0x9c>)
 80028a0:	f000 ff30 	bl	8003704 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	2100      	movs	r1, #0
 80028a8:	2027      	movs	r0, #39	; 0x27
 80028aa:	f000 fae6 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80028ae:	2027      	movs	r0, #39	; 0x27
 80028b0:	f000 faff 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80028b4:	bf00      	nop
 80028b6:	3728      	adds	r7, #40	; 0x28
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40004800 	.word	0x40004800
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40020400 	.word	0x40020400

080028c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028c8:	b480      	push	{r7}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80028cc:	e7fe      	b.n	80028cc <NMI_Handler+0x4>

080028ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ce:	b480      	push	{r7}
 80028d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028d2:	e7fe      	b.n	80028d2 <HardFault_Handler+0x4>

080028d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028d8:	e7fe      	b.n	80028d8 <MemManage_Handler+0x4>

080028da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028da:	b480      	push	{r7}
 80028dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80028de:	e7fe      	b.n	80028de <BusFault_Handler+0x4>

080028e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80028e4:	e7fe      	b.n	80028e4 <UsageFault_Handler+0x4>

080028e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80028e6:	b480      	push	{r7}
 80028e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80028ea:	bf00      	nop
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028f4:	b480      	push	{r7}
 80028f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028f8:	bf00      	nop
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002902:	b480      	push	{r7}
 8002904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002906:	bf00      	nop
 8002908:	46bd      	mov	sp, r7
 800290a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290e:	4770      	bx	lr

08002910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002914:	f000 f992 	bl	8002c3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002918:	bf00      	nop
 800291a:	bd80      	pop	{r7, pc}

0800291c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002920:	4802      	ldr	r0, [pc, #8]	; (800292c <TIM2_IRQHandler+0x10>)
 8002922:	f005 fb19 	bl	8007f58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002926:	bf00      	nop
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	20000494 	.word	0x20000494

08002930 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002934:	4802      	ldr	r0, [pc, #8]	; (8002940 <USART3_IRQHandler+0x10>)
 8002936:	f005 ff1f 	bl	8008778 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800293a:	bf00      	nop
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	200004dc 	.word	0x200004dc

08002944 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8002948:	4802      	ldr	r0, [pc, #8]	; (8002954 <SDIO_IRQHandler+0x10>)
 800294a:	f004 f98b 	bl	8006c64 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000350 	.word	0x20000350

08002958 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800295c:	4802      	ldr	r0, [pc, #8]	; (8002968 <DMA2_Stream3_IRQHandler+0x10>)
 800295e:	f000 fc5b 	bl	8003218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002962:	bf00      	nop
 8002964:	bd80      	pop	{r7, pc}
 8002966:	bf00      	nop
 8002968:	200003d4 	.word	0x200003d4

0800296c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002970:	4802      	ldr	r0, [pc, #8]	; (800297c <OTG_FS_IRQHandler+0x10>)
 8002972:	f002 f97a 	bl	8004c6a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002976:	bf00      	nop
 8002978:	bd80      	pop	{r7, pc}
 800297a:	bf00      	nop
 800297c:	20001b48 	.word	0x20001b48

08002980 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8002984:	4802      	ldr	r0, [pc, #8]	; (8002990 <DMA2_Stream6_IRQHandler+0x10>)
 8002986:	f000 fc47 	bl	8003218 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800298a:	bf00      	nop
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	20000434 	.word	0x20000434

08002994 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  return 1;
 8002998:	2301      	movs	r3, #1
}
 800299a:	4618      	mov	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <_kill>:

int _kill(int pid, int sig)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80029ae:	f00c fc45 	bl	800f23c <__errno>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2216      	movs	r2, #22
 80029b6:	601a      	str	r2, [r3, #0]
  return -1;
 80029b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}

080029c4 <_exit>:

void _exit (int status)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80029cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f7ff ffe7 	bl	80029a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80029d6:	e7fe      	b.n	80029d6 <_exit+0x12>

080029d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]
 80029e8:	e00a      	b.n	8002a00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80029ea:	f3af 8000 	nop.w
 80029ee:	4601      	mov	r1, r0
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	1c5a      	adds	r2, r3, #1
 80029f4:	60ba      	str	r2, [r7, #8]
 80029f6:	b2ca      	uxtb	r2, r1
 80029f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	3301      	adds	r3, #1
 80029fe:	617b      	str	r3, [r7, #20]
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	dbf0      	blt.n	80029ea <_read+0x12>
  }

  return len;
 8002a08:	687b      	ldr	r3, [r7, #4]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3718      	adds	r7, #24
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b086      	sub	sp, #24
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a1e:	2300      	movs	r3, #0
 8002a20:	617b      	str	r3, [r7, #20]
 8002a22:	e009      	b.n	8002a38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	1c5a      	adds	r2, r3, #1
 8002a28:	60ba      	str	r2, [r7, #8]
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	3301      	adds	r3, #1
 8002a36:	617b      	str	r3, [r7, #20]
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	dbf1      	blt.n	8002a24 <_write+0x12>
  }
  return len;
 8002a40:	687b      	ldr	r3, [r7, #4]
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3718      	adds	r7, #24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}

08002a4a <_close>:

int _close(int file)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002a52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	370c      	adds	r7, #12
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a60:	4770      	bx	lr

08002a62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
 8002a6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a72:	605a      	str	r2, [r3, #4]
  return 0;
 8002a74:	2300      	movs	r3, #0
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr

08002a82 <_isatty>:

int _isatty(int file)
{
 8002a82:	b480      	push	{r7}
 8002a84:	b083      	sub	sp, #12
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002a8a:	2301      	movs	r3, #1
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
	...

08002ab4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b086      	sub	sp, #24
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002abc:	4a14      	ldr	r2, [pc, #80]	; (8002b10 <_sbrk+0x5c>)
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <_sbrk+0x60>)
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002ac8:	4b13      	ldr	r3, [pc, #76]	; (8002b18 <_sbrk+0x64>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d102      	bne.n	8002ad6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002ad0:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <_sbrk+0x64>)
 8002ad2:	4a12      	ldr	r2, [pc, #72]	; (8002b1c <_sbrk+0x68>)
 8002ad4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <_sbrk+0x64>)
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4413      	add	r3, r2
 8002ade:	693a      	ldr	r2, [r7, #16]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d207      	bcs.n	8002af4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ae4:	f00c fbaa 	bl	800f23c <__errno>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	220c      	movs	r2, #12
 8002aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002aee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002af2:	e009      	b.n	8002b08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002af4:	4b08      	ldr	r3, [pc, #32]	; (8002b18 <_sbrk+0x64>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002afa:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <_sbrk+0x64>)
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4413      	add	r3, r2
 8002b02:	4a05      	ldr	r2, [pc, #20]	; (8002b18 <_sbrk+0x64>)
 8002b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b06:	68fb      	ldr	r3, [r7, #12]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3718      	adds	r7, #24
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	20020000 	.word	0x20020000
 8002b14:	00000400 	.word	0x00000400
 8002b18:	20000644 	.word	0x20000644
 8002b1c:	200023c0 	.word	0x200023c0

08002b20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b24:	4b06      	ldr	r3, [pc, #24]	; (8002b40 <SystemInit+0x20>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	4a05      	ldr	r2, [pc, #20]	; (8002b40 <SystemInit+0x20>)
 8002b2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b34:	bf00      	nop
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	e000ed00 	.word	0xe000ed00

08002b44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b48:	480d      	ldr	r0, [pc, #52]	; (8002b80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b4a:	490e      	ldr	r1, [pc, #56]	; (8002b84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b4c:	4a0e      	ldr	r2, [pc, #56]	; (8002b88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b50:	e002      	b.n	8002b58 <LoopCopyDataInit>

08002b52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b56:	3304      	adds	r3, #4

08002b58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b5c:	d3f9      	bcc.n	8002b52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b5e:	4a0b      	ldr	r2, [pc, #44]	; (8002b8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b60:	4c0b      	ldr	r4, [pc, #44]	; (8002b90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b64:	e001      	b.n	8002b6a <LoopFillZerobss>

08002b66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b68:	3204      	adds	r2, #4

08002b6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b6c:	d3fb      	bcc.n	8002b66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b6e:	f7ff ffd7 	bl	8002b20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b72:	f00c fb69 	bl	800f248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b76:	f7fe ff43 	bl	8001a00 <main>
  bx  lr    
 8002b7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b7c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b84:	200002d8 	.word	0x200002d8
  ldr r2, =_sidata
 8002b88:	08012888 	.word	0x08012888
  ldr r2, =_sbss
 8002b8c:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8002b90:	200023c0 	.word	0x200023c0

08002b94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b94:	e7fe      	b.n	8002b94 <ADC_IRQHandler>
	...

08002b98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b9c:	4b0e      	ldr	r3, [pc, #56]	; (8002bd8 <HAL_Init+0x40>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a0d      	ldr	r2, [pc, #52]	; (8002bd8 <HAL_Init+0x40>)
 8002ba2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ba6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ba8:	4b0b      	ldr	r3, [pc, #44]	; (8002bd8 <HAL_Init+0x40>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a0a      	ldr	r2, [pc, #40]	; (8002bd8 <HAL_Init+0x40>)
 8002bae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bb4:	4b08      	ldr	r3, [pc, #32]	; (8002bd8 <HAL_Init+0x40>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <HAL_Init+0x40>)
 8002bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002bc0:	2003      	movs	r0, #3
 8002bc2:	f000 f94f 	bl	8002e64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bc6:	200f      	movs	r0, #15
 8002bc8:	f000 f808 	bl	8002bdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bcc:	f7ff fc96 	bl	80024fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bd0:	2300      	movs	r3, #0
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023c00 	.word	0x40023c00

08002bdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002be4:	4b12      	ldr	r3, [pc, #72]	; (8002c30 <HAL_InitTick+0x54>)
 8002be6:	681a      	ldr	r2, [r3, #0]
 8002be8:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <HAL_InitTick+0x58>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	4619      	mov	r1, r3
 8002bee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f000 f967 	bl	8002ece <HAL_SYSTICK_Config>
 8002c00:	4603      	mov	r3, r0
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d001      	beq.n	8002c0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e00e      	b.n	8002c28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2b0f      	cmp	r3, #15
 8002c0e:	d80a      	bhi.n	8002c26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c10:	2200      	movs	r2, #0
 8002c12:	6879      	ldr	r1, [r7, #4]
 8002c14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002c18:	f000 f92f 	bl	8002e7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c1c:	4a06      	ldr	r2, [pc, #24]	; (8002c38 <HAL_InitTick+0x5c>)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
 8002c24:	e000      	b.n	8002c28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3708      	adds	r7, #8
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000000 	.word	0x20000000
 8002c34:	20000008 	.word	0x20000008
 8002c38:	20000004 	.word	0x20000004

08002c3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c40:	4b06      	ldr	r3, [pc, #24]	; (8002c5c <HAL_IncTick+0x20>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	461a      	mov	r2, r3
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_IncTick+0x24>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	4a04      	ldr	r2, [pc, #16]	; (8002c60 <HAL_IncTick+0x24>)
 8002c4e:	6013      	str	r3, [r2, #0]
}
 8002c50:	bf00      	nop
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
 8002c5a:	bf00      	nop
 8002c5c:	20000008 	.word	0x20000008
 8002c60:	20000648 	.word	0x20000648

08002c64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c64:	b480      	push	{r7}
 8002c66:	af00      	add	r7, sp, #0
  return uwTick;
 8002c68:	4b03      	ldr	r3, [pc, #12]	; (8002c78 <HAL_GetTick+0x14>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	20000648 	.word	0x20000648

08002c7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b084      	sub	sp, #16
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c84:	f7ff ffee 	bl	8002c64 <HAL_GetTick>
 8002c88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c94:	d005      	beq.n	8002ca2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c96:	4b0a      	ldr	r3, [pc, #40]	; (8002cc0 <HAL_Delay+0x44>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	4413      	add	r3, r2
 8002ca0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ca2:	bf00      	nop
 8002ca4:	f7ff ffde 	bl	8002c64 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	68fa      	ldr	r2, [r7, #12]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d8f7      	bhi.n	8002ca4 <HAL_Delay+0x28>
  {
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	20000008 	.word	0x20000008

08002cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cf6:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	60d3      	str	r3, [r2, #12]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <__NVIC_GetPriorityGrouping+0x18>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	f003 0307 	and.w	r3, r3, #7
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	db0b      	blt.n	8002d52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	4907      	ldr	r1, [pc, #28]	; (8002d60 <__NVIC_EnableIRQ+0x38>)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2001      	movs	r0, #1
 8002d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	e000e100 	.word	0xe000e100

08002d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	6039      	str	r1, [r7, #0]
 8002d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	db0a      	blt.n	8002d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	490c      	ldr	r1, [pc, #48]	; (8002db0 <__NVIC_SetPriority+0x4c>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	0112      	lsls	r2, r2, #4
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	440b      	add	r3, r1
 8002d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d8c:	e00a      	b.n	8002da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	4908      	ldr	r1, [pc, #32]	; (8002db4 <__NVIC_SetPriority+0x50>)
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	3b04      	subs	r3, #4
 8002d9c:	0112      	lsls	r2, r2, #4
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	440b      	add	r3, r1
 8002da2:	761a      	strb	r2, [r3, #24]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000e100 	.word	0xe000e100
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	; 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f1c3 0307 	rsb	r3, r3, #7
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	bf28      	it	cs
 8002dd6:	2304      	movcs	r3, #4
 8002dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d902      	bls.n	8002de8 <NVIC_EncodePriority+0x30>
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3b03      	subs	r3, #3
 8002de6:	e000      	b.n	8002dea <NVIC_EncodePriority+0x32>
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43da      	mvns	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	43d9      	mvns	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	4313      	orrs	r3, r2
         );
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3724      	adds	r7, #36	; 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3b01      	subs	r3, #1
 8002e2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e30:	d301      	bcc.n	8002e36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e32:	2301      	movs	r3, #1
 8002e34:	e00f      	b.n	8002e56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e36:	4a0a      	ldr	r2, [pc, #40]	; (8002e60 <SysTick_Config+0x40>)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	3b01      	subs	r3, #1
 8002e3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e3e:	210f      	movs	r1, #15
 8002e40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e44:	f7ff ff8e 	bl	8002d64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e48:	4b05      	ldr	r3, [pc, #20]	; (8002e60 <SysTick_Config+0x40>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e4e:	4b04      	ldr	r3, [pc, #16]	; (8002e60 <SysTick_Config+0x40>)
 8002e50:	2207      	movs	r2, #7
 8002e52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	e000e010 	.word	0xe000e010

08002e64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f7ff ff29 	bl	8002cc4 <__NVIC_SetPriorityGrouping>
}
 8002e72:	bf00      	nop
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b086      	sub	sp, #24
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	4603      	mov	r3, r0
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
 8002e86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e8c:	f7ff ff3e 	bl	8002d0c <__NVIC_GetPriorityGrouping>
 8002e90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	6978      	ldr	r0, [r7, #20]
 8002e98:	f7ff ff8e 	bl	8002db8 <NVIC_EncodePriority>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea2:	4611      	mov	r1, r2
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff5d 	bl	8002d64 <__NVIC_SetPriority>
}
 8002eaa:	bf00      	nop
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	4603      	mov	r3, r0
 8002eba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff31 	bl	8002d28 <__NVIC_EnableIRQ>
}
 8002ec6:	bf00      	nop
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f7ff ffa2 	bl	8002e20 <SysTick_Config>
 8002edc:	4603      	mov	r3, r0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ef4:	f7ff feb6 	bl	8002c64 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d101      	bne.n	8002f04 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e099      	b.n	8003038 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2202      	movs	r2, #2
 8002f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f24:	e00f      	b.n	8002f46 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f26:	f7ff fe9d 	bl	8002c64 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b05      	cmp	r3, #5
 8002f32:	d908      	bls.n	8002f46 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2220      	movs	r2, #32
 8002f38:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2203      	movs	r2, #3
 8002f3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e078      	b.n	8003038 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0301 	and.w	r3, r3, #1
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1e8      	bne.n	8002f26 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f5c:	697a      	ldr	r2, [r7, #20]
 8002f5e:	4b38      	ldr	r3, [pc, #224]	; (8003040 <HAL_DMA_Init+0x158>)
 8002f60:	4013      	ands	r3, r2
 8002f62:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f72:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f8a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f92:	697a      	ldr	r2, [r7, #20]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	2b04      	cmp	r3, #4
 8002f9e:	d107      	bne.n	8002fb0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	697a      	ldr	r2, [r7, #20]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	f023 0307 	bic.w	r3, r3, #7
 8002fc6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	697a      	ldr	r2, [r7, #20]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	2b04      	cmp	r3, #4
 8002fd8:	d117      	bne.n	800300a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fde:	697a      	ldr	r2, [r7, #20]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d00e      	beq.n	800300a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 fb0d 	bl	800360c <DMA_CheckFifoParam>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d008      	beq.n	800300a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2240      	movs	r2, #64	; 0x40
 8002ffc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003006:	2301      	movs	r3, #1
 8003008:	e016      	b.n	8003038 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 fac4 	bl	80035a0 <DMA_CalcBaseAndBitshift>
 8003018:	4603      	mov	r3, r0
 800301a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003020:	223f      	movs	r2, #63	; 0x3f
 8003022:	409a      	lsls	r2, r3
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2201      	movs	r2, #1
 8003032:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	3718      	adds	r7, #24
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	f010803f 	.word	0xf010803f

08003044 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
 8003050:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003052:	2300      	movs	r3, #0
 8003054:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800305a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_DMA_Start_IT+0x26>
 8003066:	2302      	movs	r3, #2
 8003068:	e040      	b.n	80030ec <HAL_DMA_Start_IT+0xa8>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2201      	movs	r2, #1
 800306e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b01      	cmp	r3, #1
 800307c:	d12f      	bne.n	80030de <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	2202      	movs	r2, #2
 8003082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2200      	movs	r2, #0
 800308a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	68b9      	ldr	r1, [r7, #8]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 fa56 	bl	8003544 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800309c:	223f      	movs	r2, #63	; 0x3f
 800309e:	409a      	lsls	r2, r3
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0216 	orr.w	r2, r2, #22
 80030b2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d007      	beq.n	80030cc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0208 	orr.w	r2, r2, #8
 80030ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]
 80030dc:	e005      	b.n	80030ea <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030e6:	2302      	movs	r3, #2
 80030e8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3718      	adds	r7, #24
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003100:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003102:	f7ff fdaf 	bl	8002c64 <HAL_GetTick>
 8003106:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800310e:	b2db      	uxtb	r3, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d008      	beq.n	8003126 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2280      	movs	r2, #128	; 0x80
 8003118:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e052      	b.n	80031cc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 0216 	bic.w	r2, r2, #22
 8003134:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003144:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	2b00      	cmp	r3, #0
 800314c:	d103      	bne.n	8003156 <HAL_DMA_Abort+0x62>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003152:	2b00      	cmp	r3, #0
 8003154:	d007      	beq.n	8003166 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0208 	bic.w	r2, r2, #8
 8003164:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0201 	bic.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003176:	e013      	b.n	80031a0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003178:	f7ff fd74 	bl	8002c64 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b05      	cmp	r3, #5
 8003184:	d90c      	bls.n	80031a0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2220      	movs	r2, #32
 800318a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2203      	movs	r2, #3
 8003190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2200      	movs	r2, #0
 8003198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e015      	b.n	80031cc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1e4      	bne.n	8003178 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b2:	223f      	movs	r2, #63	; 0x3f
 80031b4:	409a      	lsls	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80031ca:	2300      	movs	r3, #0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b083      	sub	sp, #12
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d004      	beq.n	80031f2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2280      	movs	r2, #128	; 0x80
 80031ec:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e00c      	b.n	800320c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2205      	movs	r2, #5
 80031f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0201 	bic.w	r2, r2, #1
 8003208:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800320a:	2300      	movs	r3, #0
}
 800320c:	4618      	mov	r0, r3
 800320e:	370c      	adds	r7, #12
 8003210:	46bd      	mov	sp, r7
 8003212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003216:	4770      	bx	lr

08003218 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b086      	sub	sp, #24
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003220:	2300      	movs	r3, #0
 8003222:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003224:	4b8e      	ldr	r3, [pc, #568]	; (8003460 <HAL_DMA_IRQHandler+0x248>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a8e      	ldr	r2, [pc, #568]	; (8003464 <HAL_DMA_IRQHandler+0x24c>)
 800322a:	fba2 2303 	umull	r2, r3, r2, r3
 800322e:	0a9b      	lsrs	r3, r3, #10
 8003230:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003236:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003242:	2208      	movs	r2, #8
 8003244:	409a      	lsls	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	4013      	ands	r3, r2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d01a      	beq.n	8003284 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d013      	beq.n	8003284 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0204 	bic.w	r2, r2, #4
 800326a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003270:	2208      	movs	r2, #8
 8003272:	409a      	lsls	r2, r3
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327c:	f043 0201 	orr.w	r2, r3, #1
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003288:	2201      	movs	r2, #1
 800328a:	409a      	lsls	r2, r3
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	4013      	ands	r3, r2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d012      	beq.n	80032ba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00b      	beq.n	80032ba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032a6:	2201      	movs	r2, #1
 80032a8:	409a      	lsls	r2, r3
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b2:	f043 0202 	orr.w	r2, r3, #2
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032be:	2204      	movs	r2, #4
 80032c0:	409a      	lsls	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	4013      	ands	r3, r2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d012      	beq.n	80032f0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0302 	and.w	r3, r3, #2
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d00b      	beq.n	80032f0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032dc:	2204      	movs	r2, #4
 80032de:	409a      	lsls	r2, r3
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032e8:	f043 0204 	orr.w	r2, r3, #4
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032f4:	2210      	movs	r2, #16
 80032f6:	409a      	lsls	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4013      	ands	r3, r2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d043      	beq.n	8003388 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0308 	and.w	r3, r3, #8
 800330a:	2b00      	cmp	r3, #0
 800330c:	d03c      	beq.n	8003388 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003312:	2210      	movs	r2, #16
 8003314:	409a      	lsls	r2, r3
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d018      	beq.n	800335a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d108      	bne.n	8003348 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800333a:	2b00      	cmp	r3, #0
 800333c:	d024      	beq.n	8003388 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	4798      	blx	r3
 8003346:	e01f      	b.n	8003388 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800334c:	2b00      	cmp	r3, #0
 800334e:	d01b      	beq.n	8003388 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003354:	6878      	ldr	r0, [r7, #4]
 8003356:	4798      	blx	r3
 8003358:	e016      	b.n	8003388 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003364:	2b00      	cmp	r3, #0
 8003366:	d107      	bne.n	8003378 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f022 0208 	bic.w	r2, r2, #8
 8003376:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337c:	2b00      	cmp	r3, #0
 800337e:	d003      	beq.n	8003388 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800338c:	2220      	movs	r2, #32
 800338e:	409a      	lsls	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	4013      	ands	r3, r2
 8003394:	2b00      	cmp	r3, #0
 8003396:	f000 808f 	beq.w	80034b8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f003 0310 	and.w	r3, r3, #16
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 8087 	beq.w	80034b8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ae:	2220      	movs	r2, #32
 80033b0:	409a      	lsls	r2, r3
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b05      	cmp	r3, #5
 80033c0:	d136      	bne.n	8003430 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0216 	bic.w	r2, r2, #22
 80033d0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	695a      	ldr	r2, [r3, #20]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033e0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d103      	bne.n	80033f2 <HAL_DMA_IRQHandler+0x1da>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d007      	beq.n	8003402 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f022 0208 	bic.w	r2, r2, #8
 8003400:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003406:	223f      	movs	r2, #63	; 0x3f
 8003408:	409a      	lsls	r2, r3
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003422:	2b00      	cmp	r3, #0
 8003424:	d07e      	beq.n	8003524 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	4798      	blx	r3
        }
        return;
 800342e:	e079      	b.n	8003524 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d01d      	beq.n	800347a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d10d      	bne.n	8003468 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003450:	2b00      	cmp	r3, #0
 8003452:	d031      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4798      	blx	r3
 800345c:	e02c      	b.n	80034b8 <HAL_DMA_IRQHandler+0x2a0>
 800345e:	bf00      	nop
 8003460:	20000000 	.word	0x20000000
 8003464:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800346c:	2b00      	cmp	r3, #0
 800346e:	d023      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	4798      	blx	r3
 8003478:	e01e      	b.n	80034b8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10f      	bne.n	80034a8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0210 	bic.w	r2, r2, #16
 8003496:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d003      	beq.n	80034b8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d032      	beq.n	8003526 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d022      	beq.n	8003512 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	2205      	movs	r2, #5
 80034d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f022 0201 	bic.w	r2, r2, #1
 80034e2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	3301      	adds	r3, #1
 80034e8:	60bb      	str	r3, [r7, #8]
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d307      	bcc.n	8003500 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d1f2      	bne.n	80034e4 <HAL_DMA_IRQHandler+0x2cc>
 80034fe:	e000      	b.n	8003502 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003500:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	4798      	blx	r3
 8003522:	e000      	b.n	8003526 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003524:	bf00      	nop
    }
  }
}
 8003526:	3718      	adds	r7, #24
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}

0800352c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003538:	4618      	mov	r0, r3
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
 8003550:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003560:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	2b40      	cmp	r3, #64	; 0x40
 8003570:	d108      	bne.n	8003584 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003582:	e007      	b.n	8003594 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68ba      	ldr	r2, [r7, #8]
 800358a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	687a      	ldr	r2, [r7, #4]
 8003592:	60da      	str	r2, [r3, #12]
}
 8003594:	bf00      	nop
 8003596:	3714      	adds	r7, #20
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b085      	sub	sp, #20
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	3b10      	subs	r3, #16
 80035b0:	4a14      	ldr	r2, [pc, #80]	; (8003604 <DMA_CalcBaseAndBitshift+0x64>)
 80035b2:	fba2 2303 	umull	r2, r3, r2, r3
 80035b6:	091b      	lsrs	r3, r3, #4
 80035b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80035ba:	4a13      	ldr	r2, [pc, #76]	; (8003608 <DMA_CalcBaseAndBitshift+0x68>)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	4413      	add	r3, r2
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	461a      	mov	r2, r3
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2b03      	cmp	r3, #3
 80035cc:	d909      	bls.n	80035e2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035d6:	f023 0303 	bic.w	r3, r3, #3
 80035da:	1d1a      	adds	r2, r3, #4
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	659a      	str	r2, [r3, #88]	; 0x58
 80035e0:	e007      	b.n	80035f2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80035ea:	f023 0303 	bic.w	r3, r3, #3
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	aaaaaaab 	.word	0xaaaaaaab
 8003608:	080124b4 	.word	0x080124b4

0800360c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003614:	2300      	movs	r3, #0
 8003616:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800361c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d11f      	bne.n	8003666 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b03      	cmp	r3, #3
 800362a:	d856      	bhi.n	80036da <DMA_CheckFifoParam+0xce>
 800362c:	a201      	add	r2, pc, #4	; (adr r2, 8003634 <DMA_CheckFifoParam+0x28>)
 800362e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003632:	bf00      	nop
 8003634:	08003645 	.word	0x08003645
 8003638:	08003657 	.word	0x08003657
 800363c:	08003645 	.word	0x08003645
 8003640:	080036db 	.word	0x080036db
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003648:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d046      	beq.n	80036de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003654:	e043      	b.n	80036de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800365a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800365e:	d140      	bne.n	80036e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003664:	e03d      	b.n	80036e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800366e:	d121      	bne.n	80036b4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2b03      	cmp	r3, #3
 8003674:	d837      	bhi.n	80036e6 <DMA_CheckFifoParam+0xda>
 8003676:	a201      	add	r2, pc, #4	; (adr r2, 800367c <DMA_CheckFifoParam+0x70>)
 8003678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800367c:	0800368d 	.word	0x0800368d
 8003680:	08003693 	.word	0x08003693
 8003684:	0800368d 	.word	0x0800368d
 8003688:	080036a5 	.word	0x080036a5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
      break;
 8003690:	e030      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003696:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d025      	beq.n	80036ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036a2:	e022      	b.n	80036ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80036ac:	d11f      	bne.n	80036ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80036b2:	e01c      	b.n	80036ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d903      	bls.n	80036c2 <DMA_CheckFifoParam+0xb6>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b03      	cmp	r3, #3
 80036be:	d003      	beq.n	80036c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80036c0:	e018      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	73fb      	strb	r3, [r7, #15]
      break;
 80036c6:	e015      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00e      	beq.n	80036f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80036d4:	2301      	movs	r3, #1
 80036d6:	73fb      	strb	r3, [r7, #15]
      break;
 80036d8:	e00b      	b.n	80036f2 <DMA_CheckFifoParam+0xe6>
      break;
 80036da:	bf00      	nop
 80036dc:	e00a      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      break;
 80036de:	bf00      	nop
 80036e0:	e008      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      break;
 80036e2:	bf00      	nop
 80036e4:	e006      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      break;
 80036e6:	bf00      	nop
 80036e8:	e004      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      break;
 80036ea:	bf00      	nop
 80036ec:	e002      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80036ee:	bf00      	nop
 80036f0:	e000      	b.n	80036f4 <DMA_CheckFifoParam+0xe8>
      break;
 80036f2:	bf00      	nop
    }
  } 
  
  return status; 
 80036f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop

08003704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003704:	b480      	push	{r7}
 8003706:	b089      	sub	sp, #36	; 0x24
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003712:	2300      	movs	r3, #0
 8003714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003716:	2300      	movs	r3, #0
 8003718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800371a:	2300      	movs	r3, #0
 800371c:	61fb      	str	r3, [r7, #28]
 800371e:	e16b      	b.n	80039f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003720:	2201      	movs	r2, #1
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	fa02 f303 	lsl.w	r3, r2, r3
 8003728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	697a      	ldr	r2, [r7, #20]
 8003730:	4013      	ands	r3, r2
 8003732:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003734:	693a      	ldr	r2, [r7, #16]
 8003736:	697b      	ldr	r3, [r7, #20]
 8003738:	429a      	cmp	r2, r3
 800373a:	f040 815a 	bne.w	80039f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f003 0303 	and.w	r3, r3, #3
 8003746:	2b01      	cmp	r3, #1
 8003748:	d005      	beq.n	8003756 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003752:	2b02      	cmp	r3, #2
 8003754:	d130      	bne.n	80037b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	005b      	lsls	r3, r3, #1
 8003760:	2203      	movs	r2, #3
 8003762:	fa02 f303 	lsl.w	r3, r2, r3
 8003766:	43db      	mvns	r3, r3
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	4013      	ands	r3, r2
 800376c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	fa02 f303 	lsl.w	r3, r2, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4313      	orrs	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800378c:	2201      	movs	r2, #1
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	fa02 f303 	lsl.w	r3, r2, r3
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	091b      	lsrs	r3, r3, #4
 80037a2:	f003 0201 	and.w	r2, r3, #1
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	fa02 f303 	lsl.w	r3, r2, r3
 80037ac:	69ba      	ldr	r2, [r7, #24]
 80037ae:	4313      	orrs	r3, r2
 80037b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	69ba      	ldr	r2, [r7, #24]
 80037b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f003 0303 	and.w	r3, r3, #3
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d017      	beq.n	80037f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	2203      	movs	r2, #3
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	69ba      	ldr	r2, [r7, #24]
 80037d8:	4013      	ands	r3, r2
 80037da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	689a      	ldr	r2, [r3, #8]
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	fa02 f303 	lsl.w	r3, r2, r3
 80037e8:	69ba      	ldr	r2, [r7, #24]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	69ba      	ldr	r2, [r7, #24]
 80037f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f003 0303 	and.w	r3, r3, #3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d123      	bne.n	8003848 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	08da      	lsrs	r2, r3, #3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3208      	adds	r2, #8
 8003808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800380c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800380e:	69fb      	ldr	r3, [r7, #28]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	009b      	lsls	r3, r3, #2
 8003816:	220f      	movs	r2, #15
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4013      	ands	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	f003 0307 	and.w	r3, r3, #7
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	fa02 f303 	lsl.w	r3, r2, r3
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	4313      	orrs	r3, r2
 8003838:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800383a:	69fb      	ldr	r3, [r7, #28]
 800383c:	08da      	lsrs	r2, r3, #3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3208      	adds	r2, #8
 8003842:	69b9      	ldr	r1, [r7, #24]
 8003844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	005b      	lsls	r3, r3, #1
 8003852:	2203      	movs	r2, #3
 8003854:	fa02 f303 	lsl.w	r3, r2, r3
 8003858:	43db      	mvns	r3, r3
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4013      	ands	r3, r2
 800385e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	f003 0203 	and.w	r2, r3, #3
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4313      	orrs	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003884:	2b00      	cmp	r3, #0
 8003886:	f000 80b4 	beq.w	80039f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800388a:	2300      	movs	r3, #0
 800388c:	60fb      	str	r3, [r7, #12]
 800388e:	4b60      	ldr	r3, [pc, #384]	; (8003a10 <HAL_GPIO_Init+0x30c>)
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	4a5f      	ldr	r2, [pc, #380]	; (8003a10 <HAL_GPIO_Init+0x30c>)
 8003894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003898:	6453      	str	r3, [r2, #68]	; 0x44
 800389a:	4b5d      	ldr	r3, [pc, #372]	; (8003a10 <HAL_GPIO_Init+0x30c>)
 800389c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800389e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038a6:	4a5b      	ldr	r2, [pc, #364]	; (8003a14 <HAL_GPIO_Init+0x310>)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	089b      	lsrs	r3, r3, #2
 80038ac:	3302      	adds	r3, #2
 80038ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 0303 	and.w	r3, r3, #3
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	220f      	movs	r2, #15
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	69ba      	ldr	r2, [r7, #24]
 80038c6:	4013      	ands	r3, r2
 80038c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a52      	ldr	r2, [pc, #328]	; (8003a18 <HAL_GPIO_Init+0x314>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d02b      	beq.n	800392a <HAL_GPIO_Init+0x226>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a51      	ldr	r2, [pc, #324]	; (8003a1c <HAL_GPIO_Init+0x318>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d025      	beq.n	8003926 <HAL_GPIO_Init+0x222>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a50      	ldr	r2, [pc, #320]	; (8003a20 <HAL_GPIO_Init+0x31c>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d01f      	beq.n	8003922 <HAL_GPIO_Init+0x21e>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a4f      	ldr	r2, [pc, #316]	; (8003a24 <HAL_GPIO_Init+0x320>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d019      	beq.n	800391e <HAL_GPIO_Init+0x21a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a4e      	ldr	r2, [pc, #312]	; (8003a28 <HAL_GPIO_Init+0x324>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <HAL_GPIO_Init+0x216>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a4d      	ldr	r2, [pc, #308]	; (8003a2c <HAL_GPIO_Init+0x328>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00d      	beq.n	8003916 <HAL_GPIO_Init+0x212>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a4c      	ldr	r2, [pc, #304]	; (8003a30 <HAL_GPIO_Init+0x32c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d007      	beq.n	8003912 <HAL_GPIO_Init+0x20e>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a4b      	ldr	r2, [pc, #300]	; (8003a34 <HAL_GPIO_Init+0x330>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d101      	bne.n	800390e <HAL_GPIO_Init+0x20a>
 800390a:	2307      	movs	r3, #7
 800390c:	e00e      	b.n	800392c <HAL_GPIO_Init+0x228>
 800390e:	2308      	movs	r3, #8
 8003910:	e00c      	b.n	800392c <HAL_GPIO_Init+0x228>
 8003912:	2306      	movs	r3, #6
 8003914:	e00a      	b.n	800392c <HAL_GPIO_Init+0x228>
 8003916:	2305      	movs	r3, #5
 8003918:	e008      	b.n	800392c <HAL_GPIO_Init+0x228>
 800391a:	2304      	movs	r3, #4
 800391c:	e006      	b.n	800392c <HAL_GPIO_Init+0x228>
 800391e:	2303      	movs	r3, #3
 8003920:	e004      	b.n	800392c <HAL_GPIO_Init+0x228>
 8003922:	2302      	movs	r3, #2
 8003924:	e002      	b.n	800392c <HAL_GPIO_Init+0x228>
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <HAL_GPIO_Init+0x228>
 800392a:	2300      	movs	r3, #0
 800392c:	69fa      	ldr	r2, [r7, #28]
 800392e:	f002 0203 	and.w	r2, r2, #3
 8003932:	0092      	lsls	r2, r2, #2
 8003934:	4093      	lsls	r3, r2
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	4313      	orrs	r3, r2
 800393a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800393c:	4935      	ldr	r1, [pc, #212]	; (8003a14 <HAL_GPIO_Init+0x310>)
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	089b      	lsrs	r3, r3, #2
 8003942:	3302      	adds	r3, #2
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800394a:	4b3b      	ldr	r3, [pc, #236]	; (8003a38 <HAL_GPIO_Init+0x334>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	43db      	mvns	r3, r3
 8003954:	69ba      	ldr	r2, [r7, #24]
 8003956:	4013      	ands	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d003      	beq.n	800396e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	4313      	orrs	r3, r2
 800396c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800396e:	4a32      	ldr	r2, [pc, #200]	; (8003a38 <HAL_GPIO_Init+0x334>)
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003974:	4b30      	ldr	r3, [pc, #192]	; (8003a38 <HAL_GPIO_Init+0x334>)
 8003976:	68db      	ldr	r3, [r3, #12]
 8003978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	43db      	mvns	r3, r3
 800397e:	69ba      	ldr	r2, [r7, #24]
 8003980:	4013      	ands	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800398c:	2b00      	cmp	r3, #0
 800398e:	d003      	beq.n	8003998 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	4313      	orrs	r3, r2
 8003996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003998:	4a27      	ldr	r2, [pc, #156]	; (8003a38 <HAL_GPIO_Init+0x334>)
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800399e:	4b26      	ldr	r3, [pc, #152]	; (8003a38 <HAL_GPIO_Init+0x334>)
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039c2:	4a1d      	ldr	r2, [pc, #116]	; (8003a38 <HAL_GPIO_Init+0x334>)
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039c8:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <HAL_GPIO_Init+0x334>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039ec:	4a12      	ldr	r2, [pc, #72]	; (8003a38 <HAL_GPIO_Init+0x334>)
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3301      	adds	r3, #1
 80039f6:	61fb      	str	r3, [r7, #28]
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	2b0f      	cmp	r3, #15
 80039fc:	f67f ae90 	bls.w	8003720 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a00:	bf00      	nop
 8003a02:	bf00      	nop
 8003a04:	3724      	adds	r7, #36	; 0x24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40013800 	.word	0x40013800
 8003a18:	40020000 	.word	0x40020000
 8003a1c:	40020400 	.word	0x40020400
 8003a20:	40020800 	.word	0x40020800
 8003a24:	40020c00 	.word	0x40020c00
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	40021400 	.word	0x40021400
 8003a30:	40021800 	.word	0x40021800
 8003a34:	40021c00 	.word	0x40021c00
 8003a38:	40013c00 	.word	0x40013c00

08003a3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a3c:	b480      	push	{r7}
 8003a3e:	b085      	sub	sp, #20
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	460b      	mov	r3, r1
 8003a46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	691a      	ldr	r2, [r3, #16]
 8003a4c:	887b      	ldrh	r3, [r7, #2]
 8003a4e:	4013      	ands	r3, r2
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003a54:	2301      	movs	r3, #1
 8003a56:	73fb      	strb	r3, [r7, #15]
 8003a58:	e001      	b.n	8003a5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3714      	adds	r7, #20
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr

08003a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	460b      	mov	r3, r1
 8003a76:	807b      	strh	r3, [r7, #2]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003a7c:	787b      	ldrb	r3, [r7, #1]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d003      	beq.n	8003a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003a82:	887a      	ldrh	r2, [r7, #2]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003a88:	e003      	b.n	8003a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003a8a:	887b      	ldrh	r3, [r7, #2]
 8003a8c:	041a      	lsls	r2, r3, #16
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	619a      	str	r2, [r3, #24]
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
	...

08003aa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d101      	bne.n	8003ab2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e12b      	b.n	8003d0a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab8:	b2db      	uxtb	r3, r3
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d106      	bne.n	8003acc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f7fe fd40 	bl	800254c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2224      	movs	r2, #36	; 0x24
 8003ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0201 	bic.w	r2, r2, #1
 8003ae2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003af2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b02:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003b04:	f002 fe0e 	bl	8006724 <HAL_RCC_GetPCLK1Freq>
 8003b08:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	4a81      	ldr	r2, [pc, #516]	; (8003d14 <HAL_I2C_Init+0x274>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d807      	bhi.n	8003b24 <HAL_I2C_Init+0x84>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	4a80      	ldr	r2, [pc, #512]	; (8003d18 <HAL_I2C_Init+0x278>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	bf94      	ite	ls
 8003b1c:	2301      	movls	r3, #1
 8003b1e:	2300      	movhi	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	e006      	b.n	8003b32 <HAL_I2C_Init+0x92>
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4a7d      	ldr	r2, [pc, #500]	; (8003d1c <HAL_I2C_Init+0x27c>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	bf94      	ite	ls
 8003b2c:	2301      	movls	r3, #1
 8003b2e:	2300      	movhi	r3, #0
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d001      	beq.n	8003b3a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e0e7      	b.n	8003d0a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	4a78      	ldr	r2, [pc, #480]	; (8003d20 <HAL_I2C_Init+0x280>)
 8003b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b42:	0c9b      	lsrs	r3, r3, #18
 8003b44:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68ba      	ldr	r2, [r7, #8]
 8003b56:	430a      	orrs	r2, r1
 8003b58:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	6a1b      	ldr	r3, [r3, #32]
 8003b60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	4a6a      	ldr	r2, [pc, #424]	; (8003d14 <HAL_I2C_Init+0x274>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d802      	bhi.n	8003b74 <HAL_I2C_Init+0xd4>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	3301      	adds	r3, #1
 8003b72:	e009      	b.n	8003b88 <HAL_I2C_Init+0xe8>
 8003b74:	68bb      	ldr	r3, [r7, #8]
 8003b76:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003b7a:	fb02 f303 	mul.w	r3, r2, r3
 8003b7e:	4a69      	ldr	r2, [pc, #420]	; (8003d24 <HAL_I2C_Init+0x284>)
 8003b80:	fba2 2303 	umull	r2, r3, r2, r3
 8003b84:	099b      	lsrs	r3, r3, #6
 8003b86:	3301      	adds	r3, #1
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	6812      	ldr	r2, [r2, #0]
 8003b8c:	430b      	orrs	r3, r1
 8003b8e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	69db      	ldr	r3, [r3, #28]
 8003b96:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003b9a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	495c      	ldr	r1, [pc, #368]	; (8003d14 <HAL_I2C_Init+0x274>)
 8003ba4:	428b      	cmp	r3, r1
 8003ba6:	d819      	bhi.n	8003bdc <HAL_I2C_Init+0x13c>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	1e59      	subs	r1, r3, #1
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	005b      	lsls	r3, r3, #1
 8003bb2:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bb6:	1c59      	adds	r1, r3, #1
 8003bb8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003bbc:	400b      	ands	r3, r1
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d00a      	beq.n	8003bd8 <HAL_I2C_Init+0x138>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1e59      	subs	r1, r3, #1
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	005b      	lsls	r3, r3, #1
 8003bcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8003bd0:	3301      	adds	r3, #1
 8003bd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bd6:	e051      	b.n	8003c7c <HAL_I2C_Init+0x1dc>
 8003bd8:	2304      	movs	r3, #4
 8003bda:	e04f      	b.n	8003c7c <HAL_I2C_Init+0x1dc>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d111      	bne.n	8003c08 <HAL_I2C_Init+0x168>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	1e58      	subs	r0, r3, #1
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6859      	ldr	r1, [r3, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	440b      	add	r3, r1
 8003bf2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003bf6:	3301      	adds	r3, #1
 8003bf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	e012      	b.n	8003c2e <HAL_I2C_Init+0x18e>
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	1e58      	subs	r0, r3, #1
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6859      	ldr	r1, [r3, #4]
 8003c10:	460b      	mov	r3, r1
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	0099      	lsls	r1, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c1e:	3301      	adds	r3, #1
 8003c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	bf0c      	ite	eq
 8003c28:	2301      	moveq	r3, #1
 8003c2a:	2300      	movne	r3, #0
 8003c2c:	b2db      	uxtb	r3, r3
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d001      	beq.n	8003c36 <HAL_I2C_Init+0x196>
 8003c32:	2301      	movs	r3, #1
 8003c34:	e022      	b.n	8003c7c <HAL_I2C_Init+0x1dc>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10e      	bne.n	8003c5c <HAL_I2C_Init+0x1bc>
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	1e58      	subs	r0, r3, #1
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6859      	ldr	r1, [r3, #4]
 8003c46:	460b      	mov	r3, r1
 8003c48:	005b      	lsls	r3, r3, #1
 8003c4a:	440b      	add	r3, r1
 8003c4c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c50:	3301      	adds	r3, #1
 8003c52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c5a:	e00f      	b.n	8003c7c <HAL_I2C_Init+0x1dc>
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	1e58      	subs	r0, r3, #1
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6859      	ldr	r1, [r3, #4]
 8003c64:	460b      	mov	r3, r1
 8003c66:	009b      	lsls	r3, r3, #2
 8003c68:	440b      	add	r3, r1
 8003c6a:	0099      	lsls	r1, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c72:	3301      	adds	r3, #1
 8003c74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c78:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	6809      	ldr	r1, [r1, #0]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	69da      	ldr	r2, [r3, #28]
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003caa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6911      	ldr	r1, [r2, #16]
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	68d2      	ldr	r2, [r2, #12]
 8003cb6:	4311      	orrs	r1, r2
 8003cb8:	687a      	ldr	r2, [r7, #4]
 8003cba:	6812      	ldr	r2, [r2, #0]
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	68db      	ldr	r3, [r3, #12]
 8003cc6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f042 0201 	orr.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2220      	movs	r2, #32
 8003cf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2200      	movs	r2, #0
 8003d04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3710      	adds	r7, #16
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	000186a0 	.word	0x000186a0
 8003d18:	001e847f 	.word	0x001e847f
 8003d1c:	003d08ff 	.word	0x003d08ff
 8003d20:	431bde83 	.word	0x431bde83
 8003d24:	10624dd3 	.word	0x10624dd3

08003d28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	607a      	str	r2, [r7, #4]
 8003d32:	461a      	mov	r2, r3
 8003d34:	460b      	mov	r3, r1
 8003d36:	817b      	strh	r3, [r7, #10]
 8003d38:	4613      	mov	r3, r2
 8003d3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003d3c:	f7fe ff92 	bl	8002c64 <HAL_GetTick>
 8003d40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b20      	cmp	r3, #32
 8003d4c:	f040 80e0 	bne.w	8003f10 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	2319      	movs	r3, #25
 8003d56:	2201      	movs	r2, #1
 8003d58:	4970      	ldr	r1, [pc, #448]	; (8003f1c <HAL_I2C_Master_Transmit+0x1f4>)
 8003d5a:	68f8      	ldr	r0, [r7, #12]
 8003d5c:	f000 fc58 	bl	8004610 <I2C_WaitOnFlagUntilTimeout>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d001      	beq.n	8003d6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003d66:	2302      	movs	r3, #2
 8003d68:	e0d3      	b.n	8003f12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d101      	bne.n	8003d78 <HAL_I2C_Master_Transmit+0x50>
 8003d74:	2302      	movs	r3, #2
 8003d76:	e0cc      	b.n	8003f12 <HAL_I2C_Master_Transmit+0x1ea>
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f003 0301 	and.w	r3, r3, #1
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d007      	beq.n	8003d9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0201 	orr.w	r2, r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2221      	movs	r2, #33	; 0x21
 8003db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2210      	movs	r2, #16
 8003dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	687a      	ldr	r2, [r7, #4]
 8003dc8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	893a      	ldrh	r2, [r7, #8]
 8003dce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	4a50      	ldr	r2, [pc, #320]	; (8003f20 <HAL_I2C_Master_Transmit+0x1f8>)
 8003dde:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003de0:	8979      	ldrh	r1, [r7, #10]
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	6a3a      	ldr	r2, [r7, #32]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 fac2 	bl	8004370 <I2C_MasterRequestWrite>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e08d      	b.n	8003f12 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df6:	2300      	movs	r3, #0
 8003df8:	613b      	str	r3, [r7, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	613b      	str	r3, [r7, #16]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	613b      	str	r3, [r7, #16]
 8003e0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003e0c:	e066      	b.n	8003edc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	6a39      	ldr	r1, [r7, #32]
 8003e12:	68f8      	ldr	r0, [r7, #12]
 8003e14:	f000 fcd2 	bl	80047bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d00d      	beq.n	8003e3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	2b04      	cmp	r3, #4
 8003e24:	d107      	bne.n	8003e36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e06b      	b.n	8003f12 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	781a      	ldrb	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	1c5a      	adds	r2, r3, #1
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	3b01      	subs	r3, #1
 8003e58:	b29a      	uxth	r2, r3
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e62:	3b01      	subs	r3, #1
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695b      	ldr	r3, [r3, #20]
 8003e70:	f003 0304 	and.w	r3, r3, #4
 8003e74:	2b04      	cmp	r3, #4
 8003e76:	d11b      	bne.n	8003eb0 <HAL_I2C_Master_Transmit+0x188>
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d017      	beq.n	8003eb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	781a      	ldrb	r2, [r3, #0]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9a:	b29b      	uxth	r3, r3
 8003e9c:	3b01      	subs	r3, #1
 8003e9e:	b29a      	uxth	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	6a39      	ldr	r1, [r7, #32]
 8003eb4:	68f8      	ldr	r0, [r7, #12]
 8003eb6:	f000 fcc2 	bl	800483e <I2C_WaitOnBTFFlagUntilTimeout>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00d      	beq.n	8003edc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	2b04      	cmp	r3, #4
 8003ec6:	d107      	bne.n	8003ed8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ed6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e01a      	b.n	8003f12 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d194      	bne.n	8003e0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	e000      	b.n	8003f12 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003f10:	2302      	movs	r3, #2
  }
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	00100002 	.word	0x00100002
 8003f20:	ffff0000 	.word	0xffff0000

08003f24 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08c      	sub	sp, #48	; 0x30
 8003f28:	af02      	add	r7, sp, #8
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	607a      	str	r2, [r7, #4]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	460b      	mov	r3, r1
 8003f32:	817b      	strh	r3, [r7, #10]
 8003f34:	4613      	mov	r3, r2
 8003f36:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003f38:	f7fe fe94 	bl	8002c64 <HAL_GetTick>
 8003f3c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f44:	b2db      	uxtb	r3, r3
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	f040 820b 	bne.w	8004362 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4e:	9300      	str	r3, [sp, #0]
 8003f50:	2319      	movs	r3, #25
 8003f52:	2201      	movs	r2, #1
 8003f54:	497c      	ldr	r1, [pc, #496]	; (8004148 <HAL_I2C_Master_Receive+0x224>)
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 fb5a 	bl	8004610 <I2C_WaitOnFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003f62:	2302      	movs	r3, #2
 8003f64:	e1fe      	b.n	8004364 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_I2C_Master_Receive+0x50>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e1f7      	b.n	8004364 <HAL_I2C_Master_Receive+0x440>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f003 0301 	and.w	r3, r3, #1
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d007      	beq.n	8003f9a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f042 0201 	orr.w	r2, r2, #1
 8003f98:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681a      	ldr	r2, [r3, #0]
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fa8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2222      	movs	r2, #34	; 0x22
 8003fae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2210      	movs	r2, #16
 8003fb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	893a      	ldrh	r2, [r7, #8]
 8003fca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd0:	b29a      	uxth	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	4a5c      	ldr	r2, [pc, #368]	; (800414c <HAL_I2C_Master_Receive+0x228>)
 8003fda:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003fdc:	8979      	ldrh	r1, [r7, #10]
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fa46 	bl	8004474 <I2C_MasterRequestRead>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e1b8      	b.n	8004364 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d113      	bne.n	8004022 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	623b      	str	r3, [r7, #32]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	695b      	ldr	r3, [r3, #20]
 8004004:	623b      	str	r3, [r7, #32]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	623b      	str	r3, [r7, #32]
 800400e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	e18c      	b.n	800433c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004026:	2b01      	cmp	r3, #1
 8004028:	d11b      	bne.n	8004062 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	681a      	ldr	r2, [r3, #0]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004038:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	61fb      	str	r3, [r7, #28]
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	699b      	ldr	r3, [r3, #24]
 800404c:	61fb      	str	r3, [r7, #28]
 800404e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	e16c      	b.n	800433c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004066:	2b02      	cmp	r3, #2
 8004068:	d11b      	bne.n	80040a2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	681a      	ldr	r2, [r3, #0]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004078:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004088:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800408a:	2300      	movs	r3, #0
 800408c:	61bb      	str	r3, [r7, #24]
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	695b      	ldr	r3, [r3, #20]
 8004094:	61bb      	str	r3, [r7, #24]
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	61bb      	str	r3, [r7, #24]
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	e14c      	b.n	800433c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040b0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b2:	2300      	movs	r3, #0
 80040b4:	617b      	str	r3, [r7, #20]
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	695b      	ldr	r3, [r3, #20]
 80040bc:	617b      	str	r3, [r7, #20]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	699b      	ldr	r3, [r3, #24]
 80040c4:	617b      	str	r3, [r7, #20]
 80040c6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80040c8:	e138      	b.n	800433c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ce:	2b03      	cmp	r3, #3
 80040d0:	f200 80f1 	bhi.w	80042b6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d123      	bne.n	8004124 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80040dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f000 fbed 	bl	80048c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d001      	beq.n	80040f0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e139      	b.n	8004364 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691a      	ldr	r2, [r3, #16]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fa:	b2d2      	uxtb	r2, r2
 80040fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800410c:	3b01      	subs	r3, #1
 800410e:	b29a      	uxth	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004118:	b29b      	uxth	r3, r3
 800411a:	3b01      	subs	r3, #1
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004122:	e10b      	b.n	800433c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004128:	2b02      	cmp	r3, #2
 800412a:	d14e      	bne.n	80041ca <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800412c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	2200      	movs	r2, #0
 8004134:	4906      	ldr	r1, [pc, #24]	; (8004150 <HAL_I2C_Master_Receive+0x22c>)
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 fa6a 	bl	8004610 <I2C_WaitOnFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d008      	beq.n	8004154 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e10e      	b.n	8004364 <HAL_I2C_Master_Receive+0x440>
 8004146:	bf00      	nop
 8004148:	00100002 	.word	0x00100002
 800414c:	ffff0000 	.word	0xffff0000
 8004150:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681a      	ldr	r2, [r3, #0]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004162:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	691a      	ldr	r2, [r3, #16]
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416e:	b2d2      	uxtb	r2, r2
 8004170:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004180:	3b01      	subs	r3, #1
 8004182:	b29a      	uxth	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418c:	b29b      	uxth	r3, r3
 800418e:	3b01      	subs	r3, #1
 8004190:	b29a      	uxth	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	691a      	ldr	r2, [r3, #16]
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	b2d2      	uxtb	r2, r2
 80041a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a8:	1c5a      	adds	r2, r3, #1
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041be:	b29b      	uxth	r3, r3
 80041c0:	3b01      	subs	r3, #1
 80041c2:	b29a      	uxth	r2, r3
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80041c8:	e0b8      	b.n	800433c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	9300      	str	r3, [sp, #0]
 80041ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d0:	2200      	movs	r2, #0
 80041d2:	4966      	ldr	r1, [pc, #408]	; (800436c <HAL_I2C_Master_Receive+0x448>)
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fa1b 	bl	8004610 <I2C_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d001      	beq.n	80041e4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0bf      	b.n	8004364 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	691a      	ldr	r2, [r3, #16]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004210:	3b01      	subs	r3, #1
 8004212:	b29a      	uxth	r2, r3
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800421c:	b29b      	uxth	r3, r3
 800421e:	3b01      	subs	r3, #1
 8004220:	b29a      	uxth	r2, r3
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004228:	9300      	str	r3, [sp, #0]
 800422a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800422c:	2200      	movs	r2, #0
 800422e:	494f      	ldr	r1, [pc, #316]	; (800436c <HAL_I2C_Master_Receive+0x448>)
 8004230:	68f8      	ldr	r0, [r7, #12]
 8004232:	f000 f9ed 	bl	8004610 <I2C_WaitOnFlagUntilTimeout>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e091      	b.n	8004364 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800424e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	691a      	ldr	r2, [r3, #16]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425a:	b2d2      	uxtb	r2, r2
 800425c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	1c5a      	adds	r2, r3, #1
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004278:	b29b      	uxth	r3, r3
 800427a:	3b01      	subs	r3, #1
 800427c:	b29a      	uxth	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	691a      	ldr	r2, [r3, #16]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	3b01      	subs	r3, #1
 80042ae:	b29a      	uxth	r2, r3
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042b4:	e042      	b.n	800433c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 fb00 	bl	80048c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e04c      	b.n	8004364 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691a      	ldr	r2, [r3, #16]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29a      	uxth	r2, r3
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	3b01      	subs	r3, #1
 80042f6:	b29a      	uxth	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	695b      	ldr	r3, [r3, #20]
 8004302:	f003 0304 	and.w	r3, r3, #4
 8004306:	2b04      	cmp	r3, #4
 8004308:	d118      	bne.n	800433c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	691a      	ldr	r2, [r3, #16]
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004326:	3b01      	subs	r3, #1
 8004328:	b29a      	uxth	r2, r3
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004332:	b29b      	uxth	r3, r3
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004340:	2b00      	cmp	r3, #0
 8004342:	f47f aec2 	bne.w	80040ca <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2220      	movs	r2, #32
 800434a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800435e:	2300      	movs	r3, #0
 8004360:	e000      	b.n	8004364 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004362:	2302      	movs	r3, #2
  }
}
 8004364:	4618      	mov	r0, r3
 8004366:	3728      	adds	r7, #40	; 0x28
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	00010004 	.word	0x00010004

08004370 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	607a      	str	r2, [r7, #4]
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	460b      	mov	r3, r1
 800437e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004384:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004386:	697b      	ldr	r3, [r7, #20]
 8004388:	2b08      	cmp	r3, #8
 800438a:	d006      	beq.n	800439a <I2C_MasterRequestWrite+0x2a>
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	2b01      	cmp	r3, #1
 8004390:	d003      	beq.n	800439a <I2C_MasterRequestWrite+0x2a>
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004398:	d108      	bne.n	80043ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a8:	601a      	str	r2, [r3, #0]
 80043aa:	e00b      	b.n	80043c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	2b12      	cmp	r3, #18
 80043b2:	d107      	bne.n	80043c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 f91d 	bl	8004610 <I2C_WaitOnFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00d      	beq.n	80043f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043ea:	d103      	bne.n	80043f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e035      	b.n	8004464 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	691b      	ldr	r3, [r3, #16]
 80043fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004400:	d108      	bne.n	8004414 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004402:	897b      	ldrh	r3, [r7, #10]
 8004404:	b2db      	uxtb	r3, r3
 8004406:	461a      	mov	r2, r3
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004410:	611a      	str	r2, [r3, #16]
 8004412:	e01b      	b.n	800444c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004414:	897b      	ldrh	r3, [r7, #10]
 8004416:	11db      	asrs	r3, r3, #7
 8004418:	b2db      	uxtb	r3, r3
 800441a:	f003 0306 	and.w	r3, r3, #6
 800441e:	b2db      	uxtb	r3, r3
 8004420:	f063 030f 	orn	r3, r3, #15
 8004424:	b2da      	uxtb	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	490e      	ldr	r1, [pc, #56]	; (800446c <I2C_MasterRequestWrite+0xfc>)
 8004432:	68f8      	ldr	r0, [r7, #12]
 8004434:	f000 f943 	bl	80046be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004438:	4603      	mov	r3, r0
 800443a:	2b00      	cmp	r3, #0
 800443c:	d001      	beq.n	8004442 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e010      	b.n	8004464 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004442:	897b      	ldrh	r3, [r7, #10]
 8004444:	b2da      	uxtb	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	687a      	ldr	r2, [r7, #4]
 8004450:	4907      	ldr	r1, [pc, #28]	; (8004470 <I2C_MasterRequestWrite+0x100>)
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 f933 	bl	80046be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004458:	4603      	mov	r3, r0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d001      	beq.n	8004462 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e000      	b.n	8004464 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3718      	adds	r7, #24
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	00010008 	.word	0x00010008
 8004470:	00010002 	.word	0x00010002

08004474 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b088      	sub	sp, #32
 8004478:	af02      	add	r7, sp, #8
 800447a:	60f8      	str	r0, [r7, #12]
 800447c:	607a      	str	r2, [r7, #4]
 800447e:	603b      	str	r3, [r7, #0]
 8004480:	460b      	mov	r3, r1
 8004482:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	681a      	ldr	r2, [r3, #0]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004498:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	2b08      	cmp	r3, #8
 800449e:	d006      	beq.n	80044ae <I2C_MasterRequestRead+0x3a>
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d003      	beq.n	80044ae <I2C_MasterRequestRead+0x3a>
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044ac:	d108      	bne.n	80044c0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044bc:	601a      	str	r2, [r3, #0]
 80044be:	e00b      	b.n	80044d8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c4:	2b11      	cmp	r3, #17
 80044c6:	d107      	bne.n	80044d8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044d6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2200      	movs	r2, #0
 80044e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f893 	bl	8004610 <I2C_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00d      	beq.n	800450c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044fe:	d103      	bne.n	8004508 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004506:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e079      	b.n	8004600 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004514:	d108      	bne.n	8004528 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004516:	897b      	ldrh	r3, [r7, #10]
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f043 0301 	orr.w	r3, r3, #1
 800451e:	b2da      	uxtb	r2, r3
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	611a      	str	r2, [r3, #16]
 8004526:	e05f      	b.n	80045e8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004528:	897b      	ldrh	r3, [r7, #10]
 800452a:	11db      	asrs	r3, r3, #7
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f003 0306 	and.w	r3, r3, #6
 8004532:	b2db      	uxtb	r3, r3
 8004534:	f063 030f 	orn	r3, r3, #15
 8004538:	b2da      	uxtb	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	687a      	ldr	r2, [r7, #4]
 8004544:	4930      	ldr	r1, [pc, #192]	; (8004608 <I2C_MasterRequestRead+0x194>)
 8004546:	68f8      	ldr	r0, [r7, #12]
 8004548:	f000 f8b9 	bl	80046be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800454c:	4603      	mov	r3, r0
 800454e:	2b00      	cmp	r3, #0
 8004550:	d001      	beq.n	8004556 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e054      	b.n	8004600 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004556:	897b      	ldrh	r3, [r7, #10]
 8004558:	b2da      	uxtb	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	687a      	ldr	r2, [r7, #4]
 8004564:	4929      	ldr	r1, [pc, #164]	; (800460c <I2C_MasterRequestRead+0x198>)
 8004566:	68f8      	ldr	r0, [r7, #12]
 8004568:	f000 f8a9 	bl	80046be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e044      	b.n	8004600 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004576:	2300      	movs	r3, #0
 8004578:	613b      	str	r3, [r7, #16]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	613b      	str	r3, [r7, #16]
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	699b      	ldr	r3, [r3, #24]
 8004588:	613b      	str	r3, [r7, #16]
 800458a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800459a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	9300      	str	r3, [sp, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 f831 	bl	8004610 <I2C_WaitOnFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00d      	beq.n	80045d0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045c2:	d103      	bne.n	80045cc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80045ca:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80045cc:	2303      	movs	r3, #3
 80045ce:	e017      	b.n	8004600 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80045d0:	897b      	ldrh	r3, [r7, #10]
 80045d2:	11db      	asrs	r3, r3, #7
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	f003 0306 	and.w	r3, r3, #6
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	f063 030e 	orn	r3, r3, #14
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	4907      	ldr	r1, [pc, #28]	; (800460c <I2C_MasterRequestRead+0x198>)
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 f865 	bl	80046be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3718      	adds	r7, #24
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	00010008 	.word	0x00010008
 800460c:	00010002 	.word	0x00010002

08004610 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b084      	sub	sp, #16
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	603b      	str	r3, [r7, #0]
 800461c:	4613      	mov	r3, r2
 800461e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004620:	e025      	b.n	800466e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004628:	d021      	beq.n	800466e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800462a:	f7fe fb1b 	bl	8002c64 <HAL_GetTick>
 800462e:	4602      	mov	r2, r0
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	1ad3      	subs	r3, r2, r3
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	429a      	cmp	r2, r3
 8004638:	d302      	bcc.n	8004640 <I2C_WaitOnFlagUntilTimeout+0x30>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b00      	cmp	r3, #0
 800463e:	d116      	bne.n	800466e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2200      	movs	r2, #0
 8004644:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2220      	movs	r2, #32
 800464a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465a:	f043 0220 	orr.w	r2, r3, #32
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e023      	b.n	80046b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	b2db      	uxtb	r3, r3
 8004674:	2b01      	cmp	r3, #1
 8004676:	d10d      	bne.n	8004694 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	695b      	ldr	r3, [r3, #20]
 800467e:	43da      	mvns	r2, r3
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4013      	ands	r3, r2
 8004684:	b29b      	uxth	r3, r3
 8004686:	2b00      	cmp	r3, #0
 8004688:	bf0c      	ite	eq
 800468a:	2301      	moveq	r3, #1
 800468c:	2300      	movne	r3, #0
 800468e:	b2db      	uxtb	r3, r3
 8004690:	461a      	mov	r2, r3
 8004692:	e00c      	b.n	80046ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	43da      	mvns	r2, r3
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	4013      	ands	r3, r2
 80046a0:	b29b      	uxth	r3, r3
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	bf0c      	ite	eq
 80046a6:	2301      	moveq	r3, #1
 80046a8:	2300      	movne	r3, #0
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	461a      	mov	r2, r3
 80046ae:	79fb      	ldrb	r3, [r7, #7]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d0b6      	beq.n	8004622 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60f8      	str	r0, [r7, #12]
 80046c6:	60b9      	str	r1, [r7, #8]
 80046c8:	607a      	str	r2, [r7, #4]
 80046ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80046cc:	e051      	b.n	8004772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	695b      	ldr	r3, [r3, #20]
 80046d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046dc:	d123      	bne.n	8004726 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2200      	movs	r2, #0
 800470a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	f043 0204 	orr.w	r2, r3, #4
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2200      	movs	r2, #0
 800471e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e046      	b.n	80047b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800472c:	d021      	beq.n	8004772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472e:	f7fe fa99 	bl	8002c64 <HAL_GetTick>
 8004732:	4602      	mov	r2, r0
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	1ad3      	subs	r3, r2, r3
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	429a      	cmp	r2, r3
 800473c:	d302      	bcc.n	8004744 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d116      	bne.n	8004772 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2220      	movs	r2, #32
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800475e:	f043 0220 	orr.w	r2, r3, #32
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	2200      	movs	r2, #0
 800476a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e020      	b.n	80047b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	0c1b      	lsrs	r3, r3, #16
 8004776:	b2db      	uxtb	r3, r3
 8004778:	2b01      	cmp	r3, #1
 800477a:	d10c      	bne.n	8004796 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	43da      	mvns	r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	4013      	ands	r3, r2
 8004788:	b29b      	uxth	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	bf14      	ite	ne
 800478e:	2301      	movne	r3, #1
 8004790:	2300      	moveq	r3, #0
 8004792:	b2db      	uxtb	r3, r3
 8004794:	e00b      	b.n	80047ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	43da      	mvns	r2, r3
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	4013      	ands	r3, r2
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	bf14      	ite	ne
 80047a8:	2301      	movne	r3, #1
 80047aa:	2300      	moveq	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d18d      	bne.n	80046ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80047b2:	2300      	movs	r3, #0
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3710      	adds	r7, #16
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	60f8      	str	r0, [r7, #12]
 80047c4:	60b9      	str	r1, [r7, #8]
 80047c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047c8:	e02d      	b.n	8004826 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80047ca:	68f8      	ldr	r0, [r7, #12]
 80047cc:	f000 f8ce 	bl	800496c <I2C_IsAcknowledgeFailed>
 80047d0:	4603      	mov	r3, r0
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e02d      	b.n	8004836 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047e0:	d021      	beq.n	8004826 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047e2:	f7fe fa3f 	bl	8002c64 <HAL_GetTick>
 80047e6:	4602      	mov	r2, r0
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	1ad3      	subs	r3, r2, r3
 80047ec:	68ba      	ldr	r2, [r7, #8]
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d302      	bcc.n	80047f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d116      	bne.n	8004826 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	2200      	movs	r2, #0
 80047fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	f043 0220 	orr.w	r2, r3, #32
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004822:	2301      	movs	r3, #1
 8004824:	e007      	b.n	8004836 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004830:	2b80      	cmp	r3, #128	; 0x80
 8004832:	d1ca      	bne.n	80047ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	3710      	adds	r7, #16
 800483a:	46bd      	mov	sp, r7
 800483c:	bd80      	pop	{r7, pc}

0800483e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800483e:	b580      	push	{r7, lr}
 8004840:	b084      	sub	sp, #16
 8004842:	af00      	add	r7, sp, #0
 8004844:	60f8      	str	r0, [r7, #12]
 8004846:	60b9      	str	r1, [r7, #8]
 8004848:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800484a:	e02d      	b.n	80048a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f88d 	bl	800496c <I2C_IsAcknowledgeFailed>
 8004852:	4603      	mov	r3, r0
 8004854:	2b00      	cmp	r3, #0
 8004856:	d001      	beq.n	800485c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e02d      	b.n	80048b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004862:	d021      	beq.n	80048a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004864:	f7fe f9fe 	bl	8002c64 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	429a      	cmp	r2, r3
 8004872:	d302      	bcc.n	800487a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d116      	bne.n	80048a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2200      	movs	r2, #0
 800487e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004894:	f043 0220 	orr.w	r2, r3, #32
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2200      	movs	r2, #0
 80048a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048a4:	2301      	movs	r3, #1
 80048a6:	e007      	b.n	80048b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d1ca      	bne.n	800484c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}

080048c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048cc:	e042      	b.n	8004954 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	f003 0310 	and.w	r3, r3, #16
 80048d8:	2b10      	cmp	r3, #16
 80048da:	d119      	bne.n	8004910 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f06f 0210 	mvn.w	r2, #16
 80048e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800490c:	2301      	movs	r3, #1
 800490e:	e029      	b.n	8004964 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004910:	f7fe f9a8 	bl	8002c64 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	429a      	cmp	r2, r3
 800491e:	d302      	bcc.n	8004926 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004920:	68bb      	ldr	r3, [r7, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d116      	bne.n	8004954 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2200      	movs	r2, #0
 800492a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	f043 0220 	orr.w	r2, r3, #32
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004950:	2301      	movs	r3, #1
 8004952:	e007      	b.n	8004964 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	695b      	ldr	r3, [r3, #20]
 800495a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800495e:	2b40      	cmp	r3, #64	; 0x40
 8004960:	d1b5      	bne.n	80048ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	695b      	ldr	r3, [r3, #20]
 800497a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800497e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004982:	d11b      	bne.n	80049bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800498c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2220      	movs	r2, #32
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a8:	f043 0204 	orr.w	r2, r3, #4
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e000      	b.n	80049be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80049bc:	2300      	movs	r3, #0
}
 80049be:	4618      	mov	r0, r3
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr

080049ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80049ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049cc:	b08f      	sub	sp, #60	; 0x3c
 80049ce:	af0a      	add	r7, sp, #40	; 0x28
 80049d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e10f      	b.n	8004bfc <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80049e8:	b2db      	uxtb	r3, r3
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d106      	bne.n	80049fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f009 fbca 	bl	800e190 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2203      	movs	r2, #3
 8004a00:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d102      	bne.n	8004a16 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f005 fbfb 	bl	800a216 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	603b      	str	r3, [r7, #0]
 8004a26:	687e      	ldr	r6, [r7, #4]
 8004a28:	466d      	mov	r5, sp
 8004a2a:	f106 0410 	add.w	r4, r6, #16
 8004a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a3e:	1d33      	adds	r3, r6, #4
 8004a40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a42:	6838      	ldr	r0, [r7, #0]
 8004a44:	f005 fad2 	bl	8009fec <USB_CoreInit>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d005      	beq.n	8004a5a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2202      	movs	r2, #2
 8004a52:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	e0d0      	b.n	8004bfc <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	2100      	movs	r1, #0
 8004a60:	4618      	mov	r0, r3
 8004a62:	f005 fbe9 	bl	800a238 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a66:	2300      	movs	r3, #0
 8004a68:	73fb      	strb	r3, [r7, #15]
 8004a6a:	e04a      	b.n	8004b02 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004a6c:	7bfa      	ldrb	r2, [r7, #15]
 8004a6e:	6879      	ldr	r1, [r7, #4]
 8004a70:	4613      	mov	r3, r2
 8004a72:	00db      	lsls	r3, r3, #3
 8004a74:	4413      	add	r3, r2
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	440b      	add	r3, r1
 8004a7a:	333d      	adds	r3, #61	; 0x3d
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004a80:	7bfa      	ldrb	r2, [r7, #15]
 8004a82:	6879      	ldr	r1, [r7, #4]
 8004a84:	4613      	mov	r3, r2
 8004a86:	00db      	lsls	r3, r3, #3
 8004a88:	4413      	add	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	440b      	add	r3, r1
 8004a8e:	333c      	adds	r3, #60	; 0x3c
 8004a90:	7bfa      	ldrb	r2, [r7, #15]
 8004a92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a94:	7bfa      	ldrb	r2, [r7, #15]
 8004a96:	7bfb      	ldrb	r3, [r7, #15]
 8004a98:	b298      	uxth	r0, r3
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	4613      	mov	r3, r2
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	4413      	add	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	440b      	add	r3, r1
 8004aa6:	3344      	adds	r3, #68	; 0x44
 8004aa8:	4602      	mov	r2, r0
 8004aaa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004aac:	7bfa      	ldrb	r2, [r7, #15]
 8004aae:	6879      	ldr	r1, [r7, #4]
 8004ab0:	4613      	mov	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	4413      	add	r3, r2
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	3340      	adds	r3, #64	; 0x40
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004ac0:	7bfa      	ldrb	r2, [r7, #15]
 8004ac2:	6879      	ldr	r1, [r7, #4]
 8004ac4:	4613      	mov	r3, r2
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	4413      	add	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	440b      	add	r3, r1
 8004ace:	3348      	adds	r3, #72	; 0x48
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004ad4:	7bfa      	ldrb	r2, [r7, #15]
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	4613      	mov	r3, r2
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	4413      	add	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	334c      	adds	r3, #76	; 0x4c
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004ae8:	7bfa      	ldrb	r2, [r7, #15]
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	4613      	mov	r3, r2
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	3354      	adds	r3, #84	; 0x54
 8004af8:	2200      	movs	r2, #0
 8004afa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
 8004afe:	3301      	adds	r3, #1
 8004b00:	73fb      	strb	r3, [r7, #15]
 8004b02:	7bfa      	ldrb	r2, [r7, #15]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d3af      	bcc.n	8004a6c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	73fb      	strb	r3, [r7, #15]
 8004b10:	e044      	b.n	8004b9c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004b12:	7bfa      	ldrb	r2, [r7, #15]
 8004b14:	6879      	ldr	r1, [r7, #4]
 8004b16:	4613      	mov	r3, r2
 8004b18:	00db      	lsls	r3, r3, #3
 8004b1a:	4413      	add	r3, r2
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	440b      	add	r3, r1
 8004b20:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004b24:	2200      	movs	r2, #0
 8004b26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004b28:	7bfa      	ldrb	r2, [r7, #15]
 8004b2a:	6879      	ldr	r1, [r7, #4]
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	4413      	add	r3, r2
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	440b      	add	r3, r1
 8004b36:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004b3a:	7bfa      	ldrb	r2, [r7, #15]
 8004b3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004b3e:	7bfa      	ldrb	r2, [r7, #15]
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	00db      	lsls	r3, r3, #3
 8004b46:	4413      	add	r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004b50:	2200      	movs	r2, #0
 8004b52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004b54:	7bfa      	ldrb	r2, [r7, #15]
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	00db      	lsls	r3, r3, #3
 8004b5c:	4413      	add	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004b66:	2200      	movs	r2, #0
 8004b68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004b6a:	7bfa      	ldrb	r2, [r7, #15]
 8004b6c:	6879      	ldr	r1, [r7, #4]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	00db      	lsls	r3, r3, #3
 8004b72:	4413      	add	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	440b      	add	r3, r1
 8004b78:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004b80:	7bfa      	ldrb	r2, [r7, #15]
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	4413      	add	r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004b92:	2200      	movs	r2, #0
 8004b94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	73fb      	strb	r3, [r7, #15]
 8004b9c:	7bfa      	ldrb	r2, [r7, #15]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	429a      	cmp	r2, r3
 8004ba4:	d3b5      	bcc.n	8004b12 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	687e      	ldr	r6, [r7, #4]
 8004bae:	466d      	mov	r5, sp
 8004bb0:	f106 0410 	add.w	r4, r6, #16
 8004bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004bc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8004bc4:	1d33      	adds	r3, r6, #4
 8004bc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bc8:	6838      	ldr	r0, [r7, #0]
 8004bca:	f005 fb81 	bl	800a2d0 <USB_DevInit>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d005      	beq.n	8004be0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	e00d      	b.n	8004bfc <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2200      	movs	r2, #0
 8004be4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f006 fcd0 	bl	800b59a <USB_DevDisconnect>

  return HAL_OK;
 8004bfa:	2300      	movs	r3, #0
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3714      	adds	r7, #20
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004c04 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c18:	2b01      	cmp	r3, #1
 8004c1a:	d101      	bne.n	8004c20 <HAL_PCD_Start+0x1c>
 8004c1c:	2302      	movs	r3, #2
 8004c1e:	e020      	b.n	8004c62 <HAL_PCD_Start+0x5e>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d109      	bne.n	8004c44 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d005      	beq.n	8004c44 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f005 fad3 	bl	800a1f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4618      	mov	r0, r3
 8004c54:	f006 fc80 	bl	800b558 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004c6a:	b590      	push	{r4, r7, lr}
 8004c6c:	b08d      	sub	sp, #52	; 0x34
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f006 fd3e 	bl	800b702 <USB_GetMode>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	f040 848a 	bne.w	80055a2 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f006 fca2 	bl	800b5dc <USB_ReadInterrupts>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 8480 	beq.w	80055a0 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	0a1b      	lsrs	r3, r3, #8
 8004caa:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4618      	mov	r0, r3
 8004cba:	f006 fc8f 	bl	800b5dc <USB_ReadInterrupts>
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b02      	cmp	r3, #2
 8004cc6:	d107      	bne.n	8004cd8 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695a      	ldr	r2, [r3, #20]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f002 0202 	and.w	r2, r2, #2
 8004cd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f006 fc7d 	bl	800b5dc <USB_ReadInterrupts>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f003 0310 	and.w	r3, r3, #16
 8004ce8:	2b10      	cmp	r3, #16
 8004cea:	d161      	bne.n	8004db0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	699a      	ldr	r2, [r3, #24]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f022 0210 	bic.w	r2, r2, #16
 8004cfa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004cfc:	6a3b      	ldr	r3, [r7, #32]
 8004cfe:	6a1b      	ldr	r3, [r3, #32]
 8004d00:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	f003 020f 	and.w	r2, r3, #15
 8004d08:	4613      	mov	r3, r2
 8004d0a:	00db      	lsls	r3, r3, #3
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	4413      	add	r3, r2
 8004d18:	3304      	adds	r3, #4
 8004d1a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	0c5b      	lsrs	r3, r3, #17
 8004d20:	f003 030f 	and.w	r3, r3, #15
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d124      	bne.n	8004d72 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d035      	beq.n	8004da0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004d38:	69bb      	ldr	r3, [r7, #24]
 8004d3a:	091b      	lsrs	r3, r3, #4
 8004d3c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004d3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d42:	b29b      	uxth	r3, r3
 8004d44:	461a      	mov	r2, r3
 8004d46:	6a38      	ldr	r0, [r7, #32]
 8004d48:	f006 fab4 	bl	800b2b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	091b      	lsrs	r3, r3, #4
 8004d54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d58:	441a      	add	r2, r3
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	6a1a      	ldr	r2, [r3, #32]
 8004d62:	69bb      	ldr	r3, [r7, #24]
 8004d64:	091b      	lsrs	r3, r3, #4
 8004d66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d6a:	441a      	add	r2, r3
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	621a      	str	r2, [r3, #32]
 8004d70:	e016      	b.n	8004da0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004d72:	69bb      	ldr	r3, [r7, #24]
 8004d74:	0c5b      	lsrs	r3, r3, #17
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	2b06      	cmp	r3, #6
 8004d7c:	d110      	bne.n	8004da0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d84:	2208      	movs	r2, #8
 8004d86:	4619      	mov	r1, r3
 8004d88:	6a38      	ldr	r0, [r7, #32]
 8004d8a:	f006 fa93 	bl	800b2b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	6a1a      	ldr	r2, [r3, #32]
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	091b      	lsrs	r3, r3, #4
 8004d96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d9a:	441a      	add	r2, r3
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	699a      	ldr	r2, [r3, #24]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f042 0210 	orr.w	r2, r2, #16
 8004dae:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f006 fc11 	bl	800b5dc <USB_ReadInterrupts>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dc0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004dc4:	f040 80a7 	bne.w	8004f16 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f006 fc16 	bl	800b602 <USB_ReadDevAllOutEpInterrupt>
 8004dd6:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004dd8:	e099      	b.n	8004f0e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ddc:	f003 0301 	and.w	r3, r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	f000 808e 	beq.w	8004f02 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dec:	b2d2      	uxtb	r2, r2
 8004dee:	4611      	mov	r1, r2
 8004df0:	4618      	mov	r0, r3
 8004df2:	f006 fc3a 	bl	800b66a <USB_ReadDevOutEPInterrupt>
 8004df6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f003 0301 	and.w	r3, r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d00c      	beq.n	8004e1c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e04:	015a      	lsls	r2, r3, #5
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	4413      	add	r3, r2
 8004e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0e:	461a      	mov	r2, r3
 8004e10:	2301      	movs	r3, #1
 8004e12:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004e14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fec2 	bl	8005ba0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004e1c:	693b      	ldr	r3, [r7, #16]
 8004e1e:	f003 0308 	and.w	r3, r3, #8
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00c      	beq.n	8004e40 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e32:	461a      	mov	r2, r3
 8004e34:	2308      	movs	r3, #8
 8004e36:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004e38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 ff98 	bl	8005d70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f003 0310 	and.w	r3, r3, #16
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d008      	beq.n	8004e5c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	015a      	lsls	r2, r3, #5
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	4413      	add	r3, r2
 8004e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e56:	461a      	mov	r2, r3
 8004e58:	2310      	movs	r3, #16
 8004e5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f003 0302 	and.w	r3, r3, #2
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d030      	beq.n	8004ec8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6e:	2b80      	cmp	r3, #128	; 0x80
 8004e70:	d109      	bne.n	8004e86 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004e72:	69fb      	ldr	r3, [r7, #28]
 8004e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	69fa      	ldr	r2, [r7, #28]
 8004e7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004e80:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e84:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004e86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e88:	4613      	mov	r3, r2
 8004e8a:	00db      	lsls	r3, r3, #3
 8004e8c:	4413      	add	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e94:	687a      	ldr	r2, [r7, #4]
 8004e96:	4413      	add	r3, r2
 8004e98:	3304      	adds	r3, #4
 8004e9a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	78db      	ldrb	r3, [r3, #3]
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d108      	bne.n	8004eb6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	4619      	mov	r1, r3
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f009 fa73 	bl	800e39c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb8:	015a      	lsls	r2, r3, #5
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	4413      	add	r3, r2
 8004ebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	2302      	movs	r3, #2
 8004ec6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	f003 0320 	and.w	r3, r3, #32
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d008      	beq.n	8004ee4 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ede:	461a      	mov	r2, r3
 8004ee0:	2320      	movs	r3, #32
 8004ee2:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d009      	beq.n	8004f02 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efa:	461a      	mov	r2, r3
 8004efc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f00:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f04:	3301      	adds	r3, #1
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	085b      	lsrs	r3, r3, #1
 8004f0c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f47f af62 	bne.w	8004dda <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	f006 fb5e 	bl	800b5dc <USB_ReadInterrupts>
 8004f20:	4603      	mov	r3, r0
 8004f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f2a:	f040 80db 	bne.w	80050e4 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f006 fb7f 	bl	800b636 <USB_ReadDevAllInEpInterrupt>
 8004f38:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004f3e:	e0cd      	b.n	80050dc <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f42:	f003 0301 	and.w	r3, r3, #1
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	f000 80c2 	beq.w	80050d0 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f52:	b2d2      	uxtb	r2, r2
 8004f54:	4611      	mov	r1, r2
 8004f56:	4618      	mov	r0, r3
 8004f58:	f006 fba5 	bl	800b6a6 <USB_ReadDevInEPInterrupt>
 8004f5c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d057      	beq.n	8005018 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f6a:	f003 030f 	and.w	r3, r3, #15
 8004f6e:	2201      	movs	r2, #1
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f7c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	43db      	mvns	r3, r3
 8004f82:	69f9      	ldr	r1, [r7, #28]
 8004f84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f88:	4013      	ands	r3, r2
 8004f8a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f98:	461a      	mov	r2, r3
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	2b01      	cmp	r3, #1
 8004fa4:	d132      	bne.n	800500c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004fa6:	6879      	ldr	r1, [r7, #4]
 8004fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004faa:	4613      	mov	r3, r2
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	440b      	add	r3, r1
 8004fb4:	334c      	adds	r3, #76	; 0x4c
 8004fb6:	6819      	ldr	r1, [r3, #0]
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fbc:	4613      	mov	r3, r2
 8004fbe:	00db      	lsls	r3, r3, #3
 8004fc0:	4413      	add	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4403      	add	r3, r0
 8004fc6:	3348      	adds	r3, #72	; 0x48
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	4419      	add	r1, r3
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	4413      	add	r3, r2
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4403      	add	r3, r0
 8004fda:	334c      	adds	r3, #76	; 0x4c
 8004fdc:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d113      	bne.n	800500c <HAL_PCD_IRQHandler+0x3a2>
 8004fe4:	6879      	ldr	r1, [r7, #4]
 8004fe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004fe8:	4613      	mov	r3, r2
 8004fea:	00db      	lsls	r3, r3, #3
 8004fec:	4413      	add	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	440b      	add	r3, r1
 8004ff2:	3354      	adds	r3, #84	; 0x54
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d108      	bne.n	800500c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6818      	ldr	r0, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005004:	461a      	mov	r2, r3
 8005006:	2101      	movs	r1, #1
 8005008:	f006 fbac 	bl	800b764 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	b2db      	uxtb	r3, r3
 8005010:	4619      	mov	r1, r3
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f009 f93d 	bl	800e292 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	f003 0308 	and.w	r3, r3, #8
 800501e:	2b00      	cmp	r3, #0
 8005020:	d008      	beq.n	8005034 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502e:	461a      	mov	r2, r3
 8005030:	2308      	movs	r3, #8
 8005032:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f003 0310 	and.w	r3, r3, #16
 800503a:	2b00      	cmp	r3, #0
 800503c:	d008      	beq.n	8005050 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800503e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005040:	015a      	lsls	r2, r3, #5
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	4413      	add	r3, r2
 8005046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504a:	461a      	mov	r2, r3
 800504c:	2310      	movs	r3, #16
 800504e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d008      	beq.n	800506c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800505a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005066:	461a      	mov	r2, r3
 8005068:	2340      	movs	r3, #64	; 0x40
 800506a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d023      	beq.n	80050be <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005076:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005078:	6a38      	ldr	r0, [r7, #32]
 800507a:	f005 fa8d 	bl	800a598 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800507e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005080:	4613      	mov	r3, r2
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	3338      	adds	r3, #56	; 0x38
 800508a:	687a      	ldr	r2, [r7, #4]
 800508c:	4413      	add	r3, r2
 800508e:	3304      	adds	r3, #4
 8005090:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	78db      	ldrb	r3, [r3, #3]
 8005096:	2b01      	cmp	r3, #1
 8005098:	d108      	bne.n	80050ac <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2200      	movs	r2, #0
 800509e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	4619      	mov	r1, r3
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f009 f98a 	bl	800e3c0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b8:	461a      	mov	r2, r3
 80050ba:	2302      	movs	r3, #2
 80050bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80050c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 fcdb 	bl	8005a86 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80050d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050d2:	3301      	adds	r3, #1
 80050d4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d8:	085b      	lsrs	r3, r3, #1
 80050da:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80050dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050de:	2b00      	cmp	r3, #0
 80050e0:	f47f af2e 	bne.w	8004f40 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4618      	mov	r0, r3
 80050ea:	f006 fa77 	bl	800b5dc <USB_ReadInterrupts>
 80050ee:	4603      	mov	r3, r0
 80050f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80050f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050f8:	d122      	bne.n	8005140 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80050fa:	69fb      	ldr	r3, [r7, #28]
 80050fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005108:	f023 0301 	bic.w	r3, r3, #1
 800510c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005114:	2b01      	cmp	r3, #1
 8005116:	d108      	bne.n	800512a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005120:	2100      	movs	r1, #0
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 fec2 	bl	8005eac <HAL_PCDEx_LPM_Callback>
 8005128:	e002      	b.n	8005130 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f009 f928 	bl	800e380 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695a      	ldr	r2, [r3, #20]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800513e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4618      	mov	r0, r3
 8005146:	f006 fa49 	bl	800b5dc <USB_ReadInterrupts>
 800514a:	4603      	mov	r3, r0
 800514c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005150:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005154:	d112      	bne.n	800517c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800515c:	689b      	ldr	r3, [r3, #8]
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b01      	cmp	r3, #1
 8005164:	d102      	bne.n	800516c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f009 f8e4 	bl	800e334 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	695a      	ldr	r2, [r3, #20]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800517a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4618      	mov	r0, r3
 8005182:	f006 fa2b 	bl	800b5dc <USB_ReadInterrupts>
 8005186:	4603      	mov	r3, r0
 8005188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800518c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005190:	f040 80b7 	bne.w	8005302 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	69fa      	ldr	r2, [r7, #28]
 800519e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80051a2:	f023 0301 	bic.w	r3, r3, #1
 80051a6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2110      	movs	r1, #16
 80051ae:	4618      	mov	r0, r3
 80051b0:	f005 f9f2 	bl	800a598 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051b4:	2300      	movs	r3, #0
 80051b6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051b8:	e046      	b.n	8005248 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80051ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051bc:	015a      	lsls	r2, r3, #5
 80051be:	69fb      	ldr	r3, [r7, #28]
 80051c0:	4413      	add	r3, r2
 80051c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c6:	461a      	mov	r2, r3
 80051c8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80051cc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80051ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051d0:	015a      	lsls	r2, r3, #5
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	4413      	add	r3, r2
 80051d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051de:	0151      	lsls	r1, r2, #5
 80051e0:	69fa      	ldr	r2, [r7, #28]
 80051e2:	440a      	add	r2, r1
 80051e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051ec:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80051ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	69fb      	ldr	r3, [r7, #28]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fa:	461a      	mov	r2, r3
 80051fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005200:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005212:	0151      	lsls	r1, r2, #5
 8005214:	69fa      	ldr	r2, [r7, #28]
 8005216:	440a      	add	r2, r1
 8005218:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800521c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005220:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005224:	015a      	lsls	r2, r3, #5
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	4413      	add	r3, r2
 800522a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005232:	0151      	lsls	r1, r2, #5
 8005234:	69fa      	ldr	r2, [r7, #28]
 8005236:	440a      	add	r2, r1
 8005238:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800523c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005240:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005244:	3301      	adds	r3, #1
 8005246:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800524e:	429a      	cmp	r2, r3
 8005250:	d3b3      	bcc.n	80051ba <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	69fa      	ldr	r2, [r7, #28]
 800525c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005260:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005264:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800526a:	2b00      	cmp	r3, #0
 800526c:	d016      	beq.n	800529c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800526e:	69fb      	ldr	r3, [r7, #28]
 8005270:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005274:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005278:	69fa      	ldr	r2, [r7, #28]
 800527a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800527e:	f043 030b 	orr.w	r3, r3, #11
 8005282:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005286:	69fb      	ldr	r3, [r7, #28]
 8005288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800528c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528e:	69fa      	ldr	r2, [r7, #28]
 8005290:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005294:	f043 030b 	orr.w	r3, r3, #11
 8005298:	6453      	str	r3, [r2, #68]	; 0x44
 800529a:	e015      	b.n	80052c8 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052a2:	695b      	ldr	r3, [r3, #20]
 80052a4:	69fa      	ldr	r2, [r7, #28]
 80052a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80052ae:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80052b2:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80052b4:	69fb      	ldr	r3, [r7, #28]
 80052b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	69fa      	ldr	r2, [r7, #28]
 80052be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052c2:	f043 030b 	orr.w	r3, r3, #11
 80052c6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	69fa      	ldr	r2, [r7, #28]
 80052d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052d6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80052da:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6818      	ldr	r0, [r3, #0]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80052ec:	461a      	mov	r2, r3
 80052ee:	f006 fa39 	bl	800b764 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	695a      	ldr	r2, [r3, #20]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005300:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4618      	mov	r0, r3
 8005308:	f006 f968 	bl	800b5dc <USB_ReadInterrupts>
 800530c:	4603      	mov	r3, r0
 800530e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005312:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005316:	d124      	bne.n	8005362 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4618      	mov	r0, r3
 800531e:	f006 f9fe 	bl	800b71e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4618      	mov	r0, r3
 8005328:	f005 f9b3 	bl	800a692 <USB_GetDevSpeed>
 800532c:	4603      	mov	r3, r0
 800532e:	461a      	mov	r2, r3
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681c      	ldr	r4, [r3, #0]
 8005338:	f001 f9e8 	bl	800670c <HAL_RCC_GetHCLKFreq>
 800533c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005342:	b2db      	uxtb	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	4620      	mov	r0, r4
 8005348:	f004 feb2 	bl	800a0b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f008 ffc8 	bl	800e2e2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	695a      	ldr	r2, [r3, #20]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005360:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4618      	mov	r0, r3
 8005368:	f006 f938 	bl	800b5dc <USB_ReadInterrupts>
 800536c:	4603      	mov	r3, r0
 800536e:	f003 0308 	and.w	r3, r3, #8
 8005372:	2b08      	cmp	r3, #8
 8005374:	d10a      	bne.n	800538c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f008 ffa5 	bl	800e2c6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	695a      	ldr	r2, [r3, #20]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f002 0208 	and.w	r2, r2, #8
 800538a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4618      	mov	r0, r3
 8005392:	f006 f923 	bl	800b5dc <USB_ReadInterrupts>
 8005396:	4603      	mov	r3, r0
 8005398:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800539c:	2b80      	cmp	r3, #128	; 0x80
 800539e:	d122      	bne.n	80053e6 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053ac:	2301      	movs	r3, #1
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
 80053b0:	e014      	b.n	80053dc <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053b6:	4613      	mov	r3, r2
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	4413      	add	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	440b      	add	r3, r1
 80053c0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80053c4:	781b      	ldrb	r3, [r3, #0]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d105      	bne.n	80053d6 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80053ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	4619      	mov	r1, r3
 80053d0:	6878      	ldr	r0, [r7, #4]
 80053d2:	f000 fb27 	bl	8005a24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d8:	3301      	adds	r3, #1
 80053da:	627b      	str	r3, [r7, #36]	; 0x24
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d3e5      	bcc.n	80053b2 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f006 f8f6 	bl	800b5dc <USB_ReadInterrupts>
 80053f0:	4603      	mov	r3, r0
 80053f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80053fa:	d13b      	bne.n	8005474 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053fc:	2301      	movs	r3, #1
 80053fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005400:	e02b      	b.n	800545a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005404:	015a      	lsls	r2, r3, #5
 8005406:	69fb      	ldr	r3, [r7, #28]
 8005408:	4413      	add	r3, r2
 800540a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005412:	6879      	ldr	r1, [r7, #4]
 8005414:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005416:	4613      	mov	r3, r2
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	440b      	add	r3, r1
 8005420:	3340      	adds	r3, #64	; 0x40
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	2b01      	cmp	r3, #1
 8005426:	d115      	bne.n	8005454 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005428:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800542a:	2b00      	cmp	r3, #0
 800542c:	da12      	bge.n	8005454 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800542e:	6879      	ldr	r1, [r7, #4]
 8005430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005432:	4613      	mov	r3, r2
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	440b      	add	r3, r1
 800543c:	333f      	adds	r3, #63	; 0x3f
 800543e:	2201      	movs	r2, #1
 8005440:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005444:	b2db      	uxtb	r3, r3
 8005446:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800544a:	b2db      	uxtb	r3, r3
 800544c:	4619      	mov	r1, r3
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fae8 	bl	8005a24 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005456:	3301      	adds	r3, #1
 8005458:	627b      	str	r3, [r7, #36]	; 0x24
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	685b      	ldr	r3, [r3, #4]
 800545e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005460:	429a      	cmp	r2, r3
 8005462:	d3ce      	bcc.n	8005402 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	695a      	ldr	r2, [r3, #20]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005472:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4618      	mov	r0, r3
 800547a:	f006 f8af 	bl	800b5dc <USB_ReadInterrupts>
 800547e:	4603      	mov	r3, r0
 8005480:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005484:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005488:	d155      	bne.n	8005536 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800548a:	2301      	movs	r3, #1
 800548c:	627b      	str	r3, [r7, #36]	; 0x24
 800548e:	e045      	b.n	800551c <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005492:	015a      	lsls	r2, r3, #5
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	4413      	add	r3, r2
 8005498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80054a0:	6879      	ldr	r1, [r7, #4]
 80054a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054a4:	4613      	mov	r3, r2
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	4413      	add	r3, r2
 80054aa:	009b      	lsls	r3, r3, #2
 80054ac:	440b      	add	r3, r1
 80054ae:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	2b01      	cmp	r3, #1
 80054b6:	d12e      	bne.n	8005516 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80054b8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	da2b      	bge.n	8005516 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80054ca:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d121      	bne.n	8005516 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80054d2:	6879      	ldr	r1, [r7, #4]
 80054d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054d6:	4613      	mov	r3, r2
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	4413      	add	r3, r2
 80054dc:	009b      	lsls	r3, r3, #2
 80054de:	440b      	add	r3, r1
 80054e0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80054e4:	2201      	movs	r2, #1
 80054e6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80054e8:	6a3b      	ldr	r3, [r7, #32]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80054f0:	6a3b      	ldr	r3, [r7, #32]
 80054f2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80054f4:	6a3b      	ldr	r3, [r7, #32]
 80054f6:	695b      	ldr	r3, [r3, #20]
 80054f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d10a      	bne.n	8005516 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005500:	69fb      	ldr	r3, [r7, #28]
 8005502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	69fa      	ldr	r2, [r7, #28]
 800550a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800550e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005512:	6053      	str	r3, [r2, #4]
            break;
 8005514:	e007      	b.n	8005526 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	3301      	adds	r3, #1
 800551a:	627b      	str	r3, [r7, #36]	; 0x24
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005522:	429a      	cmp	r2, r3
 8005524:	d3b4      	bcc.n	8005490 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	695a      	ldr	r2, [r3, #20]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005534:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4618      	mov	r0, r3
 800553c:	f006 f84e 	bl	800b5dc <USB_ReadInterrupts>
 8005540:	4603      	mov	r3, r0
 8005542:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005546:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800554a:	d10a      	bne.n	8005562 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800554c:	6878      	ldr	r0, [r7, #4]
 800554e:	f008 ff49 	bl	800e3e4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	695a      	ldr	r2, [r3, #20]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005560:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4618      	mov	r0, r3
 8005568:	f006 f838 	bl	800b5dc <USB_ReadInterrupts>
 800556c:	4603      	mov	r3, r0
 800556e:	f003 0304 	and.w	r3, r3, #4
 8005572:	2b04      	cmp	r3, #4
 8005574:	d115      	bne.n	80055a2 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b00      	cmp	r3, #0
 8005586:	d002      	beq.n	800558e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005588:	6878      	ldr	r0, [r7, #4]
 800558a:	f008 ff39 	bl	800e400 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	6859      	ldr	r1, [r3, #4]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]
 800559e:	e000      	b.n	80055a2 <HAL_PCD_IRQHandler+0x938>
      return;
 80055a0:	bf00      	nop
    }
  }
}
 80055a2:	3734      	adds	r7, #52	; 0x34
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd90      	pop	{r4, r7, pc}

080055a8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	6078      	str	r0, [r7, #4]
 80055b0:	460b      	mov	r3, r1
 80055b2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d101      	bne.n	80055c2 <HAL_PCD_SetAddress+0x1a>
 80055be:	2302      	movs	r3, #2
 80055c0:	e013      	b.n	80055ea <HAL_PCD_SetAddress+0x42>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	78fa      	ldrb	r2, [r7, #3]
 80055ce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	78fa      	ldrb	r2, [r7, #3]
 80055d8:	4611      	mov	r1, r2
 80055da:	4618      	mov	r0, r3
 80055dc:	f005 ff96 	bl	800b50c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80055e8:	2300      	movs	r3, #0
}
 80055ea:	4618      	mov	r0, r3
 80055ec:	3708      	adds	r7, #8
 80055ee:	46bd      	mov	sp, r7
 80055f0:	bd80      	pop	{r7, pc}

080055f2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	4608      	mov	r0, r1
 80055fc:	4611      	mov	r1, r2
 80055fe:	461a      	mov	r2, r3
 8005600:	4603      	mov	r3, r0
 8005602:	70fb      	strb	r3, [r7, #3]
 8005604:	460b      	mov	r3, r1
 8005606:	803b      	strh	r3, [r7, #0]
 8005608:	4613      	mov	r3, r2
 800560a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005610:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005614:	2b00      	cmp	r3, #0
 8005616:	da0f      	bge.n	8005638 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005618:	78fb      	ldrb	r3, [r7, #3]
 800561a:	f003 020f 	and.w	r2, r3, #15
 800561e:	4613      	mov	r3, r2
 8005620:	00db      	lsls	r3, r3, #3
 8005622:	4413      	add	r3, r2
 8005624:	009b      	lsls	r3, r3, #2
 8005626:	3338      	adds	r3, #56	; 0x38
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	4413      	add	r3, r2
 800562c:	3304      	adds	r3, #4
 800562e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2201      	movs	r2, #1
 8005634:	705a      	strb	r2, [r3, #1]
 8005636:	e00f      	b.n	8005658 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005638:	78fb      	ldrb	r3, [r7, #3]
 800563a:	f003 020f 	and.w	r2, r3, #15
 800563e:	4613      	mov	r3, r2
 8005640:	00db      	lsls	r3, r3, #3
 8005642:	4413      	add	r3, r2
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800564a:	687a      	ldr	r2, [r7, #4]
 800564c:	4413      	add	r3, r2
 800564e:	3304      	adds	r3, #4
 8005650:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2200      	movs	r2, #0
 8005656:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005658:	78fb      	ldrb	r3, [r7, #3]
 800565a:	f003 030f 	and.w	r3, r3, #15
 800565e:	b2da      	uxtb	r2, r3
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005664:	883a      	ldrh	r2, [r7, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	78ba      	ldrb	r2, [r7, #2]
 800566e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	785b      	ldrb	r3, [r3, #1]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d004      	beq.n	8005682 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	b29a      	uxth	r2, r3
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005682:	78bb      	ldrb	r3, [r7, #2]
 8005684:	2b02      	cmp	r3, #2
 8005686:	d102      	bne.n	800568e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2200      	movs	r2, #0
 800568c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005694:	2b01      	cmp	r3, #1
 8005696:	d101      	bne.n	800569c <HAL_PCD_EP_Open+0xaa>
 8005698:	2302      	movs	r3, #2
 800569a:	e00e      	b.n	80056ba <HAL_PCD_EP_Open+0xc8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	68f9      	ldr	r1, [r7, #12]
 80056aa:	4618      	mov	r0, r3
 80056ac:	f005 f816 	bl	800a6dc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80056b8:	7afb      	ldrb	r3, [r7, #11]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3710      	adds	r7, #16
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}

080056c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80056c2:	b580      	push	{r7, lr}
 80056c4:	b084      	sub	sp, #16
 80056c6:	af00      	add	r7, sp, #0
 80056c8:	6078      	str	r0, [r7, #4]
 80056ca:	460b      	mov	r3, r1
 80056cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80056ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	da0f      	bge.n	80056f6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056d6:	78fb      	ldrb	r3, [r7, #3]
 80056d8:	f003 020f 	and.w	r2, r3, #15
 80056dc:	4613      	mov	r3, r2
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	4413      	add	r3, r2
 80056e2:	009b      	lsls	r3, r3, #2
 80056e4:	3338      	adds	r3, #56	; 0x38
 80056e6:	687a      	ldr	r2, [r7, #4]
 80056e8:	4413      	add	r3, r2
 80056ea:	3304      	adds	r3, #4
 80056ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2201      	movs	r2, #1
 80056f2:	705a      	strb	r2, [r3, #1]
 80056f4:	e00f      	b.n	8005716 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056f6:	78fb      	ldrb	r3, [r7, #3]
 80056f8:	f003 020f 	and.w	r2, r3, #15
 80056fc:	4613      	mov	r3, r2
 80056fe:	00db      	lsls	r3, r3, #3
 8005700:	4413      	add	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005708:	687a      	ldr	r2, [r7, #4]
 800570a:	4413      	add	r3, r2
 800570c:	3304      	adds	r3, #4
 800570e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	2200      	movs	r2, #0
 8005714:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005716:	78fb      	ldrb	r3, [r7, #3]
 8005718:	f003 030f 	and.w	r3, r3, #15
 800571c:	b2da      	uxtb	r2, r3
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005728:	2b01      	cmp	r3, #1
 800572a:	d101      	bne.n	8005730 <HAL_PCD_EP_Close+0x6e>
 800572c:	2302      	movs	r3, #2
 800572e:	e00e      	b.n	800574e <HAL_PCD_EP_Close+0x8c>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	68f9      	ldr	r1, [r7, #12]
 800573e:	4618      	mov	r0, r3
 8005740:	f005 f854 	bl	800a7ec <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b086      	sub	sp, #24
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
 8005762:	460b      	mov	r3, r1
 8005764:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005766:	7afb      	ldrb	r3, [r7, #11]
 8005768:	f003 020f 	and.w	r2, r3, #15
 800576c:	4613      	mov	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	4413      	add	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	3304      	adds	r3, #4
 800577e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	687a      	ldr	r2, [r7, #4]
 8005784:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800578c:	697b      	ldr	r3, [r7, #20]
 800578e:	2200      	movs	r2, #0
 8005790:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2200      	movs	r2, #0
 8005796:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005798:	7afb      	ldrb	r3, [r7, #11]
 800579a:	f003 030f 	and.w	r3, r3, #15
 800579e:	b2da      	uxtb	r2, r3
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d102      	bne.n	80057b2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80057b2:	7afb      	ldrb	r3, [r7, #11]
 80057b4:	f003 030f 	and.w	r3, r3, #15
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d109      	bne.n	80057d0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6818      	ldr	r0, [r3, #0]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	691b      	ldr	r3, [r3, #16]
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	6979      	ldr	r1, [r7, #20]
 80057ca:	f005 fb33 	bl	800ae34 <USB_EP0StartXfer>
 80057ce:	e008      	b.n	80057e2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6818      	ldr	r0, [r3, #0]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	691b      	ldr	r3, [r3, #16]
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	461a      	mov	r2, r3
 80057dc:	6979      	ldr	r1, [r7, #20]
 80057de:	f005 f8e1 	bl	800a9a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3718      	adds	r7, #24
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	460b      	mov	r3, r1
 80057f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80057f8:	78fb      	ldrb	r3, [r7, #3]
 80057fa:	f003 020f 	and.w	r2, r3, #15
 80057fe:	6879      	ldr	r1, [r7, #4]
 8005800:	4613      	mov	r3, r2
 8005802:	00db      	lsls	r3, r3, #3
 8005804:	4413      	add	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	440b      	add	r3, r1
 800580a:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800580e:	681b      	ldr	r3, [r3, #0]
}
 8005810:	4618      	mov	r0, r3
 8005812:	370c      	adds	r7, #12
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	60f8      	str	r0, [r7, #12]
 8005824:	607a      	str	r2, [r7, #4]
 8005826:	603b      	str	r3, [r7, #0]
 8005828:	460b      	mov	r3, r1
 800582a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800582c:	7afb      	ldrb	r3, [r7, #11]
 800582e:	f003 020f 	and.w	r2, r3, #15
 8005832:	4613      	mov	r3, r2
 8005834:	00db      	lsls	r3, r3, #3
 8005836:	4413      	add	r3, r2
 8005838:	009b      	lsls	r3, r3, #2
 800583a:	3338      	adds	r3, #56	; 0x38
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	3304      	adds	r3, #4
 8005842:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	687a      	ldr	r2, [r7, #4]
 8005848:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	2200      	movs	r2, #0
 8005854:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2201      	movs	r2, #1
 800585a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800585c:	7afb      	ldrb	r3, [r7, #11]
 800585e:	f003 030f 	and.w	r3, r3, #15
 8005862:	b2da      	uxtb	r2, r3
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	691b      	ldr	r3, [r3, #16]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d102      	bne.n	8005876 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	697b      	ldr	r3, [r7, #20]
 8005874:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005876:	7afb      	ldrb	r3, [r7, #11]
 8005878:	f003 030f 	and.w	r3, r3, #15
 800587c:	2b00      	cmp	r3, #0
 800587e:	d109      	bne.n	8005894 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6818      	ldr	r0, [r3, #0]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	b2db      	uxtb	r3, r3
 800588a:	461a      	mov	r2, r3
 800588c:	6979      	ldr	r1, [r7, #20]
 800588e:	f005 fad1 	bl	800ae34 <USB_EP0StartXfer>
 8005892:	e008      	b.n	80058a6 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6818      	ldr	r0, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	691b      	ldr	r3, [r3, #16]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	461a      	mov	r2, r3
 80058a0:	6979      	ldr	r1, [r7, #20]
 80058a2:	f005 f87f 	bl	800a9a4 <USB_EPStartXfer>
  }

  return HAL_OK;
 80058a6:	2300      	movs	r3, #0
}
 80058a8:	4618      	mov	r0, r3
 80058aa:	3718      	adds	r7, #24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}

080058b0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
 80058b8:	460b      	mov	r3, r1
 80058ba:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80058bc:	78fb      	ldrb	r3, [r7, #3]
 80058be:	f003 020f 	and.w	r2, r3, #15
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d901      	bls.n	80058ce <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e050      	b.n	8005970 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	da0f      	bge.n	80058f6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058d6:	78fb      	ldrb	r3, [r7, #3]
 80058d8:	f003 020f 	and.w	r2, r3, #15
 80058dc:	4613      	mov	r3, r2
 80058de:	00db      	lsls	r3, r3, #3
 80058e0:	4413      	add	r3, r2
 80058e2:	009b      	lsls	r3, r3, #2
 80058e4:	3338      	adds	r3, #56	; 0x38
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	4413      	add	r3, r2
 80058ea:	3304      	adds	r3, #4
 80058ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2201      	movs	r2, #1
 80058f2:	705a      	strb	r2, [r3, #1]
 80058f4:	e00d      	b.n	8005912 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80058f6:	78fa      	ldrb	r2, [r7, #3]
 80058f8:	4613      	mov	r3, r2
 80058fa:	00db      	lsls	r3, r3, #3
 80058fc:	4413      	add	r3, r2
 80058fe:	009b      	lsls	r3, r3, #2
 8005900:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	4413      	add	r3, r2
 8005908:	3304      	adds	r3, #4
 800590a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2200      	movs	r2, #0
 8005910:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2201      	movs	r2, #1
 8005916:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005918:	78fb      	ldrb	r3, [r7, #3]
 800591a:	f003 030f 	and.w	r3, r3, #15
 800591e:	b2da      	uxtb	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800592a:	2b01      	cmp	r3, #1
 800592c:	d101      	bne.n	8005932 <HAL_PCD_EP_SetStall+0x82>
 800592e:	2302      	movs	r3, #2
 8005930:	e01e      	b.n	8005970 <HAL_PCD_EP_SetStall+0xc0>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	68f9      	ldr	r1, [r7, #12]
 8005940:	4618      	mov	r0, r3
 8005942:	f005 fd0f 	bl	800b364 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005946:	78fb      	ldrb	r3, [r7, #3]
 8005948:	f003 030f 	and.w	r3, r3, #15
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10a      	bne.n	8005966 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6818      	ldr	r0, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	691b      	ldr	r3, [r3, #16]
 8005958:	b2d9      	uxtb	r1, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005960:	461a      	mov	r2, r3
 8005962:	f005 feff 	bl	800b764 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3710      	adds	r7, #16
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	460b      	mov	r3, r1
 8005982:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005984:	78fb      	ldrb	r3, [r7, #3]
 8005986:	f003 020f 	and.w	r2, r3, #15
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	429a      	cmp	r2, r3
 8005990:	d901      	bls.n	8005996 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005992:	2301      	movs	r3, #1
 8005994:	e042      	b.n	8005a1c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005996:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800599a:	2b00      	cmp	r3, #0
 800599c:	da0f      	bge.n	80059be <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800599e:	78fb      	ldrb	r3, [r7, #3]
 80059a0:	f003 020f 	and.w	r2, r3, #15
 80059a4:	4613      	mov	r3, r2
 80059a6:	00db      	lsls	r3, r3, #3
 80059a8:	4413      	add	r3, r2
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	3338      	adds	r3, #56	; 0x38
 80059ae:	687a      	ldr	r2, [r7, #4]
 80059b0:	4413      	add	r3, r2
 80059b2:	3304      	adds	r3, #4
 80059b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2201      	movs	r2, #1
 80059ba:	705a      	strb	r2, [r3, #1]
 80059bc:	e00f      	b.n	80059de <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80059be:	78fb      	ldrb	r3, [r7, #3]
 80059c0:	f003 020f 	and.w	r2, r3, #15
 80059c4:	4613      	mov	r3, r2
 80059c6:	00db      	lsls	r3, r3, #3
 80059c8:	4413      	add	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	4413      	add	r3, r2
 80059d4:	3304      	adds	r3, #4
 80059d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	2200      	movs	r2, #0
 80059e2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80059e4:	78fb      	ldrb	r3, [r7, #3]
 80059e6:	f003 030f 	and.w	r3, r3, #15
 80059ea:	b2da      	uxtb	r2, r3
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d101      	bne.n	80059fe <HAL_PCD_EP_ClrStall+0x86>
 80059fa:	2302      	movs	r3, #2
 80059fc:	e00e      	b.n	8005a1c <HAL_PCD_EP_ClrStall+0xa4>
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	68f9      	ldr	r1, [r7, #12]
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	f005 fd17 	bl	800b440 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	3710      	adds	r7, #16
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd80      	pop	{r7, pc}

08005a24 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b084      	sub	sp, #16
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	460b      	mov	r3, r1
 8005a2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005a30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	da0c      	bge.n	8005a52 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a38:	78fb      	ldrb	r3, [r7, #3]
 8005a3a:	f003 020f 	and.w	r2, r3, #15
 8005a3e:	4613      	mov	r3, r2
 8005a40:	00db      	lsls	r3, r3, #3
 8005a42:	4413      	add	r3, r2
 8005a44:	009b      	lsls	r3, r3, #2
 8005a46:	3338      	adds	r3, #56	; 0x38
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	e00c      	b.n	8005a6c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a52:	78fb      	ldrb	r3, [r7, #3]
 8005a54:	f003 020f 	and.w	r2, r3, #15
 8005a58:	4613      	mov	r3, r2
 8005a5a:	00db      	lsls	r3, r3, #3
 8005a5c:	4413      	add	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	4413      	add	r3, r2
 8005a68:	3304      	adds	r3, #4
 8005a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	68f9      	ldr	r1, [r7, #12]
 8005a72:	4618      	mov	r0, r3
 8005a74:	f005 fb36 	bl	800b0e4 <USB_EPStopXfer>
 8005a78:	4603      	mov	r3, r0
 8005a7a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005a7c:	7afb      	ldrb	r3, [r7, #11]
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b08a      	sub	sp, #40	; 0x28
 8005a8a:	af02      	add	r7, sp, #8
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005a9a:	683a      	ldr	r2, [r7, #0]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	00db      	lsls	r3, r3, #3
 8005aa0:	4413      	add	r3, r2
 8005aa2:	009b      	lsls	r3, r3, #2
 8005aa4:	3338      	adds	r3, #56	; 0x38
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	4413      	add	r3, r2
 8005aaa:	3304      	adds	r3, #4
 8005aac:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6a1a      	ldr	r2, [r3, #32]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d901      	bls.n	8005abe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e06c      	b.n	8005b98 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	699a      	ldr	r2, [r3, #24]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	69fa      	ldr	r2, [r7, #28]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d902      	bls.n	8005ada <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	68db      	ldr	r3, [r3, #12]
 8005ad8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	3303      	adds	r3, #3
 8005ade:	089b      	lsrs	r3, r3, #2
 8005ae0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005ae2:	e02b      	b.n	8005b3c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	699a      	ldr	r2, [r3, #24]
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	6a1b      	ldr	r3, [r3, #32]
 8005aec:	1ad3      	subs	r3, r2, r3
 8005aee:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	69fa      	ldr	r2, [r7, #28]
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d902      	bls.n	8005b00 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	68db      	ldr	r3, [r3, #12]
 8005afe:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005b00:	69fb      	ldr	r3, [r7, #28]
 8005b02:	3303      	adds	r3, #3
 8005b04:	089b      	lsrs	r3, r3, #2
 8005b06:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	6919      	ldr	r1, [r3, #16]
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	69fb      	ldr	r3, [r7, #28]
 8005b12:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	9300      	str	r3, [sp, #0]
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	6978      	ldr	r0, [r7, #20]
 8005b20:	f005 fb8a 	bl	800b238 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	691a      	ldr	r2, [r3, #16]
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	441a      	add	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a1a      	ldr	r2, [r3, #32]
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	441a      	add	r2, r3
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	015a      	lsls	r2, r3, #5
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	4413      	add	r3, r2
 8005b44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b48:	699b      	ldr	r3, [r3, #24]
 8005b4a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b4c:	69ba      	ldr	r2, [r7, #24]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	d809      	bhi.n	8005b66 <PCD_WriteEmptyTxFifo+0xe0>
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a1a      	ldr	r2, [r3, #32]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d203      	bcs.n	8005b66 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	699b      	ldr	r3, [r3, #24]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1be      	bne.n	8005ae4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	699a      	ldr	r2, [r3, #24]
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6a1b      	ldr	r3, [r3, #32]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d811      	bhi.n	8005b96 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	f003 030f 	and.w	r3, r3, #15
 8005b78:	2201      	movs	r2, #1
 8005b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b7e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	43db      	mvns	r3, r3
 8005b8c:	6939      	ldr	r1, [r7, #16]
 8005b8e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b92:	4013      	ands	r3, r2
 8005b94:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005b96:	2300      	movs	r3, #0
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3720      	adds	r7, #32
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b088      	sub	sp, #32
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	333c      	adds	r3, #60	; 0x3c
 8005bb8:	3304      	adds	r3, #4
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	015a      	lsls	r2, r3, #5
 8005bc2:	69bb      	ldr	r3, [r7, #24]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d17b      	bne.n	8005cce <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005bd6:	693b      	ldr	r3, [r7, #16]
 8005bd8:	f003 0308 	and.w	r3, r3, #8
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d015      	beq.n	8005c0c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	4a61      	ldr	r2, [pc, #388]	; (8005d68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005be4:	4293      	cmp	r3, r2
 8005be6:	f240 80b9 	bls.w	8005d5c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	f000 80b3 	beq.w	8005d5c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	015a      	lsls	r2, r3, #5
 8005bfa:	69bb      	ldr	r3, [r7, #24]
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c02:	461a      	mov	r2, r3
 8005c04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c08:	6093      	str	r3, [r2, #8]
 8005c0a:	e0a7      	b.n	8005d5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005c0c:	693b      	ldr	r3, [r7, #16]
 8005c0e:	f003 0320 	and.w	r3, r3, #32
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d009      	beq.n	8005c2a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	015a      	lsls	r2, r3, #5
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c22:	461a      	mov	r2, r3
 8005c24:	2320      	movs	r3, #32
 8005c26:	6093      	str	r3, [r2, #8]
 8005c28:	e098      	b.n	8005d5c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f040 8093 	bne.w	8005d5c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	4a4b      	ldr	r2, [pc, #300]	; (8005d68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d90f      	bls.n	8005c5e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d00a      	beq.n	8005c5e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c54:	461a      	mov	r2, r3
 8005c56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c5a:	6093      	str	r3, [r2, #8]
 8005c5c:	e07e      	b.n	8005d5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005c5e:	683a      	ldr	r2, [r7, #0]
 8005c60:	4613      	mov	r3, r2
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	4413      	add	r3, r2
 8005c66:	009b      	lsls	r3, r3, #2
 8005c68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c6c:	687a      	ldr	r2, [r7, #4]
 8005c6e:	4413      	add	r3, r2
 8005c70:	3304      	adds	r3, #4
 8005c72:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	69da      	ldr	r2, [r3, #28]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	0159      	lsls	r1, r3, #5
 8005c7c:	69bb      	ldr	r3, [r7, #24]
 8005c7e:	440b      	add	r3, r1
 8005c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c8a:	1ad2      	subs	r2, r2, r3
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d114      	bne.n	8005cc0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	699b      	ldr	r3, [r3, #24]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d109      	bne.n	8005cb2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6818      	ldr	r0, [r3, #0]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005ca8:	461a      	mov	r2, r3
 8005caa:	2101      	movs	r1, #1
 8005cac:	f005 fd5a 	bl	800b764 <USB_EP0_OutStart>
 8005cb0:	e006      	b.n	8005cc0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	691a      	ldr	r2, [r3, #16]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6a1b      	ldr	r3, [r3, #32]
 8005cba:	441a      	add	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f008 fac8 	bl	800e25c <HAL_PCD_DataOutStageCallback>
 8005ccc:	e046      	b.n	8005d5c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005cce:	697b      	ldr	r3, [r7, #20]
 8005cd0:	4a26      	ldr	r2, [pc, #152]	; (8005d6c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d124      	bne.n	8005d20 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00a      	beq.n	8005cf6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cec:	461a      	mov	r2, r3
 8005cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cf2:	6093      	str	r3, [r2, #8]
 8005cf4:	e032      	b.n	8005d5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	f003 0320 	and.w	r3, r3, #32
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d008      	beq.n	8005d12 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	2320      	movs	r3, #32
 8005d10:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	4619      	mov	r1, r3
 8005d18:	6878      	ldr	r0, [r7, #4]
 8005d1a:	f008 fa9f 	bl	800e25c <HAL_PCD_DataOutStageCallback>
 8005d1e:	e01d      	b.n	8005d5c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d114      	bne.n	8005d50 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005d26:	6879      	ldr	r1, [r7, #4]
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d108      	bne.n	8005d50 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6818      	ldr	r0, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005d48:	461a      	mov	r2, r3
 8005d4a:	2100      	movs	r1, #0
 8005d4c:	f005 fd0a 	bl	800b764 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	4619      	mov	r1, r3
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f008 fa80 	bl	800e25c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3720      	adds	r7, #32
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	4f54300a 	.word	0x4f54300a
 8005d6c:	4f54310a 	.word	0x4f54310a

08005d70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	333c      	adds	r3, #60	; 0x3c
 8005d88:	3304      	adds	r3, #4
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	015a      	lsls	r2, r3, #5
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	4413      	add	r3, r2
 8005d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4a15      	ldr	r2, [pc, #84]	; (8005df8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d90e      	bls.n	8005dc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005da6:	68bb      	ldr	r3, [r7, #8]
 8005da8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d009      	beq.n	8005dc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	015a      	lsls	r2, r3, #5
 8005db4:	693b      	ldr	r3, [r7, #16]
 8005db6:	4413      	add	r3, r2
 8005db8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dbc:	461a      	mov	r2, r3
 8005dbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005dc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f008 fa37 	bl	800e238 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	4a0a      	ldr	r2, [pc, #40]	; (8005df8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d90c      	bls.n	8005dec <PCD_EP_OutSetupPacket_int+0x7c>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d108      	bne.n	8005dec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6818      	ldr	r0, [r3, #0]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005de4:	461a      	mov	r2, r3
 8005de6:	2101      	movs	r1, #1
 8005de8:	f005 fcbc 	bl	800b764 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3718      	adds	r7, #24
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	4f54300a 	.word	0x4f54300a

08005dfc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005dfc:	b480      	push	{r7}
 8005dfe:	b085      	sub	sp, #20
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
 8005e04:	460b      	mov	r3, r1
 8005e06:	70fb      	strb	r3, [r7, #3]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e12:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005e14:	78fb      	ldrb	r3, [r7, #3]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d107      	bne.n	8005e2a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005e1a:	883b      	ldrh	r3, [r7, #0]
 8005e1c:	0419      	lsls	r1, r3, #16
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	68ba      	ldr	r2, [r7, #8]
 8005e24:	430a      	orrs	r2, r1
 8005e26:	629a      	str	r2, [r3, #40]	; 0x28
 8005e28:	e028      	b.n	8005e7c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e30:	0c1b      	lsrs	r3, r3, #16
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	4413      	add	r3, r2
 8005e36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e38:	2300      	movs	r3, #0
 8005e3a:	73fb      	strb	r3, [r7, #15]
 8005e3c:	e00d      	b.n	8005e5a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	7bfb      	ldrb	r3, [r7, #15]
 8005e44:	3340      	adds	r3, #64	; 0x40
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	4413      	add	r3, r2
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	0c1b      	lsrs	r3, r3, #16
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	4413      	add	r3, r2
 8005e52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005e54:	7bfb      	ldrb	r3, [r7, #15]
 8005e56:	3301      	adds	r3, #1
 8005e58:	73fb      	strb	r3, [r7, #15]
 8005e5a:	7bfa      	ldrb	r2, [r7, #15]
 8005e5c:	78fb      	ldrb	r3, [r7, #3]
 8005e5e:	3b01      	subs	r3, #1
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d3ec      	bcc.n	8005e3e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005e64:	883b      	ldrh	r3, [r7, #0]
 8005e66:	0418      	lsls	r0, r3, #16
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6819      	ldr	r1, [r3, #0]
 8005e6c:	78fb      	ldrb	r3, [r7, #3]
 8005e6e:	3b01      	subs	r3, #1
 8005e70:	68ba      	ldr	r2, [r7, #8]
 8005e72:	4302      	orrs	r2, r0
 8005e74:	3340      	adds	r3, #64	; 0x40
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	440b      	add	r3, r1
 8005e7a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b083      	sub	sp, #12
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	460b      	mov	r3, r1
 8005e94:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	887a      	ldrh	r2, [r7, #2]
 8005e9c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	460b      	mov	r3, r1
 8005eb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr

08005ec4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d101      	bne.n	8005ed6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e267      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 0301 	and.w	r3, r3, #1
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d075      	beq.n	8005fce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ee2:	4b88      	ldr	r3, [pc, #544]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005ee4:	689b      	ldr	r3, [r3, #8]
 8005ee6:	f003 030c 	and.w	r3, r3, #12
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d00c      	beq.n	8005f08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005eee:	4b85      	ldr	r3, [pc, #532]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d112      	bne.n	8005f20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005efa:	4b82      	ldr	r3, [pc, #520]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005efc:	685b      	ldr	r3, [r3, #4]
 8005efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f06:	d10b      	bne.n	8005f20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f08:	4b7e      	ldr	r3, [pc, #504]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d05b      	beq.n	8005fcc <HAL_RCC_OscConfig+0x108>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d157      	bne.n	8005fcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	e242      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f28:	d106      	bne.n	8005f38 <HAL_RCC_OscConfig+0x74>
 8005f2a:	4b76      	ldr	r3, [pc, #472]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	4a75      	ldr	r2, [pc, #468]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f34:	6013      	str	r3, [r2, #0]
 8005f36:	e01d      	b.n	8005f74 <HAL_RCC_OscConfig+0xb0>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f40:	d10c      	bne.n	8005f5c <HAL_RCC_OscConfig+0x98>
 8005f42:	4b70      	ldr	r3, [pc, #448]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	4a6f      	ldr	r2, [pc, #444]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f4c:	6013      	str	r3, [r2, #0]
 8005f4e:	4b6d      	ldr	r3, [pc, #436]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a6c      	ldr	r2, [pc, #432]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f58:	6013      	str	r3, [r2, #0]
 8005f5a:	e00b      	b.n	8005f74 <HAL_RCC_OscConfig+0xb0>
 8005f5c:	4b69      	ldr	r3, [pc, #420]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a68      	ldr	r2, [pc, #416]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f66:	6013      	str	r3, [r2, #0]
 8005f68:	4b66      	ldr	r3, [pc, #408]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a65      	ldr	r2, [pc, #404]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d013      	beq.n	8005fa4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f7c:	f7fc fe72 	bl	8002c64 <HAL_GetTick>
 8005f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f82:	e008      	b.n	8005f96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f84:	f7fc fe6e 	bl	8002c64 <HAL_GetTick>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1ad3      	subs	r3, r2, r3
 8005f8e:	2b64      	cmp	r3, #100	; 0x64
 8005f90:	d901      	bls.n	8005f96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f92:	2303      	movs	r3, #3
 8005f94:	e207      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f96:	4b5b      	ldr	r3, [pc, #364]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d0f0      	beq.n	8005f84 <HAL_RCC_OscConfig+0xc0>
 8005fa2:	e014      	b.n	8005fce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fa4:	f7fc fe5e 	bl	8002c64 <HAL_GetTick>
 8005fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005faa:	e008      	b.n	8005fbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005fac:	f7fc fe5a 	bl	8002c64 <HAL_GetTick>
 8005fb0:	4602      	mov	r2, r0
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	1ad3      	subs	r3, r2, r3
 8005fb6:	2b64      	cmp	r3, #100	; 0x64
 8005fb8:	d901      	bls.n	8005fbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e1f3      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fbe:	4b51      	ldr	r3, [pc, #324]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d1f0      	bne.n	8005fac <HAL_RCC_OscConfig+0xe8>
 8005fca:	e000      	b.n	8005fce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d063      	beq.n	80060a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fda:	4b4a      	ldr	r3, [pc, #296]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 030c 	and.w	r3, r3, #12
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00b      	beq.n	8005ffe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fe6:	4b47      	ldr	r3, [pc, #284]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fee:	2b08      	cmp	r3, #8
 8005ff0:	d11c      	bne.n	800602c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005ff2:	4b44      	ldr	r3, [pc, #272]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d116      	bne.n	800602c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ffe:	4b41      	ldr	r3, [pc, #260]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	f003 0302 	and.w	r3, r3, #2
 8006006:	2b00      	cmp	r3, #0
 8006008:	d005      	beq.n	8006016 <HAL_RCC_OscConfig+0x152>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	2b01      	cmp	r3, #1
 8006010:	d001      	beq.n	8006016 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006012:	2301      	movs	r3, #1
 8006014:	e1c7      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006016:	4b3b      	ldr	r3, [pc, #236]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	00db      	lsls	r3, r3, #3
 8006024:	4937      	ldr	r1, [pc, #220]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8006026:	4313      	orrs	r3, r2
 8006028:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800602a:	e03a      	b.n	80060a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68db      	ldr	r3, [r3, #12]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d020      	beq.n	8006076 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006034:	4b34      	ldr	r3, [pc, #208]	; (8006108 <HAL_RCC_OscConfig+0x244>)
 8006036:	2201      	movs	r2, #1
 8006038:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800603a:	f7fc fe13 	bl	8002c64 <HAL_GetTick>
 800603e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006040:	e008      	b.n	8006054 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006042:	f7fc fe0f 	bl	8002c64 <HAL_GetTick>
 8006046:	4602      	mov	r2, r0
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	2b02      	cmp	r3, #2
 800604e:	d901      	bls.n	8006054 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006050:	2303      	movs	r3, #3
 8006052:	e1a8      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006054:	4b2b      	ldr	r3, [pc, #172]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0302 	and.w	r3, r3, #2
 800605c:	2b00      	cmp	r3, #0
 800605e:	d0f0      	beq.n	8006042 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006060:	4b28      	ldr	r3, [pc, #160]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	691b      	ldr	r3, [r3, #16]
 800606c:	00db      	lsls	r3, r3, #3
 800606e:	4925      	ldr	r1, [pc, #148]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8006070:	4313      	orrs	r3, r2
 8006072:	600b      	str	r3, [r1, #0]
 8006074:	e015      	b.n	80060a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006076:	4b24      	ldr	r3, [pc, #144]	; (8006108 <HAL_RCC_OscConfig+0x244>)
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607c:	f7fc fdf2 	bl	8002c64 <HAL_GetTick>
 8006080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006082:	e008      	b.n	8006096 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006084:	f7fc fdee 	bl	8002c64 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b02      	cmp	r3, #2
 8006090:	d901      	bls.n	8006096 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e187      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006096:	4b1b      	ldr	r3, [pc, #108]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d1f0      	bne.n	8006084 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f003 0308 	and.w	r3, r3, #8
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d036      	beq.n	800611c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d016      	beq.n	80060e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80060b6:	4b15      	ldr	r3, [pc, #84]	; (800610c <HAL_RCC_OscConfig+0x248>)
 80060b8:	2201      	movs	r2, #1
 80060ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80060bc:	f7fc fdd2 	bl	8002c64 <HAL_GetTick>
 80060c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060c2:	e008      	b.n	80060d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060c4:	f7fc fdce 	bl	8002c64 <HAL_GetTick>
 80060c8:	4602      	mov	r2, r0
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1ad3      	subs	r3, r2, r3
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d901      	bls.n	80060d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060d2:	2303      	movs	r3, #3
 80060d4:	e167      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060d6:	4b0b      	ldr	r3, [pc, #44]	; (8006104 <HAL_RCC_OscConfig+0x240>)
 80060d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060da:	f003 0302 	and.w	r3, r3, #2
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d0f0      	beq.n	80060c4 <HAL_RCC_OscConfig+0x200>
 80060e2:	e01b      	b.n	800611c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060e4:	4b09      	ldr	r3, [pc, #36]	; (800610c <HAL_RCC_OscConfig+0x248>)
 80060e6:	2200      	movs	r2, #0
 80060e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ea:	f7fc fdbb 	bl	8002c64 <HAL_GetTick>
 80060ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060f0:	e00e      	b.n	8006110 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060f2:	f7fc fdb7 	bl	8002c64 <HAL_GetTick>
 80060f6:	4602      	mov	r2, r0
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	1ad3      	subs	r3, r2, r3
 80060fc:	2b02      	cmp	r3, #2
 80060fe:	d907      	bls.n	8006110 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e150      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
 8006104:	40023800 	.word	0x40023800
 8006108:	42470000 	.word	0x42470000
 800610c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006110:	4b88      	ldr	r3, [pc, #544]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 8006112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006114:	f003 0302 	and.w	r3, r3, #2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d1ea      	bne.n	80060f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 8097 	beq.w	8006258 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800612a:	2300      	movs	r3, #0
 800612c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800612e:	4b81      	ldr	r3, [pc, #516]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 8006130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006136:	2b00      	cmp	r3, #0
 8006138:	d10f      	bne.n	800615a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800613a:	2300      	movs	r3, #0
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	4b7d      	ldr	r3, [pc, #500]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	4a7c      	ldr	r2, [pc, #496]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 8006144:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006148:	6413      	str	r3, [r2, #64]	; 0x40
 800614a:	4b7a      	ldr	r3, [pc, #488]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 800614c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800614e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006152:	60bb      	str	r3, [r7, #8]
 8006154:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006156:	2301      	movs	r3, #1
 8006158:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800615a:	4b77      	ldr	r3, [pc, #476]	; (8006338 <HAL_RCC_OscConfig+0x474>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006162:	2b00      	cmp	r3, #0
 8006164:	d118      	bne.n	8006198 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006166:	4b74      	ldr	r3, [pc, #464]	; (8006338 <HAL_RCC_OscConfig+0x474>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a73      	ldr	r2, [pc, #460]	; (8006338 <HAL_RCC_OscConfig+0x474>)
 800616c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006170:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006172:	f7fc fd77 	bl	8002c64 <HAL_GetTick>
 8006176:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006178:	e008      	b.n	800618c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800617a:	f7fc fd73 	bl	8002c64 <HAL_GetTick>
 800617e:	4602      	mov	r2, r0
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	1ad3      	subs	r3, r2, r3
 8006184:	2b02      	cmp	r3, #2
 8006186:	d901      	bls.n	800618c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006188:	2303      	movs	r3, #3
 800618a:	e10c      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800618c:	4b6a      	ldr	r3, [pc, #424]	; (8006338 <HAL_RCC_OscConfig+0x474>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006194:	2b00      	cmp	r3, #0
 8006196:	d0f0      	beq.n	800617a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	689b      	ldr	r3, [r3, #8]
 800619c:	2b01      	cmp	r3, #1
 800619e:	d106      	bne.n	80061ae <HAL_RCC_OscConfig+0x2ea>
 80061a0:	4b64      	ldr	r3, [pc, #400]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80061a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a4:	4a63      	ldr	r2, [pc, #396]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80061a6:	f043 0301 	orr.w	r3, r3, #1
 80061aa:	6713      	str	r3, [r2, #112]	; 0x70
 80061ac:	e01c      	b.n	80061e8 <HAL_RCC_OscConfig+0x324>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	689b      	ldr	r3, [r3, #8]
 80061b2:	2b05      	cmp	r3, #5
 80061b4:	d10c      	bne.n	80061d0 <HAL_RCC_OscConfig+0x30c>
 80061b6:	4b5f      	ldr	r3, [pc, #380]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80061b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ba:	4a5e      	ldr	r2, [pc, #376]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80061bc:	f043 0304 	orr.w	r3, r3, #4
 80061c0:	6713      	str	r3, [r2, #112]	; 0x70
 80061c2:	4b5c      	ldr	r3, [pc, #368]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80061c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061c6:	4a5b      	ldr	r2, [pc, #364]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80061c8:	f043 0301 	orr.w	r3, r3, #1
 80061cc:	6713      	str	r3, [r2, #112]	; 0x70
 80061ce:	e00b      	b.n	80061e8 <HAL_RCC_OscConfig+0x324>
 80061d0:	4b58      	ldr	r3, [pc, #352]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80061d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061d4:	4a57      	ldr	r2, [pc, #348]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80061d6:	f023 0301 	bic.w	r3, r3, #1
 80061da:	6713      	str	r3, [r2, #112]	; 0x70
 80061dc:	4b55      	ldr	r3, [pc, #340]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80061de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e0:	4a54      	ldr	r2, [pc, #336]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80061e2:	f023 0304 	bic.w	r3, r3, #4
 80061e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d015      	beq.n	800621c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061f0:	f7fc fd38 	bl	8002c64 <HAL_GetTick>
 80061f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061f6:	e00a      	b.n	800620e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061f8:	f7fc fd34 	bl	8002c64 <HAL_GetTick>
 80061fc:	4602      	mov	r2, r0
 80061fe:	693b      	ldr	r3, [r7, #16]
 8006200:	1ad3      	subs	r3, r2, r3
 8006202:	f241 3288 	movw	r2, #5000	; 0x1388
 8006206:	4293      	cmp	r3, r2
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e0cb      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800620e:	4b49      	ldr	r3, [pc, #292]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 8006210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006212:	f003 0302 	and.w	r3, r3, #2
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0ee      	beq.n	80061f8 <HAL_RCC_OscConfig+0x334>
 800621a:	e014      	b.n	8006246 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800621c:	f7fc fd22 	bl	8002c64 <HAL_GetTick>
 8006220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006222:	e00a      	b.n	800623a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006224:	f7fc fd1e 	bl	8002c64 <HAL_GetTick>
 8006228:	4602      	mov	r2, r0
 800622a:	693b      	ldr	r3, [r7, #16]
 800622c:	1ad3      	subs	r3, r2, r3
 800622e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006232:	4293      	cmp	r3, r2
 8006234:	d901      	bls.n	800623a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006236:	2303      	movs	r3, #3
 8006238:	e0b5      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800623a:	4b3e      	ldr	r3, [pc, #248]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 800623c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800623e:	f003 0302 	and.w	r3, r3, #2
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1ee      	bne.n	8006224 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006246:	7dfb      	ldrb	r3, [r7, #23]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d105      	bne.n	8006258 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800624c:	4b39      	ldr	r3, [pc, #228]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 800624e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006250:	4a38      	ldr	r2, [pc, #224]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 8006252:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006256:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 80a1 	beq.w	80063a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006262:	4b34      	ldr	r3, [pc, #208]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f003 030c 	and.w	r3, r3, #12
 800626a:	2b08      	cmp	r3, #8
 800626c:	d05c      	beq.n	8006328 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	699b      	ldr	r3, [r3, #24]
 8006272:	2b02      	cmp	r3, #2
 8006274:	d141      	bne.n	80062fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006276:	4b31      	ldr	r3, [pc, #196]	; (800633c <HAL_RCC_OscConfig+0x478>)
 8006278:	2200      	movs	r2, #0
 800627a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800627c:	f7fc fcf2 	bl	8002c64 <HAL_GetTick>
 8006280:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006282:	e008      	b.n	8006296 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006284:	f7fc fcee 	bl	8002c64 <HAL_GetTick>
 8006288:	4602      	mov	r2, r0
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	2b02      	cmp	r3, #2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e087      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006296:	4b27      	ldr	r3, [pc, #156]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d1f0      	bne.n	8006284 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69da      	ldr	r2, [r3, #28]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6a1b      	ldr	r3, [r3, #32]
 80062aa:	431a      	orrs	r2, r3
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b0:	019b      	lsls	r3, r3, #6
 80062b2:	431a      	orrs	r2, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b8:	085b      	lsrs	r3, r3, #1
 80062ba:	3b01      	subs	r3, #1
 80062bc:	041b      	lsls	r3, r3, #16
 80062be:	431a      	orrs	r2, r3
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062c4:	061b      	lsls	r3, r3, #24
 80062c6:	491b      	ldr	r1, [pc, #108]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80062c8:	4313      	orrs	r3, r2
 80062ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80062cc:	4b1b      	ldr	r3, [pc, #108]	; (800633c <HAL_RCC_OscConfig+0x478>)
 80062ce:	2201      	movs	r2, #1
 80062d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d2:	f7fc fcc7 	bl	8002c64 <HAL_GetTick>
 80062d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062d8:	e008      	b.n	80062ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062da:	f7fc fcc3 	bl	8002c64 <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	2b02      	cmp	r3, #2
 80062e6:	d901      	bls.n	80062ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e05c      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062ec:	4b11      	ldr	r3, [pc, #68]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d0f0      	beq.n	80062da <HAL_RCC_OscConfig+0x416>
 80062f8:	e054      	b.n	80063a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062fa:	4b10      	ldr	r3, [pc, #64]	; (800633c <HAL_RCC_OscConfig+0x478>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006300:	f7fc fcb0 	bl	8002c64 <HAL_GetTick>
 8006304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006306:	e008      	b.n	800631a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006308:	f7fc fcac 	bl	8002c64 <HAL_GetTick>
 800630c:	4602      	mov	r2, r0
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	1ad3      	subs	r3, r2, r3
 8006312:	2b02      	cmp	r3, #2
 8006314:	d901      	bls.n	800631a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006316:	2303      	movs	r3, #3
 8006318:	e045      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800631a:	4b06      	ldr	r3, [pc, #24]	; (8006334 <HAL_RCC_OscConfig+0x470>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d1f0      	bne.n	8006308 <HAL_RCC_OscConfig+0x444>
 8006326:	e03d      	b.n	80063a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d107      	bne.n	8006340 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006330:	2301      	movs	r3, #1
 8006332:	e038      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
 8006334:	40023800 	.word	0x40023800
 8006338:	40007000 	.word	0x40007000
 800633c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006340:	4b1b      	ldr	r3, [pc, #108]	; (80063b0 <HAL_RCC_OscConfig+0x4ec>)
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	699b      	ldr	r3, [r3, #24]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d028      	beq.n	80063a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006358:	429a      	cmp	r2, r3
 800635a:	d121      	bne.n	80063a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006366:	429a      	cmp	r2, r3
 8006368:	d11a      	bne.n	80063a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006370:	4013      	ands	r3, r2
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006376:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006378:	4293      	cmp	r3, r2
 800637a:	d111      	bne.n	80063a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006386:	085b      	lsrs	r3, r3, #1
 8006388:	3b01      	subs	r3, #1
 800638a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800638c:	429a      	cmp	r2, r3
 800638e:	d107      	bne.n	80063a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800639c:	429a      	cmp	r2, r3
 800639e:	d001      	beq.n	80063a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e000      	b.n	80063a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80063a4:	2300      	movs	r3, #0
}
 80063a6:	4618      	mov	r0, r3
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	40023800 	.word	0x40023800

080063b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b084      	sub	sp, #16
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d101      	bne.n	80063c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063c4:	2301      	movs	r3, #1
 80063c6:	e0cc      	b.n	8006562 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80063c8:	4b68      	ldr	r3, [pc, #416]	; (800656c <HAL_RCC_ClockConfig+0x1b8>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f003 0307 	and.w	r3, r3, #7
 80063d0:	683a      	ldr	r2, [r7, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d90c      	bls.n	80063f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063d6:	4b65      	ldr	r3, [pc, #404]	; (800656c <HAL_RCC_ClockConfig+0x1b8>)
 80063d8:	683a      	ldr	r2, [r7, #0]
 80063da:	b2d2      	uxtb	r2, r2
 80063dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063de:	4b63      	ldr	r3, [pc, #396]	; (800656c <HAL_RCC_ClockConfig+0x1b8>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d001      	beq.n	80063f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e0b8      	b.n	8006562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d020      	beq.n	800643e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f003 0304 	and.w	r3, r3, #4
 8006404:	2b00      	cmp	r3, #0
 8006406:	d005      	beq.n	8006414 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006408:	4b59      	ldr	r3, [pc, #356]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	4a58      	ldr	r2, [pc, #352]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 800640e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006412:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f003 0308 	and.w	r3, r3, #8
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006420:	4b53      	ldr	r3, [pc, #332]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 8006422:	689b      	ldr	r3, [r3, #8]
 8006424:	4a52      	ldr	r2, [pc, #328]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 8006426:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800642a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800642c:	4b50      	ldr	r3, [pc, #320]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	494d      	ldr	r1, [pc, #308]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 800643a:	4313      	orrs	r3, r2
 800643c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0301 	and.w	r3, r3, #1
 8006446:	2b00      	cmp	r3, #0
 8006448:	d044      	beq.n	80064d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b01      	cmp	r3, #1
 8006450:	d107      	bne.n	8006462 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006452:	4b47      	ldr	r3, [pc, #284]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800645a:	2b00      	cmp	r3, #0
 800645c:	d119      	bne.n	8006492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e07f      	b.n	8006562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	2b02      	cmp	r3, #2
 8006468:	d003      	beq.n	8006472 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800646e:	2b03      	cmp	r3, #3
 8006470:	d107      	bne.n	8006482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006472:	4b3f      	ldr	r3, [pc, #252]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800647a:	2b00      	cmp	r3, #0
 800647c:	d109      	bne.n	8006492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e06f      	b.n	8006562 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006482:	4b3b      	ldr	r3, [pc, #236]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b00      	cmp	r3, #0
 800648c:	d101      	bne.n	8006492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800648e:	2301      	movs	r3, #1
 8006490:	e067      	b.n	8006562 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006492:	4b37      	ldr	r3, [pc, #220]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f023 0203 	bic.w	r2, r3, #3
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	4934      	ldr	r1, [pc, #208]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 80064a0:	4313      	orrs	r3, r2
 80064a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80064a4:	f7fc fbde 	bl	8002c64 <HAL_GetTick>
 80064a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064aa:	e00a      	b.n	80064c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80064ac:	f7fc fbda 	bl	8002c64 <HAL_GetTick>
 80064b0:	4602      	mov	r2, r0
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	1ad3      	subs	r3, r2, r3
 80064b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d901      	bls.n	80064c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e04f      	b.n	8006562 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064c2:	4b2b      	ldr	r3, [pc, #172]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 80064c4:	689b      	ldr	r3, [r3, #8]
 80064c6:	f003 020c 	and.w	r2, r3, #12
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	009b      	lsls	r3, r3, #2
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d1eb      	bne.n	80064ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064d4:	4b25      	ldr	r3, [pc, #148]	; (800656c <HAL_RCC_ClockConfig+0x1b8>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	f003 0307 	and.w	r3, r3, #7
 80064dc:	683a      	ldr	r2, [r7, #0]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d20c      	bcs.n	80064fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064e2:	4b22      	ldr	r3, [pc, #136]	; (800656c <HAL_RCC_ClockConfig+0x1b8>)
 80064e4:	683a      	ldr	r2, [r7, #0]
 80064e6:	b2d2      	uxtb	r2, r2
 80064e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ea:	4b20      	ldr	r3, [pc, #128]	; (800656c <HAL_RCC_ClockConfig+0x1b8>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0307 	and.w	r3, r3, #7
 80064f2:	683a      	ldr	r2, [r7, #0]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d001      	beq.n	80064fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	e032      	b.n	8006562 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f003 0304 	and.w	r3, r3, #4
 8006504:	2b00      	cmp	r3, #0
 8006506:	d008      	beq.n	800651a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006508:	4b19      	ldr	r3, [pc, #100]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 800650a:	689b      	ldr	r3, [r3, #8]
 800650c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	68db      	ldr	r3, [r3, #12]
 8006514:	4916      	ldr	r1, [pc, #88]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 8006516:	4313      	orrs	r3, r2
 8006518:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0308 	and.w	r3, r3, #8
 8006522:	2b00      	cmp	r3, #0
 8006524:	d009      	beq.n	800653a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006526:	4b12      	ldr	r3, [pc, #72]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	490e      	ldr	r1, [pc, #56]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 8006536:	4313      	orrs	r3, r2
 8006538:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800653a:	f000 f821 	bl	8006580 <HAL_RCC_GetSysClockFreq>
 800653e:	4602      	mov	r2, r0
 8006540:	4b0b      	ldr	r3, [pc, #44]	; (8006570 <HAL_RCC_ClockConfig+0x1bc>)
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	091b      	lsrs	r3, r3, #4
 8006546:	f003 030f 	and.w	r3, r3, #15
 800654a:	490a      	ldr	r1, [pc, #40]	; (8006574 <HAL_RCC_ClockConfig+0x1c0>)
 800654c:	5ccb      	ldrb	r3, [r1, r3]
 800654e:	fa22 f303 	lsr.w	r3, r2, r3
 8006552:	4a09      	ldr	r2, [pc, #36]	; (8006578 <HAL_RCC_ClockConfig+0x1c4>)
 8006554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006556:	4b09      	ldr	r3, [pc, #36]	; (800657c <HAL_RCC_ClockConfig+0x1c8>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4618      	mov	r0, r3
 800655c:	f7fc fb3e 	bl	8002bdc <HAL_InitTick>

  return HAL_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3710      	adds	r7, #16
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}
 800656a:	bf00      	nop
 800656c:	40023c00 	.word	0x40023c00
 8006570:	40023800 	.word	0x40023800
 8006574:	0801249c 	.word	0x0801249c
 8006578:	20000000 	.word	0x20000000
 800657c:	20000004 	.word	0x20000004

08006580 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006580:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006584:	b090      	sub	sp, #64	; 0x40
 8006586:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006588:	2300      	movs	r3, #0
 800658a:	637b      	str	r3, [r7, #52]	; 0x34
 800658c:	2300      	movs	r3, #0
 800658e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006590:	2300      	movs	r3, #0
 8006592:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006594:	2300      	movs	r3, #0
 8006596:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006598:	4b59      	ldr	r3, [pc, #356]	; (8006700 <HAL_RCC_GetSysClockFreq+0x180>)
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	f003 030c 	and.w	r3, r3, #12
 80065a0:	2b08      	cmp	r3, #8
 80065a2:	d00d      	beq.n	80065c0 <HAL_RCC_GetSysClockFreq+0x40>
 80065a4:	2b08      	cmp	r3, #8
 80065a6:	f200 80a1 	bhi.w	80066ec <HAL_RCC_GetSysClockFreq+0x16c>
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d002      	beq.n	80065b4 <HAL_RCC_GetSysClockFreq+0x34>
 80065ae:	2b04      	cmp	r3, #4
 80065b0:	d003      	beq.n	80065ba <HAL_RCC_GetSysClockFreq+0x3a>
 80065b2:	e09b      	b.n	80066ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80065b4:	4b53      	ldr	r3, [pc, #332]	; (8006704 <HAL_RCC_GetSysClockFreq+0x184>)
 80065b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80065b8:	e09b      	b.n	80066f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80065ba:	4b53      	ldr	r3, [pc, #332]	; (8006708 <HAL_RCC_GetSysClockFreq+0x188>)
 80065bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80065be:	e098      	b.n	80066f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80065c0:	4b4f      	ldr	r3, [pc, #316]	; (8006700 <HAL_RCC_GetSysClockFreq+0x180>)
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80065ca:	4b4d      	ldr	r3, [pc, #308]	; (8006700 <HAL_RCC_GetSysClockFreq+0x180>)
 80065cc:	685b      	ldr	r3, [r3, #4]
 80065ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d028      	beq.n	8006628 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065d6:	4b4a      	ldr	r3, [pc, #296]	; (8006700 <HAL_RCC_GetSysClockFreq+0x180>)
 80065d8:	685b      	ldr	r3, [r3, #4]
 80065da:	099b      	lsrs	r3, r3, #6
 80065dc:	2200      	movs	r2, #0
 80065de:	623b      	str	r3, [r7, #32]
 80065e0:	627a      	str	r2, [r7, #36]	; 0x24
 80065e2:	6a3b      	ldr	r3, [r7, #32]
 80065e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80065e8:	2100      	movs	r1, #0
 80065ea:	4b47      	ldr	r3, [pc, #284]	; (8006708 <HAL_RCC_GetSysClockFreq+0x188>)
 80065ec:	fb03 f201 	mul.w	r2, r3, r1
 80065f0:	2300      	movs	r3, #0
 80065f2:	fb00 f303 	mul.w	r3, r0, r3
 80065f6:	4413      	add	r3, r2
 80065f8:	4a43      	ldr	r2, [pc, #268]	; (8006708 <HAL_RCC_GetSysClockFreq+0x188>)
 80065fa:	fba0 1202 	umull	r1, r2, r0, r2
 80065fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006600:	460a      	mov	r2, r1
 8006602:	62ba      	str	r2, [r7, #40]	; 0x28
 8006604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006606:	4413      	add	r3, r2
 8006608:	62fb      	str	r3, [r7, #44]	; 0x2c
 800660a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800660c:	2200      	movs	r2, #0
 800660e:	61bb      	str	r3, [r7, #24]
 8006610:	61fa      	str	r2, [r7, #28]
 8006612:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006616:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800661a:	f7fa fac5 	bl	8000ba8 <__aeabi_uldivmod>
 800661e:	4602      	mov	r2, r0
 8006620:	460b      	mov	r3, r1
 8006622:	4613      	mov	r3, r2
 8006624:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006626:	e053      	b.n	80066d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006628:	4b35      	ldr	r3, [pc, #212]	; (8006700 <HAL_RCC_GetSysClockFreq+0x180>)
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	099b      	lsrs	r3, r3, #6
 800662e:	2200      	movs	r2, #0
 8006630:	613b      	str	r3, [r7, #16]
 8006632:	617a      	str	r2, [r7, #20]
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800663a:	f04f 0b00 	mov.w	fp, #0
 800663e:	4652      	mov	r2, sl
 8006640:	465b      	mov	r3, fp
 8006642:	f04f 0000 	mov.w	r0, #0
 8006646:	f04f 0100 	mov.w	r1, #0
 800664a:	0159      	lsls	r1, r3, #5
 800664c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006650:	0150      	lsls	r0, r2, #5
 8006652:	4602      	mov	r2, r0
 8006654:	460b      	mov	r3, r1
 8006656:	ebb2 080a 	subs.w	r8, r2, sl
 800665a:	eb63 090b 	sbc.w	r9, r3, fp
 800665e:	f04f 0200 	mov.w	r2, #0
 8006662:	f04f 0300 	mov.w	r3, #0
 8006666:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800666a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800666e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006672:	ebb2 0408 	subs.w	r4, r2, r8
 8006676:	eb63 0509 	sbc.w	r5, r3, r9
 800667a:	f04f 0200 	mov.w	r2, #0
 800667e:	f04f 0300 	mov.w	r3, #0
 8006682:	00eb      	lsls	r3, r5, #3
 8006684:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006688:	00e2      	lsls	r2, r4, #3
 800668a:	4614      	mov	r4, r2
 800668c:	461d      	mov	r5, r3
 800668e:	eb14 030a 	adds.w	r3, r4, sl
 8006692:	603b      	str	r3, [r7, #0]
 8006694:	eb45 030b 	adc.w	r3, r5, fp
 8006698:	607b      	str	r3, [r7, #4]
 800669a:	f04f 0200 	mov.w	r2, #0
 800669e:	f04f 0300 	mov.w	r3, #0
 80066a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80066a6:	4629      	mov	r1, r5
 80066a8:	028b      	lsls	r3, r1, #10
 80066aa:	4621      	mov	r1, r4
 80066ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80066b0:	4621      	mov	r1, r4
 80066b2:	028a      	lsls	r2, r1, #10
 80066b4:	4610      	mov	r0, r2
 80066b6:	4619      	mov	r1, r3
 80066b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ba:	2200      	movs	r2, #0
 80066bc:	60bb      	str	r3, [r7, #8]
 80066be:	60fa      	str	r2, [r7, #12]
 80066c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066c4:	f7fa fa70 	bl	8000ba8 <__aeabi_uldivmod>
 80066c8:	4602      	mov	r2, r0
 80066ca:	460b      	mov	r3, r1
 80066cc:	4613      	mov	r3, r2
 80066ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80066d0:	4b0b      	ldr	r3, [pc, #44]	; (8006700 <HAL_RCC_GetSysClockFreq+0x180>)
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	0c1b      	lsrs	r3, r3, #16
 80066d6:	f003 0303 	and.w	r3, r3, #3
 80066da:	3301      	adds	r3, #1
 80066dc:	005b      	lsls	r3, r3, #1
 80066de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80066e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80066e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80066e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80066ea:	e002      	b.n	80066f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80066ec:	4b05      	ldr	r3, [pc, #20]	; (8006704 <HAL_RCC_GetSysClockFreq+0x184>)
 80066ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80066f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80066f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3740      	adds	r7, #64	; 0x40
 80066f8:	46bd      	mov	sp, r7
 80066fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066fe:	bf00      	nop
 8006700:	40023800 	.word	0x40023800
 8006704:	00f42400 	.word	0x00f42400
 8006708:	00b71b00 	.word	0x00b71b00

0800670c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800670c:	b480      	push	{r7}
 800670e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006710:	4b03      	ldr	r3, [pc, #12]	; (8006720 <HAL_RCC_GetHCLKFreq+0x14>)
 8006712:	681b      	ldr	r3, [r3, #0]
}
 8006714:	4618      	mov	r0, r3
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	20000000 	.word	0x20000000

08006724 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006728:	f7ff fff0 	bl	800670c <HAL_RCC_GetHCLKFreq>
 800672c:	4602      	mov	r2, r0
 800672e:	4b05      	ldr	r3, [pc, #20]	; (8006744 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	0a9b      	lsrs	r3, r3, #10
 8006734:	f003 0307 	and.w	r3, r3, #7
 8006738:	4903      	ldr	r1, [pc, #12]	; (8006748 <HAL_RCC_GetPCLK1Freq+0x24>)
 800673a:	5ccb      	ldrb	r3, [r1, r3]
 800673c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006740:	4618      	mov	r0, r3
 8006742:	bd80      	pop	{r7, pc}
 8006744:	40023800 	.word	0x40023800
 8006748:	080124ac 	.word	0x080124ac

0800674c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006750:	f7ff ffdc 	bl	800670c <HAL_RCC_GetHCLKFreq>
 8006754:	4602      	mov	r2, r0
 8006756:	4b05      	ldr	r3, [pc, #20]	; (800676c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	0b5b      	lsrs	r3, r3, #13
 800675c:	f003 0307 	and.w	r3, r3, #7
 8006760:	4903      	ldr	r1, [pc, #12]	; (8006770 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006762:	5ccb      	ldrb	r3, [r1, r3]
 8006764:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006768:	4618      	mov	r0, r3
 800676a:	bd80      	pop	{r7, pc}
 800676c:	40023800 	.word	0x40023800
 8006770:	080124ac 	.word	0x080124ac

08006774 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b082      	sub	sp, #8
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d101      	bne.n	8006786 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006782:	2301      	movs	r3, #1
 8006784:	e022      	b.n	80067cc <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d105      	bne.n	800679e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	f7fb ff1f 	bl	80025dc <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2203      	movs	r2, #3
 80067a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	f000 f814 	bl	80067d4 <HAL_SD_InitCard>
 80067ac:	4603      	mov	r3, r0
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d001      	beq.n	80067b6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80067b2:	2301      	movs	r3, #1
 80067b4:	e00a      	b.n	80067cc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	2200      	movs	r2, #0
 80067ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2201      	movs	r2, #1
 80067c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3708      	adds	r7, #8
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}

080067d4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80067d4:	b5b0      	push	{r4, r5, r7, lr}
 80067d6:	b08e      	sub	sp, #56	; 0x38
 80067d8:	af04      	add	r7, sp, #16
 80067da:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80067dc:	2300      	movs	r3, #0
 80067de:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80067e0:	2300      	movs	r3, #0
 80067e2:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80067e4:	2300      	movs	r3, #0
 80067e6:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80067e8:	2300      	movs	r3, #0
 80067ea:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80067ec:	2300      	movs	r3, #0
 80067ee:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80067f0:	2376      	movs	r3, #118	; 0x76
 80067f2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681d      	ldr	r5, [r3, #0]
 80067f8:	466c      	mov	r4, sp
 80067fa:	f107 0314 	add.w	r3, r7, #20
 80067fe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006802:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006806:	f107 0308 	add.w	r3, r7, #8
 800680a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800680c:	4628      	mov	r0, r5
 800680e:	f002 fe79 	bl	8009504 <SDIO_Init>
 8006812:	4603      	mov	r3, r0
 8006814:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800681c:	2b00      	cmp	r3, #0
 800681e:	d001      	beq.n	8006824 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e04f      	b.n	80068c4 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006824:	4b29      	ldr	r3, [pc, #164]	; (80068cc <HAL_SD_InitCard+0xf8>)
 8006826:	2200      	movs	r2, #0
 8006828:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4618      	mov	r0, r3
 8006830:	f002 feb1 	bl	8009596 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006834:	4b25      	ldr	r3, [pc, #148]	; (80068cc <HAL_SD_InitCard+0xf8>)
 8006836:	2201      	movs	r2, #1
 8006838:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800683a:	2002      	movs	r0, #2
 800683c:	f7fc fa1e 	bl	8002c7c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006840:	6878      	ldr	r0, [r7, #4]
 8006842:	f001 f805 	bl	8007850 <SD_PowerON>
 8006846:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006848:	6a3b      	ldr	r3, [r7, #32]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00b      	beq.n	8006866 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	431a      	orrs	r2, r3
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006862:	2301      	movs	r3, #1
 8006864:	e02e      	b.n	80068c4 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 ff24 	bl	80076b4 <SD_InitCard>
 800686c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800686e:	6a3b      	ldr	r3, [r7, #32]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00b      	beq.n	800688c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2201      	movs	r2, #1
 8006878:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006880:	6a3b      	ldr	r3, [r7, #32]
 8006882:	431a      	orrs	r2, r3
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	e01b      	b.n	80068c4 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006894:	4618      	mov	r0, r3
 8006896:	f002 ff10 	bl	80096ba <SDMMC_CmdBlockLength>
 800689a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800689c:	6a3b      	ldr	r3, [r7, #32]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d00f      	beq.n	80068c2 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a0a      	ldr	r2, [pc, #40]	; (80068d0 <HAL_SD_InitCard+0xfc>)
 80068a8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	431a      	orrs	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2201      	movs	r2, #1
 80068ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80068be:	2301      	movs	r3, #1
 80068c0:	e000      	b.n	80068c4 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 80068c2:	2300      	movs	r3, #0
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3728      	adds	r7, #40	; 0x28
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bdb0      	pop	{r4, r5, r7, pc}
 80068cc:	422580a0 	.word	0x422580a0
 80068d0:	004005ff 	.word	0x004005ff

080068d4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b08c      	sub	sp, #48	; 0x30
 80068d8:	af00      	add	r7, sp, #0
 80068da:	60f8      	str	r0, [r7, #12]
 80068dc:	60b9      	str	r1, [r7, #8]
 80068de:	607a      	str	r2, [r7, #4]
 80068e0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d107      	bne.n	80068fc <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e0c0      	b.n	8006a7e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b01      	cmp	r3, #1
 8006906:	f040 80b9 	bne.w	8006a7c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2200      	movs	r2, #0
 800690e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	441a      	add	r2, r3
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800691a:	429a      	cmp	r2, r3
 800691c:	d907      	bls.n	800692e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e0a7      	b.n	8006a7e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2203      	movs	r2, #3
 8006932:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2200      	movs	r2, #0
 800693c:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	6812      	ldr	r2, [r2, #0]
 8006948:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 800694c:	f043 0302 	orr.w	r3, r3, #2
 8006950:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006956:	4a4c      	ldr	r2, [pc, #304]	; (8006a88 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8006958:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800695e:	4a4b      	ldr	r2, [pc, #300]	; (8006a8c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8006960:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006966:	2200      	movs	r2, #0
 8006968:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800696e:	2200      	movs	r2, #0
 8006970:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006982:	689a      	ldr	r2, [r3, #8]
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	430a      	orrs	r2, r1
 800698c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3380      	adds	r3, #128	; 0x80
 8006998:	4619      	mov	r1, r3
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	025b      	lsls	r3, r3, #9
 80069a0:	089b      	lsrs	r3, r3, #2
 80069a2:	f7fc fb4f 	bl	8003044 <HAL_DMA_Start_IT>
 80069a6:	4603      	mov	r3, r0
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d017      	beq.n	80069dc <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 80069ba:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	4a33      	ldr	r2, [pc, #204]	; (8006a90 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80069c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e050      	b.n	8006a7e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 80069dc:	4b2d      	ldr	r3, [pc, #180]	; (8006a94 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 80069de:	2201      	movs	r2, #1
 80069e0:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d002      	beq.n	80069f0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 80069ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ec:	025b      	lsls	r3, r3, #9
 80069ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80069f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80069f4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	025b      	lsls	r3, r3, #9
 80069fa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80069fc:	2390      	movs	r3, #144	; 0x90
 80069fe:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8006a00:	2302      	movs	r3, #2
 8006a02:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006a04:	2300      	movs	r3, #0
 8006a06:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f107 0210 	add.w	r2, r7, #16
 8006a14:	4611      	mov	r1, r2
 8006a16:	4618      	mov	r0, r3
 8006a18:	f002 fe23 	bl	8009662 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d90a      	bls.n	8006a38 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	2282      	movs	r2, #130	; 0x82
 8006a26:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a2e:	4618      	mov	r0, r3
 8006a30:	f002 fe87 	bl	8009742 <SDMMC_CmdReadMultiBlock>
 8006a34:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006a36:	e009      	b.n	8006a4c <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2281      	movs	r2, #129	; 0x81
 8006a3c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a44:	4618      	mov	r0, r3
 8006a46:	f002 fe5a 	bl	80096fe <SDMMC_CmdReadSingleBlock>
 8006a4a:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8006a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d012      	beq.n	8006a78 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a0e      	ldr	r2, [pc, #56]	; (8006a90 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8006a58:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a60:	431a      	orrs	r2, r3
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	2200      	movs	r2, #0
 8006a72:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e002      	b.n	8006a7e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e000      	b.n	8006a7e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8006a7c:	2302      	movs	r3, #2
  }
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3730      	adds	r7, #48	; 0x30
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	080074c3 	.word	0x080074c3
 8006a8c:	08007535 	.word	0x08007535
 8006a90:	004005ff 	.word	0x004005ff
 8006a94:	4225858c 	.word	0x4225858c

08006a98 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b08c      	sub	sp, #48	; 0x30
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
 8006aa4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8006aaa:	68bb      	ldr	r3, [r7, #8]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d107      	bne.n	8006ac0 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ab4:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e0c5      	b.n	8006c4c <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	f040 80be 	bne.w	8006c4a <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8006ad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	441a      	add	r2, r3
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d907      	bls.n	8006af2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e0ac      	b.n	8006c4c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2203      	movs	r2, #3
 8006af6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	2200      	movs	r2, #0
 8006b00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b08:	68fa      	ldr	r2, [r7, #12]
 8006b0a:	6812      	ldr	r2, [r2, #0]
 8006b0c:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 8006b10:	f043 0302 	orr.w	r3, r3, #2
 8006b14:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b1a:	4a4e      	ldr	r2, [pc, #312]	; (8006c54 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8006b1c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b22:	4a4d      	ldr	r2, [pc, #308]	; (8006c58 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8006b24:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d002      	beq.n	8006b3c <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 8006b36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b38:	025b      	lsls	r3, r3, #9
 8006b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d90a      	bls.n	8006b58 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	22a0      	movs	r2, #160	; 0xa0
 8006b46:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b4e:	4618      	mov	r0, r3
 8006b50:	f002 fe3b 	bl	80097ca <SDMMC_CmdWriteMultiBlock>
 8006b54:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006b56:	e009      	b.n	8006b6c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2290      	movs	r2, #144	; 0x90
 8006b5c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b64:	4618      	mov	r0, r3
 8006b66:	f002 fe0e 	bl	8009786 <SDMMC_CmdWriteSingleBlock>
 8006b6a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8006b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d012      	beq.n	8006b98 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a39      	ldr	r2, [pc, #228]	; (8006c5c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006b78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b80:	431a      	orrs	r2, r3
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e059      	b.n	8006c4c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8006b98:	4b31      	ldr	r3, [pc, #196]	; (8006c60 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba2:	2240      	movs	r2, #64	; 0x40
 8006ba4:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb6:	689a      	ldr	r2, [r3, #8]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	430a      	orrs	r2, r1
 8006bc0:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8006bc6:	68b9      	ldr	r1, [r7, #8]
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	3380      	adds	r3, #128	; 0x80
 8006bce:	461a      	mov	r2, r3
 8006bd0:	683b      	ldr	r3, [r7, #0]
 8006bd2:	025b      	lsls	r3, r3, #9
 8006bd4:	089b      	lsrs	r3, r3, #2
 8006bd6:	f7fc fa35 	bl	8003044 <HAL_DMA_Start_IT>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01c      	beq.n	8006c1a <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006be6:	68fa      	ldr	r2, [r7, #12]
 8006be8:	6812      	ldr	r2, [r2, #0]
 8006bea:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 8006bee:	f023 0302 	bic.w	r3, r3, #2
 8006bf2:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	4a18      	ldr	r2, [pc, #96]	; (8006c5c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8006bfa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e018      	b.n	8006c4c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8006c1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006c1e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	025b      	lsls	r3, r3, #9
 8006c24:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8006c26:	2390      	movs	r3, #144	; 0x90
 8006c28:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8006c32:	2301      	movs	r3, #1
 8006c34:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f107 0210 	add.w	r2, r7, #16
 8006c3e:	4611      	mov	r1, r2
 8006c40:	4618      	mov	r0, r3
 8006c42:	f002 fd0e 	bl	8009662 <SDIO_ConfigData>

      return HAL_OK;
 8006c46:	2300      	movs	r3, #0
 8006c48:	e000      	b.n	8006c4c <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 8006c4a:	2302      	movs	r3, #2
  }
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3730      	adds	r7, #48	; 0x30
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}
 8006c54:	08007499 	.word	0x08007499
 8006c58:	08007535 	.word	0x08007535
 8006c5c:	004005ff 	.word	0x004005ff
 8006c60:	4225858c 	.word	0x4225858c

08006c64 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c70:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d008      	beq.n	8006c92 <HAL_SD_IRQHandler+0x2e>
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f003 0308 	and.w	r3, r3, #8
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d003      	beq.n	8006c92 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 ffff 	bl	8007c8e <SD_Read_IT>
 8006c90:	e165      	b.n	8006f5e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	f000 808f 	beq.w	8006dc0 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006caa:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb2:	687a      	ldr	r2, [r7, #4]
 8006cb4:	6812      	ldr	r2, [r2, #0]
 8006cb6:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8006cba:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8006cbe:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f022 0201 	bic.w	r2, r2, #1
 8006cce:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d039      	beq.n	8006d4e <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f003 0302 	and.w	r3, r3, #2
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d104      	bne.n	8006cee <HAL_SD_IRQHandler+0x8a>
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f003 0320 	and.w	r3, r3, #32
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d011      	beq.n	8006d12 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	f002 fd8c 	bl	8009810 <SDMMC_CmdStopTransfer>
 8006cf8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d008      	beq.n	8006d12 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d04:	68bb      	ldr	r3, [r7, #8]
 8006d06:	431a      	orrs	r2, r3
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f000 f92f 	bl	8006f70 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f240 523a 	movw	r2, #1338	; 0x53a
 8006d1a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2201      	movs	r2, #1
 8006d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f003 0301 	and.w	r3, r3, #1
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d104      	bne.n	8006d3e <HAL_SD_IRQHandler+0xda>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f003 0302 	and.w	r3, r3, #2
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d003      	beq.n	8006d46 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f004 fe40 	bl	800b9c4 <HAL_SD_RxCpltCallback>
 8006d44:	e10b      	b.n	8006f5e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f004 fe32 	bl	800b9b0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006d4c:	e107      	b.n	8006f5e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f000 8102 	beq.w	8006f5e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	f003 0320 	and.w	r3, r3, #32
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d011      	beq.n	8006d88 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f002 fd51 	bl	8009810 <SDMMC_CmdStopTransfer>
 8006d6e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d008      	beq.n	8006d88 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	431a      	orrs	r2, r3
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f8f4 	bl	8006f70 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f040 80e5 	bne.w	8006f5e <HAL_SD_IRQHandler+0x2fa>
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	f003 0302 	and.w	r3, r3, #2
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	f040 80df 	bne.w	8006f5e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	f022 0208 	bic.w	r2, r2, #8
 8006dae:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f004 fdf9 	bl	800b9b0 <HAL_SD_TxCpltCallback>
}
 8006dbe:	e0ce      	b.n	8006f5e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d008      	beq.n	8006de0 <HAL_SD_IRQHandler+0x17c>
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f003 0308 	and.w	r3, r3, #8
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d003      	beq.n	8006de0 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 ffa9 	bl	8007d30 <SD_Write_IT>
 8006dde:	e0be      	b.n	8006f5e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006de6:	f240 233a 	movw	r3, #570	; 0x23a
 8006dea:	4013      	ands	r3, r2
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	f000 80b6 	beq.w	8006f5e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006df8:	f003 0302 	and.w	r3, r3, #2
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d005      	beq.n	8006e0c <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e04:	f043 0202 	orr.w	r2, r3, #2
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e12:	f003 0308 	and.w	r3, r3, #8
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d005      	beq.n	8006e26 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e1e:	f043 0208 	orr.w	r2, r3, #8
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e2c:	f003 0320 	and.w	r3, r3, #32
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d005      	beq.n	8006e40 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e38:	f043 0220 	orr.w	r2, r3, #32
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e46:	f003 0310 	and.w	r3, r3, #16
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d005      	beq.n	8006e5a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e52:	f043 0210 	orr.w	r2, r3, #16
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d005      	beq.n	8006e74 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6c:	f043 0208 	orr.w	r2, r3, #8
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f240 723a 	movw	r2, #1850	; 0x73a
 8006e7c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	6812      	ldr	r2, [r2, #0]
 8006e88:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8006e8c:	f023 0302 	bic.w	r3, r3, #2
 8006e90:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f002 fcba 	bl	8009810 <SDMMC_CmdStopTransfer>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea2:	431a      	orrs	r2, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	f003 0308 	and.w	r3, r3, #8
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d00a      	beq.n	8006ec8 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8006ec0:	6878      	ldr	r0, [r7, #4]
 8006ec2:	f000 f855 	bl	8006f70 <HAL_SD_ErrorCallback>
}
 8006ec6:	e04a      	b.n	8006f5e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d045      	beq.n	8006f5e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	f003 0310 	and.w	r3, r3, #16
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d104      	bne.n	8006ee6 <HAL_SD_IRQHandler+0x282>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	f003 0320 	and.w	r3, r3, #32
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d011      	beq.n	8006f0a <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eea:	4a1f      	ldr	r2, [pc, #124]	; (8006f68 <HAL_SD_IRQHandler+0x304>)
 8006eec:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	f7fc f96e 	bl	80031d4 <HAL_DMA_Abort_IT>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d02f      	beq.n	8006f5e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f02:	4618      	mov	r0, r3
 8006f04:	f000 fb68 	bl	80075d8 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8006f08:	e029      	b.n	8006f5e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d104      	bne.n	8006f1e <HAL_SD_IRQHandler+0x2ba>
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	f003 0302 	and.w	r3, r3, #2
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d011      	beq.n	8006f42 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f22:	4a12      	ldr	r2, [pc, #72]	; (8006f6c <HAL_SD_IRQHandler+0x308>)
 8006f24:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f7fc f952 	bl	80031d4 <HAL_DMA_Abort_IT>
 8006f30:	4603      	mov	r3, r0
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d013      	beq.n	8006f5e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f000 fb83 	bl	8007646 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8006f40:	e00d      	b.n	8006f5e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2200      	movs	r2, #0
 8006f54:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f004 fd20 	bl	800b99c <HAL_SD_AbortCallback>
}
 8006f5c:	e7ff      	b.n	8006f5e <HAL_SD_IRQHandler+0x2fa>
 8006f5e:	bf00      	nop
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	080075d9 	.word	0x080075d9
 8006f6c:	08007647 	.word	0x08007647

08006f70 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8006f70:	b480      	push	{r7}
 8006f72:	b083      	sub	sp, #12
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8006f78:	bf00      	nop
 8006f7a:	370c      	adds	r7, #12
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8006f84:	b480      	push	{r7}
 8006f86:	b083      	sub	sp, #12
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	6078      	str	r0, [r7, #4]
 8006f8c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f92:	0f9b      	lsrs	r3, r3, #30
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f9e:	0e9b      	lsrs	r3, r3, #26
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	683b      	ldr	r3, [r7, #0]
 8006faa:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fb0:	0e1b      	lsrs	r3, r3, #24
 8006fb2:	b2db      	uxtb	r3, r3
 8006fb4:	f003 0303 	and.w	r3, r3, #3
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fc2:	0c1b      	lsrs	r3, r3, #16
 8006fc4:	b2da      	uxtb	r2, r3
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fce:	0a1b      	lsrs	r3, r3, #8
 8006fd0:	b2da      	uxtb	r2, r3
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006fe4:	0d1b      	lsrs	r3, r3, #20
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ff0:	0c1b      	lsrs	r3, r3, #16
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	f003 030f 	and.w	r3, r3, #15
 8006ff8:	b2da      	uxtb	r2, r3
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007002:	0bdb      	lsrs	r3, r3, #15
 8007004:	b2db      	uxtb	r3, r3
 8007006:	f003 0301 	and.w	r3, r3, #1
 800700a:	b2da      	uxtb	r2, r3
 800700c:	683b      	ldr	r3, [r7, #0]
 800700e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007014:	0b9b      	lsrs	r3, r3, #14
 8007016:	b2db      	uxtb	r3, r3
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	b2da      	uxtb	r2, r3
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007026:	0b5b      	lsrs	r3, r3, #13
 8007028:	b2db      	uxtb	r3, r3
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	b2da      	uxtb	r2, r3
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007038:	0b1b      	lsrs	r3, r3, #12
 800703a:	b2db      	uxtb	r3, r3
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	b2da      	uxtb	r2, r3
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	2200      	movs	r2, #0
 800704a:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007050:	2b00      	cmp	r3, #0
 8007052:	d163      	bne.n	800711c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007058:	009a      	lsls	r2, r3, #2
 800705a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800705e:	4013      	ands	r3, r2
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007064:	0f92      	lsrs	r2, r2, #30
 8007066:	431a      	orrs	r2, r3
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007070:	0edb      	lsrs	r3, r3, #27
 8007072:	b2db      	uxtb	r3, r3
 8007074:	f003 0307 	and.w	r3, r3, #7
 8007078:	b2da      	uxtb	r2, r3
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007082:	0e1b      	lsrs	r3, r3, #24
 8007084:	b2db      	uxtb	r3, r3
 8007086:	f003 0307 	and.w	r3, r3, #7
 800708a:	b2da      	uxtb	r2, r3
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007094:	0d5b      	lsrs	r3, r3, #21
 8007096:	b2db      	uxtb	r3, r3
 8007098:	f003 0307 	and.w	r3, r3, #7
 800709c:	b2da      	uxtb	r2, r3
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070a6:	0c9b      	lsrs	r3, r3, #18
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80070b8:	0bdb      	lsrs	r3, r3, #15
 80070ba:	b2db      	uxtb	r3, r3
 80070bc:	f003 0307 	and.w	r3, r3, #7
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80070c6:	683b      	ldr	r3, [r7, #0]
 80070c8:	691b      	ldr	r3, [r3, #16]
 80070ca:	1c5a      	adds	r2, r3, #1
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	7e1b      	ldrb	r3, [r3, #24]
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	f003 0307 	and.w	r3, r3, #7
 80070da:	3302      	adds	r3, #2
 80070dc:	2201      	movs	r2, #1
 80070de:	fa02 f303 	lsl.w	r3, r2, r3
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80070e6:	fb03 f202 	mul.w	r2, r3, r2
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	7a1b      	ldrb	r3, [r3, #8]
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	f003 030f 	and.w	r3, r3, #15
 80070f8:	2201      	movs	r2, #1
 80070fa:	409a      	lsls	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007108:	0a52      	lsrs	r2, r2, #9
 800710a:	fb03 f202 	mul.w	r2, r3, r2
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007118:	661a      	str	r2, [r3, #96]	; 0x60
 800711a:	e031      	b.n	8007180 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007120:	2b01      	cmp	r3, #1
 8007122:	d11d      	bne.n	8007160 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007128:	041b      	lsls	r3, r3, #16
 800712a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007132:	0c1b      	lsrs	r3, r3, #16
 8007134:	431a      	orrs	r2, r3
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	3301      	adds	r3, #1
 8007140:	029a      	lsls	r2, r3, #10
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007154:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	661a      	str	r2, [r3, #96]	; 0x60
 800715e:	e00f      	b.n	8007180 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a58      	ldr	r2, [pc, #352]	; (80072c8 <HAL_SD_GetCardCSD+0x344>)
 8007166:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800716c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800717c:	2301      	movs	r3, #1
 800717e:	e09d      	b.n	80072bc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007184:	0b9b      	lsrs	r3, r3, #14
 8007186:	b2db      	uxtb	r3, r3
 8007188:	f003 0301 	and.w	r3, r3, #1
 800718c:	b2da      	uxtb	r2, r3
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007196:	09db      	lsrs	r3, r3, #7
 8007198:	b2db      	uxtb	r3, r3
 800719a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071a8:	b2db      	uxtb	r3, r3
 80071aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071b8:	0fdb      	lsrs	r3, r3, #31
 80071ba:	b2da      	uxtb	r2, r3
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071c4:	0f5b      	lsrs	r3, r3, #29
 80071c6:	b2db      	uxtb	r3, r3
 80071c8:	f003 0303 	and.w	r3, r3, #3
 80071cc:	b2da      	uxtb	r2, r3
 80071ce:	683b      	ldr	r3, [r7, #0]
 80071d0:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071d6:	0e9b      	lsrs	r3, r3, #26
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	f003 0307 	and.w	r3, r3, #7
 80071de:	b2da      	uxtb	r2, r3
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071e8:	0d9b      	lsrs	r3, r3, #22
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	f003 030f 	and.w	r3, r3, #15
 80071f0:	b2da      	uxtb	r2, r3
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071fa:	0d5b      	lsrs	r3, r3, #21
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	b2da      	uxtb	r2, r3
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	2200      	movs	r2, #0
 800720e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007216:	0c1b      	lsrs	r3, r3, #16
 8007218:	b2db      	uxtb	r3, r3
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	b2da      	uxtb	r2, r3
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800722a:	0bdb      	lsrs	r3, r3, #15
 800722c:	b2db      	uxtb	r3, r3
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	b2da      	uxtb	r2, r3
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800723e:	0b9b      	lsrs	r3, r3, #14
 8007240:	b2db      	uxtb	r3, r3
 8007242:	f003 0301 	and.w	r3, r3, #1
 8007246:	b2da      	uxtb	r2, r3
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007252:	0b5b      	lsrs	r3, r3, #13
 8007254:	b2db      	uxtb	r3, r3
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	b2da      	uxtb	r2, r3
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007266:	0b1b      	lsrs	r3, r3, #12
 8007268:	b2db      	uxtb	r3, r3
 800726a:	f003 0301 	and.w	r3, r3, #1
 800726e:	b2da      	uxtb	r2, r3
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800727a:	0a9b      	lsrs	r3, r3, #10
 800727c:	b2db      	uxtb	r3, r3
 800727e:	f003 0303 	and.w	r3, r3, #3
 8007282:	b2da      	uxtb	r2, r3
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800728e:	0a1b      	lsrs	r3, r3, #8
 8007290:	b2db      	uxtb	r3, r3
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	b2da      	uxtb	r2, r3
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a2:	085b      	lsrs	r3, r3, #1
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	683b      	ldr	r3, [r7, #0]
 80072ae:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	2201      	movs	r2, #1
 80072b6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80072ba:	2300      	movs	r3, #0
}
 80072bc:	4618      	mov	r0, r3
 80072be:	370c      	adds	r7, #12
 80072c0:	46bd      	mov	sp, r7
 80072c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072c6:	4770      	bx	lr
 80072c8:	004005ff 	.word	0x004005ff

080072cc <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80072fa:	683b      	ldr	r3, [r7, #0]
 80072fc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800730a:	683b      	ldr	r3, [r7, #0]
 800730c:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007312:	683b      	ldr	r3, [r7, #0]
 8007314:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007316:	2300      	movs	r3, #0
}
 8007318:	4618      	mov	r0, r3
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007324:	b5b0      	push	{r4, r5, r7, lr}
 8007326:	b08e      	sub	sp, #56	; 0x38
 8007328:	af04      	add	r7, sp, #16
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800732e:	2300      	movs	r3, #0
 8007330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2203      	movs	r2, #3
 8007338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007340:	2b03      	cmp	r3, #3
 8007342:	d02e      	beq.n	80073a2 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800734a:	d106      	bne.n	800735a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007350:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	639a      	str	r2, [r3, #56]	; 0x38
 8007358:	e029      	b.n	80073ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007360:	d10a      	bne.n	8007378 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 fb2a 	bl	80079bc <SD_WideBus_Enable>
 8007368:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800736e:	6a3b      	ldr	r3, [r7, #32]
 8007370:	431a      	orrs	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	639a      	str	r2, [r3, #56]	; 0x38
 8007376:	e01a      	b.n	80073ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d10a      	bne.n	8007394 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 fb67 	bl	8007a52 <SD_WideBus_Disable>
 8007384:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800738a:	6a3b      	ldr	r3, [r7, #32]
 800738c:	431a      	orrs	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	639a      	str	r2, [r3, #56]	; 0x38
 8007392:	e00c      	b.n	80073ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007398:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	639a      	str	r2, [r3, #56]	; 0x38
 80073a0:	e005      	b.n	80073ae <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073a6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d00b      	beq.n	80073ce <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a26      	ldr	r2, [pc, #152]	; (8007454 <HAL_SD_ConfigWideBusOperation+0x130>)
 80073bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80073cc:	e01f      	b.n	800740e <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	689b      	ldr	r3, [r3, #8]
 80073d8:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	68db      	ldr	r3, [r3, #12]
 80073de:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	695b      	ldr	r3, [r3, #20]
 80073e8:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	699b      	ldr	r3, [r3, #24]
 80073ee:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681d      	ldr	r5, [r3, #0]
 80073f4:	466c      	mov	r4, sp
 80073f6:	f107 0314 	add.w	r3, r7, #20
 80073fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80073fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007402:	f107 0308 	add.w	r3, r7, #8
 8007406:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007408:	4628      	mov	r0, r5
 800740a:	f002 f87b 	bl	8009504 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007416:	4618      	mov	r0, r3
 8007418:	f002 f94f 	bl	80096ba <SDMMC_CmdBlockLength>
 800741c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800741e:	6a3b      	ldr	r3, [r7, #32]
 8007420:	2b00      	cmp	r3, #0
 8007422:	d00c      	beq.n	800743e <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	4a0a      	ldr	r2, [pc, #40]	; (8007454 <HAL_SD_ConfigWideBusOperation+0x130>)
 800742a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007430:	6a3b      	ldr	r3, [r7, #32]
 8007432:	431a      	orrs	r2, r3
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007446:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800744a:	4618      	mov	r0, r3
 800744c:	3728      	adds	r7, #40	; 0x28
 800744e:	46bd      	mov	sp, r7
 8007450:	bdb0      	pop	{r4, r5, r7, pc}
 8007452:	bf00      	nop
 8007454:	004005ff 	.word	0x004005ff

08007458 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007460:	2300      	movs	r3, #0
 8007462:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007464:	f107 030c 	add.w	r3, r7, #12
 8007468:	4619      	mov	r1, r3
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	f000 fa7e 	bl	800796c <SD_SendStatus>
 8007470:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d005      	beq.n	8007484 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	431a      	orrs	r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	0a5b      	lsrs	r3, r3, #9
 8007488:	f003 030f 	and.w	r3, r3, #15
 800748c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800748e:	693b      	ldr	r3, [r7, #16]
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a4:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074b4:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80074b6:	bf00      	nop
 80074b8:	3714      	adds	r7, #20
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr

080074c2 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074c2:	b580      	push	{r7, lr}
 80074c4:	b084      	sub	sp, #16
 80074c6:	af00      	add	r7, sp, #0
 80074c8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ce:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074d4:	2b82      	cmp	r3, #130	; 0x82
 80074d6:	d111      	bne.n	80074fc <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	4618      	mov	r0, r3
 80074de:	f002 f997 	bl	8009810 <SDMMC_CmdStopTransfer>
 80074e2:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d008      	beq.n	80074fc <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	431a      	orrs	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f7ff fd3a 	bl	8006f70 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f022 0208 	bic.w	r2, r2, #8
 800750a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f240 523a 	movw	r2, #1338	; 0x53a
 8007514:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	2201      	movs	r2, #1
 800751a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	2200      	movs	r2, #0
 8007522:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007524:	68f8      	ldr	r0, [r7, #12]
 8007526:	f004 fa4d 	bl	800b9c4 <HAL_SD_RxCpltCallback>
#endif
}
 800752a:	bf00      	nop
 800752c:	3710      	adds	r7, #16
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b086      	sub	sp, #24
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007540:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f7fb fff2 	bl	800352c <HAL_DMA_GetError>
 8007548:	4603      	mov	r3, r0
 800754a:	2b02      	cmp	r3, #2
 800754c:	d03e      	beq.n	80075cc <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007554:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800755a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	2b01      	cmp	r3, #1
 8007562:	d002      	beq.n	800756a <SD_DMAError+0x36>
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2b01      	cmp	r3, #1
 8007568:	d12d      	bne.n	80075c6 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a19      	ldr	r2, [pc, #100]	; (80075d4 <SD_DMAError+0xa0>)
 8007570:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007580:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007586:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800758e:	6978      	ldr	r0, [r7, #20]
 8007590:	f7ff ff62 	bl	8007458 <HAL_SD_GetCardState>
 8007594:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007596:	68bb      	ldr	r3, [r7, #8]
 8007598:	2b06      	cmp	r3, #6
 800759a:	d002      	beq.n	80075a2 <SD_DMAError+0x6e>
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2b05      	cmp	r3, #5
 80075a0:	d10a      	bne.n	80075b8 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	4618      	mov	r0, r3
 80075a8:	f002 f932 	bl	8009810 <SDMMC_CmdStopTransfer>
 80075ac:	4602      	mov	r2, r0
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b2:	431a      	orrs	r2, r3
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	2201      	movs	r2, #1
 80075bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	2200      	movs	r2, #0
 80075c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80075c6:	6978      	ldr	r0, [r7, #20]
 80075c8:	f7ff fcd2 	bl	8006f70 <HAL_SD_ErrorCallback>
#endif
  }
}
 80075cc:	bf00      	nop
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	004005ff 	.word	0x004005ff

080075d8 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e4:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f240 523a 	movw	r2, #1338	; 0x53a
 80075ee:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80075f0:	68f8      	ldr	r0, [r7, #12]
 80075f2:	f7ff ff31 	bl	8007458 <HAL_SD_GetCardState>
 80075f6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2201      	movs	r2, #1
 80075fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	2b06      	cmp	r3, #6
 800760a:	d002      	beq.n	8007612 <SD_DMATxAbort+0x3a>
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	2b05      	cmp	r3, #5
 8007610:	d10a      	bne.n	8007628 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4618      	mov	r0, r3
 8007618:	f002 f8fa 	bl	8009810 <SDMMC_CmdStopTransfer>
 800761c:	4602      	mov	r2, r0
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007622:	431a      	orrs	r2, r3
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800762c:	2b00      	cmp	r3, #0
 800762e:	d103      	bne.n	8007638 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	f004 f9b3 	bl	800b99c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007636:	e002      	b.n	800763e <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007638:	68f8      	ldr	r0, [r7, #12]
 800763a:	f7ff fc99 	bl	8006f70 <HAL_SD_ErrorCallback>
}
 800763e:	bf00      	nop
 8007640:	3710      	adds	r7, #16
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}

08007646 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007646:	b580      	push	{r7, lr}
 8007648:	b084      	sub	sp, #16
 800764a:	af00      	add	r7, sp, #0
 800764c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007652:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f240 523a 	movw	r2, #1338	; 0x53a
 800765c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f7ff fefa 	bl	8007458 <HAL_SD_GetCardState>
 8007664:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	2201      	movs	r2, #1
 800766a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2200      	movs	r2, #0
 8007672:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2b06      	cmp	r3, #6
 8007678:	d002      	beq.n	8007680 <SD_DMARxAbort+0x3a>
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	2b05      	cmp	r3, #5
 800767e:	d10a      	bne.n	8007696 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	4618      	mov	r0, r3
 8007686:	f002 f8c3 	bl	8009810 <SDMMC_CmdStopTransfer>
 800768a:	4602      	mov	r2, r0
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007690:	431a      	orrs	r2, r3
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800769a:	2b00      	cmp	r3, #0
 800769c:	d103      	bne.n	80076a6 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f004 f97c 	bl	800b99c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80076a4:	e002      	b.n	80076ac <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f7ff fc62 	bl	8006f70 <HAL_SD_ErrorCallback>
}
 80076ac:	bf00      	nop
 80076ae:	3710      	adds	r7, #16
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80076b4:	b5b0      	push	{r4, r5, r7, lr}
 80076b6:	b094      	sub	sp, #80	; 0x50
 80076b8:	af04      	add	r7, sp, #16
 80076ba:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80076bc:	2301      	movs	r3, #1
 80076be:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4618      	mov	r0, r3
 80076c6:	f001 ff74 	bl	80095b2 <SDIO_GetPowerState>
 80076ca:	4603      	mov	r3, r0
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d102      	bne.n	80076d6 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80076d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80076d4:	e0b8      	b.n	8007848 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076da:	2b03      	cmp	r3, #3
 80076dc:	d02f      	beq.n	800773e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	4618      	mov	r0, r3
 80076e4:	f002 f99e 	bl	8009a24 <SDMMC_CmdSendCID>
 80076e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80076ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d001      	beq.n	80076f4 <SD_InitCard+0x40>
    {
      return errorstate;
 80076f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076f2:	e0a9      	b.n	8007848 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	2100      	movs	r1, #0
 80076fa:	4618      	mov	r0, r3
 80076fc:	f001 ff9e 	bl	800963c <SDIO_GetResponse>
 8007700:	4602      	mov	r2, r0
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	2104      	movs	r1, #4
 800770c:	4618      	mov	r0, r3
 800770e:	f001 ff95 	bl	800963c <SDIO_GetResponse>
 8007712:	4602      	mov	r2, r0
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	2108      	movs	r1, #8
 800771e:	4618      	mov	r0, r3
 8007720:	f001 ff8c 	bl	800963c <SDIO_GetResponse>
 8007724:	4602      	mov	r2, r0
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	210c      	movs	r1, #12
 8007730:	4618      	mov	r0, r3
 8007732:	f001 ff83 	bl	800963c <SDIO_GetResponse>
 8007736:	4602      	mov	r2, r0
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007742:	2b03      	cmp	r3, #3
 8007744:	d00d      	beq.n	8007762 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f107 020e 	add.w	r2, r7, #14
 800774e:	4611      	mov	r1, r2
 8007750:	4618      	mov	r0, r3
 8007752:	f002 f9a4 	bl	8009a9e <SDMMC_CmdSetRelAdd>
 8007756:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <SD_InitCard+0xae>
    {
      return errorstate;
 800775e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007760:	e072      	b.n	8007848 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007766:	2b03      	cmp	r3, #3
 8007768:	d036      	beq.n	80077d8 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800776a:	89fb      	ldrh	r3, [r7, #14]
 800776c:	461a      	mov	r2, r3
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800777a:	041b      	lsls	r3, r3, #16
 800777c:	4619      	mov	r1, r3
 800777e:	4610      	mov	r0, r2
 8007780:	f002 f96e 	bl	8009a60 <SDMMC_CmdSendCSD>
 8007784:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <SD_InitCard+0xdc>
    {
      return errorstate;
 800778c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800778e:	e05b      	b.n	8007848 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	2100      	movs	r1, #0
 8007796:	4618      	mov	r0, r3
 8007798:	f001 ff50 	bl	800963c <SDIO_GetResponse>
 800779c:	4602      	mov	r2, r0
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2104      	movs	r1, #4
 80077a8:	4618      	mov	r0, r3
 80077aa:	f001 ff47 	bl	800963c <SDIO_GetResponse>
 80077ae:	4602      	mov	r2, r0
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	2108      	movs	r1, #8
 80077ba:	4618      	mov	r0, r3
 80077bc:	f001 ff3e 	bl	800963c <SDIO_GetResponse>
 80077c0:	4602      	mov	r2, r0
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	210c      	movs	r1, #12
 80077cc:	4618      	mov	r0, r3
 80077ce:	f001 ff35 	bl	800963c <SDIO_GetResponse>
 80077d2:	4602      	mov	r2, r0
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	2104      	movs	r1, #4
 80077de:	4618      	mov	r0, r3
 80077e0:	f001 ff2c 	bl	800963c <SDIO_GetResponse>
 80077e4:	4603      	mov	r3, r0
 80077e6:	0d1a      	lsrs	r2, r3, #20
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80077ec:	f107 0310 	add.w	r3, r7, #16
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7ff fbc6 	bl	8006f84 <HAL_SD_GetCardCSD>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d002      	beq.n	8007804 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80077fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007802:	e021      	b.n	8007848 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6819      	ldr	r1, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800780c:	041b      	lsls	r3, r3, #16
 800780e:	2200      	movs	r2, #0
 8007810:	461c      	mov	r4, r3
 8007812:	4615      	mov	r5, r2
 8007814:	4622      	mov	r2, r4
 8007816:	462b      	mov	r3, r5
 8007818:	4608      	mov	r0, r1
 800781a:	f002 f81b 	bl	8009854 <SDMMC_CmdSelDesel>
 800781e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007820:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007822:	2b00      	cmp	r3, #0
 8007824:	d001      	beq.n	800782a <SD_InitCard+0x176>
  {
    return errorstate;
 8007826:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007828:	e00e      	b.n	8007848 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681d      	ldr	r5, [r3, #0]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	466c      	mov	r4, sp
 8007832:	f103 0210 	add.w	r2, r3, #16
 8007836:	ca07      	ldmia	r2, {r0, r1, r2}
 8007838:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800783c:	3304      	adds	r3, #4
 800783e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007840:	4628      	mov	r0, r5
 8007842:	f001 fe5f 	bl	8009504 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3740      	adds	r7, #64	; 0x40
 800784c:	46bd      	mov	sp, r7
 800784e:	bdb0      	pop	{r4, r5, r7, pc}

08007850 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b086      	sub	sp, #24
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007858:	2300      	movs	r3, #0
 800785a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800785c:	2300      	movs	r3, #0
 800785e:	617b      	str	r3, [r7, #20]
 8007860:	2300      	movs	r3, #0
 8007862:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4618      	mov	r0, r3
 800786a:	f002 f816 	bl	800989a <SDMMC_CmdGoIdleState>
 800786e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <SD_PowerON+0x2a>
  {
    return errorstate;
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	e072      	b.n	8007960 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4618      	mov	r0, r3
 8007880:	f002 f829 	bl	80098d6 <SDMMC_CmdOperCond>
 8007884:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00d      	beq.n	80078a8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2200      	movs	r2, #0
 8007890:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4618      	mov	r0, r3
 8007898:	f001 ffff 	bl	800989a <SDMMC_CmdGoIdleState>
 800789c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d004      	beq.n	80078ae <SD_PowerON+0x5e>
    {
      return errorstate;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	e05b      	b.n	8007960 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2201      	movs	r2, #1
 80078ac:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d137      	bne.n	8007926 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	2100      	movs	r1, #0
 80078bc:	4618      	mov	r0, r3
 80078be:	f002 f829 	bl	8009914 <SDMMC_CmdAppCommand>
 80078c2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d02d      	beq.n	8007926 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80078ce:	e047      	b.n	8007960 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2100      	movs	r1, #0
 80078d6:	4618      	mov	r0, r3
 80078d8:	f002 f81c 	bl	8009914 <SDMMC_CmdAppCommand>
 80078dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d001      	beq.n	80078e8 <SD_PowerON+0x98>
    {
      return errorstate;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	e03b      	b.n	8007960 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	491e      	ldr	r1, [pc, #120]	; (8007968 <SD_PowerON+0x118>)
 80078ee:	4618      	mov	r0, r3
 80078f0:	f002 f832 	bl	8009958 <SDMMC_CmdAppOperCommand>
 80078f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d002      	beq.n	8007902 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80078fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007900:	e02e      	b.n	8007960 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	2100      	movs	r1, #0
 8007908:	4618      	mov	r0, r3
 800790a:	f001 fe97 	bl	800963c <SDIO_GetResponse>
 800790e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	0fdb      	lsrs	r3, r3, #31
 8007914:	2b01      	cmp	r3, #1
 8007916:	d101      	bne.n	800791c <SD_PowerON+0xcc>
 8007918:	2301      	movs	r3, #1
 800791a:	e000      	b.n	800791e <SD_PowerON+0xce>
 800791c:	2300      	movs	r3, #0
 800791e:	613b      	str	r3, [r7, #16]

    count++;
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	3301      	adds	r3, #1
 8007924:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800792c:	4293      	cmp	r3, r2
 800792e:	d802      	bhi.n	8007936 <SD_PowerON+0xe6>
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d0cc      	beq.n	80078d0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8007936:	68bb      	ldr	r3, [r7, #8]
 8007938:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800793c:	4293      	cmp	r3, r2
 800793e:	d902      	bls.n	8007946 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8007940:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007944:	e00c      	b.n	8007960 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8007946:	697b      	ldr	r3, [r7, #20]
 8007948:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800794c:	2b00      	cmp	r3, #0
 800794e:	d003      	beq.n	8007958 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2201      	movs	r2, #1
 8007954:	645a      	str	r2, [r3, #68]	; 0x44
 8007956:	e002      	b.n	800795e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2200      	movs	r2, #0
 800795c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800795e:	2300      	movs	r3, #0
}
 8007960:	4618      	mov	r0, r3
 8007962:	3718      	adds	r7, #24
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	c1100000 	.word	0xc1100000

0800796c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b084      	sub	sp, #16
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8007976:	683b      	ldr	r3, [r7, #0]
 8007978:	2b00      	cmp	r3, #0
 800797a:	d102      	bne.n	8007982 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800797c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007980:	e018      	b.n	80079b4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681a      	ldr	r2, [r3, #0]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800798a:	041b      	lsls	r3, r3, #16
 800798c:	4619      	mov	r1, r3
 800798e:	4610      	mov	r0, r2
 8007990:	f002 f8a6 	bl	8009ae0 <SDMMC_CmdSendStatus>
 8007994:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	e009      	b.n	80079b4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	2100      	movs	r1, #0
 80079a6:	4618      	mov	r0, r3
 80079a8:	f001 fe48 	bl	800963c <SDIO_GetResponse>
 80079ac:	4602      	mov	r2, r0
 80079ae:	683b      	ldr	r3, [r7, #0]
 80079b0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3710      	adds	r7, #16
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80079c4:	2300      	movs	r3, #0
 80079c6:	60fb      	str	r3, [r7, #12]
 80079c8:	2300      	movs	r3, #0
 80079ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2100      	movs	r1, #0
 80079d2:	4618      	mov	r0, r3
 80079d4:	f001 fe32 	bl	800963c <SDIO_GetResponse>
 80079d8:	4603      	mov	r3, r0
 80079da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80079e2:	d102      	bne.n	80079ea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80079e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80079e8:	e02f      	b.n	8007a4a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80079ea:	f107 030c 	add.w	r3, r7, #12
 80079ee:	4619      	mov	r1, r3
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 f879 	bl	8007ae8 <SD_FindSCR>
 80079f6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80079f8:	697b      	ldr	r3, [r7, #20]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	e023      	b.n	8007a4a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007a02:	693b      	ldr	r3, [r7, #16]
 8007a04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d01c      	beq.n	8007a46 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a14:	041b      	lsls	r3, r3, #16
 8007a16:	4619      	mov	r1, r3
 8007a18:	4610      	mov	r0, r2
 8007a1a:	f001 ff7b 	bl	8009914 <SDMMC_CmdAppCommand>
 8007a1e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8007a26:	697b      	ldr	r3, [r7, #20]
 8007a28:	e00f      	b.n	8007a4a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	2102      	movs	r1, #2
 8007a30:	4618      	mov	r0, r3
 8007a32:	f001 ffb4 	bl	800999e <SDMMC_CmdBusWidth>
 8007a36:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d001      	beq.n	8007a42 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	e003      	b.n	8007a4a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007a42:	2300      	movs	r3, #0
 8007a44:	e001      	b.n	8007a4a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007a46:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3718      	adds	r7, #24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd80      	pop	{r7, pc}

08007a52 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b086      	sub	sp, #24
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	60fb      	str	r3, [r7, #12]
 8007a5e:	2300      	movs	r3, #0
 8007a60:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2100      	movs	r1, #0
 8007a68:	4618      	mov	r0, r3
 8007a6a:	f001 fde7 	bl	800963c <SDIO_GetResponse>
 8007a6e:	4603      	mov	r3, r0
 8007a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a74:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007a78:	d102      	bne.n	8007a80 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8007a7a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a7e:	e02f      	b.n	8007ae0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8007a80:	f107 030c 	add.w	r3, r7, #12
 8007a84:	4619      	mov	r1, r3
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 f82e 	bl	8007ae8 <SD_FindSCR>
 8007a8c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d001      	beq.n	8007a98 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8007a94:	697b      	ldr	r3, [r7, #20]
 8007a96:	e023      	b.n	8007ae0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8007a98:	693b      	ldr	r3, [r7, #16]
 8007a9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d01c      	beq.n	8007adc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681a      	ldr	r2, [r3, #0]
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aaa:	041b      	lsls	r3, r3, #16
 8007aac:	4619      	mov	r1, r3
 8007aae:	4610      	mov	r0, r2
 8007ab0:	f001 ff30 	bl	8009914 <SDMMC_CmdAppCommand>
 8007ab4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d001      	beq.n	8007ac0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	e00f      	b.n	8007ae0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f001 ff69 	bl	800999e <SDMMC_CmdBusWidth>
 8007acc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d001      	beq.n	8007ad8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8007ad4:	697b      	ldr	r3, [r7, #20]
 8007ad6:	e003      	b.n	8007ae0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	e001      	b.n	8007ae0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007adc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3718      	adds	r7, #24
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8007ae8:	b590      	push	{r4, r7, lr}
 8007aea:	b08f      	sub	sp, #60	; 0x3c
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007af2:	f7fb f8b7 	bl	8002c64 <HAL_GetTick>
 8007af6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8007af8:	2300      	movs	r3, #0
 8007afa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8007afc:	2300      	movs	r3, #0
 8007afe:	60bb      	str	r3, [r7, #8]
 8007b00:	2300      	movs	r3, #0
 8007b02:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2108      	movs	r1, #8
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f001 fdd3 	bl	80096ba <SDMMC_CmdBlockLength>
 8007b14:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <SD_FindSCR+0x38>
  {
    return errorstate;
 8007b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1e:	e0b2      	b.n	8007c86 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681a      	ldr	r2, [r3, #0]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b28:	041b      	lsls	r3, r3, #16
 8007b2a:	4619      	mov	r1, r3
 8007b2c:	4610      	mov	r0, r2
 8007b2e:	f001 fef1 	bl	8009914 <SDMMC_CmdAppCommand>
 8007b32:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d001      	beq.n	8007b3e <SD_FindSCR+0x56>
  {
    return errorstate;
 8007b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b3c:	e0a3      	b.n	8007c86 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007b3e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007b42:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8007b44:	2308      	movs	r3, #8
 8007b46:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8007b48:	2330      	movs	r3, #48	; 0x30
 8007b4a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8007b4c:	2302      	movs	r3, #2
 8007b4e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8007b50:	2300      	movs	r3, #0
 8007b52:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8007b54:	2301      	movs	r3, #1
 8007b56:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f107 0210 	add.w	r2, r7, #16
 8007b60:	4611      	mov	r1, r2
 8007b62:	4618      	mov	r0, r3
 8007b64:	f001 fd7d 	bl	8009662 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	f001 ff38 	bl	80099e2 <SDMMC_CmdSendSCR>
 8007b72:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d02a      	beq.n	8007bd0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8007b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b7c:	e083      	b.n	8007c86 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d00f      	beq.n	8007bac <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6819      	ldr	r1, [r3, #0]
 8007b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	f107 0208 	add.w	r2, r7, #8
 8007b98:	18d4      	adds	r4, r2, r3
 8007b9a:	4608      	mov	r0, r1
 8007b9c:	f001 fcdd 	bl	800955a <SDIO_ReadFIFO>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	6023      	str	r3, [r4, #0]
      index++;
 8007ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ba6:	3301      	adds	r3, #1
 8007ba8:	637b      	str	r3, [r7, #52]	; 0x34
 8007baa:	e006      	b.n	8007bba <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d012      	beq.n	8007be0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8007bba:	f7fb f853 	bl	8002c64 <HAL_GetTick>
 8007bbe:	4602      	mov	r2, r0
 8007bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bc2:	1ad3      	subs	r3, r2, r3
 8007bc4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bc8:	d102      	bne.n	8007bd0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8007bca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007bce:	e05a      	b.n	8007c86 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d0cf      	beq.n	8007b7e <SD_FindSCR+0x96>
 8007bde:	e000      	b.n	8007be2 <SD_FindSCR+0xfa>
      break;
 8007be0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be8:	f003 0308 	and.w	r3, r3, #8
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d005      	beq.n	8007bfc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	2208      	movs	r2, #8
 8007bf6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8007bf8:	2308      	movs	r3, #8
 8007bfa:	e044      	b.n	8007c86 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c02:	f003 0302 	and.w	r3, r3, #2
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d005      	beq.n	8007c16 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2202      	movs	r2, #2
 8007c10:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8007c12:	2302      	movs	r3, #2
 8007c14:	e037      	b.n	8007c86 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c1c:	f003 0320 	and.w	r3, r3, #32
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d005      	beq.n	8007c30 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2220      	movs	r2, #32
 8007c2a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8007c2c:	2320      	movs	r3, #32
 8007c2e:	e02a      	b.n	8007c86 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c38:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	061a      	lsls	r2, r3, #24
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	021b      	lsls	r3, r3, #8
 8007c42:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c46:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	0a1b      	lsrs	r3, r3, #8
 8007c4c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007c50:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	0e1b      	lsrs	r3, r3, #24
 8007c56:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8007c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5a:	601a      	str	r2, [r3, #0]
    scr++;
 8007c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5e:	3304      	adds	r3, #4
 8007c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	061a      	lsls	r2, r3, #24
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	021b      	lsls	r3, r3, #8
 8007c6a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007c6e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007c70:	68bb      	ldr	r3, [r7, #8]
 8007c72:	0a1b      	lsrs	r3, r3, #8
 8007c74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007c78:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	0e1b      	lsrs	r3, r3, #24
 8007c7e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8007c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c82:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8007c84:	2300      	movs	r3, #0
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	373c      	adds	r7, #60	; 0x3c
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd90      	pop	{r4, r7, pc}

08007c8e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8007c8e:	b580      	push	{r7, lr}
 8007c90:	b086      	sub	sp, #24
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c9a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007ca2:	693b      	ldr	r3, [r7, #16]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d03f      	beq.n	8007d28 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8007ca8:	2300      	movs	r3, #0
 8007caa:	617b      	str	r3, [r7, #20]
 8007cac:	e033      	b.n	8007d16 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f001 fc51 	bl	800955a <SDIO_ReadFIFO>
 8007cb8:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	3301      	adds	r3, #1
 8007cc6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007cc8:	693b      	ldr	r3, [r7, #16]
 8007cca:	3b01      	subs	r3, #1
 8007ccc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	0a1b      	lsrs	r3, r3, #8
 8007cd2:	b2da      	uxtb	r2, r3
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	3301      	adds	r3, #1
 8007cdc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	3b01      	subs	r3, #1
 8007ce2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	0c1b      	lsrs	r3, r3, #16
 8007ce8:	b2da      	uxtb	r2, r3
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	3301      	adds	r3, #1
 8007cf2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	3b01      	subs	r3, #1
 8007cf8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	0e1b      	lsrs	r3, r3, #24
 8007cfe:	b2da      	uxtb	r2, r3
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	701a      	strb	r2, [r3, #0]
      tmp++;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3301      	adds	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d0a:	693b      	ldr	r3, [r7, #16]
 8007d0c:	3b01      	subs	r3, #1
 8007d0e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	3301      	adds	r3, #1
 8007d14:	617b      	str	r3, [r7, #20]
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	2b07      	cmp	r3, #7
 8007d1a:	d9c8      	bls.n	8007cae <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	68fa      	ldr	r2, [r7, #12]
 8007d20:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8007d28:	bf00      	nop
 8007d2a:	3718      	adds	r7, #24
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	bd80      	pop	{r7, pc}

08007d30 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b086      	sub	sp, #24
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a1b      	ldr	r3, [r3, #32]
 8007d3c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d42:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8007d44:	693b      	ldr	r3, [r7, #16]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d043      	beq.n	8007dd2 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	617b      	str	r3, [r7, #20]
 8007d4e:	e037      	b.n	8007dc0 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	3b01      	subs	r3, #1
 8007d60:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	781b      	ldrb	r3, [r3, #0]
 8007d66:	021a      	lsls	r2, r3, #8
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	3301      	adds	r3, #1
 8007d72:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	3b01      	subs	r3, #1
 8007d78:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	781b      	ldrb	r3, [r3, #0]
 8007d7e:	041a      	lsls	r2, r3, #16
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	4313      	orrs	r3, r2
 8007d84:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	3301      	adds	r3, #1
 8007d8a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007d8c:	693b      	ldr	r3, [r7, #16]
 8007d8e:	3b01      	subs	r3, #1
 8007d90:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	781b      	ldrb	r3, [r3, #0]
 8007d96:	061a      	lsls	r2, r3, #24
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	60bb      	str	r3, [r7, #8]
      tmp++;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	3301      	adds	r3, #1
 8007da2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8007da4:	693b      	ldr	r3, [r7, #16]
 8007da6:	3b01      	subs	r3, #1
 8007da8:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	f107 0208 	add.w	r2, r7, #8
 8007db2:	4611      	mov	r1, r2
 8007db4:	4618      	mov	r0, r3
 8007db6:	f001 fbdd 	bl	8009574 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	3301      	adds	r3, #1
 8007dbe:	617b      	str	r3, [r7, #20]
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	2b07      	cmp	r3, #7
 8007dc4:	d9c4      	bls.n	8007d50 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	68fa      	ldr	r2, [r7, #12]
 8007dca:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8007dd2:	bf00      	nop
 8007dd4:	3718      	adds	r7, #24
 8007dd6:	46bd      	mov	sp, r7
 8007dd8:	bd80      	pop	{r7, pc}

08007dda <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dda:	b580      	push	{r7, lr}
 8007ddc:	b082      	sub	sp, #8
 8007dde:	af00      	add	r7, sp, #0
 8007de0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d101      	bne.n	8007dec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007de8:	2301      	movs	r3, #1
 8007dea:	e041      	b.n	8007e70 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007df2:	b2db      	uxtb	r3, r3
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d106      	bne.n	8007e06 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f7fa fceb 	bl	80027dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2202      	movs	r2, #2
 8007e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	3304      	adds	r3, #4
 8007e16:	4619      	mov	r1, r3
 8007e18:	4610      	mov	r0, r2
 8007e1a:	f000 fa95 	bl	8008348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2201      	movs	r2, #1
 8007e5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2201      	movs	r2, #1
 8007e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3708      	adds	r7, #8
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b085      	sub	sp, #20
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e86:	b2db      	uxtb	r3, r3
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d001      	beq.n	8007e90 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007e8c:	2301      	movs	r3, #1
 8007e8e:	e04e      	b.n	8007f2e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2202      	movs	r2, #2
 8007e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0201 	orr.w	r2, r2, #1
 8007ea6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a23      	ldr	r2, [pc, #140]	; (8007f3c <HAL_TIM_Base_Start_IT+0xc4>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d022      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007eba:	d01d      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a1f      	ldr	r2, [pc, #124]	; (8007f40 <HAL_TIM_Base_Start_IT+0xc8>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d018      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4a1e      	ldr	r2, [pc, #120]	; (8007f44 <HAL_TIM_Base_Start_IT+0xcc>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d013      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a1c      	ldr	r2, [pc, #112]	; (8007f48 <HAL_TIM_Base_Start_IT+0xd0>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d00e      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	4a1b      	ldr	r2, [pc, #108]	; (8007f4c <HAL_TIM_Base_Start_IT+0xd4>)
 8007ee0:	4293      	cmp	r3, r2
 8007ee2:	d009      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	4a19      	ldr	r2, [pc, #100]	; (8007f50 <HAL_TIM_Base_Start_IT+0xd8>)
 8007eea:	4293      	cmp	r3, r2
 8007eec:	d004      	beq.n	8007ef8 <HAL_TIM_Base_Start_IT+0x80>
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	4a18      	ldr	r2, [pc, #96]	; (8007f54 <HAL_TIM_Base_Start_IT+0xdc>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d111      	bne.n	8007f1c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	689b      	ldr	r3, [r3, #8]
 8007efe:	f003 0307 	and.w	r3, r3, #7
 8007f02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	2b06      	cmp	r3, #6
 8007f08:	d010      	beq.n	8007f2c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	681a      	ldr	r2, [r3, #0]
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f042 0201 	orr.w	r2, r2, #1
 8007f18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f1a:	e007      	b.n	8007f2c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f042 0201 	orr.w	r2, r2, #1
 8007f2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f2c:	2300      	movs	r3, #0
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3714      	adds	r7, #20
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	40010000 	.word	0x40010000
 8007f40:	40000400 	.word	0x40000400
 8007f44:	40000800 	.word	0x40000800
 8007f48:	40000c00 	.word	0x40000c00
 8007f4c:	40010400 	.word	0x40010400
 8007f50:	40014000 	.word	0x40014000
 8007f54:	40001800 	.word	0x40001800

08007f58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b082      	sub	sp, #8
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	691b      	ldr	r3, [r3, #16]
 8007f66:	f003 0302 	and.w	r3, r3, #2
 8007f6a:	2b02      	cmp	r3, #2
 8007f6c:	d122      	bne.n	8007fb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	68db      	ldr	r3, [r3, #12]
 8007f74:	f003 0302 	and.w	r3, r3, #2
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d11b      	bne.n	8007fb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f06f 0202 	mvn.w	r2, #2
 8007f84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2201      	movs	r2, #1
 8007f8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	f003 0303 	and.w	r3, r3, #3
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d003      	beq.n	8007fa2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f000 f9b5 	bl	800830a <HAL_TIM_IC_CaptureCallback>
 8007fa0:	e005      	b.n	8007fae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f000 f9a7 	bl	80082f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f9b8 	bl	800831e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	691b      	ldr	r3, [r3, #16]
 8007fba:	f003 0304 	and.w	r3, r3, #4
 8007fbe:	2b04      	cmp	r3, #4
 8007fc0:	d122      	bne.n	8008008 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	68db      	ldr	r3, [r3, #12]
 8007fc8:	f003 0304 	and.w	r3, r3, #4
 8007fcc:	2b04      	cmp	r3, #4
 8007fce:	d11b      	bne.n	8008008 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f06f 0204 	mvn.w	r2, #4
 8007fd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2202      	movs	r2, #2
 8007fde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	699b      	ldr	r3, [r3, #24]
 8007fe6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d003      	beq.n	8007ff6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007fee:	6878      	ldr	r0, [r7, #4]
 8007ff0:	f000 f98b 	bl	800830a <HAL_TIM_IC_CaptureCallback>
 8007ff4:	e005      	b.n	8008002 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ff6:	6878      	ldr	r0, [r7, #4]
 8007ff8:	f000 f97d 	bl	80082f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ffc:	6878      	ldr	r0, [r7, #4]
 8007ffe:	f000 f98e 	bl	800831e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2200      	movs	r2, #0
 8008006:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	691b      	ldr	r3, [r3, #16]
 800800e:	f003 0308 	and.w	r3, r3, #8
 8008012:	2b08      	cmp	r3, #8
 8008014:	d122      	bne.n	800805c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	68db      	ldr	r3, [r3, #12]
 800801c:	f003 0308 	and.w	r3, r3, #8
 8008020:	2b08      	cmp	r3, #8
 8008022:	d11b      	bne.n	800805c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f06f 0208 	mvn.w	r2, #8
 800802c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2204      	movs	r2, #4
 8008032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	69db      	ldr	r3, [r3, #28]
 800803a:	f003 0303 	and.w	r3, r3, #3
 800803e:	2b00      	cmp	r3, #0
 8008040:	d003      	beq.n	800804a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f000 f961 	bl	800830a <HAL_TIM_IC_CaptureCallback>
 8008048:	e005      	b.n	8008056 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 f953 	bl	80082f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f964 	bl	800831e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	691b      	ldr	r3, [r3, #16]
 8008062:	f003 0310 	and.w	r3, r3, #16
 8008066:	2b10      	cmp	r3, #16
 8008068:	d122      	bne.n	80080b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	68db      	ldr	r3, [r3, #12]
 8008070:	f003 0310 	and.w	r3, r3, #16
 8008074:	2b10      	cmp	r3, #16
 8008076:	d11b      	bne.n	80080b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f06f 0210 	mvn.w	r2, #16
 8008080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2208      	movs	r2, #8
 8008086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	69db      	ldr	r3, [r3, #28]
 800808e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	f000 f937 	bl	800830a <HAL_TIM_IC_CaptureCallback>
 800809c:	e005      	b.n	80080aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f000 f929 	bl	80082f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080a4:	6878      	ldr	r0, [r7, #4]
 80080a6:	f000 f93a 	bl	800831e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	f003 0301 	and.w	r3, r3, #1
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d10e      	bne.n	80080dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	68db      	ldr	r3, [r3, #12]
 80080c4:	f003 0301 	and.w	r3, r3, #1
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d107      	bne.n	80080dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f06f 0201 	mvn.w	r2, #1
 80080d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f7f9 fc78 	bl	80019cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	691b      	ldr	r3, [r3, #16]
 80080e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e6:	2b80      	cmp	r3, #128	; 0x80
 80080e8:	d10e      	bne.n	8008108 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68db      	ldr	r3, [r3, #12]
 80080f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080f4:	2b80      	cmp	r3, #128	; 0x80
 80080f6:	d107      	bne.n	8008108 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fae0 	bl	80086c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	691b      	ldr	r3, [r3, #16]
 800810e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008112:	2b40      	cmp	r3, #64	; 0x40
 8008114:	d10e      	bne.n	8008134 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	68db      	ldr	r3, [r3, #12]
 800811c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008120:	2b40      	cmp	r3, #64	; 0x40
 8008122:	d107      	bne.n	8008134 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800812c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 f8ff 	bl	8008332 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	f003 0320 	and.w	r3, r3, #32
 800813e:	2b20      	cmp	r3, #32
 8008140:	d10e      	bne.n	8008160 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f003 0320 	and.w	r3, r3, #32
 800814c:	2b20      	cmp	r3, #32
 800814e:	d107      	bne.n	8008160 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f06f 0220 	mvn.w	r2, #32
 8008158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f000 faaa 	bl	80086b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008160:	bf00      	nop
 8008162:	3708      	adds	r7, #8
 8008164:	46bd      	mov	sp, r7
 8008166:	bd80      	pop	{r7, pc}

08008168 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b084      	sub	sp, #16
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008172:	2300      	movs	r3, #0
 8008174:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800817c:	2b01      	cmp	r3, #1
 800817e:	d101      	bne.n	8008184 <HAL_TIM_ConfigClockSource+0x1c>
 8008180:	2302      	movs	r3, #2
 8008182:	e0b4      	b.n	80082ee <HAL_TIM_ConfigClockSource+0x186>
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2202      	movs	r2, #2
 8008190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	689b      	ldr	r3, [r3, #8]
 800819a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80081a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80081aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80081b4:	683b      	ldr	r3, [r7, #0]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081bc:	d03e      	beq.n	800823c <HAL_TIM_ConfigClockSource+0xd4>
 80081be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081c2:	f200 8087 	bhi.w	80082d4 <HAL_TIM_ConfigClockSource+0x16c>
 80081c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081ca:	f000 8086 	beq.w	80082da <HAL_TIM_ConfigClockSource+0x172>
 80081ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081d2:	d87f      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x16c>
 80081d4:	2b70      	cmp	r3, #112	; 0x70
 80081d6:	d01a      	beq.n	800820e <HAL_TIM_ConfigClockSource+0xa6>
 80081d8:	2b70      	cmp	r3, #112	; 0x70
 80081da:	d87b      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x16c>
 80081dc:	2b60      	cmp	r3, #96	; 0x60
 80081de:	d050      	beq.n	8008282 <HAL_TIM_ConfigClockSource+0x11a>
 80081e0:	2b60      	cmp	r3, #96	; 0x60
 80081e2:	d877      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x16c>
 80081e4:	2b50      	cmp	r3, #80	; 0x50
 80081e6:	d03c      	beq.n	8008262 <HAL_TIM_ConfigClockSource+0xfa>
 80081e8:	2b50      	cmp	r3, #80	; 0x50
 80081ea:	d873      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x16c>
 80081ec:	2b40      	cmp	r3, #64	; 0x40
 80081ee:	d058      	beq.n	80082a2 <HAL_TIM_ConfigClockSource+0x13a>
 80081f0:	2b40      	cmp	r3, #64	; 0x40
 80081f2:	d86f      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x16c>
 80081f4:	2b30      	cmp	r3, #48	; 0x30
 80081f6:	d064      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x15a>
 80081f8:	2b30      	cmp	r3, #48	; 0x30
 80081fa:	d86b      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x16c>
 80081fc:	2b20      	cmp	r3, #32
 80081fe:	d060      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x15a>
 8008200:	2b20      	cmp	r3, #32
 8008202:	d867      	bhi.n	80082d4 <HAL_TIM_ConfigClockSource+0x16c>
 8008204:	2b00      	cmp	r3, #0
 8008206:	d05c      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x15a>
 8008208:	2b10      	cmp	r3, #16
 800820a:	d05a      	beq.n	80082c2 <HAL_TIM_ConfigClockSource+0x15a>
 800820c:	e062      	b.n	80082d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6818      	ldr	r0, [r3, #0]
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	6899      	ldr	r1, [r3, #8]
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	685a      	ldr	r2, [r3, #4]
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	68db      	ldr	r3, [r3, #12]
 800821e:	f000 f9ad 	bl	800857c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	689b      	ldr	r3, [r3, #8]
 8008228:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008230:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	609a      	str	r2, [r3, #8]
      break;
 800823a:	e04f      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	6818      	ldr	r0, [r3, #0]
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	6899      	ldr	r1, [r3, #8]
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	685a      	ldr	r2, [r3, #4]
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	68db      	ldr	r3, [r3, #12]
 800824c:	f000 f996 	bl	800857c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	689a      	ldr	r2, [r3, #8]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800825e:	609a      	str	r2, [r3, #8]
      break;
 8008260:	e03c      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6818      	ldr	r0, [r3, #0]
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	6859      	ldr	r1, [r3, #4]
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	68db      	ldr	r3, [r3, #12]
 800826e:	461a      	mov	r2, r3
 8008270:	f000 f90a 	bl	8008488 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	2150      	movs	r1, #80	; 0x50
 800827a:	4618      	mov	r0, r3
 800827c:	f000 f963 	bl	8008546 <TIM_ITRx_SetConfig>
      break;
 8008280:	e02c      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6818      	ldr	r0, [r3, #0]
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	6859      	ldr	r1, [r3, #4]
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68db      	ldr	r3, [r3, #12]
 800828e:	461a      	mov	r2, r3
 8008290:	f000 f929 	bl	80084e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2160      	movs	r1, #96	; 0x60
 800829a:	4618      	mov	r0, r3
 800829c:	f000 f953 	bl	8008546 <TIM_ITRx_SetConfig>
      break;
 80082a0:	e01c      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	6859      	ldr	r1, [r3, #4]
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	461a      	mov	r2, r3
 80082b0:	f000 f8ea 	bl	8008488 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2140      	movs	r1, #64	; 0x40
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 f943 	bl	8008546 <TIM_ITRx_SetConfig>
      break;
 80082c0:	e00c      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	4619      	mov	r1, r3
 80082cc:	4610      	mov	r0, r2
 80082ce:	f000 f93a 	bl	8008546 <TIM_ITRx_SetConfig>
      break;
 80082d2:	e003      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	73fb      	strb	r3, [r7, #15]
      break;
 80082d8:	e000      	b.n	80082dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80082da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2200      	movs	r2, #0
 80082e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80082ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80082ee:	4618      	mov	r0, r3
 80082f0:	3710      	adds	r7, #16
 80082f2:	46bd      	mov	sp, r7
 80082f4:	bd80      	pop	{r7, pc}

080082f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b083      	sub	sp, #12
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80082fe:	bf00      	nop
 8008300:	370c      	adds	r7, #12
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800830a:	b480      	push	{r7}
 800830c:	b083      	sub	sp, #12
 800830e:	af00      	add	r7, sp, #0
 8008310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008312:	bf00      	nop
 8008314:	370c      	adds	r7, #12
 8008316:	46bd      	mov	sp, r7
 8008318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831c:	4770      	bx	lr

0800831e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800831e:	b480      	push	{r7}
 8008320:	b083      	sub	sp, #12
 8008322:	af00      	add	r7, sp, #0
 8008324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008326:	bf00      	nop
 8008328:	370c      	adds	r7, #12
 800832a:	46bd      	mov	sp, r7
 800832c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008330:	4770      	bx	lr

08008332 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008332:	b480      	push	{r7}
 8008334:	b083      	sub	sp, #12
 8008336:	af00      	add	r7, sp, #0
 8008338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800833a:	bf00      	nop
 800833c:	370c      	adds	r7, #12
 800833e:	46bd      	mov	sp, r7
 8008340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008344:	4770      	bx	lr
	...

08008348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008348:	b480      	push	{r7}
 800834a:	b085      	sub	sp, #20
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	4a40      	ldr	r2, [pc, #256]	; (800845c <TIM_Base_SetConfig+0x114>)
 800835c:	4293      	cmp	r3, r2
 800835e:	d013      	beq.n	8008388 <TIM_Base_SetConfig+0x40>
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008366:	d00f      	beq.n	8008388 <TIM_Base_SetConfig+0x40>
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	4a3d      	ldr	r2, [pc, #244]	; (8008460 <TIM_Base_SetConfig+0x118>)
 800836c:	4293      	cmp	r3, r2
 800836e:	d00b      	beq.n	8008388 <TIM_Base_SetConfig+0x40>
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4a3c      	ldr	r2, [pc, #240]	; (8008464 <TIM_Base_SetConfig+0x11c>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d007      	beq.n	8008388 <TIM_Base_SetConfig+0x40>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	4a3b      	ldr	r2, [pc, #236]	; (8008468 <TIM_Base_SetConfig+0x120>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d003      	beq.n	8008388 <TIM_Base_SetConfig+0x40>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a3a      	ldr	r2, [pc, #232]	; (800846c <TIM_Base_SetConfig+0x124>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d108      	bne.n	800839a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800838e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	685b      	ldr	r3, [r3, #4]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	4313      	orrs	r3, r2
 8008398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	4a2f      	ldr	r2, [pc, #188]	; (800845c <TIM_Base_SetConfig+0x114>)
 800839e:	4293      	cmp	r3, r2
 80083a0:	d02b      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083a8:	d027      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	4a2c      	ldr	r2, [pc, #176]	; (8008460 <TIM_Base_SetConfig+0x118>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d023      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	4a2b      	ldr	r2, [pc, #172]	; (8008464 <TIM_Base_SetConfig+0x11c>)
 80083b6:	4293      	cmp	r3, r2
 80083b8:	d01f      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	4a2a      	ldr	r2, [pc, #168]	; (8008468 <TIM_Base_SetConfig+0x120>)
 80083be:	4293      	cmp	r3, r2
 80083c0:	d01b      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a29      	ldr	r2, [pc, #164]	; (800846c <TIM_Base_SetConfig+0x124>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d017      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a28      	ldr	r2, [pc, #160]	; (8008470 <TIM_Base_SetConfig+0x128>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d013      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	4a27      	ldr	r2, [pc, #156]	; (8008474 <TIM_Base_SetConfig+0x12c>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d00f      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a26      	ldr	r2, [pc, #152]	; (8008478 <TIM_Base_SetConfig+0x130>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d00b      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a25      	ldr	r2, [pc, #148]	; (800847c <TIM_Base_SetConfig+0x134>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d007      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a24      	ldr	r2, [pc, #144]	; (8008480 <TIM_Base_SetConfig+0x138>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d003      	beq.n	80083fa <TIM_Base_SetConfig+0xb2>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a23      	ldr	r2, [pc, #140]	; (8008484 <TIM_Base_SetConfig+0x13c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d108      	bne.n	800840c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	68db      	ldr	r3, [r3, #12]
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	4313      	orrs	r3, r2
 800840a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	4313      	orrs	r3, r2
 8008418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	689a      	ldr	r2, [r3, #8]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008428:	683b      	ldr	r3, [r7, #0]
 800842a:	681a      	ldr	r2, [r3, #0]
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4a0a      	ldr	r2, [pc, #40]	; (800845c <TIM_Base_SetConfig+0x114>)
 8008434:	4293      	cmp	r3, r2
 8008436:	d003      	beq.n	8008440 <TIM_Base_SetConfig+0xf8>
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	4a0c      	ldr	r2, [pc, #48]	; (800846c <TIM_Base_SetConfig+0x124>)
 800843c:	4293      	cmp	r3, r2
 800843e:	d103      	bne.n	8008448 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	691a      	ldr	r2, [r3, #16]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2201      	movs	r2, #1
 800844c:	615a      	str	r2, [r3, #20]
}
 800844e:	bf00      	nop
 8008450:	3714      	adds	r7, #20
 8008452:	46bd      	mov	sp, r7
 8008454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008458:	4770      	bx	lr
 800845a:	bf00      	nop
 800845c:	40010000 	.word	0x40010000
 8008460:	40000400 	.word	0x40000400
 8008464:	40000800 	.word	0x40000800
 8008468:	40000c00 	.word	0x40000c00
 800846c:	40010400 	.word	0x40010400
 8008470:	40014000 	.word	0x40014000
 8008474:	40014400 	.word	0x40014400
 8008478:	40014800 	.word	0x40014800
 800847c:	40001800 	.word	0x40001800
 8008480:	40001c00 	.word	0x40001c00
 8008484:	40002000 	.word	0x40002000

08008488 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008488:	b480      	push	{r7}
 800848a:	b087      	sub	sp, #28
 800848c:	af00      	add	r7, sp, #0
 800848e:	60f8      	str	r0, [r7, #12]
 8008490:	60b9      	str	r1, [r7, #8]
 8008492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	6a1b      	ldr	r3, [r3, #32]
 8008498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	f023 0201 	bic.w	r2, r3, #1
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	699b      	ldr	r3, [r3, #24]
 80084aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	011b      	lsls	r3, r3, #4
 80084b8:	693a      	ldr	r2, [r7, #16]
 80084ba:	4313      	orrs	r3, r2
 80084bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	f023 030a 	bic.w	r3, r3, #10
 80084c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084c6:	697a      	ldr	r2, [r7, #20]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	693a      	ldr	r2, [r7, #16]
 80084d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	621a      	str	r2, [r3, #32]
}
 80084da:	bf00      	nop
 80084dc:	371c      	adds	r7, #28
 80084de:	46bd      	mov	sp, r7
 80084e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e4:	4770      	bx	lr

080084e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084e6:	b480      	push	{r7}
 80084e8:	b087      	sub	sp, #28
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	60f8      	str	r0, [r7, #12]
 80084ee:	60b9      	str	r1, [r7, #8]
 80084f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	f023 0210 	bic.w	r2, r3, #16
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6a1b      	ldr	r3, [r3, #32]
 8008508:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008510:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	031b      	lsls	r3, r3, #12
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	4313      	orrs	r3, r2
 800851a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008522:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008524:	68bb      	ldr	r3, [r7, #8]
 8008526:	011b      	lsls	r3, r3, #4
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	4313      	orrs	r3, r2
 800852c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	697a      	ldr	r2, [r7, #20]
 8008532:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	621a      	str	r2, [r3, #32]
}
 800853a:	bf00      	nop
 800853c:	371c      	adds	r7, #28
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr

08008546 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008546:	b480      	push	{r7}
 8008548:	b085      	sub	sp, #20
 800854a:	af00      	add	r7, sp, #0
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	689b      	ldr	r3, [r3, #8]
 8008554:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800855c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4313      	orrs	r3, r2
 8008564:	f043 0307 	orr.w	r3, r3, #7
 8008568:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	609a      	str	r2, [r3, #8]
}
 8008570:	bf00      	nop
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800857c:	b480      	push	{r7}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008596:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	021a      	lsls	r2, r3, #8
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	431a      	orrs	r2, r3
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	609a      	str	r2, [r3, #8]
}
 80085b0:	bf00      	nop
 80085b2:	371c      	adds	r7, #28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	d101      	bne.n	80085d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085d0:	2302      	movs	r3, #2
 80085d2:	e05a      	b.n	800868a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2202      	movs	r2, #2
 80085e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	685b      	ldr	r3, [r3, #4]
 80085ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80085fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68fa      	ldr	r2, [r7, #12]
 8008602:	4313      	orrs	r3, r2
 8008604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	68fa      	ldr	r2, [r7, #12]
 800860c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a21      	ldr	r2, [pc, #132]	; (8008698 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d022      	beq.n	800865e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008620:	d01d      	beq.n	800865e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a1d      	ldr	r2, [pc, #116]	; (800869c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d018      	beq.n	800865e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a1b      	ldr	r2, [pc, #108]	; (80086a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d013      	beq.n	800865e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a1a      	ldr	r2, [pc, #104]	; (80086a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d00e      	beq.n	800865e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a18      	ldr	r2, [pc, #96]	; (80086a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d009      	beq.n	800865e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a17      	ldr	r2, [pc, #92]	; (80086ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d004      	beq.n	800865e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a15      	ldr	r2, [pc, #84]	; (80086b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d10c      	bne.n	8008678 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008664:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	685b      	ldr	r3, [r3, #4]
 800866a:	68ba      	ldr	r2, [r7, #8]
 800866c:	4313      	orrs	r3, r2
 800866e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	68ba      	ldr	r2, [r7, #8]
 8008676:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	2200      	movs	r2, #0
 8008684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
 8008696:	bf00      	nop
 8008698:	40010000 	.word	0x40010000
 800869c:	40000400 	.word	0x40000400
 80086a0:	40000800 	.word	0x40000800
 80086a4:	40000c00 	.word	0x40000c00
 80086a8:	40010400 	.word	0x40010400
 80086ac:	40014000 	.word	0x40014000
 80086b0:	40001800 	.word	0x40001800

080086b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086b4:	b480      	push	{r7}
 80086b6:	b083      	sub	sp, #12
 80086b8:	af00      	add	r7, sp, #0
 80086ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086bc:	bf00      	nop
 80086be:	370c      	adds	r7, #12
 80086c0:	46bd      	mov	sp, r7
 80086c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c6:	4770      	bx	lr

080086c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086c8:	b480      	push	{r7}
 80086ca:	b083      	sub	sp, #12
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086d0:	bf00      	nop
 80086d2:	370c      	adds	r7, #12
 80086d4:	46bd      	mov	sp, r7
 80086d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086da:	4770      	bx	lr

080086dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d101      	bne.n	80086ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80086ea:	2301      	movs	r3, #1
 80086ec:	e03f      	b.n	800876e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086f4:	b2db      	uxtb	r3, r3
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d106      	bne.n	8008708 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2200      	movs	r2, #0
 80086fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f7fa f890 	bl	8002828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2224      	movs	r2, #36	; 0x24
 800870c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800871e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fc7b 	bl	800901c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	691a      	ldr	r2, [r3, #16]
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008734:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	695a      	ldr	r2, [r3, #20]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008744:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	68da      	ldr	r2, [r3, #12]
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008754:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	2200      	movs	r2, #0
 800875a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2220      	movs	r2, #32
 8008760:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2220      	movs	r2, #32
 8008768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800876c:	2300      	movs	r3, #0
}
 800876e:	4618      	mov	r0, r3
 8008770:	3708      	adds	r7, #8
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
	...

08008778 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b0ba      	sub	sp, #232	; 0xe8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	68db      	ldr	r3, [r3, #12]
 8008790:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	695b      	ldr	r3, [r3, #20]
 800879a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800879e:	2300      	movs	r3, #0
 80087a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80087a4:	2300      	movs	r3, #0
 80087a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80087aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087ae:	f003 030f 	and.w	r3, r3, #15
 80087b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80087b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d10f      	bne.n	80087de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80087be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80087c2:	f003 0320 	and.w	r3, r3, #32
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d009      	beq.n	80087de <HAL_UART_IRQHandler+0x66>
 80087ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087ce:	f003 0320 	and.w	r3, r3, #32
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d003      	beq.n	80087de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80087d6:	6878      	ldr	r0, [r7, #4]
 80087d8:	f000 fb65 	bl	8008ea6 <UART_Receive_IT>
      return;
 80087dc:	e256      	b.n	8008c8c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80087de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 80de 	beq.w	80089a4 <HAL_UART_IRQHandler+0x22c>
 80087e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d106      	bne.n	8008802 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80087f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f000 80d1 	beq.w	80089a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008806:	f003 0301 	and.w	r3, r3, #1
 800880a:	2b00      	cmp	r3, #0
 800880c:	d00b      	beq.n	8008826 <HAL_UART_IRQHandler+0xae>
 800880e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008816:	2b00      	cmp	r3, #0
 8008818:	d005      	beq.n	8008826 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881e:	f043 0201 	orr.w	r2, r3, #1
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008826:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800882a:	f003 0304 	and.w	r3, r3, #4
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00b      	beq.n	800884a <HAL_UART_IRQHandler+0xd2>
 8008832:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	2b00      	cmp	r3, #0
 800883c:	d005      	beq.n	800884a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008842:	f043 0202 	orr.w	r2, r3, #2
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800884a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800884e:	f003 0302 	and.w	r3, r3, #2
 8008852:	2b00      	cmp	r3, #0
 8008854:	d00b      	beq.n	800886e <HAL_UART_IRQHandler+0xf6>
 8008856:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d005      	beq.n	800886e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008866:	f043 0204 	orr.w	r2, r3, #4
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800886e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008872:	f003 0308 	and.w	r3, r3, #8
 8008876:	2b00      	cmp	r3, #0
 8008878:	d011      	beq.n	800889e <HAL_UART_IRQHandler+0x126>
 800887a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800887e:	f003 0320 	and.w	r3, r3, #32
 8008882:	2b00      	cmp	r3, #0
 8008884:	d105      	bne.n	8008892 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800888a:	f003 0301 	and.w	r3, r3, #1
 800888e:	2b00      	cmp	r3, #0
 8008890:	d005      	beq.n	800889e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008896:	f043 0208 	orr.w	r2, r3, #8
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	f000 81ed 	beq.w	8008c82 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80088a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ac:	f003 0320 	and.w	r3, r3, #32
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d008      	beq.n	80088c6 <HAL_UART_IRQHandler+0x14e>
 80088b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088b8:	f003 0320 	and.w	r3, r3, #32
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d002      	beq.n	80088c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 faf0 	bl	8008ea6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	695b      	ldr	r3, [r3, #20]
 80088cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d0:	2b40      	cmp	r3, #64	; 0x40
 80088d2:	bf0c      	ite	eq
 80088d4:	2301      	moveq	r3, #1
 80088d6:	2300      	movne	r3, #0
 80088d8:	b2db      	uxtb	r3, r3
 80088da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e2:	f003 0308 	and.w	r3, r3, #8
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d103      	bne.n	80088f2 <HAL_UART_IRQHandler+0x17a>
 80088ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d04f      	beq.n	8008992 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 f9f8 	bl	8008ce8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	695b      	ldr	r3, [r3, #20]
 80088fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008902:	2b40      	cmp	r3, #64	; 0x40
 8008904:	d141      	bne.n	800898a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3314      	adds	r3, #20
 800890c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008910:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008914:	e853 3f00 	ldrex	r3, [r3]
 8008918:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800891c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008924:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	3314      	adds	r3, #20
 800892e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008932:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008936:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800893a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800893e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008942:	e841 2300 	strex	r3, r2, [r1]
 8008946:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800894a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800894e:	2b00      	cmp	r3, #0
 8008950:	d1d9      	bne.n	8008906 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008956:	2b00      	cmp	r3, #0
 8008958:	d013      	beq.n	8008982 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800895e:	4a7d      	ldr	r2, [pc, #500]	; (8008b54 <HAL_UART_IRQHandler+0x3dc>)
 8008960:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008966:	4618      	mov	r0, r3
 8008968:	f7fa fc34 	bl	80031d4 <HAL_DMA_Abort_IT>
 800896c:	4603      	mov	r3, r0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d016      	beq.n	80089a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008976:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800897c:	4610      	mov	r0, r2
 800897e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008980:	e00e      	b.n	80089a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f000 f99a 	bl	8008cbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008988:	e00a      	b.n	80089a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f996 	bl	8008cbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008990:	e006      	b.n	80089a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f000 f992 	bl	8008cbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2200      	movs	r2, #0
 800899c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800899e:	e170      	b.n	8008c82 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089a0:	bf00      	nop
    return;
 80089a2:	e16e      	b.n	8008c82 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	f040 814a 	bne.w	8008c42 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80089ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089b2:	f003 0310 	and.w	r3, r3, #16
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	f000 8143 	beq.w	8008c42 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80089bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089c0:	f003 0310 	and.w	r3, r3, #16
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	f000 813c 	beq.w	8008c42 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80089ca:	2300      	movs	r3, #0
 80089cc:	60bb      	str	r3, [r7, #8]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	60bb      	str	r3, [r7, #8]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	60bb      	str	r3, [r7, #8]
 80089de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	695b      	ldr	r3, [r3, #20]
 80089e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089ea:	2b40      	cmp	r3, #64	; 0x40
 80089ec:	f040 80b4 	bne.w	8008b58 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	f000 8140 	beq.w	8008c86 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008a0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a0e:	429a      	cmp	r2, r3
 8008a10:	f080 8139 	bcs.w	8008c86 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008a1a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a20:	69db      	ldr	r3, [r3, #28]
 8008a22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a26:	f000 8088 	beq.w	8008b3a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	330c      	adds	r3, #12
 8008a30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a34:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a38:	e853 3f00 	ldrex	r3, [r3]
 8008a3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a40:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	330c      	adds	r3, #12
 8008a52:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008a56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008a5a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a62:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a66:	e841 2300 	strex	r3, r2, [r1]
 8008a6a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d1d9      	bne.n	8008a2a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	3314      	adds	r3, #20
 8008a7c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a80:	e853 3f00 	ldrex	r3, [r3]
 8008a84:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a88:	f023 0301 	bic.w	r3, r3, #1
 8008a8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3314      	adds	r3, #20
 8008a96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a9a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a9e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008aa2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008aa6:	e841 2300 	strex	r3, r2, [r1]
 8008aaa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008aac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1e1      	bne.n	8008a76 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	3314      	adds	r3, #20
 8008ab8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008abc:	e853 3f00 	ldrex	r3, [r3]
 8008ac0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008ac2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ac8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	3314      	adds	r3, #20
 8008ad2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008ad6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008ad8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008adc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008ade:	e841 2300 	strex	r3, r2, [r1]
 8008ae2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d1e3      	bne.n	8008ab2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	2220      	movs	r2, #32
 8008aee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	330c      	adds	r3, #12
 8008afe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b02:	e853 3f00 	ldrex	r3, [r3]
 8008b06:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008b08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b0a:	f023 0310 	bic.w	r3, r3, #16
 8008b0e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	330c      	adds	r3, #12
 8008b18:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008b1c:	65ba      	str	r2, [r7, #88]	; 0x58
 8008b1e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b20:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008b24:	e841 2300 	strex	r3, r2, [r1]
 8008b28:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008b2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d1e3      	bne.n	8008af8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b34:	4618      	mov	r0, r3
 8008b36:	f7fa fadd 	bl	80030f4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	1ad3      	subs	r3, r2, r3
 8008b46:	b29b      	uxth	r3, r3
 8008b48:	4619      	mov	r1, r3
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	f000 f8c0 	bl	8008cd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008b50:	e099      	b.n	8008c86 <HAL_UART_IRQHandler+0x50e>
 8008b52:	bf00      	nop
 8008b54:	08008daf 	.word	0x08008daf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	1ad3      	subs	r3, r2, r3
 8008b64:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	f000 808b 	beq.w	8008c8a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008b74:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	f000 8086 	beq.w	8008c8a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	330c      	adds	r3, #12
 8008b84:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b88:	e853 3f00 	ldrex	r3, [r3]
 8008b8c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b90:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b94:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	330c      	adds	r3, #12
 8008b9e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008ba2:	647a      	str	r2, [r7, #68]	; 0x44
 8008ba4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ba8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e3      	bne.n	8008b7e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3314      	adds	r3, #20
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc0:	e853 3f00 	ldrex	r3, [r3]
 8008bc4:	623b      	str	r3, [r7, #32]
   return(result);
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	f023 0301 	bic.w	r3, r3, #1
 8008bcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	3314      	adds	r3, #20
 8008bd6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008bda:	633a      	str	r2, [r7, #48]	; 0x30
 8008bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bde:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008be0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008be2:	e841 2300 	strex	r3, r2, [r1]
 8008be6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1e3      	bne.n	8008bb6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	2220      	movs	r2, #32
 8008bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	330c      	adds	r3, #12
 8008c02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	e853 3f00 	ldrex	r3, [r3]
 8008c0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	f023 0310 	bic.w	r3, r3, #16
 8008c12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	330c      	adds	r3, #12
 8008c1c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008c20:	61fa      	str	r2, [r7, #28]
 8008c22:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c24:	69b9      	ldr	r1, [r7, #24]
 8008c26:	69fa      	ldr	r2, [r7, #28]
 8008c28:	e841 2300 	strex	r3, r2, [r1]
 8008c2c:	617b      	str	r3, [r7, #20]
   return(result);
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1e3      	bne.n	8008bfc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c38:	4619      	mov	r1, r3
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 f848 	bl	8008cd0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c40:	e023      	b.n	8008c8a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d009      	beq.n	8008c62 <HAL_UART_IRQHandler+0x4ea>
 8008c4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d003      	beq.n	8008c62 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008c5a:	6878      	ldr	r0, [r7, #4]
 8008c5c:	f000 f8bb 	bl	8008dd6 <UART_Transmit_IT>
    return;
 8008c60:	e014      	b.n	8008c8c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00e      	beq.n	8008c8c <HAL_UART_IRQHandler+0x514>
 8008c6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d008      	beq.n	8008c8c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f8fb 	bl	8008e76 <UART_EndTransmit_IT>
    return;
 8008c80:	e004      	b.n	8008c8c <HAL_UART_IRQHandler+0x514>
    return;
 8008c82:	bf00      	nop
 8008c84:	e002      	b.n	8008c8c <HAL_UART_IRQHandler+0x514>
      return;
 8008c86:	bf00      	nop
 8008c88:	e000      	b.n	8008c8c <HAL_UART_IRQHandler+0x514>
      return;
 8008c8a:	bf00      	nop
  }
}
 8008c8c:	37e8      	adds	r7, #232	; 0xe8
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop

08008c94 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c9c:	bf00      	nop
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008cc4:	bf00      	nop
 8008cc6:	370c      	adds	r7, #12
 8008cc8:	46bd      	mov	sp, r7
 8008cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cce:	4770      	bx	lr

08008cd0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b083      	sub	sp, #12
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	6078      	str	r0, [r7, #4]
 8008cd8:	460b      	mov	r3, r1
 8008cda:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008cdc:	bf00      	nop
 8008cde:	370c      	adds	r7, #12
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce6:	4770      	bx	lr

08008ce8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ce8:	b480      	push	{r7}
 8008cea:	b095      	sub	sp, #84	; 0x54
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	330c      	adds	r3, #12
 8008cf6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cfa:	e853 3f00 	ldrex	r3, [r3]
 8008cfe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d02:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d06:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	330c      	adds	r3, #12
 8008d0e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008d10:	643a      	str	r2, [r7, #64]	; 0x40
 8008d12:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d14:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d18:	e841 2300 	strex	r3, r2, [r1]
 8008d1c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d1e5      	bne.n	8008cf0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	3314      	adds	r3, #20
 8008d2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d2c:	6a3b      	ldr	r3, [r7, #32]
 8008d2e:	e853 3f00 	ldrex	r3, [r3]
 8008d32:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d34:	69fb      	ldr	r3, [r7, #28]
 8008d36:	f023 0301 	bic.w	r3, r3, #1
 8008d3a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	3314      	adds	r3, #20
 8008d42:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d44:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d46:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d4c:	e841 2300 	strex	r3, r2, [r1]
 8008d50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d1e5      	bne.n	8008d24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d119      	bne.n	8008d94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	330c      	adds	r3, #12
 8008d66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	e853 3f00 	ldrex	r3, [r3]
 8008d6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	f023 0310 	bic.w	r3, r3, #16
 8008d76:	647b      	str	r3, [r7, #68]	; 0x44
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	330c      	adds	r3, #12
 8008d7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d80:	61ba      	str	r2, [r7, #24]
 8008d82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d84:	6979      	ldr	r1, [r7, #20]
 8008d86:	69ba      	ldr	r2, [r7, #24]
 8008d88:	e841 2300 	strex	r3, r2, [r1]
 8008d8c:	613b      	str	r3, [r7, #16]
   return(result);
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d1e5      	bne.n	8008d60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2220      	movs	r2, #32
 8008d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2200      	movs	r2, #0
 8008da0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008da2:	bf00      	nop
 8008da4:	3754      	adds	r7, #84	; 0x54
 8008da6:	46bd      	mov	sp, r7
 8008da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dac:	4770      	bx	lr

08008dae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dae:	b580      	push	{r7, lr}
 8008db0:	b084      	sub	sp, #16
 8008db2:	af00      	add	r7, sp, #0
 8008db4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2200      	movs	r2, #0
 8008dc6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dc8:	68f8      	ldr	r0, [r7, #12]
 8008dca:	f7ff ff77 	bl	8008cbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008dce:	bf00      	nop
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	b085      	sub	sp, #20
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	2b21      	cmp	r3, #33	; 0x21
 8008de8:	d13e      	bne.n	8008e68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	689b      	ldr	r3, [r3, #8]
 8008dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008df2:	d114      	bne.n	8008e1e <UART_Transmit_IT+0x48>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d110      	bne.n	8008e1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6a1b      	ldr	r3, [r3, #32]
 8008e00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	881b      	ldrh	r3, [r3, #0]
 8008e06:	461a      	mov	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008e10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	6a1b      	ldr	r3, [r3, #32]
 8008e16:	1c9a      	adds	r2, r3, #2
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	621a      	str	r2, [r3, #32]
 8008e1c:	e008      	b.n	8008e30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
 8008e22:	1c59      	adds	r1, r3, #1
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	6211      	str	r1, [r2, #32]
 8008e28:	781a      	ldrb	r2, [r3, #0]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008e34:	b29b      	uxth	r3, r3
 8008e36:	3b01      	subs	r3, #1
 8008e38:	b29b      	uxth	r3, r3
 8008e3a:	687a      	ldr	r2, [r7, #4]
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d10f      	bne.n	8008e64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	68da      	ldr	r2, [r3, #12]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68da      	ldr	r2, [r3, #12]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008e62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008e64:	2300      	movs	r3, #0
 8008e66:	e000      	b.n	8008e6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008e68:	2302      	movs	r3, #2
  }
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3714      	adds	r7, #20
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e74:	4770      	bx	lr

08008e76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008e76:	b580      	push	{r7, lr}
 8008e78:	b082      	sub	sp, #8
 8008e7a:	af00      	add	r7, sp, #0
 8008e7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	68da      	ldr	r2, [r3, #12]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2220      	movs	r2, #32
 8008e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e96:	6878      	ldr	r0, [r7, #4]
 8008e98:	f7ff fefc 	bl	8008c94 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}

08008ea6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b08c      	sub	sp, #48	; 0x30
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	2b22      	cmp	r3, #34	; 0x22
 8008eb8:	f040 80ab 	bne.w	8009012 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ec4:	d117      	bne.n	8008ef6 <UART_Receive_IT+0x50>
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	691b      	ldr	r3, [r3, #16]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d113      	bne.n	8008ef6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008ece:	2300      	movs	r3, #0
 8008ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ed6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008eee:	1c9a      	adds	r2, r3, #2
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	629a      	str	r2, [r3, #40]	; 0x28
 8008ef4:	e026      	b.n	8008f44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008efa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008efc:	2300      	movs	r3, #0
 8008efe:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	689b      	ldr	r3, [r3, #8]
 8008f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f08:	d007      	beq.n	8008f1a <UART_Receive_IT+0x74>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d10a      	bne.n	8008f28 <UART_Receive_IT+0x82>
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d106      	bne.n	8008f28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	b2da      	uxtb	r2, r3
 8008f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f24:	701a      	strb	r2, [r3, #0]
 8008f26:	e008      	b.n	8008f3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f34:	b2da      	uxtb	r2, r3
 8008f36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f3e:	1c5a      	adds	r2, r3, #1
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f48:	b29b      	uxth	r3, r3
 8008f4a:	3b01      	subs	r3, #1
 8008f4c:	b29b      	uxth	r3, r3
 8008f4e:	687a      	ldr	r2, [r7, #4]
 8008f50:	4619      	mov	r1, r3
 8008f52:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d15a      	bne.n	800900e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	68da      	ldr	r2, [r3, #12]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f022 0220 	bic.w	r2, r2, #32
 8008f66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68da      	ldr	r2, [r3, #12]
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008f76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	695a      	ldr	r2, [r3, #20]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f022 0201 	bic.w	r2, r2, #1
 8008f86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	2220      	movs	r2, #32
 8008f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f94:	2b01      	cmp	r3, #1
 8008f96:	d135      	bne.n	8009004 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	330c      	adds	r3, #12
 8008fa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fa6:	697b      	ldr	r3, [r7, #20]
 8008fa8:	e853 3f00 	ldrex	r3, [r3]
 8008fac:	613b      	str	r3, [r7, #16]
   return(result);
 8008fae:	693b      	ldr	r3, [r7, #16]
 8008fb0:	f023 0310 	bic.w	r3, r3, #16
 8008fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	330c      	adds	r3, #12
 8008fbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008fbe:	623a      	str	r2, [r7, #32]
 8008fc0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fc2:	69f9      	ldr	r1, [r7, #28]
 8008fc4:	6a3a      	ldr	r2, [r7, #32]
 8008fc6:	e841 2300 	strex	r3, r2, [r1]
 8008fca:	61bb      	str	r3, [r7, #24]
   return(result);
 8008fcc:	69bb      	ldr	r3, [r7, #24]
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d1e5      	bne.n	8008f9e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f003 0310 	and.w	r3, r3, #16
 8008fdc:	2b10      	cmp	r3, #16
 8008fde:	d10a      	bne.n	8008ff6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	60fb      	str	r3, [r7, #12]
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	60fb      	str	r3, [r7, #12]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	60fb      	str	r3, [r7, #12]
 8008ff4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f7ff fe67 	bl	8008cd0 <HAL_UARTEx_RxEventCallback>
 8009002:	e002      	b.n	800900a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f7ff fe4f 	bl	8008ca8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800900a:	2300      	movs	r3, #0
 800900c:	e002      	b.n	8009014 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	e000      	b.n	8009014 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009012:	2302      	movs	r3, #2
  }
}
 8009014:	4618      	mov	r0, r3
 8009016:	3730      	adds	r7, #48	; 0x30
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}

0800901c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800901c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009020:	b0c0      	sub	sp, #256	; 0x100
 8009022:	af00      	add	r7, sp, #0
 8009024:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	691b      	ldr	r3, [r3, #16]
 8009030:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009038:	68d9      	ldr	r1, [r3, #12]
 800903a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	ea40 0301 	orr.w	r3, r0, r1
 8009044:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800904a:	689a      	ldr	r2, [r3, #8]
 800904c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009050:	691b      	ldr	r3, [r3, #16]
 8009052:	431a      	orrs	r2, r3
 8009054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009058:	695b      	ldr	r3, [r3, #20]
 800905a:	431a      	orrs	r2, r3
 800905c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009060:	69db      	ldr	r3, [r3, #28]
 8009062:	4313      	orrs	r3, r2
 8009064:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	68db      	ldr	r3, [r3, #12]
 8009070:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009074:	f021 010c 	bic.w	r1, r1, #12
 8009078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009082:	430b      	orrs	r3, r1
 8009084:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	695b      	ldr	r3, [r3, #20]
 800908e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009096:	6999      	ldr	r1, [r3, #24]
 8009098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800909c:	681a      	ldr	r2, [r3, #0]
 800909e:	ea40 0301 	orr.w	r3, r0, r1
 80090a2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80090a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090a8:	681a      	ldr	r2, [r3, #0]
 80090aa:	4b8f      	ldr	r3, [pc, #572]	; (80092e8 <UART_SetConfig+0x2cc>)
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d005      	beq.n	80090bc <UART_SetConfig+0xa0>
 80090b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090b4:	681a      	ldr	r2, [r3, #0]
 80090b6:	4b8d      	ldr	r3, [pc, #564]	; (80092ec <UART_SetConfig+0x2d0>)
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d104      	bne.n	80090c6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80090bc:	f7fd fb46 	bl	800674c <HAL_RCC_GetPCLK2Freq>
 80090c0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80090c4:	e003      	b.n	80090ce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80090c6:	f7fd fb2d 	bl	8006724 <HAL_RCC_GetPCLK1Freq>
 80090ca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80090ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80090d2:	69db      	ldr	r3, [r3, #28]
 80090d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80090d8:	f040 810c 	bne.w	80092f4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80090dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80090e0:	2200      	movs	r2, #0
 80090e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80090e6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80090ea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80090ee:	4622      	mov	r2, r4
 80090f0:	462b      	mov	r3, r5
 80090f2:	1891      	adds	r1, r2, r2
 80090f4:	65b9      	str	r1, [r7, #88]	; 0x58
 80090f6:	415b      	adcs	r3, r3
 80090f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090fa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80090fe:	4621      	mov	r1, r4
 8009100:	eb12 0801 	adds.w	r8, r2, r1
 8009104:	4629      	mov	r1, r5
 8009106:	eb43 0901 	adc.w	r9, r3, r1
 800910a:	f04f 0200 	mov.w	r2, #0
 800910e:	f04f 0300 	mov.w	r3, #0
 8009112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800911a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800911e:	4690      	mov	r8, r2
 8009120:	4699      	mov	r9, r3
 8009122:	4623      	mov	r3, r4
 8009124:	eb18 0303 	adds.w	r3, r8, r3
 8009128:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800912c:	462b      	mov	r3, r5
 800912e:	eb49 0303 	adc.w	r3, r9, r3
 8009132:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	2200      	movs	r2, #0
 800913e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009142:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009146:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800914a:	460b      	mov	r3, r1
 800914c:	18db      	adds	r3, r3, r3
 800914e:	653b      	str	r3, [r7, #80]	; 0x50
 8009150:	4613      	mov	r3, r2
 8009152:	eb42 0303 	adc.w	r3, r2, r3
 8009156:	657b      	str	r3, [r7, #84]	; 0x54
 8009158:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800915c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009160:	f7f7 fd22 	bl	8000ba8 <__aeabi_uldivmod>
 8009164:	4602      	mov	r2, r0
 8009166:	460b      	mov	r3, r1
 8009168:	4b61      	ldr	r3, [pc, #388]	; (80092f0 <UART_SetConfig+0x2d4>)
 800916a:	fba3 2302 	umull	r2, r3, r3, r2
 800916e:	095b      	lsrs	r3, r3, #5
 8009170:	011c      	lsls	r4, r3, #4
 8009172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009176:	2200      	movs	r2, #0
 8009178:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800917c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009180:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009184:	4642      	mov	r2, r8
 8009186:	464b      	mov	r3, r9
 8009188:	1891      	adds	r1, r2, r2
 800918a:	64b9      	str	r1, [r7, #72]	; 0x48
 800918c:	415b      	adcs	r3, r3
 800918e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009190:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009194:	4641      	mov	r1, r8
 8009196:	eb12 0a01 	adds.w	sl, r2, r1
 800919a:	4649      	mov	r1, r9
 800919c:	eb43 0b01 	adc.w	fp, r3, r1
 80091a0:	f04f 0200 	mov.w	r2, #0
 80091a4:	f04f 0300 	mov.w	r3, #0
 80091a8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80091ac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80091b0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80091b4:	4692      	mov	sl, r2
 80091b6:	469b      	mov	fp, r3
 80091b8:	4643      	mov	r3, r8
 80091ba:	eb1a 0303 	adds.w	r3, sl, r3
 80091be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80091c2:	464b      	mov	r3, r9
 80091c4:	eb4b 0303 	adc.w	r3, fp, r3
 80091c8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80091cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80091d8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80091dc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80091e0:	460b      	mov	r3, r1
 80091e2:	18db      	adds	r3, r3, r3
 80091e4:	643b      	str	r3, [r7, #64]	; 0x40
 80091e6:	4613      	mov	r3, r2
 80091e8:	eb42 0303 	adc.w	r3, r2, r3
 80091ec:	647b      	str	r3, [r7, #68]	; 0x44
 80091ee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80091f2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80091f6:	f7f7 fcd7 	bl	8000ba8 <__aeabi_uldivmod>
 80091fa:	4602      	mov	r2, r0
 80091fc:	460b      	mov	r3, r1
 80091fe:	4611      	mov	r1, r2
 8009200:	4b3b      	ldr	r3, [pc, #236]	; (80092f0 <UART_SetConfig+0x2d4>)
 8009202:	fba3 2301 	umull	r2, r3, r3, r1
 8009206:	095b      	lsrs	r3, r3, #5
 8009208:	2264      	movs	r2, #100	; 0x64
 800920a:	fb02 f303 	mul.w	r3, r2, r3
 800920e:	1acb      	subs	r3, r1, r3
 8009210:	00db      	lsls	r3, r3, #3
 8009212:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009216:	4b36      	ldr	r3, [pc, #216]	; (80092f0 <UART_SetConfig+0x2d4>)
 8009218:	fba3 2302 	umull	r2, r3, r3, r2
 800921c:	095b      	lsrs	r3, r3, #5
 800921e:	005b      	lsls	r3, r3, #1
 8009220:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009224:	441c      	add	r4, r3
 8009226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800922a:	2200      	movs	r2, #0
 800922c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009230:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009234:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009238:	4642      	mov	r2, r8
 800923a:	464b      	mov	r3, r9
 800923c:	1891      	adds	r1, r2, r2
 800923e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009240:	415b      	adcs	r3, r3
 8009242:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009244:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009248:	4641      	mov	r1, r8
 800924a:	1851      	adds	r1, r2, r1
 800924c:	6339      	str	r1, [r7, #48]	; 0x30
 800924e:	4649      	mov	r1, r9
 8009250:	414b      	adcs	r3, r1
 8009252:	637b      	str	r3, [r7, #52]	; 0x34
 8009254:	f04f 0200 	mov.w	r2, #0
 8009258:	f04f 0300 	mov.w	r3, #0
 800925c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009260:	4659      	mov	r1, fp
 8009262:	00cb      	lsls	r3, r1, #3
 8009264:	4651      	mov	r1, sl
 8009266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800926a:	4651      	mov	r1, sl
 800926c:	00ca      	lsls	r2, r1, #3
 800926e:	4610      	mov	r0, r2
 8009270:	4619      	mov	r1, r3
 8009272:	4603      	mov	r3, r0
 8009274:	4642      	mov	r2, r8
 8009276:	189b      	adds	r3, r3, r2
 8009278:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800927c:	464b      	mov	r3, r9
 800927e:	460a      	mov	r2, r1
 8009280:	eb42 0303 	adc.w	r3, r2, r3
 8009284:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800928c:	685b      	ldr	r3, [r3, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009294:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009298:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800929c:	460b      	mov	r3, r1
 800929e:	18db      	adds	r3, r3, r3
 80092a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80092a2:	4613      	mov	r3, r2
 80092a4:	eb42 0303 	adc.w	r3, r2, r3
 80092a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80092aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80092ae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80092b2:	f7f7 fc79 	bl	8000ba8 <__aeabi_uldivmod>
 80092b6:	4602      	mov	r2, r0
 80092b8:	460b      	mov	r3, r1
 80092ba:	4b0d      	ldr	r3, [pc, #52]	; (80092f0 <UART_SetConfig+0x2d4>)
 80092bc:	fba3 1302 	umull	r1, r3, r3, r2
 80092c0:	095b      	lsrs	r3, r3, #5
 80092c2:	2164      	movs	r1, #100	; 0x64
 80092c4:	fb01 f303 	mul.w	r3, r1, r3
 80092c8:	1ad3      	subs	r3, r2, r3
 80092ca:	00db      	lsls	r3, r3, #3
 80092cc:	3332      	adds	r3, #50	; 0x32
 80092ce:	4a08      	ldr	r2, [pc, #32]	; (80092f0 <UART_SetConfig+0x2d4>)
 80092d0:	fba2 2303 	umull	r2, r3, r2, r3
 80092d4:	095b      	lsrs	r3, r3, #5
 80092d6:	f003 0207 	and.w	r2, r3, #7
 80092da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	4422      	add	r2, r4
 80092e2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80092e4:	e106      	b.n	80094f4 <UART_SetConfig+0x4d8>
 80092e6:	bf00      	nop
 80092e8:	40011000 	.word	0x40011000
 80092ec:	40011400 	.word	0x40011400
 80092f0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092f8:	2200      	movs	r2, #0
 80092fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80092fe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009302:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009306:	4642      	mov	r2, r8
 8009308:	464b      	mov	r3, r9
 800930a:	1891      	adds	r1, r2, r2
 800930c:	6239      	str	r1, [r7, #32]
 800930e:	415b      	adcs	r3, r3
 8009310:	627b      	str	r3, [r7, #36]	; 0x24
 8009312:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009316:	4641      	mov	r1, r8
 8009318:	1854      	adds	r4, r2, r1
 800931a:	4649      	mov	r1, r9
 800931c:	eb43 0501 	adc.w	r5, r3, r1
 8009320:	f04f 0200 	mov.w	r2, #0
 8009324:	f04f 0300 	mov.w	r3, #0
 8009328:	00eb      	lsls	r3, r5, #3
 800932a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800932e:	00e2      	lsls	r2, r4, #3
 8009330:	4614      	mov	r4, r2
 8009332:	461d      	mov	r5, r3
 8009334:	4643      	mov	r3, r8
 8009336:	18e3      	adds	r3, r4, r3
 8009338:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800933c:	464b      	mov	r3, r9
 800933e:	eb45 0303 	adc.w	r3, r5, r3
 8009342:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009352:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009356:	f04f 0200 	mov.w	r2, #0
 800935a:	f04f 0300 	mov.w	r3, #0
 800935e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009362:	4629      	mov	r1, r5
 8009364:	008b      	lsls	r3, r1, #2
 8009366:	4621      	mov	r1, r4
 8009368:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800936c:	4621      	mov	r1, r4
 800936e:	008a      	lsls	r2, r1, #2
 8009370:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009374:	f7f7 fc18 	bl	8000ba8 <__aeabi_uldivmod>
 8009378:	4602      	mov	r2, r0
 800937a:	460b      	mov	r3, r1
 800937c:	4b60      	ldr	r3, [pc, #384]	; (8009500 <UART_SetConfig+0x4e4>)
 800937e:	fba3 2302 	umull	r2, r3, r3, r2
 8009382:	095b      	lsrs	r3, r3, #5
 8009384:	011c      	lsls	r4, r3, #4
 8009386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800938a:	2200      	movs	r2, #0
 800938c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009390:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009394:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009398:	4642      	mov	r2, r8
 800939a:	464b      	mov	r3, r9
 800939c:	1891      	adds	r1, r2, r2
 800939e:	61b9      	str	r1, [r7, #24]
 80093a0:	415b      	adcs	r3, r3
 80093a2:	61fb      	str	r3, [r7, #28]
 80093a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093a8:	4641      	mov	r1, r8
 80093aa:	1851      	adds	r1, r2, r1
 80093ac:	6139      	str	r1, [r7, #16]
 80093ae:	4649      	mov	r1, r9
 80093b0:	414b      	adcs	r3, r1
 80093b2:	617b      	str	r3, [r7, #20]
 80093b4:	f04f 0200 	mov.w	r2, #0
 80093b8:	f04f 0300 	mov.w	r3, #0
 80093bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80093c0:	4659      	mov	r1, fp
 80093c2:	00cb      	lsls	r3, r1, #3
 80093c4:	4651      	mov	r1, sl
 80093c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80093ca:	4651      	mov	r1, sl
 80093cc:	00ca      	lsls	r2, r1, #3
 80093ce:	4610      	mov	r0, r2
 80093d0:	4619      	mov	r1, r3
 80093d2:	4603      	mov	r3, r0
 80093d4:	4642      	mov	r2, r8
 80093d6:	189b      	adds	r3, r3, r2
 80093d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80093dc:	464b      	mov	r3, r9
 80093de:	460a      	mov	r2, r1
 80093e0:	eb42 0303 	adc.w	r3, r2, r3
 80093e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80093e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80093f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80093f4:	f04f 0200 	mov.w	r2, #0
 80093f8:	f04f 0300 	mov.w	r3, #0
 80093fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009400:	4649      	mov	r1, r9
 8009402:	008b      	lsls	r3, r1, #2
 8009404:	4641      	mov	r1, r8
 8009406:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800940a:	4641      	mov	r1, r8
 800940c:	008a      	lsls	r2, r1, #2
 800940e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009412:	f7f7 fbc9 	bl	8000ba8 <__aeabi_uldivmod>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	4611      	mov	r1, r2
 800941c:	4b38      	ldr	r3, [pc, #224]	; (8009500 <UART_SetConfig+0x4e4>)
 800941e:	fba3 2301 	umull	r2, r3, r3, r1
 8009422:	095b      	lsrs	r3, r3, #5
 8009424:	2264      	movs	r2, #100	; 0x64
 8009426:	fb02 f303 	mul.w	r3, r2, r3
 800942a:	1acb      	subs	r3, r1, r3
 800942c:	011b      	lsls	r3, r3, #4
 800942e:	3332      	adds	r3, #50	; 0x32
 8009430:	4a33      	ldr	r2, [pc, #204]	; (8009500 <UART_SetConfig+0x4e4>)
 8009432:	fba2 2303 	umull	r2, r3, r2, r3
 8009436:	095b      	lsrs	r3, r3, #5
 8009438:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800943c:	441c      	add	r4, r3
 800943e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009442:	2200      	movs	r2, #0
 8009444:	673b      	str	r3, [r7, #112]	; 0x70
 8009446:	677a      	str	r2, [r7, #116]	; 0x74
 8009448:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800944c:	4642      	mov	r2, r8
 800944e:	464b      	mov	r3, r9
 8009450:	1891      	adds	r1, r2, r2
 8009452:	60b9      	str	r1, [r7, #8]
 8009454:	415b      	adcs	r3, r3
 8009456:	60fb      	str	r3, [r7, #12]
 8009458:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800945c:	4641      	mov	r1, r8
 800945e:	1851      	adds	r1, r2, r1
 8009460:	6039      	str	r1, [r7, #0]
 8009462:	4649      	mov	r1, r9
 8009464:	414b      	adcs	r3, r1
 8009466:	607b      	str	r3, [r7, #4]
 8009468:	f04f 0200 	mov.w	r2, #0
 800946c:	f04f 0300 	mov.w	r3, #0
 8009470:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009474:	4659      	mov	r1, fp
 8009476:	00cb      	lsls	r3, r1, #3
 8009478:	4651      	mov	r1, sl
 800947a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800947e:	4651      	mov	r1, sl
 8009480:	00ca      	lsls	r2, r1, #3
 8009482:	4610      	mov	r0, r2
 8009484:	4619      	mov	r1, r3
 8009486:	4603      	mov	r3, r0
 8009488:	4642      	mov	r2, r8
 800948a:	189b      	adds	r3, r3, r2
 800948c:	66bb      	str	r3, [r7, #104]	; 0x68
 800948e:	464b      	mov	r3, r9
 8009490:	460a      	mov	r2, r1
 8009492:	eb42 0303 	adc.w	r3, r2, r3
 8009496:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800949c:	685b      	ldr	r3, [r3, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	663b      	str	r3, [r7, #96]	; 0x60
 80094a2:	667a      	str	r2, [r7, #100]	; 0x64
 80094a4:	f04f 0200 	mov.w	r2, #0
 80094a8:	f04f 0300 	mov.w	r3, #0
 80094ac:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80094b0:	4649      	mov	r1, r9
 80094b2:	008b      	lsls	r3, r1, #2
 80094b4:	4641      	mov	r1, r8
 80094b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80094ba:	4641      	mov	r1, r8
 80094bc:	008a      	lsls	r2, r1, #2
 80094be:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80094c2:	f7f7 fb71 	bl	8000ba8 <__aeabi_uldivmod>
 80094c6:	4602      	mov	r2, r0
 80094c8:	460b      	mov	r3, r1
 80094ca:	4b0d      	ldr	r3, [pc, #52]	; (8009500 <UART_SetConfig+0x4e4>)
 80094cc:	fba3 1302 	umull	r1, r3, r3, r2
 80094d0:	095b      	lsrs	r3, r3, #5
 80094d2:	2164      	movs	r1, #100	; 0x64
 80094d4:	fb01 f303 	mul.w	r3, r1, r3
 80094d8:	1ad3      	subs	r3, r2, r3
 80094da:	011b      	lsls	r3, r3, #4
 80094dc:	3332      	adds	r3, #50	; 0x32
 80094de:	4a08      	ldr	r2, [pc, #32]	; (8009500 <UART_SetConfig+0x4e4>)
 80094e0:	fba2 2303 	umull	r2, r3, r2, r3
 80094e4:	095b      	lsrs	r3, r3, #5
 80094e6:	f003 020f 	and.w	r2, r3, #15
 80094ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4422      	add	r2, r4
 80094f2:	609a      	str	r2, [r3, #8]
}
 80094f4:	bf00      	nop
 80094f6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80094fa:	46bd      	mov	sp, r7
 80094fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009500:	51eb851f 	.word	0x51eb851f

08009504 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009504:	b084      	sub	sp, #16
 8009506:	b480      	push	{r7}
 8009508:	b085      	sub	sp, #20
 800950a:	af00      	add	r7, sp, #0
 800950c:	6078      	str	r0, [r7, #4]
 800950e:	f107 001c 	add.w	r0, r7, #28
 8009512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009516:	2300      	movs	r3, #0
 8009518:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800951a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800951c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800951e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009522:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009524:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009526:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800952a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800952c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800952e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	4313      	orrs	r3, r2
 8009534:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800953e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009542:	68fa      	ldr	r2, [r7, #12]
 8009544:	431a      	orrs	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800954a:	2300      	movs	r3, #0
}
 800954c:	4618      	mov	r0, r3
 800954e:	3714      	adds	r7, #20
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	b004      	add	sp, #16
 8009558:	4770      	bx	lr

0800955a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800955a:	b480      	push	{r7}
 800955c:	b083      	sub	sp, #12
 800955e:	af00      	add	r7, sp, #0
 8009560:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009568:	4618      	mov	r0, r3
 800956a:	370c      	adds	r7, #12
 800956c:	46bd      	mov	sp, r7
 800956e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009572:	4770      	bx	lr

08009574 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
 800957c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	681a      	ldr	r2, [r3, #0]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009588:	2300      	movs	r3, #0
}
 800958a:	4618      	mov	r0, r3
 800958c:	370c      	adds	r7, #12
 800958e:	46bd      	mov	sp, r7
 8009590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009594:	4770      	bx	lr

08009596 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009596:	b480      	push	{r7}
 8009598:	b083      	sub	sp, #12
 800959a:	af00      	add	r7, sp, #0
 800959c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2203      	movs	r2, #3
 80095a2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr

080095b2 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80095b2:	b480      	push	{r7}
 80095b4:	b083      	sub	sp, #12
 80095b6:	af00      	add	r7, sp, #0
 80095b8:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f003 0303 	and.w	r3, r3, #3
}
 80095c2:	4618      	mov	r0, r3
 80095c4:	370c      	adds	r7, #12
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr

080095ce <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80095ce:	b480      	push	{r7}
 80095d0:	b085      	sub	sp, #20
 80095d2:	af00      	add	r7, sp, #0
 80095d4:	6078      	str	r0, [r7, #4]
 80095d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80095d8:	2300      	movs	r3, #0
 80095da:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	681a      	ldr	r2, [r3, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80095e4:	683b      	ldr	r3, [r7, #0]
 80095e6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80095ec:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80095f2:	431a      	orrs	r2, r3
                       Command->CPSM);
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80095f8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80095fa:	68fa      	ldr	r2, [r7, #12]
 80095fc:	4313      	orrs	r3, r2
 80095fe:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	68db      	ldr	r3, [r3, #12]
 8009604:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009608:	f023 030f 	bic.w	r3, r3, #15
 800960c:	68fa      	ldr	r2, [r7, #12]
 800960e:	431a      	orrs	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009614:	2300      	movs	r3, #0
}
 8009616:	4618      	mov	r0, r3
 8009618:	3714      	adds	r7, #20
 800961a:	46bd      	mov	sp, r7
 800961c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009620:	4770      	bx	lr

08009622 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009622:	b480      	push	{r7}
 8009624:	b083      	sub	sp, #12
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	691b      	ldr	r3, [r3, #16]
 800962e:	b2db      	uxtb	r3, r3
}
 8009630:	4618      	mov	r0, r3
 8009632:	370c      	adds	r7, #12
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr

0800963c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	3314      	adds	r3, #20
 800964a:	461a      	mov	r2, r3
 800964c:	683b      	ldr	r3, [r7, #0]
 800964e:	4413      	add	r3, r2
 8009650:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
}  
 8009656:	4618      	mov	r0, r3
 8009658:	3714      	adds	r7, #20
 800965a:	46bd      	mov	sp, r7
 800965c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009660:	4770      	bx	lr

08009662 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8009662:	b480      	push	{r7}
 8009664:	b085      	sub	sp, #20
 8009666:	af00      	add	r7, sp, #0
 8009668:	6078      	str	r0, [r7, #4]
 800966a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800966c:	2300      	movs	r3, #0
 800966e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	685a      	ldr	r2, [r3, #4]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009688:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800968a:	683b      	ldr	r3, [r7, #0]
 800968c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800968e:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009690:	683b      	ldr	r3, [r7, #0]
 8009692:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009694:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	4313      	orrs	r3, r2
 800969a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a0:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	431a      	orrs	r2, r3
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80096ac:	2300      	movs	r3, #0

}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3714      	adds	r7, #20
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80096ba:	b580      	push	{r7, lr}
 80096bc:	b088      	sub	sp, #32
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
 80096c2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80096c8:	2310      	movs	r3, #16
 80096ca:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80096cc:	2340      	movs	r3, #64	; 0x40
 80096ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80096d0:	2300      	movs	r3, #0
 80096d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80096d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80096d8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80096da:	f107 0308 	add.w	r3, r7, #8
 80096de:	4619      	mov	r1, r3
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f7ff ff74 	bl	80095ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80096e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80096ea:	2110      	movs	r1, #16
 80096ec:	6878      	ldr	r0, [r7, #4]
 80096ee:	f000 fa19 	bl	8009b24 <SDMMC_GetCmdResp1>
 80096f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80096f4:	69fb      	ldr	r3, [r7, #28]
}
 80096f6:	4618      	mov	r0, r3
 80096f8:	3720      	adds	r7, #32
 80096fa:	46bd      	mov	sp, r7
 80096fc:	bd80      	pop	{r7, pc}

080096fe <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80096fe:	b580      	push	{r7, lr}
 8009700:	b088      	sub	sp, #32
 8009702:	af00      	add	r7, sp, #0
 8009704:	6078      	str	r0, [r7, #4]
 8009706:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800970c:	2311      	movs	r3, #17
 800970e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009710:	2340      	movs	r3, #64	; 0x40
 8009712:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009714:	2300      	movs	r3, #0
 8009716:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800971c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800971e:	f107 0308 	add.w	r3, r7, #8
 8009722:	4619      	mov	r1, r3
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f7ff ff52 	bl	80095ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800972a:	f241 3288 	movw	r2, #5000	; 0x1388
 800972e:	2111      	movs	r1, #17
 8009730:	6878      	ldr	r0, [r7, #4]
 8009732:	f000 f9f7 	bl	8009b24 <SDMMC_GetCmdResp1>
 8009736:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009738:	69fb      	ldr	r3, [r7, #28]
}
 800973a:	4618      	mov	r0, r3
 800973c:	3720      	adds	r7, #32
 800973e:	46bd      	mov	sp, r7
 8009740:	bd80      	pop	{r7, pc}

08009742 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8009742:	b580      	push	{r7, lr}
 8009744:	b088      	sub	sp, #32
 8009746:	af00      	add	r7, sp, #0
 8009748:	6078      	str	r0, [r7, #4]
 800974a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009750:	2312      	movs	r3, #18
 8009752:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009754:	2340      	movs	r3, #64	; 0x40
 8009756:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009758:	2300      	movs	r3, #0
 800975a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800975c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009760:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009762:	f107 0308 	add.w	r3, r7, #8
 8009766:	4619      	mov	r1, r3
 8009768:	6878      	ldr	r0, [r7, #4]
 800976a:	f7ff ff30 	bl	80095ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800976e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009772:	2112      	movs	r1, #18
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f000 f9d5 	bl	8009b24 <SDMMC_GetCmdResp1>
 800977a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800977c:	69fb      	ldr	r3, [r7, #28]
}
 800977e:	4618      	mov	r0, r3
 8009780:	3720      	adds	r7, #32
 8009782:	46bd      	mov	sp, r7
 8009784:	bd80      	pop	{r7, pc}

08009786 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8009786:	b580      	push	{r7, lr}
 8009788:	b088      	sub	sp, #32
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
 800978e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009794:	2318      	movs	r3, #24
 8009796:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009798:	2340      	movs	r3, #64	; 0x40
 800979a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800979c:	2300      	movs	r3, #0
 800979e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097a4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097a6:	f107 0308 	add.w	r3, r7, #8
 80097aa:	4619      	mov	r1, r3
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	f7ff ff0e 	bl	80095ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80097b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80097b6:	2118      	movs	r1, #24
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 f9b3 	bl	8009b24 <SDMMC_GetCmdResp1>
 80097be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80097c0:	69fb      	ldr	r3, [r7, #28]
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3720      	adds	r7, #32
 80097c6:	46bd      	mov	sp, r7
 80097c8:	bd80      	pop	{r7, pc}

080097ca <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80097ca:	b580      	push	{r7, lr}
 80097cc:	b088      	sub	sp, #32
 80097ce:	af00      	add	r7, sp, #0
 80097d0:	6078      	str	r0, [r7, #4]
 80097d2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80097d4:	683b      	ldr	r3, [r7, #0]
 80097d6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80097d8:	2319      	movs	r3, #25
 80097da:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80097dc:	2340      	movs	r3, #64	; 0x40
 80097de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80097e0:	2300      	movs	r3, #0
 80097e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80097e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097e8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80097ea:	f107 0308 	add.w	r3, r7, #8
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f7ff feec 	bl	80095ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80097f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80097fa:	2119      	movs	r1, #25
 80097fc:	6878      	ldr	r0, [r7, #4]
 80097fe:	f000 f991 	bl	8009b24 <SDMMC_GetCmdResp1>
 8009802:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009804:	69fb      	ldr	r3, [r7, #28]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3720      	adds	r7, #32
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}
	...

08009810 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b088      	sub	sp, #32
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009818:	2300      	movs	r3, #0
 800981a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800981c:	230c      	movs	r3, #12
 800981e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009820:	2340      	movs	r3, #64	; 0x40
 8009822:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009824:	2300      	movs	r3, #0
 8009826:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009828:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800982c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800982e:	f107 0308 	add.w	r3, r7, #8
 8009832:	4619      	mov	r1, r3
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f7ff feca 	bl	80095ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800983a:	4a05      	ldr	r2, [pc, #20]	; (8009850 <SDMMC_CmdStopTransfer+0x40>)
 800983c:	210c      	movs	r1, #12
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f000 f970 	bl	8009b24 <SDMMC_GetCmdResp1>
 8009844:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009846:	69fb      	ldr	r3, [r7, #28]
}
 8009848:	4618      	mov	r0, r3
 800984a:	3720      	adds	r7, #32
 800984c:	46bd      	mov	sp, r7
 800984e:	bd80      	pop	{r7, pc}
 8009850:	05f5e100 	.word	0x05f5e100

08009854 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b08a      	sub	sp, #40	; 0x28
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009860:	683b      	ldr	r3, [r7, #0]
 8009862:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009864:	2307      	movs	r3, #7
 8009866:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009868:	2340      	movs	r3, #64	; 0x40
 800986a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800986c:	2300      	movs	r3, #0
 800986e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009870:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009874:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009876:	f107 0310 	add.w	r3, r7, #16
 800987a:	4619      	mov	r1, r3
 800987c:	68f8      	ldr	r0, [r7, #12]
 800987e:	f7ff fea6 	bl	80095ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8009882:	f241 3288 	movw	r2, #5000	; 0x1388
 8009886:	2107      	movs	r1, #7
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f000 f94b 	bl	8009b24 <SDMMC_GetCmdResp1>
 800988e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009892:	4618      	mov	r0, r3
 8009894:	3728      	adds	r7, #40	; 0x28
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800989a:	b580      	push	{r7, lr}
 800989c:	b088      	sub	sp, #32
 800989e:	af00      	add	r7, sp, #0
 80098a0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80098a2:	2300      	movs	r3, #0
 80098a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80098a6:	2300      	movs	r3, #0
 80098a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80098aa:	2300      	movs	r3, #0
 80098ac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098ae:	2300      	movs	r3, #0
 80098b0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098b6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098b8:	f107 0308 	add.w	r3, r7, #8
 80098bc:	4619      	mov	r1, r3
 80098be:	6878      	ldr	r0, [r7, #4]
 80098c0:	f7ff fe85 	bl	80095ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 fb65 	bl	8009f94 <SDMMC_GetCmdError>
 80098ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80098cc:	69fb      	ldr	r3, [r7, #28]
}
 80098ce:	4618      	mov	r0, r3
 80098d0:	3720      	adds	r7, #32
 80098d2:	46bd      	mov	sp, r7
 80098d4:	bd80      	pop	{r7, pc}

080098d6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80098d6:	b580      	push	{r7, lr}
 80098d8:	b088      	sub	sp, #32
 80098da:	af00      	add	r7, sp, #0
 80098dc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80098de:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80098e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80098e4:	2308      	movs	r3, #8
 80098e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80098e8:	2340      	movs	r3, #64	; 0x40
 80098ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80098ec:	2300      	movs	r3, #0
 80098ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80098f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098f4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80098f6:	f107 0308 	add.w	r3, r7, #8
 80098fa:	4619      	mov	r1, r3
 80098fc:	6878      	ldr	r0, [r7, #4]
 80098fe:	f7ff fe66 	bl	80095ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f000 faf8 	bl	8009ef8 <SDMMC_GetCmdResp7>
 8009908:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800990a:	69fb      	ldr	r3, [r7, #28]
}
 800990c:	4618      	mov	r0, r3
 800990e:	3720      	adds	r7, #32
 8009910:	46bd      	mov	sp, r7
 8009912:	bd80      	pop	{r7, pc}

08009914 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b088      	sub	sp, #32
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009922:	2337      	movs	r3, #55	; 0x37
 8009924:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009926:	2340      	movs	r3, #64	; 0x40
 8009928:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800992a:	2300      	movs	r3, #0
 800992c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800992e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009932:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009934:	f107 0308 	add.w	r3, r7, #8
 8009938:	4619      	mov	r1, r3
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f7ff fe47 	bl	80095ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8009940:	f241 3288 	movw	r2, #5000	; 0x1388
 8009944:	2137      	movs	r1, #55	; 0x37
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	f000 f8ec 	bl	8009b24 <SDMMC_GetCmdResp1>
 800994c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800994e:	69fb      	ldr	r3, [r7, #28]
}
 8009950:	4618      	mov	r0, r3
 8009952:	3720      	adds	r7, #32
 8009954:	46bd      	mov	sp, r7
 8009956:	bd80      	pop	{r7, pc}

08009958 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b088      	sub	sp, #32
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
 8009960:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009968:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800996c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800996e:	2329      	movs	r3, #41	; 0x29
 8009970:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009972:	2340      	movs	r3, #64	; 0x40
 8009974:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009976:	2300      	movs	r3, #0
 8009978:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800997a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800997e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009980:	f107 0308 	add.w	r3, r7, #8
 8009984:	4619      	mov	r1, r3
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f7ff fe21 	bl	80095ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800998c:	6878      	ldr	r0, [r7, #4]
 800998e:	f000 f9ff 	bl	8009d90 <SDMMC_GetCmdResp3>
 8009992:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009994:	69fb      	ldr	r3, [r7, #28]
}
 8009996:	4618      	mov	r0, r3
 8009998:	3720      	adds	r7, #32
 800999a:	46bd      	mov	sp, r7
 800999c:	bd80      	pop	{r7, pc}

0800999e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800999e:	b580      	push	{r7, lr}
 80099a0:	b088      	sub	sp, #32
 80099a2:	af00      	add	r7, sp, #0
 80099a4:	6078      	str	r0, [r7, #4]
 80099a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80099ac:	2306      	movs	r3, #6
 80099ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099b0:	2340      	movs	r3, #64	; 0x40
 80099b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099b4:	2300      	movs	r3, #0
 80099b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80099be:	f107 0308 	add.w	r3, r7, #8
 80099c2:	4619      	mov	r1, r3
 80099c4:	6878      	ldr	r0, [r7, #4]
 80099c6:	f7ff fe02 	bl	80095ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80099ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80099ce:	2106      	movs	r1, #6
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 f8a7 	bl	8009b24 <SDMMC_GetCmdResp1>
 80099d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80099d8:	69fb      	ldr	r3, [r7, #28]
}
 80099da:	4618      	mov	r0, r3
 80099dc:	3720      	adds	r7, #32
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b088      	sub	sp, #32
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80099ea:	2300      	movs	r3, #0
 80099ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80099ee:	2333      	movs	r3, #51	; 0x33
 80099f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80099f2:	2340      	movs	r3, #64	; 0x40
 80099f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80099f6:	2300      	movs	r3, #0
 80099f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80099fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80099fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a00:	f107 0308 	add.w	r3, r7, #8
 8009a04:	4619      	mov	r1, r3
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f7ff fde1 	bl	80095ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8009a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009a10:	2133      	movs	r1, #51	; 0x33
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 f886 	bl	8009b24 <SDMMC_GetCmdResp1>
 8009a18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a1a:	69fb      	ldr	r3, [r7, #28]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3720      	adds	r7, #32
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b088      	sub	sp, #32
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009a2c:	2300      	movs	r3, #0
 8009a2e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009a30:	2302      	movs	r3, #2
 8009a32:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009a34:	23c0      	movs	r3, #192	; 0xc0
 8009a36:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a40:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a42:	f107 0308 	add.w	r3, r7, #8
 8009a46:	4619      	mov	r1, r3
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7ff fdc0 	bl	80095ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009a4e:	6878      	ldr	r0, [r7, #4]
 8009a50:	f000 f956 	bl	8009d00 <SDMMC_GetCmdResp2>
 8009a54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a56:	69fb      	ldr	r3, [r7, #28]
}
 8009a58:	4618      	mov	r0, r3
 8009a5a:	3720      	adds	r7, #32
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	bd80      	pop	{r7, pc}

08009a60 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009a60:	b580      	push	{r7, lr}
 8009a62:	b088      	sub	sp, #32
 8009a64:	af00      	add	r7, sp, #0
 8009a66:	6078      	str	r0, [r7, #4]
 8009a68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009a6a:	683b      	ldr	r3, [r7, #0]
 8009a6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009a6e:	2309      	movs	r3, #9
 8009a70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8009a72:	23c0      	movs	r3, #192	; 0xc0
 8009a74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009a76:	2300      	movs	r3, #0
 8009a78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009a7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009a7e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009a80:	f107 0308 	add.w	r3, r7, #8
 8009a84:	4619      	mov	r1, r3
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f7ff fda1 	bl	80095ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f000 f937 	bl	8009d00 <SDMMC_GetCmdResp2>
 8009a92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009a94:	69fb      	ldr	r3, [r7, #28]
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3720      	adds	r7, #32
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}

08009a9e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8009a9e:	b580      	push	{r7, lr}
 8009aa0:	b088      	sub	sp, #32
 8009aa2:	af00      	add	r7, sp, #0
 8009aa4:	6078      	str	r0, [r7, #4]
 8009aa6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009aac:	2303      	movs	r3, #3
 8009aae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009ab0:	2340      	movs	r3, #64	; 0x40
 8009ab2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009ab8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009abc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009abe:	f107 0308 	add.w	r3, r7, #8
 8009ac2:	4619      	mov	r1, r3
 8009ac4:	6878      	ldr	r0, [r7, #4]
 8009ac6:	f7ff fd82 	bl	80095ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009aca:	683a      	ldr	r2, [r7, #0]
 8009acc:	2103      	movs	r1, #3
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f99c 	bl	8009e0c <SDMMC_GetCmdResp6>
 8009ad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ad6:	69fb      	ldr	r3, [r7, #28]
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3720      	adds	r7, #32
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b088      	sub	sp, #32
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8009aee:	230d      	movs	r3, #13
 8009af0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8009af2:	2340      	movs	r3, #64	; 0x40
 8009af4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8009af6:	2300      	movs	r3, #0
 8009af8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8009afa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009afe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8009b00:	f107 0308 	add.w	r3, r7, #8
 8009b04:	4619      	mov	r1, r3
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f7ff fd61 	bl	80095ce <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8009b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b10:	210d      	movs	r1, #13
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f000 f806 	bl	8009b24 <SDMMC_GetCmdResp1>
 8009b18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009b1a:	69fb      	ldr	r3, [r7, #28]
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3720      	adds	r7, #32
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}

08009b24 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b088      	sub	sp, #32
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	460b      	mov	r3, r1
 8009b2e:	607a      	str	r2, [r7, #4]
 8009b30:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8009b32:	4b70      	ldr	r3, [pc, #448]	; (8009cf4 <SDMMC_GetCmdResp1+0x1d0>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a70      	ldr	r2, [pc, #448]	; (8009cf8 <SDMMC_GetCmdResp1+0x1d4>)
 8009b38:	fba2 2303 	umull	r2, r3, r2, r3
 8009b3c:	0a5a      	lsrs	r2, r3, #9
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	fb02 f303 	mul.w	r3, r2, r3
 8009b44:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009b46:	69fb      	ldr	r3, [r7, #28]
 8009b48:	1e5a      	subs	r2, r3, #1
 8009b4a:	61fa      	str	r2, [r7, #28]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d102      	bne.n	8009b56 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009b50:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009b54:	e0c9      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b5a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d0ef      	beq.n	8009b46 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009b66:	69bb      	ldr	r3, [r7, #24]
 8009b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1ea      	bne.n	8009b46 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b74:	f003 0304 	and.w	r3, r3, #4
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d004      	beq.n	8009b86 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	2204      	movs	r2, #4
 8009b80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009b82:	2304      	movs	r3, #4
 8009b84:	e0b1      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b8a:	f003 0301 	and.w	r3, r3, #1
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d004      	beq.n	8009b9c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2201      	movs	r2, #1
 8009b96:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009b98:	2301      	movs	r3, #1
 8009b9a:	e0a6      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	22c5      	movs	r2, #197	; 0xc5
 8009ba0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f7ff fd3d 	bl	8009622 <SDIO_GetCommandResponse>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	461a      	mov	r2, r3
 8009bac:	7afb      	ldrb	r3, [r7, #11]
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d001      	beq.n	8009bb6 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	e099      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	68f8      	ldr	r0, [r7, #12]
 8009bba:	f7ff fd3f 	bl	800963c <SDIO_GetResponse>
 8009bbe:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8009bc0:	697a      	ldr	r2, [r7, #20]
 8009bc2:	4b4e      	ldr	r3, [pc, #312]	; (8009cfc <SDMMC_GetCmdResp1+0x1d8>)
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d101      	bne.n	8009bce <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	e08d      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	da02      	bge.n	8009bda <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8009bd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009bd8:	e087      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8009bda:	697b      	ldr	r3, [r7, #20]
 8009bdc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d001      	beq.n	8009be8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8009be4:	2340      	movs	r3, #64	; 0x40
 8009be6:	e080      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8009be8:	697b      	ldr	r3, [r7, #20]
 8009bea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d001      	beq.n	8009bf6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8009bf2:	2380      	movs	r3, #128	; 0x80
 8009bf4:	e079      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8009bf6:	697b      	ldr	r3, [r7, #20]
 8009bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d002      	beq.n	8009c06 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8009c00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009c04:	e071      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d002      	beq.n	8009c16 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8009c10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009c14:	e069      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8009c16:	697b      	ldr	r3, [r7, #20]
 8009c18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d002      	beq.n	8009c26 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8009c20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c24:	e061      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d002      	beq.n	8009c36 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8009c30:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009c34:	e059      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d002      	beq.n	8009c46 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009c44:	e051      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8009c46:	697b      	ldr	r3, [r7, #20]
 8009c48:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d002      	beq.n	8009c56 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009c50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009c54:	e049      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	d002      	beq.n	8009c66 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8009c60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8009c64:	e041      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8009c66:	697b      	ldr	r3, [r7, #20]
 8009c68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d002      	beq.n	8009c76 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8009c70:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009c74:	e039      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8009c76:	697b      	ldr	r3, [r7, #20]
 8009c78:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d002      	beq.n	8009c86 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8009c80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8009c84:	e031      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8009c86:	697b      	ldr	r3, [r7, #20]
 8009c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d002      	beq.n	8009c96 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8009c90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009c94:	e029      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8009c96:	697b      	ldr	r3, [r7, #20]
 8009c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d002      	beq.n	8009ca6 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8009ca0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009ca4:	e021      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8009ca6:	697b      	ldr	r3, [r7, #20]
 8009ca8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d002      	beq.n	8009cb6 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8009cb0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009cb4:	e019      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d002      	beq.n	8009cc6 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8009cc0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8009cc4:	e011      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8009cc6:	697b      	ldr	r3, [r7, #20]
 8009cc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	d002      	beq.n	8009cd6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8009cd0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009cd4:	e009      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8009cd6:	697b      	ldr	r3, [r7, #20]
 8009cd8:	f003 0308 	and.w	r3, r3, #8
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	d002      	beq.n	8009ce6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8009ce0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009ce4:	e001      	b.n	8009cea <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009ce6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3720      	adds	r7, #32
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	20000000 	.word	0x20000000
 8009cf8:	10624dd3 	.word	0x10624dd3
 8009cfc:	fdffe008 	.word	0xfdffe008

08009d00 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b085      	sub	sp, #20
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009d08:	4b1f      	ldr	r3, [pc, #124]	; (8009d88 <SDMMC_GetCmdResp2+0x88>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	4a1f      	ldr	r2, [pc, #124]	; (8009d8c <SDMMC_GetCmdResp2+0x8c>)
 8009d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8009d12:	0a5b      	lsrs	r3, r3, #9
 8009d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d18:	fb02 f303 	mul.w	r3, r2, r3
 8009d1c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	1e5a      	subs	r2, r3, #1
 8009d22:	60fa      	str	r2, [r7, #12]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d102      	bne.n	8009d2e <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009d28:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d2c:	e026      	b.n	8009d7c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d32:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d34:	68bb      	ldr	r3, [r7, #8]
 8009d36:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d0ef      	beq.n	8009d1e <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d1ea      	bne.n	8009d1e <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d4c:	f003 0304 	and.w	r3, r3, #4
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d004      	beq.n	8009d5e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2204      	movs	r2, #4
 8009d58:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009d5a:	2304      	movs	r3, #4
 8009d5c:	e00e      	b.n	8009d7c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d62:	f003 0301 	and.w	r3, r3, #1
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d004      	beq.n	8009d74 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2201      	movs	r2, #1
 8009d6e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e003      	b.n	8009d7c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	22c5      	movs	r2, #197	; 0xc5
 8009d78:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8009d7a:	2300      	movs	r3, #0
}
 8009d7c:	4618      	mov	r0, r3
 8009d7e:	3714      	adds	r7, #20
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr
 8009d88:	20000000 	.word	0x20000000
 8009d8c:	10624dd3 	.word	0x10624dd3

08009d90 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b085      	sub	sp, #20
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009d98:	4b1a      	ldr	r3, [pc, #104]	; (8009e04 <SDMMC_GetCmdResp3+0x74>)
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a1a      	ldr	r2, [pc, #104]	; (8009e08 <SDMMC_GetCmdResp3+0x78>)
 8009d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8009da2:	0a5b      	lsrs	r3, r3, #9
 8009da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009da8:	fb02 f303 	mul.w	r3, r2, r3
 8009dac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	1e5a      	subs	r2, r3, #1
 8009db2:	60fa      	str	r2, [r7, #12]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d102      	bne.n	8009dbe <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009db8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009dbc:	e01b      	b.n	8009df6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dc2:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d0ef      	beq.n	8009dae <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009dce:	68bb      	ldr	r3, [r7, #8]
 8009dd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d1ea      	bne.n	8009dae <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ddc:	f003 0304 	and.w	r3, r3, #4
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d004      	beq.n	8009dee <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	2204      	movs	r2, #4
 8009de8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009dea:	2304      	movs	r3, #4
 8009dec:	e003      	b.n	8009df6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	22c5      	movs	r2, #197	; 0xc5
 8009df2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3714      	adds	r7, #20
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	20000000 	.word	0x20000000
 8009e08:	10624dd3 	.word	0x10624dd3

08009e0c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b088      	sub	sp, #32
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	60f8      	str	r0, [r7, #12]
 8009e14:	460b      	mov	r3, r1
 8009e16:	607a      	str	r2, [r7, #4]
 8009e18:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009e1a:	4b35      	ldr	r3, [pc, #212]	; (8009ef0 <SDMMC_GetCmdResp6+0xe4>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a35      	ldr	r2, [pc, #212]	; (8009ef4 <SDMMC_GetCmdResp6+0xe8>)
 8009e20:	fba2 2303 	umull	r2, r3, r2, r3
 8009e24:	0a5b      	lsrs	r3, r3, #9
 8009e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e2a:	fb02 f303 	mul.w	r3, r2, r3
 8009e2e:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	1e5a      	subs	r2, r3, #1
 8009e34:	61fa      	str	r2, [r7, #28]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d102      	bne.n	8009e40 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009e3a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009e3e:	e052      	b.n	8009ee6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e44:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e46:	69bb      	ldr	r3, [r7, #24]
 8009e48:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d0ef      	beq.n	8009e30 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009e50:	69bb      	ldr	r3, [r7, #24]
 8009e52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d1ea      	bne.n	8009e30 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e5e:	f003 0304 	and.w	r3, r3, #4
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d004      	beq.n	8009e70 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2204      	movs	r2, #4
 8009e6a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009e6c:	2304      	movs	r3, #4
 8009e6e:	e03a      	b.n	8009ee6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e74:	f003 0301 	and.w	r3, r3, #1
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d004      	beq.n	8009e86 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e02f      	b.n	8009ee6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8009e86:	68f8      	ldr	r0, [r7, #12]
 8009e88:	f7ff fbcb 	bl	8009622 <SDIO_GetCommandResponse>
 8009e8c:	4603      	mov	r3, r0
 8009e8e:	461a      	mov	r2, r3
 8009e90:	7afb      	ldrb	r3, [r7, #11]
 8009e92:	4293      	cmp	r3, r2
 8009e94:	d001      	beq.n	8009e9a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009e96:	2301      	movs	r3, #1
 8009e98:	e025      	b.n	8009ee6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	22c5      	movs	r2, #197	; 0xc5
 8009e9e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009ea0:	2100      	movs	r1, #0
 8009ea2:	68f8      	ldr	r0, [r7, #12]
 8009ea4:	f7ff fbca 	bl	800963c <SDIO_GetResponse>
 8009ea8:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8009eaa:	697b      	ldr	r3, [r7, #20]
 8009eac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d106      	bne.n	8009ec2 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	0c1b      	lsrs	r3, r3, #16
 8009eb8:	b29a      	uxth	r2, r3
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009ebe:	2300      	movs	r3, #0
 8009ec0:	e011      	b.n	8009ee6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009ec2:	697b      	ldr	r3, [r7, #20]
 8009ec4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d002      	beq.n	8009ed2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009ecc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ed0:	e009      	b.n	8009ee6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d002      	beq.n	8009ee2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ee0:	e001      	b.n	8009ee6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009ee2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8009ee6:	4618      	mov	r0, r3
 8009ee8:	3720      	adds	r7, #32
 8009eea:	46bd      	mov	sp, r7
 8009eec:	bd80      	pop	{r7, pc}
 8009eee:	bf00      	nop
 8009ef0:	20000000 	.word	0x20000000
 8009ef4:	10624dd3 	.word	0x10624dd3

08009ef8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f00:	4b22      	ldr	r3, [pc, #136]	; (8009f8c <SDMMC_GetCmdResp7+0x94>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	4a22      	ldr	r2, [pc, #136]	; (8009f90 <SDMMC_GetCmdResp7+0x98>)
 8009f06:	fba2 2303 	umull	r2, r3, r2, r3
 8009f0a:	0a5b      	lsrs	r3, r3, #9
 8009f0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f10:	fb02 f303 	mul.w	r3, r2, r3
 8009f14:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	1e5a      	subs	r2, r3, #1
 8009f1a:	60fa      	str	r2, [r7, #12]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d102      	bne.n	8009f26 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009f20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009f24:	e02c      	b.n	8009f80 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f2a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d0ef      	beq.n	8009f16 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8009f36:	68bb      	ldr	r3, [r7, #8]
 8009f38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	d1ea      	bne.n	8009f16 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f44:	f003 0304 	and.w	r3, r3, #4
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d004      	beq.n	8009f56 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2204      	movs	r2, #4
 8009f50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8009f52:	2304      	movs	r3, #4
 8009f54:	e014      	b.n	8009f80 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f5a:	f003 0301 	and.w	r3, r3, #1
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d004      	beq.n	8009f6c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2201      	movs	r2, #1
 8009f66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009f68:	2301      	movs	r3, #1
 8009f6a:	e009      	b.n	8009f80 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009f70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d002      	beq.n	8009f7e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2240      	movs	r2, #64	; 0x40
 8009f7c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009f7e:	2300      	movs	r3, #0
  
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3714      	adds	r7, #20
 8009f84:	46bd      	mov	sp, r7
 8009f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8a:	4770      	bx	lr
 8009f8c:	20000000 	.word	0x20000000
 8009f90:	10624dd3 	.word	0x10624dd3

08009f94 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8009f94:	b480      	push	{r7}
 8009f96:	b085      	sub	sp, #20
 8009f98:	af00      	add	r7, sp, #0
 8009f9a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009f9c:	4b11      	ldr	r3, [pc, #68]	; (8009fe4 <SDMMC_GetCmdError+0x50>)
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a11      	ldr	r2, [pc, #68]	; (8009fe8 <SDMMC_GetCmdError+0x54>)
 8009fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa6:	0a5b      	lsrs	r3, r3, #9
 8009fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009fac:	fb02 f303 	mul.w	r3, r2, r3
 8009fb0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	1e5a      	subs	r2, r3, #1
 8009fb6:	60fa      	str	r2, [r7, #12]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d102      	bne.n	8009fc2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8009fbc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009fc0:	e009      	b.n	8009fd6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d0f1      	beq.n	8009fb2 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	22c5      	movs	r2, #197	; 0xc5
 8009fd2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3714      	adds	r7, #20
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe0:	4770      	bx	lr
 8009fe2:	bf00      	nop
 8009fe4:	20000000 	.word	0x20000000
 8009fe8:	10624dd3 	.word	0x10624dd3

08009fec <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009fec:	b084      	sub	sp, #16
 8009fee:	b580      	push	{r7, lr}
 8009ff0:	b084      	sub	sp, #16
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
 8009ff6:	f107 001c 	add.w	r0, r7, #28
 8009ffa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a000:	2b01      	cmp	r3, #1
 800a002:	d122      	bne.n	800a04a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a008:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a018:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	68db      	ldr	r3, [r3, #12]
 800a024:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a02c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d105      	bne.n	800a03e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	68db      	ldr	r3, [r3, #12]
 800a036:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a03e:	6878      	ldr	r0, [r7, #4]
 800a040:	f001 fbee 	bl	800b820 <USB_CoreReset>
 800a044:	4603      	mov	r3, r0
 800a046:	73fb      	strb	r3, [r7, #15]
 800a048:	e01a      	b.n	800a080 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a056:	6878      	ldr	r0, [r7, #4]
 800a058:	f001 fbe2 	bl	800b820 <USB_CoreReset>
 800a05c:	4603      	mov	r3, r0
 800a05e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a062:	2b00      	cmp	r3, #0
 800a064:	d106      	bne.n	800a074 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a06a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	639a      	str	r2, [r3, #56]	; 0x38
 800a072:	e005      	b.n	800a080 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a078:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a082:	2b01      	cmp	r3, #1
 800a084:	d10b      	bne.n	800a09e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	689b      	ldr	r3, [r3, #8]
 800a08a:	f043 0206 	orr.w	r2, r3, #6
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	689b      	ldr	r3, [r3, #8]
 800a096:	f043 0220 	orr.w	r2, r3, #32
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a0aa:	b004      	add	sp, #16
 800a0ac:	4770      	bx	lr
	...

0800a0b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a0b0:	b480      	push	{r7}
 800a0b2:	b087      	sub	sp, #28
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	60f8      	str	r0, [r7, #12]
 800a0b8:	60b9      	str	r1, [r7, #8]
 800a0ba:	4613      	mov	r3, r2
 800a0bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a0be:	79fb      	ldrb	r3, [r7, #7]
 800a0c0:	2b02      	cmp	r3, #2
 800a0c2:	d165      	bne.n	800a190 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	4a41      	ldr	r2, [pc, #260]	; (800a1cc <USB_SetTurnaroundTime+0x11c>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d906      	bls.n	800a0da <USB_SetTurnaroundTime+0x2a>
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	4a40      	ldr	r2, [pc, #256]	; (800a1d0 <USB_SetTurnaroundTime+0x120>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d202      	bcs.n	800a0da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a0d4:	230f      	movs	r3, #15
 800a0d6:	617b      	str	r3, [r7, #20]
 800a0d8:	e062      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	4a3c      	ldr	r2, [pc, #240]	; (800a1d0 <USB_SetTurnaroundTime+0x120>)
 800a0de:	4293      	cmp	r3, r2
 800a0e0:	d306      	bcc.n	800a0f0 <USB_SetTurnaroundTime+0x40>
 800a0e2:	68bb      	ldr	r3, [r7, #8]
 800a0e4:	4a3b      	ldr	r2, [pc, #236]	; (800a1d4 <USB_SetTurnaroundTime+0x124>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d202      	bcs.n	800a0f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a0ea:	230e      	movs	r3, #14
 800a0ec:	617b      	str	r3, [r7, #20]
 800a0ee:	e057      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a0f0:	68bb      	ldr	r3, [r7, #8]
 800a0f2:	4a38      	ldr	r2, [pc, #224]	; (800a1d4 <USB_SetTurnaroundTime+0x124>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d306      	bcc.n	800a106 <USB_SetTurnaroundTime+0x56>
 800a0f8:	68bb      	ldr	r3, [r7, #8]
 800a0fa:	4a37      	ldr	r2, [pc, #220]	; (800a1d8 <USB_SetTurnaroundTime+0x128>)
 800a0fc:	4293      	cmp	r3, r2
 800a0fe:	d202      	bcs.n	800a106 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a100:	230d      	movs	r3, #13
 800a102:	617b      	str	r3, [r7, #20]
 800a104:	e04c      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	4a33      	ldr	r2, [pc, #204]	; (800a1d8 <USB_SetTurnaroundTime+0x128>)
 800a10a:	4293      	cmp	r3, r2
 800a10c:	d306      	bcc.n	800a11c <USB_SetTurnaroundTime+0x6c>
 800a10e:	68bb      	ldr	r3, [r7, #8]
 800a110:	4a32      	ldr	r2, [pc, #200]	; (800a1dc <USB_SetTurnaroundTime+0x12c>)
 800a112:	4293      	cmp	r3, r2
 800a114:	d802      	bhi.n	800a11c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a116:	230c      	movs	r3, #12
 800a118:	617b      	str	r3, [r7, #20]
 800a11a:	e041      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	4a2f      	ldr	r2, [pc, #188]	; (800a1dc <USB_SetTurnaroundTime+0x12c>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d906      	bls.n	800a132 <USB_SetTurnaroundTime+0x82>
 800a124:	68bb      	ldr	r3, [r7, #8]
 800a126:	4a2e      	ldr	r2, [pc, #184]	; (800a1e0 <USB_SetTurnaroundTime+0x130>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	d802      	bhi.n	800a132 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a12c:	230b      	movs	r3, #11
 800a12e:	617b      	str	r3, [r7, #20]
 800a130:	e036      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a132:	68bb      	ldr	r3, [r7, #8]
 800a134:	4a2a      	ldr	r2, [pc, #168]	; (800a1e0 <USB_SetTurnaroundTime+0x130>)
 800a136:	4293      	cmp	r3, r2
 800a138:	d906      	bls.n	800a148 <USB_SetTurnaroundTime+0x98>
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	4a29      	ldr	r2, [pc, #164]	; (800a1e4 <USB_SetTurnaroundTime+0x134>)
 800a13e:	4293      	cmp	r3, r2
 800a140:	d802      	bhi.n	800a148 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a142:	230a      	movs	r3, #10
 800a144:	617b      	str	r3, [r7, #20]
 800a146:	e02b      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a148:	68bb      	ldr	r3, [r7, #8]
 800a14a:	4a26      	ldr	r2, [pc, #152]	; (800a1e4 <USB_SetTurnaroundTime+0x134>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d906      	bls.n	800a15e <USB_SetTurnaroundTime+0xae>
 800a150:	68bb      	ldr	r3, [r7, #8]
 800a152:	4a25      	ldr	r2, [pc, #148]	; (800a1e8 <USB_SetTurnaroundTime+0x138>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d202      	bcs.n	800a15e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a158:	2309      	movs	r3, #9
 800a15a:	617b      	str	r3, [r7, #20]
 800a15c:	e020      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	4a21      	ldr	r2, [pc, #132]	; (800a1e8 <USB_SetTurnaroundTime+0x138>)
 800a162:	4293      	cmp	r3, r2
 800a164:	d306      	bcc.n	800a174 <USB_SetTurnaroundTime+0xc4>
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	4a20      	ldr	r2, [pc, #128]	; (800a1ec <USB_SetTurnaroundTime+0x13c>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d802      	bhi.n	800a174 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a16e:	2308      	movs	r3, #8
 800a170:	617b      	str	r3, [r7, #20]
 800a172:	e015      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a174:	68bb      	ldr	r3, [r7, #8]
 800a176:	4a1d      	ldr	r2, [pc, #116]	; (800a1ec <USB_SetTurnaroundTime+0x13c>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d906      	bls.n	800a18a <USB_SetTurnaroundTime+0xda>
 800a17c:	68bb      	ldr	r3, [r7, #8]
 800a17e:	4a1c      	ldr	r2, [pc, #112]	; (800a1f0 <USB_SetTurnaroundTime+0x140>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d202      	bcs.n	800a18a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a184:	2307      	movs	r3, #7
 800a186:	617b      	str	r3, [r7, #20]
 800a188:	e00a      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a18a:	2306      	movs	r3, #6
 800a18c:	617b      	str	r3, [r7, #20]
 800a18e:	e007      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a190:	79fb      	ldrb	r3, [r7, #7]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d102      	bne.n	800a19c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a196:	2309      	movs	r3, #9
 800a198:	617b      	str	r3, [r7, #20]
 800a19a:	e001      	b.n	800a1a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a19c:	2309      	movs	r3, #9
 800a19e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	68da      	ldr	r2, [r3, #12]
 800a1b0:	697b      	ldr	r3, [r7, #20]
 800a1b2:	029b      	lsls	r3, r3, #10
 800a1b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a1b8:	431a      	orrs	r2, r3
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a1be:	2300      	movs	r3, #0
}
 800a1c0:	4618      	mov	r0, r3
 800a1c2:	371c      	adds	r7, #28
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr
 800a1cc:	00d8acbf 	.word	0x00d8acbf
 800a1d0:	00e4e1c0 	.word	0x00e4e1c0
 800a1d4:	00f42400 	.word	0x00f42400
 800a1d8:	01067380 	.word	0x01067380
 800a1dc:	011a499f 	.word	0x011a499f
 800a1e0:	01312cff 	.word	0x01312cff
 800a1e4:	014ca43f 	.word	0x014ca43f
 800a1e8:	016e3600 	.word	0x016e3600
 800a1ec:	01a6ab1f 	.word	0x01a6ab1f
 800a1f0:	01e84800 	.word	0x01e84800

0800a1f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b083      	sub	sp, #12
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	f043 0201 	orr.w	r2, r3, #1
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a208:	2300      	movs	r3, #0
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	370c      	adds	r7, #12
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a216:	b480      	push	{r7}
 800a218:	b083      	sub	sp, #12
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	689b      	ldr	r3, [r3, #8]
 800a222:	f023 0201 	bic.w	r2, r3, #1
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a22a:	2300      	movs	r3, #0
}
 800a22c:	4618      	mov	r0, r3
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a238:	b580      	push	{r7, lr}
 800a23a:	b084      	sub	sp, #16
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
 800a240:	460b      	mov	r3, r1
 800a242:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a244:	2300      	movs	r3, #0
 800a246:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	68db      	ldr	r3, [r3, #12]
 800a24c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a254:	78fb      	ldrb	r3, [r7, #3]
 800a256:	2b01      	cmp	r3, #1
 800a258:	d115      	bne.n	800a286 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	68db      	ldr	r3, [r3, #12]
 800a25e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a266:	2001      	movs	r0, #1
 800a268:	f7f8 fd08 	bl	8002c7c <HAL_Delay>
      ms++;
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	3301      	adds	r3, #1
 800a270:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f001 fa45 	bl	800b702 <USB_GetMode>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b01      	cmp	r3, #1
 800a27c:	d01e      	beq.n	800a2bc <USB_SetCurrentMode+0x84>
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	2b31      	cmp	r3, #49	; 0x31
 800a282:	d9f0      	bls.n	800a266 <USB_SetCurrentMode+0x2e>
 800a284:	e01a      	b.n	800a2bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a286:	78fb      	ldrb	r3, [r7, #3]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d115      	bne.n	800a2b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	68db      	ldr	r3, [r3, #12]
 800a290:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a298:	2001      	movs	r0, #1
 800a29a:	f7f8 fcef 	bl	8002c7c <HAL_Delay>
      ms++;
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	3301      	adds	r3, #1
 800a2a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a2a4:	6878      	ldr	r0, [r7, #4]
 800a2a6:	f001 fa2c 	bl	800b702 <USB_GetMode>
 800a2aa:	4603      	mov	r3, r0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d005      	beq.n	800a2bc <USB_SetCurrentMode+0x84>
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2b31      	cmp	r3, #49	; 0x31
 800a2b4:	d9f0      	bls.n	800a298 <USB_SetCurrentMode+0x60>
 800a2b6:	e001      	b.n	800a2bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e005      	b.n	800a2c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	2b32      	cmp	r3, #50	; 0x32
 800a2c0:	d101      	bne.n	800a2c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a2c2:	2301      	movs	r3, #1
 800a2c4:	e000      	b.n	800a2c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a2c6:	2300      	movs	r3, #0
}
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	3710      	adds	r7, #16
 800a2cc:	46bd      	mov	sp, r7
 800a2ce:	bd80      	pop	{r7, pc}

0800a2d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a2d0:	b084      	sub	sp, #16
 800a2d2:	b580      	push	{r7, lr}
 800a2d4:	b086      	sub	sp, #24
 800a2d6:	af00      	add	r7, sp, #0
 800a2d8:	6078      	str	r0, [r7, #4]
 800a2da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a2de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	613b      	str	r3, [r7, #16]
 800a2ee:	e009      	b.n	800a304 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a2f0:	687a      	ldr	r2, [r7, #4]
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	3340      	adds	r3, #64	; 0x40
 800a2f6:	009b      	lsls	r3, r3, #2
 800a2f8:	4413      	add	r3, r2
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	3301      	adds	r3, #1
 800a302:	613b      	str	r3, [r7, #16]
 800a304:	693b      	ldr	r3, [r7, #16]
 800a306:	2b0e      	cmp	r3, #14
 800a308:	d9f2      	bls.n	800a2f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a30a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d11c      	bne.n	800a34a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a316:	685b      	ldr	r3, [r3, #4]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a31e:	f043 0302 	orr.w	r3, r3, #2
 800a322:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a328:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a334:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a340:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	639a      	str	r2, [r3, #56]	; 0x38
 800a348:	e00b      	b.n	800a362 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a34e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a35a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a368:	461a      	mov	r2, r3
 800a36a:	2300      	movs	r3, #0
 800a36c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a374:	4619      	mov	r1, r3
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a37c:	461a      	mov	r2, r3
 800a37e:	680b      	ldr	r3, [r1, #0]
 800a380:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a382:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a384:	2b01      	cmp	r3, #1
 800a386:	d10c      	bne.n	800a3a2 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d104      	bne.n	800a398 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a38e:	2100      	movs	r1, #0
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f000 f965 	bl	800a660 <USB_SetDevSpeed>
 800a396:	e008      	b.n	800a3aa <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a398:	2101      	movs	r1, #1
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f000 f960 	bl	800a660 <USB_SetDevSpeed>
 800a3a0:	e003      	b.n	800a3aa <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a3a2:	2103      	movs	r1, #3
 800a3a4:	6878      	ldr	r0, [r7, #4]
 800a3a6:	f000 f95b 	bl	800a660 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a3aa:	2110      	movs	r1, #16
 800a3ac:	6878      	ldr	r0, [r7, #4]
 800a3ae:	f000 f8f3 	bl	800a598 <USB_FlushTxFifo>
 800a3b2:	4603      	mov	r3, r0
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d001      	beq.n	800a3bc <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	f000 f91f 	bl	800a600 <USB_FlushRxFifo>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d001      	beq.n	800a3cc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800a3c8:	2301      	movs	r3, #1
 800a3ca:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3de:	461a      	mov	r2, r3
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a3ea:	461a      	mov	r2, r3
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	613b      	str	r3, [r7, #16]
 800a3f4:	e043      	b.n	800a47e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	015a      	lsls	r2, r3, #5
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a408:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a40c:	d118      	bne.n	800a440 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	2b00      	cmp	r3, #0
 800a412:	d10a      	bne.n	800a42a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a414:	693b      	ldr	r3, [r7, #16]
 800a416:	015a      	lsls	r2, r3, #5
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	4413      	add	r3, r2
 800a41c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a420:	461a      	mov	r2, r3
 800a422:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a426:	6013      	str	r3, [r2, #0]
 800a428:	e013      	b.n	800a452 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	015a      	lsls	r2, r3, #5
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	4413      	add	r3, r2
 800a432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a436:	461a      	mov	r2, r3
 800a438:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a43c:	6013      	str	r3, [r2, #0]
 800a43e:	e008      	b.n	800a452 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a440:	693b      	ldr	r3, [r7, #16]
 800a442:	015a      	lsls	r2, r3, #5
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	4413      	add	r3, r2
 800a448:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a44c:	461a      	mov	r2, r3
 800a44e:	2300      	movs	r3, #0
 800a450:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	015a      	lsls	r2, r3, #5
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	4413      	add	r3, r2
 800a45a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a45e:	461a      	mov	r2, r3
 800a460:	2300      	movs	r3, #0
 800a462:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a464:	693b      	ldr	r3, [r7, #16]
 800a466:	015a      	lsls	r2, r3, #5
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	4413      	add	r3, r2
 800a46c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a470:	461a      	mov	r2, r3
 800a472:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a476:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a478:	693b      	ldr	r3, [r7, #16]
 800a47a:	3301      	adds	r3, #1
 800a47c:	613b      	str	r3, [r7, #16]
 800a47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a480:	693a      	ldr	r2, [r7, #16]
 800a482:	429a      	cmp	r2, r3
 800a484:	d3b7      	bcc.n	800a3f6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a486:	2300      	movs	r3, #0
 800a488:	613b      	str	r3, [r7, #16]
 800a48a:	e043      	b.n	800a514 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	015a      	lsls	r2, r3, #5
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	4413      	add	r3, r2
 800a494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a49e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a4a2:	d118      	bne.n	800a4d6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800a4a4:	693b      	ldr	r3, [r7, #16]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d10a      	bne.n	800a4c0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a4aa:	693b      	ldr	r3, [r7, #16]
 800a4ac:	015a      	lsls	r2, r3, #5
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	4413      	add	r3, r2
 800a4b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4b6:	461a      	mov	r2, r3
 800a4b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a4bc:	6013      	str	r3, [r2, #0]
 800a4be:	e013      	b.n	800a4e8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a4c0:	693b      	ldr	r3, [r7, #16]
 800a4c2:	015a      	lsls	r2, r3, #5
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	4413      	add	r3, r2
 800a4c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4cc:	461a      	mov	r2, r3
 800a4ce:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a4d2:	6013      	str	r3, [r2, #0]
 800a4d4:	e008      	b.n	800a4e8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	015a      	lsls	r2, r3, #5
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	4413      	add	r3, r2
 800a4de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4e2:	461a      	mov	r2, r3
 800a4e4:	2300      	movs	r3, #0
 800a4e6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	015a      	lsls	r2, r3, #5
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	4413      	add	r3, r2
 800a4f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4f4:	461a      	mov	r2, r3
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	015a      	lsls	r2, r3, #5
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	4413      	add	r3, r2
 800a502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a506:	461a      	mov	r2, r3
 800a508:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a50c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	3301      	adds	r3, #1
 800a512:	613b      	str	r3, [r7, #16]
 800a514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a516:	693a      	ldr	r2, [r7, #16]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d3b7      	bcc.n	800a48c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a522:	691b      	ldr	r3, [r3, #16]
 800a524:	68fa      	ldr	r2, [r7, #12]
 800a526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a52a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a52e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a53c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a540:	2b00      	cmp	r3, #0
 800a542:	d105      	bne.n	800a550 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	699b      	ldr	r3, [r3, #24]
 800a548:	f043 0210 	orr.w	r2, r3, #16
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	699a      	ldr	r2, [r3, #24]
 800a554:	4b0f      	ldr	r3, [pc, #60]	; (800a594 <USB_DevInit+0x2c4>)
 800a556:	4313      	orrs	r3, r2
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a55c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d005      	beq.n	800a56e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	699b      	ldr	r3, [r3, #24]
 800a566:	f043 0208 	orr.w	r2, r3, #8
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a56e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a570:	2b01      	cmp	r3, #1
 800a572:	d107      	bne.n	800a584 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	699b      	ldr	r3, [r3, #24]
 800a578:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a57c:	f043 0304 	orr.w	r3, r3, #4
 800a580:	687a      	ldr	r2, [r7, #4]
 800a582:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a584:	7dfb      	ldrb	r3, [r7, #23]
}
 800a586:	4618      	mov	r0, r3
 800a588:	3718      	adds	r7, #24
 800a58a:	46bd      	mov	sp, r7
 800a58c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a590:	b004      	add	sp, #16
 800a592:	4770      	bx	lr
 800a594:	803c3800 	.word	0x803c3800

0800a598 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a598:	b480      	push	{r7}
 800a59a:	b085      	sub	sp, #20
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a5a2:	2300      	movs	r3, #0
 800a5a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	4a13      	ldr	r2, [pc, #76]	; (800a5fc <USB_FlushTxFifo+0x64>)
 800a5b0:	4293      	cmp	r3, r2
 800a5b2:	d901      	bls.n	800a5b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a5b4:	2303      	movs	r3, #3
 800a5b6:	e01b      	b.n	800a5f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	daf2      	bge.n	800a5a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	019b      	lsls	r3, r3, #6
 800a5c8:	f043 0220 	orr.w	r2, r3, #32
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	3301      	adds	r3, #1
 800a5d4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a5d6:	68fb      	ldr	r3, [r7, #12]
 800a5d8:	4a08      	ldr	r2, [pc, #32]	; (800a5fc <USB_FlushTxFifo+0x64>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d901      	bls.n	800a5e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a5de:	2303      	movs	r3, #3
 800a5e0:	e006      	b.n	800a5f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	691b      	ldr	r3, [r3, #16]
 800a5e6:	f003 0320 	and.w	r3, r3, #32
 800a5ea:	2b20      	cmp	r3, #32
 800a5ec:	d0f0      	beq.n	800a5d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a5ee:	2300      	movs	r3, #0
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3714      	adds	r7, #20
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fa:	4770      	bx	lr
 800a5fc:	00030d40 	.word	0x00030d40

0800a600 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a600:	b480      	push	{r7}
 800a602:	b085      	sub	sp, #20
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a608:	2300      	movs	r3, #0
 800a60a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	3301      	adds	r3, #1
 800a610:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	4a11      	ldr	r2, [pc, #68]	; (800a65c <USB_FlushRxFifo+0x5c>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d901      	bls.n	800a61e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a61a:	2303      	movs	r3, #3
 800a61c:	e018      	b.n	800a650 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	691b      	ldr	r3, [r3, #16]
 800a622:	2b00      	cmp	r3, #0
 800a624:	daf2      	bge.n	800a60c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a626:	2300      	movs	r3, #0
 800a628:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2210      	movs	r2, #16
 800a62e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	3301      	adds	r3, #1
 800a634:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	4a08      	ldr	r2, [pc, #32]	; (800a65c <USB_FlushRxFifo+0x5c>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d901      	bls.n	800a642 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a63e:	2303      	movs	r3, #3
 800a640:	e006      	b.n	800a650 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	f003 0310 	and.w	r3, r3, #16
 800a64a:	2b10      	cmp	r3, #16
 800a64c:	d0f0      	beq.n	800a630 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a64e:	2300      	movs	r3, #0
}
 800a650:	4618      	mov	r0, r3
 800a652:	3714      	adds	r7, #20
 800a654:	46bd      	mov	sp, r7
 800a656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65a:	4770      	bx	lr
 800a65c:	00030d40 	.word	0x00030d40

0800a660 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	460b      	mov	r3, r1
 800a66a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a676:	681a      	ldr	r2, [r3, #0]
 800a678:	78fb      	ldrb	r3, [r7, #3]
 800a67a:	68f9      	ldr	r1, [r7, #12]
 800a67c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a680:	4313      	orrs	r3, r2
 800a682:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3714      	adds	r7, #20
 800a68a:	46bd      	mov	sp, r7
 800a68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a690:	4770      	bx	lr

0800a692 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800a692:	b480      	push	{r7}
 800a694:	b087      	sub	sp, #28
 800a696:	af00      	add	r7, sp, #0
 800a698:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6a4:	689b      	ldr	r3, [r3, #8]
 800a6a6:	f003 0306 	and.w	r3, r3, #6
 800a6aa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d102      	bne.n	800a6b8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	75fb      	strb	r3, [r7, #23]
 800a6b6:	e00a      	b.n	800a6ce <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	2b02      	cmp	r3, #2
 800a6bc:	d002      	beq.n	800a6c4 <USB_GetDevSpeed+0x32>
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2b06      	cmp	r3, #6
 800a6c2:	d102      	bne.n	800a6ca <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a6c4:	2302      	movs	r3, #2
 800a6c6:	75fb      	strb	r3, [r7, #23]
 800a6c8:	e001      	b.n	800a6ce <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a6ca:	230f      	movs	r3, #15
 800a6cc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a6ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6d0:	4618      	mov	r0, r3
 800a6d2:	371c      	adds	r7, #28
 800a6d4:	46bd      	mov	sp, r7
 800a6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6da:	4770      	bx	lr

0800a6dc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	785b      	ldrb	r3, [r3, #1]
 800a6f4:	2b01      	cmp	r3, #1
 800a6f6:	d13a      	bne.n	800a76e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6fe:	69da      	ldr	r2, [r3, #28]
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	781b      	ldrb	r3, [r3, #0]
 800a704:	f003 030f 	and.w	r3, r3, #15
 800a708:	2101      	movs	r1, #1
 800a70a:	fa01 f303 	lsl.w	r3, r1, r3
 800a70e:	b29b      	uxth	r3, r3
 800a710:	68f9      	ldr	r1, [r7, #12]
 800a712:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a716:	4313      	orrs	r3, r2
 800a718:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	015a      	lsls	r2, r3, #5
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	4413      	add	r3, r2
 800a722:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d155      	bne.n	800a7dc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a730:	68bb      	ldr	r3, [r7, #8]
 800a732:	015a      	lsls	r2, r3, #5
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	4413      	add	r3, r2
 800a738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a73c:	681a      	ldr	r2, [r3, #0]
 800a73e:	683b      	ldr	r3, [r7, #0]
 800a740:	68db      	ldr	r3, [r3, #12]
 800a742:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	791b      	ldrb	r3, [r3, #4]
 800a74a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a74c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	059b      	lsls	r3, r3, #22
 800a752:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800a754:	4313      	orrs	r3, r2
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	0151      	lsls	r1, r2, #5
 800a75a:	68fa      	ldr	r2, [r7, #12]
 800a75c:	440a      	add	r2, r1
 800a75e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a766:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a76a:	6013      	str	r3, [r2, #0]
 800a76c:	e036      	b.n	800a7dc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a774:	69da      	ldr	r2, [r3, #28]
 800a776:	683b      	ldr	r3, [r7, #0]
 800a778:	781b      	ldrb	r3, [r3, #0]
 800a77a:	f003 030f 	and.w	r3, r3, #15
 800a77e:	2101      	movs	r1, #1
 800a780:	fa01 f303 	lsl.w	r3, r1, r3
 800a784:	041b      	lsls	r3, r3, #16
 800a786:	68f9      	ldr	r1, [r7, #12]
 800a788:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a78c:	4313      	orrs	r3, r2
 800a78e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800a790:	68bb      	ldr	r3, [r7, #8]
 800a792:	015a      	lsls	r2, r3, #5
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	4413      	add	r3, r2
 800a798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d11a      	bne.n	800a7dc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	015a      	lsls	r2, r3, #5
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	4413      	add	r3, r2
 800a7ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	68db      	ldr	r3, [r3, #12]
 800a7b8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	791b      	ldrb	r3, [r3, #4]
 800a7c0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800a7c2:	430b      	orrs	r3, r1
 800a7c4:	4313      	orrs	r3, r2
 800a7c6:	68ba      	ldr	r2, [r7, #8]
 800a7c8:	0151      	lsls	r1, r2, #5
 800a7ca:	68fa      	ldr	r2, [r7, #12]
 800a7cc:	440a      	add	r2, r1
 800a7ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a7d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a7da:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800a7dc:	2300      	movs	r3, #0
}
 800a7de:	4618      	mov	r0, r3
 800a7e0:	3714      	adds	r7, #20
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e8:	4770      	bx	lr
	...

0800a7ec <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a7ec:	b480      	push	{r7}
 800a7ee:	b085      	sub	sp, #20
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a7fa:	683b      	ldr	r3, [r7, #0]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	785b      	ldrb	r3, [r3, #1]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d161      	bne.n	800a8cc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	015a      	lsls	r2, r3, #5
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	4413      	add	r3, r2
 800a810:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a81a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a81e:	d11f      	bne.n	800a860 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	015a      	lsls	r2, r3, #5
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	4413      	add	r3, r2
 800a828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	68ba      	ldr	r2, [r7, #8]
 800a830:	0151      	lsls	r1, r2, #5
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	440a      	add	r2, r1
 800a836:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a83a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a83e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	015a      	lsls	r2, r3, #5
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	4413      	add	r3, r2
 800a848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	68ba      	ldr	r2, [r7, #8]
 800a850:	0151      	lsls	r1, r2, #5
 800a852:	68fa      	ldr	r2, [r7, #12]
 800a854:	440a      	add	r2, r1
 800a856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a85a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a85e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a866:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	781b      	ldrb	r3, [r3, #0]
 800a86c:	f003 030f 	and.w	r3, r3, #15
 800a870:	2101      	movs	r1, #1
 800a872:	fa01 f303 	lsl.w	r3, r1, r3
 800a876:	b29b      	uxth	r3, r3
 800a878:	43db      	mvns	r3, r3
 800a87a:	68f9      	ldr	r1, [r7, #12]
 800a87c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a880:	4013      	ands	r3, r2
 800a882:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a88a:	69da      	ldr	r2, [r3, #28]
 800a88c:	683b      	ldr	r3, [r7, #0]
 800a88e:	781b      	ldrb	r3, [r3, #0]
 800a890:	f003 030f 	and.w	r3, r3, #15
 800a894:	2101      	movs	r1, #1
 800a896:	fa01 f303 	lsl.w	r3, r1, r3
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	43db      	mvns	r3, r3
 800a89e:	68f9      	ldr	r1, [r7, #12]
 800a8a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a8a4:	4013      	ands	r3, r2
 800a8a6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	015a      	lsls	r2, r3, #5
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	4413      	add	r3, r2
 800a8b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8b4:	681a      	ldr	r2, [r3, #0]
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	0159      	lsls	r1, r3, #5
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	440b      	add	r3, r1
 800a8be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8c2:	4619      	mov	r1, r3
 800a8c4:	4b35      	ldr	r3, [pc, #212]	; (800a99c <USB_DeactivateEndpoint+0x1b0>)
 800a8c6:	4013      	ands	r3, r2
 800a8c8:	600b      	str	r3, [r1, #0]
 800a8ca:	e060      	b.n	800a98e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a8cc:	68bb      	ldr	r3, [r7, #8]
 800a8ce:	015a      	lsls	r2, r3, #5
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	4413      	add	r3, r2
 800a8d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a8de:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a8e2:	d11f      	bne.n	800a924 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a8e4:	68bb      	ldr	r3, [r7, #8]
 800a8e6:	015a      	lsls	r2, r3, #5
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	4413      	add	r3, r2
 800a8ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	68ba      	ldr	r2, [r7, #8]
 800a8f4:	0151      	lsls	r1, r2, #5
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	440a      	add	r2, r1
 800a8fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a8fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a902:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a904:	68bb      	ldr	r3, [r7, #8]
 800a906:	015a      	lsls	r2, r3, #5
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	4413      	add	r3, r2
 800a90c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	68ba      	ldr	r2, [r7, #8]
 800a914:	0151      	lsls	r1, r2, #5
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	440a      	add	r2, r1
 800a91a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a91e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a922:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a92a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a92c:	683b      	ldr	r3, [r7, #0]
 800a92e:	781b      	ldrb	r3, [r3, #0]
 800a930:	f003 030f 	and.w	r3, r3, #15
 800a934:	2101      	movs	r1, #1
 800a936:	fa01 f303 	lsl.w	r3, r1, r3
 800a93a:	041b      	lsls	r3, r3, #16
 800a93c:	43db      	mvns	r3, r3
 800a93e:	68f9      	ldr	r1, [r7, #12]
 800a940:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a944:	4013      	ands	r3, r2
 800a946:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a94e:	69da      	ldr	r2, [r3, #28]
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	f003 030f 	and.w	r3, r3, #15
 800a958:	2101      	movs	r1, #1
 800a95a:	fa01 f303 	lsl.w	r3, r1, r3
 800a95e:	041b      	lsls	r3, r3, #16
 800a960:	43db      	mvns	r3, r3
 800a962:	68f9      	ldr	r1, [r7, #12]
 800a964:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a968:	4013      	ands	r3, r2
 800a96a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a96c:	68bb      	ldr	r3, [r7, #8]
 800a96e:	015a      	lsls	r2, r3, #5
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	4413      	add	r3, r2
 800a974:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	0159      	lsls	r1, r3, #5
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	440b      	add	r3, r1
 800a982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a986:	4619      	mov	r1, r3
 800a988:	4b05      	ldr	r3, [pc, #20]	; (800a9a0 <USB_DeactivateEndpoint+0x1b4>)
 800a98a:	4013      	ands	r3, r2
 800a98c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a98e:	2300      	movs	r3, #0
}
 800a990:	4618      	mov	r0, r3
 800a992:	3714      	adds	r7, #20
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	ec337800 	.word	0xec337800
 800a9a0:	eff37800 	.word	0xeff37800

0800a9a4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a9a4:	b580      	push	{r7, lr}
 800a9a6:	b08a      	sub	sp, #40	; 0x28
 800a9a8:	af02      	add	r7, sp, #8
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	4613      	mov	r3, r2
 800a9b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a9b6:	68bb      	ldr	r3, [r7, #8]
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	785b      	ldrb	r3, [r3, #1]
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	f040 815c 	bne.w	800ac7e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a9c6:	68bb      	ldr	r3, [r7, #8]
 800a9c8:	699b      	ldr	r3, [r3, #24]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d132      	bne.n	800aa34 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	015a      	lsls	r2, r3, #5
 800a9d2:	69fb      	ldr	r3, [r7, #28]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	69ba      	ldr	r2, [r7, #24]
 800a9de:	0151      	lsls	r1, r2, #5
 800a9e0:	69fa      	ldr	r2, [r7, #28]
 800a9e2:	440a      	add	r2, r1
 800a9e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a9e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800a9ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800a9f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a9f2:	69bb      	ldr	r3, [r7, #24]
 800a9f4:	015a      	lsls	r2, r3, #5
 800a9f6:	69fb      	ldr	r3, [r7, #28]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	69ba      	ldr	r2, [r7, #24]
 800aa02:	0151      	lsls	r1, r2, #5
 800aa04:	69fa      	ldr	r2, [r7, #28]
 800aa06:	440a      	add	r2, r1
 800aa08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aa10:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa12:	69bb      	ldr	r3, [r7, #24]
 800aa14:	015a      	lsls	r2, r3, #5
 800aa16:	69fb      	ldr	r3, [r7, #28]
 800aa18:	4413      	add	r3, r2
 800aa1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa1e:	691b      	ldr	r3, [r3, #16]
 800aa20:	69ba      	ldr	r2, [r7, #24]
 800aa22:	0151      	lsls	r1, r2, #5
 800aa24:	69fa      	ldr	r2, [r7, #28]
 800aa26:	440a      	add	r2, r1
 800aa28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa2c:	0cdb      	lsrs	r3, r3, #19
 800aa2e:	04db      	lsls	r3, r3, #19
 800aa30:	6113      	str	r3, [r2, #16]
 800aa32:	e074      	b.n	800ab1e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aa34:	69bb      	ldr	r3, [r7, #24]
 800aa36:	015a      	lsls	r2, r3, #5
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	4413      	add	r3, r2
 800aa3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	69ba      	ldr	r2, [r7, #24]
 800aa44:	0151      	lsls	r1, r2, #5
 800aa46:	69fa      	ldr	r2, [r7, #28]
 800aa48:	440a      	add	r2, r1
 800aa4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa4e:	0cdb      	lsrs	r3, r3, #19
 800aa50:	04db      	lsls	r3, r3, #19
 800aa52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	015a      	lsls	r2, r3, #5
 800aa58:	69fb      	ldr	r3, [r7, #28]
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa60:	691b      	ldr	r3, [r3, #16]
 800aa62:	69ba      	ldr	r2, [r7, #24]
 800aa64:	0151      	lsls	r1, r2, #5
 800aa66:	69fa      	ldr	r2, [r7, #28]
 800aa68:	440a      	add	r2, r1
 800aa6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa6e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aa72:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aa76:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800aa78:	69bb      	ldr	r3, [r7, #24]
 800aa7a:	015a      	lsls	r2, r3, #5
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	4413      	add	r3, r2
 800aa80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa84:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	6999      	ldr	r1, [r3, #24]
 800aa8a:	68bb      	ldr	r3, [r7, #8]
 800aa8c:	68db      	ldr	r3, [r3, #12]
 800aa8e:	440b      	add	r3, r1
 800aa90:	1e59      	subs	r1, r3, #1
 800aa92:	68bb      	ldr	r3, [r7, #8]
 800aa94:	68db      	ldr	r3, [r3, #12]
 800aa96:	fbb1 f3f3 	udiv	r3, r1, r3
 800aa9a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800aa9c:	4b9d      	ldr	r3, [pc, #628]	; (800ad14 <USB_EPStartXfer+0x370>)
 800aa9e:	400b      	ands	r3, r1
 800aaa0:	69b9      	ldr	r1, [r7, #24]
 800aaa2:	0148      	lsls	r0, r1, #5
 800aaa4:	69f9      	ldr	r1, [r7, #28]
 800aaa6:	4401      	add	r1, r0
 800aaa8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aaac:	4313      	orrs	r3, r2
 800aaae:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800aab0:	69bb      	ldr	r3, [r7, #24]
 800aab2:	015a      	lsls	r2, r3, #5
 800aab4:	69fb      	ldr	r3, [r7, #28]
 800aab6:	4413      	add	r3, r2
 800aab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aabc:	691a      	ldr	r2, [r3, #16]
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	699b      	ldr	r3, [r3, #24]
 800aac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800aac6:	69b9      	ldr	r1, [r7, #24]
 800aac8:	0148      	lsls	r0, r1, #5
 800aaca:	69f9      	ldr	r1, [r7, #28]
 800aacc:	4401      	add	r1, r0
 800aace:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800aad2:	4313      	orrs	r3, r2
 800aad4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	791b      	ldrb	r3, [r3, #4]
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d11f      	bne.n	800ab1e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	015a      	lsls	r2, r3, #5
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	4413      	add	r3, r2
 800aae6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aaea:	691b      	ldr	r3, [r3, #16]
 800aaec:	69ba      	ldr	r2, [r7, #24]
 800aaee:	0151      	lsls	r1, r2, #5
 800aaf0:	69fa      	ldr	r2, [r7, #28]
 800aaf2:	440a      	add	r2, r1
 800aaf4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aaf8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800aafc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800aafe:	69bb      	ldr	r3, [r7, #24]
 800ab00:	015a      	lsls	r2, r3, #5
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	4413      	add	r3, r2
 800ab06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab0a:	691b      	ldr	r3, [r3, #16]
 800ab0c:	69ba      	ldr	r2, [r7, #24]
 800ab0e:	0151      	lsls	r1, r2, #5
 800ab10:	69fa      	ldr	r2, [r7, #28]
 800ab12:	440a      	add	r2, r1
 800ab14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab18:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab1c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ab1e:	79fb      	ldrb	r3, [r7, #7]
 800ab20:	2b01      	cmp	r3, #1
 800ab22:	d14b      	bne.n	800abbc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ab24:	68bb      	ldr	r3, [r7, #8]
 800ab26:	695b      	ldr	r3, [r3, #20]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d009      	beq.n	800ab40 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ab2c:	69bb      	ldr	r3, [r7, #24]
 800ab2e:	015a      	lsls	r2, r3, #5
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	4413      	add	r3, r2
 800ab34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab38:	461a      	mov	r2, r3
 800ab3a:	68bb      	ldr	r3, [r7, #8]
 800ab3c:	695b      	ldr	r3, [r3, #20]
 800ab3e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ab40:	68bb      	ldr	r3, [r7, #8]
 800ab42:	791b      	ldrb	r3, [r3, #4]
 800ab44:	2b01      	cmp	r3, #1
 800ab46:	d128      	bne.n	800ab9a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ab48:	69fb      	ldr	r3, [r7, #28]
 800ab4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab4e:	689b      	ldr	r3, [r3, #8]
 800ab50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d110      	bne.n	800ab7a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	015a      	lsls	r2, r3, #5
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	4413      	add	r3, r2
 800ab60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	69ba      	ldr	r2, [r7, #24]
 800ab68:	0151      	lsls	r1, r2, #5
 800ab6a:	69fa      	ldr	r2, [r7, #28]
 800ab6c:	440a      	add	r2, r1
 800ab6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab72:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ab76:	6013      	str	r3, [r2, #0]
 800ab78:	e00f      	b.n	800ab9a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ab7a:	69bb      	ldr	r3, [r7, #24]
 800ab7c:	015a      	lsls	r2, r3, #5
 800ab7e:	69fb      	ldr	r3, [r7, #28]
 800ab80:	4413      	add	r3, r2
 800ab82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	69ba      	ldr	r2, [r7, #24]
 800ab8a:	0151      	lsls	r1, r2, #5
 800ab8c:	69fa      	ldr	r2, [r7, #28]
 800ab8e:	440a      	add	r2, r1
 800ab90:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ab98:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800ab9a:	69bb      	ldr	r3, [r7, #24]
 800ab9c:	015a      	lsls	r2, r3, #5
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	4413      	add	r3, r2
 800aba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	69ba      	ldr	r2, [r7, #24]
 800abaa:	0151      	lsls	r1, r2, #5
 800abac:	69fa      	ldr	r2, [r7, #28]
 800abae:	440a      	add	r2, r1
 800abb0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abb4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800abb8:	6013      	str	r3, [r2, #0]
 800abba:	e133      	b.n	800ae24 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800abbc:	69bb      	ldr	r3, [r7, #24]
 800abbe:	015a      	lsls	r2, r3, #5
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	4413      	add	r3, r2
 800abc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	69ba      	ldr	r2, [r7, #24]
 800abcc:	0151      	lsls	r1, r2, #5
 800abce:	69fa      	ldr	r2, [r7, #28]
 800abd0:	440a      	add	r2, r1
 800abd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abd6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800abda:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	791b      	ldrb	r3, [r3, #4]
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d015      	beq.n	800ac10 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	699b      	ldr	r3, [r3, #24]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	f000 811b 	beq.w	800ae24 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800abee:	69fb      	ldr	r3, [r7, #28]
 800abf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800abf6:	68bb      	ldr	r3, [r7, #8]
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	f003 030f 	and.w	r3, r3, #15
 800abfe:	2101      	movs	r1, #1
 800ac00:	fa01 f303 	lsl.w	r3, r1, r3
 800ac04:	69f9      	ldr	r1, [r7, #28]
 800ac06:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	634b      	str	r3, [r1, #52]	; 0x34
 800ac0e:	e109      	b.n	800ae24 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ac10:	69fb      	ldr	r3, [r7, #28]
 800ac12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d110      	bne.n	800ac42 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ac20:	69bb      	ldr	r3, [r7, #24]
 800ac22:	015a      	lsls	r2, r3, #5
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	4413      	add	r3, r2
 800ac28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	69ba      	ldr	r2, [r7, #24]
 800ac30:	0151      	lsls	r1, r2, #5
 800ac32:	69fa      	ldr	r2, [r7, #28]
 800ac34:	440a      	add	r2, r1
 800ac36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac3a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ac3e:	6013      	str	r3, [r2, #0]
 800ac40:	e00f      	b.n	800ac62 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ac42:	69bb      	ldr	r3, [r7, #24]
 800ac44:	015a      	lsls	r2, r3, #5
 800ac46:	69fb      	ldr	r3, [r7, #28]
 800ac48:	4413      	add	r3, r2
 800ac4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	69ba      	ldr	r2, [r7, #24]
 800ac52:	0151      	lsls	r1, r2, #5
 800ac54:	69fa      	ldr	r2, [r7, #28]
 800ac56:	440a      	add	r2, r1
 800ac58:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac60:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ac62:	68bb      	ldr	r3, [r7, #8]
 800ac64:	6919      	ldr	r1, [r3, #16]
 800ac66:	68bb      	ldr	r3, [r7, #8]
 800ac68:	781a      	ldrb	r2, [r3, #0]
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	699b      	ldr	r3, [r3, #24]
 800ac6e:	b298      	uxth	r0, r3
 800ac70:	79fb      	ldrb	r3, [r7, #7]
 800ac72:	9300      	str	r3, [sp, #0]
 800ac74:	4603      	mov	r3, r0
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f000 fade 	bl	800b238 <USB_WritePacket>
 800ac7c:	e0d2      	b.n	800ae24 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ac7e:	69bb      	ldr	r3, [r7, #24]
 800ac80:	015a      	lsls	r2, r3, #5
 800ac82:	69fb      	ldr	r3, [r7, #28]
 800ac84:	4413      	add	r3, r2
 800ac86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac8a:	691b      	ldr	r3, [r3, #16]
 800ac8c:	69ba      	ldr	r2, [r7, #24]
 800ac8e:	0151      	lsls	r1, r2, #5
 800ac90:	69fa      	ldr	r2, [r7, #28]
 800ac92:	440a      	add	r2, r1
 800ac94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac98:	0cdb      	lsrs	r3, r3, #19
 800ac9a:	04db      	lsls	r3, r3, #19
 800ac9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ac9e:	69bb      	ldr	r3, [r7, #24]
 800aca0:	015a      	lsls	r2, r3, #5
 800aca2:	69fb      	ldr	r3, [r7, #28]
 800aca4:	4413      	add	r3, r2
 800aca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acaa:	691b      	ldr	r3, [r3, #16]
 800acac:	69ba      	ldr	r2, [r7, #24]
 800acae:	0151      	lsls	r1, r2, #5
 800acb0:	69fa      	ldr	r2, [r7, #28]
 800acb2:	440a      	add	r2, r1
 800acb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800acb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800acbc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800acc0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	699b      	ldr	r3, [r3, #24]
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d126      	bne.n	800ad18 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800acca:	69bb      	ldr	r3, [r7, #24]
 800accc:	015a      	lsls	r2, r3, #5
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	4413      	add	r3, r2
 800acd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acd6:	691a      	ldr	r2, [r3, #16]
 800acd8:	68bb      	ldr	r3, [r7, #8]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ace0:	69b9      	ldr	r1, [r7, #24]
 800ace2:	0148      	lsls	r0, r1, #5
 800ace4:	69f9      	ldr	r1, [r7, #28]
 800ace6:	4401      	add	r1, r0
 800ace8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800acec:	4313      	orrs	r3, r2
 800acee:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	015a      	lsls	r2, r3, #5
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	4413      	add	r3, r2
 800acf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acfc:	691b      	ldr	r3, [r3, #16]
 800acfe:	69ba      	ldr	r2, [r7, #24]
 800ad00:	0151      	lsls	r1, r2, #5
 800ad02:	69fa      	ldr	r2, [r7, #28]
 800ad04:	440a      	add	r2, r1
 800ad06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ad0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad0e:	6113      	str	r3, [r2, #16]
 800ad10:	e03a      	b.n	800ad88 <USB_EPStartXfer+0x3e4>
 800ad12:	bf00      	nop
 800ad14:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	699a      	ldr	r2, [r3, #24]
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	68db      	ldr	r3, [r3, #12]
 800ad20:	4413      	add	r3, r2
 800ad22:	1e5a      	subs	r2, r3, #1
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad2c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	68db      	ldr	r3, [r3, #12]
 800ad32:	8afa      	ldrh	r2, [r7, #22]
 800ad34:	fb03 f202 	mul.w	r2, r3, r2
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800ad3c:	69bb      	ldr	r3, [r7, #24]
 800ad3e:	015a      	lsls	r2, r3, #5
 800ad40:	69fb      	ldr	r3, [r7, #28]
 800ad42:	4413      	add	r3, r2
 800ad44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad48:	691a      	ldr	r2, [r3, #16]
 800ad4a:	8afb      	ldrh	r3, [r7, #22]
 800ad4c:	04d9      	lsls	r1, r3, #19
 800ad4e:	4b38      	ldr	r3, [pc, #224]	; (800ae30 <USB_EPStartXfer+0x48c>)
 800ad50:	400b      	ands	r3, r1
 800ad52:	69b9      	ldr	r1, [r7, #24]
 800ad54:	0148      	lsls	r0, r1, #5
 800ad56:	69f9      	ldr	r1, [r7, #28]
 800ad58:	4401      	add	r1, r0
 800ad5a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800ad62:	69bb      	ldr	r3, [r7, #24]
 800ad64:	015a      	lsls	r2, r3, #5
 800ad66:	69fb      	ldr	r3, [r7, #28]
 800ad68:	4413      	add	r3, r2
 800ad6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ad6e:	691a      	ldr	r2, [r3, #16]
 800ad70:	68bb      	ldr	r3, [r7, #8]
 800ad72:	69db      	ldr	r3, [r3, #28]
 800ad74:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ad78:	69b9      	ldr	r1, [r7, #24]
 800ad7a:	0148      	lsls	r0, r1, #5
 800ad7c:	69f9      	ldr	r1, [r7, #28]
 800ad7e:	4401      	add	r1, r0
 800ad80:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ad84:	4313      	orrs	r3, r2
 800ad86:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800ad88:	79fb      	ldrb	r3, [r7, #7]
 800ad8a:	2b01      	cmp	r3, #1
 800ad8c:	d10d      	bne.n	800adaa <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ad8e:	68bb      	ldr	r3, [r7, #8]
 800ad90:	691b      	ldr	r3, [r3, #16]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d009      	beq.n	800adaa <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ad96:	68bb      	ldr	r3, [r7, #8]
 800ad98:	6919      	ldr	r1, [r3, #16]
 800ad9a:	69bb      	ldr	r3, [r7, #24]
 800ad9c:	015a      	lsls	r2, r3, #5
 800ad9e:	69fb      	ldr	r3, [r7, #28]
 800ada0:	4413      	add	r3, r2
 800ada2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ada6:	460a      	mov	r2, r1
 800ada8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800adaa:	68bb      	ldr	r3, [r7, #8]
 800adac:	791b      	ldrb	r3, [r3, #4]
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d128      	bne.n	800ae04 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800adb2:	69fb      	ldr	r3, [r7, #28]
 800adb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d110      	bne.n	800ade4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	015a      	lsls	r2, r3, #5
 800adc6:	69fb      	ldr	r3, [r7, #28]
 800adc8:	4413      	add	r3, r2
 800adca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	69ba      	ldr	r2, [r7, #24]
 800add2:	0151      	lsls	r1, r2, #5
 800add4:	69fa      	ldr	r2, [r7, #28]
 800add6:	440a      	add	r2, r1
 800add8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800addc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ade0:	6013      	str	r3, [r2, #0]
 800ade2:	e00f      	b.n	800ae04 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	015a      	lsls	r2, r3, #5
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	4413      	add	r3, r2
 800adec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	69ba      	ldr	r2, [r7, #24]
 800adf4:	0151      	lsls	r1, r2, #5
 800adf6:	69fa      	ldr	r2, [r7, #28]
 800adf8:	440a      	add	r2, r1
 800adfa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adfe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae02:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ae04:	69bb      	ldr	r3, [r7, #24]
 800ae06:	015a      	lsls	r2, r3, #5
 800ae08:	69fb      	ldr	r3, [r7, #28]
 800ae0a:	4413      	add	r3, r2
 800ae0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	69ba      	ldr	r2, [r7, #24]
 800ae14:	0151      	lsls	r1, r2, #5
 800ae16:	69fa      	ldr	r2, [r7, #28]
 800ae18:	440a      	add	r2, r1
 800ae1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800ae22:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ae24:	2300      	movs	r3, #0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3720      	adds	r7, #32
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	1ff80000 	.word	0x1ff80000

0800ae34 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ae34:	b480      	push	{r7}
 800ae36:	b087      	sub	sp, #28
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	4613      	mov	r3, r2
 800ae40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	781b      	ldrb	r3, [r3, #0]
 800ae4a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	785b      	ldrb	r3, [r3, #1]
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	f040 80ce 	bne.w	800aff2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	699b      	ldr	r3, [r3, #24]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d132      	bne.n	800aec4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	015a      	lsls	r2, r3, #5
 800ae62:	697b      	ldr	r3, [r7, #20]
 800ae64:	4413      	add	r3, r2
 800ae66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae6a:	691b      	ldr	r3, [r3, #16]
 800ae6c:	693a      	ldr	r2, [r7, #16]
 800ae6e:	0151      	lsls	r1, r2, #5
 800ae70:	697a      	ldr	r2, [r7, #20]
 800ae72:	440a      	add	r2, r1
 800ae74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ae7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ae80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ae82:	693b      	ldr	r3, [r7, #16]
 800ae84:	015a      	lsls	r2, r3, #5
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	4413      	add	r3, r2
 800ae8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae8e:	691b      	ldr	r3, [r3, #16]
 800ae90:	693a      	ldr	r2, [r7, #16]
 800ae92:	0151      	lsls	r1, r2, #5
 800ae94:	697a      	ldr	r2, [r7, #20]
 800ae96:	440a      	add	r2, r1
 800ae98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800aea0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	015a      	lsls	r2, r3, #5
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	4413      	add	r3, r2
 800aeaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeae:	691b      	ldr	r3, [r3, #16]
 800aeb0:	693a      	ldr	r2, [r7, #16]
 800aeb2:	0151      	lsls	r1, r2, #5
 800aeb4:	697a      	ldr	r2, [r7, #20]
 800aeb6:	440a      	add	r2, r1
 800aeb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aebc:	0cdb      	lsrs	r3, r3, #19
 800aebe:	04db      	lsls	r3, r3, #19
 800aec0:	6113      	str	r3, [r2, #16]
 800aec2:	e04e      	b.n	800af62 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800aec4:	693b      	ldr	r3, [r7, #16]
 800aec6:	015a      	lsls	r2, r3, #5
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	4413      	add	r3, r2
 800aecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aed0:	691b      	ldr	r3, [r3, #16]
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	0151      	lsls	r1, r2, #5
 800aed6:	697a      	ldr	r2, [r7, #20]
 800aed8:	440a      	add	r2, r1
 800aeda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aede:	0cdb      	lsrs	r3, r3, #19
 800aee0:	04db      	lsls	r3, r3, #19
 800aee2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	015a      	lsls	r2, r3, #5
 800aee8:	697b      	ldr	r3, [r7, #20]
 800aeea:	4413      	add	r3, r2
 800aeec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aef0:	691b      	ldr	r3, [r3, #16]
 800aef2:	693a      	ldr	r2, [r7, #16]
 800aef4:	0151      	lsls	r1, r2, #5
 800aef6:	697a      	ldr	r2, [r7, #20]
 800aef8:	440a      	add	r2, r1
 800aefa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aefe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800af02:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800af06:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	699a      	ldr	r2, [r3, #24]
 800af0c:	68bb      	ldr	r3, [r7, #8]
 800af0e:	68db      	ldr	r3, [r3, #12]
 800af10:	429a      	cmp	r2, r3
 800af12:	d903      	bls.n	800af1c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	68da      	ldr	r2, [r3, #12]
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800af1c:	693b      	ldr	r3, [r7, #16]
 800af1e:	015a      	lsls	r2, r3, #5
 800af20:	697b      	ldr	r3, [r7, #20]
 800af22:	4413      	add	r3, r2
 800af24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af28:	691b      	ldr	r3, [r3, #16]
 800af2a:	693a      	ldr	r2, [r7, #16]
 800af2c:	0151      	lsls	r1, r2, #5
 800af2e:	697a      	ldr	r2, [r7, #20]
 800af30:	440a      	add	r2, r1
 800af32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	015a      	lsls	r2, r3, #5
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	4413      	add	r3, r2
 800af44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af48:	691a      	ldr	r2, [r3, #16]
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	699b      	ldr	r3, [r3, #24]
 800af4e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800af52:	6939      	ldr	r1, [r7, #16]
 800af54:	0148      	lsls	r0, r1, #5
 800af56:	6979      	ldr	r1, [r7, #20]
 800af58:	4401      	add	r1, r0
 800af5a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800af5e:	4313      	orrs	r3, r2
 800af60:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800af62:	79fb      	ldrb	r3, [r7, #7]
 800af64:	2b01      	cmp	r3, #1
 800af66:	d11e      	bne.n	800afa6 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800af68:	68bb      	ldr	r3, [r7, #8]
 800af6a:	695b      	ldr	r3, [r3, #20]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d009      	beq.n	800af84 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800af70:	693b      	ldr	r3, [r7, #16]
 800af72:	015a      	lsls	r2, r3, #5
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	4413      	add	r3, r2
 800af78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af7c:	461a      	mov	r2, r3
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	015a      	lsls	r2, r3, #5
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	4413      	add	r3, r2
 800af8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	693a      	ldr	r2, [r7, #16]
 800af94:	0151      	lsls	r1, r2, #5
 800af96:	697a      	ldr	r2, [r7, #20]
 800af98:	440a      	add	r2, r1
 800af9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af9e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800afa2:	6013      	str	r3, [r2, #0]
 800afa4:	e097      	b.n	800b0d6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	015a      	lsls	r2, r3, #5
 800afaa:	697b      	ldr	r3, [r7, #20]
 800afac:	4413      	add	r3, r2
 800afae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	693a      	ldr	r2, [r7, #16]
 800afb6:	0151      	lsls	r1, r2, #5
 800afb8:	697a      	ldr	r2, [r7, #20]
 800afba:	440a      	add	r2, r1
 800afbc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800afc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800afc4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800afc6:	68bb      	ldr	r3, [r7, #8]
 800afc8:	699b      	ldr	r3, [r3, #24]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	f000 8083 	beq.w	800b0d6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	781b      	ldrb	r3, [r3, #0]
 800afdc:	f003 030f 	and.w	r3, r3, #15
 800afe0:	2101      	movs	r1, #1
 800afe2:	fa01 f303 	lsl.w	r3, r1, r3
 800afe6:	6979      	ldr	r1, [r7, #20]
 800afe8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afec:	4313      	orrs	r3, r2
 800afee:	634b      	str	r3, [r1, #52]	; 0x34
 800aff0:	e071      	b.n	800b0d6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	015a      	lsls	r2, r3, #5
 800aff6:	697b      	ldr	r3, [r7, #20]
 800aff8:	4413      	add	r3, r2
 800affa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800affe:	691b      	ldr	r3, [r3, #16]
 800b000:	693a      	ldr	r2, [r7, #16]
 800b002:	0151      	lsls	r1, r2, #5
 800b004:	697a      	ldr	r2, [r7, #20]
 800b006:	440a      	add	r2, r1
 800b008:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b00c:	0cdb      	lsrs	r3, r3, #19
 800b00e:	04db      	lsls	r3, r3, #19
 800b010:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b012:	693b      	ldr	r3, [r7, #16]
 800b014:	015a      	lsls	r2, r3, #5
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	4413      	add	r3, r2
 800b01a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b01e:	691b      	ldr	r3, [r3, #16]
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	0151      	lsls	r1, r2, #5
 800b024:	697a      	ldr	r2, [r7, #20]
 800b026:	440a      	add	r2, r1
 800b028:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b02c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b030:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b034:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800b036:	68bb      	ldr	r3, [r7, #8]
 800b038:	699b      	ldr	r3, [r3, #24]
 800b03a:	2b00      	cmp	r3, #0
 800b03c:	d003      	beq.n	800b046 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	68da      	ldr	r2, [r3, #12]
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	68da      	ldr	r2, [r3, #12]
 800b04a:	68bb      	ldr	r3, [r7, #8]
 800b04c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	015a      	lsls	r2, r3, #5
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	4413      	add	r3, r2
 800b056:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b05a:	691b      	ldr	r3, [r3, #16]
 800b05c:	693a      	ldr	r2, [r7, #16]
 800b05e:	0151      	lsls	r1, r2, #5
 800b060:	697a      	ldr	r2, [r7, #20]
 800b062:	440a      	add	r2, r1
 800b064:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b068:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b06c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	015a      	lsls	r2, r3, #5
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	4413      	add	r3, r2
 800b076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b07a:	691a      	ldr	r2, [r3, #16]
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	69db      	ldr	r3, [r3, #28]
 800b080:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b084:	6939      	ldr	r1, [r7, #16]
 800b086:	0148      	lsls	r0, r1, #5
 800b088:	6979      	ldr	r1, [r7, #20]
 800b08a:	4401      	add	r1, r0
 800b08c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b090:	4313      	orrs	r3, r2
 800b092:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b094:	79fb      	ldrb	r3, [r7, #7]
 800b096:	2b01      	cmp	r3, #1
 800b098:	d10d      	bne.n	800b0b6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b09a:	68bb      	ldr	r3, [r7, #8]
 800b09c:	691b      	ldr	r3, [r3, #16]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d009      	beq.n	800b0b6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	6919      	ldr	r1, [r3, #16]
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	015a      	lsls	r2, r3, #5
 800b0aa:	697b      	ldr	r3, [r7, #20]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0b2:	460a      	mov	r2, r1
 800b0b4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b0b6:	693b      	ldr	r3, [r7, #16]
 800b0b8:	015a      	lsls	r2, r3, #5
 800b0ba:	697b      	ldr	r3, [r7, #20]
 800b0bc:	4413      	add	r3, r2
 800b0be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	693a      	ldr	r2, [r7, #16]
 800b0c6:	0151      	lsls	r1, r2, #5
 800b0c8:	697a      	ldr	r2, [r7, #20]
 800b0ca:	440a      	add	r2, r1
 800b0cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b0d6:	2300      	movs	r3, #0
}
 800b0d8:	4618      	mov	r0, r3
 800b0da:	371c      	adds	r7, #28
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b087      	sub	sp, #28
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	6078      	str	r0, [r7, #4]
 800b0ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	785b      	ldrb	r3, [r3, #1]
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d14a      	bne.n	800b198 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	781b      	ldrb	r3, [r3, #0]
 800b106:	015a      	lsls	r2, r3, #5
 800b108:	693b      	ldr	r3, [r7, #16]
 800b10a:	4413      	add	r3, r2
 800b10c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b116:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b11a:	f040 8086 	bne.w	800b22a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b11e:	683b      	ldr	r3, [r7, #0]
 800b120:	781b      	ldrb	r3, [r3, #0]
 800b122:	015a      	lsls	r2, r3, #5
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	4413      	add	r3, r2
 800b128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	683a      	ldr	r2, [r7, #0]
 800b130:	7812      	ldrb	r2, [r2, #0]
 800b132:	0151      	lsls	r1, r2, #5
 800b134:	693a      	ldr	r2, [r7, #16]
 800b136:	440a      	add	r2, r1
 800b138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b13c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b140:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	015a      	lsls	r2, r3, #5
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	4413      	add	r3, r2
 800b14c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	683a      	ldr	r2, [r7, #0]
 800b154:	7812      	ldrb	r2, [r2, #0]
 800b156:	0151      	lsls	r1, r2, #5
 800b158:	693a      	ldr	r2, [r7, #16]
 800b15a:	440a      	add	r2, r1
 800b15c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b160:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b164:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	3301      	adds	r3, #1
 800b16a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	f242 7210 	movw	r2, #10000	; 0x2710
 800b172:	4293      	cmp	r3, r2
 800b174:	d902      	bls.n	800b17c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	75fb      	strb	r3, [r7, #23]
          break;
 800b17a:	e056      	b.n	800b22a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	781b      	ldrb	r3, [r3, #0]
 800b180:	015a      	lsls	r2, r3, #5
 800b182:	693b      	ldr	r3, [r7, #16]
 800b184:	4413      	add	r3, r2
 800b186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b190:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b194:	d0e7      	beq.n	800b166 <USB_EPStopXfer+0x82>
 800b196:	e048      	b.n	800b22a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b198:	683b      	ldr	r3, [r7, #0]
 800b19a:	781b      	ldrb	r3, [r3, #0]
 800b19c:	015a      	lsls	r2, r3, #5
 800b19e:	693b      	ldr	r3, [r7, #16]
 800b1a0:	4413      	add	r3, r2
 800b1a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1b0:	d13b      	bne.n	800b22a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	015a      	lsls	r2, r3, #5
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	683a      	ldr	r2, [r7, #0]
 800b1c4:	7812      	ldrb	r2, [r2, #0]
 800b1c6:	0151      	lsls	r1, r2, #5
 800b1c8:	693a      	ldr	r2, [r7, #16]
 800b1ca:	440a      	add	r2, r1
 800b1cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b1d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b1d6:	683b      	ldr	r3, [r7, #0]
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	015a      	lsls	r2, r3, #5
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	4413      	add	r3, r2
 800b1e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	683a      	ldr	r2, [r7, #0]
 800b1e8:	7812      	ldrb	r2, [r2, #0]
 800b1ea:	0151      	lsls	r1, r2, #5
 800b1ec:	693a      	ldr	r2, [r7, #16]
 800b1ee:	440a      	add	r2, r1
 800b1f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b1f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f242 7210 	movw	r2, #10000	; 0x2710
 800b206:	4293      	cmp	r3, r2
 800b208:	d902      	bls.n	800b210 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b20a:	2301      	movs	r3, #1
 800b20c:	75fb      	strb	r3, [r7, #23]
          break;
 800b20e:	e00c      	b.n	800b22a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b210:	683b      	ldr	r3, [r7, #0]
 800b212:	781b      	ldrb	r3, [r3, #0]
 800b214:	015a      	lsls	r2, r3, #5
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	4413      	add	r3, r2
 800b21a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b224:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b228:	d0e7      	beq.n	800b1fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b22a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b22c:	4618      	mov	r0, r3
 800b22e:	371c      	adds	r7, #28
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b238:	b480      	push	{r7}
 800b23a:	b089      	sub	sp, #36	; 0x24
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	60f8      	str	r0, [r7, #12]
 800b240:	60b9      	str	r1, [r7, #8]
 800b242:	4611      	mov	r1, r2
 800b244:	461a      	mov	r2, r3
 800b246:	460b      	mov	r3, r1
 800b248:	71fb      	strb	r3, [r7, #7]
 800b24a:	4613      	mov	r3, r2
 800b24c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b252:	68bb      	ldr	r3, [r7, #8]
 800b254:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b256:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d123      	bne.n	800b2a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b25e:	88bb      	ldrh	r3, [r7, #4]
 800b260:	3303      	adds	r3, #3
 800b262:	089b      	lsrs	r3, r3, #2
 800b264:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b266:	2300      	movs	r3, #0
 800b268:	61bb      	str	r3, [r7, #24]
 800b26a:	e018      	b.n	800b29e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b26c:	79fb      	ldrb	r3, [r7, #7]
 800b26e:	031a      	lsls	r2, r3, #12
 800b270:	697b      	ldr	r3, [r7, #20]
 800b272:	4413      	add	r3, r2
 800b274:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b278:	461a      	mov	r2, r3
 800b27a:	69fb      	ldr	r3, [r7, #28]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b280:	69fb      	ldr	r3, [r7, #28]
 800b282:	3301      	adds	r3, #1
 800b284:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b286:	69fb      	ldr	r3, [r7, #28]
 800b288:	3301      	adds	r3, #1
 800b28a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	3301      	adds	r3, #1
 800b290:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b292:	69fb      	ldr	r3, [r7, #28]
 800b294:	3301      	adds	r3, #1
 800b296:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	3301      	adds	r3, #1
 800b29c:	61bb      	str	r3, [r7, #24]
 800b29e:	69ba      	ldr	r2, [r7, #24]
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	429a      	cmp	r2, r3
 800b2a4:	d3e2      	bcc.n	800b26c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b2a6:	2300      	movs	r3, #0
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3724      	adds	r7, #36	; 0x24
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b2:	4770      	bx	lr

0800b2b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b2b4:	b480      	push	{r7}
 800b2b6:	b08b      	sub	sp, #44	; 0x2c
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	60f8      	str	r0, [r7, #12]
 800b2bc:	60b9      	str	r1, [r7, #8]
 800b2be:	4613      	mov	r3, r2
 800b2c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b2ca:	88fb      	ldrh	r3, [r7, #6]
 800b2cc:	089b      	lsrs	r3, r3, #2
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b2d2:	88fb      	ldrh	r3, [r7, #6]
 800b2d4:	f003 0303 	and.w	r3, r3, #3
 800b2d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b2da:	2300      	movs	r3, #0
 800b2dc:	623b      	str	r3, [r7, #32]
 800b2de:	e014      	b.n	800b30a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ea:	601a      	str	r2, [r3, #0]
    pDest++;
 800b2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2ee:	3301      	adds	r3, #1
 800b2f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f4:	3301      	adds	r3, #1
 800b2f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b300:	3301      	adds	r3, #1
 800b302:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b304:	6a3b      	ldr	r3, [r7, #32]
 800b306:	3301      	adds	r3, #1
 800b308:	623b      	str	r3, [r7, #32]
 800b30a:	6a3a      	ldr	r2, [r7, #32]
 800b30c:	697b      	ldr	r3, [r7, #20]
 800b30e:	429a      	cmp	r2, r3
 800b310:	d3e6      	bcc.n	800b2e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b312:	8bfb      	ldrh	r3, [r7, #30]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d01e      	beq.n	800b356 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b318:	2300      	movs	r3, #0
 800b31a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b31c:	69bb      	ldr	r3, [r7, #24]
 800b31e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b322:	461a      	mov	r2, r3
 800b324:	f107 0310 	add.w	r3, r7, #16
 800b328:	6812      	ldr	r2, [r2, #0]
 800b32a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b32c:	693a      	ldr	r2, [r7, #16]
 800b32e:	6a3b      	ldr	r3, [r7, #32]
 800b330:	b2db      	uxtb	r3, r3
 800b332:	00db      	lsls	r3, r3, #3
 800b334:	fa22 f303 	lsr.w	r3, r2, r3
 800b338:	b2da      	uxtb	r2, r3
 800b33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33c:	701a      	strb	r2, [r3, #0]
      i++;
 800b33e:	6a3b      	ldr	r3, [r7, #32]
 800b340:	3301      	adds	r3, #1
 800b342:	623b      	str	r3, [r7, #32]
      pDest++;
 800b344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b346:	3301      	adds	r3, #1
 800b348:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b34a:	8bfb      	ldrh	r3, [r7, #30]
 800b34c:	3b01      	subs	r3, #1
 800b34e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b350:	8bfb      	ldrh	r3, [r7, #30]
 800b352:	2b00      	cmp	r3, #0
 800b354:	d1ea      	bne.n	800b32c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b358:	4618      	mov	r0, r3
 800b35a:	372c      	adds	r7, #44	; 0x2c
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b364:	b480      	push	{r7}
 800b366:	b085      	sub	sp, #20
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b378:	683b      	ldr	r3, [r7, #0]
 800b37a:	785b      	ldrb	r3, [r3, #1]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	d12c      	bne.n	800b3da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b380:	68bb      	ldr	r3, [r7, #8]
 800b382:	015a      	lsls	r2, r3, #5
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	4413      	add	r3, r2
 800b388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	db12      	blt.n	800b3b8 <USB_EPSetStall+0x54>
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d00f      	beq.n	800b3b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b398:	68bb      	ldr	r3, [r7, #8]
 800b39a:	015a      	lsls	r2, r3, #5
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	4413      	add	r3, r2
 800b3a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68ba      	ldr	r2, [r7, #8]
 800b3a8:	0151      	lsls	r1, r2, #5
 800b3aa:	68fa      	ldr	r2, [r7, #12]
 800b3ac:	440a      	add	r2, r1
 800b3ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b3b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b3b8:	68bb      	ldr	r3, [r7, #8]
 800b3ba:	015a      	lsls	r2, r3, #5
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	68ba      	ldr	r2, [r7, #8]
 800b3c8:	0151      	lsls	r1, r2, #5
 800b3ca:	68fa      	ldr	r2, [r7, #12]
 800b3cc:	440a      	add	r2, r1
 800b3ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b3d6:	6013      	str	r3, [r2, #0]
 800b3d8:	e02b      	b.n	800b432 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b3da:	68bb      	ldr	r3, [r7, #8]
 800b3dc:	015a      	lsls	r2, r3, #5
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	4413      	add	r3, r2
 800b3e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	db12      	blt.n	800b412 <USB_EPSetStall+0xae>
 800b3ec:	68bb      	ldr	r3, [r7, #8]
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d00f      	beq.n	800b412 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	015a      	lsls	r2, r3, #5
 800b3f6:	68fb      	ldr	r3, [r7, #12]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	68ba      	ldr	r2, [r7, #8]
 800b402:	0151      	lsls	r1, r2, #5
 800b404:	68fa      	ldr	r2, [r7, #12]
 800b406:	440a      	add	r2, r1
 800b408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b40c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b410:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	015a      	lsls	r2, r3, #5
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	4413      	add	r3, r2
 800b41a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	68ba      	ldr	r2, [r7, #8]
 800b422:	0151      	lsls	r1, r2, #5
 800b424:	68fa      	ldr	r2, [r7, #12]
 800b426:	440a      	add	r2, r1
 800b428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b42c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b430:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b432:	2300      	movs	r3, #0
}
 800b434:	4618      	mov	r0, r3
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b440:	b480      	push	{r7}
 800b442:	b085      	sub	sp, #20
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
 800b448:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b44e:	683b      	ldr	r3, [r7, #0]
 800b450:	781b      	ldrb	r3, [r3, #0]
 800b452:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	785b      	ldrb	r3, [r3, #1]
 800b458:	2b01      	cmp	r3, #1
 800b45a:	d128      	bne.n	800b4ae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	015a      	lsls	r2, r3, #5
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	4413      	add	r3, r2
 800b464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	68ba      	ldr	r2, [r7, #8]
 800b46c:	0151      	lsls	r1, r2, #5
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	440a      	add	r2, r1
 800b472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b476:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b47a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b47c:	683b      	ldr	r3, [r7, #0]
 800b47e:	791b      	ldrb	r3, [r3, #4]
 800b480:	2b03      	cmp	r3, #3
 800b482:	d003      	beq.n	800b48c <USB_EPClearStall+0x4c>
 800b484:	683b      	ldr	r3, [r7, #0]
 800b486:	791b      	ldrb	r3, [r3, #4]
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d138      	bne.n	800b4fe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	015a      	lsls	r2, r3, #5
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	4413      	add	r3, r2
 800b494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	68ba      	ldr	r2, [r7, #8]
 800b49c:	0151      	lsls	r1, r2, #5
 800b49e:	68fa      	ldr	r2, [r7, #12]
 800b4a0:	440a      	add	r2, r1
 800b4a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4aa:	6013      	str	r3, [r2, #0]
 800b4ac:	e027      	b.n	800b4fe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	015a      	lsls	r2, r3, #5
 800b4b2:	68fb      	ldr	r3, [r7, #12]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	68ba      	ldr	r2, [r7, #8]
 800b4be:	0151      	lsls	r1, r2, #5
 800b4c0:	68fa      	ldr	r2, [r7, #12]
 800b4c2:	440a      	add	r2, r1
 800b4c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b4cc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	791b      	ldrb	r3, [r3, #4]
 800b4d2:	2b03      	cmp	r3, #3
 800b4d4:	d003      	beq.n	800b4de <USB_EPClearStall+0x9e>
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	791b      	ldrb	r3, [r3, #4]
 800b4da:	2b02      	cmp	r3, #2
 800b4dc:	d10f      	bne.n	800b4fe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	015a      	lsls	r2, r3, #5
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	68ba      	ldr	r2, [r7, #8]
 800b4ee:	0151      	lsls	r1, r2, #5
 800b4f0:	68fa      	ldr	r2, [r7, #12]
 800b4f2:	440a      	add	r2, r1
 800b4f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b4fc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b4fe:	2300      	movs	r3, #0
}
 800b500:	4618      	mov	r0, r3
 800b502:	3714      	adds	r7, #20
 800b504:	46bd      	mov	sp, r7
 800b506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b50a:	4770      	bx	lr

0800b50c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b50c:	b480      	push	{r7}
 800b50e:	b085      	sub	sp, #20
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	460b      	mov	r3, r1
 800b516:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68fa      	ldr	r2, [r7, #12]
 800b526:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b52a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b52e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	78fb      	ldrb	r3, [r7, #3]
 800b53a:	011b      	lsls	r3, r3, #4
 800b53c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b540:	68f9      	ldr	r1, [r7, #12]
 800b542:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b546:	4313      	orrs	r3, r2
 800b548:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3714      	adds	r7, #20
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b558:	b480      	push	{r7}
 800b55a:	b085      	sub	sp, #20
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68fa      	ldr	r2, [r7, #12]
 800b56e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b572:	f023 0303 	bic.w	r3, r3, #3
 800b576:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b57e:	685b      	ldr	r3, [r3, #4]
 800b580:	68fa      	ldr	r2, [r7, #12]
 800b582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b586:	f023 0302 	bic.w	r3, r3, #2
 800b58a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b58c:	2300      	movs	r3, #0
}
 800b58e:	4618      	mov	r0, r3
 800b590:	3714      	adds	r7, #20
 800b592:	46bd      	mov	sp, r7
 800b594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b598:	4770      	bx	lr

0800b59a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b59a:	b480      	push	{r7}
 800b59c:	b085      	sub	sp, #20
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b5a6:	68fb      	ldr	r3, [r7, #12]
 800b5a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	68fa      	ldr	r2, [r7, #12]
 800b5b0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b5b4:	f023 0303 	bic.w	r3, r3, #3
 800b5b8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5c0:	685b      	ldr	r3, [r3, #4]
 800b5c2:	68fa      	ldr	r2, [r7, #12]
 800b5c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b5c8:	f043 0302 	orr.w	r3, r3, #2
 800b5cc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b5ce:	2300      	movs	r3, #0
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3714      	adds	r7, #20
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5da:	4770      	bx	lr

0800b5dc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b085      	sub	sp, #20
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	695b      	ldr	r3, [r3, #20]
 800b5e8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	699b      	ldr	r3, [r3, #24]
 800b5ee:	68fa      	ldr	r2, [r7, #12]
 800b5f0:	4013      	ands	r3, r2
 800b5f2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b5f4:	68fb      	ldr	r3, [r7, #12]
}
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	3714      	adds	r7, #20
 800b5fa:	46bd      	mov	sp, r7
 800b5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b600:	4770      	bx	lr

0800b602 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b602:	b480      	push	{r7}
 800b604:	b085      	sub	sp, #20
 800b606:	af00      	add	r7, sp, #0
 800b608:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b614:	699b      	ldr	r3, [r3, #24]
 800b616:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b61e:	69db      	ldr	r3, [r3, #28]
 800b620:	68ba      	ldr	r2, [r7, #8]
 800b622:	4013      	ands	r3, r2
 800b624:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	0c1b      	lsrs	r3, r3, #16
}
 800b62a:	4618      	mov	r0, r3
 800b62c:	3714      	adds	r7, #20
 800b62e:	46bd      	mov	sp, r7
 800b630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b634:	4770      	bx	lr

0800b636 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800b636:	b480      	push	{r7}
 800b638:	b085      	sub	sp, #20
 800b63a:	af00      	add	r7, sp, #0
 800b63c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b648:	699b      	ldr	r3, [r3, #24]
 800b64a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b652:	69db      	ldr	r3, [r3, #28]
 800b654:	68ba      	ldr	r2, [r7, #8]
 800b656:	4013      	ands	r3, r2
 800b658:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	b29b      	uxth	r3, r3
}
 800b65e:	4618      	mov	r0, r3
 800b660:	3714      	adds	r7, #20
 800b662:	46bd      	mov	sp, r7
 800b664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b668:	4770      	bx	lr

0800b66a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b66a:	b480      	push	{r7}
 800b66c:	b085      	sub	sp, #20
 800b66e:	af00      	add	r7, sp, #0
 800b670:	6078      	str	r0, [r7, #4]
 800b672:	460b      	mov	r3, r1
 800b674:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b67a:	78fb      	ldrb	r3, [r7, #3]
 800b67c:	015a      	lsls	r2, r3, #5
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	4413      	add	r3, r2
 800b682:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b686:	689b      	ldr	r3, [r3, #8]
 800b688:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b690:	695b      	ldr	r3, [r3, #20]
 800b692:	68ba      	ldr	r2, [r7, #8]
 800b694:	4013      	ands	r3, r2
 800b696:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b698:	68bb      	ldr	r3, [r7, #8]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	3714      	adds	r7, #20
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a4:	4770      	bx	lr

0800b6a6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b6a6:	b480      	push	{r7}
 800b6a8:	b087      	sub	sp, #28
 800b6aa:	af00      	add	r7, sp, #0
 800b6ac:	6078      	str	r0, [r7, #4]
 800b6ae:	460b      	mov	r3, r1
 800b6b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6bc:	691b      	ldr	r3, [r3, #16]
 800b6be:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6c8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b6ca:	78fb      	ldrb	r3, [r7, #3]
 800b6cc:	f003 030f 	and.w	r3, r3, #15
 800b6d0:	68fa      	ldr	r2, [r7, #12]
 800b6d2:	fa22 f303 	lsr.w	r3, r2, r3
 800b6d6:	01db      	lsls	r3, r3, #7
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	693a      	ldr	r2, [r7, #16]
 800b6dc:	4313      	orrs	r3, r2
 800b6de:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b6e0:	78fb      	ldrb	r3, [r7, #3]
 800b6e2:	015a      	lsls	r2, r3, #5
 800b6e4:	697b      	ldr	r3, [r7, #20]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ec:	689b      	ldr	r3, [r3, #8]
 800b6ee:	693a      	ldr	r2, [r7, #16]
 800b6f0:	4013      	ands	r3, r2
 800b6f2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b6f4:	68bb      	ldr	r3, [r7, #8]
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	371c      	adds	r7, #28
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr

0800b702 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b702:	b480      	push	{r7}
 800b704:	b083      	sub	sp, #12
 800b706:	af00      	add	r7, sp, #0
 800b708:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	695b      	ldr	r3, [r3, #20]
 800b70e:	f003 0301 	and.w	r3, r3, #1
}
 800b712:	4618      	mov	r0, r3
 800b714:	370c      	adds	r7, #12
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr

0800b71e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800b71e:	b480      	push	{r7}
 800b720:	b085      	sub	sp, #20
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b738:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b73c:	f023 0307 	bic.w	r3, r3, #7
 800b740:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b748:	685b      	ldr	r3, [r3, #4]
 800b74a:	68fa      	ldr	r2, [r7, #12]
 800b74c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b750:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b754:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b756:	2300      	movs	r3, #0
}
 800b758:	4618      	mov	r0, r3
 800b75a:	3714      	adds	r7, #20
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800b764:	b480      	push	{r7}
 800b766:	b087      	sub	sp, #28
 800b768:	af00      	add	r7, sp, #0
 800b76a:	60f8      	str	r0, [r7, #12]
 800b76c:	460b      	mov	r3, r1
 800b76e:	607a      	str	r2, [r7, #4]
 800b770:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	333c      	adds	r3, #60	; 0x3c
 800b77a:	3304      	adds	r3, #4
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b780:	693b      	ldr	r3, [r7, #16]
 800b782:	4a26      	ldr	r2, [pc, #152]	; (800b81c <USB_EP0_OutStart+0xb8>)
 800b784:	4293      	cmp	r3, r2
 800b786:	d90a      	bls.n	800b79e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b788:	697b      	ldr	r3, [r7, #20]
 800b78a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b798:	d101      	bne.n	800b79e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b79a:	2300      	movs	r3, #0
 800b79c:	e037      	b.n	800b80e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7b0:	691b      	ldr	r3, [r3, #16]
 800b7b2:	697a      	ldr	r2, [r7, #20]
 800b7b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b7bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b7be:	697b      	ldr	r3, [r7, #20]
 800b7c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7c4:	691b      	ldr	r3, [r3, #16]
 800b7c6:	697a      	ldr	r2, [r7, #20]
 800b7c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7cc:	f043 0318 	orr.w	r3, r3, #24
 800b7d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b7d2:	697b      	ldr	r3, [r7, #20]
 800b7d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	697a      	ldr	r2, [r7, #20]
 800b7dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7e0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b7e4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b7e6:	7afb      	ldrb	r3, [r7, #11]
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d10f      	bne.n	800b80c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b7ec:	697b      	ldr	r3, [r7, #20]
 800b7ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	697a      	ldr	r2, [r7, #20]
 800b802:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b806:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b80a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b80c:	2300      	movs	r3, #0
}
 800b80e:	4618      	mov	r0, r3
 800b810:	371c      	adds	r7, #28
 800b812:	46bd      	mov	sp, r7
 800b814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b818:	4770      	bx	lr
 800b81a:	bf00      	nop
 800b81c:	4f54300a 	.word	0x4f54300a

0800b820 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b820:	b480      	push	{r7}
 800b822:	b085      	sub	sp, #20
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b828:	2300      	movs	r3, #0
 800b82a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	3301      	adds	r3, #1
 800b830:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	4a13      	ldr	r2, [pc, #76]	; (800b884 <USB_CoreReset+0x64>)
 800b836:	4293      	cmp	r3, r2
 800b838:	d901      	bls.n	800b83e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b83a:	2303      	movs	r3, #3
 800b83c:	e01b      	b.n	800b876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	691b      	ldr	r3, [r3, #16]
 800b842:	2b00      	cmp	r3, #0
 800b844:	daf2      	bge.n	800b82c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b846:	2300      	movs	r3, #0
 800b848:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	691b      	ldr	r3, [r3, #16]
 800b84e:	f043 0201 	orr.w	r2, r3, #1
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	3301      	adds	r3, #1
 800b85a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	4a09      	ldr	r2, [pc, #36]	; (800b884 <USB_CoreReset+0x64>)
 800b860:	4293      	cmp	r3, r2
 800b862:	d901      	bls.n	800b868 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b864:	2303      	movs	r3, #3
 800b866:	e006      	b.n	800b876 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	691b      	ldr	r3, [r3, #16]
 800b86c:	f003 0301 	and.w	r3, r3, #1
 800b870:	2b01      	cmp	r3, #1
 800b872:	d0f0      	beq.n	800b856 <USB_CoreReset+0x36>

  return HAL_OK;
 800b874:	2300      	movs	r3, #0
}
 800b876:	4618      	mov	r0, r3
 800b878:	3714      	adds	r7, #20
 800b87a:	46bd      	mov	sp, r7
 800b87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b880:	4770      	bx	lr
 800b882:	bf00      	nop
 800b884:	00030d40 	.word	0x00030d40

0800b888 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800b88c:	4904      	ldr	r1, [pc, #16]	; (800b8a0 <MX_FATFS_Init+0x18>)
 800b88e:	4805      	ldr	r0, [pc, #20]	; (800b8a4 <MX_FATFS_Init+0x1c>)
 800b890:	f002 fa68 	bl	800dd64 <FATFS_LinkDriver>
 800b894:	4603      	mov	r3, r0
 800b896:	461a      	mov	r2, r3
 800b898:	4b03      	ldr	r3, [pc, #12]	; (800b8a8 <MX_FATFS_Init+0x20>)
 800b89a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800b89c:	bf00      	nop
 800b89e:	bd80      	pop	{r7, pc}
 800b8a0:	20000650 	.word	0x20000650
 800b8a4:	080124bc 	.word	0x080124bc
 800b8a8:	2000064c 	.word	0x2000064c

0800b8ac <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800b8b6:	f000 f896 	bl	800b9e6 <BSP_SD_IsDetected>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d001      	beq.n	800b8c4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800b8c0:	2301      	movs	r3, #1
 800b8c2:	e012      	b.n	800b8ea <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800b8c4:	480b      	ldr	r0, [pc, #44]	; (800b8f4 <BSP_SD_Init+0x48>)
 800b8c6:	f7fa ff55 	bl	8006774 <HAL_SD_Init>
 800b8ca:	4603      	mov	r3, r0
 800b8cc:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800b8ce:	79fb      	ldrb	r3, [r7, #7]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d109      	bne.n	800b8e8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800b8d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800b8d8:	4806      	ldr	r0, [pc, #24]	; (800b8f4 <BSP_SD_Init+0x48>)
 800b8da:	f7fb fd23 	bl	8007324 <HAL_SD_ConfigWideBusOperation>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d001      	beq.n	800b8e8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800b8e4:	2301      	movs	r3, #1
 800b8e6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800b8e8:	79fb      	ldrb	r3, [r7, #7]
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3708      	adds	r7, #8
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	20000350 	.word	0x20000350

0800b8f8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	b086      	sub	sp, #24
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	60f8      	str	r0, [r7, #12]
 800b900:	60b9      	str	r1, [r7, #8]
 800b902:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b904:	2300      	movs	r3, #0
 800b906:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	68ba      	ldr	r2, [r7, #8]
 800b90c:	68f9      	ldr	r1, [r7, #12]
 800b90e:	4806      	ldr	r0, [pc, #24]	; (800b928 <BSP_SD_ReadBlocks_DMA+0x30>)
 800b910:	f7fa ffe0 	bl	80068d4 <HAL_SD_ReadBlocks_DMA>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d001      	beq.n	800b91e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b91a:	2301      	movs	r3, #1
 800b91c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b91e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b920:	4618      	mov	r0, r3
 800b922:	3718      	adds	r7, #24
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}
 800b928:	20000350 	.word	0x20000350

0800b92c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b086      	sub	sp, #24
 800b930:	af00      	add	r7, sp, #0
 800b932:	60f8      	str	r0, [r7, #12]
 800b934:	60b9      	str	r1, [r7, #8]
 800b936:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800b938:	2300      	movs	r3, #0
 800b93a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	68ba      	ldr	r2, [r7, #8]
 800b940:	68f9      	ldr	r1, [r7, #12]
 800b942:	4806      	ldr	r0, [pc, #24]	; (800b95c <BSP_SD_WriteBlocks_DMA+0x30>)
 800b944:	f7fb f8a8 	bl	8006a98 <HAL_SD_WriteBlocks_DMA>
 800b948:	4603      	mov	r3, r0
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	d001      	beq.n	800b952 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800b94e:	2301      	movs	r3, #1
 800b950:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800b952:	7dfb      	ldrb	r3, [r7, #23]
}
 800b954:	4618      	mov	r0, r3
 800b956:	3718      	adds	r7, #24
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd80      	pop	{r7, pc}
 800b95c:	20000350 	.word	0x20000350

0800b960 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800b964:	4805      	ldr	r0, [pc, #20]	; (800b97c <BSP_SD_GetCardState+0x1c>)
 800b966:	f7fb fd77 	bl	8007458 <HAL_SD_GetCardState>
 800b96a:	4603      	mov	r3, r0
 800b96c:	2b04      	cmp	r3, #4
 800b96e:	bf14      	ite	ne
 800b970:	2301      	movne	r3, #1
 800b972:	2300      	moveq	r3, #0
 800b974:	b2db      	uxtb	r3, r3
}
 800b976:	4618      	mov	r0, r3
 800b978:	bd80      	pop	{r7, pc}
 800b97a:	bf00      	nop
 800b97c:	20000350 	.word	0x20000350

0800b980 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800b988:	6879      	ldr	r1, [r7, #4]
 800b98a:	4803      	ldr	r0, [pc, #12]	; (800b998 <BSP_SD_GetCardInfo+0x18>)
 800b98c:	f7fb fc9e 	bl	80072cc <HAL_SD_GetCardInfo>
}
 800b990:	bf00      	nop
 800b992:	3708      	adds	r7, #8
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	20000350 	.word	0x20000350

0800b99c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800b99c:	b580      	push	{r7, lr}
 800b99e:	b082      	sub	sp, #8
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800b9a4:	f000 f818 	bl	800b9d8 <BSP_SD_AbortCallback>
}
 800b9a8:	bf00      	nop
 800b9aa:	3708      	adds	r7, #8
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}

0800b9b0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
 800b9b6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800b9b8:	f000 f9a8 	bl	800bd0c <BSP_SD_WriteCpltCallback>
}
 800b9bc:	bf00      	nop
 800b9be:	3708      	adds	r7, #8
 800b9c0:	46bd      	mov	sp, r7
 800b9c2:	bd80      	pop	{r7, pc}

0800b9c4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800b9c4:	b580      	push	{r7, lr}
 800b9c6:	b082      	sub	sp, #8
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800b9cc:	f000 f9aa 	bl	800bd24 <BSP_SD_ReadCpltCallback>
}
 800b9d0:	bf00      	nop
 800b9d2:	3708      	adds	r7, #8
 800b9d4:	46bd      	mov	sp, r7
 800b9d6:	bd80      	pop	{r7, pc}

0800b9d8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	af00      	add	r7, sp, #0

}
 800b9dc:	bf00      	nop
 800b9de:	46bd      	mov	sp, r7
 800b9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e4:	4770      	bx	lr

0800b9e6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800b9e6:	b580      	push	{r7, lr}
 800b9e8:	b082      	sub	sp, #8
 800b9ea:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800b9f0:	f000 f80c 	bl	800ba0c <BSP_PlatformIsDetected>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d101      	bne.n	800b9fe <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800b9fa:	2300      	movs	r3, #0
 800b9fc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800b9fe:	79fb      	ldrb	r3, [r7, #7]
 800ba00:	b2db      	uxtb	r3, r3
}
 800ba02:	4618      	mov	r0, r3
 800ba04:	3708      	adds	r7, #8
 800ba06:	46bd      	mov	sp, r7
 800ba08:	bd80      	pop	{r7, pc}
	...

0800ba0c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ba0c:	b580      	push	{r7, lr}
 800ba0e:	b082      	sub	sp, #8
 800ba10:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ba12:	2301      	movs	r3, #1
 800ba14:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ba16:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ba1a:	4806      	ldr	r0, [pc, #24]	; (800ba34 <BSP_PlatformIsDetected+0x28>)
 800ba1c:	f7f8 f80e 	bl	8003a3c <HAL_GPIO_ReadPin>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d001      	beq.n	800ba2a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ba26:	2300      	movs	r3, #0
 800ba28:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ba2a:	79fb      	ldrb	r3, [r7, #7]
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3708      	adds	r7, #8
 800ba30:	46bd      	mov	sp, r7
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	40020400 	.word	0x40020400

0800ba38 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800ba40:	f7f7 f910 	bl	8002c64 <HAL_GetTick>
 800ba44:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800ba46:	e006      	b.n	800ba56 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800ba48:	f7ff ff8a 	bl	800b960 <BSP_SD_GetCardState>
 800ba4c:	4603      	mov	r3, r0
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d101      	bne.n	800ba56 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800ba52:	2300      	movs	r3, #0
 800ba54:	e009      	b.n	800ba6a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800ba56:	f7f7 f905 	bl	8002c64 <HAL_GetTick>
 800ba5a:	4602      	mov	r2, r0
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	1ad3      	subs	r3, r2, r3
 800ba60:	687a      	ldr	r2, [r7, #4]
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d8f0      	bhi.n	800ba48 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800ba66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3710      	adds	r7, #16
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
	...

0800ba74 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	b082      	sub	sp, #8
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	4603      	mov	r3, r0
 800ba7c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800ba7e:	4b0b      	ldr	r3, [pc, #44]	; (800baac <SD_CheckStatus+0x38>)
 800ba80:	2201      	movs	r2, #1
 800ba82:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800ba84:	f7ff ff6c 	bl	800b960 <BSP_SD_GetCardState>
 800ba88:	4603      	mov	r3, r0
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d107      	bne.n	800ba9e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800ba8e:	4b07      	ldr	r3, [pc, #28]	; (800baac <SD_CheckStatus+0x38>)
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	b2db      	uxtb	r3, r3
 800ba94:	f023 0301 	bic.w	r3, r3, #1
 800ba98:	b2da      	uxtb	r2, r3
 800ba9a:	4b04      	ldr	r3, [pc, #16]	; (800baac <SD_CheckStatus+0x38>)
 800ba9c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800ba9e:	4b03      	ldr	r3, [pc, #12]	; (800baac <SD_CheckStatus+0x38>)
 800baa0:	781b      	ldrb	r3, [r3, #0]
 800baa2:	b2db      	uxtb	r3, r3
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	3708      	adds	r7, #8
 800baa8:	46bd      	mov	sp, r7
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	20000009 	.word	0x20000009

0800bab0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	4603      	mov	r3, r0
 800bab8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800baba:	f7ff fef7 	bl	800b8ac <BSP_SD_Init>
 800babe:	4603      	mov	r3, r0
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d107      	bne.n	800bad4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800bac4:	79fb      	ldrb	r3, [r7, #7]
 800bac6:	4618      	mov	r0, r3
 800bac8:	f7ff ffd4 	bl	800ba74 <SD_CheckStatus>
 800bacc:	4603      	mov	r3, r0
 800bace:	461a      	mov	r2, r3
 800bad0:	4b04      	ldr	r3, [pc, #16]	; (800bae4 <SD_initialize+0x34>)
 800bad2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800bad4:	4b03      	ldr	r3, [pc, #12]	; (800bae4 <SD_initialize+0x34>)
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	b2db      	uxtb	r3, r3
}
 800bada:	4618      	mov	r0, r3
 800badc:	3708      	adds	r7, #8
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
 800bae2:	bf00      	nop
 800bae4:	20000009 	.word	0x20000009

0800bae8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	4603      	mov	r3, r0
 800baf0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800baf2:	79fb      	ldrb	r3, [r7, #7]
 800baf4:	4618      	mov	r0, r3
 800baf6:	f7ff ffbd 	bl	800ba74 <SD_CheckStatus>
 800bafa:	4603      	mov	r3, r0
}
 800bafc:	4618      	mov	r0, r3
 800bafe:	3708      	adds	r7, #8
 800bb00:	46bd      	mov	sp, r7
 800bb02:	bd80      	pop	{r7, pc}

0800bb04 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800bb04:	b580      	push	{r7, lr}
 800bb06:	b086      	sub	sp, #24
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	60b9      	str	r1, [r7, #8]
 800bb0c:	607a      	str	r2, [r7, #4]
 800bb0e:	603b      	str	r3, [r7, #0]
 800bb10:	4603      	mov	r3, r0
 800bb12:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bb14:	2301      	movs	r3, #1
 800bb16:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bb18:	f247 5030 	movw	r0, #30000	; 0x7530
 800bb1c:	f7ff ff8c 	bl	800ba38 <SD_CheckStatusWithTimeout>
 800bb20:	4603      	mov	r3, r0
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	da01      	bge.n	800bb2a <SD_read+0x26>
  {
    return res;
 800bb26:	7dfb      	ldrb	r3, [r7, #23]
 800bb28:	e03b      	b.n	800bba2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800bb2a:	683a      	ldr	r2, [r7, #0]
 800bb2c:	6879      	ldr	r1, [r7, #4]
 800bb2e:	68b8      	ldr	r0, [r7, #8]
 800bb30:	f7ff fee2 	bl	800b8f8 <BSP_SD_ReadBlocks_DMA>
 800bb34:	4603      	mov	r3, r0
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d132      	bne.n	800bba0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800bb3a:	4b1c      	ldr	r3, [pc, #112]	; (800bbac <SD_read+0xa8>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800bb40:	f7f7 f890 	bl	8002c64 <HAL_GetTick>
 800bb44:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bb46:	bf00      	nop
 800bb48:	4b18      	ldr	r3, [pc, #96]	; (800bbac <SD_read+0xa8>)
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d108      	bne.n	800bb62 <SD_read+0x5e>
 800bb50:	f7f7 f888 	bl	8002c64 <HAL_GetTick>
 800bb54:	4602      	mov	r2, r0
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	1ad3      	subs	r3, r2, r3
 800bb5a:	f247 522f 	movw	r2, #29999	; 0x752f
 800bb5e:	4293      	cmp	r3, r2
 800bb60:	d9f2      	bls.n	800bb48 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800bb62:	4b12      	ldr	r3, [pc, #72]	; (800bbac <SD_read+0xa8>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d102      	bne.n	800bb70 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800bb6a:	2301      	movs	r3, #1
 800bb6c:	75fb      	strb	r3, [r7, #23]
 800bb6e:	e017      	b.n	800bba0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800bb70:	4b0e      	ldr	r3, [pc, #56]	; (800bbac <SD_read+0xa8>)
 800bb72:	2200      	movs	r2, #0
 800bb74:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800bb76:	f7f7 f875 	bl	8002c64 <HAL_GetTick>
 800bb7a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bb7c:	e007      	b.n	800bb8e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bb7e:	f7ff feef 	bl	800b960 <BSP_SD_GetCardState>
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d102      	bne.n	800bb8e <SD_read+0x8a>
          {
            res = RES_OK;
 800bb88:	2300      	movs	r3, #0
 800bb8a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800bb8c:	e008      	b.n	800bba0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bb8e:	f7f7 f869 	bl	8002c64 <HAL_GetTick>
 800bb92:	4602      	mov	r2, r0
 800bb94:	693b      	ldr	r3, [r7, #16]
 800bb96:	1ad3      	subs	r3, r2, r3
 800bb98:	f247 522f 	movw	r2, #29999	; 0x752f
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d9ee      	bls.n	800bb7e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800bba0:	7dfb      	ldrb	r3, [r7, #23]
}
 800bba2:	4618      	mov	r0, r3
 800bba4:	3718      	adds	r7, #24
 800bba6:	46bd      	mov	sp, r7
 800bba8:	bd80      	pop	{r7, pc}
 800bbaa:	bf00      	nop
 800bbac:	20000658 	.word	0x20000658

0800bbb0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	60b9      	str	r1, [r7, #8]
 800bbb8:	607a      	str	r2, [r7, #4]
 800bbba:	603b      	str	r3, [r7, #0]
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800bbc0:	2301      	movs	r3, #1
 800bbc2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800bbc4:	4b24      	ldr	r3, [pc, #144]	; (800bc58 <SD_write+0xa8>)
 800bbc6:	2200      	movs	r2, #0
 800bbc8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800bbca:	f247 5030 	movw	r0, #30000	; 0x7530
 800bbce:	f7ff ff33 	bl	800ba38 <SD_CheckStatusWithTimeout>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	2b00      	cmp	r3, #0
 800bbd6:	da01      	bge.n	800bbdc <SD_write+0x2c>
  {
    return res;
 800bbd8:	7dfb      	ldrb	r3, [r7, #23]
 800bbda:	e038      	b.n	800bc4e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800bbdc:	683a      	ldr	r2, [r7, #0]
 800bbde:	6879      	ldr	r1, [r7, #4]
 800bbe0:	68b8      	ldr	r0, [r7, #8]
 800bbe2:	f7ff fea3 	bl	800b92c <BSP_SD_WriteBlocks_DMA>
 800bbe6:	4603      	mov	r3, r0
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d12f      	bne.n	800bc4c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800bbec:	f7f7 f83a 	bl	8002c64 <HAL_GetTick>
 800bbf0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800bbf2:	bf00      	nop
 800bbf4:	4b18      	ldr	r3, [pc, #96]	; (800bc58 <SD_write+0xa8>)
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	2b00      	cmp	r3, #0
 800bbfa:	d108      	bne.n	800bc0e <SD_write+0x5e>
 800bbfc:	f7f7 f832 	bl	8002c64 <HAL_GetTick>
 800bc00:	4602      	mov	r2, r0
 800bc02:	693b      	ldr	r3, [r7, #16]
 800bc04:	1ad3      	subs	r3, r2, r3
 800bc06:	f247 522f 	movw	r2, #29999	; 0x752f
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d9f2      	bls.n	800bbf4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800bc0e:	4b12      	ldr	r3, [pc, #72]	; (800bc58 <SD_write+0xa8>)
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d102      	bne.n	800bc1c <SD_write+0x6c>
      {
        res = RES_ERROR;
 800bc16:	2301      	movs	r3, #1
 800bc18:	75fb      	strb	r3, [r7, #23]
 800bc1a:	e017      	b.n	800bc4c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800bc1c:	4b0e      	ldr	r3, [pc, #56]	; (800bc58 <SD_write+0xa8>)
 800bc1e:	2200      	movs	r2, #0
 800bc20:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800bc22:	f7f7 f81f 	bl	8002c64 <HAL_GetTick>
 800bc26:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bc28:	e007      	b.n	800bc3a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800bc2a:	f7ff fe99 	bl	800b960 <BSP_SD_GetCardState>
 800bc2e:	4603      	mov	r3, r0
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d102      	bne.n	800bc3a <SD_write+0x8a>
          {
            res = RES_OK;
 800bc34:	2300      	movs	r3, #0
 800bc36:	75fb      	strb	r3, [r7, #23]
            break;
 800bc38:	e008      	b.n	800bc4c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800bc3a:	f7f7 f813 	bl	8002c64 <HAL_GetTick>
 800bc3e:	4602      	mov	r2, r0
 800bc40:	693b      	ldr	r3, [r7, #16]
 800bc42:	1ad3      	subs	r3, r2, r3
 800bc44:	f247 522f 	movw	r2, #29999	; 0x752f
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d9ee      	bls.n	800bc2a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800bc4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc4e:	4618      	mov	r0, r3
 800bc50:	3718      	adds	r7, #24
 800bc52:	46bd      	mov	sp, r7
 800bc54:	bd80      	pop	{r7, pc}
 800bc56:	bf00      	nop
 800bc58:	20000654 	.word	0x20000654

0800bc5c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800bc5c:	b580      	push	{r7, lr}
 800bc5e:	b08c      	sub	sp, #48	; 0x30
 800bc60:	af00      	add	r7, sp, #0
 800bc62:	4603      	mov	r3, r0
 800bc64:	603a      	str	r2, [r7, #0]
 800bc66:	71fb      	strb	r3, [r7, #7]
 800bc68:	460b      	mov	r3, r1
 800bc6a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800bc6c:	2301      	movs	r3, #1
 800bc6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800bc72:	4b25      	ldr	r3, [pc, #148]	; (800bd08 <SD_ioctl+0xac>)
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	b2db      	uxtb	r3, r3
 800bc78:	f003 0301 	and.w	r3, r3, #1
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d001      	beq.n	800bc84 <SD_ioctl+0x28>
 800bc80:	2303      	movs	r3, #3
 800bc82:	e03c      	b.n	800bcfe <SD_ioctl+0xa2>

  switch (cmd)
 800bc84:	79bb      	ldrb	r3, [r7, #6]
 800bc86:	2b03      	cmp	r3, #3
 800bc88:	d834      	bhi.n	800bcf4 <SD_ioctl+0x98>
 800bc8a:	a201      	add	r2, pc, #4	; (adr r2, 800bc90 <SD_ioctl+0x34>)
 800bc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc90:	0800bca1 	.word	0x0800bca1
 800bc94:	0800bca9 	.word	0x0800bca9
 800bc98:	0800bcc1 	.word	0x0800bcc1
 800bc9c:	0800bcdb 	.word	0x0800bcdb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800bca0:	2300      	movs	r3, #0
 800bca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bca6:	e028      	b.n	800bcfa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800bca8:	f107 030c 	add.w	r3, r7, #12
 800bcac:	4618      	mov	r0, r3
 800bcae:	f7ff fe67 	bl	800b980 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800bcb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcb4:	683b      	ldr	r3, [r7, #0]
 800bcb6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bcb8:	2300      	movs	r3, #0
 800bcba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bcbe:	e01c      	b.n	800bcfa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bcc0:	f107 030c 	add.w	r3, r7, #12
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f7ff fe5b 	bl	800b980 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800bcca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bccc:	b29a      	uxth	r2, r3
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bcd8:	e00f      	b.n	800bcfa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800bcda:	f107 030c 	add.w	r3, r7, #12
 800bcde:	4618      	mov	r0, r3
 800bce0:	f7ff fe4e 	bl	800b980 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800bce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bce6:	0a5a      	lsrs	r2, r3, #9
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800bcec:	2300      	movs	r3, #0
 800bcee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800bcf2:	e002      	b.n	800bcfa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800bcf4:	2304      	movs	r3, #4
 800bcf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800bcfa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800bcfe:	4618      	mov	r0, r3
 800bd00:	3730      	adds	r7, #48	; 0x30
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}
 800bd06:	bf00      	nop
 800bd08:	20000009 	.word	0x20000009

0800bd0c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800bd10:	4b03      	ldr	r3, [pc, #12]	; (800bd20 <BSP_SD_WriteCpltCallback+0x14>)
 800bd12:	2201      	movs	r2, #1
 800bd14:	601a      	str	r2, [r3, #0]
}
 800bd16:	bf00      	nop
 800bd18:	46bd      	mov	sp, r7
 800bd1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd1e:	4770      	bx	lr
 800bd20:	20000654 	.word	0x20000654

0800bd24 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800bd24:	b480      	push	{r7}
 800bd26:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800bd28:	4b03      	ldr	r3, [pc, #12]	; (800bd38 <BSP_SD_ReadCpltCallback+0x14>)
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	601a      	str	r2, [r3, #0]
}
 800bd2e:	bf00      	nop
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr
 800bd38:	20000658 	.word	0x20000658

0800bd3c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b084      	sub	sp, #16
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
 800bd44:	460b      	mov	r3, r1
 800bd46:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bd48:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bd4c:	f002 fcf0 	bl	800e730 <USBD_static_malloc>
 800bd50:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d109      	bne.n	800bd6c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	32b0      	adds	r2, #176	; 0xb0
 800bd62:	2100      	movs	r1, #0
 800bd64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bd68:	2302      	movs	r3, #2
 800bd6a:	e0d4      	b.n	800bf16 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bd6c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bd70:	2100      	movs	r1, #0
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	f003 fa56 	bl	800f224 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	32b0      	adds	r2, #176	; 0xb0
 800bd82:	68f9      	ldr	r1, [r7, #12]
 800bd84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	32b0      	adds	r2, #176	; 0xb0
 800bd92:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	7c1b      	ldrb	r3, [r3, #16]
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d138      	bne.n	800be16 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800bda4:	4b5e      	ldr	r3, [pc, #376]	; (800bf20 <USBD_CDC_Init+0x1e4>)
 800bda6:	7819      	ldrb	r1, [r3, #0]
 800bda8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdac:	2202      	movs	r2, #2
 800bdae:	6878      	ldr	r0, [r7, #4]
 800bdb0:	f002 fb9b 	bl	800e4ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bdb4:	4b5a      	ldr	r3, [pc, #360]	; (800bf20 <USBD_CDC_Init+0x1e4>)
 800bdb6:	781b      	ldrb	r3, [r3, #0]
 800bdb8:	f003 020f 	and.w	r2, r3, #15
 800bdbc:	6879      	ldr	r1, [r7, #4]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	009b      	lsls	r3, r3, #2
 800bdc2:	4413      	add	r3, r2
 800bdc4:	009b      	lsls	r3, r3, #2
 800bdc6:	440b      	add	r3, r1
 800bdc8:	3324      	adds	r3, #36	; 0x24
 800bdca:	2201      	movs	r2, #1
 800bdcc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bdce:	4b55      	ldr	r3, [pc, #340]	; (800bf24 <USBD_CDC_Init+0x1e8>)
 800bdd0:	7819      	ldrb	r1, [r3, #0]
 800bdd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bdd6:	2202      	movs	r2, #2
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f002 fb86 	bl	800e4ea <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bdde:	4b51      	ldr	r3, [pc, #324]	; (800bf24 <USBD_CDC_Init+0x1e8>)
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	f003 020f 	and.w	r2, r3, #15
 800bde6:	6879      	ldr	r1, [r7, #4]
 800bde8:	4613      	mov	r3, r2
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	4413      	add	r3, r2
 800bdee:	009b      	lsls	r3, r3, #2
 800bdf0:	440b      	add	r3, r1
 800bdf2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800bdfa:	4b4b      	ldr	r3, [pc, #300]	; (800bf28 <USBD_CDC_Init+0x1ec>)
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	f003 020f 	and.w	r2, r3, #15
 800be02:	6879      	ldr	r1, [r7, #4]
 800be04:	4613      	mov	r3, r2
 800be06:	009b      	lsls	r3, r3, #2
 800be08:	4413      	add	r3, r2
 800be0a:	009b      	lsls	r3, r3, #2
 800be0c:	440b      	add	r3, r1
 800be0e:	3326      	adds	r3, #38	; 0x26
 800be10:	2210      	movs	r2, #16
 800be12:	801a      	strh	r2, [r3, #0]
 800be14:	e035      	b.n	800be82 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800be16:	4b42      	ldr	r3, [pc, #264]	; (800bf20 <USBD_CDC_Init+0x1e4>)
 800be18:	7819      	ldrb	r1, [r3, #0]
 800be1a:	2340      	movs	r3, #64	; 0x40
 800be1c:	2202      	movs	r2, #2
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f002 fb63 	bl	800e4ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800be24:	4b3e      	ldr	r3, [pc, #248]	; (800bf20 <USBD_CDC_Init+0x1e4>)
 800be26:	781b      	ldrb	r3, [r3, #0]
 800be28:	f003 020f 	and.w	r2, r3, #15
 800be2c:	6879      	ldr	r1, [r7, #4]
 800be2e:	4613      	mov	r3, r2
 800be30:	009b      	lsls	r3, r3, #2
 800be32:	4413      	add	r3, r2
 800be34:	009b      	lsls	r3, r3, #2
 800be36:	440b      	add	r3, r1
 800be38:	3324      	adds	r3, #36	; 0x24
 800be3a:	2201      	movs	r2, #1
 800be3c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800be3e:	4b39      	ldr	r3, [pc, #228]	; (800bf24 <USBD_CDC_Init+0x1e8>)
 800be40:	7819      	ldrb	r1, [r3, #0]
 800be42:	2340      	movs	r3, #64	; 0x40
 800be44:	2202      	movs	r2, #2
 800be46:	6878      	ldr	r0, [r7, #4]
 800be48:	f002 fb4f 	bl	800e4ea <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800be4c:	4b35      	ldr	r3, [pc, #212]	; (800bf24 <USBD_CDC_Init+0x1e8>)
 800be4e:	781b      	ldrb	r3, [r3, #0]
 800be50:	f003 020f 	and.w	r2, r3, #15
 800be54:	6879      	ldr	r1, [r7, #4]
 800be56:	4613      	mov	r3, r2
 800be58:	009b      	lsls	r3, r3, #2
 800be5a:	4413      	add	r3, r2
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	440b      	add	r3, r1
 800be60:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800be64:	2201      	movs	r2, #1
 800be66:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800be68:	4b2f      	ldr	r3, [pc, #188]	; (800bf28 <USBD_CDC_Init+0x1ec>)
 800be6a:	781b      	ldrb	r3, [r3, #0]
 800be6c:	f003 020f 	and.w	r2, r3, #15
 800be70:	6879      	ldr	r1, [r7, #4]
 800be72:	4613      	mov	r3, r2
 800be74:	009b      	lsls	r3, r3, #2
 800be76:	4413      	add	r3, r2
 800be78:	009b      	lsls	r3, r3, #2
 800be7a:	440b      	add	r3, r1
 800be7c:	3326      	adds	r3, #38	; 0x26
 800be7e:	2210      	movs	r2, #16
 800be80:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800be82:	4b29      	ldr	r3, [pc, #164]	; (800bf28 <USBD_CDC_Init+0x1ec>)
 800be84:	7819      	ldrb	r1, [r3, #0]
 800be86:	2308      	movs	r3, #8
 800be88:	2203      	movs	r2, #3
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f002 fb2d 	bl	800e4ea <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800be90:	4b25      	ldr	r3, [pc, #148]	; (800bf28 <USBD_CDC_Init+0x1ec>)
 800be92:	781b      	ldrb	r3, [r3, #0]
 800be94:	f003 020f 	and.w	r2, r3, #15
 800be98:	6879      	ldr	r1, [r7, #4]
 800be9a:	4613      	mov	r3, r2
 800be9c:	009b      	lsls	r3, r3, #2
 800be9e:	4413      	add	r3, r2
 800bea0:	009b      	lsls	r3, r3, #2
 800bea2:	440b      	add	r3, r1
 800bea4:	3324      	adds	r3, #36	; 0x24
 800bea6:	2201      	movs	r2, #1
 800bea8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	2200      	movs	r2, #0
 800beae:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800beb8:	687a      	ldr	r2, [r7, #4]
 800beba:	33b0      	adds	r3, #176	; 0xb0
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4413      	add	r3, r2
 800bec0:	685b      	ldr	r3, [r3, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	2200      	movs	r2, #0
 800beca:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2200      	movs	r2, #0
 800bed2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d101      	bne.n	800bee4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bee0:	2302      	movs	r3, #2
 800bee2:	e018      	b.n	800bf16 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	7c1b      	ldrb	r3, [r3, #16]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d10a      	bne.n	800bf02 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800beec:	4b0d      	ldr	r3, [pc, #52]	; (800bf24 <USBD_CDC_Init+0x1e8>)
 800beee:	7819      	ldrb	r1, [r3, #0]
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800befa:	6878      	ldr	r0, [r7, #4]
 800befc:	f002 fbe4 	bl	800e6c8 <USBD_LL_PrepareReceive>
 800bf00:	e008      	b.n	800bf14 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf02:	4b08      	ldr	r3, [pc, #32]	; (800bf24 <USBD_CDC_Init+0x1e8>)
 800bf04:	7819      	ldrb	r1, [r3, #0]
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf0c:	2340      	movs	r3, #64	; 0x40
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f002 fbda 	bl	800e6c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3710      	adds	r7, #16
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	20000093 	.word	0x20000093
 800bf24:	20000094 	.word	0x20000094
 800bf28:	20000095 	.word	0x20000095

0800bf2c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
 800bf34:	460b      	mov	r3, r1
 800bf36:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bf38:	4b3a      	ldr	r3, [pc, #232]	; (800c024 <USBD_CDC_DeInit+0xf8>)
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	4619      	mov	r1, r3
 800bf3e:	6878      	ldr	r0, [r7, #4]
 800bf40:	f002 faf9 	bl	800e536 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bf44:	4b37      	ldr	r3, [pc, #220]	; (800c024 <USBD_CDC_DeInit+0xf8>)
 800bf46:	781b      	ldrb	r3, [r3, #0]
 800bf48:	f003 020f 	and.w	r2, r3, #15
 800bf4c:	6879      	ldr	r1, [r7, #4]
 800bf4e:	4613      	mov	r3, r2
 800bf50:	009b      	lsls	r3, r3, #2
 800bf52:	4413      	add	r3, r2
 800bf54:	009b      	lsls	r3, r3, #2
 800bf56:	440b      	add	r3, r1
 800bf58:	3324      	adds	r3, #36	; 0x24
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bf5e:	4b32      	ldr	r3, [pc, #200]	; (800c028 <USBD_CDC_DeInit+0xfc>)
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	4619      	mov	r1, r3
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f002 fae6 	bl	800e536 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bf6a:	4b2f      	ldr	r3, [pc, #188]	; (800c028 <USBD_CDC_DeInit+0xfc>)
 800bf6c:	781b      	ldrb	r3, [r3, #0]
 800bf6e:	f003 020f 	and.w	r2, r3, #15
 800bf72:	6879      	ldr	r1, [r7, #4]
 800bf74:	4613      	mov	r3, r2
 800bf76:	009b      	lsls	r3, r3, #2
 800bf78:	4413      	add	r3, r2
 800bf7a:	009b      	lsls	r3, r3, #2
 800bf7c:	440b      	add	r3, r1
 800bf7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bf82:	2200      	movs	r2, #0
 800bf84:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bf86:	4b29      	ldr	r3, [pc, #164]	; (800c02c <USBD_CDC_DeInit+0x100>)
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	4619      	mov	r1, r3
 800bf8c:	6878      	ldr	r0, [r7, #4]
 800bf8e:	f002 fad2 	bl	800e536 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bf92:	4b26      	ldr	r3, [pc, #152]	; (800c02c <USBD_CDC_DeInit+0x100>)
 800bf94:	781b      	ldrb	r3, [r3, #0]
 800bf96:	f003 020f 	and.w	r2, r3, #15
 800bf9a:	6879      	ldr	r1, [r7, #4]
 800bf9c:	4613      	mov	r3, r2
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	4413      	add	r3, r2
 800bfa2:	009b      	lsls	r3, r3, #2
 800bfa4:	440b      	add	r3, r1
 800bfa6:	3324      	adds	r3, #36	; 0x24
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bfac:	4b1f      	ldr	r3, [pc, #124]	; (800c02c <USBD_CDC_DeInit+0x100>)
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	f003 020f 	and.w	r2, r3, #15
 800bfb4:	6879      	ldr	r1, [r7, #4]
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	4413      	add	r3, r2
 800bfbc:	009b      	lsls	r3, r3, #2
 800bfbe:	440b      	add	r3, r1
 800bfc0:	3326      	adds	r3, #38	; 0x26
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	32b0      	adds	r2, #176	; 0xb0
 800bfd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d01f      	beq.n	800c018 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bfde:	687a      	ldr	r2, [r7, #4]
 800bfe0:	33b0      	adds	r3, #176	; 0xb0
 800bfe2:	009b      	lsls	r3, r3, #2
 800bfe4:	4413      	add	r3, r2
 800bfe6:	685b      	ldr	r3, [r3, #4]
 800bfe8:	685b      	ldr	r3, [r3, #4]
 800bfea:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	32b0      	adds	r2, #176	; 0xb0
 800bff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bffa:	4618      	mov	r0, r3
 800bffc:	f002 fba6 	bl	800e74c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	32b0      	adds	r2, #176	; 0xb0
 800c00a:	2100      	movs	r1, #0
 800c00c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2200      	movs	r2, #0
 800c014:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c018:	2300      	movs	r3, #0
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3708      	adds	r7, #8
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	20000093 	.word	0x20000093
 800c028:	20000094 	.word	0x20000094
 800c02c:	20000095 	.word	0x20000095

0800c030 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c030:	b580      	push	{r7, lr}
 800c032:	b086      	sub	sp, #24
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
 800c038:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	32b0      	adds	r2, #176	; 0xb0
 800c044:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c048:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c04a:	2300      	movs	r3, #0
 800c04c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c04e:	2300      	movs	r3, #0
 800c050:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c052:	2300      	movs	r3, #0
 800c054:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c056:	693b      	ldr	r3, [r7, #16]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d101      	bne.n	800c060 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c05c:	2303      	movs	r3, #3
 800c05e:	e0bf      	b.n	800c1e0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c060:	683b      	ldr	r3, [r7, #0]
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d050      	beq.n	800c10e <USBD_CDC_Setup+0xde>
 800c06c:	2b20      	cmp	r3, #32
 800c06e:	f040 80af 	bne.w	800c1d0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c072:	683b      	ldr	r3, [r7, #0]
 800c074:	88db      	ldrh	r3, [r3, #6]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d03a      	beq.n	800c0f0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c07a:	683b      	ldr	r3, [r7, #0]
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	b25b      	sxtb	r3, r3
 800c080:	2b00      	cmp	r3, #0
 800c082:	da1b      	bge.n	800c0bc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	33b0      	adds	r3, #176	; 0xb0
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	4413      	add	r3, r2
 800c092:	685b      	ldr	r3, [r3, #4]
 800c094:	689b      	ldr	r3, [r3, #8]
 800c096:	683a      	ldr	r2, [r7, #0]
 800c098:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c09a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c09c:	683a      	ldr	r2, [r7, #0]
 800c09e:	88d2      	ldrh	r2, [r2, #6]
 800c0a0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	88db      	ldrh	r3, [r3, #6]
 800c0a6:	2b07      	cmp	r3, #7
 800c0a8:	bf28      	it	cs
 800c0aa:	2307      	movcs	r3, #7
 800c0ac:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c0ae:	693b      	ldr	r3, [r7, #16]
 800c0b0:	89fa      	ldrh	r2, [r7, #14]
 800c0b2:	4619      	mov	r1, r3
 800c0b4:	6878      	ldr	r0, [r7, #4]
 800c0b6:	f001 fd89 	bl	800dbcc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c0ba:	e090      	b.n	800c1de <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c0bc:	683b      	ldr	r3, [r7, #0]
 800c0be:	785a      	ldrb	r2, [r3, #1]
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c0c6:	683b      	ldr	r3, [r7, #0]
 800c0c8:	88db      	ldrh	r3, [r3, #6]
 800c0ca:	2b3f      	cmp	r3, #63	; 0x3f
 800c0cc:	d803      	bhi.n	800c0d6 <USBD_CDC_Setup+0xa6>
 800c0ce:	683b      	ldr	r3, [r7, #0]
 800c0d0:	88db      	ldrh	r3, [r3, #6]
 800c0d2:	b2da      	uxtb	r2, r3
 800c0d4:	e000      	b.n	800c0d8 <USBD_CDC_Setup+0xa8>
 800c0d6:	2240      	movs	r2, #64	; 0x40
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c0de:	6939      	ldr	r1, [r7, #16]
 800c0e0:	693b      	ldr	r3, [r7, #16]
 800c0e2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c0e6:	461a      	mov	r2, r3
 800c0e8:	6878      	ldr	r0, [r7, #4]
 800c0ea:	f001 fd9b 	bl	800dc24 <USBD_CtlPrepareRx>
      break;
 800c0ee:	e076      	b.n	800c1de <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0f6:	687a      	ldr	r2, [r7, #4]
 800c0f8:	33b0      	adds	r3, #176	; 0xb0
 800c0fa:	009b      	lsls	r3, r3, #2
 800c0fc:	4413      	add	r3, r2
 800c0fe:	685b      	ldr	r3, [r3, #4]
 800c100:	689b      	ldr	r3, [r3, #8]
 800c102:	683a      	ldr	r2, [r7, #0]
 800c104:	7850      	ldrb	r0, [r2, #1]
 800c106:	2200      	movs	r2, #0
 800c108:	6839      	ldr	r1, [r7, #0]
 800c10a:	4798      	blx	r3
      break;
 800c10c:	e067      	b.n	800c1de <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c10e:	683b      	ldr	r3, [r7, #0]
 800c110:	785b      	ldrb	r3, [r3, #1]
 800c112:	2b0b      	cmp	r3, #11
 800c114:	d851      	bhi.n	800c1ba <USBD_CDC_Setup+0x18a>
 800c116:	a201      	add	r2, pc, #4	; (adr r2, 800c11c <USBD_CDC_Setup+0xec>)
 800c118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c11c:	0800c14d 	.word	0x0800c14d
 800c120:	0800c1c9 	.word	0x0800c1c9
 800c124:	0800c1bb 	.word	0x0800c1bb
 800c128:	0800c1bb 	.word	0x0800c1bb
 800c12c:	0800c1bb 	.word	0x0800c1bb
 800c130:	0800c1bb 	.word	0x0800c1bb
 800c134:	0800c1bb 	.word	0x0800c1bb
 800c138:	0800c1bb 	.word	0x0800c1bb
 800c13c:	0800c1bb 	.word	0x0800c1bb
 800c140:	0800c1bb 	.word	0x0800c1bb
 800c144:	0800c177 	.word	0x0800c177
 800c148:	0800c1a1 	.word	0x0800c1a1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c152:	b2db      	uxtb	r3, r3
 800c154:	2b03      	cmp	r3, #3
 800c156:	d107      	bne.n	800c168 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c158:	f107 030a 	add.w	r3, r7, #10
 800c15c:	2202      	movs	r2, #2
 800c15e:	4619      	mov	r1, r3
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f001 fd33 	bl	800dbcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c166:	e032      	b.n	800c1ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c168:	6839      	ldr	r1, [r7, #0]
 800c16a:	6878      	ldr	r0, [r7, #4]
 800c16c:	f001 fcbd 	bl	800daea <USBD_CtlError>
            ret = USBD_FAIL;
 800c170:	2303      	movs	r3, #3
 800c172:	75fb      	strb	r3, [r7, #23]
          break;
 800c174:	e02b      	b.n	800c1ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c17c:	b2db      	uxtb	r3, r3
 800c17e:	2b03      	cmp	r3, #3
 800c180:	d107      	bne.n	800c192 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c182:	f107 030d 	add.w	r3, r7, #13
 800c186:	2201      	movs	r2, #1
 800c188:	4619      	mov	r1, r3
 800c18a:	6878      	ldr	r0, [r7, #4]
 800c18c:	f001 fd1e 	bl	800dbcc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c190:	e01d      	b.n	800c1ce <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c192:	6839      	ldr	r1, [r7, #0]
 800c194:	6878      	ldr	r0, [r7, #4]
 800c196:	f001 fca8 	bl	800daea <USBD_CtlError>
            ret = USBD_FAIL;
 800c19a:	2303      	movs	r3, #3
 800c19c:	75fb      	strb	r3, [r7, #23]
          break;
 800c19e:	e016      	b.n	800c1ce <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1a6:	b2db      	uxtb	r3, r3
 800c1a8:	2b03      	cmp	r3, #3
 800c1aa:	d00f      	beq.n	800c1cc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c1ac:	6839      	ldr	r1, [r7, #0]
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f001 fc9b 	bl	800daea <USBD_CtlError>
            ret = USBD_FAIL;
 800c1b4:	2303      	movs	r3, #3
 800c1b6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c1b8:	e008      	b.n	800c1cc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c1ba:	6839      	ldr	r1, [r7, #0]
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	f001 fc94 	bl	800daea <USBD_CtlError>
          ret = USBD_FAIL;
 800c1c2:	2303      	movs	r3, #3
 800c1c4:	75fb      	strb	r3, [r7, #23]
          break;
 800c1c6:	e002      	b.n	800c1ce <USBD_CDC_Setup+0x19e>
          break;
 800c1c8:	bf00      	nop
 800c1ca:	e008      	b.n	800c1de <USBD_CDC_Setup+0x1ae>
          break;
 800c1cc:	bf00      	nop
      }
      break;
 800c1ce:	e006      	b.n	800c1de <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c1d0:	6839      	ldr	r1, [r7, #0]
 800c1d2:	6878      	ldr	r0, [r7, #4]
 800c1d4:	f001 fc89 	bl	800daea <USBD_CtlError>
      ret = USBD_FAIL;
 800c1d8:	2303      	movs	r3, #3
 800c1da:	75fb      	strb	r3, [r7, #23]
      break;
 800c1dc:	bf00      	nop
  }

  return (uint8_t)ret;
 800c1de:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3718      	adds	r7, #24
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b084      	sub	sp, #16
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
 800c1f0:	460b      	mov	r3, r1
 800c1f2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c1fa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	32b0      	adds	r2, #176	; 0xb0
 800c206:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	d101      	bne.n	800c212 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c20e:	2303      	movs	r3, #3
 800c210:	e065      	b.n	800c2de <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	32b0      	adds	r2, #176	; 0xb0
 800c21c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c220:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c222:	78fb      	ldrb	r3, [r7, #3]
 800c224:	f003 020f 	and.w	r2, r3, #15
 800c228:	6879      	ldr	r1, [r7, #4]
 800c22a:	4613      	mov	r3, r2
 800c22c:	009b      	lsls	r3, r3, #2
 800c22e:	4413      	add	r3, r2
 800c230:	009b      	lsls	r3, r3, #2
 800c232:	440b      	add	r3, r1
 800c234:	3318      	adds	r3, #24
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d02f      	beq.n	800c29c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c23c:	78fb      	ldrb	r3, [r7, #3]
 800c23e:	f003 020f 	and.w	r2, r3, #15
 800c242:	6879      	ldr	r1, [r7, #4]
 800c244:	4613      	mov	r3, r2
 800c246:	009b      	lsls	r3, r3, #2
 800c248:	4413      	add	r3, r2
 800c24a:	009b      	lsls	r3, r3, #2
 800c24c:	440b      	add	r3, r1
 800c24e:	3318      	adds	r3, #24
 800c250:	681a      	ldr	r2, [r3, #0]
 800c252:	78fb      	ldrb	r3, [r7, #3]
 800c254:	f003 010f 	and.w	r1, r3, #15
 800c258:	68f8      	ldr	r0, [r7, #12]
 800c25a:	460b      	mov	r3, r1
 800c25c:	00db      	lsls	r3, r3, #3
 800c25e:	440b      	add	r3, r1
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	4403      	add	r3, r0
 800c264:	3348      	adds	r3, #72	; 0x48
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	fbb2 f1f3 	udiv	r1, r2, r3
 800c26c:	fb01 f303 	mul.w	r3, r1, r3
 800c270:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c272:	2b00      	cmp	r3, #0
 800c274:	d112      	bne.n	800c29c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c276:	78fb      	ldrb	r3, [r7, #3]
 800c278:	f003 020f 	and.w	r2, r3, #15
 800c27c:	6879      	ldr	r1, [r7, #4]
 800c27e:	4613      	mov	r3, r2
 800c280:	009b      	lsls	r3, r3, #2
 800c282:	4413      	add	r3, r2
 800c284:	009b      	lsls	r3, r3, #2
 800c286:	440b      	add	r3, r1
 800c288:	3318      	adds	r3, #24
 800c28a:	2200      	movs	r2, #0
 800c28c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c28e:	78f9      	ldrb	r1, [r7, #3]
 800c290:	2300      	movs	r3, #0
 800c292:	2200      	movs	r2, #0
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f002 f9f6 	bl	800e686 <USBD_LL_Transmit>
 800c29a:	e01f      	b.n	800c2dc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c2aa:	687a      	ldr	r2, [r7, #4]
 800c2ac:	33b0      	adds	r3, #176	; 0xb0
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	4413      	add	r3, r2
 800c2b2:	685b      	ldr	r3, [r3, #4]
 800c2b4:	691b      	ldr	r3, [r3, #16]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d010      	beq.n	800c2dc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	33b0      	adds	r3, #176	; 0xb0
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	4413      	add	r3, r2
 800c2c8:	685b      	ldr	r3, [r3, #4]
 800c2ca:	691b      	ldr	r3, [r3, #16]
 800c2cc:	68ba      	ldr	r2, [r7, #8]
 800c2ce:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c2d2:	68ba      	ldr	r2, [r7, #8]
 800c2d4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c2d8:	78fa      	ldrb	r2, [r7, #3]
 800c2da:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c2dc:	2300      	movs	r3, #0
}
 800c2de:	4618      	mov	r0, r3
 800c2e0:	3710      	adds	r7, #16
 800c2e2:	46bd      	mov	sp, r7
 800c2e4:	bd80      	pop	{r7, pc}

0800c2e6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c2e6:	b580      	push	{r7, lr}
 800c2e8:	b084      	sub	sp, #16
 800c2ea:	af00      	add	r7, sp, #0
 800c2ec:	6078      	str	r0, [r7, #4]
 800c2ee:	460b      	mov	r3, r1
 800c2f0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	32b0      	adds	r2, #176	; 0xb0
 800c2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c300:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	32b0      	adds	r2, #176	; 0xb0
 800c30c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d101      	bne.n	800c318 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c314:	2303      	movs	r3, #3
 800c316:	e01a      	b.n	800c34e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c318:	78fb      	ldrb	r3, [r7, #3]
 800c31a:	4619      	mov	r1, r3
 800c31c:	6878      	ldr	r0, [r7, #4]
 800c31e:	f002 f9f4 	bl	800e70a <USBD_LL_GetRxDataSize>
 800c322:	4602      	mov	r2, r0
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c330:	687a      	ldr	r2, [r7, #4]
 800c332:	33b0      	adds	r3, #176	; 0xb0
 800c334:	009b      	lsls	r3, r3, #2
 800c336:	4413      	add	r3, r2
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	68db      	ldr	r3, [r3, #12]
 800c33c:	68fa      	ldr	r2, [r7, #12]
 800c33e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c342:	68fa      	ldr	r2, [r7, #12]
 800c344:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c348:	4611      	mov	r1, r2
 800c34a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c34c:	2300      	movs	r3, #0
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c356:	b580      	push	{r7, lr}
 800c358:	b084      	sub	sp, #16
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	32b0      	adds	r2, #176	; 0xb0
 800c368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c36c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	2b00      	cmp	r3, #0
 800c372:	d101      	bne.n	800c378 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c374:	2303      	movs	r3, #3
 800c376:	e025      	b.n	800c3c4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	33b0      	adds	r3, #176	; 0xb0
 800c382:	009b      	lsls	r3, r3, #2
 800c384:	4413      	add	r3, r2
 800c386:	685b      	ldr	r3, [r3, #4]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d01a      	beq.n	800c3c2 <USBD_CDC_EP0_RxReady+0x6c>
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c392:	2bff      	cmp	r3, #255	; 0xff
 800c394:	d015      	beq.n	800c3c2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c39c:	687a      	ldr	r2, [r7, #4]
 800c39e:	33b0      	adds	r3, #176	; 0xb0
 800c3a0:	009b      	lsls	r3, r3, #2
 800c3a2:	4413      	add	r3, r2
 800c3a4:	685b      	ldr	r3, [r3, #4]
 800c3a6:	689b      	ldr	r3, [r3, #8]
 800c3a8:	68fa      	ldr	r2, [r7, #12]
 800c3aa:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c3ae:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c3b6:	b292      	uxth	r2, r2
 800c3b8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	22ff      	movs	r2, #255	; 0xff
 800c3be:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c3c2:	2300      	movs	r3, #0
}
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	3710      	adds	r7, #16
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	bd80      	pop	{r7, pc}

0800c3cc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b086      	sub	sp, #24
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c3d4:	2182      	movs	r1, #130	; 0x82
 800c3d6:	4818      	ldr	r0, [pc, #96]	; (800c438 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c3d8:	f000 fd4f 	bl	800ce7a <USBD_GetEpDesc>
 800c3dc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c3de:	2101      	movs	r1, #1
 800c3e0:	4815      	ldr	r0, [pc, #84]	; (800c438 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c3e2:	f000 fd4a 	bl	800ce7a <USBD_GetEpDesc>
 800c3e6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c3e8:	2181      	movs	r1, #129	; 0x81
 800c3ea:	4813      	ldr	r0, [pc, #76]	; (800c438 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c3ec:	f000 fd45 	bl	800ce7a <USBD_GetEpDesc>
 800c3f0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c3f2:	697b      	ldr	r3, [r7, #20]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d002      	beq.n	800c3fe <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	2210      	movs	r2, #16
 800c3fc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d006      	beq.n	800c412 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	2200      	movs	r2, #0
 800c408:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c40c:	711a      	strb	r2, [r3, #4]
 800c40e:	2200      	movs	r2, #0
 800c410:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d006      	beq.n	800c426 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	2200      	movs	r2, #0
 800c41c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c420:	711a      	strb	r2, [r3, #4]
 800c422:	2200      	movs	r2, #0
 800c424:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2243      	movs	r2, #67	; 0x43
 800c42a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c42c:	4b02      	ldr	r3, [pc, #8]	; (800c438 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c42e:	4618      	mov	r0, r3
 800c430:	3718      	adds	r7, #24
 800c432:	46bd      	mov	sp, r7
 800c434:	bd80      	pop	{r7, pc}
 800c436:	bf00      	nop
 800c438:	20000050 	.word	0x20000050

0800c43c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b086      	sub	sp, #24
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c444:	2182      	movs	r1, #130	; 0x82
 800c446:	4818      	ldr	r0, [pc, #96]	; (800c4a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c448:	f000 fd17 	bl	800ce7a <USBD_GetEpDesc>
 800c44c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c44e:	2101      	movs	r1, #1
 800c450:	4815      	ldr	r0, [pc, #84]	; (800c4a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c452:	f000 fd12 	bl	800ce7a <USBD_GetEpDesc>
 800c456:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c458:	2181      	movs	r1, #129	; 0x81
 800c45a:	4813      	ldr	r0, [pc, #76]	; (800c4a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c45c:	f000 fd0d 	bl	800ce7a <USBD_GetEpDesc>
 800c460:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c462:	697b      	ldr	r3, [r7, #20]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d002      	beq.n	800c46e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	2210      	movs	r2, #16
 800c46c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c46e:	693b      	ldr	r3, [r7, #16]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d006      	beq.n	800c482 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	2200      	movs	r2, #0
 800c478:	711a      	strb	r2, [r3, #4]
 800c47a:	2200      	movs	r2, #0
 800c47c:	f042 0202 	orr.w	r2, r2, #2
 800c480:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d006      	beq.n	800c496 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2200      	movs	r2, #0
 800c48c:	711a      	strb	r2, [r3, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	f042 0202 	orr.w	r2, r2, #2
 800c494:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	2243      	movs	r2, #67	; 0x43
 800c49a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c49c:	4b02      	ldr	r3, [pc, #8]	; (800c4a8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3718      	adds	r7, #24
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	20000050 	.word	0x20000050

0800c4ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b086      	sub	sp, #24
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c4b4:	2182      	movs	r1, #130	; 0x82
 800c4b6:	4818      	ldr	r0, [pc, #96]	; (800c518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c4b8:	f000 fcdf 	bl	800ce7a <USBD_GetEpDesc>
 800c4bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c4be:	2101      	movs	r1, #1
 800c4c0:	4815      	ldr	r0, [pc, #84]	; (800c518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c4c2:	f000 fcda 	bl	800ce7a <USBD_GetEpDesc>
 800c4c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c4c8:	2181      	movs	r1, #129	; 0x81
 800c4ca:	4813      	ldr	r0, [pc, #76]	; (800c518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c4cc:	f000 fcd5 	bl	800ce7a <USBD_GetEpDesc>
 800c4d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d002      	beq.n	800c4de <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c4d8:	697b      	ldr	r3, [r7, #20]
 800c4da:	2210      	movs	r2, #16
 800c4dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d006      	beq.n	800c4f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4ec:	711a      	strb	r2, [r3, #4]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d006      	beq.n	800c506 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2200      	movs	r2, #0
 800c4fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c500:	711a      	strb	r2, [r3, #4]
 800c502:	2200      	movs	r2, #0
 800c504:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	2243      	movs	r2, #67	; 0x43
 800c50a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c50c:	4b02      	ldr	r3, [pc, #8]	; (800c518 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c50e:	4618      	mov	r0, r3
 800c510:	3718      	adds	r7, #24
 800c512:	46bd      	mov	sp, r7
 800c514:	bd80      	pop	{r7, pc}
 800c516:	bf00      	nop
 800c518:	20000050 	.word	0x20000050

0800c51c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c51c:	b480      	push	{r7}
 800c51e:	b083      	sub	sp, #12
 800c520:	af00      	add	r7, sp, #0
 800c522:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	220a      	movs	r2, #10
 800c528:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c52a:	4b03      	ldr	r3, [pc, #12]	; (800c538 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c52c:	4618      	mov	r0, r3
 800c52e:	370c      	adds	r7, #12
 800c530:	46bd      	mov	sp, r7
 800c532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c536:	4770      	bx	lr
 800c538:	2000000c 	.word	0x2000000c

0800c53c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b083      	sub	sp, #12
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
 800c544:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	d101      	bne.n	800c550 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c54c:	2303      	movs	r3, #3
 800c54e:	e009      	b.n	800c564 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c556:	687a      	ldr	r2, [r7, #4]
 800c558:	33b0      	adds	r3, #176	; 0xb0
 800c55a:	009b      	lsls	r3, r3, #2
 800c55c:	4413      	add	r3, r2
 800c55e:	683a      	ldr	r2, [r7, #0]
 800c560:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	370c      	adds	r7, #12
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c570:	b480      	push	{r7}
 800c572:	b087      	sub	sp, #28
 800c574:	af00      	add	r7, sp, #0
 800c576:	60f8      	str	r0, [r7, #12]
 800c578:	60b9      	str	r1, [r7, #8]
 800c57a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	32b0      	adds	r2, #176	; 0xb0
 800c586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c58a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800c58c:	697b      	ldr	r3, [r7, #20]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d101      	bne.n	800c596 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c592:	2303      	movs	r3, #3
 800c594:	e008      	b.n	800c5a8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c596:	697b      	ldr	r3, [r7, #20]
 800c598:	68ba      	ldr	r2, [r7, #8]
 800c59a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c59e:	697b      	ldr	r3, [r7, #20]
 800c5a0:	687a      	ldr	r2, [r7, #4]
 800c5a2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c5a6:	2300      	movs	r3, #0
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	371c      	adds	r7, #28
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr

0800c5b4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	32b0      	adds	r2, #176	; 0xb0
 800c5c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d101      	bne.n	800c5d8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c5d4:	2303      	movs	r3, #3
 800c5d6:	e004      	b.n	800c5e2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	683a      	ldr	r2, [r7, #0]
 800c5dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c5e0:	2300      	movs	r3, #0
}
 800c5e2:	4618      	mov	r0, r3
 800c5e4:	3714      	adds	r7, #20
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ec:	4770      	bx	lr
	...

0800c5f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b084      	sub	sp, #16
 800c5f4:	af00      	add	r7, sp, #0
 800c5f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	32b0      	adds	r2, #176	; 0xb0
 800c602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c606:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800c608:	2301      	movs	r3, #1
 800c60a:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	32b0      	adds	r2, #176	; 0xb0
 800c616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d101      	bne.n	800c622 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c61e:	2303      	movs	r3, #3
 800c620:	e025      	b.n	800c66e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d11f      	bne.n	800c66c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	2201      	movs	r2, #1
 800c630:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c634:	4b10      	ldr	r3, [pc, #64]	; (800c678 <USBD_CDC_TransmitPacket+0x88>)
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	f003 020f 	and.w	r2, r3, #15
 800c63c:	68bb      	ldr	r3, [r7, #8]
 800c63e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	4613      	mov	r3, r2
 800c646:	009b      	lsls	r3, r3, #2
 800c648:	4413      	add	r3, r2
 800c64a:	009b      	lsls	r3, r3, #2
 800c64c:	4403      	add	r3, r0
 800c64e:	3318      	adds	r3, #24
 800c650:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c652:	4b09      	ldr	r3, [pc, #36]	; (800c678 <USBD_CDC_TransmitPacket+0x88>)
 800c654:	7819      	ldrb	r1, [r3, #0]
 800c656:	68bb      	ldr	r3, [r7, #8]
 800c658:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c662:	6878      	ldr	r0, [r7, #4]
 800c664:	f002 f80f 	bl	800e686 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c668:	2300      	movs	r3, #0
 800c66a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3710      	adds	r7, #16
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	20000093 	.word	0x20000093

0800c67c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	32b0      	adds	r2, #176	; 0xb0
 800c68e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c692:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	32b0      	adds	r2, #176	; 0xb0
 800c69e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	d101      	bne.n	800c6aa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c6a6:	2303      	movs	r3, #3
 800c6a8:	e018      	b.n	800c6dc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	7c1b      	ldrb	r3, [r3, #16]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d10a      	bne.n	800c6c8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c6b2:	4b0c      	ldr	r3, [pc, #48]	; (800c6e4 <USBD_CDC_ReceivePacket+0x68>)
 800c6b4:	7819      	ldrb	r1, [r3, #0]
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c6bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c6c0:	6878      	ldr	r0, [r7, #4]
 800c6c2:	f002 f801 	bl	800e6c8 <USBD_LL_PrepareReceive>
 800c6c6:	e008      	b.n	800c6da <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c6c8:	4b06      	ldr	r3, [pc, #24]	; (800c6e4 <USBD_CDC_ReceivePacket+0x68>)
 800c6ca:	7819      	ldrb	r1, [r3, #0]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c6d2:	2340      	movs	r3, #64	; 0x40
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f001 fff7 	bl	800e6c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c6da:	2300      	movs	r3, #0
}
 800c6dc:	4618      	mov	r0, r3
 800c6de:	3710      	adds	r7, #16
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	20000094 	.word	0x20000094

0800c6e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c6e8:	b580      	push	{r7, lr}
 800c6ea:	b086      	sub	sp, #24
 800c6ec:	af00      	add	r7, sp, #0
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	60b9      	str	r1, [r7, #8]
 800c6f2:	4613      	mov	r3, r2
 800c6f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d101      	bne.n	800c700 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c6fc:	2303      	movs	r3, #3
 800c6fe:	e01f      	b.n	800c740 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	2200      	movs	r2, #0
 800c704:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2200      	movs	r2, #0
 800c70c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	2200      	movs	r2, #0
 800c714:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c718:	68bb      	ldr	r3, [r7, #8]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d003      	beq.n	800c726 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	68ba      	ldr	r2, [r7, #8]
 800c722:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	2201      	movs	r2, #1
 800c72a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	79fa      	ldrb	r2, [r7, #7]
 800c732:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c734:	68f8      	ldr	r0, [r7, #12]
 800c736:	f001 fe71 	bl	800e41c <USBD_LL_Init>
 800c73a:	4603      	mov	r3, r0
 800c73c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c73e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c740:	4618      	mov	r0, r3
 800c742:	3718      	adds	r7, #24
 800c744:	46bd      	mov	sp, r7
 800c746:	bd80      	pop	{r7, pc}

0800c748 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
 800c750:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c752:	2300      	movs	r3, #0
 800c754:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c756:	683b      	ldr	r3, [r7, #0]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d101      	bne.n	800c760 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c75c:	2303      	movs	r3, #3
 800c75e:	e025      	b.n	800c7ac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	683a      	ldr	r2, [r7, #0]
 800c764:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	32ae      	adds	r2, #174	; 0xae
 800c772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d00f      	beq.n	800c79c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	32ae      	adds	r2, #174	; 0xae
 800c786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c78a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c78c:	f107 020e 	add.w	r2, r7, #14
 800c790:	4610      	mov	r0, r2
 800c792:	4798      	blx	r3
 800c794:	4602      	mov	r2, r0
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c7a2:	1c5a      	adds	r2, r3, #1
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c7aa:	2300      	movs	r3, #0
}
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	3710      	adds	r7, #16
 800c7b0:	46bd      	mov	sp, r7
 800c7b2:	bd80      	pop	{r7, pc}

0800c7b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b082      	sub	sp, #8
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f001 fe79 	bl	800e4b4 <USBD_LL_Start>
 800c7c2:	4603      	mov	r3, r0
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3708      	adds	r7, #8
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}

0800c7cc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c7cc:	b480      	push	{r7}
 800c7ce:	b083      	sub	sp, #12
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c7d4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	370c      	adds	r7, #12
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr

0800c7e2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c7e2:	b580      	push	{r7, lr}
 800c7e4:	b084      	sub	sp, #16
 800c7e6:	af00      	add	r7, sp, #0
 800c7e8:	6078      	str	r0, [r7, #4]
 800c7ea:	460b      	mov	r3, r1
 800c7ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d009      	beq.n	800c810 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	78fa      	ldrb	r2, [r7, #3]
 800c806:	4611      	mov	r1, r2
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	4798      	blx	r3
 800c80c:	4603      	mov	r3, r0
 800c80e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c810:	7bfb      	ldrb	r3, [r7, #15]
}
 800c812:	4618      	mov	r0, r3
 800c814:	3710      	adds	r7, #16
 800c816:	46bd      	mov	sp, r7
 800c818:	bd80      	pop	{r7, pc}

0800c81a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c81a:	b580      	push	{r7, lr}
 800c81c:	b084      	sub	sp, #16
 800c81e:	af00      	add	r7, sp, #0
 800c820:	6078      	str	r0, [r7, #4]
 800c822:	460b      	mov	r3, r1
 800c824:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c826:	2300      	movs	r3, #0
 800c828:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c830:	685b      	ldr	r3, [r3, #4]
 800c832:	78fa      	ldrb	r2, [r7, #3]
 800c834:	4611      	mov	r1, r2
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	4798      	blx	r3
 800c83a:	4603      	mov	r3, r0
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d001      	beq.n	800c844 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c840:	2303      	movs	r3, #3
 800c842:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c844:	7bfb      	ldrb	r3, [r7, #15]
}
 800c846:	4618      	mov	r0, r3
 800c848:	3710      	adds	r7, #16
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bd80      	pop	{r7, pc}

0800c84e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c84e:	b580      	push	{r7, lr}
 800c850:	b084      	sub	sp, #16
 800c852:	af00      	add	r7, sp, #0
 800c854:	6078      	str	r0, [r7, #4]
 800c856:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c85e:	6839      	ldr	r1, [r7, #0]
 800c860:	4618      	mov	r0, r3
 800c862:	f001 f908 	bl	800da76 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2201      	movs	r2, #1
 800c86a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c874:	461a      	mov	r2, r3
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c882:	f003 031f 	and.w	r3, r3, #31
 800c886:	2b02      	cmp	r3, #2
 800c888:	d01a      	beq.n	800c8c0 <USBD_LL_SetupStage+0x72>
 800c88a:	2b02      	cmp	r3, #2
 800c88c:	d822      	bhi.n	800c8d4 <USBD_LL_SetupStage+0x86>
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d002      	beq.n	800c898 <USBD_LL_SetupStage+0x4a>
 800c892:	2b01      	cmp	r3, #1
 800c894:	d00a      	beq.n	800c8ac <USBD_LL_SetupStage+0x5e>
 800c896:	e01d      	b.n	800c8d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c89e:	4619      	mov	r1, r3
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 fb5f 	bl	800cf64 <USBD_StdDevReq>
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	73fb      	strb	r3, [r7, #15]
      break;
 800c8aa:	e020      	b.n	800c8ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f000 fbc7 	bl	800d048 <USBD_StdItfReq>
 800c8ba:	4603      	mov	r3, r0
 800c8bc:	73fb      	strb	r3, [r7, #15]
      break;
 800c8be:	e016      	b.n	800c8ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c8c6:	4619      	mov	r1, r3
 800c8c8:	6878      	ldr	r0, [r7, #4]
 800c8ca:	f000 fc29 	bl	800d120 <USBD_StdEPReq>
 800c8ce:	4603      	mov	r3, r0
 800c8d0:	73fb      	strb	r3, [r7, #15]
      break;
 800c8d2:	e00c      	b.n	800c8ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c8da:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c8de:	b2db      	uxtb	r3, r3
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f001 fe46 	bl	800e574 <USBD_LL_StallEP>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	73fb      	strb	r3, [r7, #15]
      break;
 800c8ec:	bf00      	nop
  }

  return ret;
 800c8ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8f0:	4618      	mov	r0, r3
 800c8f2:	3710      	adds	r7, #16
 800c8f4:	46bd      	mov	sp, r7
 800c8f6:	bd80      	pop	{r7, pc}

0800c8f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b086      	sub	sp, #24
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	60f8      	str	r0, [r7, #12]
 800c900:	460b      	mov	r3, r1
 800c902:	607a      	str	r2, [r7, #4]
 800c904:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c906:	2300      	movs	r3, #0
 800c908:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c90a:	7afb      	ldrb	r3, [r7, #11]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d16e      	bne.n	800c9ee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c916:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c918:	68fb      	ldr	r3, [r7, #12]
 800c91a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c91e:	2b03      	cmp	r3, #3
 800c920:	f040 8098 	bne.w	800ca54 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c924:	693b      	ldr	r3, [r7, #16]
 800c926:	689a      	ldr	r2, [r3, #8]
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	68db      	ldr	r3, [r3, #12]
 800c92c:	429a      	cmp	r2, r3
 800c92e:	d913      	bls.n	800c958 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c930:	693b      	ldr	r3, [r7, #16]
 800c932:	689a      	ldr	r2, [r3, #8]
 800c934:	693b      	ldr	r3, [r7, #16]
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	1ad2      	subs	r2, r2, r3
 800c93a:	693b      	ldr	r3, [r7, #16]
 800c93c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c93e:	693b      	ldr	r3, [r7, #16]
 800c940:	68da      	ldr	r2, [r3, #12]
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	689b      	ldr	r3, [r3, #8]
 800c946:	4293      	cmp	r3, r2
 800c948:	bf28      	it	cs
 800c94a:	4613      	movcs	r3, r2
 800c94c:	461a      	mov	r2, r3
 800c94e:	6879      	ldr	r1, [r7, #4]
 800c950:	68f8      	ldr	r0, [r7, #12]
 800c952:	f001 f984 	bl	800dc5e <USBD_CtlContinueRx>
 800c956:	e07d      	b.n	800ca54 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c95e:	f003 031f 	and.w	r3, r3, #31
 800c962:	2b02      	cmp	r3, #2
 800c964:	d014      	beq.n	800c990 <USBD_LL_DataOutStage+0x98>
 800c966:	2b02      	cmp	r3, #2
 800c968:	d81d      	bhi.n	800c9a6 <USBD_LL_DataOutStage+0xae>
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d002      	beq.n	800c974 <USBD_LL_DataOutStage+0x7c>
 800c96e:	2b01      	cmp	r3, #1
 800c970:	d003      	beq.n	800c97a <USBD_LL_DataOutStage+0x82>
 800c972:	e018      	b.n	800c9a6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c974:	2300      	movs	r3, #0
 800c976:	75bb      	strb	r3, [r7, #22]
            break;
 800c978:	e018      	b.n	800c9ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c980:	b2db      	uxtb	r3, r3
 800c982:	4619      	mov	r1, r3
 800c984:	68f8      	ldr	r0, [r7, #12]
 800c986:	f000 fa5e 	bl	800ce46 <USBD_CoreFindIF>
 800c98a:	4603      	mov	r3, r0
 800c98c:	75bb      	strb	r3, [r7, #22]
            break;
 800c98e:	e00d      	b.n	800c9ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c996:	b2db      	uxtb	r3, r3
 800c998:	4619      	mov	r1, r3
 800c99a:	68f8      	ldr	r0, [r7, #12]
 800c99c:	f000 fa60 	bl	800ce60 <USBD_CoreFindEP>
 800c9a0:	4603      	mov	r3, r0
 800c9a2:	75bb      	strb	r3, [r7, #22]
            break;
 800c9a4:	e002      	b.n	800c9ac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	75bb      	strb	r3, [r7, #22]
            break;
 800c9aa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c9ac:	7dbb      	ldrb	r3, [r7, #22]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d119      	bne.n	800c9e6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9b8:	b2db      	uxtb	r3, r3
 800c9ba:	2b03      	cmp	r3, #3
 800c9bc:	d113      	bne.n	800c9e6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c9be:	7dba      	ldrb	r2, [r7, #22]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	32ae      	adds	r2, #174	; 0xae
 800c9c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9c8:	691b      	ldr	r3, [r3, #16]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d00b      	beq.n	800c9e6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c9ce:	7dba      	ldrb	r2, [r7, #22]
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c9d6:	7dba      	ldrb	r2, [r7, #22]
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	32ae      	adds	r2, #174	; 0xae
 800c9dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	68f8      	ldr	r0, [r7, #12]
 800c9e4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c9e6:	68f8      	ldr	r0, [r7, #12]
 800c9e8:	f001 f94a 	bl	800dc80 <USBD_CtlSendStatus>
 800c9ec:	e032      	b.n	800ca54 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c9ee:	7afb      	ldrb	r3, [r7, #11]
 800c9f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c9f4:	b2db      	uxtb	r3, r3
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	68f8      	ldr	r0, [r7, #12]
 800c9fa:	f000 fa31 	bl	800ce60 <USBD_CoreFindEP>
 800c9fe:	4603      	mov	r3, r0
 800ca00:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca02:	7dbb      	ldrb	r3, [r7, #22]
 800ca04:	2bff      	cmp	r3, #255	; 0xff
 800ca06:	d025      	beq.n	800ca54 <USBD_LL_DataOutStage+0x15c>
 800ca08:	7dbb      	ldrb	r3, [r7, #22]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d122      	bne.n	800ca54 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca14:	b2db      	uxtb	r3, r3
 800ca16:	2b03      	cmp	r3, #3
 800ca18:	d117      	bne.n	800ca4a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ca1a:	7dba      	ldrb	r2, [r7, #22]
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	32ae      	adds	r2, #174	; 0xae
 800ca20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca24:	699b      	ldr	r3, [r3, #24]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d00f      	beq.n	800ca4a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ca2a:	7dba      	ldrb	r2, [r7, #22]
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ca32:	7dba      	ldrb	r2, [r7, #22]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	32ae      	adds	r2, #174	; 0xae
 800ca38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca3c:	699b      	ldr	r3, [r3, #24]
 800ca3e:	7afa      	ldrb	r2, [r7, #11]
 800ca40:	4611      	mov	r1, r2
 800ca42:	68f8      	ldr	r0, [r7, #12]
 800ca44:	4798      	blx	r3
 800ca46:	4603      	mov	r3, r0
 800ca48:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ca4a:	7dfb      	ldrb	r3, [r7, #23]
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d001      	beq.n	800ca54 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ca50:	7dfb      	ldrb	r3, [r7, #23]
 800ca52:	e000      	b.n	800ca56 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ca54:	2300      	movs	r3, #0
}
 800ca56:	4618      	mov	r0, r3
 800ca58:	3718      	adds	r7, #24
 800ca5a:	46bd      	mov	sp, r7
 800ca5c:	bd80      	pop	{r7, pc}

0800ca5e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ca5e:	b580      	push	{r7, lr}
 800ca60:	b086      	sub	sp, #24
 800ca62:	af00      	add	r7, sp, #0
 800ca64:	60f8      	str	r0, [r7, #12]
 800ca66:	460b      	mov	r3, r1
 800ca68:	607a      	str	r2, [r7, #4]
 800ca6a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ca6c:	7afb      	ldrb	r3, [r7, #11]
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d16f      	bne.n	800cb52 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	3314      	adds	r3, #20
 800ca76:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ca7e:	2b02      	cmp	r3, #2
 800ca80:	d15a      	bne.n	800cb38 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ca82:	693b      	ldr	r3, [r7, #16]
 800ca84:	689a      	ldr	r2, [r3, #8]
 800ca86:	693b      	ldr	r3, [r7, #16]
 800ca88:	68db      	ldr	r3, [r3, #12]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d914      	bls.n	800cab8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	689a      	ldr	r2, [r3, #8]
 800ca92:	693b      	ldr	r3, [r7, #16]
 800ca94:	68db      	ldr	r3, [r3, #12]
 800ca96:	1ad2      	subs	r2, r2, r3
 800ca98:	693b      	ldr	r3, [r7, #16]
 800ca9a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ca9c:	693b      	ldr	r3, [r7, #16]
 800ca9e:	689b      	ldr	r3, [r3, #8]
 800caa0:	461a      	mov	r2, r3
 800caa2:	6879      	ldr	r1, [r7, #4]
 800caa4:	68f8      	ldr	r0, [r7, #12]
 800caa6:	f001 f8ac 	bl	800dc02 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800caaa:	2300      	movs	r3, #0
 800caac:	2200      	movs	r2, #0
 800caae:	2100      	movs	r1, #0
 800cab0:	68f8      	ldr	r0, [r7, #12]
 800cab2:	f001 fe09 	bl	800e6c8 <USBD_LL_PrepareReceive>
 800cab6:	e03f      	b.n	800cb38 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	68da      	ldr	r2, [r3, #12]
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	689b      	ldr	r3, [r3, #8]
 800cac0:	429a      	cmp	r2, r3
 800cac2:	d11c      	bne.n	800cafe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cac4:	693b      	ldr	r3, [r7, #16]
 800cac6:	685a      	ldr	r2, [r3, #4]
 800cac8:	693b      	ldr	r3, [r7, #16]
 800caca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cacc:	429a      	cmp	r2, r3
 800cace:	d316      	bcc.n	800cafe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	685a      	ldr	r2, [r3, #4]
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cada:	429a      	cmp	r2, r3
 800cadc:	d20f      	bcs.n	800cafe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cade:	2200      	movs	r2, #0
 800cae0:	2100      	movs	r1, #0
 800cae2:	68f8      	ldr	r0, [r7, #12]
 800cae4:	f001 f88d 	bl	800dc02 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	2200      	movs	r2, #0
 800caec:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800caf0:	2300      	movs	r3, #0
 800caf2:	2200      	movs	r2, #0
 800caf4:	2100      	movs	r1, #0
 800caf6:	68f8      	ldr	r0, [r7, #12]
 800caf8:	f001 fde6 	bl	800e6c8 <USBD_LL_PrepareReceive>
 800cafc:	e01c      	b.n	800cb38 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb04:	b2db      	uxtb	r3, r3
 800cb06:	2b03      	cmp	r3, #3
 800cb08:	d10f      	bne.n	800cb2a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb10:	68db      	ldr	r3, [r3, #12]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d009      	beq.n	800cb2a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb24:	68db      	ldr	r3, [r3, #12]
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb2a:	2180      	movs	r1, #128	; 0x80
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f001 fd21 	bl	800e574 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cb32:	68f8      	ldr	r0, [r7, #12]
 800cb34:	f001 f8b7 	bl	800dca6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d03a      	beq.n	800cbb8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cb42:	68f8      	ldr	r0, [r7, #12]
 800cb44:	f7ff fe42 	bl	800c7cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cb48:	68fb      	ldr	r3, [r7, #12]
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cb50:	e032      	b.n	800cbb8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cb52:	7afb      	ldrb	r3, [r7, #11]
 800cb54:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cb58:	b2db      	uxtb	r3, r3
 800cb5a:	4619      	mov	r1, r3
 800cb5c:	68f8      	ldr	r0, [r7, #12]
 800cb5e:	f000 f97f 	bl	800ce60 <USBD_CoreFindEP>
 800cb62:	4603      	mov	r3, r0
 800cb64:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb66:	7dfb      	ldrb	r3, [r7, #23]
 800cb68:	2bff      	cmp	r3, #255	; 0xff
 800cb6a:	d025      	beq.n	800cbb8 <USBD_LL_DataInStage+0x15a>
 800cb6c:	7dfb      	ldrb	r3, [r7, #23]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d122      	bne.n	800cbb8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb78:	b2db      	uxtb	r3, r3
 800cb7a:	2b03      	cmp	r3, #3
 800cb7c:	d11c      	bne.n	800cbb8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cb7e:	7dfa      	ldrb	r2, [r7, #23]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	32ae      	adds	r2, #174	; 0xae
 800cb84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb88:	695b      	ldr	r3, [r3, #20]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d014      	beq.n	800cbb8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cb8e:	7dfa      	ldrb	r2, [r7, #23]
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cb96:	7dfa      	ldrb	r2, [r7, #23]
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	32ae      	adds	r2, #174	; 0xae
 800cb9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cba0:	695b      	ldr	r3, [r3, #20]
 800cba2:	7afa      	ldrb	r2, [r7, #11]
 800cba4:	4611      	mov	r1, r2
 800cba6:	68f8      	ldr	r0, [r7, #12]
 800cba8:	4798      	blx	r3
 800cbaa:	4603      	mov	r3, r0
 800cbac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cbae:	7dbb      	ldrb	r3, [r7, #22]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d001      	beq.n	800cbb8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cbb4:	7dbb      	ldrb	r3, [r7, #22]
 800cbb6:	e000      	b.n	800cbba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cbb8:	2300      	movs	r3, #0
}
 800cbba:	4618      	mov	r0, r3
 800cbbc:	3718      	adds	r7, #24
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}

0800cbc2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cbc2:	b580      	push	{r7, lr}
 800cbc4:	b084      	sub	sp, #16
 800cbc6:	af00      	add	r7, sp, #0
 800cbc8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbca:	2300      	movs	r3, #0
 800cbcc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2200      	movs	r2, #0
 800cbda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d014      	beq.n	800cc28 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc04:	685b      	ldr	r3, [r3, #4]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00e      	beq.n	800cc28 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	687a      	ldr	r2, [r7, #4]
 800cc14:	6852      	ldr	r2, [r2, #4]
 800cc16:	b2d2      	uxtb	r2, r2
 800cc18:	4611      	mov	r1, r2
 800cc1a:	6878      	ldr	r0, [r7, #4]
 800cc1c:	4798      	blx	r3
 800cc1e:	4603      	mov	r3, r0
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d001      	beq.n	800cc28 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cc24:	2303      	movs	r3, #3
 800cc26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cc28:	2340      	movs	r3, #64	; 0x40
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	2100      	movs	r1, #0
 800cc2e:	6878      	ldr	r0, [r7, #4]
 800cc30:	f001 fc5b 	bl	800e4ea <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	2201      	movs	r2, #1
 800cc38:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2240      	movs	r2, #64	; 0x40
 800cc40:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cc44:	2340      	movs	r3, #64	; 0x40
 800cc46:	2200      	movs	r2, #0
 800cc48:	2180      	movs	r1, #128	; 0x80
 800cc4a:	6878      	ldr	r0, [r7, #4]
 800cc4c:	f001 fc4d 	bl	800e4ea <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2201      	movs	r2, #1
 800cc54:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2240      	movs	r2, #64	; 0x40
 800cc5a:	621a      	str	r2, [r3, #32]

  return ret;
 800cc5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc5e:	4618      	mov	r0, r3
 800cc60:	3710      	adds	r7, #16
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}

0800cc66 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800cc66:	b480      	push	{r7}
 800cc68:	b083      	sub	sp, #12
 800cc6a:	af00      	add	r7, sp, #0
 800cc6c:	6078      	str	r0, [r7, #4]
 800cc6e:	460b      	mov	r3, r1
 800cc70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	78fa      	ldrb	r2, [r7, #3]
 800cc76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800cc78:	2300      	movs	r3, #0
}
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	370c      	adds	r7, #12
 800cc7e:	46bd      	mov	sp, r7
 800cc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc84:	4770      	bx	lr

0800cc86 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800cc86:	b480      	push	{r7}
 800cc88:	b083      	sub	sp, #12
 800cc8a:	af00      	add	r7, sp, #0
 800cc8c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cc94:	b2da      	uxtb	r2, r3
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2204      	movs	r2, #4
 800cca0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cca4:	2300      	movs	r3, #0
}
 800cca6:	4618      	mov	r0, r3
 800cca8:	370c      	adds	r7, #12
 800ccaa:	46bd      	mov	sp, r7
 800ccac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb0:	4770      	bx	lr

0800ccb2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ccb2:	b480      	push	{r7}
 800ccb4:	b083      	sub	sp, #12
 800ccb6:	af00      	add	r7, sp, #0
 800ccb8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccc0:	b2db      	uxtb	r3, r3
 800ccc2:	2b04      	cmp	r3, #4
 800ccc4:	d106      	bne.n	800ccd4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cccc:	b2da      	uxtb	r2, r3
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ccd4:	2300      	movs	r3, #0
}
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	370c      	adds	r7, #12
 800ccda:	46bd      	mov	sp, r7
 800ccdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce0:	4770      	bx	lr

0800cce2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cce2:	b580      	push	{r7, lr}
 800cce4:	b082      	sub	sp, #8
 800cce6:	af00      	add	r7, sp, #0
 800cce8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccf0:	b2db      	uxtb	r3, r3
 800ccf2:	2b03      	cmp	r3, #3
 800ccf4:	d110      	bne.n	800cd18 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d00b      	beq.n	800cd18 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd06:	69db      	ldr	r3, [r3, #28]
 800cd08:	2b00      	cmp	r3, #0
 800cd0a:	d005      	beq.n	800cd18 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd12:	69db      	ldr	r3, [r3, #28]
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cd18:	2300      	movs	r3, #0
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3708      	adds	r7, #8
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}

0800cd22 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cd22:	b580      	push	{r7, lr}
 800cd24:	b082      	sub	sp, #8
 800cd26:	af00      	add	r7, sp, #0
 800cd28:	6078      	str	r0, [r7, #4]
 800cd2a:	460b      	mov	r3, r1
 800cd2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	32ae      	adds	r2, #174	; 0xae
 800cd38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d101      	bne.n	800cd44 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cd40:	2303      	movs	r3, #3
 800cd42:	e01c      	b.n	800cd7e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd4a:	b2db      	uxtb	r3, r3
 800cd4c:	2b03      	cmp	r3, #3
 800cd4e:	d115      	bne.n	800cd7c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	32ae      	adds	r2, #174	; 0xae
 800cd5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd5e:	6a1b      	ldr	r3, [r3, #32]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d00b      	beq.n	800cd7c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	32ae      	adds	r2, #174	; 0xae
 800cd6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd72:	6a1b      	ldr	r3, [r3, #32]
 800cd74:	78fa      	ldrb	r2, [r7, #3]
 800cd76:	4611      	mov	r1, r2
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3708      	adds	r7, #8
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}

0800cd86 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cd86:	b580      	push	{r7, lr}
 800cd88:	b082      	sub	sp, #8
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]
 800cd8e:	460b      	mov	r3, r1
 800cd90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	32ae      	adds	r2, #174	; 0xae
 800cd9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d101      	bne.n	800cda8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800cda4:	2303      	movs	r3, #3
 800cda6:	e01c      	b.n	800cde2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	2b03      	cmp	r3, #3
 800cdb2:	d115      	bne.n	800cde0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	32ae      	adds	r2, #174	; 0xae
 800cdbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d00b      	beq.n	800cde0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	32ae      	adds	r2, #174	; 0xae
 800cdd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdd8:	78fa      	ldrb	r2, [r7, #3]
 800cdda:	4611      	mov	r1, r2
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cde0:	2300      	movs	r3, #0
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3708      	adds	r7, #8
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}

0800cdea <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800cdea:	b480      	push	{r7}
 800cdec:	b083      	sub	sp, #12
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cdf2:	2300      	movs	r3, #0
}
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	370c      	adds	r7, #12
 800cdf8:	46bd      	mov	sp, r7
 800cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfe:	4770      	bx	lr

0800ce00 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	b084      	sub	sp, #16
 800ce04:	af00      	add	r7, sp, #0
 800ce06:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	2201      	movs	r2, #1
 800ce10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d00e      	beq.n	800ce3c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	687a      	ldr	r2, [r7, #4]
 800ce28:	6852      	ldr	r2, [r2, #4]
 800ce2a:	b2d2      	uxtb	r2, r2
 800ce2c:	4611      	mov	r1, r2
 800ce2e:	6878      	ldr	r0, [r7, #4]
 800ce30:	4798      	blx	r3
 800ce32:	4603      	mov	r3, r0
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d001      	beq.n	800ce3c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ce38:	2303      	movs	r3, #3
 800ce3a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ce3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce3e:	4618      	mov	r0, r3
 800ce40:	3710      	adds	r7, #16
 800ce42:	46bd      	mov	sp, r7
 800ce44:	bd80      	pop	{r7, pc}

0800ce46 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ce46:	b480      	push	{r7}
 800ce48:	b083      	sub	sp, #12
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	6078      	str	r0, [r7, #4]
 800ce4e:	460b      	mov	r3, r1
 800ce50:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ce52:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ce54:	4618      	mov	r0, r3
 800ce56:	370c      	adds	r7, #12
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr

0800ce60 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ce60:	b480      	push	{r7}
 800ce62:	b083      	sub	sp, #12
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	460b      	mov	r3, r1
 800ce6a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ce6c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	370c      	adds	r7, #12
 800ce72:	46bd      	mov	sp, r7
 800ce74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce78:	4770      	bx	lr

0800ce7a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800ce7a:	b580      	push	{r7, lr}
 800ce7c:	b086      	sub	sp, #24
 800ce7e:	af00      	add	r7, sp, #0
 800ce80:	6078      	str	r0, [r7, #4]
 800ce82:	460b      	mov	r3, r1
 800ce84:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800ce8e:	2300      	movs	r3, #0
 800ce90:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800ce92:	68fb      	ldr	r3, [r7, #12]
 800ce94:	885b      	ldrh	r3, [r3, #2]
 800ce96:	b29a      	uxth	r2, r3
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	781b      	ldrb	r3, [r3, #0]
 800ce9c:	b29b      	uxth	r3, r3
 800ce9e:	429a      	cmp	r2, r3
 800cea0:	d920      	bls.n	800cee4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	781b      	ldrb	r3, [r3, #0]
 800cea6:	b29b      	uxth	r3, r3
 800cea8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800ceaa:	e013      	b.n	800ced4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800ceac:	f107 030a 	add.w	r3, r7, #10
 800ceb0:	4619      	mov	r1, r3
 800ceb2:	6978      	ldr	r0, [r7, #20]
 800ceb4:	f000 f81b 	bl	800ceee <USBD_GetNextDesc>
 800ceb8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800ceba:	697b      	ldr	r3, [r7, #20]
 800cebc:	785b      	ldrb	r3, [r3, #1]
 800cebe:	2b05      	cmp	r3, #5
 800cec0:	d108      	bne.n	800ced4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cec2:	697b      	ldr	r3, [r7, #20]
 800cec4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	789b      	ldrb	r3, [r3, #2]
 800ceca:	78fa      	ldrb	r2, [r7, #3]
 800cecc:	429a      	cmp	r2, r3
 800cece:	d008      	beq.n	800cee2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800ced0:	2300      	movs	r3, #0
 800ced2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800ced4:	68fb      	ldr	r3, [r7, #12]
 800ced6:	885b      	ldrh	r3, [r3, #2]
 800ced8:	b29a      	uxth	r2, r3
 800ceda:	897b      	ldrh	r3, [r7, #10]
 800cedc:	429a      	cmp	r2, r3
 800cede:	d8e5      	bhi.n	800ceac <USBD_GetEpDesc+0x32>
 800cee0:	e000      	b.n	800cee4 <USBD_GetEpDesc+0x6a>
          break;
 800cee2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cee4:	693b      	ldr	r3, [r7, #16]
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	3718      	adds	r7, #24
 800ceea:	46bd      	mov	sp, r7
 800ceec:	bd80      	pop	{r7, pc}

0800ceee <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ceee:	b480      	push	{r7}
 800cef0:	b085      	sub	sp, #20
 800cef2:	af00      	add	r7, sp, #0
 800cef4:	6078      	str	r0, [r7, #4]
 800cef6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cefc:	683b      	ldr	r3, [r7, #0]
 800cefe:	881a      	ldrh	r2, [r3, #0]
 800cf00:	68fb      	ldr	r3, [r7, #12]
 800cf02:	781b      	ldrb	r3, [r3, #0]
 800cf04:	b29b      	uxth	r3, r3
 800cf06:	4413      	add	r3, r2
 800cf08:	b29a      	uxth	r2, r3
 800cf0a:	683b      	ldr	r3, [r7, #0]
 800cf0c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	461a      	mov	r2, r3
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	4413      	add	r3, r2
 800cf18:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cf1a:	68fb      	ldr	r3, [r7, #12]
}
 800cf1c:	4618      	mov	r0, r3
 800cf1e:	3714      	adds	r7, #20
 800cf20:	46bd      	mov	sp, r7
 800cf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf26:	4770      	bx	lr

0800cf28 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b087      	sub	sp, #28
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	781b      	ldrb	r3, [r3, #0]
 800cf38:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cf3a:	697b      	ldr	r3, [r7, #20]
 800cf3c:	3301      	adds	r3, #1
 800cf3e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cf40:	697b      	ldr	r3, [r7, #20]
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cf46:	8a3b      	ldrh	r3, [r7, #16]
 800cf48:	021b      	lsls	r3, r3, #8
 800cf4a:	b21a      	sxth	r2, r3
 800cf4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cf50:	4313      	orrs	r3, r2
 800cf52:	b21b      	sxth	r3, r3
 800cf54:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cf56:	89fb      	ldrh	r3, [r7, #14]
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	371c      	adds	r7, #28
 800cf5c:	46bd      	mov	sp, r7
 800cf5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf62:	4770      	bx	lr

0800cf64 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf6e:	2300      	movs	r3, #0
 800cf70:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf7a:	2b40      	cmp	r3, #64	; 0x40
 800cf7c:	d005      	beq.n	800cf8a <USBD_StdDevReq+0x26>
 800cf7e:	2b40      	cmp	r3, #64	; 0x40
 800cf80:	d857      	bhi.n	800d032 <USBD_StdDevReq+0xce>
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d00f      	beq.n	800cfa6 <USBD_StdDevReq+0x42>
 800cf86:	2b20      	cmp	r3, #32
 800cf88:	d153      	bne.n	800d032 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	32ae      	adds	r2, #174	; 0xae
 800cf94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf98:	689b      	ldr	r3, [r3, #8]
 800cf9a:	6839      	ldr	r1, [r7, #0]
 800cf9c:	6878      	ldr	r0, [r7, #4]
 800cf9e:	4798      	blx	r3
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	73fb      	strb	r3, [r7, #15]
      break;
 800cfa4:	e04a      	b.n	800d03c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	785b      	ldrb	r3, [r3, #1]
 800cfaa:	2b09      	cmp	r3, #9
 800cfac:	d83b      	bhi.n	800d026 <USBD_StdDevReq+0xc2>
 800cfae:	a201      	add	r2, pc, #4	; (adr r2, 800cfb4 <USBD_StdDevReq+0x50>)
 800cfb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cfb4:	0800d009 	.word	0x0800d009
 800cfb8:	0800d01d 	.word	0x0800d01d
 800cfbc:	0800d027 	.word	0x0800d027
 800cfc0:	0800d013 	.word	0x0800d013
 800cfc4:	0800d027 	.word	0x0800d027
 800cfc8:	0800cfe7 	.word	0x0800cfe7
 800cfcc:	0800cfdd 	.word	0x0800cfdd
 800cfd0:	0800d027 	.word	0x0800d027
 800cfd4:	0800cfff 	.word	0x0800cfff
 800cfd8:	0800cff1 	.word	0x0800cff1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cfdc:	6839      	ldr	r1, [r7, #0]
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fa3c 	bl	800d45c <USBD_GetDescriptor>
          break;
 800cfe4:	e024      	b.n	800d030 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cfe6:	6839      	ldr	r1, [r7, #0]
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 fba1 	bl	800d730 <USBD_SetAddress>
          break;
 800cfee:	e01f      	b.n	800d030 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cff0:	6839      	ldr	r1, [r7, #0]
 800cff2:	6878      	ldr	r0, [r7, #4]
 800cff4:	f000 fbe0 	bl	800d7b8 <USBD_SetConfig>
 800cff8:	4603      	mov	r3, r0
 800cffa:	73fb      	strb	r3, [r7, #15]
          break;
 800cffc:	e018      	b.n	800d030 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cffe:	6839      	ldr	r1, [r7, #0]
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	f000 fc83 	bl	800d90c <USBD_GetConfig>
          break;
 800d006:	e013      	b.n	800d030 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d008:	6839      	ldr	r1, [r7, #0]
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 fcb4 	bl	800d978 <USBD_GetStatus>
          break;
 800d010:	e00e      	b.n	800d030 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d012:	6839      	ldr	r1, [r7, #0]
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 fce3 	bl	800d9e0 <USBD_SetFeature>
          break;
 800d01a:	e009      	b.n	800d030 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d01c:	6839      	ldr	r1, [r7, #0]
 800d01e:	6878      	ldr	r0, [r7, #4]
 800d020:	f000 fd07 	bl	800da32 <USBD_ClrFeature>
          break;
 800d024:	e004      	b.n	800d030 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d026:	6839      	ldr	r1, [r7, #0]
 800d028:	6878      	ldr	r0, [r7, #4]
 800d02a:	f000 fd5e 	bl	800daea <USBD_CtlError>
          break;
 800d02e:	bf00      	nop
      }
      break;
 800d030:	e004      	b.n	800d03c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d032:	6839      	ldr	r1, [r7, #0]
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f000 fd58 	bl	800daea <USBD_CtlError>
      break;
 800d03a:	bf00      	nop
  }

  return ret;
 800d03c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3710      	adds	r7, #16
 800d042:	46bd      	mov	sp, r7
 800d044:	bd80      	pop	{r7, pc}
 800d046:	bf00      	nop

0800d048 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
 800d050:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d052:	2300      	movs	r3, #0
 800d054:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	781b      	ldrb	r3, [r3, #0]
 800d05a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d05e:	2b40      	cmp	r3, #64	; 0x40
 800d060:	d005      	beq.n	800d06e <USBD_StdItfReq+0x26>
 800d062:	2b40      	cmp	r3, #64	; 0x40
 800d064:	d852      	bhi.n	800d10c <USBD_StdItfReq+0xc4>
 800d066:	2b00      	cmp	r3, #0
 800d068:	d001      	beq.n	800d06e <USBD_StdItfReq+0x26>
 800d06a:	2b20      	cmp	r3, #32
 800d06c:	d14e      	bne.n	800d10c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d074:	b2db      	uxtb	r3, r3
 800d076:	3b01      	subs	r3, #1
 800d078:	2b02      	cmp	r3, #2
 800d07a:	d840      	bhi.n	800d0fe <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	889b      	ldrh	r3, [r3, #4]
 800d080:	b2db      	uxtb	r3, r3
 800d082:	2b01      	cmp	r3, #1
 800d084:	d836      	bhi.n	800d0f4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	889b      	ldrh	r3, [r3, #4]
 800d08a:	b2db      	uxtb	r3, r3
 800d08c:	4619      	mov	r1, r3
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f7ff fed9 	bl	800ce46 <USBD_CoreFindIF>
 800d094:	4603      	mov	r3, r0
 800d096:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d098:	7bbb      	ldrb	r3, [r7, #14]
 800d09a:	2bff      	cmp	r3, #255	; 0xff
 800d09c:	d01d      	beq.n	800d0da <USBD_StdItfReq+0x92>
 800d09e:	7bbb      	ldrb	r3, [r7, #14]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d11a      	bne.n	800d0da <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d0a4:	7bba      	ldrb	r2, [r7, #14]
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	32ae      	adds	r2, #174	; 0xae
 800d0aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0ae:	689b      	ldr	r3, [r3, #8]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d00f      	beq.n	800d0d4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d0b4:	7bba      	ldrb	r2, [r7, #14]
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d0bc:	7bba      	ldrb	r2, [r7, #14]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	32ae      	adds	r2, #174	; 0xae
 800d0c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0c6:	689b      	ldr	r3, [r3, #8]
 800d0c8:	6839      	ldr	r1, [r7, #0]
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	4798      	blx	r3
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d0d2:	e004      	b.n	800d0de <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d0d4:	2303      	movs	r3, #3
 800d0d6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d0d8:	e001      	b.n	800d0de <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d0da:	2303      	movs	r3, #3
 800d0dc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d0de:	683b      	ldr	r3, [r7, #0]
 800d0e0:	88db      	ldrh	r3, [r3, #6]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	d110      	bne.n	800d108 <USBD_StdItfReq+0xc0>
 800d0e6:	7bfb      	ldrb	r3, [r7, #15]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d10d      	bne.n	800d108 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d0ec:	6878      	ldr	r0, [r7, #4]
 800d0ee:	f000 fdc7 	bl	800dc80 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d0f2:	e009      	b.n	800d108 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d0f4:	6839      	ldr	r1, [r7, #0]
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	f000 fcf7 	bl	800daea <USBD_CtlError>
          break;
 800d0fc:	e004      	b.n	800d108 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d0fe:	6839      	ldr	r1, [r7, #0]
 800d100:	6878      	ldr	r0, [r7, #4]
 800d102:	f000 fcf2 	bl	800daea <USBD_CtlError>
          break;
 800d106:	e000      	b.n	800d10a <USBD_StdItfReq+0xc2>
          break;
 800d108:	bf00      	nop
      }
      break;
 800d10a:	e004      	b.n	800d116 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d10c:	6839      	ldr	r1, [r7, #0]
 800d10e:	6878      	ldr	r0, [r7, #4]
 800d110:	f000 fceb 	bl	800daea <USBD_CtlError>
      break;
 800d114:	bf00      	nop
  }

  return ret;
 800d116:	7bfb      	ldrb	r3, [r7, #15]
}
 800d118:	4618      	mov	r0, r3
 800d11a:	3710      	adds	r7, #16
 800d11c:	46bd      	mov	sp, r7
 800d11e:	bd80      	pop	{r7, pc}

0800d120 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
 800d128:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d12a:	2300      	movs	r3, #0
 800d12c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	889b      	ldrh	r3, [r3, #4]
 800d132:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d134:	683b      	ldr	r3, [r7, #0]
 800d136:	781b      	ldrb	r3, [r3, #0]
 800d138:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d13c:	2b40      	cmp	r3, #64	; 0x40
 800d13e:	d007      	beq.n	800d150 <USBD_StdEPReq+0x30>
 800d140:	2b40      	cmp	r3, #64	; 0x40
 800d142:	f200 817f 	bhi.w	800d444 <USBD_StdEPReq+0x324>
 800d146:	2b00      	cmp	r3, #0
 800d148:	d02a      	beq.n	800d1a0 <USBD_StdEPReq+0x80>
 800d14a:	2b20      	cmp	r3, #32
 800d14c:	f040 817a 	bne.w	800d444 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d150:	7bbb      	ldrb	r3, [r7, #14]
 800d152:	4619      	mov	r1, r3
 800d154:	6878      	ldr	r0, [r7, #4]
 800d156:	f7ff fe83 	bl	800ce60 <USBD_CoreFindEP>
 800d15a:	4603      	mov	r3, r0
 800d15c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d15e:	7b7b      	ldrb	r3, [r7, #13]
 800d160:	2bff      	cmp	r3, #255	; 0xff
 800d162:	f000 8174 	beq.w	800d44e <USBD_StdEPReq+0x32e>
 800d166:	7b7b      	ldrb	r3, [r7, #13]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	f040 8170 	bne.w	800d44e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d16e:	7b7a      	ldrb	r2, [r7, #13]
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d176:	7b7a      	ldrb	r2, [r7, #13]
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	32ae      	adds	r2, #174	; 0xae
 800d17c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d180:	689b      	ldr	r3, [r3, #8]
 800d182:	2b00      	cmp	r3, #0
 800d184:	f000 8163 	beq.w	800d44e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d188:	7b7a      	ldrb	r2, [r7, #13]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	32ae      	adds	r2, #174	; 0xae
 800d18e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	6839      	ldr	r1, [r7, #0]
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	4798      	blx	r3
 800d19a:	4603      	mov	r3, r0
 800d19c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d19e:	e156      	b.n	800d44e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	785b      	ldrb	r3, [r3, #1]
 800d1a4:	2b03      	cmp	r3, #3
 800d1a6:	d008      	beq.n	800d1ba <USBD_StdEPReq+0x9a>
 800d1a8:	2b03      	cmp	r3, #3
 800d1aa:	f300 8145 	bgt.w	800d438 <USBD_StdEPReq+0x318>
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	f000 809b 	beq.w	800d2ea <USBD_StdEPReq+0x1ca>
 800d1b4:	2b01      	cmp	r3, #1
 800d1b6:	d03c      	beq.n	800d232 <USBD_StdEPReq+0x112>
 800d1b8:	e13e      	b.n	800d438 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1c0:	b2db      	uxtb	r3, r3
 800d1c2:	2b02      	cmp	r3, #2
 800d1c4:	d002      	beq.n	800d1cc <USBD_StdEPReq+0xac>
 800d1c6:	2b03      	cmp	r3, #3
 800d1c8:	d016      	beq.n	800d1f8 <USBD_StdEPReq+0xd8>
 800d1ca:	e02c      	b.n	800d226 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d1cc:	7bbb      	ldrb	r3, [r7, #14]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d00d      	beq.n	800d1ee <USBD_StdEPReq+0xce>
 800d1d2:	7bbb      	ldrb	r3, [r7, #14]
 800d1d4:	2b80      	cmp	r3, #128	; 0x80
 800d1d6:	d00a      	beq.n	800d1ee <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d1d8:	7bbb      	ldrb	r3, [r7, #14]
 800d1da:	4619      	mov	r1, r3
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f001 f9c9 	bl	800e574 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d1e2:	2180      	movs	r1, #128	; 0x80
 800d1e4:	6878      	ldr	r0, [r7, #4]
 800d1e6:	f001 f9c5 	bl	800e574 <USBD_LL_StallEP>
 800d1ea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d1ec:	e020      	b.n	800d230 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d1ee:	6839      	ldr	r1, [r7, #0]
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f000 fc7a 	bl	800daea <USBD_CtlError>
              break;
 800d1f6:	e01b      	b.n	800d230 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	885b      	ldrh	r3, [r3, #2]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d10e      	bne.n	800d21e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d200:	7bbb      	ldrb	r3, [r7, #14]
 800d202:	2b00      	cmp	r3, #0
 800d204:	d00b      	beq.n	800d21e <USBD_StdEPReq+0xfe>
 800d206:	7bbb      	ldrb	r3, [r7, #14]
 800d208:	2b80      	cmp	r3, #128	; 0x80
 800d20a:	d008      	beq.n	800d21e <USBD_StdEPReq+0xfe>
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	88db      	ldrh	r3, [r3, #6]
 800d210:	2b00      	cmp	r3, #0
 800d212:	d104      	bne.n	800d21e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d214:	7bbb      	ldrb	r3, [r7, #14]
 800d216:	4619      	mov	r1, r3
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f001 f9ab 	bl	800e574 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f000 fd2e 	bl	800dc80 <USBD_CtlSendStatus>

              break;
 800d224:	e004      	b.n	800d230 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d226:	6839      	ldr	r1, [r7, #0]
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f000 fc5e 	bl	800daea <USBD_CtlError>
              break;
 800d22e:	bf00      	nop
          }
          break;
 800d230:	e107      	b.n	800d442 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d238:	b2db      	uxtb	r3, r3
 800d23a:	2b02      	cmp	r3, #2
 800d23c:	d002      	beq.n	800d244 <USBD_StdEPReq+0x124>
 800d23e:	2b03      	cmp	r3, #3
 800d240:	d016      	beq.n	800d270 <USBD_StdEPReq+0x150>
 800d242:	e04b      	b.n	800d2dc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d244:	7bbb      	ldrb	r3, [r7, #14]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d00d      	beq.n	800d266 <USBD_StdEPReq+0x146>
 800d24a:	7bbb      	ldrb	r3, [r7, #14]
 800d24c:	2b80      	cmp	r3, #128	; 0x80
 800d24e:	d00a      	beq.n	800d266 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d250:	7bbb      	ldrb	r3, [r7, #14]
 800d252:	4619      	mov	r1, r3
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f001 f98d 	bl	800e574 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d25a:	2180      	movs	r1, #128	; 0x80
 800d25c:	6878      	ldr	r0, [r7, #4]
 800d25e:	f001 f989 	bl	800e574 <USBD_LL_StallEP>
 800d262:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d264:	e040      	b.n	800d2e8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d266:	6839      	ldr	r1, [r7, #0]
 800d268:	6878      	ldr	r0, [r7, #4]
 800d26a:	f000 fc3e 	bl	800daea <USBD_CtlError>
              break;
 800d26e:	e03b      	b.n	800d2e8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	885b      	ldrh	r3, [r3, #2]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d136      	bne.n	800d2e6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d278:	7bbb      	ldrb	r3, [r7, #14]
 800d27a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d004      	beq.n	800d28c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d282:	7bbb      	ldrb	r3, [r7, #14]
 800d284:	4619      	mov	r1, r3
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f001 f993 	bl	800e5b2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 fcf7 	bl	800dc80 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d292:	7bbb      	ldrb	r3, [r7, #14]
 800d294:	4619      	mov	r1, r3
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f7ff fde2 	bl	800ce60 <USBD_CoreFindEP>
 800d29c:	4603      	mov	r3, r0
 800d29e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d2a0:	7b7b      	ldrb	r3, [r7, #13]
 800d2a2:	2bff      	cmp	r3, #255	; 0xff
 800d2a4:	d01f      	beq.n	800d2e6 <USBD_StdEPReq+0x1c6>
 800d2a6:	7b7b      	ldrb	r3, [r7, #13]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d11c      	bne.n	800d2e6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d2ac:	7b7a      	ldrb	r2, [r7, #13]
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d2b4:	7b7a      	ldrb	r2, [r7, #13]
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	32ae      	adds	r2, #174	; 0xae
 800d2ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2be:	689b      	ldr	r3, [r3, #8]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d010      	beq.n	800d2e6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d2c4:	7b7a      	ldrb	r2, [r7, #13]
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	32ae      	adds	r2, #174	; 0xae
 800d2ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2ce:	689b      	ldr	r3, [r3, #8]
 800d2d0:	6839      	ldr	r1, [r7, #0]
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	4798      	blx	r3
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d2da:	e004      	b.n	800d2e6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d2dc:	6839      	ldr	r1, [r7, #0]
 800d2de:	6878      	ldr	r0, [r7, #4]
 800d2e0:	f000 fc03 	bl	800daea <USBD_CtlError>
              break;
 800d2e4:	e000      	b.n	800d2e8 <USBD_StdEPReq+0x1c8>
              break;
 800d2e6:	bf00      	nop
          }
          break;
 800d2e8:	e0ab      	b.n	800d442 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d2ea:	687b      	ldr	r3, [r7, #4]
 800d2ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2f0:	b2db      	uxtb	r3, r3
 800d2f2:	2b02      	cmp	r3, #2
 800d2f4:	d002      	beq.n	800d2fc <USBD_StdEPReq+0x1dc>
 800d2f6:	2b03      	cmp	r3, #3
 800d2f8:	d032      	beq.n	800d360 <USBD_StdEPReq+0x240>
 800d2fa:	e097      	b.n	800d42c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d2fc:	7bbb      	ldrb	r3, [r7, #14]
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	d007      	beq.n	800d312 <USBD_StdEPReq+0x1f2>
 800d302:	7bbb      	ldrb	r3, [r7, #14]
 800d304:	2b80      	cmp	r3, #128	; 0x80
 800d306:	d004      	beq.n	800d312 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d308:	6839      	ldr	r1, [r7, #0]
 800d30a:	6878      	ldr	r0, [r7, #4]
 800d30c:	f000 fbed 	bl	800daea <USBD_CtlError>
                break;
 800d310:	e091      	b.n	800d436 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d312:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d316:	2b00      	cmp	r3, #0
 800d318:	da0b      	bge.n	800d332 <USBD_StdEPReq+0x212>
 800d31a:	7bbb      	ldrb	r3, [r7, #14]
 800d31c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d320:	4613      	mov	r3, r2
 800d322:	009b      	lsls	r3, r3, #2
 800d324:	4413      	add	r3, r2
 800d326:	009b      	lsls	r3, r3, #2
 800d328:	3310      	adds	r3, #16
 800d32a:	687a      	ldr	r2, [r7, #4]
 800d32c:	4413      	add	r3, r2
 800d32e:	3304      	adds	r3, #4
 800d330:	e00b      	b.n	800d34a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d332:	7bbb      	ldrb	r3, [r7, #14]
 800d334:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d338:	4613      	mov	r3, r2
 800d33a:	009b      	lsls	r3, r3, #2
 800d33c:	4413      	add	r3, r2
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d344:	687a      	ldr	r2, [r7, #4]
 800d346:	4413      	add	r3, r2
 800d348:	3304      	adds	r3, #4
 800d34a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	2200      	movs	r2, #0
 800d350:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	2202      	movs	r2, #2
 800d356:	4619      	mov	r1, r3
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f000 fc37 	bl	800dbcc <USBD_CtlSendData>
              break;
 800d35e:	e06a      	b.n	800d436 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d360:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d364:	2b00      	cmp	r3, #0
 800d366:	da11      	bge.n	800d38c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d368:	7bbb      	ldrb	r3, [r7, #14]
 800d36a:	f003 020f 	and.w	r2, r3, #15
 800d36e:	6879      	ldr	r1, [r7, #4]
 800d370:	4613      	mov	r3, r2
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	4413      	add	r3, r2
 800d376:	009b      	lsls	r3, r3, #2
 800d378:	440b      	add	r3, r1
 800d37a:	3324      	adds	r3, #36	; 0x24
 800d37c:	881b      	ldrh	r3, [r3, #0]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d117      	bne.n	800d3b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d382:	6839      	ldr	r1, [r7, #0]
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f000 fbb0 	bl	800daea <USBD_CtlError>
                  break;
 800d38a:	e054      	b.n	800d436 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d38c:	7bbb      	ldrb	r3, [r7, #14]
 800d38e:	f003 020f 	and.w	r2, r3, #15
 800d392:	6879      	ldr	r1, [r7, #4]
 800d394:	4613      	mov	r3, r2
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	4413      	add	r3, r2
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	440b      	add	r3, r1
 800d39e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d3a2:	881b      	ldrh	r3, [r3, #0]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d104      	bne.n	800d3b2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d3a8:	6839      	ldr	r1, [r7, #0]
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 fb9d 	bl	800daea <USBD_CtlError>
                  break;
 800d3b0:	e041      	b.n	800d436 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	da0b      	bge.n	800d3d2 <USBD_StdEPReq+0x2b2>
 800d3ba:	7bbb      	ldrb	r3, [r7, #14]
 800d3bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d3c0:	4613      	mov	r3, r2
 800d3c2:	009b      	lsls	r3, r3, #2
 800d3c4:	4413      	add	r3, r2
 800d3c6:	009b      	lsls	r3, r3, #2
 800d3c8:	3310      	adds	r3, #16
 800d3ca:	687a      	ldr	r2, [r7, #4]
 800d3cc:	4413      	add	r3, r2
 800d3ce:	3304      	adds	r3, #4
 800d3d0:	e00b      	b.n	800d3ea <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d3d2:	7bbb      	ldrb	r3, [r7, #14]
 800d3d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d3d8:	4613      	mov	r3, r2
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	4413      	add	r3, r2
 800d3de:	009b      	lsls	r3, r3, #2
 800d3e0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d3e4:	687a      	ldr	r2, [r7, #4]
 800d3e6:	4413      	add	r3, r2
 800d3e8:	3304      	adds	r3, #4
 800d3ea:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d3ec:	7bbb      	ldrb	r3, [r7, #14]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	d002      	beq.n	800d3f8 <USBD_StdEPReq+0x2d8>
 800d3f2:	7bbb      	ldrb	r3, [r7, #14]
 800d3f4:	2b80      	cmp	r3, #128	; 0x80
 800d3f6:	d103      	bne.n	800d400 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	601a      	str	r2, [r3, #0]
 800d3fe:	e00e      	b.n	800d41e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d400:	7bbb      	ldrb	r3, [r7, #14]
 800d402:	4619      	mov	r1, r3
 800d404:	6878      	ldr	r0, [r7, #4]
 800d406:	f001 f8f3 	bl	800e5f0 <USBD_LL_IsStallEP>
 800d40a:	4603      	mov	r3, r0
 800d40c:	2b00      	cmp	r3, #0
 800d40e:	d003      	beq.n	800d418 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d410:	68bb      	ldr	r3, [r7, #8]
 800d412:	2201      	movs	r2, #1
 800d414:	601a      	str	r2, [r3, #0]
 800d416:	e002      	b.n	800d41e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	2200      	movs	r2, #0
 800d41c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	2202      	movs	r2, #2
 800d422:	4619      	mov	r1, r3
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f000 fbd1 	bl	800dbcc <USBD_CtlSendData>
              break;
 800d42a:	e004      	b.n	800d436 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d42c:	6839      	ldr	r1, [r7, #0]
 800d42e:	6878      	ldr	r0, [r7, #4]
 800d430:	f000 fb5b 	bl	800daea <USBD_CtlError>
              break;
 800d434:	bf00      	nop
          }
          break;
 800d436:	e004      	b.n	800d442 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d438:	6839      	ldr	r1, [r7, #0]
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	f000 fb55 	bl	800daea <USBD_CtlError>
          break;
 800d440:	bf00      	nop
      }
      break;
 800d442:	e005      	b.n	800d450 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d444:	6839      	ldr	r1, [r7, #0]
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 fb4f 	bl	800daea <USBD_CtlError>
      break;
 800d44c:	e000      	b.n	800d450 <USBD_StdEPReq+0x330>
      break;
 800d44e:	bf00      	nop
  }

  return ret;
 800d450:	7bfb      	ldrb	r3, [r7, #15]
}
 800d452:	4618      	mov	r0, r3
 800d454:	3710      	adds	r7, #16
 800d456:	46bd      	mov	sp, r7
 800d458:	bd80      	pop	{r7, pc}
	...

0800d45c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d45c:	b580      	push	{r7, lr}
 800d45e:	b084      	sub	sp, #16
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
 800d464:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d466:	2300      	movs	r3, #0
 800d468:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d46a:	2300      	movs	r3, #0
 800d46c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d46e:	2300      	movs	r3, #0
 800d470:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	885b      	ldrh	r3, [r3, #2]
 800d476:	0a1b      	lsrs	r3, r3, #8
 800d478:	b29b      	uxth	r3, r3
 800d47a:	3b01      	subs	r3, #1
 800d47c:	2b06      	cmp	r3, #6
 800d47e:	f200 8128 	bhi.w	800d6d2 <USBD_GetDescriptor+0x276>
 800d482:	a201      	add	r2, pc, #4	; (adr r2, 800d488 <USBD_GetDescriptor+0x2c>)
 800d484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d488:	0800d4a5 	.word	0x0800d4a5
 800d48c:	0800d4bd 	.word	0x0800d4bd
 800d490:	0800d4fd 	.word	0x0800d4fd
 800d494:	0800d6d3 	.word	0x0800d6d3
 800d498:	0800d6d3 	.word	0x0800d6d3
 800d49c:	0800d673 	.word	0x0800d673
 800d4a0:	0800d69f 	.word	0x0800d69f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	687a      	ldr	r2, [r7, #4]
 800d4ae:	7c12      	ldrb	r2, [r2, #16]
 800d4b0:	f107 0108 	add.w	r1, r7, #8
 800d4b4:	4610      	mov	r0, r2
 800d4b6:	4798      	blx	r3
 800d4b8:	60f8      	str	r0, [r7, #12]
      break;
 800d4ba:	e112      	b.n	800d6e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	7c1b      	ldrb	r3, [r3, #16]
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d10d      	bne.n	800d4e0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4cc:	f107 0208 	add.w	r2, r7, #8
 800d4d0:	4610      	mov	r0, r2
 800d4d2:	4798      	blx	r3
 800d4d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d4d6:	68fb      	ldr	r3, [r7, #12]
 800d4d8:	3301      	adds	r3, #1
 800d4da:	2202      	movs	r2, #2
 800d4dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d4de:	e100      	b.n	800d6e2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4e8:	f107 0208 	add.w	r2, r7, #8
 800d4ec:	4610      	mov	r0, r2
 800d4ee:	4798      	blx	r3
 800d4f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	3301      	adds	r3, #1
 800d4f6:	2202      	movs	r2, #2
 800d4f8:	701a      	strb	r2, [r3, #0]
      break;
 800d4fa:	e0f2      	b.n	800d6e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d4fc:	683b      	ldr	r3, [r7, #0]
 800d4fe:	885b      	ldrh	r3, [r3, #2]
 800d500:	b2db      	uxtb	r3, r3
 800d502:	2b05      	cmp	r3, #5
 800d504:	f200 80ac 	bhi.w	800d660 <USBD_GetDescriptor+0x204>
 800d508:	a201      	add	r2, pc, #4	; (adr r2, 800d510 <USBD_GetDescriptor+0xb4>)
 800d50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d50e:	bf00      	nop
 800d510:	0800d529 	.word	0x0800d529
 800d514:	0800d55d 	.word	0x0800d55d
 800d518:	0800d591 	.word	0x0800d591
 800d51c:	0800d5c5 	.word	0x0800d5c5
 800d520:	0800d5f9 	.word	0x0800d5f9
 800d524:	0800d62d 	.word	0x0800d62d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d52e:	685b      	ldr	r3, [r3, #4]
 800d530:	2b00      	cmp	r3, #0
 800d532:	d00b      	beq.n	800d54c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	687a      	ldr	r2, [r7, #4]
 800d53e:	7c12      	ldrb	r2, [r2, #16]
 800d540:	f107 0108 	add.w	r1, r7, #8
 800d544:	4610      	mov	r0, r2
 800d546:	4798      	blx	r3
 800d548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d54a:	e091      	b.n	800d670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d54c:	6839      	ldr	r1, [r7, #0]
 800d54e:	6878      	ldr	r0, [r7, #4]
 800d550:	f000 facb 	bl	800daea <USBD_CtlError>
            err++;
 800d554:	7afb      	ldrb	r3, [r7, #11]
 800d556:	3301      	adds	r3, #1
 800d558:	72fb      	strb	r3, [r7, #11]
          break;
 800d55a:	e089      	b.n	800d670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d562:	689b      	ldr	r3, [r3, #8]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d00b      	beq.n	800d580 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d56e:	689b      	ldr	r3, [r3, #8]
 800d570:	687a      	ldr	r2, [r7, #4]
 800d572:	7c12      	ldrb	r2, [r2, #16]
 800d574:	f107 0108 	add.w	r1, r7, #8
 800d578:	4610      	mov	r0, r2
 800d57a:	4798      	blx	r3
 800d57c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d57e:	e077      	b.n	800d670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d580:	6839      	ldr	r1, [r7, #0]
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f000 fab1 	bl	800daea <USBD_CtlError>
            err++;
 800d588:	7afb      	ldrb	r3, [r7, #11]
 800d58a:	3301      	adds	r3, #1
 800d58c:	72fb      	strb	r3, [r7, #11]
          break;
 800d58e:	e06f      	b.n	800d670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d596:	68db      	ldr	r3, [r3, #12]
 800d598:	2b00      	cmp	r3, #0
 800d59a:	d00b      	beq.n	800d5b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5a2:	68db      	ldr	r3, [r3, #12]
 800d5a4:	687a      	ldr	r2, [r7, #4]
 800d5a6:	7c12      	ldrb	r2, [r2, #16]
 800d5a8:	f107 0108 	add.w	r1, r7, #8
 800d5ac:	4610      	mov	r0, r2
 800d5ae:	4798      	blx	r3
 800d5b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5b2:	e05d      	b.n	800d670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d5b4:	6839      	ldr	r1, [r7, #0]
 800d5b6:	6878      	ldr	r0, [r7, #4]
 800d5b8:	f000 fa97 	bl	800daea <USBD_CtlError>
            err++;
 800d5bc:	7afb      	ldrb	r3, [r7, #11]
 800d5be:	3301      	adds	r3, #1
 800d5c0:	72fb      	strb	r3, [r7, #11]
          break;
 800d5c2:	e055      	b.n	800d670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5ca:	691b      	ldr	r3, [r3, #16]
 800d5cc:	2b00      	cmp	r3, #0
 800d5ce:	d00b      	beq.n	800d5e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5d6:	691b      	ldr	r3, [r3, #16]
 800d5d8:	687a      	ldr	r2, [r7, #4]
 800d5da:	7c12      	ldrb	r2, [r2, #16]
 800d5dc:	f107 0108 	add.w	r1, r7, #8
 800d5e0:	4610      	mov	r0, r2
 800d5e2:	4798      	blx	r3
 800d5e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5e6:	e043      	b.n	800d670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d5e8:	6839      	ldr	r1, [r7, #0]
 800d5ea:	6878      	ldr	r0, [r7, #4]
 800d5ec:	f000 fa7d 	bl	800daea <USBD_CtlError>
            err++;
 800d5f0:	7afb      	ldrb	r3, [r7, #11]
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	72fb      	strb	r3, [r7, #11]
          break;
 800d5f6:	e03b      	b.n	800d670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5fe:	695b      	ldr	r3, [r3, #20]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d00b      	beq.n	800d61c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d60a:	695b      	ldr	r3, [r3, #20]
 800d60c:	687a      	ldr	r2, [r7, #4]
 800d60e:	7c12      	ldrb	r2, [r2, #16]
 800d610:	f107 0108 	add.w	r1, r7, #8
 800d614:	4610      	mov	r0, r2
 800d616:	4798      	blx	r3
 800d618:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d61a:	e029      	b.n	800d670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d61c:	6839      	ldr	r1, [r7, #0]
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f000 fa63 	bl	800daea <USBD_CtlError>
            err++;
 800d624:	7afb      	ldrb	r3, [r7, #11]
 800d626:	3301      	adds	r3, #1
 800d628:	72fb      	strb	r3, [r7, #11]
          break;
 800d62a:	e021      	b.n	800d670 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d632:	699b      	ldr	r3, [r3, #24]
 800d634:	2b00      	cmp	r3, #0
 800d636:	d00b      	beq.n	800d650 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d63e:	699b      	ldr	r3, [r3, #24]
 800d640:	687a      	ldr	r2, [r7, #4]
 800d642:	7c12      	ldrb	r2, [r2, #16]
 800d644:	f107 0108 	add.w	r1, r7, #8
 800d648:	4610      	mov	r0, r2
 800d64a:	4798      	blx	r3
 800d64c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d64e:	e00f      	b.n	800d670 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d650:	6839      	ldr	r1, [r7, #0]
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f000 fa49 	bl	800daea <USBD_CtlError>
            err++;
 800d658:	7afb      	ldrb	r3, [r7, #11]
 800d65a:	3301      	adds	r3, #1
 800d65c:	72fb      	strb	r3, [r7, #11]
          break;
 800d65e:	e007      	b.n	800d670 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d660:	6839      	ldr	r1, [r7, #0]
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f000 fa41 	bl	800daea <USBD_CtlError>
          err++;
 800d668:	7afb      	ldrb	r3, [r7, #11]
 800d66a:	3301      	adds	r3, #1
 800d66c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d66e:	bf00      	nop
      }
      break;
 800d670:	e037      	b.n	800d6e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	7c1b      	ldrb	r3, [r3, #16]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d109      	bne.n	800d68e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d682:	f107 0208 	add.w	r2, r7, #8
 800d686:	4610      	mov	r0, r2
 800d688:	4798      	blx	r3
 800d68a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d68c:	e029      	b.n	800d6e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d68e:	6839      	ldr	r1, [r7, #0]
 800d690:	6878      	ldr	r0, [r7, #4]
 800d692:	f000 fa2a 	bl	800daea <USBD_CtlError>
        err++;
 800d696:	7afb      	ldrb	r3, [r7, #11]
 800d698:	3301      	adds	r3, #1
 800d69a:	72fb      	strb	r3, [r7, #11]
      break;
 800d69c:	e021      	b.n	800d6e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	7c1b      	ldrb	r3, [r3, #16]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d10d      	bne.n	800d6c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6ae:	f107 0208 	add.w	r2, r7, #8
 800d6b2:	4610      	mov	r0, r2
 800d6b4:	4798      	blx	r3
 800d6b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	3301      	adds	r3, #1
 800d6bc:	2207      	movs	r2, #7
 800d6be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d6c0:	e00f      	b.n	800d6e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d6c2:	6839      	ldr	r1, [r7, #0]
 800d6c4:	6878      	ldr	r0, [r7, #4]
 800d6c6:	f000 fa10 	bl	800daea <USBD_CtlError>
        err++;
 800d6ca:	7afb      	ldrb	r3, [r7, #11]
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	72fb      	strb	r3, [r7, #11]
      break;
 800d6d0:	e007      	b.n	800d6e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d6d2:	6839      	ldr	r1, [r7, #0]
 800d6d4:	6878      	ldr	r0, [r7, #4]
 800d6d6:	f000 fa08 	bl	800daea <USBD_CtlError>
      err++;
 800d6da:	7afb      	ldrb	r3, [r7, #11]
 800d6dc:	3301      	adds	r3, #1
 800d6de:	72fb      	strb	r3, [r7, #11]
      break;
 800d6e0:	bf00      	nop
  }

  if (err != 0U)
 800d6e2:	7afb      	ldrb	r3, [r7, #11]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d11e      	bne.n	800d726 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	88db      	ldrh	r3, [r3, #6]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d016      	beq.n	800d71e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d6f0:	893b      	ldrh	r3, [r7, #8]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d00e      	beq.n	800d714 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d6f6:	683b      	ldr	r3, [r7, #0]
 800d6f8:	88da      	ldrh	r2, [r3, #6]
 800d6fa:	893b      	ldrh	r3, [r7, #8]
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	bf28      	it	cs
 800d700:	4613      	movcs	r3, r2
 800d702:	b29b      	uxth	r3, r3
 800d704:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d706:	893b      	ldrh	r3, [r7, #8]
 800d708:	461a      	mov	r2, r3
 800d70a:	68f9      	ldr	r1, [r7, #12]
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 fa5d 	bl	800dbcc <USBD_CtlSendData>
 800d712:	e009      	b.n	800d728 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d714:	6839      	ldr	r1, [r7, #0]
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f000 f9e7 	bl	800daea <USBD_CtlError>
 800d71c:	e004      	b.n	800d728 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d71e:	6878      	ldr	r0, [r7, #4]
 800d720:	f000 faae 	bl	800dc80 <USBD_CtlSendStatus>
 800d724:	e000      	b.n	800d728 <USBD_GetDescriptor+0x2cc>
    return;
 800d726:	bf00      	nop
  }
}
 800d728:	3710      	adds	r7, #16
 800d72a:	46bd      	mov	sp, r7
 800d72c:	bd80      	pop	{r7, pc}
 800d72e:	bf00      	nop

0800d730 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b084      	sub	sp, #16
 800d734:	af00      	add	r7, sp, #0
 800d736:	6078      	str	r0, [r7, #4]
 800d738:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d73a:	683b      	ldr	r3, [r7, #0]
 800d73c:	889b      	ldrh	r3, [r3, #4]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d131      	bne.n	800d7a6 <USBD_SetAddress+0x76>
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	88db      	ldrh	r3, [r3, #6]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d12d      	bne.n	800d7a6 <USBD_SetAddress+0x76>
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	885b      	ldrh	r3, [r3, #2]
 800d74e:	2b7f      	cmp	r3, #127	; 0x7f
 800d750:	d829      	bhi.n	800d7a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d752:	683b      	ldr	r3, [r7, #0]
 800d754:	885b      	ldrh	r3, [r3, #2]
 800d756:	b2db      	uxtb	r3, r3
 800d758:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d75c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d764:	b2db      	uxtb	r3, r3
 800d766:	2b03      	cmp	r3, #3
 800d768:	d104      	bne.n	800d774 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d76a:	6839      	ldr	r1, [r7, #0]
 800d76c:	6878      	ldr	r0, [r7, #4]
 800d76e:	f000 f9bc 	bl	800daea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d772:	e01d      	b.n	800d7b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	7bfa      	ldrb	r2, [r7, #15]
 800d778:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d77c:	7bfb      	ldrb	r3, [r7, #15]
 800d77e:	4619      	mov	r1, r3
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 ff61 	bl	800e648 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f000 fa7a 	bl	800dc80 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d78c:	7bfb      	ldrb	r3, [r7, #15]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d004      	beq.n	800d79c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2202      	movs	r2, #2
 800d796:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d79a:	e009      	b.n	800d7b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2201      	movs	r2, #1
 800d7a0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7a4:	e004      	b.n	800d7b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d7a6:	6839      	ldr	r1, [r7, #0]
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f000 f99e 	bl	800daea <USBD_CtlError>
  }
}
 800d7ae:	bf00      	nop
 800d7b0:	bf00      	nop
 800d7b2:	3710      	adds	r7, #16
 800d7b4:	46bd      	mov	sp, r7
 800d7b6:	bd80      	pop	{r7, pc}

0800d7b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d7b8:	b580      	push	{r7, lr}
 800d7ba:	b084      	sub	sp, #16
 800d7bc:	af00      	add	r7, sp, #0
 800d7be:	6078      	str	r0, [r7, #4]
 800d7c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d7c6:	683b      	ldr	r3, [r7, #0]
 800d7c8:	885b      	ldrh	r3, [r3, #2]
 800d7ca:	b2da      	uxtb	r2, r3
 800d7cc:	4b4e      	ldr	r3, [pc, #312]	; (800d908 <USBD_SetConfig+0x150>)
 800d7ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d7d0:	4b4d      	ldr	r3, [pc, #308]	; (800d908 <USBD_SetConfig+0x150>)
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d905      	bls.n	800d7e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d7d8:	6839      	ldr	r1, [r7, #0]
 800d7da:	6878      	ldr	r0, [r7, #4]
 800d7dc:	f000 f985 	bl	800daea <USBD_CtlError>
    return USBD_FAIL;
 800d7e0:	2303      	movs	r3, #3
 800d7e2:	e08c      	b.n	800d8fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7ea:	b2db      	uxtb	r3, r3
 800d7ec:	2b02      	cmp	r3, #2
 800d7ee:	d002      	beq.n	800d7f6 <USBD_SetConfig+0x3e>
 800d7f0:	2b03      	cmp	r3, #3
 800d7f2:	d029      	beq.n	800d848 <USBD_SetConfig+0x90>
 800d7f4:	e075      	b.n	800d8e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d7f6:	4b44      	ldr	r3, [pc, #272]	; (800d908 <USBD_SetConfig+0x150>)
 800d7f8:	781b      	ldrb	r3, [r3, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d020      	beq.n	800d840 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d7fe:	4b42      	ldr	r3, [pc, #264]	; (800d908 <USBD_SetConfig+0x150>)
 800d800:	781b      	ldrb	r3, [r3, #0]
 800d802:	461a      	mov	r2, r3
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d808:	4b3f      	ldr	r3, [pc, #252]	; (800d908 <USBD_SetConfig+0x150>)
 800d80a:	781b      	ldrb	r3, [r3, #0]
 800d80c:	4619      	mov	r1, r3
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	f7fe ffe7 	bl	800c7e2 <USBD_SetClassConfig>
 800d814:	4603      	mov	r3, r0
 800d816:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d818:	7bfb      	ldrb	r3, [r7, #15]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d008      	beq.n	800d830 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d81e:	6839      	ldr	r1, [r7, #0]
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	f000 f962 	bl	800daea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2202      	movs	r2, #2
 800d82a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d82e:	e065      	b.n	800d8fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d830:	6878      	ldr	r0, [r7, #4]
 800d832:	f000 fa25 	bl	800dc80 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2203      	movs	r2, #3
 800d83a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d83e:	e05d      	b.n	800d8fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d840:	6878      	ldr	r0, [r7, #4]
 800d842:	f000 fa1d 	bl	800dc80 <USBD_CtlSendStatus>
      break;
 800d846:	e059      	b.n	800d8fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d848:	4b2f      	ldr	r3, [pc, #188]	; (800d908 <USBD_SetConfig+0x150>)
 800d84a:	781b      	ldrb	r3, [r3, #0]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d112      	bne.n	800d876 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	2202      	movs	r2, #2
 800d854:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d858:	4b2b      	ldr	r3, [pc, #172]	; (800d908 <USBD_SetConfig+0x150>)
 800d85a:	781b      	ldrb	r3, [r3, #0]
 800d85c:	461a      	mov	r2, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d862:	4b29      	ldr	r3, [pc, #164]	; (800d908 <USBD_SetConfig+0x150>)
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	4619      	mov	r1, r3
 800d868:	6878      	ldr	r0, [r7, #4]
 800d86a:	f7fe ffd6 	bl	800c81a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d86e:	6878      	ldr	r0, [r7, #4]
 800d870:	f000 fa06 	bl	800dc80 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d874:	e042      	b.n	800d8fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d876:	4b24      	ldr	r3, [pc, #144]	; (800d908 <USBD_SetConfig+0x150>)
 800d878:	781b      	ldrb	r3, [r3, #0]
 800d87a:	461a      	mov	r2, r3
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	685b      	ldr	r3, [r3, #4]
 800d880:	429a      	cmp	r2, r3
 800d882:	d02a      	beq.n	800d8da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	685b      	ldr	r3, [r3, #4]
 800d888:	b2db      	uxtb	r3, r3
 800d88a:	4619      	mov	r1, r3
 800d88c:	6878      	ldr	r0, [r7, #4]
 800d88e:	f7fe ffc4 	bl	800c81a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d892:	4b1d      	ldr	r3, [pc, #116]	; (800d908 <USBD_SetConfig+0x150>)
 800d894:	781b      	ldrb	r3, [r3, #0]
 800d896:	461a      	mov	r2, r3
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d89c:	4b1a      	ldr	r3, [pc, #104]	; (800d908 <USBD_SetConfig+0x150>)
 800d89e:	781b      	ldrb	r3, [r3, #0]
 800d8a0:	4619      	mov	r1, r3
 800d8a2:	6878      	ldr	r0, [r7, #4]
 800d8a4:	f7fe ff9d 	bl	800c7e2 <USBD_SetClassConfig>
 800d8a8:	4603      	mov	r3, r0
 800d8aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d8ac:	7bfb      	ldrb	r3, [r7, #15]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d00f      	beq.n	800d8d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d8b2:	6839      	ldr	r1, [r7, #0]
 800d8b4:	6878      	ldr	r0, [r7, #4]
 800d8b6:	f000 f918 	bl	800daea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f7fe ffa9 	bl	800c81a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	2202      	movs	r2, #2
 800d8cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d8d0:	e014      	b.n	800d8fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f000 f9d4 	bl	800dc80 <USBD_CtlSendStatus>
      break;
 800d8d8:	e010      	b.n	800d8fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d8da:	6878      	ldr	r0, [r7, #4]
 800d8dc:	f000 f9d0 	bl	800dc80 <USBD_CtlSendStatus>
      break;
 800d8e0:	e00c      	b.n	800d8fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d8e2:	6839      	ldr	r1, [r7, #0]
 800d8e4:	6878      	ldr	r0, [r7, #4]
 800d8e6:	f000 f900 	bl	800daea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d8ea:	4b07      	ldr	r3, [pc, #28]	; (800d908 <USBD_SetConfig+0x150>)
 800d8ec:	781b      	ldrb	r3, [r3, #0]
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f7fe ff92 	bl	800c81a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d8f6:	2303      	movs	r3, #3
 800d8f8:	73fb      	strb	r3, [r7, #15]
      break;
 800d8fa:	bf00      	nop
  }

  return ret;
 800d8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3710      	adds	r7, #16
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}
 800d906:	bf00      	nop
 800d908:	2000065c 	.word	0x2000065c

0800d90c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b082      	sub	sp, #8
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
 800d914:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d916:	683b      	ldr	r3, [r7, #0]
 800d918:	88db      	ldrh	r3, [r3, #6]
 800d91a:	2b01      	cmp	r3, #1
 800d91c:	d004      	beq.n	800d928 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d91e:	6839      	ldr	r1, [r7, #0]
 800d920:	6878      	ldr	r0, [r7, #4]
 800d922:	f000 f8e2 	bl	800daea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d926:	e023      	b.n	800d970 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d92e:	b2db      	uxtb	r3, r3
 800d930:	2b02      	cmp	r3, #2
 800d932:	dc02      	bgt.n	800d93a <USBD_GetConfig+0x2e>
 800d934:	2b00      	cmp	r3, #0
 800d936:	dc03      	bgt.n	800d940 <USBD_GetConfig+0x34>
 800d938:	e015      	b.n	800d966 <USBD_GetConfig+0x5a>
 800d93a:	2b03      	cmp	r3, #3
 800d93c:	d00b      	beq.n	800d956 <USBD_GetConfig+0x4a>
 800d93e:	e012      	b.n	800d966 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2200      	movs	r2, #0
 800d944:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	3308      	adds	r3, #8
 800d94a:	2201      	movs	r2, #1
 800d94c:	4619      	mov	r1, r3
 800d94e:	6878      	ldr	r0, [r7, #4]
 800d950:	f000 f93c 	bl	800dbcc <USBD_CtlSendData>
        break;
 800d954:	e00c      	b.n	800d970 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	3304      	adds	r3, #4
 800d95a:	2201      	movs	r2, #1
 800d95c:	4619      	mov	r1, r3
 800d95e:	6878      	ldr	r0, [r7, #4]
 800d960:	f000 f934 	bl	800dbcc <USBD_CtlSendData>
        break;
 800d964:	e004      	b.n	800d970 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d966:	6839      	ldr	r1, [r7, #0]
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f000 f8be 	bl	800daea <USBD_CtlError>
        break;
 800d96e:	bf00      	nop
}
 800d970:	bf00      	nop
 800d972:	3708      	adds	r7, #8
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}

0800d978 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d978:	b580      	push	{r7, lr}
 800d97a:	b082      	sub	sp, #8
 800d97c:	af00      	add	r7, sp, #0
 800d97e:	6078      	str	r0, [r7, #4]
 800d980:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d988:	b2db      	uxtb	r3, r3
 800d98a:	3b01      	subs	r3, #1
 800d98c:	2b02      	cmp	r3, #2
 800d98e:	d81e      	bhi.n	800d9ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	88db      	ldrh	r3, [r3, #6]
 800d994:	2b02      	cmp	r3, #2
 800d996:	d004      	beq.n	800d9a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d998:	6839      	ldr	r1, [r7, #0]
 800d99a:	6878      	ldr	r0, [r7, #4]
 800d99c:	f000 f8a5 	bl	800daea <USBD_CtlError>
        break;
 800d9a0:	e01a      	b.n	800d9d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d005      	beq.n	800d9be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	68db      	ldr	r3, [r3, #12]
 800d9b6:	f043 0202 	orr.w	r2, r3, #2
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	330c      	adds	r3, #12
 800d9c2:	2202      	movs	r2, #2
 800d9c4:	4619      	mov	r1, r3
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 f900 	bl	800dbcc <USBD_CtlSendData>
      break;
 800d9cc:	e004      	b.n	800d9d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d9ce:	6839      	ldr	r1, [r7, #0]
 800d9d0:	6878      	ldr	r0, [r7, #4]
 800d9d2:	f000 f88a 	bl	800daea <USBD_CtlError>
      break;
 800d9d6:	bf00      	nop
  }
}
 800d9d8:	bf00      	nop
 800d9da:	3708      	adds	r7, #8
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	bd80      	pop	{r7, pc}

0800d9e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9e0:	b580      	push	{r7, lr}
 800d9e2:	b082      	sub	sp, #8
 800d9e4:	af00      	add	r7, sp, #0
 800d9e6:	6078      	str	r0, [r7, #4]
 800d9e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d9ea:	683b      	ldr	r3, [r7, #0]
 800d9ec:	885b      	ldrh	r3, [r3, #2]
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	d107      	bne.n	800da02 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	2201      	movs	r2, #1
 800d9f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d9fa:	6878      	ldr	r0, [r7, #4]
 800d9fc:	f000 f940 	bl	800dc80 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800da00:	e013      	b.n	800da2a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800da02:	683b      	ldr	r3, [r7, #0]
 800da04:	885b      	ldrh	r3, [r3, #2]
 800da06:	2b02      	cmp	r3, #2
 800da08:	d10b      	bne.n	800da22 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	889b      	ldrh	r3, [r3, #4]
 800da0e:	0a1b      	lsrs	r3, r3, #8
 800da10:	b29b      	uxth	r3, r3
 800da12:	b2da      	uxtb	r2, r3
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f000 f930 	bl	800dc80 <USBD_CtlSendStatus>
}
 800da20:	e003      	b.n	800da2a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800da22:	6839      	ldr	r1, [r7, #0]
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f000 f860 	bl	800daea <USBD_CtlError>
}
 800da2a:	bf00      	nop
 800da2c:	3708      	adds	r7, #8
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}

0800da32 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da32:	b580      	push	{r7, lr}
 800da34:	b082      	sub	sp, #8
 800da36:	af00      	add	r7, sp, #0
 800da38:	6078      	str	r0, [r7, #4]
 800da3a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da42:	b2db      	uxtb	r3, r3
 800da44:	3b01      	subs	r3, #1
 800da46:	2b02      	cmp	r3, #2
 800da48:	d80b      	bhi.n	800da62 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da4a:	683b      	ldr	r3, [r7, #0]
 800da4c:	885b      	ldrh	r3, [r3, #2]
 800da4e:	2b01      	cmp	r3, #1
 800da50:	d10c      	bne.n	800da6c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	2200      	movs	r2, #0
 800da56:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 f910 	bl	800dc80 <USBD_CtlSendStatus>
      }
      break;
 800da60:	e004      	b.n	800da6c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800da62:	6839      	ldr	r1, [r7, #0]
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f000 f840 	bl	800daea <USBD_CtlError>
      break;
 800da6a:	e000      	b.n	800da6e <USBD_ClrFeature+0x3c>
      break;
 800da6c:	bf00      	nop
  }
}
 800da6e:	bf00      	nop
 800da70:	3708      	adds	r7, #8
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}

0800da76 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800da76:	b580      	push	{r7, lr}
 800da78:	b084      	sub	sp, #16
 800da7a:	af00      	add	r7, sp, #0
 800da7c:	6078      	str	r0, [r7, #4]
 800da7e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	781a      	ldrb	r2, [r3, #0]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800da8c:	68fb      	ldr	r3, [r7, #12]
 800da8e:	3301      	adds	r3, #1
 800da90:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	781a      	ldrb	r2, [r3, #0]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	3301      	adds	r3, #1
 800da9e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800daa0:	68f8      	ldr	r0, [r7, #12]
 800daa2:	f7ff fa41 	bl	800cf28 <SWAPBYTE>
 800daa6:	4603      	mov	r3, r0
 800daa8:	461a      	mov	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	3301      	adds	r3, #1
 800dab2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	3301      	adds	r3, #1
 800dab8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800daba:	68f8      	ldr	r0, [r7, #12]
 800dabc:	f7ff fa34 	bl	800cf28 <SWAPBYTE>
 800dac0:	4603      	mov	r3, r0
 800dac2:	461a      	mov	r2, r3
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	3301      	adds	r3, #1
 800dacc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	3301      	adds	r3, #1
 800dad2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800dad4:	68f8      	ldr	r0, [r7, #12]
 800dad6:	f7ff fa27 	bl	800cf28 <SWAPBYTE>
 800dada:	4603      	mov	r3, r0
 800dadc:	461a      	mov	r2, r3
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	80da      	strh	r2, [r3, #6]
}
 800dae2:	bf00      	nop
 800dae4:	3710      	adds	r7, #16
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}

0800daea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800daea:	b580      	push	{r7, lr}
 800daec:	b082      	sub	sp, #8
 800daee:	af00      	add	r7, sp, #0
 800daf0:	6078      	str	r0, [r7, #4]
 800daf2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800daf4:	2180      	movs	r1, #128	; 0x80
 800daf6:	6878      	ldr	r0, [r7, #4]
 800daf8:	f000 fd3c 	bl	800e574 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800dafc:	2100      	movs	r1, #0
 800dafe:	6878      	ldr	r0, [r7, #4]
 800db00:	f000 fd38 	bl	800e574 <USBD_LL_StallEP>
}
 800db04:	bf00      	nop
 800db06:	3708      	adds	r7, #8
 800db08:	46bd      	mov	sp, r7
 800db0a:	bd80      	pop	{r7, pc}

0800db0c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800db0c:	b580      	push	{r7, lr}
 800db0e:	b086      	sub	sp, #24
 800db10:	af00      	add	r7, sp, #0
 800db12:	60f8      	str	r0, [r7, #12]
 800db14:	60b9      	str	r1, [r7, #8]
 800db16:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800db18:	2300      	movs	r3, #0
 800db1a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d036      	beq.n	800db90 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800db26:	6938      	ldr	r0, [r7, #16]
 800db28:	f000 f836 	bl	800db98 <USBD_GetLen>
 800db2c:	4603      	mov	r3, r0
 800db2e:	3301      	adds	r3, #1
 800db30:	b29b      	uxth	r3, r3
 800db32:	005b      	lsls	r3, r3, #1
 800db34:	b29a      	uxth	r2, r3
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800db3a:	7dfb      	ldrb	r3, [r7, #23]
 800db3c:	68ba      	ldr	r2, [r7, #8]
 800db3e:	4413      	add	r3, r2
 800db40:	687a      	ldr	r2, [r7, #4]
 800db42:	7812      	ldrb	r2, [r2, #0]
 800db44:	701a      	strb	r2, [r3, #0]
  idx++;
 800db46:	7dfb      	ldrb	r3, [r7, #23]
 800db48:	3301      	adds	r3, #1
 800db4a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800db4c:	7dfb      	ldrb	r3, [r7, #23]
 800db4e:	68ba      	ldr	r2, [r7, #8]
 800db50:	4413      	add	r3, r2
 800db52:	2203      	movs	r2, #3
 800db54:	701a      	strb	r2, [r3, #0]
  idx++;
 800db56:	7dfb      	ldrb	r3, [r7, #23]
 800db58:	3301      	adds	r3, #1
 800db5a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800db5c:	e013      	b.n	800db86 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800db5e:	7dfb      	ldrb	r3, [r7, #23]
 800db60:	68ba      	ldr	r2, [r7, #8]
 800db62:	4413      	add	r3, r2
 800db64:	693a      	ldr	r2, [r7, #16]
 800db66:	7812      	ldrb	r2, [r2, #0]
 800db68:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800db6a:	693b      	ldr	r3, [r7, #16]
 800db6c:	3301      	adds	r3, #1
 800db6e:	613b      	str	r3, [r7, #16]
    idx++;
 800db70:	7dfb      	ldrb	r3, [r7, #23]
 800db72:	3301      	adds	r3, #1
 800db74:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800db76:	7dfb      	ldrb	r3, [r7, #23]
 800db78:	68ba      	ldr	r2, [r7, #8]
 800db7a:	4413      	add	r3, r2
 800db7c:	2200      	movs	r2, #0
 800db7e:	701a      	strb	r2, [r3, #0]
    idx++;
 800db80:	7dfb      	ldrb	r3, [r7, #23]
 800db82:	3301      	adds	r3, #1
 800db84:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	781b      	ldrb	r3, [r3, #0]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d1e7      	bne.n	800db5e <USBD_GetString+0x52>
 800db8e:	e000      	b.n	800db92 <USBD_GetString+0x86>
    return;
 800db90:	bf00      	nop
  }
}
 800db92:	3718      	adds	r7, #24
 800db94:	46bd      	mov	sp, r7
 800db96:	bd80      	pop	{r7, pc}

0800db98 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800db98:	b480      	push	{r7}
 800db9a:	b085      	sub	sp, #20
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dba0:	2300      	movs	r3, #0
 800dba2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dba8:	e005      	b.n	800dbb6 <USBD_GetLen+0x1e>
  {
    len++;
 800dbaa:	7bfb      	ldrb	r3, [r7, #15]
 800dbac:	3301      	adds	r3, #1
 800dbae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	781b      	ldrb	r3, [r3, #0]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d1f5      	bne.n	800dbaa <USBD_GetLen+0x12>
  }

  return len;
 800dbbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbc0:	4618      	mov	r0, r3
 800dbc2:	3714      	adds	r7, #20
 800dbc4:	46bd      	mov	sp, r7
 800dbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbca:	4770      	bx	lr

0800dbcc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dbcc:	b580      	push	{r7, lr}
 800dbce:	b084      	sub	sp, #16
 800dbd0:	af00      	add	r7, sp, #0
 800dbd2:	60f8      	str	r0, [r7, #12]
 800dbd4:	60b9      	str	r1, [r7, #8]
 800dbd6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2202      	movs	r2, #2
 800dbdc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	687a      	ldr	r2, [r7, #4]
 800dbe4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	687a      	ldr	r2, [r7, #4]
 800dbea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	68ba      	ldr	r2, [r7, #8]
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	68f8      	ldr	r0, [r7, #12]
 800dbf4:	f000 fd47 	bl	800e686 <USBD_LL_Transmit>

  return USBD_OK;
 800dbf8:	2300      	movs	r3, #0
}
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	3710      	adds	r7, #16
 800dbfe:	46bd      	mov	sp, r7
 800dc00:	bd80      	pop	{r7, pc}

0800dc02 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dc02:	b580      	push	{r7, lr}
 800dc04:	b084      	sub	sp, #16
 800dc06:	af00      	add	r7, sp, #0
 800dc08:	60f8      	str	r0, [r7, #12]
 800dc0a:	60b9      	str	r1, [r7, #8]
 800dc0c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	68ba      	ldr	r2, [r7, #8]
 800dc12:	2100      	movs	r1, #0
 800dc14:	68f8      	ldr	r0, [r7, #12]
 800dc16:	f000 fd36 	bl	800e686 <USBD_LL_Transmit>

  return USBD_OK;
 800dc1a:	2300      	movs	r3, #0
}
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	3710      	adds	r7, #16
 800dc20:	46bd      	mov	sp, r7
 800dc22:	bd80      	pop	{r7, pc}

0800dc24 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b084      	sub	sp, #16
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	60b9      	str	r1, [r7, #8]
 800dc2e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2203      	movs	r2, #3
 800dc34:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	687a      	ldr	r2, [r7, #4]
 800dc3c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	687a      	ldr	r2, [r7, #4]
 800dc44:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	68ba      	ldr	r2, [r7, #8]
 800dc4c:	2100      	movs	r1, #0
 800dc4e:	68f8      	ldr	r0, [r7, #12]
 800dc50:	f000 fd3a 	bl	800e6c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc54:	2300      	movs	r3, #0
}
 800dc56:	4618      	mov	r0, r3
 800dc58:	3710      	adds	r7, #16
 800dc5a:	46bd      	mov	sp, r7
 800dc5c:	bd80      	pop	{r7, pc}

0800dc5e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dc5e:	b580      	push	{r7, lr}
 800dc60:	b084      	sub	sp, #16
 800dc62:	af00      	add	r7, sp, #0
 800dc64:	60f8      	str	r0, [r7, #12]
 800dc66:	60b9      	str	r1, [r7, #8]
 800dc68:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	68ba      	ldr	r2, [r7, #8]
 800dc6e:	2100      	movs	r1, #0
 800dc70:	68f8      	ldr	r0, [r7, #12]
 800dc72:	f000 fd29 	bl	800e6c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dc76:	2300      	movs	r3, #0
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3710      	adds	r7, #16
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	2204      	movs	r2, #4
 800dc8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dc90:	2300      	movs	r3, #0
 800dc92:	2200      	movs	r2, #0
 800dc94:	2100      	movs	r1, #0
 800dc96:	6878      	ldr	r0, [r7, #4]
 800dc98:	f000 fcf5 	bl	800e686 <USBD_LL_Transmit>

  return USBD_OK;
 800dc9c:	2300      	movs	r3, #0
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3708      	adds	r7, #8
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}

0800dca6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dca6:	b580      	push	{r7, lr}
 800dca8:	b082      	sub	sp, #8
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	2205      	movs	r2, #5
 800dcb2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dcb6:	2300      	movs	r3, #0
 800dcb8:	2200      	movs	r2, #0
 800dcba:	2100      	movs	r1, #0
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f000 fd03 	bl	800e6c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dcc2:	2300      	movs	r3, #0
}
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	3708      	adds	r7, #8
 800dcc8:	46bd      	mov	sp, r7
 800dcca:	bd80      	pop	{r7, pc}

0800dccc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b087      	sub	sp, #28
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	60f8      	str	r0, [r7, #12]
 800dcd4:	60b9      	str	r1, [r7, #8]
 800dcd6:	4613      	mov	r3, r2
 800dcd8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dcde:	2300      	movs	r3, #0
 800dce0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dce2:	4b1f      	ldr	r3, [pc, #124]	; (800dd60 <FATFS_LinkDriverEx+0x94>)
 800dce4:	7a5b      	ldrb	r3, [r3, #9]
 800dce6:	b2db      	uxtb	r3, r3
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d131      	bne.n	800dd50 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dcec:	4b1c      	ldr	r3, [pc, #112]	; (800dd60 <FATFS_LinkDriverEx+0x94>)
 800dcee:	7a5b      	ldrb	r3, [r3, #9]
 800dcf0:	b2db      	uxtb	r3, r3
 800dcf2:	461a      	mov	r2, r3
 800dcf4:	4b1a      	ldr	r3, [pc, #104]	; (800dd60 <FATFS_LinkDriverEx+0x94>)
 800dcf6:	2100      	movs	r1, #0
 800dcf8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dcfa:	4b19      	ldr	r3, [pc, #100]	; (800dd60 <FATFS_LinkDriverEx+0x94>)
 800dcfc:	7a5b      	ldrb	r3, [r3, #9]
 800dcfe:	b2db      	uxtb	r3, r3
 800dd00:	4a17      	ldr	r2, [pc, #92]	; (800dd60 <FATFS_LinkDriverEx+0x94>)
 800dd02:	009b      	lsls	r3, r3, #2
 800dd04:	4413      	add	r3, r2
 800dd06:	68fa      	ldr	r2, [r7, #12]
 800dd08:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dd0a:	4b15      	ldr	r3, [pc, #84]	; (800dd60 <FATFS_LinkDriverEx+0x94>)
 800dd0c:	7a5b      	ldrb	r3, [r3, #9]
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	461a      	mov	r2, r3
 800dd12:	4b13      	ldr	r3, [pc, #76]	; (800dd60 <FATFS_LinkDriverEx+0x94>)
 800dd14:	4413      	add	r3, r2
 800dd16:	79fa      	ldrb	r2, [r7, #7]
 800dd18:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dd1a:	4b11      	ldr	r3, [pc, #68]	; (800dd60 <FATFS_LinkDriverEx+0x94>)
 800dd1c:	7a5b      	ldrb	r3, [r3, #9]
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	1c5a      	adds	r2, r3, #1
 800dd22:	b2d1      	uxtb	r1, r2
 800dd24:	4a0e      	ldr	r2, [pc, #56]	; (800dd60 <FATFS_LinkDriverEx+0x94>)
 800dd26:	7251      	strb	r1, [r2, #9]
 800dd28:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dd2a:	7dbb      	ldrb	r3, [r7, #22]
 800dd2c:	3330      	adds	r3, #48	; 0x30
 800dd2e:	b2da      	uxtb	r2, r3
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dd34:	68bb      	ldr	r3, [r7, #8]
 800dd36:	3301      	adds	r3, #1
 800dd38:	223a      	movs	r2, #58	; 0x3a
 800dd3a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	3302      	adds	r3, #2
 800dd40:	222f      	movs	r2, #47	; 0x2f
 800dd42:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	3303      	adds	r3, #3
 800dd48:	2200      	movs	r2, #0
 800dd4a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dd50:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	371c      	adds	r7, #28
 800dd56:	46bd      	mov	sp, r7
 800dd58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5c:	4770      	bx	lr
 800dd5e:	bf00      	nop
 800dd60:	20000660 	.word	0x20000660

0800dd64 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b082      	sub	sp, #8
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
 800dd6c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dd6e:	2200      	movs	r2, #0
 800dd70:	6839      	ldr	r1, [r7, #0]
 800dd72:	6878      	ldr	r0, [r7, #4]
 800dd74:	f7ff ffaa 	bl	800dccc <FATFS_LinkDriverEx>
 800dd78:	4603      	mov	r3, r0
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	3708      	adds	r7, #8
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	bd80      	pop	{r7, pc}
	...

0800dd84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800dd88:	2200      	movs	r2, #0
 800dd8a:	4912      	ldr	r1, [pc, #72]	; (800ddd4 <MX_USB_DEVICE_Init+0x50>)
 800dd8c:	4812      	ldr	r0, [pc, #72]	; (800ddd8 <MX_USB_DEVICE_Init+0x54>)
 800dd8e:	f7fe fcab 	bl	800c6e8 <USBD_Init>
 800dd92:	4603      	mov	r3, r0
 800dd94:	2b00      	cmp	r3, #0
 800dd96:	d001      	beq.n	800dd9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800dd98:	f7f4 fbaa 	bl	80024f0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800dd9c:	490f      	ldr	r1, [pc, #60]	; (800dddc <MX_USB_DEVICE_Init+0x58>)
 800dd9e:	480e      	ldr	r0, [pc, #56]	; (800ddd8 <MX_USB_DEVICE_Init+0x54>)
 800dda0:	f7fe fcd2 	bl	800c748 <USBD_RegisterClass>
 800dda4:	4603      	mov	r3, r0
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	d001      	beq.n	800ddae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ddaa:	f7f4 fba1 	bl	80024f0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ddae:	490c      	ldr	r1, [pc, #48]	; (800dde0 <MX_USB_DEVICE_Init+0x5c>)
 800ddb0:	4809      	ldr	r0, [pc, #36]	; (800ddd8 <MX_USB_DEVICE_Init+0x54>)
 800ddb2:	f7fe fbc3 	bl	800c53c <USBD_CDC_RegisterInterface>
 800ddb6:	4603      	mov	r3, r0
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d001      	beq.n	800ddc0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ddbc:	f7f4 fb98 	bl	80024f0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ddc0:	4805      	ldr	r0, [pc, #20]	; (800ddd8 <MX_USB_DEVICE_Init+0x54>)
 800ddc2:	f7fe fcf7 	bl	800c7b4 <USBD_Start>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d001      	beq.n	800ddd0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ddcc:	f7f4 fb90 	bl	80024f0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ddd0:	bf00      	nop
 800ddd2:	bd80      	pop	{r7, pc}
 800ddd4:	200000ac 	.word	0x200000ac
 800ddd8:	2000066c 	.word	0x2000066c
 800dddc:	20000018 	.word	0x20000018
 800dde0:	20000098 	.word	0x20000098

0800dde4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800dde8:	2200      	movs	r2, #0
 800ddea:	4905      	ldr	r1, [pc, #20]	; (800de00 <CDC_Init_FS+0x1c>)
 800ddec:	4805      	ldr	r0, [pc, #20]	; (800de04 <CDC_Init_FS+0x20>)
 800ddee:	f7fe fbbf 	bl	800c570 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ddf2:	4905      	ldr	r1, [pc, #20]	; (800de08 <CDC_Init_FS+0x24>)
 800ddf4:	4803      	ldr	r0, [pc, #12]	; (800de04 <CDC_Init_FS+0x20>)
 800ddf6:	f7fe fbdd 	bl	800c5b4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ddfa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ddfc:	4618      	mov	r0, r3
 800ddfe:	bd80      	pop	{r7, pc}
 800de00:	20001148 	.word	0x20001148
 800de04:	2000066c 	.word	0x2000066c
 800de08:	20000948 	.word	0x20000948

0800de0c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800de0c:	b480      	push	{r7}
 800de0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800de10:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800de12:	4618      	mov	r0, r3
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr

0800de1c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800de1c:	b480      	push	{r7}
 800de1e:	b083      	sub	sp, #12
 800de20:	af00      	add	r7, sp, #0
 800de22:	4603      	mov	r3, r0
 800de24:	6039      	str	r1, [r7, #0]
 800de26:	71fb      	strb	r3, [r7, #7]
 800de28:	4613      	mov	r3, r2
 800de2a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800de2c:	79fb      	ldrb	r3, [r7, #7]
 800de2e:	2b23      	cmp	r3, #35	; 0x23
 800de30:	d84a      	bhi.n	800dec8 <CDC_Control_FS+0xac>
 800de32:	a201      	add	r2, pc, #4	; (adr r2, 800de38 <CDC_Control_FS+0x1c>)
 800de34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de38:	0800dec9 	.word	0x0800dec9
 800de3c:	0800dec9 	.word	0x0800dec9
 800de40:	0800dec9 	.word	0x0800dec9
 800de44:	0800dec9 	.word	0x0800dec9
 800de48:	0800dec9 	.word	0x0800dec9
 800de4c:	0800dec9 	.word	0x0800dec9
 800de50:	0800dec9 	.word	0x0800dec9
 800de54:	0800dec9 	.word	0x0800dec9
 800de58:	0800dec9 	.word	0x0800dec9
 800de5c:	0800dec9 	.word	0x0800dec9
 800de60:	0800dec9 	.word	0x0800dec9
 800de64:	0800dec9 	.word	0x0800dec9
 800de68:	0800dec9 	.word	0x0800dec9
 800de6c:	0800dec9 	.word	0x0800dec9
 800de70:	0800dec9 	.word	0x0800dec9
 800de74:	0800dec9 	.word	0x0800dec9
 800de78:	0800dec9 	.word	0x0800dec9
 800de7c:	0800dec9 	.word	0x0800dec9
 800de80:	0800dec9 	.word	0x0800dec9
 800de84:	0800dec9 	.word	0x0800dec9
 800de88:	0800dec9 	.word	0x0800dec9
 800de8c:	0800dec9 	.word	0x0800dec9
 800de90:	0800dec9 	.word	0x0800dec9
 800de94:	0800dec9 	.word	0x0800dec9
 800de98:	0800dec9 	.word	0x0800dec9
 800de9c:	0800dec9 	.word	0x0800dec9
 800dea0:	0800dec9 	.word	0x0800dec9
 800dea4:	0800dec9 	.word	0x0800dec9
 800dea8:	0800dec9 	.word	0x0800dec9
 800deac:	0800dec9 	.word	0x0800dec9
 800deb0:	0800dec9 	.word	0x0800dec9
 800deb4:	0800dec9 	.word	0x0800dec9
 800deb8:	0800dec9 	.word	0x0800dec9
 800debc:	0800dec9 	.word	0x0800dec9
 800dec0:	0800dec9 	.word	0x0800dec9
 800dec4:	0800dec9 	.word	0x0800dec9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800dec8:	bf00      	nop
  }

  return (USBD_OK);
 800deca:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800decc:	4618      	mov	r0, r3
 800dece:	370c      	adds	r7, #12
 800ded0:	46bd      	mov	sp, r7
 800ded2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ded6:	4770      	bx	lr

0800ded8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ded8:	b580      	push	{r7, lr}
 800deda:	b082      	sub	sp, #8
 800dedc:	af00      	add	r7, sp, #0
 800dede:	6078      	str	r0, [r7, #4]
 800dee0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800dee2:	6879      	ldr	r1, [r7, #4]
 800dee4:	4805      	ldr	r0, [pc, #20]	; (800defc <CDC_Receive_FS+0x24>)
 800dee6:	f7fe fb65 	bl	800c5b4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800deea:	4804      	ldr	r0, [pc, #16]	; (800defc <CDC_Receive_FS+0x24>)
 800deec:	f7fe fbc6 	bl	800c67c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800def0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800def2:	4618      	mov	r0, r3
 800def4:	3708      	adds	r7, #8
 800def6:	46bd      	mov	sp, r7
 800def8:	bd80      	pop	{r7, pc}
 800defa:	bf00      	nop
 800defc:	2000066c 	.word	0x2000066c

0800df00 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b084      	sub	sp, #16
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	460b      	mov	r3, r1
 800df0a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800df0c:	2300      	movs	r3, #0
 800df0e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800df10:	4b0d      	ldr	r3, [pc, #52]	; (800df48 <CDC_Transmit_FS+0x48>)
 800df12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df16:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800df18:	68bb      	ldr	r3, [r7, #8]
 800df1a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d001      	beq.n	800df26 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800df22:	2301      	movs	r3, #1
 800df24:	e00b      	b.n	800df3e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800df26:	887b      	ldrh	r3, [r7, #2]
 800df28:	461a      	mov	r2, r3
 800df2a:	6879      	ldr	r1, [r7, #4]
 800df2c:	4806      	ldr	r0, [pc, #24]	; (800df48 <CDC_Transmit_FS+0x48>)
 800df2e:	f7fe fb1f 	bl	800c570 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800df32:	4805      	ldr	r0, [pc, #20]	; (800df48 <CDC_Transmit_FS+0x48>)
 800df34:	f7fe fb5c 	bl	800c5f0 <USBD_CDC_TransmitPacket>
 800df38:	4603      	mov	r3, r0
 800df3a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800df3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3710      	adds	r7, #16
 800df42:	46bd      	mov	sp, r7
 800df44:	bd80      	pop	{r7, pc}
 800df46:	bf00      	nop
 800df48:	2000066c 	.word	0x2000066c

0800df4c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b087      	sub	sp, #28
 800df50:	af00      	add	r7, sp, #0
 800df52:	60f8      	str	r0, [r7, #12]
 800df54:	60b9      	str	r1, [r7, #8]
 800df56:	4613      	mov	r3, r2
 800df58:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800df5a:	2300      	movs	r3, #0
 800df5c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800df5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df62:	4618      	mov	r0, r3
 800df64:	371c      	adds	r7, #28
 800df66:	46bd      	mov	sp, r7
 800df68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df6c:	4770      	bx	lr
	...

0800df70 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df70:	b480      	push	{r7}
 800df72:	b083      	sub	sp, #12
 800df74:	af00      	add	r7, sp, #0
 800df76:	4603      	mov	r3, r0
 800df78:	6039      	str	r1, [r7, #0]
 800df7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800df7c:	683b      	ldr	r3, [r7, #0]
 800df7e:	2212      	movs	r2, #18
 800df80:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800df82:	4b03      	ldr	r3, [pc, #12]	; (800df90 <USBD_FS_DeviceDescriptor+0x20>)
}
 800df84:	4618      	mov	r0, r3
 800df86:	370c      	adds	r7, #12
 800df88:	46bd      	mov	sp, r7
 800df8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df8e:	4770      	bx	lr
 800df90:	200000c8 	.word	0x200000c8

0800df94 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df94:	b480      	push	{r7}
 800df96:	b083      	sub	sp, #12
 800df98:	af00      	add	r7, sp, #0
 800df9a:	4603      	mov	r3, r0
 800df9c:	6039      	str	r1, [r7, #0]
 800df9e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	2204      	movs	r2, #4
 800dfa4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dfa6:	4b03      	ldr	r3, [pc, #12]	; (800dfb4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dfa8:	4618      	mov	r0, r3
 800dfaa:	370c      	adds	r7, #12
 800dfac:	46bd      	mov	sp, r7
 800dfae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb2:	4770      	bx	lr
 800dfb4:	200000dc 	.word	0x200000dc

0800dfb8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfb8:	b580      	push	{r7, lr}
 800dfba:	b082      	sub	sp, #8
 800dfbc:	af00      	add	r7, sp, #0
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	6039      	str	r1, [r7, #0]
 800dfc2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dfc4:	79fb      	ldrb	r3, [r7, #7]
 800dfc6:	2b00      	cmp	r3, #0
 800dfc8:	d105      	bne.n	800dfd6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dfca:	683a      	ldr	r2, [r7, #0]
 800dfcc:	4907      	ldr	r1, [pc, #28]	; (800dfec <USBD_FS_ProductStrDescriptor+0x34>)
 800dfce:	4808      	ldr	r0, [pc, #32]	; (800dff0 <USBD_FS_ProductStrDescriptor+0x38>)
 800dfd0:	f7ff fd9c 	bl	800db0c <USBD_GetString>
 800dfd4:	e004      	b.n	800dfe0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dfd6:	683a      	ldr	r2, [r7, #0]
 800dfd8:	4904      	ldr	r1, [pc, #16]	; (800dfec <USBD_FS_ProductStrDescriptor+0x34>)
 800dfda:	4805      	ldr	r0, [pc, #20]	; (800dff0 <USBD_FS_ProductStrDescriptor+0x38>)
 800dfdc:	f7ff fd96 	bl	800db0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800dfe0:	4b02      	ldr	r3, [pc, #8]	; (800dfec <USBD_FS_ProductStrDescriptor+0x34>)
}
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	3708      	adds	r7, #8
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
 800dfea:	bf00      	nop
 800dfec:	20001948 	.word	0x20001948
 800dff0:	08012454 	.word	0x08012454

0800dff4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dff4:	b580      	push	{r7, lr}
 800dff6:	b082      	sub	sp, #8
 800dff8:	af00      	add	r7, sp, #0
 800dffa:	4603      	mov	r3, r0
 800dffc:	6039      	str	r1, [r7, #0]
 800dffe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e000:	683a      	ldr	r2, [r7, #0]
 800e002:	4904      	ldr	r1, [pc, #16]	; (800e014 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e004:	4804      	ldr	r0, [pc, #16]	; (800e018 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e006:	f7ff fd81 	bl	800db0c <USBD_GetString>
  return USBD_StrDesc;
 800e00a:	4b02      	ldr	r3, [pc, #8]	; (800e014 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3708      	adds	r7, #8
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	20001948 	.word	0x20001948
 800e018:	0801246c 	.word	0x0801246c

0800e01c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	4603      	mov	r3, r0
 800e024:	6039      	str	r1, [r7, #0]
 800e026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e028:	683b      	ldr	r3, [r7, #0]
 800e02a:	221a      	movs	r2, #26
 800e02c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e02e:	f000 f843 	bl	800e0b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e032:	4b02      	ldr	r3, [pc, #8]	; (800e03c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e034:	4618      	mov	r0, r3
 800e036:	3708      	adds	r7, #8
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	200000e0 	.word	0x200000e0

0800e040 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b082      	sub	sp, #8
 800e044:	af00      	add	r7, sp, #0
 800e046:	4603      	mov	r3, r0
 800e048:	6039      	str	r1, [r7, #0]
 800e04a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e04c:	79fb      	ldrb	r3, [r7, #7]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d105      	bne.n	800e05e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e052:	683a      	ldr	r2, [r7, #0]
 800e054:	4907      	ldr	r1, [pc, #28]	; (800e074 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e056:	4808      	ldr	r0, [pc, #32]	; (800e078 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e058:	f7ff fd58 	bl	800db0c <USBD_GetString>
 800e05c:	e004      	b.n	800e068 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e05e:	683a      	ldr	r2, [r7, #0]
 800e060:	4904      	ldr	r1, [pc, #16]	; (800e074 <USBD_FS_ConfigStrDescriptor+0x34>)
 800e062:	4805      	ldr	r0, [pc, #20]	; (800e078 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e064:	f7ff fd52 	bl	800db0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e068:	4b02      	ldr	r3, [pc, #8]	; (800e074 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e06a:	4618      	mov	r0, r3
 800e06c:	3708      	adds	r7, #8
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	20001948 	.word	0x20001948
 800e078:	08012480 	.word	0x08012480

0800e07c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b082      	sub	sp, #8
 800e080:	af00      	add	r7, sp, #0
 800e082:	4603      	mov	r3, r0
 800e084:	6039      	str	r1, [r7, #0]
 800e086:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e088:	79fb      	ldrb	r3, [r7, #7]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d105      	bne.n	800e09a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e08e:	683a      	ldr	r2, [r7, #0]
 800e090:	4907      	ldr	r1, [pc, #28]	; (800e0b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e092:	4808      	ldr	r0, [pc, #32]	; (800e0b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e094:	f7ff fd3a 	bl	800db0c <USBD_GetString>
 800e098:	e004      	b.n	800e0a4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e09a:	683a      	ldr	r2, [r7, #0]
 800e09c:	4904      	ldr	r1, [pc, #16]	; (800e0b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e09e:	4805      	ldr	r0, [pc, #20]	; (800e0b4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e0a0:	f7ff fd34 	bl	800db0c <USBD_GetString>
  }
  return USBD_StrDesc;
 800e0a4:	4b02      	ldr	r3, [pc, #8]	; (800e0b0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3708      	adds	r7, #8
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	20001948 	.word	0x20001948
 800e0b4:	0801248c 	.word	0x0801248c

0800e0b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b084      	sub	sp, #16
 800e0bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e0be:	4b0f      	ldr	r3, [pc, #60]	; (800e0fc <Get_SerialNum+0x44>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e0c4:	4b0e      	ldr	r3, [pc, #56]	; (800e100 <Get_SerialNum+0x48>)
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e0ca:	4b0e      	ldr	r3, [pc, #56]	; (800e104 <Get_SerialNum+0x4c>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e0d0:	68fa      	ldr	r2, [r7, #12]
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	4413      	add	r3, r2
 800e0d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d009      	beq.n	800e0f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e0de:	2208      	movs	r2, #8
 800e0e0:	4909      	ldr	r1, [pc, #36]	; (800e108 <Get_SerialNum+0x50>)
 800e0e2:	68f8      	ldr	r0, [r7, #12]
 800e0e4:	f000 f814 	bl	800e110 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e0e8:	2204      	movs	r2, #4
 800e0ea:	4908      	ldr	r1, [pc, #32]	; (800e10c <Get_SerialNum+0x54>)
 800e0ec:	68b8      	ldr	r0, [r7, #8]
 800e0ee:	f000 f80f 	bl	800e110 <IntToUnicode>
  }
}
 800e0f2:	bf00      	nop
 800e0f4:	3710      	adds	r7, #16
 800e0f6:	46bd      	mov	sp, r7
 800e0f8:	bd80      	pop	{r7, pc}
 800e0fa:	bf00      	nop
 800e0fc:	1fff7a10 	.word	0x1fff7a10
 800e100:	1fff7a14 	.word	0x1fff7a14
 800e104:	1fff7a18 	.word	0x1fff7a18
 800e108:	200000e2 	.word	0x200000e2
 800e10c:	200000f2 	.word	0x200000f2

0800e110 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e110:	b480      	push	{r7}
 800e112:	b087      	sub	sp, #28
 800e114:	af00      	add	r7, sp, #0
 800e116:	60f8      	str	r0, [r7, #12]
 800e118:	60b9      	str	r1, [r7, #8]
 800e11a:	4613      	mov	r3, r2
 800e11c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e11e:	2300      	movs	r3, #0
 800e120:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e122:	2300      	movs	r3, #0
 800e124:	75fb      	strb	r3, [r7, #23]
 800e126:	e027      	b.n	800e178 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	0f1b      	lsrs	r3, r3, #28
 800e12c:	2b09      	cmp	r3, #9
 800e12e:	d80b      	bhi.n	800e148 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	0f1b      	lsrs	r3, r3, #28
 800e134:	b2da      	uxtb	r2, r3
 800e136:	7dfb      	ldrb	r3, [r7, #23]
 800e138:	005b      	lsls	r3, r3, #1
 800e13a:	4619      	mov	r1, r3
 800e13c:	68bb      	ldr	r3, [r7, #8]
 800e13e:	440b      	add	r3, r1
 800e140:	3230      	adds	r2, #48	; 0x30
 800e142:	b2d2      	uxtb	r2, r2
 800e144:	701a      	strb	r2, [r3, #0]
 800e146:	e00a      	b.n	800e15e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	0f1b      	lsrs	r3, r3, #28
 800e14c:	b2da      	uxtb	r2, r3
 800e14e:	7dfb      	ldrb	r3, [r7, #23]
 800e150:	005b      	lsls	r3, r3, #1
 800e152:	4619      	mov	r1, r3
 800e154:	68bb      	ldr	r3, [r7, #8]
 800e156:	440b      	add	r3, r1
 800e158:	3237      	adds	r2, #55	; 0x37
 800e15a:	b2d2      	uxtb	r2, r2
 800e15c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	011b      	lsls	r3, r3, #4
 800e162:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e164:	7dfb      	ldrb	r3, [r7, #23]
 800e166:	005b      	lsls	r3, r3, #1
 800e168:	3301      	adds	r3, #1
 800e16a:	68ba      	ldr	r2, [r7, #8]
 800e16c:	4413      	add	r3, r2
 800e16e:	2200      	movs	r2, #0
 800e170:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e172:	7dfb      	ldrb	r3, [r7, #23]
 800e174:	3301      	adds	r3, #1
 800e176:	75fb      	strb	r3, [r7, #23]
 800e178:	7dfa      	ldrb	r2, [r7, #23]
 800e17a:	79fb      	ldrb	r3, [r7, #7]
 800e17c:	429a      	cmp	r2, r3
 800e17e:	d3d3      	bcc.n	800e128 <IntToUnicode+0x18>
  }
}
 800e180:	bf00      	nop
 800e182:	bf00      	nop
 800e184:	371c      	adds	r7, #28
 800e186:	46bd      	mov	sp, r7
 800e188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e18c:	4770      	bx	lr
	...

0800e190 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e190:	b580      	push	{r7, lr}
 800e192:	b08a      	sub	sp, #40	; 0x28
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e198:	f107 0314 	add.w	r3, r7, #20
 800e19c:	2200      	movs	r2, #0
 800e19e:	601a      	str	r2, [r3, #0]
 800e1a0:	605a      	str	r2, [r3, #4]
 800e1a2:	609a      	str	r2, [r3, #8]
 800e1a4:	60da      	str	r2, [r3, #12]
 800e1a6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800e1b0:	d13a      	bne.n	800e228 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e1b2:	2300      	movs	r3, #0
 800e1b4:	613b      	str	r3, [r7, #16]
 800e1b6:	4b1e      	ldr	r3, [pc, #120]	; (800e230 <HAL_PCD_MspInit+0xa0>)
 800e1b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1ba:	4a1d      	ldr	r2, [pc, #116]	; (800e230 <HAL_PCD_MspInit+0xa0>)
 800e1bc:	f043 0301 	orr.w	r3, r3, #1
 800e1c0:	6313      	str	r3, [r2, #48]	; 0x30
 800e1c2:	4b1b      	ldr	r3, [pc, #108]	; (800e230 <HAL_PCD_MspInit+0xa0>)
 800e1c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e1c6:	f003 0301 	and.w	r3, r3, #1
 800e1ca:	613b      	str	r3, [r7, #16]
 800e1cc:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e1ce:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800e1d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1d4:	2302      	movs	r3, #2
 800e1d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e1d8:	2300      	movs	r3, #0
 800e1da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e1dc:	2303      	movs	r3, #3
 800e1de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e1e0:	230a      	movs	r3, #10
 800e1e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e1e4:	f107 0314 	add.w	r3, r7, #20
 800e1e8:	4619      	mov	r1, r3
 800e1ea:	4812      	ldr	r0, [pc, #72]	; (800e234 <HAL_PCD_MspInit+0xa4>)
 800e1ec:	f7f5 fa8a 	bl	8003704 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e1f0:	4b0f      	ldr	r3, [pc, #60]	; (800e230 <HAL_PCD_MspInit+0xa0>)
 800e1f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e1f4:	4a0e      	ldr	r2, [pc, #56]	; (800e230 <HAL_PCD_MspInit+0xa0>)
 800e1f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e1fa:	6353      	str	r3, [r2, #52]	; 0x34
 800e1fc:	2300      	movs	r3, #0
 800e1fe:	60fb      	str	r3, [r7, #12]
 800e200:	4b0b      	ldr	r3, [pc, #44]	; (800e230 <HAL_PCD_MspInit+0xa0>)
 800e202:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e204:	4a0a      	ldr	r2, [pc, #40]	; (800e230 <HAL_PCD_MspInit+0xa0>)
 800e206:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800e20a:	6453      	str	r3, [r2, #68]	; 0x44
 800e20c:	4b08      	ldr	r3, [pc, #32]	; (800e230 <HAL_PCD_MspInit+0xa0>)
 800e20e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e214:	60fb      	str	r3, [r7, #12]
 800e216:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e218:	2200      	movs	r2, #0
 800e21a:	2100      	movs	r1, #0
 800e21c:	2043      	movs	r0, #67	; 0x43
 800e21e:	f7f4 fe2c 	bl	8002e7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e222:	2043      	movs	r0, #67	; 0x43
 800e224:	f7f4 fe45 	bl	8002eb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e228:	bf00      	nop
 800e22a:	3728      	adds	r7, #40	; 0x28
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}
 800e230:	40023800 	.word	0x40023800
 800e234:	40020000 	.word	0x40020000

0800e238 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e238:	b580      	push	{r7, lr}
 800e23a:	b082      	sub	sp, #8
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800e24c:	4619      	mov	r1, r3
 800e24e:	4610      	mov	r0, r2
 800e250:	f7fe fafd 	bl	800c84e <USBD_LL_SetupStage>
}
 800e254:	bf00      	nop
 800e256:	3708      	adds	r7, #8
 800e258:	46bd      	mov	sp, r7
 800e25a:	bd80      	pop	{r7, pc}

0800e25c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b082      	sub	sp, #8
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
 800e264:	460b      	mov	r3, r1
 800e266:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e26e:	78fa      	ldrb	r2, [r7, #3]
 800e270:	6879      	ldr	r1, [r7, #4]
 800e272:	4613      	mov	r3, r2
 800e274:	00db      	lsls	r3, r3, #3
 800e276:	4413      	add	r3, r2
 800e278:	009b      	lsls	r3, r3, #2
 800e27a:	440b      	add	r3, r1
 800e27c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800e280:	681a      	ldr	r2, [r3, #0]
 800e282:	78fb      	ldrb	r3, [r7, #3]
 800e284:	4619      	mov	r1, r3
 800e286:	f7fe fb37 	bl	800c8f8 <USBD_LL_DataOutStage>
}
 800e28a:	bf00      	nop
 800e28c:	3708      	adds	r7, #8
 800e28e:	46bd      	mov	sp, r7
 800e290:	bd80      	pop	{r7, pc}

0800e292 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e292:	b580      	push	{r7, lr}
 800e294:	b082      	sub	sp, #8
 800e296:	af00      	add	r7, sp, #0
 800e298:	6078      	str	r0, [r7, #4]
 800e29a:	460b      	mov	r3, r1
 800e29c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800e2a4:	78fa      	ldrb	r2, [r7, #3]
 800e2a6:	6879      	ldr	r1, [r7, #4]
 800e2a8:	4613      	mov	r3, r2
 800e2aa:	00db      	lsls	r3, r3, #3
 800e2ac:	4413      	add	r3, r2
 800e2ae:	009b      	lsls	r3, r3, #2
 800e2b0:	440b      	add	r3, r1
 800e2b2:	334c      	adds	r3, #76	; 0x4c
 800e2b4:	681a      	ldr	r2, [r3, #0]
 800e2b6:	78fb      	ldrb	r3, [r7, #3]
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	f7fe fbd0 	bl	800ca5e <USBD_LL_DataInStage>
}
 800e2be:	bf00      	nop
 800e2c0:	3708      	adds	r7, #8
 800e2c2:	46bd      	mov	sp, r7
 800e2c4:	bd80      	pop	{r7, pc}

0800e2c6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2c6:	b580      	push	{r7, lr}
 800e2c8:	b082      	sub	sp, #8
 800e2ca:	af00      	add	r7, sp, #0
 800e2cc:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	f7fe fd04 	bl	800cce2 <USBD_LL_SOF>
}
 800e2da:	bf00      	nop
 800e2dc:	3708      	adds	r7, #8
 800e2de:	46bd      	mov	sp, r7
 800e2e0:	bd80      	pop	{r7, pc}

0800e2e2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2e2:	b580      	push	{r7, lr}
 800e2e4:	b084      	sub	sp, #16
 800e2e6:	af00      	add	r7, sp, #0
 800e2e8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e2ea:	2301      	movs	r3, #1
 800e2ec:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	68db      	ldr	r3, [r3, #12]
 800e2f2:	2b00      	cmp	r3, #0
 800e2f4:	d102      	bne.n	800e2fc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800e2f6:	2300      	movs	r3, #0
 800e2f8:	73fb      	strb	r3, [r7, #15]
 800e2fa:	e008      	b.n	800e30e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	68db      	ldr	r3, [r3, #12]
 800e300:	2b02      	cmp	r3, #2
 800e302:	d102      	bne.n	800e30a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800e304:	2301      	movs	r3, #1
 800e306:	73fb      	strb	r3, [r7, #15]
 800e308:	e001      	b.n	800e30e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800e30a:	f7f4 f8f1 	bl	80024f0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e314:	7bfa      	ldrb	r2, [r7, #15]
 800e316:	4611      	mov	r1, r2
 800e318:	4618      	mov	r0, r3
 800e31a:	f7fe fca4 	bl	800cc66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e31e:	687b      	ldr	r3, [r7, #4]
 800e320:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e324:	4618      	mov	r0, r3
 800e326:	f7fe fc4c 	bl	800cbc2 <USBD_LL_Reset>
}
 800e32a:	bf00      	nop
 800e32c:	3710      	adds	r7, #16
 800e32e:	46bd      	mov	sp, r7
 800e330:	bd80      	pop	{r7, pc}
	...

0800e334 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e334:	b580      	push	{r7, lr}
 800e336:	b082      	sub	sp, #8
 800e338:	af00      	add	r7, sp, #0
 800e33a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e342:	4618      	mov	r0, r3
 800e344:	f7fe fc9f 	bl	800cc86 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e350:	681b      	ldr	r3, [r3, #0]
 800e352:	687a      	ldr	r2, [r7, #4]
 800e354:	6812      	ldr	r2, [r2, #0]
 800e356:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800e35a:	f043 0301 	orr.w	r3, r3, #1
 800e35e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e360:	687b      	ldr	r3, [r7, #4]
 800e362:	6a1b      	ldr	r3, [r3, #32]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d005      	beq.n	800e374 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e368:	4b04      	ldr	r3, [pc, #16]	; (800e37c <HAL_PCD_SuspendCallback+0x48>)
 800e36a:	691b      	ldr	r3, [r3, #16]
 800e36c:	4a03      	ldr	r2, [pc, #12]	; (800e37c <HAL_PCD_SuspendCallback+0x48>)
 800e36e:	f043 0306 	orr.w	r3, r3, #6
 800e372:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e374:	bf00      	nop
 800e376:	3708      	adds	r7, #8
 800e378:	46bd      	mov	sp, r7
 800e37a:	bd80      	pop	{r7, pc}
 800e37c:	e000ed00 	.word	0xe000ed00

0800e380 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e380:	b580      	push	{r7, lr}
 800e382:	b082      	sub	sp, #8
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e38e:	4618      	mov	r0, r3
 800e390:	f7fe fc8f 	bl	800ccb2 <USBD_LL_Resume>
}
 800e394:	bf00      	nop
 800e396:	3708      	adds	r7, #8
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b082      	sub	sp, #8
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	460b      	mov	r3, r1
 800e3a6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3ae:	78fa      	ldrb	r2, [r7, #3]
 800e3b0:	4611      	mov	r1, r2
 800e3b2:	4618      	mov	r0, r3
 800e3b4:	f7fe fce7 	bl	800cd86 <USBD_LL_IsoOUTIncomplete>
}
 800e3b8:	bf00      	nop
 800e3ba:	3708      	adds	r7, #8
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3d2:	78fa      	ldrb	r2, [r7, #3]
 800e3d4:	4611      	mov	r1, r2
 800e3d6:	4618      	mov	r0, r3
 800e3d8:	f7fe fca3 	bl	800cd22 <USBD_LL_IsoINIncomplete>
}
 800e3dc:	bf00      	nop
 800e3de:	3708      	adds	r7, #8
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd80      	pop	{r7, pc}

0800e3e4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3e4:	b580      	push	{r7, lr}
 800e3e6:	b082      	sub	sp, #8
 800e3e8:	af00      	add	r7, sp, #0
 800e3ea:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e3f2:	4618      	mov	r0, r3
 800e3f4:	f7fe fcf9 	bl	800cdea <USBD_LL_DevConnected>
}
 800e3f8:	bf00      	nop
 800e3fa:	3708      	adds	r7, #8
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}

0800e400 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b082      	sub	sp, #8
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800e40e:	4618      	mov	r0, r3
 800e410:	f7fe fcf6 	bl	800ce00 <USBD_LL_DevDisconnected>
}
 800e414:	bf00      	nop
 800e416:	3708      	adds	r7, #8
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}

0800e41c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b082      	sub	sp, #8
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d13c      	bne.n	800e4a6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e42c:	4a20      	ldr	r2, [pc, #128]	; (800e4b0 <USBD_LL_Init+0x94>)
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	4a1e      	ldr	r2, [pc, #120]	; (800e4b0 <USBD_LL_Init+0x94>)
 800e438:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e43c:	4b1c      	ldr	r3, [pc, #112]	; (800e4b0 <USBD_LL_Init+0x94>)
 800e43e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800e442:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e444:	4b1a      	ldr	r3, [pc, #104]	; (800e4b0 <USBD_LL_Init+0x94>)
 800e446:	2204      	movs	r2, #4
 800e448:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e44a:	4b19      	ldr	r3, [pc, #100]	; (800e4b0 <USBD_LL_Init+0x94>)
 800e44c:	2202      	movs	r2, #2
 800e44e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e450:	4b17      	ldr	r3, [pc, #92]	; (800e4b0 <USBD_LL_Init+0x94>)
 800e452:	2200      	movs	r2, #0
 800e454:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e456:	4b16      	ldr	r3, [pc, #88]	; (800e4b0 <USBD_LL_Init+0x94>)
 800e458:	2202      	movs	r2, #2
 800e45a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e45c:	4b14      	ldr	r3, [pc, #80]	; (800e4b0 <USBD_LL_Init+0x94>)
 800e45e:	2200      	movs	r2, #0
 800e460:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e462:	4b13      	ldr	r3, [pc, #76]	; (800e4b0 <USBD_LL_Init+0x94>)
 800e464:	2200      	movs	r2, #0
 800e466:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e468:	4b11      	ldr	r3, [pc, #68]	; (800e4b0 <USBD_LL_Init+0x94>)
 800e46a:	2200      	movs	r2, #0
 800e46c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e46e:	4b10      	ldr	r3, [pc, #64]	; (800e4b0 <USBD_LL_Init+0x94>)
 800e470:	2200      	movs	r2, #0
 800e472:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e474:	4b0e      	ldr	r3, [pc, #56]	; (800e4b0 <USBD_LL_Init+0x94>)
 800e476:	2200      	movs	r2, #0
 800e478:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e47a:	480d      	ldr	r0, [pc, #52]	; (800e4b0 <USBD_LL_Init+0x94>)
 800e47c:	f7f6 faa5 	bl	80049ca <HAL_PCD_Init>
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	d001      	beq.n	800e48a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e486:	f7f4 f833 	bl	80024f0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e48a:	2180      	movs	r1, #128	; 0x80
 800e48c:	4808      	ldr	r0, [pc, #32]	; (800e4b0 <USBD_LL_Init+0x94>)
 800e48e:	f7f7 fcfc 	bl	8005e8a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e492:	2240      	movs	r2, #64	; 0x40
 800e494:	2100      	movs	r1, #0
 800e496:	4806      	ldr	r0, [pc, #24]	; (800e4b0 <USBD_LL_Init+0x94>)
 800e498:	f7f7 fcb0 	bl	8005dfc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e49c:	2280      	movs	r2, #128	; 0x80
 800e49e:	2101      	movs	r1, #1
 800e4a0:	4803      	ldr	r0, [pc, #12]	; (800e4b0 <USBD_LL_Init+0x94>)
 800e4a2:	f7f7 fcab 	bl	8005dfc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e4a6:	2300      	movs	r3, #0
}
 800e4a8:	4618      	mov	r0, r3
 800e4aa:	3708      	adds	r7, #8
 800e4ac:	46bd      	mov	sp, r7
 800e4ae:	bd80      	pop	{r7, pc}
 800e4b0:	20001b48 	.word	0x20001b48

0800e4b4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b084      	sub	sp, #16
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e4c4:	687b      	ldr	r3, [r7, #4]
 800e4c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e4ca:	4618      	mov	r0, r3
 800e4cc:	f7f6 fb9a 	bl	8004c04 <HAL_PCD_Start>
 800e4d0:	4603      	mov	r3, r0
 800e4d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4d4:	7bfb      	ldrb	r3, [r7, #15]
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	f000 f942 	bl	800e760 <USBD_Get_USB_Status>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3710      	adds	r7, #16
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bd80      	pop	{r7, pc}

0800e4ea <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e4ea:	b580      	push	{r7, lr}
 800e4ec:	b084      	sub	sp, #16
 800e4ee:	af00      	add	r7, sp, #0
 800e4f0:	6078      	str	r0, [r7, #4]
 800e4f2:	4608      	mov	r0, r1
 800e4f4:	4611      	mov	r1, r2
 800e4f6:	461a      	mov	r2, r3
 800e4f8:	4603      	mov	r3, r0
 800e4fa:	70fb      	strb	r3, [r7, #3]
 800e4fc:	460b      	mov	r3, r1
 800e4fe:	70bb      	strb	r3, [r7, #2]
 800e500:	4613      	mov	r3, r2
 800e502:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e504:	2300      	movs	r3, #0
 800e506:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e508:	2300      	movs	r3, #0
 800e50a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e512:	78bb      	ldrb	r3, [r7, #2]
 800e514:	883a      	ldrh	r2, [r7, #0]
 800e516:	78f9      	ldrb	r1, [r7, #3]
 800e518:	f7f7 f86b 	bl	80055f2 <HAL_PCD_EP_Open>
 800e51c:	4603      	mov	r3, r0
 800e51e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e520:	7bfb      	ldrb	r3, [r7, #15]
 800e522:	4618      	mov	r0, r3
 800e524:	f000 f91c 	bl	800e760 <USBD_Get_USB_Status>
 800e528:	4603      	mov	r3, r0
 800e52a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e52c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e52e:	4618      	mov	r0, r3
 800e530:	3710      	adds	r7, #16
 800e532:	46bd      	mov	sp, r7
 800e534:	bd80      	pop	{r7, pc}

0800e536 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e536:	b580      	push	{r7, lr}
 800e538:	b084      	sub	sp, #16
 800e53a:	af00      	add	r7, sp, #0
 800e53c:	6078      	str	r0, [r7, #4]
 800e53e:	460b      	mov	r3, r1
 800e540:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e542:	2300      	movs	r3, #0
 800e544:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e546:	2300      	movs	r3, #0
 800e548:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e550:	78fa      	ldrb	r2, [r7, #3]
 800e552:	4611      	mov	r1, r2
 800e554:	4618      	mov	r0, r3
 800e556:	f7f7 f8b4 	bl	80056c2 <HAL_PCD_EP_Close>
 800e55a:	4603      	mov	r3, r0
 800e55c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e55e:	7bfb      	ldrb	r3, [r7, #15]
 800e560:	4618      	mov	r0, r3
 800e562:	f000 f8fd 	bl	800e760 <USBD_Get_USB_Status>
 800e566:	4603      	mov	r3, r0
 800e568:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e56a:	7bbb      	ldrb	r3, [r7, #14]
}
 800e56c:	4618      	mov	r0, r3
 800e56e:	3710      	adds	r7, #16
 800e570:	46bd      	mov	sp, r7
 800e572:	bd80      	pop	{r7, pc}

0800e574 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e574:	b580      	push	{r7, lr}
 800e576:	b084      	sub	sp, #16
 800e578:	af00      	add	r7, sp, #0
 800e57a:	6078      	str	r0, [r7, #4]
 800e57c:	460b      	mov	r3, r1
 800e57e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e580:	2300      	movs	r3, #0
 800e582:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e584:	2300      	movs	r3, #0
 800e586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e588:	687b      	ldr	r3, [r7, #4]
 800e58a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e58e:	78fa      	ldrb	r2, [r7, #3]
 800e590:	4611      	mov	r1, r2
 800e592:	4618      	mov	r0, r3
 800e594:	f7f7 f98c 	bl	80058b0 <HAL_PCD_EP_SetStall>
 800e598:	4603      	mov	r3, r0
 800e59a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e59c:	7bfb      	ldrb	r3, [r7, #15]
 800e59e:	4618      	mov	r0, r3
 800e5a0:	f000 f8de 	bl	800e760 <USBD_Get_USB_Status>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5aa:	4618      	mov	r0, r3
 800e5ac:	3710      	adds	r7, #16
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	bd80      	pop	{r7, pc}

0800e5b2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e5b2:	b580      	push	{r7, lr}
 800e5b4:	b084      	sub	sp, #16
 800e5b6:	af00      	add	r7, sp, #0
 800e5b8:	6078      	str	r0, [r7, #4]
 800e5ba:	460b      	mov	r3, r1
 800e5bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e5cc:	78fa      	ldrb	r2, [r7, #3]
 800e5ce:	4611      	mov	r1, r2
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f7f7 f9d1 	bl	8005978 <HAL_PCD_EP_ClrStall>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5da:	7bfb      	ldrb	r3, [r7, #15]
 800e5dc:	4618      	mov	r0, r3
 800e5de:	f000 f8bf 	bl	800e760 <USBD_Get_USB_Status>
 800e5e2:	4603      	mov	r3, r0
 800e5e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	3710      	adds	r7, #16
 800e5ec:	46bd      	mov	sp, r7
 800e5ee:	bd80      	pop	{r7, pc}

0800e5f0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e5f0:	b480      	push	{r7}
 800e5f2:	b085      	sub	sp, #20
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	6078      	str	r0, [r7, #4]
 800e5f8:	460b      	mov	r3, r1
 800e5fa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e602:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	da0b      	bge.n	800e624 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e60c:	78fb      	ldrb	r3, [r7, #3]
 800e60e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e612:	68f9      	ldr	r1, [r7, #12]
 800e614:	4613      	mov	r3, r2
 800e616:	00db      	lsls	r3, r3, #3
 800e618:	4413      	add	r3, r2
 800e61a:	009b      	lsls	r3, r3, #2
 800e61c:	440b      	add	r3, r1
 800e61e:	333e      	adds	r3, #62	; 0x3e
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	e00b      	b.n	800e63c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e624:	78fb      	ldrb	r3, [r7, #3]
 800e626:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e62a:	68f9      	ldr	r1, [r7, #12]
 800e62c:	4613      	mov	r3, r2
 800e62e:	00db      	lsls	r3, r3, #3
 800e630:	4413      	add	r3, r2
 800e632:	009b      	lsls	r3, r3, #2
 800e634:	440b      	add	r3, r1
 800e636:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800e63a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e63c:	4618      	mov	r0, r3
 800e63e:	3714      	adds	r7, #20
 800e640:	46bd      	mov	sp, r7
 800e642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e646:	4770      	bx	lr

0800e648 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e648:	b580      	push	{r7, lr}
 800e64a:	b084      	sub	sp, #16
 800e64c:	af00      	add	r7, sp, #0
 800e64e:	6078      	str	r0, [r7, #4]
 800e650:	460b      	mov	r3, r1
 800e652:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e654:	2300      	movs	r3, #0
 800e656:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e658:	2300      	movs	r3, #0
 800e65a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e662:	78fa      	ldrb	r2, [r7, #3]
 800e664:	4611      	mov	r1, r2
 800e666:	4618      	mov	r0, r3
 800e668:	f7f6 ff9e 	bl	80055a8 <HAL_PCD_SetAddress>
 800e66c:	4603      	mov	r3, r0
 800e66e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e670:	7bfb      	ldrb	r3, [r7, #15]
 800e672:	4618      	mov	r0, r3
 800e674:	f000 f874 	bl	800e760 <USBD_Get_USB_Status>
 800e678:	4603      	mov	r3, r0
 800e67a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e67c:	7bbb      	ldrb	r3, [r7, #14]
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3710      	adds	r7, #16
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}

0800e686 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e686:	b580      	push	{r7, lr}
 800e688:	b086      	sub	sp, #24
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	60f8      	str	r0, [r7, #12]
 800e68e:	607a      	str	r2, [r7, #4]
 800e690:	603b      	str	r3, [r7, #0]
 800e692:	460b      	mov	r3, r1
 800e694:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e696:	2300      	movs	r3, #0
 800e698:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e69a:	2300      	movs	r3, #0
 800e69c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e6a4:	7af9      	ldrb	r1, [r7, #11]
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	687a      	ldr	r2, [r7, #4]
 800e6aa:	f7f7 f8b7 	bl	800581c <HAL_PCD_EP_Transmit>
 800e6ae:	4603      	mov	r3, r0
 800e6b0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6b2:	7dfb      	ldrb	r3, [r7, #23]
 800e6b4:	4618      	mov	r0, r3
 800e6b6:	f000 f853 	bl	800e760 <USBD_Get_USB_Status>
 800e6ba:	4603      	mov	r3, r0
 800e6bc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e6be:	7dbb      	ldrb	r3, [r7, #22]
}
 800e6c0:	4618      	mov	r0, r3
 800e6c2:	3718      	adds	r7, #24
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bd80      	pop	{r7, pc}

0800e6c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e6c8:	b580      	push	{r7, lr}
 800e6ca:	b086      	sub	sp, #24
 800e6cc:	af00      	add	r7, sp, #0
 800e6ce:	60f8      	str	r0, [r7, #12]
 800e6d0:	607a      	str	r2, [r7, #4]
 800e6d2:	603b      	str	r3, [r7, #0]
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6d8:	2300      	movs	r3, #0
 800e6da:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800e6e6:	7af9      	ldrb	r1, [r7, #11]
 800e6e8:	683b      	ldr	r3, [r7, #0]
 800e6ea:	687a      	ldr	r2, [r7, #4]
 800e6ec:	f7f7 f833 	bl	8005756 <HAL_PCD_EP_Receive>
 800e6f0:	4603      	mov	r3, r0
 800e6f2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6f4:	7dfb      	ldrb	r3, [r7, #23]
 800e6f6:	4618      	mov	r0, r3
 800e6f8:	f000 f832 	bl	800e760 <USBD_Get_USB_Status>
 800e6fc:	4603      	mov	r3, r0
 800e6fe:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e700:	7dbb      	ldrb	r3, [r7, #22]
}
 800e702:	4618      	mov	r0, r3
 800e704:	3718      	adds	r7, #24
 800e706:	46bd      	mov	sp, r7
 800e708:	bd80      	pop	{r7, pc}

0800e70a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e70a:	b580      	push	{r7, lr}
 800e70c:	b082      	sub	sp, #8
 800e70e:	af00      	add	r7, sp, #0
 800e710:	6078      	str	r0, [r7, #4]
 800e712:	460b      	mov	r3, r1
 800e714:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e716:	687b      	ldr	r3, [r7, #4]
 800e718:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e71c:	78fa      	ldrb	r2, [r7, #3]
 800e71e:	4611      	mov	r1, r2
 800e720:	4618      	mov	r0, r3
 800e722:	f7f7 f863 	bl	80057ec <HAL_PCD_EP_GetRxCount>
 800e726:	4603      	mov	r3, r0
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3708      	adds	r7, #8
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e730:	b480      	push	{r7}
 800e732:	b083      	sub	sp, #12
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e738:	4b03      	ldr	r3, [pc, #12]	; (800e748 <USBD_static_malloc+0x18>)
}
 800e73a:	4618      	mov	r0, r3
 800e73c:	370c      	adds	r7, #12
 800e73e:	46bd      	mov	sp, r7
 800e740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e744:	4770      	bx	lr
 800e746:	bf00      	nop
 800e748:	20002054 	.word	0x20002054

0800e74c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e74c:	b480      	push	{r7}
 800e74e:	b083      	sub	sp, #12
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]

}
 800e754:	bf00      	nop
 800e756:	370c      	adds	r7, #12
 800e758:	46bd      	mov	sp, r7
 800e75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75e:	4770      	bx	lr

0800e760 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e760:	b480      	push	{r7}
 800e762:	b085      	sub	sp, #20
 800e764:	af00      	add	r7, sp, #0
 800e766:	4603      	mov	r3, r0
 800e768:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e76a:	2300      	movs	r3, #0
 800e76c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e76e:	79fb      	ldrb	r3, [r7, #7]
 800e770:	2b03      	cmp	r3, #3
 800e772:	d817      	bhi.n	800e7a4 <USBD_Get_USB_Status+0x44>
 800e774:	a201      	add	r2, pc, #4	; (adr r2, 800e77c <USBD_Get_USB_Status+0x1c>)
 800e776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e77a:	bf00      	nop
 800e77c:	0800e78d 	.word	0x0800e78d
 800e780:	0800e793 	.word	0x0800e793
 800e784:	0800e799 	.word	0x0800e799
 800e788:	0800e79f 	.word	0x0800e79f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e78c:	2300      	movs	r3, #0
 800e78e:	73fb      	strb	r3, [r7, #15]
    break;
 800e790:	e00b      	b.n	800e7aa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e792:	2303      	movs	r3, #3
 800e794:	73fb      	strb	r3, [r7, #15]
    break;
 800e796:	e008      	b.n	800e7aa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e798:	2301      	movs	r3, #1
 800e79a:	73fb      	strb	r3, [r7, #15]
    break;
 800e79c:	e005      	b.n	800e7aa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e79e:	2303      	movs	r3, #3
 800e7a0:	73fb      	strb	r3, [r7, #15]
    break;
 800e7a2:	e002      	b.n	800e7aa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e7a4:	2303      	movs	r3, #3
 800e7a6:	73fb      	strb	r3, [r7, #15]
    break;
 800e7a8:	bf00      	nop
  }
  return usb_status;
 800e7aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	3714      	adds	r7, #20
 800e7b0:	46bd      	mov	sp, r7
 800e7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b6:	4770      	bx	lr

0800e7b8 <__cvt>:
 800e7b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e7bc:	ec55 4b10 	vmov	r4, r5, d0
 800e7c0:	2d00      	cmp	r5, #0
 800e7c2:	460e      	mov	r6, r1
 800e7c4:	4619      	mov	r1, r3
 800e7c6:	462b      	mov	r3, r5
 800e7c8:	bfbb      	ittet	lt
 800e7ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e7ce:	461d      	movlt	r5, r3
 800e7d0:	2300      	movge	r3, #0
 800e7d2:	232d      	movlt	r3, #45	; 0x2d
 800e7d4:	700b      	strb	r3, [r1, #0]
 800e7d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e7d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e7dc:	4691      	mov	r9, r2
 800e7de:	f023 0820 	bic.w	r8, r3, #32
 800e7e2:	bfbc      	itt	lt
 800e7e4:	4622      	movlt	r2, r4
 800e7e6:	4614      	movlt	r4, r2
 800e7e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e7ec:	d005      	beq.n	800e7fa <__cvt+0x42>
 800e7ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e7f2:	d100      	bne.n	800e7f6 <__cvt+0x3e>
 800e7f4:	3601      	adds	r6, #1
 800e7f6:	2102      	movs	r1, #2
 800e7f8:	e000      	b.n	800e7fc <__cvt+0x44>
 800e7fa:	2103      	movs	r1, #3
 800e7fc:	ab03      	add	r3, sp, #12
 800e7fe:	9301      	str	r3, [sp, #4]
 800e800:	ab02      	add	r3, sp, #8
 800e802:	9300      	str	r3, [sp, #0]
 800e804:	ec45 4b10 	vmov	d0, r4, r5
 800e808:	4653      	mov	r3, sl
 800e80a:	4632      	mov	r2, r6
 800e80c:	f000 fdcc 	bl	800f3a8 <_dtoa_r>
 800e810:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e814:	4607      	mov	r7, r0
 800e816:	d102      	bne.n	800e81e <__cvt+0x66>
 800e818:	f019 0f01 	tst.w	r9, #1
 800e81c:	d022      	beq.n	800e864 <__cvt+0xac>
 800e81e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e822:	eb07 0906 	add.w	r9, r7, r6
 800e826:	d110      	bne.n	800e84a <__cvt+0x92>
 800e828:	783b      	ldrb	r3, [r7, #0]
 800e82a:	2b30      	cmp	r3, #48	; 0x30
 800e82c:	d10a      	bne.n	800e844 <__cvt+0x8c>
 800e82e:	2200      	movs	r2, #0
 800e830:	2300      	movs	r3, #0
 800e832:	4620      	mov	r0, r4
 800e834:	4629      	mov	r1, r5
 800e836:	f7f2 f947 	bl	8000ac8 <__aeabi_dcmpeq>
 800e83a:	b918      	cbnz	r0, 800e844 <__cvt+0x8c>
 800e83c:	f1c6 0601 	rsb	r6, r6, #1
 800e840:	f8ca 6000 	str.w	r6, [sl]
 800e844:	f8da 3000 	ldr.w	r3, [sl]
 800e848:	4499      	add	r9, r3
 800e84a:	2200      	movs	r2, #0
 800e84c:	2300      	movs	r3, #0
 800e84e:	4620      	mov	r0, r4
 800e850:	4629      	mov	r1, r5
 800e852:	f7f2 f939 	bl	8000ac8 <__aeabi_dcmpeq>
 800e856:	b108      	cbz	r0, 800e85c <__cvt+0xa4>
 800e858:	f8cd 900c 	str.w	r9, [sp, #12]
 800e85c:	2230      	movs	r2, #48	; 0x30
 800e85e:	9b03      	ldr	r3, [sp, #12]
 800e860:	454b      	cmp	r3, r9
 800e862:	d307      	bcc.n	800e874 <__cvt+0xbc>
 800e864:	9b03      	ldr	r3, [sp, #12]
 800e866:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e868:	1bdb      	subs	r3, r3, r7
 800e86a:	4638      	mov	r0, r7
 800e86c:	6013      	str	r3, [r2, #0]
 800e86e:	b004      	add	sp, #16
 800e870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e874:	1c59      	adds	r1, r3, #1
 800e876:	9103      	str	r1, [sp, #12]
 800e878:	701a      	strb	r2, [r3, #0]
 800e87a:	e7f0      	b.n	800e85e <__cvt+0xa6>

0800e87c <__exponent>:
 800e87c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e87e:	4603      	mov	r3, r0
 800e880:	2900      	cmp	r1, #0
 800e882:	bfb8      	it	lt
 800e884:	4249      	neglt	r1, r1
 800e886:	f803 2b02 	strb.w	r2, [r3], #2
 800e88a:	bfb4      	ite	lt
 800e88c:	222d      	movlt	r2, #45	; 0x2d
 800e88e:	222b      	movge	r2, #43	; 0x2b
 800e890:	2909      	cmp	r1, #9
 800e892:	7042      	strb	r2, [r0, #1]
 800e894:	dd2a      	ble.n	800e8ec <__exponent+0x70>
 800e896:	f10d 0207 	add.w	r2, sp, #7
 800e89a:	4617      	mov	r7, r2
 800e89c:	260a      	movs	r6, #10
 800e89e:	4694      	mov	ip, r2
 800e8a0:	fb91 f5f6 	sdiv	r5, r1, r6
 800e8a4:	fb06 1415 	mls	r4, r6, r5, r1
 800e8a8:	3430      	adds	r4, #48	; 0x30
 800e8aa:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800e8ae:	460c      	mov	r4, r1
 800e8b0:	2c63      	cmp	r4, #99	; 0x63
 800e8b2:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 800e8b6:	4629      	mov	r1, r5
 800e8b8:	dcf1      	bgt.n	800e89e <__exponent+0x22>
 800e8ba:	3130      	adds	r1, #48	; 0x30
 800e8bc:	f1ac 0402 	sub.w	r4, ip, #2
 800e8c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e8c4:	1c41      	adds	r1, r0, #1
 800e8c6:	4622      	mov	r2, r4
 800e8c8:	42ba      	cmp	r2, r7
 800e8ca:	d30a      	bcc.n	800e8e2 <__exponent+0x66>
 800e8cc:	f10d 0209 	add.w	r2, sp, #9
 800e8d0:	eba2 020c 	sub.w	r2, r2, ip
 800e8d4:	42bc      	cmp	r4, r7
 800e8d6:	bf88      	it	hi
 800e8d8:	2200      	movhi	r2, #0
 800e8da:	4413      	add	r3, r2
 800e8dc:	1a18      	subs	r0, r3, r0
 800e8de:	b003      	add	sp, #12
 800e8e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8e2:	f812 5b01 	ldrb.w	r5, [r2], #1
 800e8e6:	f801 5f01 	strb.w	r5, [r1, #1]!
 800e8ea:	e7ed      	b.n	800e8c8 <__exponent+0x4c>
 800e8ec:	2330      	movs	r3, #48	; 0x30
 800e8ee:	3130      	adds	r1, #48	; 0x30
 800e8f0:	7083      	strb	r3, [r0, #2]
 800e8f2:	70c1      	strb	r1, [r0, #3]
 800e8f4:	1d03      	adds	r3, r0, #4
 800e8f6:	e7f1      	b.n	800e8dc <__exponent+0x60>

0800e8f8 <_printf_float>:
 800e8f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8fc:	ed2d 8b02 	vpush	{d8}
 800e900:	b08d      	sub	sp, #52	; 0x34
 800e902:	460c      	mov	r4, r1
 800e904:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e908:	4616      	mov	r6, r2
 800e90a:	461f      	mov	r7, r3
 800e90c:	4605      	mov	r5, r0
 800e90e:	f000 fc91 	bl	800f234 <_localeconv_r>
 800e912:	f8d0 a000 	ldr.w	sl, [r0]
 800e916:	4650      	mov	r0, sl
 800e918:	f7f1 fcaa 	bl	8000270 <strlen>
 800e91c:	2300      	movs	r3, #0
 800e91e:	930a      	str	r3, [sp, #40]	; 0x28
 800e920:	6823      	ldr	r3, [r4, #0]
 800e922:	9305      	str	r3, [sp, #20]
 800e924:	f8d8 3000 	ldr.w	r3, [r8]
 800e928:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e92c:	3307      	adds	r3, #7
 800e92e:	f023 0307 	bic.w	r3, r3, #7
 800e932:	f103 0208 	add.w	r2, r3, #8
 800e936:	f8c8 2000 	str.w	r2, [r8]
 800e93a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e93e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e942:	9307      	str	r3, [sp, #28]
 800e944:	f8cd 8018 	str.w	r8, [sp, #24]
 800e948:	ee08 0a10 	vmov	s16, r0
 800e94c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800e950:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e954:	4b9e      	ldr	r3, [pc, #632]	; (800ebd0 <_printf_float+0x2d8>)
 800e956:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e95a:	f7f2 f8e7 	bl	8000b2c <__aeabi_dcmpun>
 800e95e:	bb88      	cbnz	r0, 800e9c4 <_printf_float+0xcc>
 800e960:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e964:	4b9a      	ldr	r3, [pc, #616]	; (800ebd0 <_printf_float+0x2d8>)
 800e966:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e96a:	f7f2 f8c1 	bl	8000af0 <__aeabi_dcmple>
 800e96e:	bb48      	cbnz	r0, 800e9c4 <_printf_float+0xcc>
 800e970:	2200      	movs	r2, #0
 800e972:	2300      	movs	r3, #0
 800e974:	4640      	mov	r0, r8
 800e976:	4649      	mov	r1, r9
 800e978:	f7f2 f8b0 	bl	8000adc <__aeabi_dcmplt>
 800e97c:	b110      	cbz	r0, 800e984 <_printf_float+0x8c>
 800e97e:	232d      	movs	r3, #45	; 0x2d
 800e980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e984:	4a93      	ldr	r2, [pc, #588]	; (800ebd4 <_printf_float+0x2dc>)
 800e986:	4b94      	ldr	r3, [pc, #592]	; (800ebd8 <_printf_float+0x2e0>)
 800e988:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e98c:	bf94      	ite	ls
 800e98e:	4690      	movls	r8, r2
 800e990:	4698      	movhi	r8, r3
 800e992:	2303      	movs	r3, #3
 800e994:	6123      	str	r3, [r4, #16]
 800e996:	9b05      	ldr	r3, [sp, #20]
 800e998:	f023 0304 	bic.w	r3, r3, #4
 800e99c:	6023      	str	r3, [r4, #0]
 800e99e:	f04f 0900 	mov.w	r9, #0
 800e9a2:	9700      	str	r7, [sp, #0]
 800e9a4:	4633      	mov	r3, r6
 800e9a6:	aa0b      	add	r2, sp, #44	; 0x2c
 800e9a8:	4621      	mov	r1, r4
 800e9aa:	4628      	mov	r0, r5
 800e9ac:	f000 f9da 	bl	800ed64 <_printf_common>
 800e9b0:	3001      	adds	r0, #1
 800e9b2:	f040 8090 	bne.w	800ead6 <_printf_float+0x1de>
 800e9b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e9ba:	b00d      	add	sp, #52	; 0x34
 800e9bc:	ecbd 8b02 	vpop	{d8}
 800e9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e9c4:	4642      	mov	r2, r8
 800e9c6:	464b      	mov	r3, r9
 800e9c8:	4640      	mov	r0, r8
 800e9ca:	4649      	mov	r1, r9
 800e9cc:	f7f2 f8ae 	bl	8000b2c <__aeabi_dcmpun>
 800e9d0:	b140      	cbz	r0, 800e9e4 <_printf_float+0xec>
 800e9d2:	464b      	mov	r3, r9
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	bfbc      	itt	lt
 800e9d8:	232d      	movlt	r3, #45	; 0x2d
 800e9da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e9de:	4a7f      	ldr	r2, [pc, #508]	; (800ebdc <_printf_float+0x2e4>)
 800e9e0:	4b7f      	ldr	r3, [pc, #508]	; (800ebe0 <_printf_float+0x2e8>)
 800e9e2:	e7d1      	b.n	800e988 <_printf_float+0x90>
 800e9e4:	6863      	ldr	r3, [r4, #4]
 800e9e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e9ea:	9206      	str	r2, [sp, #24]
 800e9ec:	1c5a      	adds	r2, r3, #1
 800e9ee:	d13f      	bne.n	800ea70 <_printf_float+0x178>
 800e9f0:	2306      	movs	r3, #6
 800e9f2:	6063      	str	r3, [r4, #4]
 800e9f4:	9b05      	ldr	r3, [sp, #20]
 800e9f6:	6861      	ldr	r1, [r4, #4]
 800e9f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e9fc:	2300      	movs	r3, #0
 800e9fe:	9303      	str	r3, [sp, #12]
 800ea00:	ab0a      	add	r3, sp, #40	; 0x28
 800ea02:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ea06:	ab09      	add	r3, sp, #36	; 0x24
 800ea08:	ec49 8b10 	vmov	d0, r8, r9
 800ea0c:	9300      	str	r3, [sp, #0]
 800ea0e:	6022      	str	r2, [r4, #0]
 800ea10:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ea14:	4628      	mov	r0, r5
 800ea16:	f7ff fecf 	bl	800e7b8 <__cvt>
 800ea1a:	9b06      	ldr	r3, [sp, #24]
 800ea1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ea1e:	2b47      	cmp	r3, #71	; 0x47
 800ea20:	4680      	mov	r8, r0
 800ea22:	d108      	bne.n	800ea36 <_printf_float+0x13e>
 800ea24:	1cc8      	adds	r0, r1, #3
 800ea26:	db02      	blt.n	800ea2e <_printf_float+0x136>
 800ea28:	6863      	ldr	r3, [r4, #4]
 800ea2a:	4299      	cmp	r1, r3
 800ea2c:	dd41      	ble.n	800eab2 <_printf_float+0x1ba>
 800ea2e:	f1ab 0302 	sub.w	r3, fp, #2
 800ea32:	fa5f fb83 	uxtb.w	fp, r3
 800ea36:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ea3a:	d820      	bhi.n	800ea7e <_printf_float+0x186>
 800ea3c:	3901      	subs	r1, #1
 800ea3e:	465a      	mov	r2, fp
 800ea40:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ea44:	9109      	str	r1, [sp, #36]	; 0x24
 800ea46:	f7ff ff19 	bl	800e87c <__exponent>
 800ea4a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea4c:	1813      	adds	r3, r2, r0
 800ea4e:	2a01      	cmp	r2, #1
 800ea50:	4681      	mov	r9, r0
 800ea52:	6123      	str	r3, [r4, #16]
 800ea54:	dc02      	bgt.n	800ea5c <_printf_float+0x164>
 800ea56:	6822      	ldr	r2, [r4, #0]
 800ea58:	07d2      	lsls	r2, r2, #31
 800ea5a:	d501      	bpl.n	800ea60 <_printf_float+0x168>
 800ea5c:	3301      	adds	r3, #1
 800ea5e:	6123      	str	r3, [r4, #16]
 800ea60:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d09c      	beq.n	800e9a2 <_printf_float+0xaa>
 800ea68:	232d      	movs	r3, #45	; 0x2d
 800ea6a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea6e:	e798      	b.n	800e9a2 <_printf_float+0xaa>
 800ea70:	9a06      	ldr	r2, [sp, #24]
 800ea72:	2a47      	cmp	r2, #71	; 0x47
 800ea74:	d1be      	bne.n	800e9f4 <_printf_float+0xfc>
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d1bc      	bne.n	800e9f4 <_printf_float+0xfc>
 800ea7a:	2301      	movs	r3, #1
 800ea7c:	e7b9      	b.n	800e9f2 <_printf_float+0xfa>
 800ea7e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ea82:	d118      	bne.n	800eab6 <_printf_float+0x1be>
 800ea84:	2900      	cmp	r1, #0
 800ea86:	6863      	ldr	r3, [r4, #4]
 800ea88:	dd0b      	ble.n	800eaa2 <_printf_float+0x1aa>
 800ea8a:	6121      	str	r1, [r4, #16]
 800ea8c:	b913      	cbnz	r3, 800ea94 <_printf_float+0x19c>
 800ea8e:	6822      	ldr	r2, [r4, #0]
 800ea90:	07d0      	lsls	r0, r2, #31
 800ea92:	d502      	bpl.n	800ea9a <_printf_float+0x1a2>
 800ea94:	3301      	adds	r3, #1
 800ea96:	440b      	add	r3, r1
 800ea98:	6123      	str	r3, [r4, #16]
 800ea9a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ea9c:	f04f 0900 	mov.w	r9, #0
 800eaa0:	e7de      	b.n	800ea60 <_printf_float+0x168>
 800eaa2:	b913      	cbnz	r3, 800eaaa <_printf_float+0x1b2>
 800eaa4:	6822      	ldr	r2, [r4, #0]
 800eaa6:	07d2      	lsls	r2, r2, #31
 800eaa8:	d501      	bpl.n	800eaae <_printf_float+0x1b6>
 800eaaa:	3302      	adds	r3, #2
 800eaac:	e7f4      	b.n	800ea98 <_printf_float+0x1a0>
 800eaae:	2301      	movs	r3, #1
 800eab0:	e7f2      	b.n	800ea98 <_printf_float+0x1a0>
 800eab2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800eab6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eab8:	4299      	cmp	r1, r3
 800eaba:	db05      	blt.n	800eac8 <_printf_float+0x1d0>
 800eabc:	6823      	ldr	r3, [r4, #0]
 800eabe:	6121      	str	r1, [r4, #16]
 800eac0:	07d8      	lsls	r0, r3, #31
 800eac2:	d5ea      	bpl.n	800ea9a <_printf_float+0x1a2>
 800eac4:	1c4b      	adds	r3, r1, #1
 800eac6:	e7e7      	b.n	800ea98 <_printf_float+0x1a0>
 800eac8:	2900      	cmp	r1, #0
 800eaca:	bfd4      	ite	le
 800eacc:	f1c1 0202 	rsble	r2, r1, #2
 800ead0:	2201      	movgt	r2, #1
 800ead2:	4413      	add	r3, r2
 800ead4:	e7e0      	b.n	800ea98 <_printf_float+0x1a0>
 800ead6:	6823      	ldr	r3, [r4, #0]
 800ead8:	055a      	lsls	r2, r3, #21
 800eada:	d407      	bmi.n	800eaec <_printf_float+0x1f4>
 800eadc:	6923      	ldr	r3, [r4, #16]
 800eade:	4642      	mov	r2, r8
 800eae0:	4631      	mov	r1, r6
 800eae2:	4628      	mov	r0, r5
 800eae4:	47b8      	blx	r7
 800eae6:	3001      	adds	r0, #1
 800eae8:	d12c      	bne.n	800eb44 <_printf_float+0x24c>
 800eaea:	e764      	b.n	800e9b6 <_printf_float+0xbe>
 800eaec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800eaf0:	f240 80e0 	bls.w	800ecb4 <_printf_float+0x3bc>
 800eaf4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800eaf8:	2200      	movs	r2, #0
 800eafa:	2300      	movs	r3, #0
 800eafc:	f7f1 ffe4 	bl	8000ac8 <__aeabi_dcmpeq>
 800eb00:	2800      	cmp	r0, #0
 800eb02:	d034      	beq.n	800eb6e <_printf_float+0x276>
 800eb04:	4a37      	ldr	r2, [pc, #220]	; (800ebe4 <_printf_float+0x2ec>)
 800eb06:	2301      	movs	r3, #1
 800eb08:	4631      	mov	r1, r6
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	47b8      	blx	r7
 800eb0e:	3001      	adds	r0, #1
 800eb10:	f43f af51 	beq.w	800e9b6 <_printf_float+0xbe>
 800eb14:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800eb18:	429a      	cmp	r2, r3
 800eb1a:	db02      	blt.n	800eb22 <_printf_float+0x22a>
 800eb1c:	6823      	ldr	r3, [r4, #0]
 800eb1e:	07d8      	lsls	r0, r3, #31
 800eb20:	d510      	bpl.n	800eb44 <_printf_float+0x24c>
 800eb22:	ee18 3a10 	vmov	r3, s16
 800eb26:	4652      	mov	r2, sl
 800eb28:	4631      	mov	r1, r6
 800eb2a:	4628      	mov	r0, r5
 800eb2c:	47b8      	blx	r7
 800eb2e:	3001      	adds	r0, #1
 800eb30:	f43f af41 	beq.w	800e9b6 <_printf_float+0xbe>
 800eb34:	f04f 0800 	mov.w	r8, #0
 800eb38:	f104 091a 	add.w	r9, r4, #26
 800eb3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eb3e:	3b01      	subs	r3, #1
 800eb40:	4543      	cmp	r3, r8
 800eb42:	dc09      	bgt.n	800eb58 <_printf_float+0x260>
 800eb44:	6823      	ldr	r3, [r4, #0]
 800eb46:	079b      	lsls	r3, r3, #30
 800eb48:	f100 8107 	bmi.w	800ed5a <_printf_float+0x462>
 800eb4c:	68e0      	ldr	r0, [r4, #12]
 800eb4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb50:	4298      	cmp	r0, r3
 800eb52:	bfb8      	it	lt
 800eb54:	4618      	movlt	r0, r3
 800eb56:	e730      	b.n	800e9ba <_printf_float+0xc2>
 800eb58:	2301      	movs	r3, #1
 800eb5a:	464a      	mov	r2, r9
 800eb5c:	4631      	mov	r1, r6
 800eb5e:	4628      	mov	r0, r5
 800eb60:	47b8      	blx	r7
 800eb62:	3001      	adds	r0, #1
 800eb64:	f43f af27 	beq.w	800e9b6 <_printf_float+0xbe>
 800eb68:	f108 0801 	add.w	r8, r8, #1
 800eb6c:	e7e6      	b.n	800eb3c <_printf_float+0x244>
 800eb6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	dc39      	bgt.n	800ebe8 <_printf_float+0x2f0>
 800eb74:	4a1b      	ldr	r2, [pc, #108]	; (800ebe4 <_printf_float+0x2ec>)
 800eb76:	2301      	movs	r3, #1
 800eb78:	4631      	mov	r1, r6
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	47b8      	blx	r7
 800eb7e:	3001      	adds	r0, #1
 800eb80:	f43f af19 	beq.w	800e9b6 <_printf_float+0xbe>
 800eb84:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800eb88:	4313      	orrs	r3, r2
 800eb8a:	d102      	bne.n	800eb92 <_printf_float+0x29a>
 800eb8c:	6823      	ldr	r3, [r4, #0]
 800eb8e:	07d9      	lsls	r1, r3, #31
 800eb90:	d5d8      	bpl.n	800eb44 <_printf_float+0x24c>
 800eb92:	ee18 3a10 	vmov	r3, s16
 800eb96:	4652      	mov	r2, sl
 800eb98:	4631      	mov	r1, r6
 800eb9a:	4628      	mov	r0, r5
 800eb9c:	47b8      	blx	r7
 800eb9e:	3001      	adds	r0, #1
 800eba0:	f43f af09 	beq.w	800e9b6 <_printf_float+0xbe>
 800eba4:	f04f 0900 	mov.w	r9, #0
 800eba8:	f104 0a1a 	add.w	sl, r4, #26
 800ebac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ebae:	425b      	negs	r3, r3
 800ebb0:	454b      	cmp	r3, r9
 800ebb2:	dc01      	bgt.n	800ebb8 <_printf_float+0x2c0>
 800ebb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ebb6:	e792      	b.n	800eade <_printf_float+0x1e6>
 800ebb8:	2301      	movs	r3, #1
 800ebba:	4652      	mov	r2, sl
 800ebbc:	4631      	mov	r1, r6
 800ebbe:	4628      	mov	r0, r5
 800ebc0:	47b8      	blx	r7
 800ebc2:	3001      	adds	r0, #1
 800ebc4:	f43f aef7 	beq.w	800e9b6 <_printf_float+0xbe>
 800ebc8:	f109 0901 	add.w	r9, r9, #1
 800ebcc:	e7ee      	b.n	800ebac <_printf_float+0x2b4>
 800ebce:	bf00      	nop
 800ebd0:	7fefffff 	.word	0x7fefffff
 800ebd4:	080124d0 	.word	0x080124d0
 800ebd8:	080124d4 	.word	0x080124d4
 800ebdc:	080124d8 	.word	0x080124d8
 800ebe0:	080124dc 	.word	0x080124dc
 800ebe4:	080124e0 	.word	0x080124e0
 800ebe8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ebea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ebec:	429a      	cmp	r2, r3
 800ebee:	bfa8      	it	ge
 800ebf0:	461a      	movge	r2, r3
 800ebf2:	2a00      	cmp	r2, #0
 800ebf4:	4691      	mov	r9, r2
 800ebf6:	dc37      	bgt.n	800ec68 <_printf_float+0x370>
 800ebf8:	f04f 0b00 	mov.w	fp, #0
 800ebfc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec00:	f104 021a 	add.w	r2, r4, #26
 800ec04:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ec06:	9305      	str	r3, [sp, #20]
 800ec08:	eba3 0309 	sub.w	r3, r3, r9
 800ec0c:	455b      	cmp	r3, fp
 800ec0e:	dc33      	bgt.n	800ec78 <_printf_float+0x380>
 800ec10:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec14:	429a      	cmp	r2, r3
 800ec16:	db3b      	blt.n	800ec90 <_printf_float+0x398>
 800ec18:	6823      	ldr	r3, [r4, #0]
 800ec1a:	07da      	lsls	r2, r3, #31
 800ec1c:	d438      	bmi.n	800ec90 <_printf_float+0x398>
 800ec1e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800ec22:	eba2 0903 	sub.w	r9, r2, r3
 800ec26:	9b05      	ldr	r3, [sp, #20]
 800ec28:	1ad2      	subs	r2, r2, r3
 800ec2a:	4591      	cmp	r9, r2
 800ec2c:	bfa8      	it	ge
 800ec2e:	4691      	movge	r9, r2
 800ec30:	f1b9 0f00 	cmp.w	r9, #0
 800ec34:	dc35      	bgt.n	800eca2 <_printf_float+0x3aa>
 800ec36:	f04f 0800 	mov.w	r8, #0
 800ec3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ec3e:	f104 0a1a 	add.w	sl, r4, #26
 800ec42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ec46:	1a9b      	subs	r3, r3, r2
 800ec48:	eba3 0309 	sub.w	r3, r3, r9
 800ec4c:	4543      	cmp	r3, r8
 800ec4e:	f77f af79 	ble.w	800eb44 <_printf_float+0x24c>
 800ec52:	2301      	movs	r3, #1
 800ec54:	4652      	mov	r2, sl
 800ec56:	4631      	mov	r1, r6
 800ec58:	4628      	mov	r0, r5
 800ec5a:	47b8      	blx	r7
 800ec5c:	3001      	adds	r0, #1
 800ec5e:	f43f aeaa 	beq.w	800e9b6 <_printf_float+0xbe>
 800ec62:	f108 0801 	add.w	r8, r8, #1
 800ec66:	e7ec      	b.n	800ec42 <_printf_float+0x34a>
 800ec68:	4613      	mov	r3, r2
 800ec6a:	4631      	mov	r1, r6
 800ec6c:	4642      	mov	r2, r8
 800ec6e:	4628      	mov	r0, r5
 800ec70:	47b8      	blx	r7
 800ec72:	3001      	adds	r0, #1
 800ec74:	d1c0      	bne.n	800ebf8 <_printf_float+0x300>
 800ec76:	e69e      	b.n	800e9b6 <_printf_float+0xbe>
 800ec78:	2301      	movs	r3, #1
 800ec7a:	4631      	mov	r1, r6
 800ec7c:	4628      	mov	r0, r5
 800ec7e:	9205      	str	r2, [sp, #20]
 800ec80:	47b8      	blx	r7
 800ec82:	3001      	adds	r0, #1
 800ec84:	f43f ae97 	beq.w	800e9b6 <_printf_float+0xbe>
 800ec88:	9a05      	ldr	r2, [sp, #20]
 800ec8a:	f10b 0b01 	add.w	fp, fp, #1
 800ec8e:	e7b9      	b.n	800ec04 <_printf_float+0x30c>
 800ec90:	ee18 3a10 	vmov	r3, s16
 800ec94:	4652      	mov	r2, sl
 800ec96:	4631      	mov	r1, r6
 800ec98:	4628      	mov	r0, r5
 800ec9a:	47b8      	blx	r7
 800ec9c:	3001      	adds	r0, #1
 800ec9e:	d1be      	bne.n	800ec1e <_printf_float+0x326>
 800eca0:	e689      	b.n	800e9b6 <_printf_float+0xbe>
 800eca2:	9a05      	ldr	r2, [sp, #20]
 800eca4:	464b      	mov	r3, r9
 800eca6:	4442      	add	r2, r8
 800eca8:	4631      	mov	r1, r6
 800ecaa:	4628      	mov	r0, r5
 800ecac:	47b8      	blx	r7
 800ecae:	3001      	adds	r0, #1
 800ecb0:	d1c1      	bne.n	800ec36 <_printf_float+0x33e>
 800ecb2:	e680      	b.n	800e9b6 <_printf_float+0xbe>
 800ecb4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ecb6:	2a01      	cmp	r2, #1
 800ecb8:	dc01      	bgt.n	800ecbe <_printf_float+0x3c6>
 800ecba:	07db      	lsls	r3, r3, #31
 800ecbc:	d53a      	bpl.n	800ed34 <_printf_float+0x43c>
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	4642      	mov	r2, r8
 800ecc2:	4631      	mov	r1, r6
 800ecc4:	4628      	mov	r0, r5
 800ecc6:	47b8      	blx	r7
 800ecc8:	3001      	adds	r0, #1
 800ecca:	f43f ae74 	beq.w	800e9b6 <_printf_float+0xbe>
 800ecce:	ee18 3a10 	vmov	r3, s16
 800ecd2:	4652      	mov	r2, sl
 800ecd4:	4631      	mov	r1, r6
 800ecd6:	4628      	mov	r0, r5
 800ecd8:	47b8      	blx	r7
 800ecda:	3001      	adds	r0, #1
 800ecdc:	f43f ae6b 	beq.w	800e9b6 <_printf_float+0xbe>
 800ece0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ece4:	2200      	movs	r2, #0
 800ece6:	2300      	movs	r3, #0
 800ece8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800ecec:	f7f1 feec 	bl	8000ac8 <__aeabi_dcmpeq>
 800ecf0:	b9d8      	cbnz	r0, 800ed2a <_printf_float+0x432>
 800ecf2:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800ecf6:	f108 0201 	add.w	r2, r8, #1
 800ecfa:	4631      	mov	r1, r6
 800ecfc:	4628      	mov	r0, r5
 800ecfe:	47b8      	blx	r7
 800ed00:	3001      	adds	r0, #1
 800ed02:	d10e      	bne.n	800ed22 <_printf_float+0x42a>
 800ed04:	e657      	b.n	800e9b6 <_printf_float+0xbe>
 800ed06:	2301      	movs	r3, #1
 800ed08:	4652      	mov	r2, sl
 800ed0a:	4631      	mov	r1, r6
 800ed0c:	4628      	mov	r0, r5
 800ed0e:	47b8      	blx	r7
 800ed10:	3001      	adds	r0, #1
 800ed12:	f43f ae50 	beq.w	800e9b6 <_printf_float+0xbe>
 800ed16:	f108 0801 	add.w	r8, r8, #1
 800ed1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed1c:	3b01      	subs	r3, #1
 800ed1e:	4543      	cmp	r3, r8
 800ed20:	dcf1      	bgt.n	800ed06 <_printf_float+0x40e>
 800ed22:	464b      	mov	r3, r9
 800ed24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ed28:	e6da      	b.n	800eae0 <_printf_float+0x1e8>
 800ed2a:	f04f 0800 	mov.w	r8, #0
 800ed2e:	f104 0a1a 	add.w	sl, r4, #26
 800ed32:	e7f2      	b.n	800ed1a <_printf_float+0x422>
 800ed34:	2301      	movs	r3, #1
 800ed36:	4642      	mov	r2, r8
 800ed38:	e7df      	b.n	800ecfa <_printf_float+0x402>
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	464a      	mov	r2, r9
 800ed3e:	4631      	mov	r1, r6
 800ed40:	4628      	mov	r0, r5
 800ed42:	47b8      	blx	r7
 800ed44:	3001      	adds	r0, #1
 800ed46:	f43f ae36 	beq.w	800e9b6 <_printf_float+0xbe>
 800ed4a:	f108 0801 	add.w	r8, r8, #1
 800ed4e:	68e3      	ldr	r3, [r4, #12]
 800ed50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ed52:	1a5b      	subs	r3, r3, r1
 800ed54:	4543      	cmp	r3, r8
 800ed56:	dcf0      	bgt.n	800ed3a <_printf_float+0x442>
 800ed58:	e6f8      	b.n	800eb4c <_printf_float+0x254>
 800ed5a:	f04f 0800 	mov.w	r8, #0
 800ed5e:	f104 0919 	add.w	r9, r4, #25
 800ed62:	e7f4      	b.n	800ed4e <_printf_float+0x456>

0800ed64 <_printf_common>:
 800ed64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed68:	4616      	mov	r6, r2
 800ed6a:	4699      	mov	r9, r3
 800ed6c:	688a      	ldr	r2, [r1, #8]
 800ed6e:	690b      	ldr	r3, [r1, #16]
 800ed70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ed74:	4293      	cmp	r3, r2
 800ed76:	bfb8      	it	lt
 800ed78:	4613      	movlt	r3, r2
 800ed7a:	6033      	str	r3, [r6, #0]
 800ed7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ed80:	4607      	mov	r7, r0
 800ed82:	460c      	mov	r4, r1
 800ed84:	b10a      	cbz	r2, 800ed8a <_printf_common+0x26>
 800ed86:	3301      	adds	r3, #1
 800ed88:	6033      	str	r3, [r6, #0]
 800ed8a:	6823      	ldr	r3, [r4, #0]
 800ed8c:	0699      	lsls	r1, r3, #26
 800ed8e:	bf42      	ittt	mi
 800ed90:	6833      	ldrmi	r3, [r6, #0]
 800ed92:	3302      	addmi	r3, #2
 800ed94:	6033      	strmi	r3, [r6, #0]
 800ed96:	6825      	ldr	r5, [r4, #0]
 800ed98:	f015 0506 	ands.w	r5, r5, #6
 800ed9c:	d106      	bne.n	800edac <_printf_common+0x48>
 800ed9e:	f104 0a19 	add.w	sl, r4, #25
 800eda2:	68e3      	ldr	r3, [r4, #12]
 800eda4:	6832      	ldr	r2, [r6, #0]
 800eda6:	1a9b      	subs	r3, r3, r2
 800eda8:	42ab      	cmp	r3, r5
 800edaa:	dc26      	bgt.n	800edfa <_printf_common+0x96>
 800edac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800edb0:	1e13      	subs	r3, r2, #0
 800edb2:	6822      	ldr	r2, [r4, #0]
 800edb4:	bf18      	it	ne
 800edb6:	2301      	movne	r3, #1
 800edb8:	0692      	lsls	r2, r2, #26
 800edba:	d42b      	bmi.n	800ee14 <_printf_common+0xb0>
 800edbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800edc0:	4649      	mov	r1, r9
 800edc2:	4638      	mov	r0, r7
 800edc4:	47c0      	blx	r8
 800edc6:	3001      	adds	r0, #1
 800edc8:	d01e      	beq.n	800ee08 <_printf_common+0xa4>
 800edca:	6823      	ldr	r3, [r4, #0]
 800edcc:	6922      	ldr	r2, [r4, #16]
 800edce:	f003 0306 	and.w	r3, r3, #6
 800edd2:	2b04      	cmp	r3, #4
 800edd4:	bf02      	ittt	eq
 800edd6:	68e5      	ldreq	r5, [r4, #12]
 800edd8:	6833      	ldreq	r3, [r6, #0]
 800edda:	1aed      	subeq	r5, r5, r3
 800eddc:	68a3      	ldr	r3, [r4, #8]
 800edde:	bf0c      	ite	eq
 800ede0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ede4:	2500      	movne	r5, #0
 800ede6:	4293      	cmp	r3, r2
 800ede8:	bfc4      	itt	gt
 800edea:	1a9b      	subgt	r3, r3, r2
 800edec:	18ed      	addgt	r5, r5, r3
 800edee:	2600      	movs	r6, #0
 800edf0:	341a      	adds	r4, #26
 800edf2:	42b5      	cmp	r5, r6
 800edf4:	d11a      	bne.n	800ee2c <_printf_common+0xc8>
 800edf6:	2000      	movs	r0, #0
 800edf8:	e008      	b.n	800ee0c <_printf_common+0xa8>
 800edfa:	2301      	movs	r3, #1
 800edfc:	4652      	mov	r2, sl
 800edfe:	4649      	mov	r1, r9
 800ee00:	4638      	mov	r0, r7
 800ee02:	47c0      	blx	r8
 800ee04:	3001      	adds	r0, #1
 800ee06:	d103      	bne.n	800ee10 <_printf_common+0xac>
 800ee08:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ee0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee10:	3501      	adds	r5, #1
 800ee12:	e7c6      	b.n	800eda2 <_printf_common+0x3e>
 800ee14:	18e1      	adds	r1, r4, r3
 800ee16:	1c5a      	adds	r2, r3, #1
 800ee18:	2030      	movs	r0, #48	; 0x30
 800ee1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ee1e:	4422      	add	r2, r4
 800ee20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ee24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ee28:	3302      	adds	r3, #2
 800ee2a:	e7c7      	b.n	800edbc <_printf_common+0x58>
 800ee2c:	2301      	movs	r3, #1
 800ee2e:	4622      	mov	r2, r4
 800ee30:	4649      	mov	r1, r9
 800ee32:	4638      	mov	r0, r7
 800ee34:	47c0      	blx	r8
 800ee36:	3001      	adds	r0, #1
 800ee38:	d0e6      	beq.n	800ee08 <_printf_common+0xa4>
 800ee3a:	3601      	adds	r6, #1
 800ee3c:	e7d9      	b.n	800edf2 <_printf_common+0x8e>
	...

0800ee40 <_printf_i>:
 800ee40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee44:	7e0f      	ldrb	r7, [r1, #24]
 800ee46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ee48:	2f78      	cmp	r7, #120	; 0x78
 800ee4a:	4691      	mov	r9, r2
 800ee4c:	4680      	mov	r8, r0
 800ee4e:	460c      	mov	r4, r1
 800ee50:	469a      	mov	sl, r3
 800ee52:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ee56:	d807      	bhi.n	800ee68 <_printf_i+0x28>
 800ee58:	2f62      	cmp	r7, #98	; 0x62
 800ee5a:	d80a      	bhi.n	800ee72 <_printf_i+0x32>
 800ee5c:	2f00      	cmp	r7, #0
 800ee5e:	f000 80d4 	beq.w	800f00a <_printf_i+0x1ca>
 800ee62:	2f58      	cmp	r7, #88	; 0x58
 800ee64:	f000 80c0 	beq.w	800efe8 <_printf_i+0x1a8>
 800ee68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ee70:	e03a      	b.n	800eee8 <_printf_i+0xa8>
 800ee72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ee76:	2b15      	cmp	r3, #21
 800ee78:	d8f6      	bhi.n	800ee68 <_printf_i+0x28>
 800ee7a:	a101      	add	r1, pc, #4	; (adr r1, 800ee80 <_printf_i+0x40>)
 800ee7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ee80:	0800eed9 	.word	0x0800eed9
 800ee84:	0800eeed 	.word	0x0800eeed
 800ee88:	0800ee69 	.word	0x0800ee69
 800ee8c:	0800ee69 	.word	0x0800ee69
 800ee90:	0800ee69 	.word	0x0800ee69
 800ee94:	0800ee69 	.word	0x0800ee69
 800ee98:	0800eeed 	.word	0x0800eeed
 800ee9c:	0800ee69 	.word	0x0800ee69
 800eea0:	0800ee69 	.word	0x0800ee69
 800eea4:	0800ee69 	.word	0x0800ee69
 800eea8:	0800ee69 	.word	0x0800ee69
 800eeac:	0800eff1 	.word	0x0800eff1
 800eeb0:	0800ef19 	.word	0x0800ef19
 800eeb4:	0800efab 	.word	0x0800efab
 800eeb8:	0800ee69 	.word	0x0800ee69
 800eebc:	0800ee69 	.word	0x0800ee69
 800eec0:	0800f013 	.word	0x0800f013
 800eec4:	0800ee69 	.word	0x0800ee69
 800eec8:	0800ef19 	.word	0x0800ef19
 800eecc:	0800ee69 	.word	0x0800ee69
 800eed0:	0800ee69 	.word	0x0800ee69
 800eed4:	0800efb3 	.word	0x0800efb3
 800eed8:	682b      	ldr	r3, [r5, #0]
 800eeda:	1d1a      	adds	r2, r3, #4
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	602a      	str	r2, [r5, #0]
 800eee0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eee4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eee8:	2301      	movs	r3, #1
 800eeea:	e09f      	b.n	800f02c <_printf_i+0x1ec>
 800eeec:	6820      	ldr	r0, [r4, #0]
 800eeee:	682b      	ldr	r3, [r5, #0]
 800eef0:	0607      	lsls	r7, r0, #24
 800eef2:	f103 0104 	add.w	r1, r3, #4
 800eef6:	6029      	str	r1, [r5, #0]
 800eef8:	d501      	bpl.n	800eefe <_printf_i+0xbe>
 800eefa:	681e      	ldr	r6, [r3, #0]
 800eefc:	e003      	b.n	800ef06 <_printf_i+0xc6>
 800eefe:	0646      	lsls	r6, r0, #25
 800ef00:	d5fb      	bpl.n	800eefa <_printf_i+0xba>
 800ef02:	f9b3 6000 	ldrsh.w	r6, [r3]
 800ef06:	2e00      	cmp	r6, #0
 800ef08:	da03      	bge.n	800ef12 <_printf_i+0xd2>
 800ef0a:	232d      	movs	r3, #45	; 0x2d
 800ef0c:	4276      	negs	r6, r6
 800ef0e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef12:	485a      	ldr	r0, [pc, #360]	; (800f07c <_printf_i+0x23c>)
 800ef14:	230a      	movs	r3, #10
 800ef16:	e012      	b.n	800ef3e <_printf_i+0xfe>
 800ef18:	682b      	ldr	r3, [r5, #0]
 800ef1a:	6820      	ldr	r0, [r4, #0]
 800ef1c:	1d19      	adds	r1, r3, #4
 800ef1e:	6029      	str	r1, [r5, #0]
 800ef20:	0605      	lsls	r5, r0, #24
 800ef22:	d501      	bpl.n	800ef28 <_printf_i+0xe8>
 800ef24:	681e      	ldr	r6, [r3, #0]
 800ef26:	e002      	b.n	800ef2e <_printf_i+0xee>
 800ef28:	0641      	lsls	r1, r0, #25
 800ef2a:	d5fb      	bpl.n	800ef24 <_printf_i+0xe4>
 800ef2c:	881e      	ldrh	r6, [r3, #0]
 800ef2e:	4853      	ldr	r0, [pc, #332]	; (800f07c <_printf_i+0x23c>)
 800ef30:	2f6f      	cmp	r7, #111	; 0x6f
 800ef32:	bf0c      	ite	eq
 800ef34:	2308      	moveq	r3, #8
 800ef36:	230a      	movne	r3, #10
 800ef38:	2100      	movs	r1, #0
 800ef3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ef3e:	6865      	ldr	r5, [r4, #4]
 800ef40:	60a5      	str	r5, [r4, #8]
 800ef42:	2d00      	cmp	r5, #0
 800ef44:	bfa2      	ittt	ge
 800ef46:	6821      	ldrge	r1, [r4, #0]
 800ef48:	f021 0104 	bicge.w	r1, r1, #4
 800ef4c:	6021      	strge	r1, [r4, #0]
 800ef4e:	b90e      	cbnz	r6, 800ef54 <_printf_i+0x114>
 800ef50:	2d00      	cmp	r5, #0
 800ef52:	d04b      	beq.n	800efec <_printf_i+0x1ac>
 800ef54:	4615      	mov	r5, r2
 800ef56:	fbb6 f1f3 	udiv	r1, r6, r3
 800ef5a:	fb03 6711 	mls	r7, r3, r1, r6
 800ef5e:	5dc7      	ldrb	r7, [r0, r7]
 800ef60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ef64:	4637      	mov	r7, r6
 800ef66:	42bb      	cmp	r3, r7
 800ef68:	460e      	mov	r6, r1
 800ef6a:	d9f4      	bls.n	800ef56 <_printf_i+0x116>
 800ef6c:	2b08      	cmp	r3, #8
 800ef6e:	d10b      	bne.n	800ef88 <_printf_i+0x148>
 800ef70:	6823      	ldr	r3, [r4, #0]
 800ef72:	07de      	lsls	r6, r3, #31
 800ef74:	d508      	bpl.n	800ef88 <_printf_i+0x148>
 800ef76:	6923      	ldr	r3, [r4, #16]
 800ef78:	6861      	ldr	r1, [r4, #4]
 800ef7a:	4299      	cmp	r1, r3
 800ef7c:	bfde      	ittt	le
 800ef7e:	2330      	movle	r3, #48	; 0x30
 800ef80:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ef84:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ef88:	1b52      	subs	r2, r2, r5
 800ef8a:	6122      	str	r2, [r4, #16]
 800ef8c:	f8cd a000 	str.w	sl, [sp]
 800ef90:	464b      	mov	r3, r9
 800ef92:	aa03      	add	r2, sp, #12
 800ef94:	4621      	mov	r1, r4
 800ef96:	4640      	mov	r0, r8
 800ef98:	f7ff fee4 	bl	800ed64 <_printf_common>
 800ef9c:	3001      	adds	r0, #1
 800ef9e:	d14a      	bne.n	800f036 <_printf_i+0x1f6>
 800efa0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800efa4:	b004      	add	sp, #16
 800efa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efaa:	6823      	ldr	r3, [r4, #0]
 800efac:	f043 0320 	orr.w	r3, r3, #32
 800efb0:	6023      	str	r3, [r4, #0]
 800efb2:	4833      	ldr	r0, [pc, #204]	; (800f080 <_printf_i+0x240>)
 800efb4:	2778      	movs	r7, #120	; 0x78
 800efb6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800efba:	6823      	ldr	r3, [r4, #0]
 800efbc:	6829      	ldr	r1, [r5, #0]
 800efbe:	061f      	lsls	r7, r3, #24
 800efc0:	f851 6b04 	ldr.w	r6, [r1], #4
 800efc4:	d402      	bmi.n	800efcc <_printf_i+0x18c>
 800efc6:	065f      	lsls	r7, r3, #25
 800efc8:	bf48      	it	mi
 800efca:	b2b6      	uxthmi	r6, r6
 800efcc:	07df      	lsls	r7, r3, #31
 800efce:	bf48      	it	mi
 800efd0:	f043 0320 	orrmi.w	r3, r3, #32
 800efd4:	6029      	str	r1, [r5, #0]
 800efd6:	bf48      	it	mi
 800efd8:	6023      	strmi	r3, [r4, #0]
 800efda:	b91e      	cbnz	r6, 800efe4 <_printf_i+0x1a4>
 800efdc:	6823      	ldr	r3, [r4, #0]
 800efde:	f023 0320 	bic.w	r3, r3, #32
 800efe2:	6023      	str	r3, [r4, #0]
 800efe4:	2310      	movs	r3, #16
 800efe6:	e7a7      	b.n	800ef38 <_printf_i+0xf8>
 800efe8:	4824      	ldr	r0, [pc, #144]	; (800f07c <_printf_i+0x23c>)
 800efea:	e7e4      	b.n	800efb6 <_printf_i+0x176>
 800efec:	4615      	mov	r5, r2
 800efee:	e7bd      	b.n	800ef6c <_printf_i+0x12c>
 800eff0:	682b      	ldr	r3, [r5, #0]
 800eff2:	6826      	ldr	r6, [r4, #0]
 800eff4:	6961      	ldr	r1, [r4, #20]
 800eff6:	1d18      	adds	r0, r3, #4
 800eff8:	6028      	str	r0, [r5, #0]
 800effa:	0635      	lsls	r5, r6, #24
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	d501      	bpl.n	800f004 <_printf_i+0x1c4>
 800f000:	6019      	str	r1, [r3, #0]
 800f002:	e002      	b.n	800f00a <_printf_i+0x1ca>
 800f004:	0670      	lsls	r0, r6, #25
 800f006:	d5fb      	bpl.n	800f000 <_printf_i+0x1c0>
 800f008:	8019      	strh	r1, [r3, #0]
 800f00a:	2300      	movs	r3, #0
 800f00c:	6123      	str	r3, [r4, #16]
 800f00e:	4615      	mov	r5, r2
 800f010:	e7bc      	b.n	800ef8c <_printf_i+0x14c>
 800f012:	682b      	ldr	r3, [r5, #0]
 800f014:	1d1a      	adds	r2, r3, #4
 800f016:	602a      	str	r2, [r5, #0]
 800f018:	681d      	ldr	r5, [r3, #0]
 800f01a:	6862      	ldr	r2, [r4, #4]
 800f01c:	2100      	movs	r1, #0
 800f01e:	4628      	mov	r0, r5
 800f020:	f7f1 f8d6 	bl	80001d0 <memchr>
 800f024:	b108      	cbz	r0, 800f02a <_printf_i+0x1ea>
 800f026:	1b40      	subs	r0, r0, r5
 800f028:	6060      	str	r0, [r4, #4]
 800f02a:	6863      	ldr	r3, [r4, #4]
 800f02c:	6123      	str	r3, [r4, #16]
 800f02e:	2300      	movs	r3, #0
 800f030:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f034:	e7aa      	b.n	800ef8c <_printf_i+0x14c>
 800f036:	6923      	ldr	r3, [r4, #16]
 800f038:	462a      	mov	r2, r5
 800f03a:	4649      	mov	r1, r9
 800f03c:	4640      	mov	r0, r8
 800f03e:	47d0      	blx	sl
 800f040:	3001      	adds	r0, #1
 800f042:	d0ad      	beq.n	800efa0 <_printf_i+0x160>
 800f044:	6823      	ldr	r3, [r4, #0]
 800f046:	079b      	lsls	r3, r3, #30
 800f048:	d413      	bmi.n	800f072 <_printf_i+0x232>
 800f04a:	68e0      	ldr	r0, [r4, #12]
 800f04c:	9b03      	ldr	r3, [sp, #12]
 800f04e:	4298      	cmp	r0, r3
 800f050:	bfb8      	it	lt
 800f052:	4618      	movlt	r0, r3
 800f054:	e7a6      	b.n	800efa4 <_printf_i+0x164>
 800f056:	2301      	movs	r3, #1
 800f058:	4632      	mov	r2, r6
 800f05a:	4649      	mov	r1, r9
 800f05c:	4640      	mov	r0, r8
 800f05e:	47d0      	blx	sl
 800f060:	3001      	adds	r0, #1
 800f062:	d09d      	beq.n	800efa0 <_printf_i+0x160>
 800f064:	3501      	adds	r5, #1
 800f066:	68e3      	ldr	r3, [r4, #12]
 800f068:	9903      	ldr	r1, [sp, #12]
 800f06a:	1a5b      	subs	r3, r3, r1
 800f06c:	42ab      	cmp	r3, r5
 800f06e:	dcf2      	bgt.n	800f056 <_printf_i+0x216>
 800f070:	e7eb      	b.n	800f04a <_printf_i+0x20a>
 800f072:	2500      	movs	r5, #0
 800f074:	f104 0619 	add.w	r6, r4, #25
 800f078:	e7f5      	b.n	800f066 <_printf_i+0x226>
 800f07a:	bf00      	nop
 800f07c:	080124e2 	.word	0x080124e2
 800f080:	080124f3 	.word	0x080124f3

0800f084 <siprintf>:
 800f084:	b40e      	push	{r1, r2, r3}
 800f086:	b500      	push	{lr}
 800f088:	b09c      	sub	sp, #112	; 0x70
 800f08a:	ab1d      	add	r3, sp, #116	; 0x74
 800f08c:	9002      	str	r0, [sp, #8]
 800f08e:	9006      	str	r0, [sp, #24]
 800f090:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f094:	4809      	ldr	r0, [pc, #36]	; (800f0bc <siprintf+0x38>)
 800f096:	9107      	str	r1, [sp, #28]
 800f098:	9104      	str	r1, [sp, #16]
 800f09a:	4909      	ldr	r1, [pc, #36]	; (800f0c0 <siprintf+0x3c>)
 800f09c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f0a0:	9105      	str	r1, [sp, #20]
 800f0a2:	6800      	ldr	r0, [r0, #0]
 800f0a4:	9301      	str	r3, [sp, #4]
 800f0a6:	a902      	add	r1, sp, #8
 800f0a8:	f000 ffca 	bl	8010040 <_svfiprintf_r>
 800f0ac:	9b02      	ldr	r3, [sp, #8]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	701a      	strb	r2, [r3, #0]
 800f0b2:	b01c      	add	sp, #112	; 0x70
 800f0b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f0b8:	b003      	add	sp, #12
 800f0ba:	4770      	bx	lr
 800f0bc:	20000154 	.word	0x20000154
 800f0c0:	ffff0208 	.word	0xffff0208

0800f0c4 <std>:
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	b510      	push	{r4, lr}
 800f0c8:	4604      	mov	r4, r0
 800f0ca:	e9c0 3300 	strd	r3, r3, [r0]
 800f0ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f0d2:	6083      	str	r3, [r0, #8]
 800f0d4:	8181      	strh	r1, [r0, #12]
 800f0d6:	6643      	str	r3, [r0, #100]	; 0x64
 800f0d8:	81c2      	strh	r2, [r0, #14]
 800f0da:	6183      	str	r3, [r0, #24]
 800f0dc:	4619      	mov	r1, r3
 800f0de:	2208      	movs	r2, #8
 800f0e0:	305c      	adds	r0, #92	; 0x5c
 800f0e2:	f000 f89f 	bl	800f224 <memset>
 800f0e6:	4b05      	ldr	r3, [pc, #20]	; (800f0fc <std+0x38>)
 800f0e8:	6263      	str	r3, [r4, #36]	; 0x24
 800f0ea:	4b05      	ldr	r3, [pc, #20]	; (800f100 <std+0x3c>)
 800f0ec:	62a3      	str	r3, [r4, #40]	; 0x28
 800f0ee:	4b05      	ldr	r3, [pc, #20]	; (800f104 <std+0x40>)
 800f0f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f0f2:	4b05      	ldr	r3, [pc, #20]	; (800f108 <std+0x44>)
 800f0f4:	6224      	str	r4, [r4, #32]
 800f0f6:	6323      	str	r3, [r4, #48]	; 0x30
 800f0f8:	bd10      	pop	{r4, pc}
 800f0fa:	bf00      	nop
 800f0fc:	08010bf9 	.word	0x08010bf9
 800f100:	08010c1b 	.word	0x08010c1b
 800f104:	08010c53 	.word	0x08010c53
 800f108:	08010c77 	.word	0x08010c77

0800f10c <stdio_exit_handler>:
 800f10c:	4a02      	ldr	r2, [pc, #8]	; (800f118 <stdio_exit_handler+0xc>)
 800f10e:	4903      	ldr	r1, [pc, #12]	; (800f11c <stdio_exit_handler+0x10>)
 800f110:	4803      	ldr	r0, [pc, #12]	; (800f120 <stdio_exit_handler+0x14>)
 800f112:	f000 b869 	b.w	800f1e8 <_fwalk_sglue>
 800f116:	bf00      	nop
 800f118:	200000fc 	.word	0x200000fc
 800f11c:	08010499 	.word	0x08010499
 800f120:	20000108 	.word	0x20000108

0800f124 <cleanup_stdio>:
 800f124:	6841      	ldr	r1, [r0, #4]
 800f126:	4b0c      	ldr	r3, [pc, #48]	; (800f158 <cleanup_stdio+0x34>)
 800f128:	4299      	cmp	r1, r3
 800f12a:	b510      	push	{r4, lr}
 800f12c:	4604      	mov	r4, r0
 800f12e:	d001      	beq.n	800f134 <cleanup_stdio+0x10>
 800f130:	f001 f9b2 	bl	8010498 <_fflush_r>
 800f134:	68a1      	ldr	r1, [r4, #8]
 800f136:	4b09      	ldr	r3, [pc, #36]	; (800f15c <cleanup_stdio+0x38>)
 800f138:	4299      	cmp	r1, r3
 800f13a:	d002      	beq.n	800f142 <cleanup_stdio+0x1e>
 800f13c:	4620      	mov	r0, r4
 800f13e:	f001 f9ab 	bl	8010498 <_fflush_r>
 800f142:	68e1      	ldr	r1, [r4, #12]
 800f144:	4b06      	ldr	r3, [pc, #24]	; (800f160 <cleanup_stdio+0x3c>)
 800f146:	4299      	cmp	r1, r3
 800f148:	d004      	beq.n	800f154 <cleanup_stdio+0x30>
 800f14a:	4620      	mov	r0, r4
 800f14c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f150:	f001 b9a2 	b.w	8010498 <_fflush_r>
 800f154:	bd10      	pop	{r4, pc}
 800f156:	bf00      	nop
 800f158:	20002274 	.word	0x20002274
 800f15c:	200022dc 	.word	0x200022dc
 800f160:	20002344 	.word	0x20002344

0800f164 <global_stdio_init.part.0>:
 800f164:	b510      	push	{r4, lr}
 800f166:	4b0b      	ldr	r3, [pc, #44]	; (800f194 <global_stdio_init.part.0+0x30>)
 800f168:	4c0b      	ldr	r4, [pc, #44]	; (800f198 <global_stdio_init.part.0+0x34>)
 800f16a:	4a0c      	ldr	r2, [pc, #48]	; (800f19c <global_stdio_init.part.0+0x38>)
 800f16c:	601a      	str	r2, [r3, #0]
 800f16e:	4620      	mov	r0, r4
 800f170:	2200      	movs	r2, #0
 800f172:	2104      	movs	r1, #4
 800f174:	f7ff ffa6 	bl	800f0c4 <std>
 800f178:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800f17c:	2201      	movs	r2, #1
 800f17e:	2109      	movs	r1, #9
 800f180:	f7ff ffa0 	bl	800f0c4 <std>
 800f184:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800f188:	2202      	movs	r2, #2
 800f18a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f18e:	2112      	movs	r1, #18
 800f190:	f7ff bf98 	b.w	800f0c4 <std>
 800f194:	200023ac 	.word	0x200023ac
 800f198:	20002274 	.word	0x20002274
 800f19c:	0800f10d 	.word	0x0800f10d

0800f1a0 <__sfp_lock_acquire>:
 800f1a0:	4801      	ldr	r0, [pc, #4]	; (800f1a8 <__sfp_lock_acquire+0x8>)
 800f1a2:	f000 b875 	b.w	800f290 <__retarget_lock_acquire_recursive>
 800f1a6:	bf00      	nop
 800f1a8:	200023b1 	.word	0x200023b1

0800f1ac <__sfp_lock_release>:
 800f1ac:	4801      	ldr	r0, [pc, #4]	; (800f1b4 <__sfp_lock_release+0x8>)
 800f1ae:	f000 b870 	b.w	800f292 <__retarget_lock_release_recursive>
 800f1b2:	bf00      	nop
 800f1b4:	200023b1 	.word	0x200023b1

0800f1b8 <__sinit>:
 800f1b8:	b510      	push	{r4, lr}
 800f1ba:	4604      	mov	r4, r0
 800f1bc:	f7ff fff0 	bl	800f1a0 <__sfp_lock_acquire>
 800f1c0:	6a23      	ldr	r3, [r4, #32]
 800f1c2:	b11b      	cbz	r3, 800f1cc <__sinit+0x14>
 800f1c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1c8:	f7ff bff0 	b.w	800f1ac <__sfp_lock_release>
 800f1cc:	4b04      	ldr	r3, [pc, #16]	; (800f1e0 <__sinit+0x28>)
 800f1ce:	6223      	str	r3, [r4, #32]
 800f1d0:	4b04      	ldr	r3, [pc, #16]	; (800f1e4 <__sinit+0x2c>)
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d1f5      	bne.n	800f1c4 <__sinit+0xc>
 800f1d8:	f7ff ffc4 	bl	800f164 <global_stdio_init.part.0>
 800f1dc:	e7f2      	b.n	800f1c4 <__sinit+0xc>
 800f1de:	bf00      	nop
 800f1e0:	0800f125 	.word	0x0800f125
 800f1e4:	200023ac 	.word	0x200023ac

0800f1e8 <_fwalk_sglue>:
 800f1e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f1ec:	4607      	mov	r7, r0
 800f1ee:	4688      	mov	r8, r1
 800f1f0:	4614      	mov	r4, r2
 800f1f2:	2600      	movs	r6, #0
 800f1f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f1f8:	f1b9 0901 	subs.w	r9, r9, #1
 800f1fc:	d505      	bpl.n	800f20a <_fwalk_sglue+0x22>
 800f1fe:	6824      	ldr	r4, [r4, #0]
 800f200:	2c00      	cmp	r4, #0
 800f202:	d1f7      	bne.n	800f1f4 <_fwalk_sglue+0xc>
 800f204:	4630      	mov	r0, r6
 800f206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f20a:	89ab      	ldrh	r3, [r5, #12]
 800f20c:	2b01      	cmp	r3, #1
 800f20e:	d907      	bls.n	800f220 <_fwalk_sglue+0x38>
 800f210:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f214:	3301      	adds	r3, #1
 800f216:	d003      	beq.n	800f220 <_fwalk_sglue+0x38>
 800f218:	4629      	mov	r1, r5
 800f21a:	4638      	mov	r0, r7
 800f21c:	47c0      	blx	r8
 800f21e:	4306      	orrs	r6, r0
 800f220:	3568      	adds	r5, #104	; 0x68
 800f222:	e7e9      	b.n	800f1f8 <_fwalk_sglue+0x10>

0800f224 <memset>:
 800f224:	4402      	add	r2, r0
 800f226:	4603      	mov	r3, r0
 800f228:	4293      	cmp	r3, r2
 800f22a:	d100      	bne.n	800f22e <memset+0xa>
 800f22c:	4770      	bx	lr
 800f22e:	f803 1b01 	strb.w	r1, [r3], #1
 800f232:	e7f9      	b.n	800f228 <memset+0x4>

0800f234 <_localeconv_r>:
 800f234:	4800      	ldr	r0, [pc, #0]	; (800f238 <_localeconv_r+0x4>)
 800f236:	4770      	bx	lr
 800f238:	20000248 	.word	0x20000248

0800f23c <__errno>:
 800f23c:	4b01      	ldr	r3, [pc, #4]	; (800f244 <__errno+0x8>)
 800f23e:	6818      	ldr	r0, [r3, #0]
 800f240:	4770      	bx	lr
 800f242:	bf00      	nop
 800f244:	20000154 	.word	0x20000154

0800f248 <__libc_init_array>:
 800f248:	b570      	push	{r4, r5, r6, lr}
 800f24a:	4d0d      	ldr	r5, [pc, #52]	; (800f280 <__libc_init_array+0x38>)
 800f24c:	4c0d      	ldr	r4, [pc, #52]	; (800f284 <__libc_init_array+0x3c>)
 800f24e:	1b64      	subs	r4, r4, r5
 800f250:	10a4      	asrs	r4, r4, #2
 800f252:	2600      	movs	r6, #0
 800f254:	42a6      	cmp	r6, r4
 800f256:	d109      	bne.n	800f26c <__libc_init_array+0x24>
 800f258:	4d0b      	ldr	r5, [pc, #44]	; (800f288 <__libc_init_array+0x40>)
 800f25a:	4c0c      	ldr	r4, [pc, #48]	; (800f28c <__libc_init_array+0x44>)
 800f25c:	f003 f8ca 	bl	80123f4 <_init>
 800f260:	1b64      	subs	r4, r4, r5
 800f262:	10a4      	asrs	r4, r4, #2
 800f264:	2600      	movs	r6, #0
 800f266:	42a6      	cmp	r6, r4
 800f268:	d105      	bne.n	800f276 <__libc_init_array+0x2e>
 800f26a:	bd70      	pop	{r4, r5, r6, pc}
 800f26c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f270:	4798      	blx	r3
 800f272:	3601      	adds	r6, #1
 800f274:	e7ee      	b.n	800f254 <__libc_init_array+0xc>
 800f276:	f855 3b04 	ldr.w	r3, [r5], #4
 800f27a:	4798      	blx	r3
 800f27c:	3601      	adds	r6, #1
 800f27e:	e7f2      	b.n	800f266 <__libc_init_array+0x1e>
 800f280:	08012880 	.word	0x08012880
 800f284:	08012880 	.word	0x08012880
 800f288:	08012880 	.word	0x08012880
 800f28c:	08012884 	.word	0x08012884

0800f290 <__retarget_lock_acquire_recursive>:
 800f290:	4770      	bx	lr

0800f292 <__retarget_lock_release_recursive>:
 800f292:	4770      	bx	lr

0800f294 <quorem>:
 800f294:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f298:	6903      	ldr	r3, [r0, #16]
 800f29a:	690c      	ldr	r4, [r1, #16]
 800f29c:	42a3      	cmp	r3, r4
 800f29e:	4607      	mov	r7, r0
 800f2a0:	db7e      	blt.n	800f3a0 <quorem+0x10c>
 800f2a2:	3c01      	subs	r4, #1
 800f2a4:	f101 0814 	add.w	r8, r1, #20
 800f2a8:	f100 0514 	add.w	r5, r0, #20
 800f2ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f2b0:	9301      	str	r3, [sp, #4]
 800f2b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800f2b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f2ba:	3301      	adds	r3, #1
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800f2c2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800f2c6:	fbb2 f6f3 	udiv	r6, r2, r3
 800f2ca:	d331      	bcc.n	800f330 <quorem+0x9c>
 800f2cc:	f04f 0e00 	mov.w	lr, #0
 800f2d0:	4640      	mov	r0, r8
 800f2d2:	46ac      	mov	ip, r5
 800f2d4:	46f2      	mov	sl, lr
 800f2d6:	f850 2b04 	ldr.w	r2, [r0], #4
 800f2da:	b293      	uxth	r3, r2
 800f2dc:	fb06 e303 	mla	r3, r6, r3, lr
 800f2e0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f2e4:	0c1a      	lsrs	r2, r3, #16
 800f2e6:	b29b      	uxth	r3, r3
 800f2e8:	ebaa 0303 	sub.w	r3, sl, r3
 800f2ec:	f8dc a000 	ldr.w	sl, [ip]
 800f2f0:	fa13 f38a 	uxtah	r3, r3, sl
 800f2f4:	fb06 220e 	mla	r2, r6, lr, r2
 800f2f8:	9300      	str	r3, [sp, #0]
 800f2fa:	9b00      	ldr	r3, [sp, #0]
 800f2fc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800f300:	b292      	uxth	r2, r2
 800f302:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800f306:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f30a:	f8bd 3000 	ldrh.w	r3, [sp]
 800f30e:	4581      	cmp	r9, r0
 800f310:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f314:	f84c 3b04 	str.w	r3, [ip], #4
 800f318:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800f31c:	d2db      	bcs.n	800f2d6 <quorem+0x42>
 800f31e:	f855 300b 	ldr.w	r3, [r5, fp]
 800f322:	b92b      	cbnz	r3, 800f330 <quorem+0x9c>
 800f324:	9b01      	ldr	r3, [sp, #4]
 800f326:	3b04      	subs	r3, #4
 800f328:	429d      	cmp	r5, r3
 800f32a:	461a      	mov	r2, r3
 800f32c:	d32c      	bcc.n	800f388 <quorem+0xf4>
 800f32e:	613c      	str	r4, [r7, #16]
 800f330:	4638      	mov	r0, r7
 800f332:	f001 fb61 	bl	80109f8 <__mcmp>
 800f336:	2800      	cmp	r0, #0
 800f338:	db22      	blt.n	800f380 <quorem+0xec>
 800f33a:	3601      	adds	r6, #1
 800f33c:	4629      	mov	r1, r5
 800f33e:	2000      	movs	r0, #0
 800f340:	f858 2b04 	ldr.w	r2, [r8], #4
 800f344:	f8d1 c000 	ldr.w	ip, [r1]
 800f348:	b293      	uxth	r3, r2
 800f34a:	1ac3      	subs	r3, r0, r3
 800f34c:	0c12      	lsrs	r2, r2, #16
 800f34e:	fa13 f38c 	uxtah	r3, r3, ip
 800f352:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800f356:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f35a:	b29b      	uxth	r3, r3
 800f35c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f360:	45c1      	cmp	r9, r8
 800f362:	f841 3b04 	str.w	r3, [r1], #4
 800f366:	ea4f 4022 	mov.w	r0, r2, asr #16
 800f36a:	d2e9      	bcs.n	800f340 <quorem+0xac>
 800f36c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800f370:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800f374:	b922      	cbnz	r2, 800f380 <quorem+0xec>
 800f376:	3b04      	subs	r3, #4
 800f378:	429d      	cmp	r5, r3
 800f37a:	461a      	mov	r2, r3
 800f37c:	d30a      	bcc.n	800f394 <quorem+0x100>
 800f37e:	613c      	str	r4, [r7, #16]
 800f380:	4630      	mov	r0, r6
 800f382:	b003      	add	sp, #12
 800f384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f388:	6812      	ldr	r2, [r2, #0]
 800f38a:	3b04      	subs	r3, #4
 800f38c:	2a00      	cmp	r2, #0
 800f38e:	d1ce      	bne.n	800f32e <quorem+0x9a>
 800f390:	3c01      	subs	r4, #1
 800f392:	e7c9      	b.n	800f328 <quorem+0x94>
 800f394:	6812      	ldr	r2, [r2, #0]
 800f396:	3b04      	subs	r3, #4
 800f398:	2a00      	cmp	r2, #0
 800f39a:	d1f0      	bne.n	800f37e <quorem+0xea>
 800f39c:	3c01      	subs	r4, #1
 800f39e:	e7eb      	b.n	800f378 <quorem+0xe4>
 800f3a0:	2000      	movs	r0, #0
 800f3a2:	e7ee      	b.n	800f382 <quorem+0xee>
 800f3a4:	0000      	movs	r0, r0
	...

0800f3a8 <_dtoa_r>:
 800f3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3ac:	ed2d 8b04 	vpush	{d8-d9}
 800f3b0:	69c5      	ldr	r5, [r0, #28]
 800f3b2:	b093      	sub	sp, #76	; 0x4c
 800f3b4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800f3b8:	ec57 6b10 	vmov	r6, r7, d0
 800f3bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f3c0:	9107      	str	r1, [sp, #28]
 800f3c2:	4604      	mov	r4, r0
 800f3c4:	920a      	str	r2, [sp, #40]	; 0x28
 800f3c6:	930d      	str	r3, [sp, #52]	; 0x34
 800f3c8:	b975      	cbnz	r5, 800f3e8 <_dtoa_r+0x40>
 800f3ca:	2010      	movs	r0, #16
 800f3cc:	f000 ff36 	bl	801023c <malloc>
 800f3d0:	4602      	mov	r2, r0
 800f3d2:	61e0      	str	r0, [r4, #28]
 800f3d4:	b920      	cbnz	r0, 800f3e0 <_dtoa_r+0x38>
 800f3d6:	4bae      	ldr	r3, [pc, #696]	; (800f690 <_dtoa_r+0x2e8>)
 800f3d8:	21ef      	movs	r1, #239	; 0xef
 800f3da:	48ae      	ldr	r0, [pc, #696]	; (800f694 <_dtoa_r+0x2ec>)
 800f3dc:	f001 fcfc 	bl	8010dd8 <__assert_func>
 800f3e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f3e4:	6005      	str	r5, [r0, #0]
 800f3e6:	60c5      	str	r5, [r0, #12]
 800f3e8:	69e3      	ldr	r3, [r4, #28]
 800f3ea:	6819      	ldr	r1, [r3, #0]
 800f3ec:	b151      	cbz	r1, 800f404 <_dtoa_r+0x5c>
 800f3ee:	685a      	ldr	r2, [r3, #4]
 800f3f0:	604a      	str	r2, [r1, #4]
 800f3f2:	2301      	movs	r3, #1
 800f3f4:	4093      	lsls	r3, r2
 800f3f6:	608b      	str	r3, [r1, #8]
 800f3f8:	4620      	mov	r0, r4
 800f3fa:	f001 f8c1 	bl	8010580 <_Bfree>
 800f3fe:	69e3      	ldr	r3, [r4, #28]
 800f400:	2200      	movs	r2, #0
 800f402:	601a      	str	r2, [r3, #0]
 800f404:	1e3b      	subs	r3, r7, #0
 800f406:	bfbb      	ittet	lt
 800f408:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f40c:	9303      	strlt	r3, [sp, #12]
 800f40e:	2300      	movge	r3, #0
 800f410:	2201      	movlt	r2, #1
 800f412:	bfac      	ite	ge
 800f414:	f8c8 3000 	strge.w	r3, [r8]
 800f418:	f8c8 2000 	strlt.w	r2, [r8]
 800f41c:	4b9e      	ldr	r3, [pc, #632]	; (800f698 <_dtoa_r+0x2f0>)
 800f41e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800f422:	ea33 0308 	bics.w	r3, r3, r8
 800f426:	d11b      	bne.n	800f460 <_dtoa_r+0xb8>
 800f428:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f42a:	f242 730f 	movw	r3, #9999	; 0x270f
 800f42e:	6013      	str	r3, [r2, #0]
 800f430:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800f434:	4333      	orrs	r3, r6
 800f436:	f000 8593 	beq.w	800ff60 <_dtoa_r+0xbb8>
 800f43a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f43c:	b963      	cbnz	r3, 800f458 <_dtoa_r+0xb0>
 800f43e:	4b97      	ldr	r3, [pc, #604]	; (800f69c <_dtoa_r+0x2f4>)
 800f440:	e027      	b.n	800f492 <_dtoa_r+0xea>
 800f442:	4b97      	ldr	r3, [pc, #604]	; (800f6a0 <_dtoa_r+0x2f8>)
 800f444:	9300      	str	r3, [sp, #0]
 800f446:	3308      	adds	r3, #8
 800f448:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f44a:	6013      	str	r3, [r2, #0]
 800f44c:	9800      	ldr	r0, [sp, #0]
 800f44e:	b013      	add	sp, #76	; 0x4c
 800f450:	ecbd 8b04 	vpop	{d8-d9}
 800f454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f458:	4b90      	ldr	r3, [pc, #576]	; (800f69c <_dtoa_r+0x2f4>)
 800f45a:	9300      	str	r3, [sp, #0]
 800f45c:	3303      	adds	r3, #3
 800f45e:	e7f3      	b.n	800f448 <_dtoa_r+0xa0>
 800f460:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f464:	2200      	movs	r2, #0
 800f466:	ec51 0b17 	vmov	r0, r1, d7
 800f46a:	eeb0 8a47 	vmov.f32	s16, s14
 800f46e:	eef0 8a67 	vmov.f32	s17, s15
 800f472:	2300      	movs	r3, #0
 800f474:	f7f1 fb28 	bl	8000ac8 <__aeabi_dcmpeq>
 800f478:	4681      	mov	r9, r0
 800f47a:	b160      	cbz	r0, 800f496 <_dtoa_r+0xee>
 800f47c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f47e:	2301      	movs	r3, #1
 800f480:	6013      	str	r3, [r2, #0]
 800f482:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f484:	2b00      	cmp	r3, #0
 800f486:	f000 8568 	beq.w	800ff5a <_dtoa_r+0xbb2>
 800f48a:	4b86      	ldr	r3, [pc, #536]	; (800f6a4 <_dtoa_r+0x2fc>)
 800f48c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f48e:	6013      	str	r3, [r2, #0]
 800f490:	3b01      	subs	r3, #1
 800f492:	9300      	str	r3, [sp, #0]
 800f494:	e7da      	b.n	800f44c <_dtoa_r+0xa4>
 800f496:	aa10      	add	r2, sp, #64	; 0x40
 800f498:	a911      	add	r1, sp, #68	; 0x44
 800f49a:	4620      	mov	r0, r4
 800f49c:	eeb0 0a48 	vmov.f32	s0, s16
 800f4a0:	eef0 0a68 	vmov.f32	s1, s17
 800f4a4:	f001 fb4e 	bl	8010b44 <__d2b>
 800f4a8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f4ac:	4682      	mov	sl, r0
 800f4ae:	2d00      	cmp	r5, #0
 800f4b0:	d07f      	beq.n	800f5b2 <_dtoa_r+0x20a>
 800f4b2:	ee18 3a90 	vmov	r3, s17
 800f4b6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f4ba:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800f4be:	ec51 0b18 	vmov	r0, r1, d8
 800f4c2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f4c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f4ca:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800f4ce:	4619      	mov	r1, r3
 800f4d0:	2200      	movs	r2, #0
 800f4d2:	4b75      	ldr	r3, [pc, #468]	; (800f6a8 <_dtoa_r+0x300>)
 800f4d4:	f7f0 fed8 	bl	8000288 <__aeabi_dsub>
 800f4d8:	a367      	add	r3, pc, #412	; (adr r3, 800f678 <_dtoa_r+0x2d0>)
 800f4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4de:	f7f1 f88b 	bl	80005f8 <__aeabi_dmul>
 800f4e2:	a367      	add	r3, pc, #412	; (adr r3, 800f680 <_dtoa_r+0x2d8>)
 800f4e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e8:	f7f0 fed0 	bl	800028c <__adddf3>
 800f4ec:	4606      	mov	r6, r0
 800f4ee:	4628      	mov	r0, r5
 800f4f0:	460f      	mov	r7, r1
 800f4f2:	f7f1 f817 	bl	8000524 <__aeabi_i2d>
 800f4f6:	a364      	add	r3, pc, #400	; (adr r3, 800f688 <_dtoa_r+0x2e0>)
 800f4f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4fc:	f7f1 f87c 	bl	80005f8 <__aeabi_dmul>
 800f500:	4602      	mov	r2, r0
 800f502:	460b      	mov	r3, r1
 800f504:	4630      	mov	r0, r6
 800f506:	4639      	mov	r1, r7
 800f508:	f7f0 fec0 	bl	800028c <__adddf3>
 800f50c:	4606      	mov	r6, r0
 800f50e:	460f      	mov	r7, r1
 800f510:	f7f1 fb22 	bl	8000b58 <__aeabi_d2iz>
 800f514:	2200      	movs	r2, #0
 800f516:	4683      	mov	fp, r0
 800f518:	2300      	movs	r3, #0
 800f51a:	4630      	mov	r0, r6
 800f51c:	4639      	mov	r1, r7
 800f51e:	f7f1 fadd 	bl	8000adc <__aeabi_dcmplt>
 800f522:	b148      	cbz	r0, 800f538 <_dtoa_r+0x190>
 800f524:	4658      	mov	r0, fp
 800f526:	f7f0 fffd 	bl	8000524 <__aeabi_i2d>
 800f52a:	4632      	mov	r2, r6
 800f52c:	463b      	mov	r3, r7
 800f52e:	f7f1 facb 	bl	8000ac8 <__aeabi_dcmpeq>
 800f532:	b908      	cbnz	r0, 800f538 <_dtoa_r+0x190>
 800f534:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f538:	f1bb 0f16 	cmp.w	fp, #22
 800f53c:	d857      	bhi.n	800f5ee <_dtoa_r+0x246>
 800f53e:	4b5b      	ldr	r3, [pc, #364]	; (800f6ac <_dtoa_r+0x304>)
 800f540:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f544:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f548:	ec51 0b18 	vmov	r0, r1, d8
 800f54c:	f7f1 fac6 	bl	8000adc <__aeabi_dcmplt>
 800f550:	2800      	cmp	r0, #0
 800f552:	d04e      	beq.n	800f5f2 <_dtoa_r+0x24a>
 800f554:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800f558:	2300      	movs	r3, #0
 800f55a:	930c      	str	r3, [sp, #48]	; 0x30
 800f55c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f55e:	1b5b      	subs	r3, r3, r5
 800f560:	1e5a      	subs	r2, r3, #1
 800f562:	bf45      	ittet	mi
 800f564:	f1c3 0301 	rsbmi	r3, r3, #1
 800f568:	9305      	strmi	r3, [sp, #20]
 800f56a:	2300      	movpl	r3, #0
 800f56c:	2300      	movmi	r3, #0
 800f56e:	9206      	str	r2, [sp, #24]
 800f570:	bf54      	ite	pl
 800f572:	9305      	strpl	r3, [sp, #20]
 800f574:	9306      	strmi	r3, [sp, #24]
 800f576:	f1bb 0f00 	cmp.w	fp, #0
 800f57a:	db3c      	blt.n	800f5f6 <_dtoa_r+0x24e>
 800f57c:	9b06      	ldr	r3, [sp, #24]
 800f57e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800f582:	445b      	add	r3, fp
 800f584:	9306      	str	r3, [sp, #24]
 800f586:	2300      	movs	r3, #0
 800f588:	9308      	str	r3, [sp, #32]
 800f58a:	9b07      	ldr	r3, [sp, #28]
 800f58c:	2b09      	cmp	r3, #9
 800f58e:	d868      	bhi.n	800f662 <_dtoa_r+0x2ba>
 800f590:	2b05      	cmp	r3, #5
 800f592:	bfc4      	itt	gt
 800f594:	3b04      	subgt	r3, #4
 800f596:	9307      	strgt	r3, [sp, #28]
 800f598:	9b07      	ldr	r3, [sp, #28]
 800f59a:	f1a3 0302 	sub.w	r3, r3, #2
 800f59e:	bfcc      	ite	gt
 800f5a0:	2500      	movgt	r5, #0
 800f5a2:	2501      	movle	r5, #1
 800f5a4:	2b03      	cmp	r3, #3
 800f5a6:	f200 8085 	bhi.w	800f6b4 <_dtoa_r+0x30c>
 800f5aa:	e8df f003 	tbb	[pc, r3]
 800f5ae:	3b2e      	.short	0x3b2e
 800f5b0:	5839      	.short	0x5839
 800f5b2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800f5b6:	441d      	add	r5, r3
 800f5b8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800f5bc:	2b20      	cmp	r3, #32
 800f5be:	bfc1      	itttt	gt
 800f5c0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800f5c4:	fa08 f803 	lslgt.w	r8, r8, r3
 800f5c8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800f5cc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800f5d0:	bfd6      	itet	le
 800f5d2:	f1c3 0320 	rsble	r3, r3, #32
 800f5d6:	ea48 0003 	orrgt.w	r0, r8, r3
 800f5da:	fa06 f003 	lslle.w	r0, r6, r3
 800f5de:	f7f0 ff91 	bl	8000504 <__aeabi_ui2d>
 800f5e2:	2201      	movs	r2, #1
 800f5e4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800f5e8:	3d01      	subs	r5, #1
 800f5ea:	920e      	str	r2, [sp, #56]	; 0x38
 800f5ec:	e76f      	b.n	800f4ce <_dtoa_r+0x126>
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	e7b3      	b.n	800f55a <_dtoa_r+0x1b2>
 800f5f2:	900c      	str	r0, [sp, #48]	; 0x30
 800f5f4:	e7b2      	b.n	800f55c <_dtoa_r+0x1b4>
 800f5f6:	9b05      	ldr	r3, [sp, #20]
 800f5f8:	eba3 030b 	sub.w	r3, r3, fp
 800f5fc:	9305      	str	r3, [sp, #20]
 800f5fe:	f1cb 0300 	rsb	r3, fp, #0
 800f602:	9308      	str	r3, [sp, #32]
 800f604:	2300      	movs	r3, #0
 800f606:	930b      	str	r3, [sp, #44]	; 0x2c
 800f608:	e7bf      	b.n	800f58a <_dtoa_r+0x1e2>
 800f60a:	2300      	movs	r3, #0
 800f60c:	9309      	str	r3, [sp, #36]	; 0x24
 800f60e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f610:	2b00      	cmp	r3, #0
 800f612:	dc52      	bgt.n	800f6ba <_dtoa_r+0x312>
 800f614:	2301      	movs	r3, #1
 800f616:	9301      	str	r3, [sp, #4]
 800f618:	9304      	str	r3, [sp, #16]
 800f61a:	461a      	mov	r2, r3
 800f61c:	920a      	str	r2, [sp, #40]	; 0x28
 800f61e:	e00b      	b.n	800f638 <_dtoa_r+0x290>
 800f620:	2301      	movs	r3, #1
 800f622:	e7f3      	b.n	800f60c <_dtoa_r+0x264>
 800f624:	2300      	movs	r3, #0
 800f626:	9309      	str	r3, [sp, #36]	; 0x24
 800f628:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f62a:	445b      	add	r3, fp
 800f62c:	9301      	str	r3, [sp, #4]
 800f62e:	3301      	adds	r3, #1
 800f630:	2b01      	cmp	r3, #1
 800f632:	9304      	str	r3, [sp, #16]
 800f634:	bfb8      	it	lt
 800f636:	2301      	movlt	r3, #1
 800f638:	69e0      	ldr	r0, [r4, #28]
 800f63a:	2100      	movs	r1, #0
 800f63c:	2204      	movs	r2, #4
 800f63e:	f102 0614 	add.w	r6, r2, #20
 800f642:	429e      	cmp	r6, r3
 800f644:	d93d      	bls.n	800f6c2 <_dtoa_r+0x31a>
 800f646:	6041      	str	r1, [r0, #4]
 800f648:	4620      	mov	r0, r4
 800f64a:	f000 ff59 	bl	8010500 <_Balloc>
 800f64e:	9000      	str	r0, [sp, #0]
 800f650:	2800      	cmp	r0, #0
 800f652:	d139      	bne.n	800f6c8 <_dtoa_r+0x320>
 800f654:	4b16      	ldr	r3, [pc, #88]	; (800f6b0 <_dtoa_r+0x308>)
 800f656:	4602      	mov	r2, r0
 800f658:	f240 11af 	movw	r1, #431	; 0x1af
 800f65c:	e6bd      	b.n	800f3da <_dtoa_r+0x32>
 800f65e:	2301      	movs	r3, #1
 800f660:	e7e1      	b.n	800f626 <_dtoa_r+0x27e>
 800f662:	2501      	movs	r5, #1
 800f664:	2300      	movs	r3, #0
 800f666:	9307      	str	r3, [sp, #28]
 800f668:	9509      	str	r5, [sp, #36]	; 0x24
 800f66a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f66e:	9301      	str	r3, [sp, #4]
 800f670:	9304      	str	r3, [sp, #16]
 800f672:	2200      	movs	r2, #0
 800f674:	2312      	movs	r3, #18
 800f676:	e7d1      	b.n	800f61c <_dtoa_r+0x274>
 800f678:	636f4361 	.word	0x636f4361
 800f67c:	3fd287a7 	.word	0x3fd287a7
 800f680:	8b60c8b3 	.word	0x8b60c8b3
 800f684:	3fc68a28 	.word	0x3fc68a28
 800f688:	509f79fb 	.word	0x509f79fb
 800f68c:	3fd34413 	.word	0x3fd34413
 800f690:	08012511 	.word	0x08012511
 800f694:	08012528 	.word	0x08012528
 800f698:	7ff00000 	.word	0x7ff00000
 800f69c:	0801250d 	.word	0x0801250d
 800f6a0:	08012504 	.word	0x08012504
 800f6a4:	080124e1 	.word	0x080124e1
 800f6a8:	3ff80000 	.word	0x3ff80000
 800f6ac:	08012628 	.word	0x08012628
 800f6b0:	08012580 	.word	0x08012580
 800f6b4:	2301      	movs	r3, #1
 800f6b6:	9309      	str	r3, [sp, #36]	; 0x24
 800f6b8:	e7d7      	b.n	800f66a <_dtoa_r+0x2c2>
 800f6ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6bc:	9301      	str	r3, [sp, #4]
 800f6be:	9304      	str	r3, [sp, #16]
 800f6c0:	e7ba      	b.n	800f638 <_dtoa_r+0x290>
 800f6c2:	3101      	adds	r1, #1
 800f6c4:	0052      	lsls	r2, r2, #1
 800f6c6:	e7ba      	b.n	800f63e <_dtoa_r+0x296>
 800f6c8:	69e3      	ldr	r3, [r4, #28]
 800f6ca:	9a00      	ldr	r2, [sp, #0]
 800f6cc:	601a      	str	r2, [r3, #0]
 800f6ce:	9b04      	ldr	r3, [sp, #16]
 800f6d0:	2b0e      	cmp	r3, #14
 800f6d2:	f200 80a8 	bhi.w	800f826 <_dtoa_r+0x47e>
 800f6d6:	2d00      	cmp	r5, #0
 800f6d8:	f000 80a5 	beq.w	800f826 <_dtoa_r+0x47e>
 800f6dc:	f1bb 0f00 	cmp.w	fp, #0
 800f6e0:	dd38      	ble.n	800f754 <_dtoa_r+0x3ac>
 800f6e2:	4bc0      	ldr	r3, [pc, #768]	; (800f9e4 <_dtoa_r+0x63c>)
 800f6e4:	f00b 020f 	and.w	r2, fp, #15
 800f6e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f6ec:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800f6f0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800f6f4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800f6f8:	d019      	beq.n	800f72e <_dtoa_r+0x386>
 800f6fa:	4bbb      	ldr	r3, [pc, #748]	; (800f9e8 <_dtoa_r+0x640>)
 800f6fc:	ec51 0b18 	vmov	r0, r1, d8
 800f700:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f704:	f7f1 f8a2 	bl	800084c <__aeabi_ddiv>
 800f708:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f70c:	f008 080f 	and.w	r8, r8, #15
 800f710:	2503      	movs	r5, #3
 800f712:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800f9e8 <_dtoa_r+0x640>
 800f716:	f1b8 0f00 	cmp.w	r8, #0
 800f71a:	d10a      	bne.n	800f732 <_dtoa_r+0x38a>
 800f71c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f720:	4632      	mov	r2, r6
 800f722:	463b      	mov	r3, r7
 800f724:	f7f1 f892 	bl	800084c <__aeabi_ddiv>
 800f728:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f72c:	e02b      	b.n	800f786 <_dtoa_r+0x3de>
 800f72e:	2502      	movs	r5, #2
 800f730:	e7ef      	b.n	800f712 <_dtoa_r+0x36a>
 800f732:	f018 0f01 	tst.w	r8, #1
 800f736:	d008      	beq.n	800f74a <_dtoa_r+0x3a2>
 800f738:	4630      	mov	r0, r6
 800f73a:	4639      	mov	r1, r7
 800f73c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f740:	f7f0 ff5a 	bl	80005f8 <__aeabi_dmul>
 800f744:	3501      	adds	r5, #1
 800f746:	4606      	mov	r6, r0
 800f748:	460f      	mov	r7, r1
 800f74a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f74e:	f109 0908 	add.w	r9, r9, #8
 800f752:	e7e0      	b.n	800f716 <_dtoa_r+0x36e>
 800f754:	f000 809f 	beq.w	800f896 <_dtoa_r+0x4ee>
 800f758:	f1cb 0600 	rsb	r6, fp, #0
 800f75c:	4ba1      	ldr	r3, [pc, #644]	; (800f9e4 <_dtoa_r+0x63c>)
 800f75e:	4fa2      	ldr	r7, [pc, #648]	; (800f9e8 <_dtoa_r+0x640>)
 800f760:	f006 020f 	and.w	r2, r6, #15
 800f764:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f76c:	ec51 0b18 	vmov	r0, r1, d8
 800f770:	f7f0 ff42 	bl	80005f8 <__aeabi_dmul>
 800f774:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f778:	1136      	asrs	r6, r6, #4
 800f77a:	2300      	movs	r3, #0
 800f77c:	2502      	movs	r5, #2
 800f77e:	2e00      	cmp	r6, #0
 800f780:	d17e      	bne.n	800f880 <_dtoa_r+0x4d8>
 800f782:	2b00      	cmp	r3, #0
 800f784:	d1d0      	bne.n	800f728 <_dtoa_r+0x380>
 800f786:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f788:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f78c:	2b00      	cmp	r3, #0
 800f78e:	f000 8084 	beq.w	800f89a <_dtoa_r+0x4f2>
 800f792:	4b96      	ldr	r3, [pc, #600]	; (800f9ec <_dtoa_r+0x644>)
 800f794:	2200      	movs	r2, #0
 800f796:	4640      	mov	r0, r8
 800f798:	4649      	mov	r1, r9
 800f79a:	f7f1 f99f 	bl	8000adc <__aeabi_dcmplt>
 800f79e:	2800      	cmp	r0, #0
 800f7a0:	d07b      	beq.n	800f89a <_dtoa_r+0x4f2>
 800f7a2:	9b04      	ldr	r3, [sp, #16]
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d078      	beq.n	800f89a <_dtoa_r+0x4f2>
 800f7a8:	9b01      	ldr	r3, [sp, #4]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	dd39      	ble.n	800f822 <_dtoa_r+0x47a>
 800f7ae:	4b90      	ldr	r3, [pc, #576]	; (800f9f0 <_dtoa_r+0x648>)
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	4640      	mov	r0, r8
 800f7b4:	4649      	mov	r1, r9
 800f7b6:	f7f0 ff1f 	bl	80005f8 <__aeabi_dmul>
 800f7ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7be:	9e01      	ldr	r6, [sp, #4]
 800f7c0:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 800f7c4:	3501      	adds	r5, #1
 800f7c6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800f7ca:	4628      	mov	r0, r5
 800f7cc:	f7f0 feaa 	bl	8000524 <__aeabi_i2d>
 800f7d0:	4642      	mov	r2, r8
 800f7d2:	464b      	mov	r3, r9
 800f7d4:	f7f0 ff10 	bl	80005f8 <__aeabi_dmul>
 800f7d8:	4b86      	ldr	r3, [pc, #536]	; (800f9f4 <_dtoa_r+0x64c>)
 800f7da:	2200      	movs	r2, #0
 800f7dc:	f7f0 fd56 	bl	800028c <__adddf3>
 800f7e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800f7e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f7e8:	9303      	str	r3, [sp, #12]
 800f7ea:	2e00      	cmp	r6, #0
 800f7ec:	d158      	bne.n	800f8a0 <_dtoa_r+0x4f8>
 800f7ee:	4b82      	ldr	r3, [pc, #520]	; (800f9f8 <_dtoa_r+0x650>)
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	4640      	mov	r0, r8
 800f7f4:	4649      	mov	r1, r9
 800f7f6:	f7f0 fd47 	bl	8000288 <__aeabi_dsub>
 800f7fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f7fe:	4680      	mov	r8, r0
 800f800:	4689      	mov	r9, r1
 800f802:	f7f1 f989 	bl	8000b18 <__aeabi_dcmpgt>
 800f806:	2800      	cmp	r0, #0
 800f808:	f040 8296 	bne.w	800fd38 <_dtoa_r+0x990>
 800f80c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800f810:	4640      	mov	r0, r8
 800f812:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f816:	4649      	mov	r1, r9
 800f818:	f7f1 f960 	bl	8000adc <__aeabi_dcmplt>
 800f81c:	2800      	cmp	r0, #0
 800f81e:	f040 8289 	bne.w	800fd34 <_dtoa_r+0x98c>
 800f822:	ed8d 8b02 	vstr	d8, [sp, #8]
 800f826:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800f828:	2b00      	cmp	r3, #0
 800f82a:	f2c0 814e 	blt.w	800faca <_dtoa_r+0x722>
 800f82e:	f1bb 0f0e 	cmp.w	fp, #14
 800f832:	f300 814a 	bgt.w	800faca <_dtoa_r+0x722>
 800f836:	4b6b      	ldr	r3, [pc, #428]	; (800f9e4 <_dtoa_r+0x63c>)
 800f838:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800f83c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f842:	2b00      	cmp	r3, #0
 800f844:	f280 80dc 	bge.w	800fa00 <_dtoa_r+0x658>
 800f848:	9b04      	ldr	r3, [sp, #16]
 800f84a:	2b00      	cmp	r3, #0
 800f84c:	f300 80d8 	bgt.w	800fa00 <_dtoa_r+0x658>
 800f850:	f040 826f 	bne.w	800fd32 <_dtoa_r+0x98a>
 800f854:	4b68      	ldr	r3, [pc, #416]	; (800f9f8 <_dtoa_r+0x650>)
 800f856:	2200      	movs	r2, #0
 800f858:	4640      	mov	r0, r8
 800f85a:	4649      	mov	r1, r9
 800f85c:	f7f0 fecc 	bl	80005f8 <__aeabi_dmul>
 800f860:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f864:	f7f1 f94e 	bl	8000b04 <__aeabi_dcmpge>
 800f868:	9e04      	ldr	r6, [sp, #16]
 800f86a:	4637      	mov	r7, r6
 800f86c:	2800      	cmp	r0, #0
 800f86e:	f040 8245 	bne.w	800fcfc <_dtoa_r+0x954>
 800f872:	9d00      	ldr	r5, [sp, #0]
 800f874:	2331      	movs	r3, #49	; 0x31
 800f876:	f805 3b01 	strb.w	r3, [r5], #1
 800f87a:	f10b 0b01 	add.w	fp, fp, #1
 800f87e:	e241      	b.n	800fd04 <_dtoa_r+0x95c>
 800f880:	07f2      	lsls	r2, r6, #31
 800f882:	d505      	bpl.n	800f890 <_dtoa_r+0x4e8>
 800f884:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f888:	f7f0 feb6 	bl	80005f8 <__aeabi_dmul>
 800f88c:	3501      	adds	r5, #1
 800f88e:	2301      	movs	r3, #1
 800f890:	1076      	asrs	r6, r6, #1
 800f892:	3708      	adds	r7, #8
 800f894:	e773      	b.n	800f77e <_dtoa_r+0x3d6>
 800f896:	2502      	movs	r5, #2
 800f898:	e775      	b.n	800f786 <_dtoa_r+0x3de>
 800f89a:	9e04      	ldr	r6, [sp, #16]
 800f89c:	465f      	mov	r7, fp
 800f89e:	e792      	b.n	800f7c6 <_dtoa_r+0x41e>
 800f8a0:	9900      	ldr	r1, [sp, #0]
 800f8a2:	4b50      	ldr	r3, [pc, #320]	; (800f9e4 <_dtoa_r+0x63c>)
 800f8a4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f8a8:	4431      	add	r1, r6
 800f8aa:	9102      	str	r1, [sp, #8]
 800f8ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800f8ae:	eeb0 9a47 	vmov.f32	s18, s14
 800f8b2:	eef0 9a67 	vmov.f32	s19, s15
 800f8b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800f8ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800f8be:	2900      	cmp	r1, #0
 800f8c0:	d044      	beq.n	800f94c <_dtoa_r+0x5a4>
 800f8c2:	494e      	ldr	r1, [pc, #312]	; (800f9fc <_dtoa_r+0x654>)
 800f8c4:	2000      	movs	r0, #0
 800f8c6:	f7f0 ffc1 	bl	800084c <__aeabi_ddiv>
 800f8ca:	ec53 2b19 	vmov	r2, r3, d9
 800f8ce:	f7f0 fcdb 	bl	8000288 <__aeabi_dsub>
 800f8d2:	9d00      	ldr	r5, [sp, #0]
 800f8d4:	ec41 0b19 	vmov	d9, r0, r1
 800f8d8:	4649      	mov	r1, r9
 800f8da:	4640      	mov	r0, r8
 800f8dc:	f7f1 f93c 	bl	8000b58 <__aeabi_d2iz>
 800f8e0:	4606      	mov	r6, r0
 800f8e2:	f7f0 fe1f 	bl	8000524 <__aeabi_i2d>
 800f8e6:	4602      	mov	r2, r0
 800f8e8:	460b      	mov	r3, r1
 800f8ea:	4640      	mov	r0, r8
 800f8ec:	4649      	mov	r1, r9
 800f8ee:	f7f0 fccb 	bl	8000288 <__aeabi_dsub>
 800f8f2:	3630      	adds	r6, #48	; 0x30
 800f8f4:	f805 6b01 	strb.w	r6, [r5], #1
 800f8f8:	ec53 2b19 	vmov	r2, r3, d9
 800f8fc:	4680      	mov	r8, r0
 800f8fe:	4689      	mov	r9, r1
 800f900:	f7f1 f8ec 	bl	8000adc <__aeabi_dcmplt>
 800f904:	2800      	cmp	r0, #0
 800f906:	d164      	bne.n	800f9d2 <_dtoa_r+0x62a>
 800f908:	4642      	mov	r2, r8
 800f90a:	464b      	mov	r3, r9
 800f90c:	4937      	ldr	r1, [pc, #220]	; (800f9ec <_dtoa_r+0x644>)
 800f90e:	2000      	movs	r0, #0
 800f910:	f7f0 fcba 	bl	8000288 <__aeabi_dsub>
 800f914:	ec53 2b19 	vmov	r2, r3, d9
 800f918:	f7f1 f8e0 	bl	8000adc <__aeabi_dcmplt>
 800f91c:	2800      	cmp	r0, #0
 800f91e:	f040 80b6 	bne.w	800fa8e <_dtoa_r+0x6e6>
 800f922:	9b02      	ldr	r3, [sp, #8]
 800f924:	429d      	cmp	r5, r3
 800f926:	f43f af7c 	beq.w	800f822 <_dtoa_r+0x47a>
 800f92a:	4b31      	ldr	r3, [pc, #196]	; (800f9f0 <_dtoa_r+0x648>)
 800f92c:	ec51 0b19 	vmov	r0, r1, d9
 800f930:	2200      	movs	r2, #0
 800f932:	f7f0 fe61 	bl	80005f8 <__aeabi_dmul>
 800f936:	4b2e      	ldr	r3, [pc, #184]	; (800f9f0 <_dtoa_r+0x648>)
 800f938:	ec41 0b19 	vmov	d9, r0, r1
 800f93c:	2200      	movs	r2, #0
 800f93e:	4640      	mov	r0, r8
 800f940:	4649      	mov	r1, r9
 800f942:	f7f0 fe59 	bl	80005f8 <__aeabi_dmul>
 800f946:	4680      	mov	r8, r0
 800f948:	4689      	mov	r9, r1
 800f94a:	e7c5      	b.n	800f8d8 <_dtoa_r+0x530>
 800f94c:	ec51 0b17 	vmov	r0, r1, d7
 800f950:	f7f0 fe52 	bl	80005f8 <__aeabi_dmul>
 800f954:	9b02      	ldr	r3, [sp, #8]
 800f956:	9d00      	ldr	r5, [sp, #0]
 800f958:	930f      	str	r3, [sp, #60]	; 0x3c
 800f95a:	ec41 0b19 	vmov	d9, r0, r1
 800f95e:	4649      	mov	r1, r9
 800f960:	4640      	mov	r0, r8
 800f962:	f7f1 f8f9 	bl	8000b58 <__aeabi_d2iz>
 800f966:	4606      	mov	r6, r0
 800f968:	f7f0 fddc 	bl	8000524 <__aeabi_i2d>
 800f96c:	3630      	adds	r6, #48	; 0x30
 800f96e:	4602      	mov	r2, r0
 800f970:	460b      	mov	r3, r1
 800f972:	4640      	mov	r0, r8
 800f974:	4649      	mov	r1, r9
 800f976:	f7f0 fc87 	bl	8000288 <__aeabi_dsub>
 800f97a:	f805 6b01 	strb.w	r6, [r5], #1
 800f97e:	9b02      	ldr	r3, [sp, #8]
 800f980:	429d      	cmp	r5, r3
 800f982:	4680      	mov	r8, r0
 800f984:	4689      	mov	r9, r1
 800f986:	f04f 0200 	mov.w	r2, #0
 800f98a:	d124      	bne.n	800f9d6 <_dtoa_r+0x62e>
 800f98c:	4b1b      	ldr	r3, [pc, #108]	; (800f9fc <_dtoa_r+0x654>)
 800f98e:	ec51 0b19 	vmov	r0, r1, d9
 800f992:	f7f0 fc7b 	bl	800028c <__adddf3>
 800f996:	4602      	mov	r2, r0
 800f998:	460b      	mov	r3, r1
 800f99a:	4640      	mov	r0, r8
 800f99c:	4649      	mov	r1, r9
 800f99e:	f7f1 f8bb 	bl	8000b18 <__aeabi_dcmpgt>
 800f9a2:	2800      	cmp	r0, #0
 800f9a4:	d173      	bne.n	800fa8e <_dtoa_r+0x6e6>
 800f9a6:	ec53 2b19 	vmov	r2, r3, d9
 800f9aa:	4914      	ldr	r1, [pc, #80]	; (800f9fc <_dtoa_r+0x654>)
 800f9ac:	2000      	movs	r0, #0
 800f9ae:	f7f0 fc6b 	bl	8000288 <__aeabi_dsub>
 800f9b2:	4602      	mov	r2, r0
 800f9b4:	460b      	mov	r3, r1
 800f9b6:	4640      	mov	r0, r8
 800f9b8:	4649      	mov	r1, r9
 800f9ba:	f7f1 f88f 	bl	8000adc <__aeabi_dcmplt>
 800f9be:	2800      	cmp	r0, #0
 800f9c0:	f43f af2f 	beq.w	800f822 <_dtoa_r+0x47a>
 800f9c4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800f9c6:	1e6b      	subs	r3, r5, #1
 800f9c8:	930f      	str	r3, [sp, #60]	; 0x3c
 800f9ca:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f9ce:	2b30      	cmp	r3, #48	; 0x30
 800f9d0:	d0f8      	beq.n	800f9c4 <_dtoa_r+0x61c>
 800f9d2:	46bb      	mov	fp, r7
 800f9d4:	e04a      	b.n	800fa6c <_dtoa_r+0x6c4>
 800f9d6:	4b06      	ldr	r3, [pc, #24]	; (800f9f0 <_dtoa_r+0x648>)
 800f9d8:	f7f0 fe0e 	bl	80005f8 <__aeabi_dmul>
 800f9dc:	4680      	mov	r8, r0
 800f9de:	4689      	mov	r9, r1
 800f9e0:	e7bd      	b.n	800f95e <_dtoa_r+0x5b6>
 800f9e2:	bf00      	nop
 800f9e4:	08012628 	.word	0x08012628
 800f9e8:	08012600 	.word	0x08012600
 800f9ec:	3ff00000 	.word	0x3ff00000
 800f9f0:	40240000 	.word	0x40240000
 800f9f4:	401c0000 	.word	0x401c0000
 800f9f8:	40140000 	.word	0x40140000
 800f9fc:	3fe00000 	.word	0x3fe00000
 800fa00:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800fa04:	9d00      	ldr	r5, [sp, #0]
 800fa06:	4642      	mov	r2, r8
 800fa08:	464b      	mov	r3, r9
 800fa0a:	4630      	mov	r0, r6
 800fa0c:	4639      	mov	r1, r7
 800fa0e:	f7f0 ff1d 	bl	800084c <__aeabi_ddiv>
 800fa12:	f7f1 f8a1 	bl	8000b58 <__aeabi_d2iz>
 800fa16:	9001      	str	r0, [sp, #4]
 800fa18:	f7f0 fd84 	bl	8000524 <__aeabi_i2d>
 800fa1c:	4642      	mov	r2, r8
 800fa1e:	464b      	mov	r3, r9
 800fa20:	f7f0 fdea 	bl	80005f8 <__aeabi_dmul>
 800fa24:	4602      	mov	r2, r0
 800fa26:	460b      	mov	r3, r1
 800fa28:	4630      	mov	r0, r6
 800fa2a:	4639      	mov	r1, r7
 800fa2c:	f7f0 fc2c 	bl	8000288 <__aeabi_dsub>
 800fa30:	9e01      	ldr	r6, [sp, #4]
 800fa32:	9f04      	ldr	r7, [sp, #16]
 800fa34:	3630      	adds	r6, #48	; 0x30
 800fa36:	f805 6b01 	strb.w	r6, [r5], #1
 800fa3a:	9e00      	ldr	r6, [sp, #0]
 800fa3c:	1bae      	subs	r6, r5, r6
 800fa3e:	42b7      	cmp	r7, r6
 800fa40:	4602      	mov	r2, r0
 800fa42:	460b      	mov	r3, r1
 800fa44:	d134      	bne.n	800fab0 <_dtoa_r+0x708>
 800fa46:	f7f0 fc21 	bl	800028c <__adddf3>
 800fa4a:	4642      	mov	r2, r8
 800fa4c:	464b      	mov	r3, r9
 800fa4e:	4606      	mov	r6, r0
 800fa50:	460f      	mov	r7, r1
 800fa52:	f7f1 f861 	bl	8000b18 <__aeabi_dcmpgt>
 800fa56:	b9c8      	cbnz	r0, 800fa8c <_dtoa_r+0x6e4>
 800fa58:	4642      	mov	r2, r8
 800fa5a:	464b      	mov	r3, r9
 800fa5c:	4630      	mov	r0, r6
 800fa5e:	4639      	mov	r1, r7
 800fa60:	f7f1 f832 	bl	8000ac8 <__aeabi_dcmpeq>
 800fa64:	b110      	cbz	r0, 800fa6c <_dtoa_r+0x6c4>
 800fa66:	9b01      	ldr	r3, [sp, #4]
 800fa68:	07db      	lsls	r3, r3, #31
 800fa6a:	d40f      	bmi.n	800fa8c <_dtoa_r+0x6e4>
 800fa6c:	4651      	mov	r1, sl
 800fa6e:	4620      	mov	r0, r4
 800fa70:	f000 fd86 	bl	8010580 <_Bfree>
 800fa74:	2300      	movs	r3, #0
 800fa76:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fa78:	702b      	strb	r3, [r5, #0]
 800fa7a:	f10b 0301 	add.w	r3, fp, #1
 800fa7e:	6013      	str	r3, [r2, #0]
 800fa80:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	f43f ace2 	beq.w	800f44c <_dtoa_r+0xa4>
 800fa88:	601d      	str	r5, [r3, #0]
 800fa8a:	e4df      	b.n	800f44c <_dtoa_r+0xa4>
 800fa8c:	465f      	mov	r7, fp
 800fa8e:	462b      	mov	r3, r5
 800fa90:	461d      	mov	r5, r3
 800fa92:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800fa96:	2a39      	cmp	r2, #57	; 0x39
 800fa98:	d106      	bne.n	800faa8 <_dtoa_r+0x700>
 800fa9a:	9a00      	ldr	r2, [sp, #0]
 800fa9c:	429a      	cmp	r2, r3
 800fa9e:	d1f7      	bne.n	800fa90 <_dtoa_r+0x6e8>
 800faa0:	9900      	ldr	r1, [sp, #0]
 800faa2:	2230      	movs	r2, #48	; 0x30
 800faa4:	3701      	adds	r7, #1
 800faa6:	700a      	strb	r2, [r1, #0]
 800faa8:	781a      	ldrb	r2, [r3, #0]
 800faaa:	3201      	adds	r2, #1
 800faac:	701a      	strb	r2, [r3, #0]
 800faae:	e790      	b.n	800f9d2 <_dtoa_r+0x62a>
 800fab0:	4ba3      	ldr	r3, [pc, #652]	; (800fd40 <_dtoa_r+0x998>)
 800fab2:	2200      	movs	r2, #0
 800fab4:	f7f0 fda0 	bl	80005f8 <__aeabi_dmul>
 800fab8:	2200      	movs	r2, #0
 800faba:	2300      	movs	r3, #0
 800fabc:	4606      	mov	r6, r0
 800fabe:	460f      	mov	r7, r1
 800fac0:	f7f1 f802 	bl	8000ac8 <__aeabi_dcmpeq>
 800fac4:	2800      	cmp	r0, #0
 800fac6:	d09e      	beq.n	800fa06 <_dtoa_r+0x65e>
 800fac8:	e7d0      	b.n	800fa6c <_dtoa_r+0x6c4>
 800faca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800facc:	2a00      	cmp	r2, #0
 800face:	f000 80ca 	beq.w	800fc66 <_dtoa_r+0x8be>
 800fad2:	9a07      	ldr	r2, [sp, #28]
 800fad4:	2a01      	cmp	r2, #1
 800fad6:	f300 80ad 	bgt.w	800fc34 <_dtoa_r+0x88c>
 800fada:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800fadc:	2a00      	cmp	r2, #0
 800fade:	f000 80a5 	beq.w	800fc2c <_dtoa_r+0x884>
 800fae2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800fae6:	9e08      	ldr	r6, [sp, #32]
 800fae8:	9d05      	ldr	r5, [sp, #20]
 800faea:	9a05      	ldr	r2, [sp, #20]
 800faec:	441a      	add	r2, r3
 800faee:	9205      	str	r2, [sp, #20]
 800faf0:	9a06      	ldr	r2, [sp, #24]
 800faf2:	2101      	movs	r1, #1
 800faf4:	441a      	add	r2, r3
 800faf6:	4620      	mov	r0, r4
 800faf8:	9206      	str	r2, [sp, #24]
 800fafa:	f000 fdf7 	bl	80106ec <__i2b>
 800fafe:	4607      	mov	r7, r0
 800fb00:	b165      	cbz	r5, 800fb1c <_dtoa_r+0x774>
 800fb02:	9b06      	ldr	r3, [sp, #24]
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	dd09      	ble.n	800fb1c <_dtoa_r+0x774>
 800fb08:	42ab      	cmp	r3, r5
 800fb0a:	9a05      	ldr	r2, [sp, #20]
 800fb0c:	bfa8      	it	ge
 800fb0e:	462b      	movge	r3, r5
 800fb10:	1ad2      	subs	r2, r2, r3
 800fb12:	9205      	str	r2, [sp, #20]
 800fb14:	9a06      	ldr	r2, [sp, #24]
 800fb16:	1aed      	subs	r5, r5, r3
 800fb18:	1ad3      	subs	r3, r2, r3
 800fb1a:	9306      	str	r3, [sp, #24]
 800fb1c:	9b08      	ldr	r3, [sp, #32]
 800fb1e:	b1f3      	cbz	r3, 800fb5e <_dtoa_r+0x7b6>
 800fb20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	f000 80a3 	beq.w	800fc6e <_dtoa_r+0x8c6>
 800fb28:	2e00      	cmp	r6, #0
 800fb2a:	dd10      	ble.n	800fb4e <_dtoa_r+0x7a6>
 800fb2c:	4639      	mov	r1, r7
 800fb2e:	4632      	mov	r2, r6
 800fb30:	4620      	mov	r0, r4
 800fb32:	f000 fe9b 	bl	801086c <__pow5mult>
 800fb36:	4652      	mov	r2, sl
 800fb38:	4601      	mov	r1, r0
 800fb3a:	4607      	mov	r7, r0
 800fb3c:	4620      	mov	r0, r4
 800fb3e:	f000 fdeb 	bl	8010718 <__multiply>
 800fb42:	4651      	mov	r1, sl
 800fb44:	4680      	mov	r8, r0
 800fb46:	4620      	mov	r0, r4
 800fb48:	f000 fd1a 	bl	8010580 <_Bfree>
 800fb4c:	46c2      	mov	sl, r8
 800fb4e:	9b08      	ldr	r3, [sp, #32]
 800fb50:	1b9a      	subs	r2, r3, r6
 800fb52:	d004      	beq.n	800fb5e <_dtoa_r+0x7b6>
 800fb54:	4651      	mov	r1, sl
 800fb56:	4620      	mov	r0, r4
 800fb58:	f000 fe88 	bl	801086c <__pow5mult>
 800fb5c:	4682      	mov	sl, r0
 800fb5e:	2101      	movs	r1, #1
 800fb60:	4620      	mov	r0, r4
 800fb62:	f000 fdc3 	bl	80106ec <__i2b>
 800fb66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	4606      	mov	r6, r0
 800fb6c:	f340 8081 	ble.w	800fc72 <_dtoa_r+0x8ca>
 800fb70:	461a      	mov	r2, r3
 800fb72:	4601      	mov	r1, r0
 800fb74:	4620      	mov	r0, r4
 800fb76:	f000 fe79 	bl	801086c <__pow5mult>
 800fb7a:	9b07      	ldr	r3, [sp, #28]
 800fb7c:	2b01      	cmp	r3, #1
 800fb7e:	4606      	mov	r6, r0
 800fb80:	dd7a      	ble.n	800fc78 <_dtoa_r+0x8d0>
 800fb82:	f04f 0800 	mov.w	r8, #0
 800fb86:	6933      	ldr	r3, [r6, #16]
 800fb88:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800fb8c:	6918      	ldr	r0, [r3, #16]
 800fb8e:	f000 fd5f 	bl	8010650 <__hi0bits>
 800fb92:	f1c0 0020 	rsb	r0, r0, #32
 800fb96:	9b06      	ldr	r3, [sp, #24]
 800fb98:	4418      	add	r0, r3
 800fb9a:	f010 001f 	ands.w	r0, r0, #31
 800fb9e:	f000 8094 	beq.w	800fcca <_dtoa_r+0x922>
 800fba2:	f1c0 0320 	rsb	r3, r0, #32
 800fba6:	2b04      	cmp	r3, #4
 800fba8:	f340 8085 	ble.w	800fcb6 <_dtoa_r+0x90e>
 800fbac:	9b05      	ldr	r3, [sp, #20]
 800fbae:	f1c0 001c 	rsb	r0, r0, #28
 800fbb2:	4403      	add	r3, r0
 800fbb4:	9305      	str	r3, [sp, #20]
 800fbb6:	9b06      	ldr	r3, [sp, #24]
 800fbb8:	4403      	add	r3, r0
 800fbba:	4405      	add	r5, r0
 800fbbc:	9306      	str	r3, [sp, #24]
 800fbbe:	9b05      	ldr	r3, [sp, #20]
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	dd05      	ble.n	800fbd0 <_dtoa_r+0x828>
 800fbc4:	4651      	mov	r1, sl
 800fbc6:	461a      	mov	r2, r3
 800fbc8:	4620      	mov	r0, r4
 800fbca:	f000 fea9 	bl	8010920 <__lshift>
 800fbce:	4682      	mov	sl, r0
 800fbd0:	9b06      	ldr	r3, [sp, #24]
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	dd05      	ble.n	800fbe2 <_dtoa_r+0x83a>
 800fbd6:	4631      	mov	r1, r6
 800fbd8:	461a      	mov	r2, r3
 800fbda:	4620      	mov	r0, r4
 800fbdc:	f000 fea0 	bl	8010920 <__lshift>
 800fbe0:	4606      	mov	r6, r0
 800fbe2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d072      	beq.n	800fcce <_dtoa_r+0x926>
 800fbe8:	4631      	mov	r1, r6
 800fbea:	4650      	mov	r0, sl
 800fbec:	f000 ff04 	bl	80109f8 <__mcmp>
 800fbf0:	2800      	cmp	r0, #0
 800fbf2:	da6c      	bge.n	800fcce <_dtoa_r+0x926>
 800fbf4:	2300      	movs	r3, #0
 800fbf6:	4651      	mov	r1, sl
 800fbf8:	220a      	movs	r2, #10
 800fbfa:	4620      	mov	r0, r4
 800fbfc:	f000 fce2 	bl	80105c4 <__multadd>
 800fc00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fc02:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 800fc06:	4682      	mov	sl, r0
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	f000 81b0 	beq.w	800ff6e <_dtoa_r+0xbc6>
 800fc0e:	2300      	movs	r3, #0
 800fc10:	4639      	mov	r1, r7
 800fc12:	220a      	movs	r2, #10
 800fc14:	4620      	mov	r0, r4
 800fc16:	f000 fcd5 	bl	80105c4 <__multadd>
 800fc1a:	9b01      	ldr	r3, [sp, #4]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	4607      	mov	r7, r0
 800fc20:	f300 8096 	bgt.w	800fd50 <_dtoa_r+0x9a8>
 800fc24:	9b07      	ldr	r3, [sp, #28]
 800fc26:	2b02      	cmp	r3, #2
 800fc28:	dc59      	bgt.n	800fcde <_dtoa_r+0x936>
 800fc2a:	e091      	b.n	800fd50 <_dtoa_r+0x9a8>
 800fc2c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fc2e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800fc32:	e758      	b.n	800fae6 <_dtoa_r+0x73e>
 800fc34:	9b04      	ldr	r3, [sp, #16]
 800fc36:	1e5e      	subs	r6, r3, #1
 800fc38:	9b08      	ldr	r3, [sp, #32]
 800fc3a:	42b3      	cmp	r3, r6
 800fc3c:	bfbf      	itttt	lt
 800fc3e:	9b08      	ldrlt	r3, [sp, #32]
 800fc40:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800fc42:	9608      	strlt	r6, [sp, #32]
 800fc44:	1af3      	sublt	r3, r6, r3
 800fc46:	bfb4      	ite	lt
 800fc48:	18d2      	addlt	r2, r2, r3
 800fc4a:	1b9e      	subge	r6, r3, r6
 800fc4c:	9b04      	ldr	r3, [sp, #16]
 800fc4e:	bfbc      	itt	lt
 800fc50:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800fc52:	2600      	movlt	r6, #0
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	bfb7      	itett	lt
 800fc58:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800fc5c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800fc60:	1a9d      	sublt	r5, r3, r2
 800fc62:	2300      	movlt	r3, #0
 800fc64:	e741      	b.n	800faea <_dtoa_r+0x742>
 800fc66:	9e08      	ldr	r6, [sp, #32]
 800fc68:	9d05      	ldr	r5, [sp, #20]
 800fc6a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800fc6c:	e748      	b.n	800fb00 <_dtoa_r+0x758>
 800fc6e:	9a08      	ldr	r2, [sp, #32]
 800fc70:	e770      	b.n	800fb54 <_dtoa_r+0x7ac>
 800fc72:	9b07      	ldr	r3, [sp, #28]
 800fc74:	2b01      	cmp	r3, #1
 800fc76:	dc19      	bgt.n	800fcac <_dtoa_r+0x904>
 800fc78:	9b02      	ldr	r3, [sp, #8]
 800fc7a:	b9bb      	cbnz	r3, 800fcac <_dtoa_r+0x904>
 800fc7c:	9b03      	ldr	r3, [sp, #12]
 800fc7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc82:	b99b      	cbnz	r3, 800fcac <_dtoa_r+0x904>
 800fc84:	9b03      	ldr	r3, [sp, #12]
 800fc86:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800fc8a:	0d1b      	lsrs	r3, r3, #20
 800fc8c:	051b      	lsls	r3, r3, #20
 800fc8e:	b183      	cbz	r3, 800fcb2 <_dtoa_r+0x90a>
 800fc90:	9b05      	ldr	r3, [sp, #20]
 800fc92:	3301      	adds	r3, #1
 800fc94:	9305      	str	r3, [sp, #20]
 800fc96:	9b06      	ldr	r3, [sp, #24]
 800fc98:	3301      	adds	r3, #1
 800fc9a:	9306      	str	r3, [sp, #24]
 800fc9c:	f04f 0801 	mov.w	r8, #1
 800fca0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	f47f af6f 	bne.w	800fb86 <_dtoa_r+0x7de>
 800fca8:	2001      	movs	r0, #1
 800fcaa:	e774      	b.n	800fb96 <_dtoa_r+0x7ee>
 800fcac:	f04f 0800 	mov.w	r8, #0
 800fcb0:	e7f6      	b.n	800fca0 <_dtoa_r+0x8f8>
 800fcb2:	4698      	mov	r8, r3
 800fcb4:	e7f4      	b.n	800fca0 <_dtoa_r+0x8f8>
 800fcb6:	d082      	beq.n	800fbbe <_dtoa_r+0x816>
 800fcb8:	9a05      	ldr	r2, [sp, #20]
 800fcba:	331c      	adds	r3, #28
 800fcbc:	441a      	add	r2, r3
 800fcbe:	9205      	str	r2, [sp, #20]
 800fcc0:	9a06      	ldr	r2, [sp, #24]
 800fcc2:	441a      	add	r2, r3
 800fcc4:	441d      	add	r5, r3
 800fcc6:	9206      	str	r2, [sp, #24]
 800fcc8:	e779      	b.n	800fbbe <_dtoa_r+0x816>
 800fcca:	4603      	mov	r3, r0
 800fccc:	e7f4      	b.n	800fcb8 <_dtoa_r+0x910>
 800fcce:	9b04      	ldr	r3, [sp, #16]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	dc37      	bgt.n	800fd44 <_dtoa_r+0x99c>
 800fcd4:	9b07      	ldr	r3, [sp, #28]
 800fcd6:	2b02      	cmp	r3, #2
 800fcd8:	dd34      	ble.n	800fd44 <_dtoa_r+0x99c>
 800fcda:	9b04      	ldr	r3, [sp, #16]
 800fcdc:	9301      	str	r3, [sp, #4]
 800fcde:	9b01      	ldr	r3, [sp, #4]
 800fce0:	b963      	cbnz	r3, 800fcfc <_dtoa_r+0x954>
 800fce2:	4631      	mov	r1, r6
 800fce4:	2205      	movs	r2, #5
 800fce6:	4620      	mov	r0, r4
 800fce8:	f000 fc6c 	bl	80105c4 <__multadd>
 800fcec:	4601      	mov	r1, r0
 800fcee:	4606      	mov	r6, r0
 800fcf0:	4650      	mov	r0, sl
 800fcf2:	f000 fe81 	bl	80109f8 <__mcmp>
 800fcf6:	2800      	cmp	r0, #0
 800fcf8:	f73f adbb 	bgt.w	800f872 <_dtoa_r+0x4ca>
 800fcfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fcfe:	9d00      	ldr	r5, [sp, #0]
 800fd00:	ea6f 0b03 	mvn.w	fp, r3
 800fd04:	f04f 0800 	mov.w	r8, #0
 800fd08:	4631      	mov	r1, r6
 800fd0a:	4620      	mov	r0, r4
 800fd0c:	f000 fc38 	bl	8010580 <_Bfree>
 800fd10:	2f00      	cmp	r7, #0
 800fd12:	f43f aeab 	beq.w	800fa6c <_dtoa_r+0x6c4>
 800fd16:	f1b8 0f00 	cmp.w	r8, #0
 800fd1a:	d005      	beq.n	800fd28 <_dtoa_r+0x980>
 800fd1c:	45b8      	cmp	r8, r7
 800fd1e:	d003      	beq.n	800fd28 <_dtoa_r+0x980>
 800fd20:	4641      	mov	r1, r8
 800fd22:	4620      	mov	r0, r4
 800fd24:	f000 fc2c 	bl	8010580 <_Bfree>
 800fd28:	4639      	mov	r1, r7
 800fd2a:	4620      	mov	r0, r4
 800fd2c:	f000 fc28 	bl	8010580 <_Bfree>
 800fd30:	e69c      	b.n	800fa6c <_dtoa_r+0x6c4>
 800fd32:	2600      	movs	r6, #0
 800fd34:	4637      	mov	r7, r6
 800fd36:	e7e1      	b.n	800fcfc <_dtoa_r+0x954>
 800fd38:	46bb      	mov	fp, r7
 800fd3a:	4637      	mov	r7, r6
 800fd3c:	e599      	b.n	800f872 <_dtoa_r+0x4ca>
 800fd3e:	bf00      	nop
 800fd40:	40240000 	.word	0x40240000
 800fd44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	f000 80c8 	beq.w	800fedc <_dtoa_r+0xb34>
 800fd4c:	9b04      	ldr	r3, [sp, #16]
 800fd4e:	9301      	str	r3, [sp, #4]
 800fd50:	2d00      	cmp	r5, #0
 800fd52:	dd05      	ble.n	800fd60 <_dtoa_r+0x9b8>
 800fd54:	4639      	mov	r1, r7
 800fd56:	462a      	mov	r2, r5
 800fd58:	4620      	mov	r0, r4
 800fd5a:	f000 fde1 	bl	8010920 <__lshift>
 800fd5e:	4607      	mov	r7, r0
 800fd60:	f1b8 0f00 	cmp.w	r8, #0
 800fd64:	d05b      	beq.n	800fe1e <_dtoa_r+0xa76>
 800fd66:	6879      	ldr	r1, [r7, #4]
 800fd68:	4620      	mov	r0, r4
 800fd6a:	f000 fbc9 	bl	8010500 <_Balloc>
 800fd6e:	4605      	mov	r5, r0
 800fd70:	b928      	cbnz	r0, 800fd7e <_dtoa_r+0x9d6>
 800fd72:	4b83      	ldr	r3, [pc, #524]	; (800ff80 <_dtoa_r+0xbd8>)
 800fd74:	4602      	mov	r2, r0
 800fd76:	f240 21ef 	movw	r1, #751	; 0x2ef
 800fd7a:	f7ff bb2e 	b.w	800f3da <_dtoa_r+0x32>
 800fd7e:	693a      	ldr	r2, [r7, #16]
 800fd80:	3202      	adds	r2, #2
 800fd82:	0092      	lsls	r2, r2, #2
 800fd84:	f107 010c 	add.w	r1, r7, #12
 800fd88:	300c      	adds	r0, #12
 800fd8a:	f001 f817 	bl	8010dbc <memcpy>
 800fd8e:	2201      	movs	r2, #1
 800fd90:	4629      	mov	r1, r5
 800fd92:	4620      	mov	r0, r4
 800fd94:	f000 fdc4 	bl	8010920 <__lshift>
 800fd98:	9b00      	ldr	r3, [sp, #0]
 800fd9a:	3301      	adds	r3, #1
 800fd9c:	9304      	str	r3, [sp, #16]
 800fd9e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fda2:	4413      	add	r3, r2
 800fda4:	9308      	str	r3, [sp, #32]
 800fda6:	9b02      	ldr	r3, [sp, #8]
 800fda8:	f003 0301 	and.w	r3, r3, #1
 800fdac:	46b8      	mov	r8, r7
 800fdae:	9306      	str	r3, [sp, #24]
 800fdb0:	4607      	mov	r7, r0
 800fdb2:	9b04      	ldr	r3, [sp, #16]
 800fdb4:	4631      	mov	r1, r6
 800fdb6:	3b01      	subs	r3, #1
 800fdb8:	4650      	mov	r0, sl
 800fdba:	9301      	str	r3, [sp, #4]
 800fdbc:	f7ff fa6a 	bl	800f294 <quorem>
 800fdc0:	4641      	mov	r1, r8
 800fdc2:	9002      	str	r0, [sp, #8]
 800fdc4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800fdc8:	4650      	mov	r0, sl
 800fdca:	f000 fe15 	bl	80109f8 <__mcmp>
 800fdce:	463a      	mov	r2, r7
 800fdd0:	9005      	str	r0, [sp, #20]
 800fdd2:	4631      	mov	r1, r6
 800fdd4:	4620      	mov	r0, r4
 800fdd6:	f000 fe2b 	bl	8010a30 <__mdiff>
 800fdda:	68c2      	ldr	r2, [r0, #12]
 800fddc:	4605      	mov	r5, r0
 800fdde:	bb02      	cbnz	r2, 800fe22 <_dtoa_r+0xa7a>
 800fde0:	4601      	mov	r1, r0
 800fde2:	4650      	mov	r0, sl
 800fde4:	f000 fe08 	bl	80109f8 <__mcmp>
 800fde8:	4602      	mov	r2, r0
 800fdea:	4629      	mov	r1, r5
 800fdec:	4620      	mov	r0, r4
 800fdee:	9209      	str	r2, [sp, #36]	; 0x24
 800fdf0:	f000 fbc6 	bl	8010580 <_Bfree>
 800fdf4:	9b07      	ldr	r3, [sp, #28]
 800fdf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800fdf8:	9d04      	ldr	r5, [sp, #16]
 800fdfa:	ea43 0102 	orr.w	r1, r3, r2
 800fdfe:	9b06      	ldr	r3, [sp, #24]
 800fe00:	4319      	orrs	r1, r3
 800fe02:	d110      	bne.n	800fe26 <_dtoa_r+0xa7e>
 800fe04:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fe08:	d029      	beq.n	800fe5e <_dtoa_r+0xab6>
 800fe0a:	9b05      	ldr	r3, [sp, #20]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	dd02      	ble.n	800fe16 <_dtoa_r+0xa6e>
 800fe10:	9b02      	ldr	r3, [sp, #8]
 800fe12:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800fe16:	9b01      	ldr	r3, [sp, #4]
 800fe18:	f883 9000 	strb.w	r9, [r3]
 800fe1c:	e774      	b.n	800fd08 <_dtoa_r+0x960>
 800fe1e:	4638      	mov	r0, r7
 800fe20:	e7ba      	b.n	800fd98 <_dtoa_r+0x9f0>
 800fe22:	2201      	movs	r2, #1
 800fe24:	e7e1      	b.n	800fdea <_dtoa_r+0xa42>
 800fe26:	9b05      	ldr	r3, [sp, #20]
 800fe28:	2b00      	cmp	r3, #0
 800fe2a:	db04      	blt.n	800fe36 <_dtoa_r+0xa8e>
 800fe2c:	9907      	ldr	r1, [sp, #28]
 800fe2e:	430b      	orrs	r3, r1
 800fe30:	9906      	ldr	r1, [sp, #24]
 800fe32:	430b      	orrs	r3, r1
 800fe34:	d120      	bne.n	800fe78 <_dtoa_r+0xad0>
 800fe36:	2a00      	cmp	r2, #0
 800fe38:	dded      	ble.n	800fe16 <_dtoa_r+0xa6e>
 800fe3a:	4651      	mov	r1, sl
 800fe3c:	2201      	movs	r2, #1
 800fe3e:	4620      	mov	r0, r4
 800fe40:	f000 fd6e 	bl	8010920 <__lshift>
 800fe44:	4631      	mov	r1, r6
 800fe46:	4682      	mov	sl, r0
 800fe48:	f000 fdd6 	bl	80109f8 <__mcmp>
 800fe4c:	2800      	cmp	r0, #0
 800fe4e:	dc03      	bgt.n	800fe58 <_dtoa_r+0xab0>
 800fe50:	d1e1      	bne.n	800fe16 <_dtoa_r+0xa6e>
 800fe52:	f019 0f01 	tst.w	r9, #1
 800fe56:	d0de      	beq.n	800fe16 <_dtoa_r+0xa6e>
 800fe58:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fe5c:	d1d8      	bne.n	800fe10 <_dtoa_r+0xa68>
 800fe5e:	9a01      	ldr	r2, [sp, #4]
 800fe60:	2339      	movs	r3, #57	; 0x39
 800fe62:	7013      	strb	r3, [r2, #0]
 800fe64:	462b      	mov	r3, r5
 800fe66:	461d      	mov	r5, r3
 800fe68:	3b01      	subs	r3, #1
 800fe6a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800fe6e:	2a39      	cmp	r2, #57	; 0x39
 800fe70:	d06c      	beq.n	800ff4c <_dtoa_r+0xba4>
 800fe72:	3201      	adds	r2, #1
 800fe74:	701a      	strb	r2, [r3, #0]
 800fe76:	e747      	b.n	800fd08 <_dtoa_r+0x960>
 800fe78:	2a00      	cmp	r2, #0
 800fe7a:	dd07      	ble.n	800fe8c <_dtoa_r+0xae4>
 800fe7c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800fe80:	d0ed      	beq.n	800fe5e <_dtoa_r+0xab6>
 800fe82:	9a01      	ldr	r2, [sp, #4]
 800fe84:	f109 0301 	add.w	r3, r9, #1
 800fe88:	7013      	strb	r3, [r2, #0]
 800fe8a:	e73d      	b.n	800fd08 <_dtoa_r+0x960>
 800fe8c:	9b04      	ldr	r3, [sp, #16]
 800fe8e:	9a08      	ldr	r2, [sp, #32]
 800fe90:	f803 9c01 	strb.w	r9, [r3, #-1]
 800fe94:	4293      	cmp	r3, r2
 800fe96:	d043      	beq.n	800ff20 <_dtoa_r+0xb78>
 800fe98:	4651      	mov	r1, sl
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	220a      	movs	r2, #10
 800fe9e:	4620      	mov	r0, r4
 800fea0:	f000 fb90 	bl	80105c4 <__multadd>
 800fea4:	45b8      	cmp	r8, r7
 800fea6:	4682      	mov	sl, r0
 800fea8:	f04f 0300 	mov.w	r3, #0
 800feac:	f04f 020a 	mov.w	r2, #10
 800feb0:	4641      	mov	r1, r8
 800feb2:	4620      	mov	r0, r4
 800feb4:	d107      	bne.n	800fec6 <_dtoa_r+0xb1e>
 800feb6:	f000 fb85 	bl	80105c4 <__multadd>
 800feba:	4680      	mov	r8, r0
 800febc:	4607      	mov	r7, r0
 800febe:	9b04      	ldr	r3, [sp, #16]
 800fec0:	3301      	adds	r3, #1
 800fec2:	9304      	str	r3, [sp, #16]
 800fec4:	e775      	b.n	800fdb2 <_dtoa_r+0xa0a>
 800fec6:	f000 fb7d 	bl	80105c4 <__multadd>
 800feca:	4639      	mov	r1, r7
 800fecc:	4680      	mov	r8, r0
 800fece:	2300      	movs	r3, #0
 800fed0:	220a      	movs	r2, #10
 800fed2:	4620      	mov	r0, r4
 800fed4:	f000 fb76 	bl	80105c4 <__multadd>
 800fed8:	4607      	mov	r7, r0
 800feda:	e7f0      	b.n	800febe <_dtoa_r+0xb16>
 800fedc:	9b04      	ldr	r3, [sp, #16]
 800fede:	9301      	str	r3, [sp, #4]
 800fee0:	9d00      	ldr	r5, [sp, #0]
 800fee2:	4631      	mov	r1, r6
 800fee4:	4650      	mov	r0, sl
 800fee6:	f7ff f9d5 	bl	800f294 <quorem>
 800feea:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800feee:	9b00      	ldr	r3, [sp, #0]
 800fef0:	f805 9b01 	strb.w	r9, [r5], #1
 800fef4:	1aea      	subs	r2, r5, r3
 800fef6:	9b01      	ldr	r3, [sp, #4]
 800fef8:	4293      	cmp	r3, r2
 800fefa:	dd07      	ble.n	800ff0c <_dtoa_r+0xb64>
 800fefc:	4651      	mov	r1, sl
 800fefe:	2300      	movs	r3, #0
 800ff00:	220a      	movs	r2, #10
 800ff02:	4620      	mov	r0, r4
 800ff04:	f000 fb5e 	bl	80105c4 <__multadd>
 800ff08:	4682      	mov	sl, r0
 800ff0a:	e7ea      	b.n	800fee2 <_dtoa_r+0xb3a>
 800ff0c:	9b01      	ldr	r3, [sp, #4]
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	bfc8      	it	gt
 800ff12:	461d      	movgt	r5, r3
 800ff14:	9b00      	ldr	r3, [sp, #0]
 800ff16:	bfd8      	it	le
 800ff18:	2501      	movle	r5, #1
 800ff1a:	441d      	add	r5, r3
 800ff1c:	f04f 0800 	mov.w	r8, #0
 800ff20:	4651      	mov	r1, sl
 800ff22:	2201      	movs	r2, #1
 800ff24:	4620      	mov	r0, r4
 800ff26:	f000 fcfb 	bl	8010920 <__lshift>
 800ff2a:	4631      	mov	r1, r6
 800ff2c:	4682      	mov	sl, r0
 800ff2e:	f000 fd63 	bl	80109f8 <__mcmp>
 800ff32:	2800      	cmp	r0, #0
 800ff34:	dc96      	bgt.n	800fe64 <_dtoa_r+0xabc>
 800ff36:	d102      	bne.n	800ff3e <_dtoa_r+0xb96>
 800ff38:	f019 0f01 	tst.w	r9, #1
 800ff3c:	d192      	bne.n	800fe64 <_dtoa_r+0xabc>
 800ff3e:	462b      	mov	r3, r5
 800ff40:	461d      	mov	r5, r3
 800ff42:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ff46:	2a30      	cmp	r2, #48	; 0x30
 800ff48:	d0fa      	beq.n	800ff40 <_dtoa_r+0xb98>
 800ff4a:	e6dd      	b.n	800fd08 <_dtoa_r+0x960>
 800ff4c:	9a00      	ldr	r2, [sp, #0]
 800ff4e:	429a      	cmp	r2, r3
 800ff50:	d189      	bne.n	800fe66 <_dtoa_r+0xabe>
 800ff52:	f10b 0b01 	add.w	fp, fp, #1
 800ff56:	2331      	movs	r3, #49	; 0x31
 800ff58:	e796      	b.n	800fe88 <_dtoa_r+0xae0>
 800ff5a:	4b0a      	ldr	r3, [pc, #40]	; (800ff84 <_dtoa_r+0xbdc>)
 800ff5c:	f7ff ba99 	b.w	800f492 <_dtoa_r+0xea>
 800ff60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	f47f aa6d 	bne.w	800f442 <_dtoa_r+0x9a>
 800ff68:	4b07      	ldr	r3, [pc, #28]	; (800ff88 <_dtoa_r+0xbe0>)
 800ff6a:	f7ff ba92 	b.w	800f492 <_dtoa_r+0xea>
 800ff6e:	9b01      	ldr	r3, [sp, #4]
 800ff70:	2b00      	cmp	r3, #0
 800ff72:	dcb5      	bgt.n	800fee0 <_dtoa_r+0xb38>
 800ff74:	9b07      	ldr	r3, [sp, #28]
 800ff76:	2b02      	cmp	r3, #2
 800ff78:	f73f aeb1 	bgt.w	800fcde <_dtoa_r+0x936>
 800ff7c:	e7b0      	b.n	800fee0 <_dtoa_r+0xb38>
 800ff7e:	bf00      	nop
 800ff80:	08012580 	.word	0x08012580
 800ff84:	080124e0 	.word	0x080124e0
 800ff88:	08012504 	.word	0x08012504

0800ff8c <__ssputs_r>:
 800ff8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ff90:	688e      	ldr	r6, [r1, #8]
 800ff92:	461f      	mov	r7, r3
 800ff94:	42be      	cmp	r6, r7
 800ff96:	680b      	ldr	r3, [r1, #0]
 800ff98:	4682      	mov	sl, r0
 800ff9a:	460c      	mov	r4, r1
 800ff9c:	4690      	mov	r8, r2
 800ff9e:	d82c      	bhi.n	800fffa <__ssputs_r+0x6e>
 800ffa0:	898a      	ldrh	r2, [r1, #12]
 800ffa2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ffa6:	d026      	beq.n	800fff6 <__ssputs_r+0x6a>
 800ffa8:	6965      	ldr	r5, [r4, #20]
 800ffaa:	6909      	ldr	r1, [r1, #16]
 800ffac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ffb0:	eba3 0901 	sub.w	r9, r3, r1
 800ffb4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ffb8:	1c7b      	adds	r3, r7, #1
 800ffba:	444b      	add	r3, r9
 800ffbc:	106d      	asrs	r5, r5, #1
 800ffbe:	429d      	cmp	r5, r3
 800ffc0:	bf38      	it	cc
 800ffc2:	461d      	movcc	r5, r3
 800ffc4:	0553      	lsls	r3, r2, #21
 800ffc6:	d527      	bpl.n	8010018 <__ssputs_r+0x8c>
 800ffc8:	4629      	mov	r1, r5
 800ffca:	f000 f95f 	bl	801028c <_malloc_r>
 800ffce:	4606      	mov	r6, r0
 800ffd0:	b360      	cbz	r0, 801002c <__ssputs_r+0xa0>
 800ffd2:	6921      	ldr	r1, [r4, #16]
 800ffd4:	464a      	mov	r2, r9
 800ffd6:	f000 fef1 	bl	8010dbc <memcpy>
 800ffda:	89a3      	ldrh	r3, [r4, #12]
 800ffdc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ffe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ffe4:	81a3      	strh	r3, [r4, #12]
 800ffe6:	6126      	str	r6, [r4, #16]
 800ffe8:	6165      	str	r5, [r4, #20]
 800ffea:	444e      	add	r6, r9
 800ffec:	eba5 0509 	sub.w	r5, r5, r9
 800fff0:	6026      	str	r6, [r4, #0]
 800fff2:	60a5      	str	r5, [r4, #8]
 800fff4:	463e      	mov	r6, r7
 800fff6:	42be      	cmp	r6, r7
 800fff8:	d900      	bls.n	800fffc <__ssputs_r+0x70>
 800fffa:	463e      	mov	r6, r7
 800fffc:	6820      	ldr	r0, [r4, #0]
 800fffe:	4632      	mov	r2, r6
 8010000:	4641      	mov	r1, r8
 8010002:	f000 fe6b 	bl	8010cdc <memmove>
 8010006:	68a3      	ldr	r3, [r4, #8]
 8010008:	1b9b      	subs	r3, r3, r6
 801000a:	60a3      	str	r3, [r4, #8]
 801000c:	6823      	ldr	r3, [r4, #0]
 801000e:	4433      	add	r3, r6
 8010010:	6023      	str	r3, [r4, #0]
 8010012:	2000      	movs	r0, #0
 8010014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010018:	462a      	mov	r2, r5
 801001a:	f000 fe30 	bl	8010c7e <_realloc_r>
 801001e:	4606      	mov	r6, r0
 8010020:	2800      	cmp	r0, #0
 8010022:	d1e0      	bne.n	800ffe6 <__ssputs_r+0x5a>
 8010024:	6921      	ldr	r1, [r4, #16]
 8010026:	4650      	mov	r0, sl
 8010028:	f000 ff0a 	bl	8010e40 <_free_r>
 801002c:	230c      	movs	r3, #12
 801002e:	f8ca 3000 	str.w	r3, [sl]
 8010032:	89a3      	ldrh	r3, [r4, #12]
 8010034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010038:	81a3      	strh	r3, [r4, #12]
 801003a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801003e:	e7e9      	b.n	8010014 <__ssputs_r+0x88>

08010040 <_svfiprintf_r>:
 8010040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010044:	4698      	mov	r8, r3
 8010046:	898b      	ldrh	r3, [r1, #12]
 8010048:	061b      	lsls	r3, r3, #24
 801004a:	b09d      	sub	sp, #116	; 0x74
 801004c:	4607      	mov	r7, r0
 801004e:	460d      	mov	r5, r1
 8010050:	4614      	mov	r4, r2
 8010052:	d50e      	bpl.n	8010072 <_svfiprintf_r+0x32>
 8010054:	690b      	ldr	r3, [r1, #16]
 8010056:	b963      	cbnz	r3, 8010072 <_svfiprintf_r+0x32>
 8010058:	2140      	movs	r1, #64	; 0x40
 801005a:	f000 f917 	bl	801028c <_malloc_r>
 801005e:	6028      	str	r0, [r5, #0]
 8010060:	6128      	str	r0, [r5, #16]
 8010062:	b920      	cbnz	r0, 801006e <_svfiprintf_r+0x2e>
 8010064:	230c      	movs	r3, #12
 8010066:	603b      	str	r3, [r7, #0]
 8010068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801006c:	e0d0      	b.n	8010210 <_svfiprintf_r+0x1d0>
 801006e:	2340      	movs	r3, #64	; 0x40
 8010070:	616b      	str	r3, [r5, #20]
 8010072:	2300      	movs	r3, #0
 8010074:	9309      	str	r3, [sp, #36]	; 0x24
 8010076:	2320      	movs	r3, #32
 8010078:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801007c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010080:	2330      	movs	r3, #48	; 0x30
 8010082:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8010228 <_svfiprintf_r+0x1e8>
 8010086:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801008a:	f04f 0901 	mov.w	r9, #1
 801008e:	4623      	mov	r3, r4
 8010090:	469a      	mov	sl, r3
 8010092:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010096:	b10a      	cbz	r2, 801009c <_svfiprintf_r+0x5c>
 8010098:	2a25      	cmp	r2, #37	; 0x25
 801009a:	d1f9      	bne.n	8010090 <_svfiprintf_r+0x50>
 801009c:	ebba 0b04 	subs.w	fp, sl, r4
 80100a0:	d00b      	beq.n	80100ba <_svfiprintf_r+0x7a>
 80100a2:	465b      	mov	r3, fp
 80100a4:	4622      	mov	r2, r4
 80100a6:	4629      	mov	r1, r5
 80100a8:	4638      	mov	r0, r7
 80100aa:	f7ff ff6f 	bl	800ff8c <__ssputs_r>
 80100ae:	3001      	adds	r0, #1
 80100b0:	f000 80a9 	beq.w	8010206 <_svfiprintf_r+0x1c6>
 80100b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80100b6:	445a      	add	r2, fp
 80100b8:	9209      	str	r2, [sp, #36]	; 0x24
 80100ba:	f89a 3000 	ldrb.w	r3, [sl]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	f000 80a1 	beq.w	8010206 <_svfiprintf_r+0x1c6>
 80100c4:	2300      	movs	r3, #0
 80100c6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80100ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80100ce:	f10a 0a01 	add.w	sl, sl, #1
 80100d2:	9304      	str	r3, [sp, #16]
 80100d4:	9307      	str	r3, [sp, #28]
 80100d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80100da:	931a      	str	r3, [sp, #104]	; 0x68
 80100dc:	4654      	mov	r4, sl
 80100de:	2205      	movs	r2, #5
 80100e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80100e4:	4850      	ldr	r0, [pc, #320]	; (8010228 <_svfiprintf_r+0x1e8>)
 80100e6:	f7f0 f873 	bl	80001d0 <memchr>
 80100ea:	9a04      	ldr	r2, [sp, #16]
 80100ec:	b9d8      	cbnz	r0, 8010126 <_svfiprintf_r+0xe6>
 80100ee:	06d0      	lsls	r0, r2, #27
 80100f0:	bf44      	itt	mi
 80100f2:	2320      	movmi	r3, #32
 80100f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80100f8:	0711      	lsls	r1, r2, #28
 80100fa:	bf44      	itt	mi
 80100fc:	232b      	movmi	r3, #43	; 0x2b
 80100fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010102:	f89a 3000 	ldrb.w	r3, [sl]
 8010106:	2b2a      	cmp	r3, #42	; 0x2a
 8010108:	d015      	beq.n	8010136 <_svfiprintf_r+0xf6>
 801010a:	9a07      	ldr	r2, [sp, #28]
 801010c:	4654      	mov	r4, sl
 801010e:	2000      	movs	r0, #0
 8010110:	f04f 0c0a 	mov.w	ip, #10
 8010114:	4621      	mov	r1, r4
 8010116:	f811 3b01 	ldrb.w	r3, [r1], #1
 801011a:	3b30      	subs	r3, #48	; 0x30
 801011c:	2b09      	cmp	r3, #9
 801011e:	d94d      	bls.n	80101bc <_svfiprintf_r+0x17c>
 8010120:	b1b0      	cbz	r0, 8010150 <_svfiprintf_r+0x110>
 8010122:	9207      	str	r2, [sp, #28]
 8010124:	e014      	b.n	8010150 <_svfiprintf_r+0x110>
 8010126:	eba0 0308 	sub.w	r3, r0, r8
 801012a:	fa09 f303 	lsl.w	r3, r9, r3
 801012e:	4313      	orrs	r3, r2
 8010130:	9304      	str	r3, [sp, #16]
 8010132:	46a2      	mov	sl, r4
 8010134:	e7d2      	b.n	80100dc <_svfiprintf_r+0x9c>
 8010136:	9b03      	ldr	r3, [sp, #12]
 8010138:	1d19      	adds	r1, r3, #4
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	9103      	str	r1, [sp, #12]
 801013e:	2b00      	cmp	r3, #0
 8010140:	bfbb      	ittet	lt
 8010142:	425b      	neglt	r3, r3
 8010144:	f042 0202 	orrlt.w	r2, r2, #2
 8010148:	9307      	strge	r3, [sp, #28]
 801014a:	9307      	strlt	r3, [sp, #28]
 801014c:	bfb8      	it	lt
 801014e:	9204      	strlt	r2, [sp, #16]
 8010150:	7823      	ldrb	r3, [r4, #0]
 8010152:	2b2e      	cmp	r3, #46	; 0x2e
 8010154:	d10c      	bne.n	8010170 <_svfiprintf_r+0x130>
 8010156:	7863      	ldrb	r3, [r4, #1]
 8010158:	2b2a      	cmp	r3, #42	; 0x2a
 801015a:	d134      	bne.n	80101c6 <_svfiprintf_r+0x186>
 801015c:	9b03      	ldr	r3, [sp, #12]
 801015e:	1d1a      	adds	r2, r3, #4
 8010160:	681b      	ldr	r3, [r3, #0]
 8010162:	9203      	str	r2, [sp, #12]
 8010164:	2b00      	cmp	r3, #0
 8010166:	bfb8      	it	lt
 8010168:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801016c:	3402      	adds	r4, #2
 801016e:	9305      	str	r3, [sp, #20]
 8010170:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8010238 <_svfiprintf_r+0x1f8>
 8010174:	7821      	ldrb	r1, [r4, #0]
 8010176:	2203      	movs	r2, #3
 8010178:	4650      	mov	r0, sl
 801017a:	f7f0 f829 	bl	80001d0 <memchr>
 801017e:	b138      	cbz	r0, 8010190 <_svfiprintf_r+0x150>
 8010180:	9b04      	ldr	r3, [sp, #16]
 8010182:	eba0 000a 	sub.w	r0, r0, sl
 8010186:	2240      	movs	r2, #64	; 0x40
 8010188:	4082      	lsls	r2, r0
 801018a:	4313      	orrs	r3, r2
 801018c:	3401      	adds	r4, #1
 801018e:	9304      	str	r3, [sp, #16]
 8010190:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010194:	4825      	ldr	r0, [pc, #148]	; (801022c <_svfiprintf_r+0x1ec>)
 8010196:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801019a:	2206      	movs	r2, #6
 801019c:	f7f0 f818 	bl	80001d0 <memchr>
 80101a0:	2800      	cmp	r0, #0
 80101a2:	d038      	beq.n	8010216 <_svfiprintf_r+0x1d6>
 80101a4:	4b22      	ldr	r3, [pc, #136]	; (8010230 <_svfiprintf_r+0x1f0>)
 80101a6:	bb1b      	cbnz	r3, 80101f0 <_svfiprintf_r+0x1b0>
 80101a8:	9b03      	ldr	r3, [sp, #12]
 80101aa:	3307      	adds	r3, #7
 80101ac:	f023 0307 	bic.w	r3, r3, #7
 80101b0:	3308      	adds	r3, #8
 80101b2:	9303      	str	r3, [sp, #12]
 80101b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101b6:	4433      	add	r3, r6
 80101b8:	9309      	str	r3, [sp, #36]	; 0x24
 80101ba:	e768      	b.n	801008e <_svfiprintf_r+0x4e>
 80101bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80101c0:	460c      	mov	r4, r1
 80101c2:	2001      	movs	r0, #1
 80101c4:	e7a6      	b.n	8010114 <_svfiprintf_r+0xd4>
 80101c6:	2300      	movs	r3, #0
 80101c8:	3401      	adds	r4, #1
 80101ca:	9305      	str	r3, [sp, #20]
 80101cc:	4619      	mov	r1, r3
 80101ce:	f04f 0c0a 	mov.w	ip, #10
 80101d2:	4620      	mov	r0, r4
 80101d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80101d8:	3a30      	subs	r2, #48	; 0x30
 80101da:	2a09      	cmp	r2, #9
 80101dc:	d903      	bls.n	80101e6 <_svfiprintf_r+0x1a6>
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d0c6      	beq.n	8010170 <_svfiprintf_r+0x130>
 80101e2:	9105      	str	r1, [sp, #20]
 80101e4:	e7c4      	b.n	8010170 <_svfiprintf_r+0x130>
 80101e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80101ea:	4604      	mov	r4, r0
 80101ec:	2301      	movs	r3, #1
 80101ee:	e7f0      	b.n	80101d2 <_svfiprintf_r+0x192>
 80101f0:	ab03      	add	r3, sp, #12
 80101f2:	9300      	str	r3, [sp, #0]
 80101f4:	462a      	mov	r2, r5
 80101f6:	4b0f      	ldr	r3, [pc, #60]	; (8010234 <_svfiprintf_r+0x1f4>)
 80101f8:	a904      	add	r1, sp, #16
 80101fa:	4638      	mov	r0, r7
 80101fc:	f7fe fb7c 	bl	800e8f8 <_printf_float>
 8010200:	1c42      	adds	r2, r0, #1
 8010202:	4606      	mov	r6, r0
 8010204:	d1d6      	bne.n	80101b4 <_svfiprintf_r+0x174>
 8010206:	89ab      	ldrh	r3, [r5, #12]
 8010208:	065b      	lsls	r3, r3, #25
 801020a:	f53f af2d 	bmi.w	8010068 <_svfiprintf_r+0x28>
 801020e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010210:	b01d      	add	sp, #116	; 0x74
 8010212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010216:	ab03      	add	r3, sp, #12
 8010218:	9300      	str	r3, [sp, #0]
 801021a:	462a      	mov	r2, r5
 801021c:	4b05      	ldr	r3, [pc, #20]	; (8010234 <_svfiprintf_r+0x1f4>)
 801021e:	a904      	add	r1, sp, #16
 8010220:	4638      	mov	r0, r7
 8010222:	f7fe fe0d 	bl	800ee40 <_printf_i>
 8010226:	e7eb      	b.n	8010200 <_svfiprintf_r+0x1c0>
 8010228:	08012591 	.word	0x08012591
 801022c:	0801259b 	.word	0x0801259b
 8010230:	0800e8f9 	.word	0x0800e8f9
 8010234:	0800ff8d 	.word	0x0800ff8d
 8010238:	08012597 	.word	0x08012597

0801023c <malloc>:
 801023c:	4b02      	ldr	r3, [pc, #8]	; (8010248 <malloc+0xc>)
 801023e:	4601      	mov	r1, r0
 8010240:	6818      	ldr	r0, [r3, #0]
 8010242:	f000 b823 	b.w	801028c <_malloc_r>
 8010246:	bf00      	nop
 8010248:	20000154 	.word	0x20000154

0801024c <sbrk_aligned>:
 801024c:	b570      	push	{r4, r5, r6, lr}
 801024e:	4e0e      	ldr	r6, [pc, #56]	; (8010288 <sbrk_aligned+0x3c>)
 8010250:	460c      	mov	r4, r1
 8010252:	6831      	ldr	r1, [r6, #0]
 8010254:	4605      	mov	r5, r0
 8010256:	b911      	cbnz	r1, 801025e <sbrk_aligned+0x12>
 8010258:	f000 fd8e 	bl	8010d78 <_sbrk_r>
 801025c:	6030      	str	r0, [r6, #0]
 801025e:	4621      	mov	r1, r4
 8010260:	4628      	mov	r0, r5
 8010262:	f000 fd89 	bl	8010d78 <_sbrk_r>
 8010266:	1c43      	adds	r3, r0, #1
 8010268:	d00a      	beq.n	8010280 <sbrk_aligned+0x34>
 801026a:	1cc4      	adds	r4, r0, #3
 801026c:	f024 0403 	bic.w	r4, r4, #3
 8010270:	42a0      	cmp	r0, r4
 8010272:	d007      	beq.n	8010284 <sbrk_aligned+0x38>
 8010274:	1a21      	subs	r1, r4, r0
 8010276:	4628      	mov	r0, r5
 8010278:	f000 fd7e 	bl	8010d78 <_sbrk_r>
 801027c:	3001      	adds	r0, #1
 801027e:	d101      	bne.n	8010284 <sbrk_aligned+0x38>
 8010280:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8010284:	4620      	mov	r0, r4
 8010286:	bd70      	pop	{r4, r5, r6, pc}
 8010288:	200023b8 	.word	0x200023b8

0801028c <_malloc_r>:
 801028c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010290:	1ccd      	adds	r5, r1, #3
 8010292:	f025 0503 	bic.w	r5, r5, #3
 8010296:	3508      	adds	r5, #8
 8010298:	2d0c      	cmp	r5, #12
 801029a:	bf38      	it	cc
 801029c:	250c      	movcc	r5, #12
 801029e:	2d00      	cmp	r5, #0
 80102a0:	4607      	mov	r7, r0
 80102a2:	db01      	blt.n	80102a8 <_malloc_r+0x1c>
 80102a4:	42a9      	cmp	r1, r5
 80102a6:	d905      	bls.n	80102b4 <_malloc_r+0x28>
 80102a8:	230c      	movs	r3, #12
 80102aa:	603b      	str	r3, [r7, #0]
 80102ac:	2600      	movs	r6, #0
 80102ae:	4630      	mov	r0, r6
 80102b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80102b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8010388 <_malloc_r+0xfc>
 80102b8:	f000 f916 	bl	80104e8 <__malloc_lock>
 80102bc:	f8d8 3000 	ldr.w	r3, [r8]
 80102c0:	461c      	mov	r4, r3
 80102c2:	bb5c      	cbnz	r4, 801031c <_malloc_r+0x90>
 80102c4:	4629      	mov	r1, r5
 80102c6:	4638      	mov	r0, r7
 80102c8:	f7ff ffc0 	bl	801024c <sbrk_aligned>
 80102cc:	1c43      	adds	r3, r0, #1
 80102ce:	4604      	mov	r4, r0
 80102d0:	d155      	bne.n	801037e <_malloc_r+0xf2>
 80102d2:	f8d8 4000 	ldr.w	r4, [r8]
 80102d6:	4626      	mov	r6, r4
 80102d8:	2e00      	cmp	r6, #0
 80102da:	d145      	bne.n	8010368 <_malloc_r+0xdc>
 80102dc:	2c00      	cmp	r4, #0
 80102de:	d048      	beq.n	8010372 <_malloc_r+0xe6>
 80102e0:	6823      	ldr	r3, [r4, #0]
 80102e2:	4631      	mov	r1, r6
 80102e4:	4638      	mov	r0, r7
 80102e6:	eb04 0903 	add.w	r9, r4, r3
 80102ea:	f000 fd45 	bl	8010d78 <_sbrk_r>
 80102ee:	4581      	cmp	r9, r0
 80102f0:	d13f      	bne.n	8010372 <_malloc_r+0xe6>
 80102f2:	6821      	ldr	r1, [r4, #0]
 80102f4:	1a6d      	subs	r5, r5, r1
 80102f6:	4629      	mov	r1, r5
 80102f8:	4638      	mov	r0, r7
 80102fa:	f7ff ffa7 	bl	801024c <sbrk_aligned>
 80102fe:	3001      	adds	r0, #1
 8010300:	d037      	beq.n	8010372 <_malloc_r+0xe6>
 8010302:	6823      	ldr	r3, [r4, #0]
 8010304:	442b      	add	r3, r5
 8010306:	6023      	str	r3, [r4, #0]
 8010308:	f8d8 3000 	ldr.w	r3, [r8]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d038      	beq.n	8010382 <_malloc_r+0xf6>
 8010310:	685a      	ldr	r2, [r3, #4]
 8010312:	42a2      	cmp	r2, r4
 8010314:	d12b      	bne.n	801036e <_malloc_r+0xe2>
 8010316:	2200      	movs	r2, #0
 8010318:	605a      	str	r2, [r3, #4]
 801031a:	e00f      	b.n	801033c <_malloc_r+0xb0>
 801031c:	6822      	ldr	r2, [r4, #0]
 801031e:	1b52      	subs	r2, r2, r5
 8010320:	d41f      	bmi.n	8010362 <_malloc_r+0xd6>
 8010322:	2a0b      	cmp	r2, #11
 8010324:	d917      	bls.n	8010356 <_malloc_r+0xca>
 8010326:	1961      	adds	r1, r4, r5
 8010328:	42a3      	cmp	r3, r4
 801032a:	6025      	str	r5, [r4, #0]
 801032c:	bf18      	it	ne
 801032e:	6059      	strne	r1, [r3, #4]
 8010330:	6863      	ldr	r3, [r4, #4]
 8010332:	bf08      	it	eq
 8010334:	f8c8 1000 	streq.w	r1, [r8]
 8010338:	5162      	str	r2, [r4, r5]
 801033a:	604b      	str	r3, [r1, #4]
 801033c:	4638      	mov	r0, r7
 801033e:	f104 060b 	add.w	r6, r4, #11
 8010342:	f000 f8d7 	bl	80104f4 <__malloc_unlock>
 8010346:	f026 0607 	bic.w	r6, r6, #7
 801034a:	1d23      	adds	r3, r4, #4
 801034c:	1af2      	subs	r2, r6, r3
 801034e:	d0ae      	beq.n	80102ae <_malloc_r+0x22>
 8010350:	1b9b      	subs	r3, r3, r6
 8010352:	50a3      	str	r3, [r4, r2]
 8010354:	e7ab      	b.n	80102ae <_malloc_r+0x22>
 8010356:	42a3      	cmp	r3, r4
 8010358:	6862      	ldr	r2, [r4, #4]
 801035a:	d1dd      	bne.n	8010318 <_malloc_r+0x8c>
 801035c:	f8c8 2000 	str.w	r2, [r8]
 8010360:	e7ec      	b.n	801033c <_malloc_r+0xb0>
 8010362:	4623      	mov	r3, r4
 8010364:	6864      	ldr	r4, [r4, #4]
 8010366:	e7ac      	b.n	80102c2 <_malloc_r+0x36>
 8010368:	4634      	mov	r4, r6
 801036a:	6876      	ldr	r6, [r6, #4]
 801036c:	e7b4      	b.n	80102d8 <_malloc_r+0x4c>
 801036e:	4613      	mov	r3, r2
 8010370:	e7cc      	b.n	801030c <_malloc_r+0x80>
 8010372:	230c      	movs	r3, #12
 8010374:	603b      	str	r3, [r7, #0]
 8010376:	4638      	mov	r0, r7
 8010378:	f000 f8bc 	bl	80104f4 <__malloc_unlock>
 801037c:	e797      	b.n	80102ae <_malloc_r+0x22>
 801037e:	6025      	str	r5, [r4, #0]
 8010380:	e7dc      	b.n	801033c <_malloc_r+0xb0>
 8010382:	605b      	str	r3, [r3, #4]
 8010384:	deff      	udf	#255	; 0xff
 8010386:	bf00      	nop
 8010388:	200023b4 	.word	0x200023b4

0801038c <__sflush_r>:
 801038c:	898a      	ldrh	r2, [r1, #12]
 801038e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010392:	4605      	mov	r5, r0
 8010394:	0710      	lsls	r0, r2, #28
 8010396:	460c      	mov	r4, r1
 8010398:	d458      	bmi.n	801044c <__sflush_r+0xc0>
 801039a:	684b      	ldr	r3, [r1, #4]
 801039c:	2b00      	cmp	r3, #0
 801039e:	dc05      	bgt.n	80103ac <__sflush_r+0x20>
 80103a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	dc02      	bgt.n	80103ac <__sflush_r+0x20>
 80103a6:	2000      	movs	r0, #0
 80103a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80103ae:	2e00      	cmp	r6, #0
 80103b0:	d0f9      	beq.n	80103a6 <__sflush_r+0x1a>
 80103b2:	2300      	movs	r3, #0
 80103b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80103b8:	682f      	ldr	r7, [r5, #0]
 80103ba:	6a21      	ldr	r1, [r4, #32]
 80103bc:	602b      	str	r3, [r5, #0]
 80103be:	d032      	beq.n	8010426 <__sflush_r+0x9a>
 80103c0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80103c2:	89a3      	ldrh	r3, [r4, #12]
 80103c4:	075a      	lsls	r2, r3, #29
 80103c6:	d505      	bpl.n	80103d4 <__sflush_r+0x48>
 80103c8:	6863      	ldr	r3, [r4, #4]
 80103ca:	1ac0      	subs	r0, r0, r3
 80103cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80103ce:	b10b      	cbz	r3, 80103d4 <__sflush_r+0x48>
 80103d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80103d2:	1ac0      	subs	r0, r0, r3
 80103d4:	2300      	movs	r3, #0
 80103d6:	4602      	mov	r2, r0
 80103d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80103da:	6a21      	ldr	r1, [r4, #32]
 80103dc:	4628      	mov	r0, r5
 80103de:	47b0      	blx	r6
 80103e0:	1c43      	adds	r3, r0, #1
 80103e2:	89a3      	ldrh	r3, [r4, #12]
 80103e4:	d106      	bne.n	80103f4 <__sflush_r+0x68>
 80103e6:	6829      	ldr	r1, [r5, #0]
 80103e8:	291d      	cmp	r1, #29
 80103ea:	d82b      	bhi.n	8010444 <__sflush_r+0xb8>
 80103ec:	4a29      	ldr	r2, [pc, #164]	; (8010494 <__sflush_r+0x108>)
 80103ee:	410a      	asrs	r2, r1
 80103f0:	07d6      	lsls	r6, r2, #31
 80103f2:	d427      	bmi.n	8010444 <__sflush_r+0xb8>
 80103f4:	2200      	movs	r2, #0
 80103f6:	6062      	str	r2, [r4, #4]
 80103f8:	04d9      	lsls	r1, r3, #19
 80103fa:	6922      	ldr	r2, [r4, #16]
 80103fc:	6022      	str	r2, [r4, #0]
 80103fe:	d504      	bpl.n	801040a <__sflush_r+0x7e>
 8010400:	1c42      	adds	r2, r0, #1
 8010402:	d101      	bne.n	8010408 <__sflush_r+0x7c>
 8010404:	682b      	ldr	r3, [r5, #0]
 8010406:	b903      	cbnz	r3, 801040a <__sflush_r+0x7e>
 8010408:	6560      	str	r0, [r4, #84]	; 0x54
 801040a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801040c:	602f      	str	r7, [r5, #0]
 801040e:	2900      	cmp	r1, #0
 8010410:	d0c9      	beq.n	80103a6 <__sflush_r+0x1a>
 8010412:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010416:	4299      	cmp	r1, r3
 8010418:	d002      	beq.n	8010420 <__sflush_r+0x94>
 801041a:	4628      	mov	r0, r5
 801041c:	f000 fd10 	bl	8010e40 <_free_r>
 8010420:	2000      	movs	r0, #0
 8010422:	6360      	str	r0, [r4, #52]	; 0x34
 8010424:	e7c0      	b.n	80103a8 <__sflush_r+0x1c>
 8010426:	2301      	movs	r3, #1
 8010428:	4628      	mov	r0, r5
 801042a:	47b0      	blx	r6
 801042c:	1c41      	adds	r1, r0, #1
 801042e:	d1c8      	bne.n	80103c2 <__sflush_r+0x36>
 8010430:	682b      	ldr	r3, [r5, #0]
 8010432:	2b00      	cmp	r3, #0
 8010434:	d0c5      	beq.n	80103c2 <__sflush_r+0x36>
 8010436:	2b1d      	cmp	r3, #29
 8010438:	d001      	beq.n	801043e <__sflush_r+0xb2>
 801043a:	2b16      	cmp	r3, #22
 801043c:	d101      	bne.n	8010442 <__sflush_r+0xb6>
 801043e:	602f      	str	r7, [r5, #0]
 8010440:	e7b1      	b.n	80103a6 <__sflush_r+0x1a>
 8010442:	89a3      	ldrh	r3, [r4, #12]
 8010444:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010448:	81a3      	strh	r3, [r4, #12]
 801044a:	e7ad      	b.n	80103a8 <__sflush_r+0x1c>
 801044c:	690f      	ldr	r7, [r1, #16]
 801044e:	2f00      	cmp	r7, #0
 8010450:	d0a9      	beq.n	80103a6 <__sflush_r+0x1a>
 8010452:	0793      	lsls	r3, r2, #30
 8010454:	680e      	ldr	r6, [r1, #0]
 8010456:	bf08      	it	eq
 8010458:	694b      	ldreq	r3, [r1, #20]
 801045a:	600f      	str	r7, [r1, #0]
 801045c:	bf18      	it	ne
 801045e:	2300      	movne	r3, #0
 8010460:	eba6 0807 	sub.w	r8, r6, r7
 8010464:	608b      	str	r3, [r1, #8]
 8010466:	f1b8 0f00 	cmp.w	r8, #0
 801046a:	dd9c      	ble.n	80103a6 <__sflush_r+0x1a>
 801046c:	6a21      	ldr	r1, [r4, #32]
 801046e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010470:	4643      	mov	r3, r8
 8010472:	463a      	mov	r2, r7
 8010474:	4628      	mov	r0, r5
 8010476:	47b0      	blx	r6
 8010478:	2800      	cmp	r0, #0
 801047a:	dc06      	bgt.n	801048a <__sflush_r+0xfe>
 801047c:	89a3      	ldrh	r3, [r4, #12]
 801047e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010482:	81a3      	strh	r3, [r4, #12]
 8010484:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010488:	e78e      	b.n	80103a8 <__sflush_r+0x1c>
 801048a:	4407      	add	r7, r0
 801048c:	eba8 0800 	sub.w	r8, r8, r0
 8010490:	e7e9      	b.n	8010466 <__sflush_r+0xda>
 8010492:	bf00      	nop
 8010494:	dfbffffe 	.word	0xdfbffffe

08010498 <_fflush_r>:
 8010498:	b538      	push	{r3, r4, r5, lr}
 801049a:	690b      	ldr	r3, [r1, #16]
 801049c:	4605      	mov	r5, r0
 801049e:	460c      	mov	r4, r1
 80104a0:	b913      	cbnz	r3, 80104a8 <_fflush_r+0x10>
 80104a2:	2500      	movs	r5, #0
 80104a4:	4628      	mov	r0, r5
 80104a6:	bd38      	pop	{r3, r4, r5, pc}
 80104a8:	b118      	cbz	r0, 80104b2 <_fflush_r+0x1a>
 80104aa:	6a03      	ldr	r3, [r0, #32]
 80104ac:	b90b      	cbnz	r3, 80104b2 <_fflush_r+0x1a>
 80104ae:	f7fe fe83 	bl	800f1b8 <__sinit>
 80104b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80104b6:	2b00      	cmp	r3, #0
 80104b8:	d0f3      	beq.n	80104a2 <_fflush_r+0xa>
 80104ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80104bc:	07d0      	lsls	r0, r2, #31
 80104be:	d404      	bmi.n	80104ca <_fflush_r+0x32>
 80104c0:	0599      	lsls	r1, r3, #22
 80104c2:	d402      	bmi.n	80104ca <_fflush_r+0x32>
 80104c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104c6:	f7fe fee3 	bl	800f290 <__retarget_lock_acquire_recursive>
 80104ca:	4628      	mov	r0, r5
 80104cc:	4621      	mov	r1, r4
 80104ce:	f7ff ff5d 	bl	801038c <__sflush_r>
 80104d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80104d4:	07da      	lsls	r2, r3, #31
 80104d6:	4605      	mov	r5, r0
 80104d8:	d4e4      	bmi.n	80104a4 <_fflush_r+0xc>
 80104da:	89a3      	ldrh	r3, [r4, #12]
 80104dc:	059b      	lsls	r3, r3, #22
 80104de:	d4e1      	bmi.n	80104a4 <_fflush_r+0xc>
 80104e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80104e2:	f7fe fed6 	bl	800f292 <__retarget_lock_release_recursive>
 80104e6:	e7dd      	b.n	80104a4 <_fflush_r+0xc>

080104e8 <__malloc_lock>:
 80104e8:	4801      	ldr	r0, [pc, #4]	; (80104f0 <__malloc_lock+0x8>)
 80104ea:	f7fe bed1 	b.w	800f290 <__retarget_lock_acquire_recursive>
 80104ee:	bf00      	nop
 80104f0:	200023b0 	.word	0x200023b0

080104f4 <__malloc_unlock>:
 80104f4:	4801      	ldr	r0, [pc, #4]	; (80104fc <__malloc_unlock+0x8>)
 80104f6:	f7fe becc 	b.w	800f292 <__retarget_lock_release_recursive>
 80104fa:	bf00      	nop
 80104fc:	200023b0 	.word	0x200023b0

08010500 <_Balloc>:
 8010500:	b570      	push	{r4, r5, r6, lr}
 8010502:	69c6      	ldr	r6, [r0, #28]
 8010504:	4604      	mov	r4, r0
 8010506:	460d      	mov	r5, r1
 8010508:	b976      	cbnz	r6, 8010528 <_Balloc+0x28>
 801050a:	2010      	movs	r0, #16
 801050c:	f7ff fe96 	bl	801023c <malloc>
 8010510:	4602      	mov	r2, r0
 8010512:	61e0      	str	r0, [r4, #28]
 8010514:	b920      	cbnz	r0, 8010520 <_Balloc+0x20>
 8010516:	4b18      	ldr	r3, [pc, #96]	; (8010578 <_Balloc+0x78>)
 8010518:	4818      	ldr	r0, [pc, #96]	; (801057c <_Balloc+0x7c>)
 801051a:	216b      	movs	r1, #107	; 0x6b
 801051c:	f000 fc5c 	bl	8010dd8 <__assert_func>
 8010520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8010524:	6006      	str	r6, [r0, #0]
 8010526:	60c6      	str	r6, [r0, #12]
 8010528:	69e6      	ldr	r6, [r4, #28]
 801052a:	68f3      	ldr	r3, [r6, #12]
 801052c:	b183      	cbz	r3, 8010550 <_Balloc+0x50>
 801052e:	69e3      	ldr	r3, [r4, #28]
 8010530:	68db      	ldr	r3, [r3, #12]
 8010532:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8010536:	b9b8      	cbnz	r0, 8010568 <_Balloc+0x68>
 8010538:	2101      	movs	r1, #1
 801053a:	fa01 f605 	lsl.w	r6, r1, r5
 801053e:	1d72      	adds	r2, r6, #5
 8010540:	0092      	lsls	r2, r2, #2
 8010542:	4620      	mov	r0, r4
 8010544:	f000 fc66 	bl	8010e14 <_calloc_r>
 8010548:	b160      	cbz	r0, 8010564 <_Balloc+0x64>
 801054a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801054e:	e00e      	b.n	801056e <_Balloc+0x6e>
 8010550:	2221      	movs	r2, #33	; 0x21
 8010552:	2104      	movs	r1, #4
 8010554:	4620      	mov	r0, r4
 8010556:	f000 fc5d 	bl	8010e14 <_calloc_r>
 801055a:	69e3      	ldr	r3, [r4, #28]
 801055c:	60f0      	str	r0, [r6, #12]
 801055e:	68db      	ldr	r3, [r3, #12]
 8010560:	2b00      	cmp	r3, #0
 8010562:	d1e4      	bne.n	801052e <_Balloc+0x2e>
 8010564:	2000      	movs	r0, #0
 8010566:	bd70      	pop	{r4, r5, r6, pc}
 8010568:	6802      	ldr	r2, [r0, #0]
 801056a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801056e:	2300      	movs	r3, #0
 8010570:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010574:	e7f7      	b.n	8010566 <_Balloc+0x66>
 8010576:	bf00      	nop
 8010578:	08012511 	.word	0x08012511
 801057c:	080125a2 	.word	0x080125a2

08010580 <_Bfree>:
 8010580:	b570      	push	{r4, r5, r6, lr}
 8010582:	69c6      	ldr	r6, [r0, #28]
 8010584:	4605      	mov	r5, r0
 8010586:	460c      	mov	r4, r1
 8010588:	b976      	cbnz	r6, 80105a8 <_Bfree+0x28>
 801058a:	2010      	movs	r0, #16
 801058c:	f7ff fe56 	bl	801023c <malloc>
 8010590:	4602      	mov	r2, r0
 8010592:	61e8      	str	r0, [r5, #28]
 8010594:	b920      	cbnz	r0, 80105a0 <_Bfree+0x20>
 8010596:	4b09      	ldr	r3, [pc, #36]	; (80105bc <_Bfree+0x3c>)
 8010598:	4809      	ldr	r0, [pc, #36]	; (80105c0 <_Bfree+0x40>)
 801059a:	218f      	movs	r1, #143	; 0x8f
 801059c:	f000 fc1c 	bl	8010dd8 <__assert_func>
 80105a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80105a4:	6006      	str	r6, [r0, #0]
 80105a6:	60c6      	str	r6, [r0, #12]
 80105a8:	b13c      	cbz	r4, 80105ba <_Bfree+0x3a>
 80105aa:	69eb      	ldr	r3, [r5, #28]
 80105ac:	6862      	ldr	r2, [r4, #4]
 80105ae:	68db      	ldr	r3, [r3, #12]
 80105b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80105b4:	6021      	str	r1, [r4, #0]
 80105b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80105ba:	bd70      	pop	{r4, r5, r6, pc}
 80105bc:	08012511 	.word	0x08012511
 80105c0:	080125a2 	.word	0x080125a2

080105c4 <__multadd>:
 80105c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105c8:	690d      	ldr	r5, [r1, #16]
 80105ca:	4607      	mov	r7, r0
 80105cc:	460c      	mov	r4, r1
 80105ce:	461e      	mov	r6, r3
 80105d0:	f101 0c14 	add.w	ip, r1, #20
 80105d4:	2000      	movs	r0, #0
 80105d6:	f8dc 3000 	ldr.w	r3, [ip]
 80105da:	b299      	uxth	r1, r3
 80105dc:	fb02 6101 	mla	r1, r2, r1, r6
 80105e0:	0c1e      	lsrs	r6, r3, #16
 80105e2:	0c0b      	lsrs	r3, r1, #16
 80105e4:	fb02 3306 	mla	r3, r2, r6, r3
 80105e8:	b289      	uxth	r1, r1
 80105ea:	3001      	adds	r0, #1
 80105ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80105f0:	4285      	cmp	r5, r0
 80105f2:	f84c 1b04 	str.w	r1, [ip], #4
 80105f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80105fa:	dcec      	bgt.n	80105d6 <__multadd+0x12>
 80105fc:	b30e      	cbz	r6, 8010642 <__multadd+0x7e>
 80105fe:	68a3      	ldr	r3, [r4, #8]
 8010600:	42ab      	cmp	r3, r5
 8010602:	dc19      	bgt.n	8010638 <__multadd+0x74>
 8010604:	6861      	ldr	r1, [r4, #4]
 8010606:	4638      	mov	r0, r7
 8010608:	3101      	adds	r1, #1
 801060a:	f7ff ff79 	bl	8010500 <_Balloc>
 801060e:	4680      	mov	r8, r0
 8010610:	b928      	cbnz	r0, 801061e <__multadd+0x5a>
 8010612:	4602      	mov	r2, r0
 8010614:	4b0c      	ldr	r3, [pc, #48]	; (8010648 <__multadd+0x84>)
 8010616:	480d      	ldr	r0, [pc, #52]	; (801064c <__multadd+0x88>)
 8010618:	21ba      	movs	r1, #186	; 0xba
 801061a:	f000 fbdd 	bl	8010dd8 <__assert_func>
 801061e:	6922      	ldr	r2, [r4, #16]
 8010620:	3202      	adds	r2, #2
 8010622:	f104 010c 	add.w	r1, r4, #12
 8010626:	0092      	lsls	r2, r2, #2
 8010628:	300c      	adds	r0, #12
 801062a:	f000 fbc7 	bl	8010dbc <memcpy>
 801062e:	4621      	mov	r1, r4
 8010630:	4638      	mov	r0, r7
 8010632:	f7ff ffa5 	bl	8010580 <_Bfree>
 8010636:	4644      	mov	r4, r8
 8010638:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801063c:	3501      	adds	r5, #1
 801063e:	615e      	str	r6, [r3, #20]
 8010640:	6125      	str	r5, [r4, #16]
 8010642:	4620      	mov	r0, r4
 8010644:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010648:	08012580 	.word	0x08012580
 801064c:	080125a2 	.word	0x080125a2

08010650 <__hi0bits>:
 8010650:	0c03      	lsrs	r3, r0, #16
 8010652:	041b      	lsls	r3, r3, #16
 8010654:	b9d3      	cbnz	r3, 801068c <__hi0bits+0x3c>
 8010656:	0400      	lsls	r0, r0, #16
 8010658:	2310      	movs	r3, #16
 801065a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801065e:	bf04      	itt	eq
 8010660:	0200      	lsleq	r0, r0, #8
 8010662:	3308      	addeq	r3, #8
 8010664:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010668:	bf04      	itt	eq
 801066a:	0100      	lsleq	r0, r0, #4
 801066c:	3304      	addeq	r3, #4
 801066e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010672:	bf04      	itt	eq
 8010674:	0080      	lsleq	r0, r0, #2
 8010676:	3302      	addeq	r3, #2
 8010678:	2800      	cmp	r0, #0
 801067a:	db05      	blt.n	8010688 <__hi0bits+0x38>
 801067c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010680:	f103 0301 	add.w	r3, r3, #1
 8010684:	bf08      	it	eq
 8010686:	2320      	moveq	r3, #32
 8010688:	4618      	mov	r0, r3
 801068a:	4770      	bx	lr
 801068c:	2300      	movs	r3, #0
 801068e:	e7e4      	b.n	801065a <__hi0bits+0xa>

08010690 <__lo0bits>:
 8010690:	6803      	ldr	r3, [r0, #0]
 8010692:	f013 0207 	ands.w	r2, r3, #7
 8010696:	d00c      	beq.n	80106b2 <__lo0bits+0x22>
 8010698:	07d9      	lsls	r1, r3, #31
 801069a:	d422      	bmi.n	80106e2 <__lo0bits+0x52>
 801069c:	079a      	lsls	r2, r3, #30
 801069e:	bf49      	itett	mi
 80106a0:	085b      	lsrmi	r3, r3, #1
 80106a2:	089b      	lsrpl	r3, r3, #2
 80106a4:	6003      	strmi	r3, [r0, #0]
 80106a6:	2201      	movmi	r2, #1
 80106a8:	bf5c      	itt	pl
 80106aa:	6003      	strpl	r3, [r0, #0]
 80106ac:	2202      	movpl	r2, #2
 80106ae:	4610      	mov	r0, r2
 80106b0:	4770      	bx	lr
 80106b2:	b299      	uxth	r1, r3
 80106b4:	b909      	cbnz	r1, 80106ba <__lo0bits+0x2a>
 80106b6:	0c1b      	lsrs	r3, r3, #16
 80106b8:	2210      	movs	r2, #16
 80106ba:	b2d9      	uxtb	r1, r3
 80106bc:	b909      	cbnz	r1, 80106c2 <__lo0bits+0x32>
 80106be:	3208      	adds	r2, #8
 80106c0:	0a1b      	lsrs	r3, r3, #8
 80106c2:	0719      	lsls	r1, r3, #28
 80106c4:	bf04      	itt	eq
 80106c6:	091b      	lsreq	r3, r3, #4
 80106c8:	3204      	addeq	r2, #4
 80106ca:	0799      	lsls	r1, r3, #30
 80106cc:	bf04      	itt	eq
 80106ce:	089b      	lsreq	r3, r3, #2
 80106d0:	3202      	addeq	r2, #2
 80106d2:	07d9      	lsls	r1, r3, #31
 80106d4:	d403      	bmi.n	80106de <__lo0bits+0x4e>
 80106d6:	085b      	lsrs	r3, r3, #1
 80106d8:	f102 0201 	add.w	r2, r2, #1
 80106dc:	d003      	beq.n	80106e6 <__lo0bits+0x56>
 80106de:	6003      	str	r3, [r0, #0]
 80106e0:	e7e5      	b.n	80106ae <__lo0bits+0x1e>
 80106e2:	2200      	movs	r2, #0
 80106e4:	e7e3      	b.n	80106ae <__lo0bits+0x1e>
 80106e6:	2220      	movs	r2, #32
 80106e8:	e7e1      	b.n	80106ae <__lo0bits+0x1e>
	...

080106ec <__i2b>:
 80106ec:	b510      	push	{r4, lr}
 80106ee:	460c      	mov	r4, r1
 80106f0:	2101      	movs	r1, #1
 80106f2:	f7ff ff05 	bl	8010500 <_Balloc>
 80106f6:	4602      	mov	r2, r0
 80106f8:	b928      	cbnz	r0, 8010706 <__i2b+0x1a>
 80106fa:	4b05      	ldr	r3, [pc, #20]	; (8010710 <__i2b+0x24>)
 80106fc:	4805      	ldr	r0, [pc, #20]	; (8010714 <__i2b+0x28>)
 80106fe:	f240 1145 	movw	r1, #325	; 0x145
 8010702:	f000 fb69 	bl	8010dd8 <__assert_func>
 8010706:	2301      	movs	r3, #1
 8010708:	6144      	str	r4, [r0, #20]
 801070a:	6103      	str	r3, [r0, #16]
 801070c:	bd10      	pop	{r4, pc}
 801070e:	bf00      	nop
 8010710:	08012580 	.word	0x08012580
 8010714:	080125a2 	.word	0x080125a2

08010718 <__multiply>:
 8010718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801071c:	4691      	mov	r9, r2
 801071e:	690a      	ldr	r2, [r1, #16]
 8010720:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010724:	429a      	cmp	r2, r3
 8010726:	bfb8      	it	lt
 8010728:	460b      	movlt	r3, r1
 801072a:	460c      	mov	r4, r1
 801072c:	bfbc      	itt	lt
 801072e:	464c      	movlt	r4, r9
 8010730:	4699      	movlt	r9, r3
 8010732:	6927      	ldr	r7, [r4, #16]
 8010734:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8010738:	68a3      	ldr	r3, [r4, #8]
 801073a:	6861      	ldr	r1, [r4, #4]
 801073c:	eb07 060a 	add.w	r6, r7, sl
 8010740:	42b3      	cmp	r3, r6
 8010742:	b085      	sub	sp, #20
 8010744:	bfb8      	it	lt
 8010746:	3101      	addlt	r1, #1
 8010748:	f7ff feda 	bl	8010500 <_Balloc>
 801074c:	b930      	cbnz	r0, 801075c <__multiply+0x44>
 801074e:	4602      	mov	r2, r0
 8010750:	4b44      	ldr	r3, [pc, #272]	; (8010864 <__multiply+0x14c>)
 8010752:	4845      	ldr	r0, [pc, #276]	; (8010868 <__multiply+0x150>)
 8010754:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8010758:	f000 fb3e 	bl	8010dd8 <__assert_func>
 801075c:	f100 0514 	add.w	r5, r0, #20
 8010760:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010764:	462b      	mov	r3, r5
 8010766:	2200      	movs	r2, #0
 8010768:	4543      	cmp	r3, r8
 801076a:	d321      	bcc.n	80107b0 <__multiply+0x98>
 801076c:	f104 0314 	add.w	r3, r4, #20
 8010770:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010774:	f109 0314 	add.w	r3, r9, #20
 8010778:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801077c:	9202      	str	r2, [sp, #8]
 801077e:	1b3a      	subs	r2, r7, r4
 8010780:	3a15      	subs	r2, #21
 8010782:	f022 0203 	bic.w	r2, r2, #3
 8010786:	3204      	adds	r2, #4
 8010788:	f104 0115 	add.w	r1, r4, #21
 801078c:	428f      	cmp	r7, r1
 801078e:	bf38      	it	cc
 8010790:	2204      	movcc	r2, #4
 8010792:	9201      	str	r2, [sp, #4]
 8010794:	9a02      	ldr	r2, [sp, #8]
 8010796:	9303      	str	r3, [sp, #12]
 8010798:	429a      	cmp	r2, r3
 801079a:	d80c      	bhi.n	80107b6 <__multiply+0x9e>
 801079c:	2e00      	cmp	r6, #0
 801079e:	dd03      	ble.n	80107a8 <__multiply+0x90>
 80107a0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d05b      	beq.n	8010860 <__multiply+0x148>
 80107a8:	6106      	str	r6, [r0, #16]
 80107aa:	b005      	add	sp, #20
 80107ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107b0:	f843 2b04 	str.w	r2, [r3], #4
 80107b4:	e7d8      	b.n	8010768 <__multiply+0x50>
 80107b6:	f8b3 a000 	ldrh.w	sl, [r3]
 80107ba:	f1ba 0f00 	cmp.w	sl, #0
 80107be:	d024      	beq.n	801080a <__multiply+0xf2>
 80107c0:	f104 0e14 	add.w	lr, r4, #20
 80107c4:	46a9      	mov	r9, r5
 80107c6:	f04f 0c00 	mov.w	ip, #0
 80107ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80107ce:	f8d9 1000 	ldr.w	r1, [r9]
 80107d2:	fa1f fb82 	uxth.w	fp, r2
 80107d6:	b289      	uxth	r1, r1
 80107d8:	fb0a 110b 	mla	r1, sl, fp, r1
 80107dc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80107e0:	f8d9 2000 	ldr.w	r2, [r9]
 80107e4:	4461      	add	r1, ip
 80107e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80107ea:	fb0a c20b 	mla	r2, sl, fp, ip
 80107ee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80107f2:	b289      	uxth	r1, r1
 80107f4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80107f8:	4577      	cmp	r7, lr
 80107fa:	f849 1b04 	str.w	r1, [r9], #4
 80107fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8010802:	d8e2      	bhi.n	80107ca <__multiply+0xb2>
 8010804:	9a01      	ldr	r2, [sp, #4]
 8010806:	f845 c002 	str.w	ip, [r5, r2]
 801080a:	9a03      	ldr	r2, [sp, #12]
 801080c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8010810:	3304      	adds	r3, #4
 8010812:	f1b9 0f00 	cmp.w	r9, #0
 8010816:	d021      	beq.n	801085c <__multiply+0x144>
 8010818:	6829      	ldr	r1, [r5, #0]
 801081a:	f104 0c14 	add.w	ip, r4, #20
 801081e:	46ae      	mov	lr, r5
 8010820:	f04f 0a00 	mov.w	sl, #0
 8010824:	f8bc b000 	ldrh.w	fp, [ip]
 8010828:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801082c:	fb09 220b 	mla	r2, r9, fp, r2
 8010830:	4452      	add	r2, sl
 8010832:	b289      	uxth	r1, r1
 8010834:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8010838:	f84e 1b04 	str.w	r1, [lr], #4
 801083c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010840:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010844:	f8be 1000 	ldrh.w	r1, [lr]
 8010848:	fb09 110a 	mla	r1, r9, sl, r1
 801084c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8010850:	4567      	cmp	r7, ip
 8010852:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010856:	d8e5      	bhi.n	8010824 <__multiply+0x10c>
 8010858:	9a01      	ldr	r2, [sp, #4]
 801085a:	50a9      	str	r1, [r5, r2]
 801085c:	3504      	adds	r5, #4
 801085e:	e799      	b.n	8010794 <__multiply+0x7c>
 8010860:	3e01      	subs	r6, #1
 8010862:	e79b      	b.n	801079c <__multiply+0x84>
 8010864:	08012580 	.word	0x08012580
 8010868:	080125a2 	.word	0x080125a2

0801086c <__pow5mult>:
 801086c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010870:	4615      	mov	r5, r2
 8010872:	f012 0203 	ands.w	r2, r2, #3
 8010876:	4606      	mov	r6, r0
 8010878:	460f      	mov	r7, r1
 801087a:	d007      	beq.n	801088c <__pow5mult+0x20>
 801087c:	4c25      	ldr	r4, [pc, #148]	; (8010914 <__pow5mult+0xa8>)
 801087e:	3a01      	subs	r2, #1
 8010880:	2300      	movs	r3, #0
 8010882:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010886:	f7ff fe9d 	bl	80105c4 <__multadd>
 801088a:	4607      	mov	r7, r0
 801088c:	10ad      	asrs	r5, r5, #2
 801088e:	d03d      	beq.n	801090c <__pow5mult+0xa0>
 8010890:	69f4      	ldr	r4, [r6, #28]
 8010892:	b97c      	cbnz	r4, 80108b4 <__pow5mult+0x48>
 8010894:	2010      	movs	r0, #16
 8010896:	f7ff fcd1 	bl	801023c <malloc>
 801089a:	4602      	mov	r2, r0
 801089c:	61f0      	str	r0, [r6, #28]
 801089e:	b928      	cbnz	r0, 80108ac <__pow5mult+0x40>
 80108a0:	4b1d      	ldr	r3, [pc, #116]	; (8010918 <__pow5mult+0xac>)
 80108a2:	481e      	ldr	r0, [pc, #120]	; (801091c <__pow5mult+0xb0>)
 80108a4:	f240 11b3 	movw	r1, #435	; 0x1b3
 80108a8:	f000 fa96 	bl	8010dd8 <__assert_func>
 80108ac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80108b0:	6004      	str	r4, [r0, #0]
 80108b2:	60c4      	str	r4, [r0, #12]
 80108b4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80108b8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80108bc:	b94c      	cbnz	r4, 80108d2 <__pow5mult+0x66>
 80108be:	f240 2171 	movw	r1, #625	; 0x271
 80108c2:	4630      	mov	r0, r6
 80108c4:	f7ff ff12 	bl	80106ec <__i2b>
 80108c8:	2300      	movs	r3, #0
 80108ca:	f8c8 0008 	str.w	r0, [r8, #8]
 80108ce:	4604      	mov	r4, r0
 80108d0:	6003      	str	r3, [r0, #0]
 80108d2:	f04f 0900 	mov.w	r9, #0
 80108d6:	07eb      	lsls	r3, r5, #31
 80108d8:	d50a      	bpl.n	80108f0 <__pow5mult+0x84>
 80108da:	4639      	mov	r1, r7
 80108dc:	4622      	mov	r2, r4
 80108de:	4630      	mov	r0, r6
 80108e0:	f7ff ff1a 	bl	8010718 <__multiply>
 80108e4:	4639      	mov	r1, r7
 80108e6:	4680      	mov	r8, r0
 80108e8:	4630      	mov	r0, r6
 80108ea:	f7ff fe49 	bl	8010580 <_Bfree>
 80108ee:	4647      	mov	r7, r8
 80108f0:	106d      	asrs	r5, r5, #1
 80108f2:	d00b      	beq.n	801090c <__pow5mult+0xa0>
 80108f4:	6820      	ldr	r0, [r4, #0]
 80108f6:	b938      	cbnz	r0, 8010908 <__pow5mult+0x9c>
 80108f8:	4622      	mov	r2, r4
 80108fa:	4621      	mov	r1, r4
 80108fc:	4630      	mov	r0, r6
 80108fe:	f7ff ff0b 	bl	8010718 <__multiply>
 8010902:	6020      	str	r0, [r4, #0]
 8010904:	f8c0 9000 	str.w	r9, [r0]
 8010908:	4604      	mov	r4, r0
 801090a:	e7e4      	b.n	80108d6 <__pow5mult+0x6a>
 801090c:	4638      	mov	r0, r7
 801090e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010912:	bf00      	nop
 8010914:	080126f0 	.word	0x080126f0
 8010918:	08012511 	.word	0x08012511
 801091c:	080125a2 	.word	0x080125a2

08010920 <__lshift>:
 8010920:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010924:	460c      	mov	r4, r1
 8010926:	6849      	ldr	r1, [r1, #4]
 8010928:	6923      	ldr	r3, [r4, #16]
 801092a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801092e:	68a3      	ldr	r3, [r4, #8]
 8010930:	4607      	mov	r7, r0
 8010932:	4691      	mov	r9, r2
 8010934:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010938:	f108 0601 	add.w	r6, r8, #1
 801093c:	42b3      	cmp	r3, r6
 801093e:	db0b      	blt.n	8010958 <__lshift+0x38>
 8010940:	4638      	mov	r0, r7
 8010942:	f7ff fddd 	bl	8010500 <_Balloc>
 8010946:	4605      	mov	r5, r0
 8010948:	b948      	cbnz	r0, 801095e <__lshift+0x3e>
 801094a:	4602      	mov	r2, r0
 801094c:	4b28      	ldr	r3, [pc, #160]	; (80109f0 <__lshift+0xd0>)
 801094e:	4829      	ldr	r0, [pc, #164]	; (80109f4 <__lshift+0xd4>)
 8010950:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8010954:	f000 fa40 	bl	8010dd8 <__assert_func>
 8010958:	3101      	adds	r1, #1
 801095a:	005b      	lsls	r3, r3, #1
 801095c:	e7ee      	b.n	801093c <__lshift+0x1c>
 801095e:	2300      	movs	r3, #0
 8010960:	f100 0114 	add.w	r1, r0, #20
 8010964:	f100 0210 	add.w	r2, r0, #16
 8010968:	4618      	mov	r0, r3
 801096a:	4553      	cmp	r3, sl
 801096c:	db33      	blt.n	80109d6 <__lshift+0xb6>
 801096e:	6920      	ldr	r0, [r4, #16]
 8010970:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010974:	f104 0314 	add.w	r3, r4, #20
 8010978:	f019 091f 	ands.w	r9, r9, #31
 801097c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010980:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010984:	d02b      	beq.n	80109de <__lshift+0xbe>
 8010986:	f1c9 0e20 	rsb	lr, r9, #32
 801098a:	468a      	mov	sl, r1
 801098c:	2200      	movs	r2, #0
 801098e:	6818      	ldr	r0, [r3, #0]
 8010990:	fa00 f009 	lsl.w	r0, r0, r9
 8010994:	4310      	orrs	r0, r2
 8010996:	f84a 0b04 	str.w	r0, [sl], #4
 801099a:	f853 2b04 	ldr.w	r2, [r3], #4
 801099e:	459c      	cmp	ip, r3
 80109a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80109a4:	d8f3      	bhi.n	801098e <__lshift+0x6e>
 80109a6:	ebac 0304 	sub.w	r3, ip, r4
 80109aa:	3b15      	subs	r3, #21
 80109ac:	f023 0303 	bic.w	r3, r3, #3
 80109b0:	3304      	adds	r3, #4
 80109b2:	f104 0015 	add.w	r0, r4, #21
 80109b6:	4584      	cmp	ip, r0
 80109b8:	bf38      	it	cc
 80109ba:	2304      	movcc	r3, #4
 80109bc:	50ca      	str	r2, [r1, r3]
 80109be:	b10a      	cbz	r2, 80109c4 <__lshift+0xa4>
 80109c0:	f108 0602 	add.w	r6, r8, #2
 80109c4:	3e01      	subs	r6, #1
 80109c6:	4638      	mov	r0, r7
 80109c8:	612e      	str	r6, [r5, #16]
 80109ca:	4621      	mov	r1, r4
 80109cc:	f7ff fdd8 	bl	8010580 <_Bfree>
 80109d0:	4628      	mov	r0, r5
 80109d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80109da:	3301      	adds	r3, #1
 80109dc:	e7c5      	b.n	801096a <__lshift+0x4a>
 80109de:	3904      	subs	r1, #4
 80109e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80109e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80109e8:	459c      	cmp	ip, r3
 80109ea:	d8f9      	bhi.n	80109e0 <__lshift+0xc0>
 80109ec:	e7ea      	b.n	80109c4 <__lshift+0xa4>
 80109ee:	bf00      	nop
 80109f0:	08012580 	.word	0x08012580
 80109f4:	080125a2 	.word	0x080125a2

080109f8 <__mcmp>:
 80109f8:	b530      	push	{r4, r5, lr}
 80109fa:	6902      	ldr	r2, [r0, #16]
 80109fc:	690c      	ldr	r4, [r1, #16]
 80109fe:	1b12      	subs	r2, r2, r4
 8010a00:	d10e      	bne.n	8010a20 <__mcmp+0x28>
 8010a02:	f100 0314 	add.w	r3, r0, #20
 8010a06:	3114      	adds	r1, #20
 8010a08:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8010a0c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8010a10:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8010a14:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8010a18:	42a5      	cmp	r5, r4
 8010a1a:	d003      	beq.n	8010a24 <__mcmp+0x2c>
 8010a1c:	d305      	bcc.n	8010a2a <__mcmp+0x32>
 8010a1e:	2201      	movs	r2, #1
 8010a20:	4610      	mov	r0, r2
 8010a22:	bd30      	pop	{r4, r5, pc}
 8010a24:	4283      	cmp	r3, r0
 8010a26:	d3f3      	bcc.n	8010a10 <__mcmp+0x18>
 8010a28:	e7fa      	b.n	8010a20 <__mcmp+0x28>
 8010a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010a2e:	e7f7      	b.n	8010a20 <__mcmp+0x28>

08010a30 <__mdiff>:
 8010a30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a34:	460c      	mov	r4, r1
 8010a36:	4606      	mov	r6, r0
 8010a38:	4611      	mov	r1, r2
 8010a3a:	4620      	mov	r0, r4
 8010a3c:	4690      	mov	r8, r2
 8010a3e:	f7ff ffdb 	bl	80109f8 <__mcmp>
 8010a42:	1e05      	subs	r5, r0, #0
 8010a44:	d110      	bne.n	8010a68 <__mdiff+0x38>
 8010a46:	4629      	mov	r1, r5
 8010a48:	4630      	mov	r0, r6
 8010a4a:	f7ff fd59 	bl	8010500 <_Balloc>
 8010a4e:	b930      	cbnz	r0, 8010a5e <__mdiff+0x2e>
 8010a50:	4b3a      	ldr	r3, [pc, #232]	; (8010b3c <__mdiff+0x10c>)
 8010a52:	4602      	mov	r2, r0
 8010a54:	f240 2137 	movw	r1, #567	; 0x237
 8010a58:	4839      	ldr	r0, [pc, #228]	; (8010b40 <__mdiff+0x110>)
 8010a5a:	f000 f9bd 	bl	8010dd8 <__assert_func>
 8010a5e:	2301      	movs	r3, #1
 8010a60:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010a64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a68:	bfa4      	itt	ge
 8010a6a:	4643      	movge	r3, r8
 8010a6c:	46a0      	movge	r8, r4
 8010a6e:	4630      	mov	r0, r6
 8010a70:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010a74:	bfa6      	itte	ge
 8010a76:	461c      	movge	r4, r3
 8010a78:	2500      	movge	r5, #0
 8010a7a:	2501      	movlt	r5, #1
 8010a7c:	f7ff fd40 	bl	8010500 <_Balloc>
 8010a80:	b920      	cbnz	r0, 8010a8c <__mdiff+0x5c>
 8010a82:	4b2e      	ldr	r3, [pc, #184]	; (8010b3c <__mdiff+0x10c>)
 8010a84:	4602      	mov	r2, r0
 8010a86:	f240 2145 	movw	r1, #581	; 0x245
 8010a8a:	e7e5      	b.n	8010a58 <__mdiff+0x28>
 8010a8c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010a90:	6926      	ldr	r6, [r4, #16]
 8010a92:	60c5      	str	r5, [r0, #12]
 8010a94:	f104 0914 	add.w	r9, r4, #20
 8010a98:	f108 0514 	add.w	r5, r8, #20
 8010a9c:	f100 0e14 	add.w	lr, r0, #20
 8010aa0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010aa4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010aa8:	f108 0210 	add.w	r2, r8, #16
 8010aac:	46f2      	mov	sl, lr
 8010aae:	2100      	movs	r1, #0
 8010ab0:	f859 3b04 	ldr.w	r3, [r9], #4
 8010ab4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010ab8:	fa11 f88b 	uxtah	r8, r1, fp
 8010abc:	b299      	uxth	r1, r3
 8010abe:	0c1b      	lsrs	r3, r3, #16
 8010ac0:	eba8 0801 	sub.w	r8, r8, r1
 8010ac4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8010ac8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8010acc:	fa1f f888 	uxth.w	r8, r8
 8010ad0:	1419      	asrs	r1, r3, #16
 8010ad2:	454e      	cmp	r6, r9
 8010ad4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8010ad8:	f84a 3b04 	str.w	r3, [sl], #4
 8010adc:	d8e8      	bhi.n	8010ab0 <__mdiff+0x80>
 8010ade:	1b33      	subs	r3, r6, r4
 8010ae0:	3b15      	subs	r3, #21
 8010ae2:	f023 0303 	bic.w	r3, r3, #3
 8010ae6:	3304      	adds	r3, #4
 8010ae8:	3415      	adds	r4, #21
 8010aea:	42a6      	cmp	r6, r4
 8010aec:	bf38      	it	cc
 8010aee:	2304      	movcc	r3, #4
 8010af0:	441d      	add	r5, r3
 8010af2:	4473      	add	r3, lr
 8010af4:	469e      	mov	lr, r3
 8010af6:	462e      	mov	r6, r5
 8010af8:	4566      	cmp	r6, ip
 8010afa:	d30e      	bcc.n	8010b1a <__mdiff+0xea>
 8010afc:	f10c 0203 	add.w	r2, ip, #3
 8010b00:	1b52      	subs	r2, r2, r5
 8010b02:	f022 0203 	bic.w	r2, r2, #3
 8010b06:	3d03      	subs	r5, #3
 8010b08:	45ac      	cmp	ip, r5
 8010b0a:	bf38      	it	cc
 8010b0c:	2200      	movcc	r2, #0
 8010b0e:	4413      	add	r3, r2
 8010b10:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8010b14:	b17a      	cbz	r2, 8010b36 <__mdiff+0x106>
 8010b16:	6107      	str	r7, [r0, #16]
 8010b18:	e7a4      	b.n	8010a64 <__mdiff+0x34>
 8010b1a:	f856 8b04 	ldr.w	r8, [r6], #4
 8010b1e:	fa11 f288 	uxtah	r2, r1, r8
 8010b22:	1414      	asrs	r4, r2, #16
 8010b24:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010b28:	b292      	uxth	r2, r2
 8010b2a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8010b2e:	f84e 2b04 	str.w	r2, [lr], #4
 8010b32:	1421      	asrs	r1, r4, #16
 8010b34:	e7e0      	b.n	8010af8 <__mdiff+0xc8>
 8010b36:	3f01      	subs	r7, #1
 8010b38:	e7ea      	b.n	8010b10 <__mdiff+0xe0>
 8010b3a:	bf00      	nop
 8010b3c:	08012580 	.word	0x08012580
 8010b40:	080125a2 	.word	0x080125a2

08010b44 <__d2b>:
 8010b44:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010b48:	460f      	mov	r7, r1
 8010b4a:	2101      	movs	r1, #1
 8010b4c:	ec59 8b10 	vmov	r8, r9, d0
 8010b50:	4616      	mov	r6, r2
 8010b52:	f7ff fcd5 	bl	8010500 <_Balloc>
 8010b56:	4604      	mov	r4, r0
 8010b58:	b930      	cbnz	r0, 8010b68 <__d2b+0x24>
 8010b5a:	4602      	mov	r2, r0
 8010b5c:	4b24      	ldr	r3, [pc, #144]	; (8010bf0 <__d2b+0xac>)
 8010b5e:	4825      	ldr	r0, [pc, #148]	; (8010bf4 <__d2b+0xb0>)
 8010b60:	f240 310f 	movw	r1, #783	; 0x30f
 8010b64:	f000 f938 	bl	8010dd8 <__assert_func>
 8010b68:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010b6c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010b70:	bb2d      	cbnz	r5, 8010bbe <__d2b+0x7a>
 8010b72:	9301      	str	r3, [sp, #4]
 8010b74:	f1b8 0300 	subs.w	r3, r8, #0
 8010b78:	d026      	beq.n	8010bc8 <__d2b+0x84>
 8010b7a:	4668      	mov	r0, sp
 8010b7c:	9300      	str	r3, [sp, #0]
 8010b7e:	f7ff fd87 	bl	8010690 <__lo0bits>
 8010b82:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010b86:	b1e8      	cbz	r0, 8010bc4 <__d2b+0x80>
 8010b88:	f1c0 0320 	rsb	r3, r0, #32
 8010b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8010b90:	430b      	orrs	r3, r1
 8010b92:	40c2      	lsrs	r2, r0
 8010b94:	6163      	str	r3, [r4, #20]
 8010b96:	9201      	str	r2, [sp, #4]
 8010b98:	9b01      	ldr	r3, [sp, #4]
 8010b9a:	61a3      	str	r3, [r4, #24]
 8010b9c:	2b00      	cmp	r3, #0
 8010b9e:	bf14      	ite	ne
 8010ba0:	2202      	movne	r2, #2
 8010ba2:	2201      	moveq	r2, #1
 8010ba4:	6122      	str	r2, [r4, #16]
 8010ba6:	b1bd      	cbz	r5, 8010bd8 <__d2b+0x94>
 8010ba8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010bac:	4405      	add	r5, r0
 8010bae:	603d      	str	r5, [r7, #0]
 8010bb0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010bb4:	6030      	str	r0, [r6, #0]
 8010bb6:	4620      	mov	r0, r4
 8010bb8:	b003      	add	sp, #12
 8010bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010bbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010bc2:	e7d6      	b.n	8010b72 <__d2b+0x2e>
 8010bc4:	6161      	str	r1, [r4, #20]
 8010bc6:	e7e7      	b.n	8010b98 <__d2b+0x54>
 8010bc8:	a801      	add	r0, sp, #4
 8010bca:	f7ff fd61 	bl	8010690 <__lo0bits>
 8010bce:	9b01      	ldr	r3, [sp, #4]
 8010bd0:	6163      	str	r3, [r4, #20]
 8010bd2:	3020      	adds	r0, #32
 8010bd4:	2201      	movs	r2, #1
 8010bd6:	e7e5      	b.n	8010ba4 <__d2b+0x60>
 8010bd8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010bdc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8010be0:	6038      	str	r0, [r7, #0]
 8010be2:	6918      	ldr	r0, [r3, #16]
 8010be4:	f7ff fd34 	bl	8010650 <__hi0bits>
 8010be8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010bec:	e7e2      	b.n	8010bb4 <__d2b+0x70>
 8010bee:	bf00      	nop
 8010bf0:	08012580 	.word	0x08012580
 8010bf4:	080125a2 	.word	0x080125a2

08010bf8 <__sread>:
 8010bf8:	b510      	push	{r4, lr}
 8010bfa:	460c      	mov	r4, r1
 8010bfc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c00:	f000 f8a8 	bl	8010d54 <_read_r>
 8010c04:	2800      	cmp	r0, #0
 8010c06:	bfab      	itete	ge
 8010c08:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010c0a:	89a3      	ldrhlt	r3, [r4, #12]
 8010c0c:	181b      	addge	r3, r3, r0
 8010c0e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010c12:	bfac      	ite	ge
 8010c14:	6563      	strge	r3, [r4, #84]	; 0x54
 8010c16:	81a3      	strhlt	r3, [r4, #12]
 8010c18:	bd10      	pop	{r4, pc}

08010c1a <__swrite>:
 8010c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c1e:	461f      	mov	r7, r3
 8010c20:	898b      	ldrh	r3, [r1, #12]
 8010c22:	05db      	lsls	r3, r3, #23
 8010c24:	4605      	mov	r5, r0
 8010c26:	460c      	mov	r4, r1
 8010c28:	4616      	mov	r6, r2
 8010c2a:	d505      	bpl.n	8010c38 <__swrite+0x1e>
 8010c2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c30:	2302      	movs	r3, #2
 8010c32:	2200      	movs	r2, #0
 8010c34:	f000 f87c 	bl	8010d30 <_lseek_r>
 8010c38:	89a3      	ldrh	r3, [r4, #12]
 8010c3a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c3e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010c42:	81a3      	strh	r3, [r4, #12]
 8010c44:	4632      	mov	r2, r6
 8010c46:	463b      	mov	r3, r7
 8010c48:	4628      	mov	r0, r5
 8010c4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c4e:	f000 b8a3 	b.w	8010d98 <_write_r>

08010c52 <__sseek>:
 8010c52:	b510      	push	{r4, lr}
 8010c54:	460c      	mov	r4, r1
 8010c56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c5a:	f000 f869 	bl	8010d30 <_lseek_r>
 8010c5e:	1c43      	adds	r3, r0, #1
 8010c60:	89a3      	ldrh	r3, [r4, #12]
 8010c62:	bf15      	itete	ne
 8010c64:	6560      	strne	r0, [r4, #84]	; 0x54
 8010c66:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010c6a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010c6e:	81a3      	strheq	r3, [r4, #12]
 8010c70:	bf18      	it	ne
 8010c72:	81a3      	strhne	r3, [r4, #12]
 8010c74:	bd10      	pop	{r4, pc}

08010c76 <__sclose>:
 8010c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c7a:	f000 b849 	b.w	8010d10 <_close_r>

08010c7e <_realloc_r>:
 8010c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c82:	4680      	mov	r8, r0
 8010c84:	4614      	mov	r4, r2
 8010c86:	460e      	mov	r6, r1
 8010c88:	b921      	cbnz	r1, 8010c94 <_realloc_r+0x16>
 8010c8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c8e:	4611      	mov	r1, r2
 8010c90:	f7ff bafc 	b.w	801028c <_malloc_r>
 8010c94:	b92a      	cbnz	r2, 8010ca2 <_realloc_r+0x24>
 8010c96:	f000 f8d3 	bl	8010e40 <_free_r>
 8010c9a:	4625      	mov	r5, r4
 8010c9c:	4628      	mov	r0, r5
 8010c9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ca2:	f000 f92b 	bl	8010efc <_malloc_usable_size_r>
 8010ca6:	4284      	cmp	r4, r0
 8010ca8:	4607      	mov	r7, r0
 8010caa:	d802      	bhi.n	8010cb2 <_realloc_r+0x34>
 8010cac:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010cb0:	d812      	bhi.n	8010cd8 <_realloc_r+0x5a>
 8010cb2:	4621      	mov	r1, r4
 8010cb4:	4640      	mov	r0, r8
 8010cb6:	f7ff fae9 	bl	801028c <_malloc_r>
 8010cba:	4605      	mov	r5, r0
 8010cbc:	2800      	cmp	r0, #0
 8010cbe:	d0ed      	beq.n	8010c9c <_realloc_r+0x1e>
 8010cc0:	42bc      	cmp	r4, r7
 8010cc2:	4622      	mov	r2, r4
 8010cc4:	4631      	mov	r1, r6
 8010cc6:	bf28      	it	cs
 8010cc8:	463a      	movcs	r2, r7
 8010cca:	f000 f877 	bl	8010dbc <memcpy>
 8010cce:	4631      	mov	r1, r6
 8010cd0:	4640      	mov	r0, r8
 8010cd2:	f000 f8b5 	bl	8010e40 <_free_r>
 8010cd6:	e7e1      	b.n	8010c9c <_realloc_r+0x1e>
 8010cd8:	4635      	mov	r5, r6
 8010cda:	e7df      	b.n	8010c9c <_realloc_r+0x1e>

08010cdc <memmove>:
 8010cdc:	4288      	cmp	r0, r1
 8010cde:	b510      	push	{r4, lr}
 8010ce0:	eb01 0402 	add.w	r4, r1, r2
 8010ce4:	d902      	bls.n	8010cec <memmove+0x10>
 8010ce6:	4284      	cmp	r4, r0
 8010ce8:	4623      	mov	r3, r4
 8010cea:	d807      	bhi.n	8010cfc <memmove+0x20>
 8010cec:	1e43      	subs	r3, r0, #1
 8010cee:	42a1      	cmp	r1, r4
 8010cf0:	d008      	beq.n	8010d04 <memmove+0x28>
 8010cf2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010cf6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010cfa:	e7f8      	b.n	8010cee <memmove+0x12>
 8010cfc:	4402      	add	r2, r0
 8010cfe:	4601      	mov	r1, r0
 8010d00:	428a      	cmp	r2, r1
 8010d02:	d100      	bne.n	8010d06 <memmove+0x2a>
 8010d04:	bd10      	pop	{r4, pc}
 8010d06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010d0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010d0e:	e7f7      	b.n	8010d00 <memmove+0x24>

08010d10 <_close_r>:
 8010d10:	b538      	push	{r3, r4, r5, lr}
 8010d12:	4d06      	ldr	r5, [pc, #24]	; (8010d2c <_close_r+0x1c>)
 8010d14:	2300      	movs	r3, #0
 8010d16:	4604      	mov	r4, r0
 8010d18:	4608      	mov	r0, r1
 8010d1a:	602b      	str	r3, [r5, #0]
 8010d1c:	f7f1 fe95 	bl	8002a4a <_close>
 8010d20:	1c43      	adds	r3, r0, #1
 8010d22:	d102      	bne.n	8010d2a <_close_r+0x1a>
 8010d24:	682b      	ldr	r3, [r5, #0]
 8010d26:	b103      	cbz	r3, 8010d2a <_close_r+0x1a>
 8010d28:	6023      	str	r3, [r4, #0]
 8010d2a:	bd38      	pop	{r3, r4, r5, pc}
 8010d2c:	200023bc 	.word	0x200023bc

08010d30 <_lseek_r>:
 8010d30:	b538      	push	{r3, r4, r5, lr}
 8010d32:	4d07      	ldr	r5, [pc, #28]	; (8010d50 <_lseek_r+0x20>)
 8010d34:	4604      	mov	r4, r0
 8010d36:	4608      	mov	r0, r1
 8010d38:	4611      	mov	r1, r2
 8010d3a:	2200      	movs	r2, #0
 8010d3c:	602a      	str	r2, [r5, #0]
 8010d3e:	461a      	mov	r2, r3
 8010d40:	f7f1 feaa 	bl	8002a98 <_lseek>
 8010d44:	1c43      	adds	r3, r0, #1
 8010d46:	d102      	bne.n	8010d4e <_lseek_r+0x1e>
 8010d48:	682b      	ldr	r3, [r5, #0]
 8010d4a:	b103      	cbz	r3, 8010d4e <_lseek_r+0x1e>
 8010d4c:	6023      	str	r3, [r4, #0]
 8010d4e:	bd38      	pop	{r3, r4, r5, pc}
 8010d50:	200023bc 	.word	0x200023bc

08010d54 <_read_r>:
 8010d54:	b538      	push	{r3, r4, r5, lr}
 8010d56:	4d07      	ldr	r5, [pc, #28]	; (8010d74 <_read_r+0x20>)
 8010d58:	4604      	mov	r4, r0
 8010d5a:	4608      	mov	r0, r1
 8010d5c:	4611      	mov	r1, r2
 8010d5e:	2200      	movs	r2, #0
 8010d60:	602a      	str	r2, [r5, #0]
 8010d62:	461a      	mov	r2, r3
 8010d64:	f7f1 fe38 	bl	80029d8 <_read>
 8010d68:	1c43      	adds	r3, r0, #1
 8010d6a:	d102      	bne.n	8010d72 <_read_r+0x1e>
 8010d6c:	682b      	ldr	r3, [r5, #0]
 8010d6e:	b103      	cbz	r3, 8010d72 <_read_r+0x1e>
 8010d70:	6023      	str	r3, [r4, #0]
 8010d72:	bd38      	pop	{r3, r4, r5, pc}
 8010d74:	200023bc 	.word	0x200023bc

08010d78 <_sbrk_r>:
 8010d78:	b538      	push	{r3, r4, r5, lr}
 8010d7a:	4d06      	ldr	r5, [pc, #24]	; (8010d94 <_sbrk_r+0x1c>)
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	4604      	mov	r4, r0
 8010d80:	4608      	mov	r0, r1
 8010d82:	602b      	str	r3, [r5, #0]
 8010d84:	f7f1 fe96 	bl	8002ab4 <_sbrk>
 8010d88:	1c43      	adds	r3, r0, #1
 8010d8a:	d102      	bne.n	8010d92 <_sbrk_r+0x1a>
 8010d8c:	682b      	ldr	r3, [r5, #0]
 8010d8e:	b103      	cbz	r3, 8010d92 <_sbrk_r+0x1a>
 8010d90:	6023      	str	r3, [r4, #0]
 8010d92:	bd38      	pop	{r3, r4, r5, pc}
 8010d94:	200023bc 	.word	0x200023bc

08010d98 <_write_r>:
 8010d98:	b538      	push	{r3, r4, r5, lr}
 8010d9a:	4d07      	ldr	r5, [pc, #28]	; (8010db8 <_write_r+0x20>)
 8010d9c:	4604      	mov	r4, r0
 8010d9e:	4608      	mov	r0, r1
 8010da0:	4611      	mov	r1, r2
 8010da2:	2200      	movs	r2, #0
 8010da4:	602a      	str	r2, [r5, #0]
 8010da6:	461a      	mov	r2, r3
 8010da8:	f7f1 fe33 	bl	8002a12 <_write>
 8010dac:	1c43      	adds	r3, r0, #1
 8010dae:	d102      	bne.n	8010db6 <_write_r+0x1e>
 8010db0:	682b      	ldr	r3, [r5, #0]
 8010db2:	b103      	cbz	r3, 8010db6 <_write_r+0x1e>
 8010db4:	6023      	str	r3, [r4, #0]
 8010db6:	bd38      	pop	{r3, r4, r5, pc}
 8010db8:	200023bc 	.word	0x200023bc

08010dbc <memcpy>:
 8010dbc:	440a      	add	r2, r1
 8010dbe:	4291      	cmp	r1, r2
 8010dc0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8010dc4:	d100      	bne.n	8010dc8 <memcpy+0xc>
 8010dc6:	4770      	bx	lr
 8010dc8:	b510      	push	{r4, lr}
 8010dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010dce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010dd2:	4291      	cmp	r1, r2
 8010dd4:	d1f9      	bne.n	8010dca <memcpy+0xe>
 8010dd6:	bd10      	pop	{r4, pc}

08010dd8 <__assert_func>:
 8010dd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010dda:	4614      	mov	r4, r2
 8010ddc:	461a      	mov	r2, r3
 8010dde:	4b09      	ldr	r3, [pc, #36]	; (8010e04 <__assert_func+0x2c>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	4605      	mov	r5, r0
 8010de4:	68d8      	ldr	r0, [r3, #12]
 8010de6:	b14c      	cbz	r4, 8010dfc <__assert_func+0x24>
 8010de8:	4b07      	ldr	r3, [pc, #28]	; (8010e08 <__assert_func+0x30>)
 8010dea:	9100      	str	r1, [sp, #0]
 8010dec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010df0:	4906      	ldr	r1, [pc, #24]	; (8010e0c <__assert_func+0x34>)
 8010df2:	462b      	mov	r3, r5
 8010df4:	f000 f88a 	bl	8010f0c <fiprintf>
 8010df8:	f000 f8a7 	bl	8010f4a <abort>
 8010dfc:	4b04      	ldr	r3, [pc, #16]	; (8010e10 <__assert_func+0x38>)
 8010dfe:	461c      	mov	r4, r3
 8010e00:	e7f3      	b.n	8010dea <__assert_func+0x12>
 8010e02:	bf00      	nop
 8010e04:	20000154 	.word	0x20000154
 8010e08:	08012807 	.word	0x08012807
 8010e0c:	08012814 	.word	0x08012814
 8010e10:	08012842 	.word	0x08012842

08010e14 <_calloc_r>:
 8010e14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010e16:	fba1 2402 	umull	r2, r4, r1, r2
 8010e1a:	b94c      	cbnz	r4, 8010e30 <_calloc_r+0x1c>
 8010e1c:	4611      	mov	r1, r2
 8010e1e:	9201      	str	r2, [sp, #4]
 8010e20:	f7ff fa34 	bl	801028c <_malloc_r>
 8010e24:	9a01      	ldr	r2, [sp, #4]
 8010e26:	4605      	mov	r5, r0
 8010e28:	b930      	cbnz	r0, 8010e38 <_calloc_r+0x24>
 8010e2a:	4628      	mov	r0, r5
 8010e2c:	b003      	add	sp, #12
 8010e2e:	bd30      	pop	{r4, r5, pc}
 8010e30:	220c      	movs	r2, #12
 8010e32:	6002      	str	r2, [r0, #0]
 8010e34:	2500      	movs	r5, #0
 8010e36:	e7f8      	b.n	8010e2a <_calloc_r+0x16>
 8010e38:	4621      	mov	r1, r4
 8010e3a:	f7fe f9f3 	bl	800f224 <memset>
 8010e3e:	e7f4      	b.n	8010e2a <_calloc_r+0x16>

08010e40 <_free_r>:
 8010e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010e42:	2900      	cmp	r1, #0
 8010e44:	d044      	beq.n	8010ed0 <_free_r+0x90>
 8010e46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010e4a:	9001      	str	r0, [sp, #4]
 8010e4c:	2b00      	cmp	r3, #0
 8010e4e:	f1a1 0404 	sub.w	r4, r1, #4
 8010e52:	bfb8      	it	lt
 8010e54:	18e4      	addlt	r4, r4, r3
 8010e56:	f7ff fb47 	bl	80104e8 <__malloc_lock>
 8010e5a:	4a1e      	ldr	r2, [pc, #120]	; (8010ed4 <_free_r+0x94>)
 8010e5c:	9801      	ldr	r0, [sp, #4]
 8010e5e:	6813      	ldr	r3, [r2, #0]
 8010e60:	b933      	cbnz	r3, 8010e70 <_free_r+0x30>
 8010e62:	6063      	str	r3, [r4, #4]
 8010e64:	6014      	str	r4, [r2, #0]
 8010e66:	b003      	add	sp, #12
 8010e68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010e6c:	f7ff bb42 	b.w	80104f4 <__malloc_unlock>
 8010e70:	42a3      	cmp	r3, r4
 8010e72:	d908      	bls.n	8010e86 <_free_r+0x46>
 8010e74:	6825      	ldr	r5, [r4, #0]
 8010e76:	1961      	adds	r1, r4, r5
 8010e78:	428b      	cmp	r3, r1
 8010e7a:	bf01      	itttt	eq
 8010e7c:	6819      	ldreq	r1, [r3, #0]
 8010e7e:	685b      	ldreq	r3, [r3, #4]
 8010e80:	1949      	addeq	r1, r1, r5
 8010e82:	6021      	streq	r1, [r4, #0]
 8010e84:	e7ed      	b.n	8010e62 <_free_r+0x22>
 8010e86:	461a      	mov	r2, r3
 8010e88:	685b      	ldr	r3, [r3, #4]
 8010e8a:	b10b      	cbz	r3, 8010e90 <_free_r+0x50>
 8010e8c:	42a3      	cmp	r3, r4
 8010e8e:	d9fa      	bls.n	8010e86 <_free_r+0x46>
 8010e90:	6811      	ldr	r1, [r2, #0]
 8010e92:	1855      	adds	r5, r2, r1
 8010e94:	42a5      	cmp	r5, r4
 8010e96:	d10b      	bne.n	8010eb0 <_free_r+0x70>
 8010e98:	6824      	ldr	r4, [r4, #0]
 8010e9a:	4421      	add	r1, r4
 8010e9c:	1854      	adds	r4, r2, r1
 8010e9e:	42a3      	cmp	r3, r4
 8010ea0:	6011      	str	r1, [r2, #0]
 8010ea2:	d1e0      	bne.n	8010e66 <_free_r+0x26>
 8010ea4:	681c      	ldr	r4, [r3, #0]
 8010ea6:	685b      	ldr	r3, [r3, #4]
 8010ea8:	6053      	str	r3, [r2, #4]
 8010eaa:	440c      	add	r4, r1
 8010eac:	6014      	str	r4, [r2, #0]
 8010eae:	e7da      	b.n	8010e66 <_free_r+0x26>
 8010eb0:	d902      	bls.n	8010eb8 <_free_r+0x78>
 8010eb2:	230c      	movs	r3, #12
 8010eb4:	6003      	str	r3, [r0, #0]
 8010eb6:	e7d6      	b.n	8010e66 <_free_r+0x26>
 8010eb8:	6825      	ldr	r5, [r4, #0]
 8010eba:	1961      	adds	r1, r4, r5
 8010ebc:	428b      	cmp	r3, r1
 8010ebe:	bf04      	itt	eq
 8010ec0:	6819      	ldreq	r1, [r3, #0]
 8010ec2:	685b      	ldreq	r3, [r3, #4]
 8010ec4:	6063      	str	r3, [r4, #4]
 8010ec6:	bf04      	itt	eq
 8010ec8:	1949      	addeq	r1, r1, r5
 8010eca:	6021      	streq	r1, [r4, #0]
 8010ecc:	6054      	str	r4, [r2, #4]
 8010ece:	e7ca      	b.n	8010e66 <_free_r+0x26>
 8010ed0:	b003      	add	sp, #12
 8010ed2:	bd30      	pop	{r4, r5, pc}
 8010ed4:	200023b4 	.word	0x200023b4

08010ed8 <__ascii_mbtowc>:
 8010ed8:	b082      	sub	sp, #8
 8010eda:	b901      	cbnz	r1, 8010ede <__ascii_mbtowc+0x6>
 8010edc:	a901      	add	r1, sp, #4
 8010ede:	b142      	cbz	r2, 8010ef2 <__ascii_mbtowc+0x1a>
 8010ee0:	b14b      	cbz	r3, 8010ef6 <__ascii_mbtowc+0x1e>
 8010ee2:	7813      	ldrb	r3, [r2, #0]
 8010ee4:	600b      	str	r3, [r1, #0]
 8010ee6:	7812      	ldrb	r2, [r2, #0]
 8010ee8:	1e10      	subs	r0, r2, #0
 8010eea:	bf18      	it	ne
 8010eec:	2001      	movne	r0, #1
 8010eee:	b002      	add	sp, #8
 8010ef0:	4770      	bx	lr
 8010ef2:	4610      	mov	r0, r2
 8010ef4:	e7fb      	b.n	8010eee <__ascii_mbtowc+0x16>
 8010ef6:	f06f 0001 	mvn.w	r0, #1
 8010efa:	e7f8      	b.n	8010eee <__ascii_mbtowc+0x16>

08010efc <_malloc_usable_size_r>:
 8010efc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010f00:	1f18      	subs	r0, r3, #4
 8010f02:	2b00      	cmp	r3, #0
 8010f04:	bfbc      	itt	lt
 8010f06:	580b      	ldrlt	r3, [r1, r0]
 8010f08:	18c0      	addlt	r0, r0, r3
 8010f0a:	4770      	bx	lr

08010f0c <fiprintf>:
 8010f0c:	b40e      	push	{r1, r2, r3}
 8010f0e:	b503      	push	{r0, r1, lr}
 8010f10:	4601      	mov	r1, r0
 8010f12:	ab03      	add	r3, sp, #12
 8010f14:	4805      	ldr	r0, [pc, #20]	; (8010f2c <fiprintf+0x20>)
 8010f16:	f853 2b04 	ldr.w	r2, [r3], #4
 8010f1a:	6800      	ldr	r0, [r0, #0]
 8010f1c:	9301      	str	r3, [sp, #4]
 8010f1e:	f000 f845 	bl	8010fac <_vfiprintf_r>
 8010f22:	b002      	add	sp, #8
 8010f24:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f28:	b003      	add	sp, #12
 8010f2a:	4770      	bx	lr
 8010f2c:	20000154 	.word	0x20000154

08010f30 <__ascii_wctomb>:
 8010f30:	b149      	cbz	r1, 8010f46 <__ascii_wctomb+0x16>
 8010f32:	2aff      	cmp	r2, #255	; 0xff
 8010f34:	bf85      	ittet	hi
 8010f36:	238a      	movhi	r3, #138	; 0x8a
 8010f38:	6003      	strhi	r3, [r0, #0]
 8010f3a:	700a      	strbls	r2, [r1, #0]
 8010f3c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8010f40:	bf98      	it	ls
 8010f42:	2001      	movls	r0, #1
 8010f44:	4770      	bx	lr
 8010f46:	4608      	mov	r0, r1
 8010f48:	4770      	bx	lr

08010f4a <abort>:
 8010f4a:	b508      	push	{r3, lr}
 8010f4c:	2006      	movs	r0, #6
 8010f4e:	f000 fa89 	bl	8011464 <raise>
 8010f52:	2001      	movs	r0, #1
 8010f54:	f7f1 fd36 	bl	80029c4 <_exit>

08010f58 <__sfputc_r>:
 8010f58:	6893      	ldr	r3, [r2, #8]
 8010f5a:	3b01      	subs	r3, #1
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	b410      	push	{r4}
 8010f60:	6093      	str	r3, [r2, #8]
 8010f62:	da08      	bge.n	8010f76 <__sfputc_r+0x1e>
 8010f64:	6994      	ldr	r4, [r2, #24]
 8010f66:	42a3      	cmp	r3, r4
 8010f68:	db01      	blt.n	8010f6e <__sfputc_r+0x16>
 8010f6a:	290a      	cmp	r1, #10
 8010f6c:	d103      	bne.n	8010f76 <__sfputc_r+0x1e>
 8010f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f72:	f000 b935 	b.w	80111e0 <__swbuf_r>
 8010f76:	6813      	ldr	r3, [r2, #0]
 8010f78:	1c58      	adds	r0, r3, #1
 8010f7a:	6010      	str	r0, [r2, #0]
 8010f7c:	7019      	strb	r1, [r3, #0]
 8010f7e:	4608      	mov	r0, r1
 8010f80:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f84:	4770      	bx	lr

08010f86 <__sfputs_r>:
 8010f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f88:	4606      	mov	r6, r0
 8010f8a:	460f      	mov	r7, r1
 8010f8c:	4614      	mov	r4, r2
 8010f8e:	18d5      	adds	r5, r2, r3
 8010f90:	42ac      	cmp	r4, r5
 8010f92:	d101      	bne.n	8010f98 <__sfputs_r+0x12>
 8010f94:	2000      	movs	r0, #0
 8010f96:	e007      	b.n	8010fa8 <__sfputs_r+0x22>
 8010f98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f9c:	463a      	mov	r2, r7
 8010f9e:	4630      	mov	r0, r6
 8010fa0:	f7ff ffda 	bl	8010f58 <__sfputc_r>
 8010fa4:	1c43      	adds	r3, r0, #1
 8010fa6:	d1f3      	bne.n	8010f90 <__sfputs_r+0xa>
 8010fa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010fac <_vfiprintf_r>:
 8010fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fb0:	460d      	mov	r5, r1
 8010fb2:	b09d      	sub	sp, #116	; 0x74
 8010fb4:	4614      	mov	r4, r2
 8010fb6:	4698      	mov	r8, r3
 8010fb8:	4606      	mov	r6, r0
 8010fba:	b118      	cbz	r0, 8010fc4 <_vfiprintf_r+0x18>
 8010fbc:	6a03      	ldr	r3, [r0, #32]
 8010fbe:	b90b      	cbnz	r3, 8010fc4 <_vfiprintf_r+0x18>
 8010fc0:	f7fe f8fa 	bl	800f1b8 <__sinit>
 8010fc4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010fc6:	07d9      	lsls	r1, r3, #31
 8010fc8:	d405      	bmi.n	8010fd6 <_vfiprintf_r+0x2a>
 8010fca:	89ab      	ldrh	r3, [r5, #12]
 8010fcc:	059a      	lsls	r2, r3, #22
 8010fce:	d402      	bmi.n	8010fd6 <_vfiprintf_r+0x2a>
 8010fd0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010fd2:	f7fe f95d 	bl	800f290 <__retarget_lock_acquire_recursive>
 8010fd6:	89ab      	ldrh	r3, [r5, #12]
 8010fd8:	071b      	lsls	r3, r3, #28
 8010fda:	d501      	bpl.n	8010fe0 <_vfiprintf_r+0x34>
 8010fdc:	692b      	ldr	r3, [r5, #16]
 8010fde:	b99b      	cbnz	r3, 8011008 <_vfiprintf_r+0x5c>
 8010fe0:	4629      	mov	r1, r5
 8010fe2:	4630      	mov	r0, r6
 8010fe4:	f000 f93a 	bl	801125c <__swsetup_r>
 8010fe8:	b170      	cbz	r0, 8011008 <_vfiprintf_r+0x5c>
 8010fea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010fec:	07dc      	lsls	r4, r3, #31
 8010fee:	d504      	bpl.n	8010ffa <_vfiprintf_r+0x4e>
 8010ff0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010ff4:	b01d      	add	sp, #116	; 0x74
 8010ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ffa:	89ab      	ldrh	r3, [r5, #12]
 8010ffc:	0598      	lsls	r0, r3, #22
 8010ffe:	d4f7      	bmi.n	8010ff0 <_vfiprintf_r+0x44>
 8011000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8011002:	f7fe f946 	bl	800f292 <__retarget_lock_release_recursive>
 8011006:	e7f3      	b.n	8010ff0 <_vfiprintf_r+0x44>
 8011008:	2300      	movs	r3, #0
 801100a:	9309      	str	r3, [sp, #36]	; 0x24
 801100c:	2320      	movs	r3, #32
 801100e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011012:	f8cd 800c 	str.w	r8, [sp, #12]
 8011016:	2330      	movs	r3, #48	; 0x30
 8011018:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80111cc <_vfiprintf_r+0x220>
 801101c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011020:	f04f 0901 	mov.w	r9, #1
 8011024:	4623      	mov	r3, r4
 8011026:	469a      	mov	sl, r3
 8011028:	f813 2b01 	ldrb.w	r2, [r3], #1
 801102c:	b10a      	cbz	r2, 8011032 <_vfiprintf_r+0x86>
 801102e:	2a25      	cmp	r2, #37	; 0x25
 8011030:	d1f9      	bne.n	8011026 <_vfiprintf_r+0x7a>
 8011032:	ebba 0b04 	subs.w	fp, sl, r4
 8011036:	d00b      	beq.n	8011050 <_vfiprintf_r+0xa4>
 8011038:	465b      	mov	r3, fp
 801103a:	4622      	mov	r2, r4
 801103c:	4629      	mov	r1, r5
 801103e:	4630      	mov	r0, r6
 8011040:	f7ff ffa1 	bl	8010f86 <__sfputs_r>
 8011044:	3001      	adds	r0, #1
 8011046:	f000 80a9 	beq.w	801119c <_vfiprintf_r+0x1f0>
 801104a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801104c:	445a      	add	r2, fp
 801104e:	9209      	str	r2, [sp, #36]	; 0x24
 8011050:	f89a 3000 	ldrb.w	r3, [sl]
 8011054:	2b00      	cmp	r3, #0
 8011056:	f000 80a1 	beq.w	801119c <_vfiprintf_r+0x1f0>
 801105a:	2300      	movs	r3, #0
 801105c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011060:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011064:	f10a 0a01 	add.w	sl, sl, #1
 8011068:	9304      	str	r3, [sp, #16]
 801106a:	9307      	str	r3, [sp, #28]
 801106c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011070:	931a      	str	r3, [sp, #104]	; 0x68
 8011072:	4654      	mov	r4, sl
 8011074:	2205      	movs	r2, #5
 8011076:	f814 1b01 	ldrb.w	r1, [r4], #1
 801107a:	4854      	ldr	r0, [pc, #336]	; (80111cc <_vfiprintf_r+0x220>)
 801107c:	f7ef f8a8 	bl	80001d0 <memchr>
 8011080:	9a04      	ldr	r2, [sp, #16]
 8011082:	b9d8      	cbnz	r0, 80110bc <_vfiprintf_r+0x110>
 8011084:	06d1      	lsls	r1, r2, #27
 8011086:	bf44      	itt	mi
 8011088:	2320      	movmi	r3, #32
 801108a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801108e:	0713      	lsls	r3, r2, #28
 8011090:	bf44      	itt	mi
 8011092:	232b      	movmi	r3, #43	; 0x2b
 8011094:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011098:	f89a 3000 	ldrb.w	r3, [sl]
 801109c:	2b2a      	cmp	r3, #42	; 0x2a
 801109e:	d015      	beq.n	80110cc <_vfiprintf_r+0x120>
 80110a0:	9a07      	ldr	r2, [sp, #28]
 80110a2:	4654      	mov	r4, sl
 80110a4:	2000      	movs	r0, #0
 80110a6:	f04f 0c0a 	mov.w	ip, #10
 80110aa:	4621      	mov	r1, r4
 80110ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80110b0:	3b30      	subs	r3, #48	; 0x30
 80110b2:	2b09      	cmp	r3, #9
 80110b4:	d94d      	bls.n	8011152 <_vfiprintf_r+0x1a6>
 80110b6:	b1b0      	cbz	r0, 80110e6 <_vfiprintf_r+0x13a>
 80110b8:	9207      	str	r2, [sp, #28]
 80110ba:	e014      	b.n	80110e6 <_vfiprintf_r+0x13a>
 80110bc:	eba0 0308 	sub.w	r3, r0, r8
 80110c0:	fa09 f303 	lsl.w	r3, r9, r3
 80110c4:	4313      	orrs	r3, r2
 80110c6:	9304      	str	r3, [sp, #16]
 80110c8:	46a2      	mov	sl, r4
 80110ca:	e7d2      	b.n	8011072 <_vfiprintf_r+0xc6>
 80110cc:	9b03      	ldr	r3, [sp, #12]
 80110ce:	1d19      	adds	r1, r3, #4
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	9103      	str	r1, [sp, #12]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	bfbb      	ittet	lt
 80110d8:	425b      	neglt	r3, r3
 80110da:	f042 0202 	orrlt.w	r2, r2, #2
 80110de:	9307      	strge	r3, [sp, #28]
 80110e0:	9307      	strlt	r3, [sp, #28]
 80110e2:	bfb8      	it	lt
 80110e4:	9204      	strlt	r2, [sp, #16]
 80110e6:	7823      	ldrb	r3, [r4, #0]
 80110e8:	2b2e      	cmp	r3, #46	; 0x2e
 80110ea:	d10c      	bne.n	8011106 <_vfiprintf_r+0x15a>
 80110ec:	7863      	ldrb	r3, [r4, #1]
 80110ee:	2b2a      	cmp	r3, #42	; 0x2a
 80110f0:	d134      	bne.n	801115c <_vfiprintf_r+0x1b0>
 80110f2:	9b03      	ldr	r3, [sp, #12]
 80110f4:	1d1a      	adds	r2, r3, #4
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	9203      	str	r2, [sp, #12]
 80110fa:	2b00      	cmp	r3, #0
 80110fc:	bfb8      	it	lt
 80110fe:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8011102:	3402      	adds	r4, #2
 8011104:	9305      	str	r3, [sp, #20]
 8011106:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80111dc <_vfiprintf_r+0x230>
 801110a:	7821      	ldrb	r1, [r4, #0]
 801110c:	2203      	movs	r2, #3
 801110e:	4650      	mov	r0, sl
 8011110:	f7ef f85e 	bl	80001d0 <memchr>
 8011114:	b138      	cbz	r0, 8011126 <_vfiprintf_r+0x17a>
 8011116:	9b04      	ldr	r3, [sp, #16]
 8011118:	eba0 000a 	sub.w	r0, r0, sl
 801111c:	2240      	movs	r2, #64	; 0x40
 801111e:	4082      	lsls	r2, r0
 8011120:	4313      	orrs	r3, r2
 8011122:	3401      	adds	r4, #1
 8011124:	9304      	str	r3, [sp, #16]
 8011126:	f814 1b01 	ldrb.w	r1, [r4], #1
 801112a:	4829      	ldr	r0, [pc, #164]	; (80111d0 <_vfiprintf_r+0x224>)
 801112c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011130:	2206      	movs	r2, #6
 8011132:	f7ef f84d 	bl	80001d0 <memchr>
 8011136:	2800      	cmp	r0, #0
 8011138:	d03f      	beq.n	80111ba <_vfiprintf_r+0x20e>
 801113a:	4b26      	ldr	r3, [pc, #152]	; (80111d4 <_vfiprintf_r+0x228>)
 801113c:	bb1b      	cbnz	r3, 8011186 <_vfiprintf_r+0x1da>
 801113e:	9b03      	ldr	r3, [sp, #12]
 8011140:	3307      	adds	r3, #7
 8011142:	f023 0307 	bic.w	r3, r3, #7
 8011146:	3308      	adds	r3, #8
 8011148:	9303      	str	r3, [sp, #12]
 801114a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801114c:	443b      	add	r3, r7
 801114e:	9309      	str	r3, [sp, #36]	; 0x24
 8011150:	e768      	b.n	8011024 <_vfiprintf_r+0x78>
 8011152:	fb0c 3202 	mla	r2, ip, r2, r3
 8011156:	460c      	mov	r4, r1
 8011158:	2001      	movs	r0, #1
 801115a:	e7a6      	b.n	80110aa <_vfiprintf_r+0xfe>
 801115c:	2300      	movs	r3, #0
 801115e:	3401      	adds	r4, #1
 8011160:	9305      	str	r3, [sp, #20]
 8011162:	4619      	mov	r1, r3
 8011164:	f04f 0c0a 	mov.w	ip, #10
 8011168:	4620      	mov	r0, r4
 801116a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801116e:	3a30      	subs	r2, #48	; 0x30
 8011170:	2a09      	cmp	r2, #9
 8011172:	d903      	bls.n	801117c <_vfiprintf_r+0x1d0>
 8011174:	2b00      	cmp	r3, #0
 8011176:	d0c6      	beq.n	8011106 <_vfiprintf_r+0x15a>
 8011178:	9105      	str	r1, [sp, #20]
 801117a:	e7c4      	b.n	8011106 <_vfiprintf_r+0x15a>
 801117c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011180:	4604      	mov	r4, r0
 8011182:	2301      	movs	r3, #1
 8011184:	e7f0      	b.n	8011168 <_vfiprintf_r+0x1bc>
 8011186:	ab03      	add	r3, sp, #12
 8011188:	9300      	str	r3, [sp, #0]
 801118a:	462a      	mov	r2, r5
 801118c:	4b12      	ldr	r3, [pc, #72]	; (80111d8 <_vfiprintf_r+0x22c>)
 801118e:	a904      	add	r1, sp, #16
 8011190:	4630      	mov	r0, r6
 8011192:	f7fd fbb1 	bl	800e8f8 <_printf_float>
 8011196:	4607      	mov	r7, r0
 8011198:	1c78      	adds	r0, r7, #1
 801119a:	d1d6      	bne.n	801114a <_vfiprintf_r+0x19e>
 801119c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801119e:	07d9      	lsls	r1, r3, #31
 80111a0:	d405      	bmi.n	80111ae <_vfiprintf_r+0x202>
 80111a2:	89ab      	ldrh	r3, [r5, #12]
 80111a4:	059a      	lsls	r2, r3, #22
 80111a6:	d402      	bmi.n	80111ae <_vfiprintf_r+0x202>
 80111a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80111aa:	f7fe f872 	bl	800f292 <__retarget_lock_release_recursive>
 80111ae:	89ab      	ldrh	r3, [r5, #12]
 80111b0:	065b      	lsls	r3, r3, #25
 80111b2:	f53f af1d 	bmi.w	8010ff0 <_vfiprintf_r+0x44>
 80111b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80111b8:	e71c      	b.n	8010ff4 <_vfiprintf_r+0x48>
 80111ba:	ab03      	add	r3, sp, #12
 80111bc:	9300      	str	r3, [sp, #0]
 80111be:	462a      	mov	r2, r5
 80111c0:	4b05      	ldr	r3, [pc, #20]	; (80111d8 <_vfiprintf_r+0x22c>)
 80111c2:	a904      	add	r1, sp, #16
 80111c4:	4630      	mov	r0, r6
 80111c6:	f7fd fe3b 	bl	800ee40 <_printf_i>
 80111ca:	e7e4      	b.n	8011196 <_vfiprintf_r+0x1ea>
 80111cc:	08012591 	.word	0x08012591
 80111d0:	0801259b 	.word	0x0801259b
 80111d4:	0800e8f9 	.word	0x0800e8f9
 80111d8:	08010f87 	.word	0x08010f87
 80111dc:	08012597 	.word	0x08012597

080111e0 <__swbuf_r>:
 80111e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111e2:	460e      	mov	r6, r1
 80111e4:	4614      	mov	r4, r2
 80111e6:	4605      	mov	r5, r0
 80111e8:	b118      	cbz	r0, 80111f2 <__swbuf_r+0x12>
 80111ea:	6a03      	ldr	r3, [r0, #32]
 80111ec:	b90b      	cbnz	r3, 80111f2 <__swbuf_r+0x12>
 80111ee:	f7fd ffe3 	bl	800f1b8 <__sinit>
 80111f2:	69a3      	ldr	r3, [r4, #24]
 80111f4:	60a3      	str	r3, [r4, #8]
 80111f6:	89a3      	ldrh	r3, [r4, #12]
 80111f8:	071a      	lsls	r2, r3, #28
 80111fa:	d525      	bpl.n	8011248 <__swbuf_r+0x68>
 80111fc:	6923      	ldr	r3, [r4, #16]
 80111fe:	b31b      	cbz	r3, 8011248 <__swbuf_r+0x68>
 8011200:	6823      	ldr	r3, [r4, #0]
 8011202:	6922      	ldr	r2, [r4, #16]
 8011204:	1a98      	subs	r0, r3, r2
 8011206:	6963      	ldr	r3, [r4, #20]
 8011208:	b2f6      	uxtb	r6, r6
 801120a:	4283      	cmp	r3, r0
 801120c:	4637      	mov	r7, r6
 801120e:	dc04      	bgt.n	801121a <__swbuf_r+0x3a>
 8011210:	4621      	mov	r1, r4
 8011212:	4628      	mov	r0, r5
 8011214:	f7ff f940 	bl	8010498 <_fflush_r>
 8011218:	b9e0      	cbnz	r0, 8011254 <__swbuf_r+0x74>
 801121a:	68a3      	ldr	r3, [r4, #8]
 801121c:	3b01      	subs	r3, #1
 801121e:	60a3      	str	r3, [r4, #8]
 8011220:	6823      	ldr	r3, [r4, #0]
 8011222:	1c5a      	adds	r2, r3, #1
 8011224:	6022      	str	r2, [r4, #0]
 8011226:	701e      	strb	r6, [r3, #0]
 8011228:	6962      	ldr	r2, [r4, #20]
 801122a:	1c43      	adds	r3, r0, #1
 801122c:	429a      	cmp	r2, r3
 801122e:	d004      	beq.n	801123a <__swbuf_r+0x5a>
 8011230:	89a3      	ldrh	r3, [r4, #12]
 8011232:	07db      	lsls	r3, r3, #31
 8011234:	d506      	bpl.n	8011244 <__swbuf_r+0x64>
 8011236:	2e0a      	cmp	r6, #10
 8011238:	d104      	bne.n	8011244 <__swbuf_r+0x64>
 801123a:	4621      	mov	r1, r4
 801123c:	4628      	mov	r0, r5
 801123e:	f7ff f92b 	bl	8010498 <_fflush_r>
 8011242:	b938      	cbnz	r0, 8011254 <__swbuf_r+0x74>
 8011244:	4638      	mov	r0, r7
 8011246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011248:	4621      	mov	r1, r4
 801124a:	4628      	mov	r0, r5
 801124c:	f000 f806 	bl	801125c <__swsetup_r>
 8011250:	2800      	cmp	r0, #0
 8011252:	d0d5      	beq.n	8011200 <__swbuf_r+0x20>
 8011254:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011258:	e7f4      	b.n	8011244 <__swbuf_r+0x64>
	...

0801125c <__swsetup_r>:
 801125c:	b538      	push	{r3, r4, r5, lr}
 801125e:	4b2a      	ldr	r3, [pc, #168]	; (8011308 <__swsetup_r+0xac>)
 8011260:	4605      	mov	r5, r0
 8011262:	6818      	ldr	r0, [r3, #0]
 8011264:	460c      	mov	r4, r1
 8011266:	b118      	cbz	r0, 8011270 <__swsetup_r+0x14>
 8011268:	6a03      	ldr	r3, [r0, #32]
 801126a:	b90b      	cbnz	r3, 8011270 <__swsetup_r+0x14>
 801126c:	f7fd ffa4 	bl	800f1b8 <__sinit>
 8011270:	89a3      	ldrh	r3, [r4, #12]
 8011272:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011276:	0718      	lsls	r0, r3, #28
 8011278:	d422      	bmi.n	80112c0 <__swsetup_r+0x64>
 801127a:	06d9      	lsls	r1, r3, #27
 801127c:	d407      	bmi.n	801128e <__swsetup_r+0x32>
 801127e:	2309      	movs	r3, #9
 8011280:	602b      	str	r3, [r5, #0]
 8011282:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011286:	81a3      	strh	r3, [r4, #12]
 8011288:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801128c:	e034      	b.n	80112f8 <__swsetup_r+0x9c>
 801128e:	0758      	lsls	r0, r3, #29
 8011290:	d512      	bpl.n	80112b8 <__swsetup_r+0x5c>
 8011292:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011294:	b141      	cbz	r1, 80112a8 <__swsetup_r+0x4c>
 8011296:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801129a:	4299      	cmp	r1, r3
 801129c:	d002      	beq.n	80112a4 <__swsetup_r+0x48>
 801129e:	4628      	mov	r0, r5
 80112a0:	f7ff fdce 	bl	8010e40 <_free_r>
 80112a4:	2300      	movs	r3, #0
 80112a6:	6363      	str	r3, [r4, #52]	; 0x34
 80112a8:	89a3      	ldrh	r3, [r4, #12]
 80112aa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80112ae:	81a3      	strh	r3, [r4, #12]
 80112b0:	2300      	movs	r3, #0
 80112b2:	6063      	str	r3, [r4, #4]
 80112b4:	6923      	ldr	r3, [r4, #16]
 80112b6:	6023      	str	r3, [r4, #0]
 80112b8:	89a3      	ldrh	r3, [r4, #12]
 80112ba:	f043 0308 	orr.w	r3, r3, #8
 80112be:	81a3      	strh	r3, [r4, #12]
 80112c0:	6923      	ldr	r3, [r4, #16]
 80112c2:	b94b      	cbnz	r3, 80112d8 <__swsetup_r+0x7c>
 80112c4:	89a3      	ldrh	r3, [r4, #12]
 80112c6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80112ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80112ce:	d003      	beq.n	80112d8 <__swsetup_r+0x7c>
 80112d0:	4621      	mov	r1, r4
 80112d2:	4628      	mov	r0, r5
 80112d4:	f000 f840 	bl	8011358 <__smakebuf_r>
 80112d8:	89a0      	ldrh	r0, [r4, #12]
 80112da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80112de:	f010 0301 	ands.w	r3, r0, #1
 80112e2:	d00a      	beq.n	80112fa <__swsetup_r+0x9e>
 80112e4:	2300      	movs	r3, #0
 80112e6:	60a3      	str	r3, [r4, #8]
 80112e8:	6963      	ldr	r3, [r4, #20]
 80112ea:	425b      	negs	r3, r3
 80112ec:	61a3      	str	r3, [r4, #24]
 80112ee:	6923      	ldr	r3, [r4, #16]
 80112f0:	b943      	cbnz	r3, 8011304 <__swsetup_r+0xa8>
 80112f2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80112f6:	d1c4      	bne.n	8011282 <__swsetup_r+0x26>
 80112f8:	bd38      	pop	{r3, r4, r5, pc}
 80112fa:	0781      	lsls	r1, r0, #30
 80112fc:	bf58      	it	pl
 80112fe:	6963      	ldrpl	r3, [r4, #20]
 8011300:	60a3      	str	r3, [r4, #8]
 8011302:	e7f4      	b.n	80112ee <__swsetup_r+0x92>
 8011304:	2000      	movs	r0, #0
 8011306:	e7f7      	b.n	80112f8 <__swsetup_r+0x9c>
 8011308:	20000154 	.word	0x20000154

0801130c <__swhatbuf_r>:
 801130c:	b570      	push	{r4, r5, r6, lr}
 801130e:	460c      	mov	r4, r1
 8011310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011314:	2900      	cmp	r1, #0
 8011316:	b096      	sub	sp, #88	; 0x58
 8011318:	4615      	mov	r5, r2
 801131a:	461e      	mov	r6, r3
 801131c:	da0d      	bge.n	801133a <__swhatbuf_r+0x2e>
 801131e:	89a3      	ldrh	r3, [r4, #12]
 8011320:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011324:	f04f 0100 	mov.w	r1, #0
 8011328:	bf0c      	ite	eq
 801132a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801132e:	2340      	movne	r3, #64	; 0x40
 8011330:	2000      	movs	r0, #0
 8011332:	6031      	str	r1, [r6, #0]
 8011334:	602b      	str	r3, [r5, #0]
 8011336:	b016      	add	sp, #88	; 0x58
 8011338:	bd70      	pop	{r4, r5, r6, pc}
 801133a:	466a      	mov	r2, sp
 801133c:	f000 f848 	bl	80113d0 <_fstat_r>
 8011340:	2800      	cmp	r0, #0
 8011342:	dbec      	blt.n	801131e <__swhatbuf_r+0x12>
 8011344:	9901      	ldr	r1, [sp, #4]
 8011346:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801134a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801134e:	4259      	negs	r1, r3
 8011350:	4159      	adcs	r1, r3
 8011352:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011356:	e7eb      	b.n	8011330 <__swhatbuf_r+0x24>

08011358 <__smakebuf_r>:
 8011358:	898b      	ldrh	r3, [r1, #12]
 801135a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801135c:	079d      	lsls	r5, r3, #30
 801135e:	4606      	mov	r6, r0
 8011360:	460c      	mov	r4, r1
 8011362:	d507      	bpl.n	8011374 <__smakebuf_r+0x1c>
 8011364:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011368:	6023      	str	r3, [r4, #0]
 801136a:	6123      	str	r3, [r4, #16]
 801136c:	2301      	movs	r3, #1
 801136e:	6163      	str	r3, [r4, #20]
 8011370:	b002      	add	sp, #8
 8011372:	bd70      	pop	{r4, r5, r6, pc}
 8011374:	ab01      	add	r3, sp, #4
 8011376:	466a      	mov	r2, sp
 8011378:	f7ff ffc8 	bl	801130c <__swhatbuf_r>
 801137c:	9900      	ldr	r1, [sp, #0]
 801137e:	4605      	mov	r5, r0
 8011380:	4630      	mov	r0, r6
 8011382:	f7fe ff83 	bl	801028c <_malloc_r>
 8011386:	b948      	cbnz	r0, 801139c <__smakebuf_r+0x44>
 8011388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801138c:	059a      	lsls	r2, r3, #22
 801138e:	d4ef      	bmi.n	8011370 <__smakebuf_r+0x18>
 8011390:	f023 0303 	bic.w	r3, r3, #3
 8011394:	f043 0302 	orr.w	r3, r3, #2
 8011398:	81a3      	strh	r3, [r4, #12]
 801139a:	e7e3      	b.n	8011364 <__smakebuf_r+0xc>
 801139c:	89a3      	ldrh	r3, [r4, #12]
 801139e:	6020      	str	r0, [r4, #0]
 80113a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80113a4:	81a3      	strh	r3, [r4, #12]
 80113a6:	9b00      	ldr	r3, [sp, #0]
 80113a8:	6163      	str	r3, [r4, #20]
 80113aa:	9b01      	ldr	r3, [sp, #4]
 80113ac:	6120      	str	r0, [r4, #16]
 80113ae:	b15b      	cbz	r3, 80113c8 <__smakebuf_r+0x70>
 80113b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80113b4:	4630      	mov	r0, r6
 80113b6:	f000 f81d 	bl	80113f4 <_isatty_r>
 80113ba:	b128      	cbz	r0, 80113c8 <__smakebuf_r+0x70>
 80113bc:	89a3      	ldrh	r3, [r4, #12]
 80113be:	f023 0303 	bic.w	r3, r3, #3
 80113c2:	f043 0301 	orr.w	r3, r3, #1
 80113c6:	81a3      	strh	r3, [r4, #12]
 80113c8:	89a3      	ldrh	r3, [r4, #12]
 80113ca:	431d      	orrs	r5, r3
 80113cc:	81a5      	strh	r5, [r4, #12]
 80113ce:	e7cf      	b.n	8011370 <__smakebuf_r+0x18>

080113d0 <_fstat_r>:
 80113d0:	b538      	push	{r3, r4, r5, lr}
 80113d2:	4d07      	ldr	r5, [pc, #28]	; (80113f0 <_fstat_r+0x20>)
 80113d4:	2300      	movs	r3, #0
 80113d6:	4604      	mov	r4, r0
 80113d8:	4608      	mov	r0, r1
 80113da:	4611      	mov	r1, r2
 80113dc:	602b      	str	r3, [r5, #0]
 80113de:	f7f1 fb40 	bl	8002a62 <_fstat>
 80113e2:	1c43      	adds	r3, r0, #1
 80113e4:	d102      	bne.n	80113ec <_fstat_r+0x1c>
 80113e6:	682b      	ldr	r3, [r5, #0]
 80113e8:	b103      	cbz	r3, 80113ec <_fstat_r+0x1c>
 80113ea:	6023      	str	r3, [r4, #0]
 80113ec:	bd38      	pop	{r3, r4, r5, pc}
 80113ee:	bf00      	nop
 80113f0:	200023bc 	.word	0x200023bc

080113f4 <_isatty_r>:
 80113f4:	b538      	push	{r3, r4, r5, lr}
 80113f6:	4d06      	ldr	r5, [pc, #24]	; (8011410 <_isatty_r+0x1c>)
 80113f8:	2300      	movs	r3, #0
 80113fa:	4604      	mov	r4, r0
 80113fc:	4608      	mov	r0, r1
 80113fe:	602b      	str	r3, [r5, #0]
 8011400:	f7f1 fb3f 	bl	8002a82 <_isatty>
 8011404:	1c43      	adds	r3, r0, #1
 8011406:	d102      	bne.n	801140e <_isatty_r+0x1a>
 8011408:	682b      	ldr	r3, [r5, #0]
 801140a:	b103      	cbz	r3, 801140e <_isatty_r+0x1a>
 801140c:	6023      	str	r3, [r4, #0]
 801140e:	bd38      	pop	{r3, r4, r5, pc}
 8011410:	200023bc 	.word	0x200023bc

08011414 <_raise_r>:
 8011414:	291f      	cmp	r1, #31
 8011416:	b538      	push	{r3, r4, r5, lr}
 8011418:	4604      	mov	r4, r0
 801141a:	460d      	mov	r5, r1
 801141c:	d904      	bls.n	8011428 <_raise_r+0x14>
 801141e:	2316      	movs	r3, #22
 8011420:	6003      	str	r3, [r0, #0]
 8011422:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011426:	bd38      	pop	{r3, r4, r5, pc}
 8011428:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801142a:	b112      	cbz	r2, 8011432 <_raise_r+0x1e>
 801142c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011430:	b94b      	cbnz	r3, 8011446 <_raise_r+0x32>
 8011432:	4620      	mov	r0, r4
 8011434:	f000 f830 	bl	8011498 <_getpid_r>
 8011438:	462a      	mov	r2, r5
 801143a:	4601      	mov	r1, r0
 801143c:	4620      	mov	r0, r4
 801143e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011442:	f000 b817 	b.w	8011474 <_kill_r>
 8011446:	2b01      	cmp	r3, #1
 8011448:	d00a      	beq.n	8011460 <_raise_r+0x4c>
 801144a:	1c59      	adds	r1, r3, #1
 801144c:	d103      	bne.n	8011456 <_raise_r+0x42>
 801144e:	2316      	movs	r3, #22
 8011450:	6003      	str	r3, [r0, #0]
 8011452:	2001      	movs	r0, #1
 8011454:	e7e7      	b.n	8011426 <_raise_r+0x12>
 8011456:	2400      	movs	r4, #0
 8011458:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801145c:	4628      	mov	r0, r5
 801145e:	4798      	blx	r3
 8011460:	2000      	movs	r0, #0
 8011462:	e7e0      	b.n	8011426 <_raise_r+0x12>

08011464 <raise>:
 8011464:	4b02      	ldr	r3, [pc, #8]	; (8011470 <raise+0xc>)
 8011466:	4601      	mov	r1, r0
 8011468:	6818      	ldr	r0, [r3, #0]
 801146a:	f7ff bfd3 	b.w	8011414 <_raise_r>
 801146e:	bf00      	nop
 8011470:	20000154 	.word	0x20000154

08011474 <_kill_r>:
 8011474:	b538      	push	{r3, r4, r5, lr}
 8011476:	4d07      	ldr	r5, [pc, #28]	; (8011494 <_kill_r+0x20>)
 8011478:	2300      	movs	r3, #0
 801147a:	4604      	mov	r4, r0
 801147c:	4608      	mov	r0, r1
 801147e:	4611      	mov	r1, r2
 8011480:	602b      	str	r3, [r5, #0]
 8011482:	f7f1 fa8f 	bl	80029a4 <_kill>
 8011486:	1c43      	adds	r3, r0, #1
 8011488:	d102      	bne.n	8011490 <_kill_r+0x1c>
 801148a:	682b      	ldr	r3, [r5, #0]
 801148c:	b103      	cbz	r3, 8011490 <_kill_r+0x1c>
 801148e:	6023      	str	r3, [r4, #0]
 8011490:	bd38      	pop	{r3, r4, r5, pc}
 8011492:	bf00      	nop
 8011494:	200023bc 	.word	0x200023bc

08011498 <_getpid_r>:
 8011498:	f7f1 ba7c 	b.w	8002994 <_getpid>

0801149c <pow>:
 801149c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801149e:	ed2d 8b02 	vpush	{d8}
 80114a2:	eeb0 8a40 	vmov.f32	s16, s0
 80114a6:	eef0 8a60 	vmov.f32	s17, s1
 80114aa:	ec55 4b11 	vmov	r4, r5, d1
 80114ae:	f000 f9c7 	bl	8011840 <__ieee754_pow>
 80114b2:	4622      	mov	r2, r4
 80114b4:	462b      	mov	r3, r5
 80114b6:	4620      	mov	r0, r4
 80114b8:	4629      	mov	r1, r5
 80114ba:	ec57 6b10 	vmov	r6, r7, d0
 80114be:	f7ef fb35 	bl	8000b2c <__aeabi_dcmpun>
 80114c2:	2800      	cmp	r0, #0
 80114c4:	d13b      	bne.n	801153e <pow+0xa2>
 80114c6:	ec51 0b18 	vmov	r0, r1, d8
 80114ca:	2200      	movs	r2, #0
 80114cc:	2300      	movs	r3, #0
 80114ce:	f7ef fafb 	bl	8000ac8 <__aeabi_dcmpeq>
 80114d2:	b1b8      	cbz	r0, 8011504 <pow+0x68>
 80114d4:	2200      	movs	r2, #0
 80114d6:	2300      	movs	r3, #0
 80114d8:	4620      	mov	r0, r4
 80114da:	4629      	mov	r1, r5
 80114dc:	f7ef faf4 	bl	8000ac8 <__aeabi_dcmpeq>
 80114e0:	2800      	cmp	r0, #0
 80114e2:	d146      	bne.n	8011572 <pow+0xd6>
 80114e4:	ec45 4b10 	vmov	d0, r4, r5
 80114e8:	f000 f87d 	bl	80115e6 <finite>
 80114ec:	b338      	cbz	r0, 801153e <pow+0xa2>
 80114ee:	2200      	movs	r2, #0
 80114f0:	2300      	movs	r3, #0
 80114f2:	4620      	mov	r0, r4
 80114f4:	4629      	mov	r1, r5
 80114f6:	f7ef faf1 	bl	8000adc <__aeabi_dcmplt>
 80114fa:	b300      	cbz	r0, 801153e <pow+0xa2>
 80114fc:	f7fd fe9e 	bl	800f23c <__errno>
 8011500:	2322      	movs	r3, #34	; 0x22
 8011502:	e01b      	b.n	801153c <pow+0xa0>
 8011504:	ec47 6b10 	vmov	d0, r6, r7
 8011508:	f000 f86d 	bl	80115e6 <finite>
 801150c:	b9e0      	cbnz	r0, 8011548 <pow+0xac>
 801150e:	eeb0 0a48 	vmov.f32	s0, s16
 8011512:	eef0 0a68 	vmov.f32	s1, s17
 8011516:	f000 f866 	bl	80115e6 <finite>
 801151a:	b1a8      	cbz	r0, 8011548 <pow+0xac>
 801151c:	ec45 4b10 	vmov	d0, r4, r5
 8011520:	f000 f861 	bl	80115e6 <finite>
 8011524:	b180      	cbz	r0, 8011548 <pow+0xac>
 8011526:	4632      	mov	r2, r6
 8011528:	463b      	mov	r3, r7
 801152a:	4630      	mov	r0, r6
 801152c:	4639      	mov	r1, r7
 801152e:	f7ef fafd 	bl	8000b2c <__aeabi_dcmpun>
 8011532:	2800      	cmp	r0, #0
 8011534:	d0e2      	beq.n	80114fc <pow+0x60>
 8011536:	f7fd fe81 	bl	800f23c <__errno>
 801153a:	2321      	movs	r3, #33	; 0x21
 801153c:	6003      	str	r3, [r0, #0]
 801153e:	ecbd 8b02 	vpop	{d8}
 8011542:	ec47 6b10 	vmov	d0, r6, r7
 8011546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011548:	2200      	movs	r2, #0
 801154a:	2300      	movs	r3, #0
 801154c:	4630      	mov	r0, r6
 801154e:	4639      	mov	r1, r7
 8011550:	f7ef faba 	bl	8000ac8 <__aeabi_dcmpeq>
 8011554:	2800      	cmp	r0, #0
 8011556:	d0f2      	beq.n	801153e <pow+0xa2>
 8011558:	eeb0 0a48 	vmov.f32	s0, s16
 801155c:	eef0 0a68 	vmov.f32	s1, s17
 8011560:	f000 f841 	bl	80115e6 <finite>
 8011564:	2800      	cmp	r0, #0
 8011566:	d0ea      	beq.n	801153e <pow+0xa2>
 8011568:	ec45 4b10 	vmov	d0, r4, r5
 801156c:	f000 f83b 	bl	80115e6 <finite>
 8011570:	e7c3      	b.n	80114fa <pow+0x5e>
 8011572:	4f01      	ldr	r7, [pc, #4]	; (8011578 <pow+0xdc>)
 8011574:	2600      	movs	r6, #0
 8011576:	e7e2      	b.n	801153e <pow+0xa2>
 8011578:	3ff00000 	.word	0x3ff00000

0801157c <sqrt>:
 801157c:	b538      	push	{r3, r4, r5, lr}
 801157e:	ed2d 8b02 	vpush	{d8}
 8011582:	ec55 4b10 	vmov	r4, r5, d0
 8011586:	f000 f839 	bl	80115fc <__ieee754_sqrt>
 801158a:	4622      	mov	r2, r4
 801158c:	462b      	mov	r3, r5
 801158e:	4620      	mov	r0, r4
 8011590:	4629      	mov	r1, r5
 8011592:	eeb0 8a40 	vmov.f32	s16, s0
 8011596:	eef0 8a60 	vmov.f32	s17, s1
 801159a:	f7ef fac7 	bl	8000b2c <__aeabi_dcmpun>
 801159e:	b990      	cbnz	r0, 80115c6 <sqrt+0x4a>
 80115a0:	2200      	movs	r2, #0
 80115a2:	2300      	movs	r3, #0
 80115a4:	4620      	mov	r0, r4
 80115a6:	4629      	mov	r1, r5
 80115a8:	f7ef fa98 	bl	8000adc <__aeabi_dcmplt>
 80115ac:	b158      	cbz	r0, 80115c6 <sqrt+0x4a>
 80115ae:	f7fd fe45 	bl	800f23c <__errno>
 80115b2:	2321      	movs	r3, #33	; 0x21
 80115b4:	6003      	str	r3, [r0, #0]
 80115b6:	2200      	movs	r2, #0
 80115b8:	2300      	movs	r3, #0
 80115ba:	4610      	mov	r0, r2
 80115bc:	4619      	mov	r1, r3
 80115be:	f7ef f945 	bl	800084c <__aeabi_ddiv>
 80115c2:	ec41 0b18 	vmov	d8, r0, r1
 80115c6:	eeb0 0a48 	vmov.f32	s0, s16
 80115ca:	eef0 0a68 	vmov.f32	s1, s17
 80115ce:	ecbd 8b02 	vpop	{d8}
 80115d2:	bd38      	pop	{r3, r4, r5, pc}

080115d4 <fabs>:
 80115d4:	ec51 0b10 	vmov	r0, r1, d0
 80115d8:	ee10 2a10 	vmov	r2, s0
 80115dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80115e0:	ec43 2b10 	vmov	d0, r2, r3
 80115e4:	4770      	bx	lr

080115e6 <finite>:
 80115e6:	b082      	sub	sp, #8
 80115e8:	ed8d 0b00 	vstr	d0, [sp]
 80115ec:	9801      	ldr	r0, [sp, #4]
 80115ee:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80115f2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80115f6:	0fc0      	lsrs	r0, r0, #31
 80115f8:	b002      	add	sp, #8
 80115fa:	4770      	bx	lr

080115fc <__ieee754_sqrt>:
 80115fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011600:	ec55 4b10 	vmov	r4, r5, d0
 8011604:	4e67      	ldr	r6, [pc, #412]	; (80117a4 <__ieee754_sqrt+0x1a8>)
 8011606:	43ae      	bics	r6, r5
 8011608:	ee10 0a10 	vmov	r0, s0
 801160c:	ee10 2a10 	vmov	r2, s0
 8011610:	4629      	mov	r1, r5
 8011612:	462b      	mov	r3, r5
 8011614:	d10d      	bne.n	8011632 <__ieee754_sqrt+0x36>
 8011616:	f7ee ffef 	bl	80005f8 <__aeabi_dmul>
 801161a:	4602      	mov	r2, r0
 801161c:	460b      	mov	r3, r1
 801161e:	4620      	mov	r0, r4
 8011620:	4629      	mov	r1, r5
 8011622:	f7ee fe33 	bl	800028c <__adddf3>
 8011626:	4604      	mov	r4, r0
 8011628:	460d      	mov	r5, r1
 801162a:	ec45 4b10 	vmov	d0, r4, r5
 801162e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011632:	2d00      	cmp	r5, #0
 8011634:	dc0b      	bgt.n	801164e <__ieee754_sqrt+0x52>
 8011636:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 801163a:	4326      	orrs	r6, r4
 801163c:	d0f5      	beq.n	801162a <__ieee754_sqrt+0x2e>
 801163e:	b135      	cbz	r5, 801164e <__ieee754_sqrt+0x52>
 8011640:	f7ee fe22 	bl	8000288 <__aeabi_dsub>
 8011644:	4602      	mov	r2, r0
 8011646:	460b      	mov	r3, r1
 8011648:	f7ef f900 	bl	800084c <__aeabi_ddiv>
 801164c:	e7eb      	b.n	8011626 <__ieee754_sqrt+0x2a>
 801164e:	1509      	asrs	r1, r1, #20
 8011650:	f000 808d 	beq.w	801176e <__ieee754_sqrt+0x172>
 8011654:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011658:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 801165c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011660:	07c9      	lsls	r1, r1, #31
 8011662:	bf5c      	itt	pl
 8011664:	005b      	lslpl	r3, r3, #1
 8011666:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801166a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801166e:	bf58      	it	pl
 8011670:	0052      	lslpl	r2, r2, #1
 8011672:	2500      	movs	r5, #0
 8011674:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8011678:	1076      	asrs	r6, r6, #1
 801167a:	0052      	lsls	r2, r2, #1
 801167c:	f04f 0e16 	mov.w	lr, #22
 8011680:	46ac      	mov	ip, r5
 8011682:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8011686:	eb0c 0001 	add.w	r0, ip, r1
 801168a:	4298      	cmp	r0, r3
 801168c:	bfde      	ittt	le
 801168e:	1a1b      	suble	r3, r3, r0
 8011690:	eb00 0c01 	addle.w	ip, r0, r1
 8011694:	186d      	addle	r5, r5, r1
 8011696:	005b      	lsls	r3, r3, #1
 8011698:	f1be 0e01 	subs.w	lr, lr, #1
 801169c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80116a0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80116a4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80116a8:	d1ed      	bne.n	8011686 <__ieee754_sqrt+0x8a>
 80116aa:	4674      	mov	r4, lr
 80116ac:	2720      	movs	r7, #32
 80116ae:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80116b2:	4563      	cmp	r3, ip
 80116b4:	eb01 000e 	add.w	r0, r1, lr
 80116b8:	dc02      	bgt.n	80116c0 <__ieee754_sqrt+0xc4>
 80116ba:	d113      	bne.n	80116e4 <__ieee754_sqrt+0xe8>
 80116bc:	4290      	cmp	r0, r2
 80116be:	d811      	bhi.n	80116e4 <__ieee754_sqrt+0xe8>
 80116c0:	2800      	cmp	r0, #0
 80116c2:	eb00 0e01 	add.w	lr, r0, r1
 80116c6:	da57      	bge.n	8011778 <__ieee754_sqrt+0x17c>
 80116c8:	f1be 0f00 	cmp.w	lr, #0
 80116cc:	db54      	blt.n	8011778 <__ieee754_sqrt+0x17c>
 80116ce:	f10c 0801 	add.w	r8, ip, #1
 80116d2:	eba3 030c 	sub.w	r3, r3, ip
 80116d6:	4290      	cmp	r0, r2
 80116d8:	bf88      	it	hi
 80116da:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 80116de:	1a12      	subs	r2, r2, r0
 80116e0:	440c      	add	r4, r1
 80116e2:	46c4      	mov	ip, r8
 80116e4:	005b      	lsls	r3, r3, #1
 80116e6:	3f01      	subs	r7, #1
 80116e8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80116ec:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80116f0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80116f4:	d1dd      	bne.n	80116b2 <__ieee754_sqrt+0xb6>
 80116f6:	4313      	orrs	r3, r2
 80116f8:	d01b      	beq.n	8011732 <__ieee754_sqrt+0x136>
 80116fa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80117a8 <__ieee754_sqrt+0x1ac>
 80116fe:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80117ac <__ieee754_sqrt+0x1b0>
 8011702:	e9da 0100 	ldrd	r0, r1, [sl]
 8011706:	e9db 2300 	ldrd	r2, r3, [fp]
 801170a:	f7ee fdbd 	bl	8000288 <__aeabi_dsub>
 801170e:	e9da 8900 	ldrd	r8, r9, [sl]
 8011712:	4602      	mov	r2, r0
 8011714:	460b      	mov	r3, r1
 8011716:	4640      	mov	r0, r8
 8011718:	4649      	mov	r1, r9
 801171a:	f7ef f9e9 	bl	8000af0 <__aeabi_dcmple>
 801171e:	b140      	cbz	r0, 8011732 <__ieee754_sqrt+0x136>
 8011720:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8011724:	e9da 0100 	ldrd	r0, r1, [sl]
 8011728:	e9db 2300 	ldrd	r2, r3, [fp]
 801172c:	d126      	bne.n	801177c <__ieee754_sqrt+0x180>
 801172e:	3501      	adds	r5, #1
 8011730:	463c      	mov	r4, r7
 8011732:	106a      	asrs	r2, r5, #1
 8011734:	0863      	lsrs	r3, r4, #1
 8011736:	07e9      	lsls	r1, r5, #31
 8011738:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 801173c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011740:	bf48      	it	mi
 8011742:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011746:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 801174a:	461c      	mov	r4, r3
 801174c:	e76d      	b.n	801162a <__ieee754_sqrt+0x2e>
 801174e:	0ad3      	lsrs	r3, r2, #11
 8011750:	3815      	subs	r0, #21
 8011752:	0552      	lsls	r2, r2, #21
 8011754:	2b00      	cmp	r3, #0
 8011756:	d0fa      	beq.n	801174e <__ieee754_sqrt+0x152>
 8011758:	02dc      	lsls	r4, r3, #11
 801175a:	d50a      	bpl.n	8011772 <__ieee754_sqrt+0x176>
 801175c:	f1c1 0420 	rsb	r4, r1, #32
 8011760:	fa22 f404 	lsr.w	r4, r2, r4
 8011764:	1e4d      	subs	r5, r1, #1
 8011766:	408a      	lsls	r2, r1
 8011768:	4323      	orrs	r3, r4
 801176a:	1b41      	subs	r1, r0, r5
 801176c:	e772      	b.n	8011654 <__ieee754_sqrt+0x58>
 801176e:	4608      	mov	r0, r1
 8011770:	e7f0      	b.n	8011754 <__ieee754_sqrt+0x158>
 8011772:	005b      	lsls	r3, r3, #1
 8011774:	3101      	adds	r1, #1
 8011776:	e7ef      	b.n	8011758 <__ieee754_sqrt+0x15c>
 8011778:	46e0      	mov	r8, ip
 801177a:	e7aa      	b.n	80116d2 <__ieee754_sqrt+0xd6>
 801177c:	f7ee fd86 	bl	800028c <__adddf3>
 8011780:	e9da 8900 	ldrd	r8, r9, [sl]
 8011784:	4602      	mov	r2, r0
 8011786:	460b      	mov	r3, r1
 8011788:	4640      	mov	r0, r8
 801178a:	4649      	mov	r1, r9
 801178c:	f7ef f9a6 	bl	8000adc <__aeabi_dcmplt>
 8011790:	b120      	cbz	r0, 801179c <__ieee754_sqrt+0x1a0>
 8011792:	1ca0      	adds	r0, r4, #2
 8011794:	bf08      	it	eq
 8011796:	3501      	addeq	r5, #1
 8011798:	3402      	adds	r4, #2
 801179a:	e7ca      	b.n	8011732 <__ieee754_sqrt+0x136>
 801179c:	3401      	adds	r4, #1
 801179e:	f024 0401 	bic.w	r4, r4, #1
 80117a2:	e7c6      	b.n	8011732 <__ieee754_sqrt+0x136>
 80117a4:	7ff00000 	.word	0x7ff00000
 80117a8:	200002c8 	.word	0x200002c8
 80117ac:	200002d0 	.word	0x200002d0

080117b0 <round>:
 80117b0:	ec53 2b10 	vmov	r2, r3, d0
 80117b4:	b570      	push	{r4, r5, r6, lr}
 80117b6:	f3c3 540a 	ubfx	r4, r3, #20, #11
 80117ba:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 80117be:	2813      	cmp	r0, #19
 80117c0:	ee10 5a10 	vmov	r5, s0
 80117c4:	4619      	mov	r1, r3
 80117c6:	dc18      	bgt.n	80117fa <round+0x4a>
 80117c8:	2800      	cmp	r0, #0
 80117ca:	da09      	bge.n	80117e0 <round+0x30>
 80117cc:	3001      	adds	r0, #1
 80117ce:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 80117d2:	d103      	bne.n	80117dc <round+0x2c>
 80117d4:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 80117d8:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 80117dc:	2300      	movs	r3, #0
 80117de:	e02a      	b.n	8011836 <round+0x86>
 80117e0:	4c16      	ldr	r4, [pc, #88]	; (801183c <round+0x8c>)
 80117e2:	4104      	asrs	r4, r0
 80117e4:	ea03 0604 	and.w	r6, r3, r4
 80117e8:	4316      	orrs	r6, r2
 80117ea:	d011      	beq.n	8011810 <round+0x60>
 80117ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80117f0:	4103      	asrs	r3, r0
 80117f2:	440b      	add	r3, r1
 80117f4:	ea23 0104 	bic.w	r1, r3, r4
 80117f8:	e7f0      	b.n	80117dc <round+0x2c>
 80117fa:	2833      	cmp	r0, #51	; 0x33
 80117fc:	dd0b      	ble.n	8011816 <round+0x66>
 80117fe:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8011802:	d105      	bne.n	8011810 <round+0x60>
 8011804:	ee10 0a10 	vmov	r0, s0
 8011808:	f7ee fd40 	bl	800028c <__adddf3>
 801180c:	4602      	mov	r2, r0
 801180e:	460b      	mov	r3, r1
 8011810:	ec43 2b10 	vmov	d0, r2, r3
 8011814:	bd70      	pop	{r4, r5, r6, pc}
 8011816:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 801181a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801181e:	40f4      	lsrs	r4, r6
 8011820:	4214      	tst	r4, r2
 8011822:	d0f5      	beq.n	8011810 <round+0x60>
 8011824:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8011828:	2301      	movs	r3, #1
 801182a:	4083      	lsls	r3, r0
 801182c:	195b      	adds	r3, r3, r5
 801182e:	bf28      	it	cs
 8011830:	3101      	addcs	r1, #1
 8011832:	ea23 0304 	bic.w	r3, r3, r4
 8011836:	461a      	mov	r2, r3
 8011838:	460b      	mov	r3, r1
 801183a:	e7e9      	b.n	8011810 <round+0x60>
 801183c:	000fffff 	.word	0x000fffff

08011840 <__ieee754_pow>:
 8011840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011844:	ed2d 8b06 	vpush	{d8-d10}
 8011848:	b089      	sub	sp, #36	; 0x24
 801184a:	ed8d 1b00 	vstr	d1, [sp]
 801184e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011852:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8011856:	ea58 0102 	orrs.w	r1, r8, r2
 801185a:	ec57 6b10 	vmov	r6, r7, d0
 801185e:	d115      	bne.n	801188c <__ieee754_pow+0x4c>
 8011860:	19b3      	adds	r3, r6, r6
 8011862:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8011866:	4152      	adcs	r2, r2
 8011868:	4299      	cmp	r1, r3
 801186a:	4b89      	ldr	r3, [pc, #548]	; (8011a90 <__ieee754_pow+0x250>)
 801186c:	4193      	sbcs	r3, r2
 801186e:	f080 84d1 	bcs.w	8012214 <__ieee754_pow+0x9d4>
 8011872:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011876:	4630      	mov	r0, r6
 8011878:	4639      	mov	r1, r7
 801187a:	f7ee fd07 	bl	800028c <__adddf3>
 801187e:	ec41 0b10 	vmov	d0, r0, r1
 8011882:	b009      	add	sp, #36	; 0x24
 8011884:	ecbd 8b06 	vpop	{d8-d10}
 8011888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801188c:	4b81      	ldr	r3, [pc, #516]	; (8011a94 <__ieee754_pow+0x254>)
 801188e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8011892:	429c      	cmp	r4, r3
 8011894:	ee10 aa10 	vmov	sl, s0
 8011898:	463d      	mov	r5, r7
 801189a:	dc06      	bgt.n	80118aa <__ieee754_pow+0x6a>
 801189c:	d101      	bne.n	80118a2 <__ieee754_pow+0x62>
 801189e:	2e00      	cmp	r6, #0
 80118a0:	d1e7      	bne.n	8011872 <__ieee754_pow+0x32>
 80118a2:	4598      	cmp	r8, r3
 80118a4:	dc01      	bgt.n	80118aa <__ieee754_pow+0x6a>
 80118a6:	d10f      	bne.n	80118c8 <__ieee754_pow+0x88>
 80118a8:	b172      	cbz	r2, 80118c8 <__ieee754_pow+0x88>
 80118aa:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80118ae:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80118b2:	ea55 050a 	orrs.w	r5, r5, sl
 80118b6:	d1dc      	bne.n	8011872 <__ieee754_pow+0x32>
 80118b8:	e9dd 3200 	ldrd	r3, r2, [sp]
 80118bc:	18db      	adds	r3, r3, r3
 80118be:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80118c2:	4152      	adcs	r2, r2
 80118c4:	429d      	cmp	r5, r3
 80118c6:	e7d0      	b.n	801186a <__ieee754_pow+0x2a>
 80118c8:	2d00      	cmp	r5, #0
 80118ca:	da3b      	bge.n	8011944 <__ieee754_pow+0x104>
 80118cc:	4b72      	ldr	r3, [pc, #456]	; (8011a98 <__ieee754_pow+0x258>)
 80118ce:	4598      	cmp	r8, r3
 80118d0:	dc51      	bgt.n	8011976 <__ieee754_pow+0x136>
 80118d2:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80118d6:	4598      	cmp	r8, r3
 80118d8:	f340 84ab 	ble.w	8012232 <__ieee754_pow+0x9f2>
 80118dc:	ea4f 5328 	mov.w	r3, r8, asr #20
 80118e0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80118e4:	2b14      	cmp	r3, #20
 80118e6:	dd0f      	ble.n	8011908 <__ieee754_pow+0xc8>
 80118e8:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80118ec:	fa22 f103 	lsr.w	r1, r2, r3
 80118f0:	fa01 f303 	lsl.w	r3, r1, r3
 80118f4:	4293      	cmp	r3, r2
 80118f6:	f040 849c 	bne.w	8012232 <__ieee754_pow+0x9f2>
 80118fa:	f001 0101 	and.w	r1, r1, #1
 80118fe:	f1c1 0302 	rsb	r3, r1, #2
 8011902:	9304      	str	r3, [sp, #16]
 8011904:	b182      	cbz	r2, 8011928 <__ieee754_pow+0xe8>
 8011906:	e05f      	b.n	80119c8 <__ieee754_pow+0x188>
 8011908:	2a00      	cmp	r2, #0
 801190a:	d15b      	bne.n	80119c4 <__ieee754_pow+0x184>
 801190c:	f1c3 0314 	rsb	r3, r3, #20
 8011910:	fa48 f103 	asr.w	r1, r8, r3
 8011914:	fa01 f303 	lsl.w	r3, r1, r3
 8011918:	4543      	cmp	r3, r8
 801191a:	f040 8487 	bne.w	801222c <__ieee754_pow+0x9ec>
 801191e:	f001 0101 	and.w	r1, r1, #1
 8011922:	f1c1 0302 	rsb	r3, r1, #2
 8011926:	9304      	str	r3, [sp, #16]
 8011928:	4b5c      	ldr	r3, [pc, #368]	; (8011a9c <__ieee754_pow+0x25c>)
 801192a:	4598      	cmp	r8, r3
 801192c:	d132      	bne.n	8011994 <__ieee754_pow+0x154>
 801192e:	f1b9 0f00 	cmp.w	r9, #0
 8011932:	f280 8477 	bge.w	8012224 <__ieee754_pow+0x9e4>
 8011936:	4959      	ldr	r1, [pc, #356]	; (8011a9c <__ieee754_pow+0x25c>)
 8011938:	4632      	mov	r2, r6
 801193a:	463b      	mov	r3, r7
 801193c:	2000      	movs	r0, #0
 801193e:	f7ee ff85 	bl	800084c <__aeabi_ddiv>
 8011942:	e79c      	b.n	801187e <__ieee754_pow+0x3e>
 8011944:	2300      	movs	r3, #0
 8011946:	9304      	str	r3, [sp, #16]
 8011948:	2a00      	cmp	r2, #0
 801194a:	d13d      	bne.n	80119c8 <__ieee754_pow+0x188>
 801194c:	4b51      	ldr	r3, [pc, #324]	; (8011a94 <__ieee754_pow+0x254>)
 801194e:	4598      	cmp	r8, r3
 8011950:	d1ea      	bne.n	8011928 <__ieee754_pow+0xe8>
 8011952:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8011956:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801195a:	ea53 030a 	orrs.w	r3, r3, sl
 801195e:	f000 8459 	beq.w	8012214 <__ieee754_pow+0x9d4>
 8011962:	4b4f      	ldr	r3, [pc, #316]	; (8011aa0 <__ieee754_pow+0x260>)
 8011964:	429c      	cmp	r4, r3
 8011966:	dd08      	ble.n	801197a <__ieee754_pow+0x13a>
 8011968:	f1b9 0f00 	cmp.w	r9, #0
 801196c:	f2c0 8456 	blt.w	801221c <__ieee754_pow+0x9dc>
 8011970:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011974:	e783      	b.n	801187e <__ieee754_pow+0x3e>
 8011976:	2302      	movs	r3, #2
 8011978:	e7e5      	b.n	8011946 <__ieee754_pow+0x106>
 801197a:	f1b9 0f00 	cmp.w	r9, #0
 801197e:	f04f 0000 	mov.w	r0, #0
 8011982:	f04f 0100 	mov.w	r1, #0
 8011986:	f6bf af7a 	bge.w	801187e <__ieee754_pow+0x3e>
 801198a:	e9dd 0300 	ldrd	r0, r3, [sp]
 801198e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011992:	e774      	b.n	801187e <__ieee754_pow+0x3e>
 8011994:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8011998:	d106      	bne.n	80119a8 <__ieee754_pow+0x168>
 801199a:	4632      	mov	r2, r6
 801199c:	463b      	mov	r3, r7
 801199e:	4630      	mov	r0, r6
 80119a0:	4639      	mov	r1, r7
 80119a2:	f7ee fe29 	bl	80005f8 <__aeabi_dmul>
 80119a6:	e76a      	b.n	801187e <__ieee754_pow+0x3e>
 80119a8:	4b3e      	ldr	r3, [pc, #248]	; (8011aa4 <__ieee754_pow+0x264>)
 80119aa:	4599      	cmp	r9, r3
 80119ac:	d10c      	bne.n	80119c8 <__ieee754_pow+0x188>
 80119ae:	2d00      	cmp	r5, #0
 80119b0:	db0a      	blt.n	80119c8 <__ieee754_pow+0x188>
 80119b2:	ec47 6b10 	vmov	d0, r6, r7
 80119b6:	b009      	add	sp, #36	; 0x24
 80119b8:	ecbd 8b06 	vpop	{d8-d10}
 80119bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80119c0:	f7ff be1c 	b.w	80115fc <__ieee754_sqrt>
 80119c4:	2300      	movs	r3, #0
 80119c6:	9304      	str	r3, [sp, #16]
 80119c8:	ec47 6b10 	vmov	d0, r6, r7
 80119cc:	f7ff fe02 	bl	80115d4 <fabs>
 80119d0:	ec51 0b10 	vmov	r0, r1, d0
 80119d4:	f1ba 0f00 	cmp.w	sl, #0
 80119d8:	d129      	bne.n	8011a2e <__ieee754_pow+0x1ee>
 80119da:	b124      	cbz	r4, 80119e6 <__ieee754_pow+0x1a6>
 80119dc:	4b2f      	ldr	r3, [pc, #188]	; (8011a9c <__ieee754_pow+0x25c>)
 80119de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80119e2:	429a      	cmp	r2, r3
 80119e4:	d123      	bne.n	8011a2e <__ieee754_pow+0x1ee>
 80119e6:	f1b9 0f00 	cmp.w	r9, #0
 80119ea:	da05      	bge.n	80119f8 <__ieee754_pow+0x1b8>
 80119ec:	4602      	mov	r2, r0
 80119ee:	460b      	mov	r3, r1
 80119f0:	2000      	movs	r0, #0
 80119f2:	492a      	ldr	r1, [pc, #168]	; (8011a9c <__ieee754_pow+0x25c>)
 80119f4:	f7ee ff2a 	bl	800084c <__aeabi_ddiv>
 80119f8:	2d00      	cmp	r5, #0
 80119fa:	f6bf af40 	bge.w	801187e <__ieee754_pow+0x3e>
 80119fe:	9b04      	ldr	r3, [sp, #16]
 8011a00:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011a04:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011a08:	431c      	orrs	r4, r3
 8011a0a:	d108      	bne.n	8011a1e <__ieee754_pow+0x1de>
 8011a0c:	4602      	mov	r2, r0
 8011a0e:	460b      	mov	r3, r1
 8011a10:	4610      	mov	r0, r2
 8011a12:	4619      	mov	r1, r3
 8011a14:	f7ee fc38 	bl	8000288 <__aeabi_dsub>
 8011a18:	4602      	mov	r2, r0
 8011a1a:	460b      	mov	r3, r1
 8011a1c:	e78f      	b.n	801193e <__ieee754_pow+0xfe>
 8011a1e:	9b04      	ldr	r3, [sp, #16]
 8011a20:	2b01      	cmp	r3, #1
 8011a22:	f47f af2c 	bne.w	801187e <__ieee754_pow+0x3e>
 8011a26:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a2a:	4619      	mov	r1, r3
 8011a2c:	e727      	b.n	801187e <__ieee754_pow+0x3e>
 8011a2e:	0feb      	lsrs	r3, r5, #31
 8011a30:	3b01      	subs	r3, #1
 8011a32:	9306      	str	r3, [sp, #24]
 8011a34:	9a06      	ldr	r2, [sp, #24]
 8011a36:	9b04      	ldr	r3, [sp, #16]
 8011a38:	4313      	orrs	r3, r2
 8011a3a:	d102      	bne.n	8011a42 <__ieee754_pow+0x202>
 8011a3c:	4632      	mov	r2, r6
 8011a3e:	463b      	mov	r3, r7
 8011a40:	e7e6      	b.n	8011a10 <__ieee754_pow+0x1d0>
 8011a42:	4b19      	ldr	r3, [pc, #100]	; (8011aa8 <__ieee754_pow+0x268>)
 8011a44:	4598      	cmp	r8, r3
 8011a46:	f340 80fb 	ble.w	8011c40 <__ieee754_pow+0x400>
 8011a4a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011a4e:	4598      	cmp	r8, r3
 8011a50:	4b13      	ldr	r3, [pc, #76]	; (8011aa0 <__ieee754_pow+0x260>)
 8011a52:	dd0c      	ble.n	8011a6e <__ieee754_pow+0x22e>
 8011a54:	429c      	cmp	r4, r3
 8011a56:	dc0f      	bgt.n	8011a78 <__ieee754_pow+0x238>
 8011a58:	f1b9 0f00 	cmp.w	r9, #0
 8011a5c:	da0f      	bge.n	8011a7e <__ieee754_pow+0x23e>
 8011a5e:	2000      	movs	r0, #0
 8011a60:	b009      	add	sp, #36	; 0x24
 8011a62:	ecbd 8b06 	vpop	{d8-d10}
 8011a66:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a6a:	f000 bc3a 	b.w	80122e2 <__math_oflow>
 8011a6e:	429c      	cmp	r4, r3
 8011a70:	dbf2      	blt.n	8011a58 <__ieee754_pow+0x218>
 8011a72:	4b0a      	ldr	r3, [pc, #40]	; (8011a9c <__ieee754_pow+0x25c>)
 8011a74:	429c      	cmp	r4, r3
 8011a76:	dd19      	ble.n	8011aac <__ieee754_pow+0x26c>
 8011a78:	f1b9 0f00 	cmp.w	r9, #0
 8011a7c:	dcef      	bgt.n	8011a5e <__ieee754_pow+0x21e>
 8011a7e:	2000      	movs	r0, #0
 8011a80:	b009      	add	sp, #36	; 0x24
 8011a82:	ecbd 8b06 	vpop	{d8-d10}
 8011a86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a8a:	f000 bc21 	b.w	80122d0 <__math_uflow>
 8011a8e:	bf00      	nop
 8011a90:	fff00000 	.word	0xfff00000
 8011a94:	7ff00000 	.word	0x7ff00000
 8011a98:	433fffff 	.word	0x433fffff
 8011a9c:	3ff00000 	.word	0x3ff00000
 8011aa0:	3fefffff 	.word	0x3fefffff
 8011aa4:	3fe00000 	.word	0x3fe00000
 8011aa8:	41e00000 	.word	0x41e00000
 8011aac:	4b60      	ldr	r3, [pc, #384]	; (8011c30 <__ieee754_pow+0x3f0>)
 8011aae:	2200      	movs	r2, #0
 8011ab0:	f7ee fbea 	bl	8000288 <__aeabi_dsub>
 8011ab4:	a354      	add	r3, pc, #336	; (adr r3, 8011c08 <__ieee754_pow+0x3c8>)
 8011ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011aba:	4604      	mov	r4, r0
 8011abc:	460d      	mov	r5, r1
 8011abe:	f7ee fd9b 	bl	80005f8 <__aeabi_dmul>
 8011ac2:	a353      	add	r3, pc, #332	; (adr r3, 8011c10 <__ieee754_pow+0x3d0>)
 8011ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ac8:	4606      	mov	r6, r0
 8011aca:	460f      	mov	r7, r1
 8011acc:	4620      	mov	r0, r4
 8011ace:	4629      	mov	r1, r5
 8011ad0:	f7ee fd92 	bl	80005f8 <__aeabi_dmul>
 8011ad4:	4b57      	ldr	r3, [pc, #348]	; (8011c34 <__ieee754_pow+0x3f4>)
 8011ad6:	4682      	mov	sl, r0
 8011ad8:	468b      	mov	fp, r1
 8011ada:	2200      	movs	r2, #0
 8011adc:	4620      	mov	r0, r4
 8011ade:	4629      	mov	r1, r5
 8011ae0:	f7ee fd8a 	bl	80005f8 <__aeabi_dmul>
 8011ae4:	4602      	mov	r2, r0
 8011ae6:	460b      	mov	r3, r1
 8011ae8:	a14b      	add	r1, pc, #300	; (adr r1, 8011c18 <__ieee754_pow+0x3d8>)
 8011aea:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011aee:	f7ee fbcb 	bl	8000288 <__aeabi_dsub>
 8011af2:	4622      	mov	r2, r4
 8011af4:	462b      	mov	r3, r5
 8011af6:	f7ee fd7f 	bl	80005f8 <__aeabi_dmul>
 8011afa:	4602      	mov	r2, r0
 8011afc:	460b      	mov	r3, r1
 8011afe:	2000      	movs	r0, #0
 8011b00:	494d      	ldr	r1, [pc, #308]	; (8011c38 <__ieee754_pow+0x3f8>)
 8011b02:	f7ee fbc1 	bl	8000288 <__aeabi_dsub>
 8011b06:	4622      	mov	r2, r4
 8011b08:	4680      	mov	r8, r0
 8011b0a:	4689      	mov	r9, r1
 8011b0c:	462b      	mov	r3, r5
 8011b0e:	4620      	mov	r0, r4
 8011b10:	4629      	mov	r1, r5
 8011b12:	f7ee fd71 	bl	80005f8 <__aeabi_dmul>
 8011b16:	4602      	mov	r2, r0
 8011b18:	460b      	mov	r3, r1
 8011b1a:	4640      	mov	r0, r8
 8011b1c:	4649      	mov	r1, r9
 8011b1e:	f7ee fd6b 	bl	80005f8 <__aeabi_dmul>
 8011b22:	a33f      	add	r3, pc, #252	; (adr r3, 8011c20 <__ieee754_pow+0x3e0>)
 8011b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b28:	f7ee fd66 	bl	80005f8 <__aeabi_dmul>
 8011b2c:	4602      	mov	r2, r0
 8011b2e:	460b      	mov	r3, r1
 8011b30:	4650      	mov	r0, sl
 8011b32:	4659      	mov	r1, fp
 8011b34:	f7ee fba8 	bl	8000288 <__aeabi_dsub>
 8011b38:	4602      	mov	r2, r0
 8011b3a:	460b      	mov	r3, r1
 8011b3c:	4680      	mov	r8, r0
 8011b3e:	4689      	mov	r9, r1
 8011b40:	4630      	mov	r0, r6
 8011b42:	4639      	mov	r1, r7
 8011b44:	f7ee fba2 	bl	800028c <__adddf3>
 8011b48:	2000      	movs	r0, #0
 8011b4a:	4632      	mov	r2, r6
 8011b4c:	463b      	mov	r3, r7
 8011b4e:	4604      	mov	r4, r0
 8011b50:	460d      	mov	r5, r1
 8011b52:	f7ee fb99 	bl	8000288 <__aeabi_dsub>
 8011b56:	4602      	mov	r2, r0
 8011b58:	460b      	mov	r3, r1
 8011b5a:	4640      	mov	r0, r8
 8011b5c:	4649      	mov	r1, r9
 8011b5e:	f7ee fb93 	bl	8000288 <__aeabi_dsub>
 8011b62:	9b04      	ldr	r3, [sp, #16]
 8011b64:	9a06      	ldr	r2, [sp, #24]
 8011b66:	3b01      	subs	r3, #1
 8011b68:	4313      	orrs	r3, r2
 8011b6a:	4682      	mov	sl, r0
 8011b6c:	468b      	mov	fp, r1
 8011b6e:	f040 81e7 	bne.w	8011f40 <__ieee754_pow+0x700>
 8011b72:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8011c28 <__ieee754_pow+0x3e8>
 8011b76:	eeb0 8a47 	vmov.f32	s16, s14
 8011b7a:	eef0 8a67 	vmov.f32	s17, s15
 8011b7e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8011b82:	2600      	movs	r6, #0
 8011b84:	4632      	mov	r2, r6
 8011b86:	463b      	mov	r3, r7
 8011b88:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011b8c:	f7ee fb7c 	bl	8000288 <__aeabi_dsub>
 8011b90:	4622      	mov	r2, r4
 8011b92:	462b      	mov	r3, r5
 8011b94:	f7ee fd30 	bl	80005f8 <__aeabi_dmul>
 8011b98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011b9c:	4680      	mov	r8, r0
 8011b9e:	4689      	mov	r9, r1
 8011ba0:	4650      	mov	r0, sl
 8011ba2:	4659      	mov	r1, fp
 8011ba4:	f7ee fd28 	bl	80005f8 <__aeabi_dmul>
 8011ba8:	4602      	mov	r2, r0
 8011baa:	460b      	mov	r3, r1
 8011bac:	4640      	mov	r0, r8
 8011bae:	4649      	mov	r1, r9
 8011bb0:	f7ee fb6c 	bl	800028c <__adddf3>
 8011bb4:	4632      	mov	r2, r6
 8011bb6:	463b      	mov	r3, r7
 8011bb8:	4680      	mov	r8, r0
 8011bba:	4689      	mov	r9, r1
 8011bbc:	4620      	mov	r0, r4
 8011bbe:	4629      	mov	r1, r5
 8011bc0:	f7ee fd1a 	bl	80005f8 <__aeabi_dmul>
 8011bc4:	460b      	mov	r3, r1
 8011bc6:	4604      	mov	r4, r0
 8011bc8:	460d      	mov	r5, r1
 8011bca:	4602      	mov	r2, r0
 8011bcc:	4649      	mov	r1, r9
 8011bce:	4640      	mov	r0, r8
 8011bd0:	f7ee fb5c 	bl	800028c <__adddf3>
 8011bd4:	4b19      	ldr	r3, [pc, #100]	; (8011c3c <__ieee754_pow+0x3fc>)
 8011bd6:	4299      	cmp	r1, r3
 8011bd8:	ec45 4b19 	vmov	d9, r4, r5
 8011bdc:	4606      	mov	r6, r0
 8011bde:	460f      	mov	r7, r1
 8011be0:	468b      	mov	fp, r1
 8011be2:	f340 82f0 	ble.w	80121c6 <__ieee754_pow+0x986>
 8011be6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8011bea:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8011bee:	4303      	orrs	r3, r0
 8011bf0:	f000 81e4 	beq.w	8011fbc <__ieee754_pow+0x77c>
 8011bf4:	ec51 0b18 	vmov	r0, r1, d8
 8011bf8:	2200      	movs	r2, #0
 8011bfa:	2300      	movs	r3, #0
 8011bfc:	f7ee ff6e 	bl	8000adc <__aeabi_dcmplt>
 8011c00:	3800      	subs	r0, #0
 8011c02:	bf18      	it	ne
 8011c04:	2001      	movne	r0, #1
 8011c06:	e72b      	b.n	8011a60 <__ieee754_pow+0x220>
 8011c08:	60000000 	.word	0x60000000
 8011c0c:	3ff71547 	.word	0x3ff71547
 8011c10:	f85ddf44 	.word	0xf85ddf44
 8011c14:	3e54ae0b 	.word	0x3e54ae0b
 8011c18:	55555555 	.word	0x55555555
 8011c1c:	3fd55555 	.word	0x3fd55555
 8011c20:	652b82fe 	.word	0x652b82fe
 8011c24:	3ff71547 	.word	0x3ff71547
 8011c28:	00000000 	.word	0x00000000
 8011c2c:	bff00000 	.word	0xbff00000
 8011c30:	3ff00000 	.word	0x3ff00000
 8011c34:	3fd00000 	.word	0x3fd00000
 8011c38:	3fe00000 	.word	0x3fe00000
 8011c3c:	408fffff 	.word	0x408fffff
 8011c40:	4bd5      	ldr	r3, [pc, #852]	; (8011f98 <__ieee754_pow+0x758>)
 8011c42:	402b      	ands	r3, r5
 8011c44:	2200      	movs	r2, #0
 8011c46:	b92b      	cbnz	r3, 8011c54 <__ieee754_pow+0x414>
 8011c48:	4bd4      	ldr	r3, [pc, #848]	; (8011f9c <__ieee754_pow+0x75c>)
 8011c4a:	f7ee fcd5 	bl	80005f8 <__aeabi_dmul>
 8011c4e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011c52:	460c      	mov	r4, r1
 8011c54:	1523      	asrs	r3, r4, #20
 8011c56:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011c5a:	4413      	add	r3, r2
 8011c5c:	9305      	str	r3, [sp, #20]
 8011c5e:	4bd0      	ldr	r3, [pc, #832]	; (8011fa0 <__ieee754_pow+0x760>)
 8011c60:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011c64:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8011c68:	429c      	cmp	r4, r3
 8011c6a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011c6e:	dd08      	ble.n	8011c82 <__ieee754_pow+0x442>
 8011c70:	4bcc      	ldr	r3, [pc, #816]	; (8011fa4 <__ieee754_pow+0x764>)
 8011c72:	429c      	cmp	r4, r3
 8011c74:	f340 8162 	ble.w	8011f3c <__ieee754_pow+0x6fc>
 8011c78:	9b05      	ldr	r3, [sp, #20]
 8011c7a:	3301      	adds	r3, #1
 8011c7c:	9305      	str	r3, [sp, #20]
 8011c7e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011c82:	2400      	movs	r4, #0
 8011c84:	00e3      	lsls	r3, r4, #3
 8011c86:	9307      	str	r3, [sp, #28]
 8011c88:	4bc7      	ldr	r3, [pc, #796]	; (8011fa8 <__ieee754_pow+0x768>)
 8011c8a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011c8e:	ed93 7b00 	vldr	d7, [r3]
 8011c92:	4629      	mov	r1, r5
 8011c94:	ec53 2b17 	vmov	r2, r3, d7
 8011c98:	eeb0 9a47 	vmov.f32	s18, s14
 8011c9c:	eef0 9a67 	vmov.f32	s19, s15
 8011ca0:	4682      	mov	sl, r0
 8011ca2:	f7ee faf1 	bl	8000288 <__aeabi_dsub>
 8011ca6:	4652      	mov	r2, sl
 8011ca8:	4606      	mov	r6, r0
 8011caa:	460f      	mov	r7, r1
 8011cac:	462b      	mov	r3, r5
 8011cae:	ec51 0b19 	vmov	r0, r1, d9
 8011cb2:	f7ee faeb 	bl	800028c <__adddf3>
 8011cb6:	4602      	mov	r2, r0
 8011cb8:	460b      	mov	r3, r1
 8011cba:	2000      	movs	r0, #0
 8011cbc:	49bb      	ldr	r1, [pc, #748]	; (8011fac <__ieee754_pow+0x76c>)
 8011cbe:	f7ee fdc5 	bl	800084c <__aeabi_ddiv>
 8011cc2:	ec41 0b1a 	vmov	d10, r0, r1
 8011cc6:	4602      	mov	r2, r0
 8011cc8:	460b      	mov	r3, r1
 8011cca:	4630      	mov	r0, r6
 8011ccc:	4639      	mov	r1, r7
 8011cce:	f7ee fc93 	bl	80005f8 <__aeabi_dmul>
 8011cd2:	2300      	movs	r3, #0
 8011cd4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011cd8:	9302      	str	r3, [sp, #8]
 8011cda:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8011cde:	46ab      	mov	fp, r5
 8011ce0:	106d      	asrs	r5, r5, #1
 8011ce2:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011ce6:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8011cea:	ec41 0b18 	vmov	d8, r0, r1
 8011cee:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011cf2:	2200      	movs	r2, #0
 8011cf4:	4640      	mov	r0, r8
 8011cf6:	4649      	mov	r1, r9
 8011cf8:	4614      	mov	r4, r2
 8011cfa:	461d      	mov	r5, r3
 8011cfc:	f7ee fc7c 	bl	80005f8 <__aeabi_dmul>
 8011d00:	4602      	mov	r2, r0
 8011d02:	460b      	mov	r3, r1
 8011d04:	4630      	mov	r0, r6
 8011d06:	4639      	mov	r1, r7
 8011d08:	f7ee fabe 	bl	8000288 <__aeabi_dsub>
 8011d0c:	ec53 2b19 	vmov	r2, r3, d9
 8011d10:	4606      	mov	r6, r0
 8011d12:	460f      	mov	r7, r1
 8011d14:	4620      	mov	r0, r4
 8011d16:	4629      	mov	r1, r5
 8011d18:	f7ee fab6 	bl	8000288 <__aeabi_dsub>
 8011d1c:	4602      	mov	r2, r0
 8011d1e:	460b      	mov	r3, r1
 8011d20:	4650      	mov	r0, sl
 8011d22:	4659      	mov	r1, fp
 8011d24:	f7ee fab0 	bl	8000288 <__aeabi_dsub>
 8011d28:	4642      	mov	r2, r8
 8011d2a:	464b      	mov	r3, r9
 8011d2c:	f7ee fc64 	bl	80005f8 <__aeabi_dmul>
 8011d30:	4602      	mov	r2, r0
 8011d32:	460b      	mov	r3, r1
 8011d34:	4630      	mov	r0, r6
 8011d36:	4639      	mov	r1, r7
 8011d38:	f7ee faa6 	bl	8000288 <__aeabi_dsub>
 8011d3c:	ec53 2b1a 	vmov	r2, r3, d10
 8011d40:	f7ee fc5a 	bl	80005f8 <__aeabi_dmul>
 8011d44:	ec53 2b18 	vmov	r2, r3, d8
 8011d48:	ec41 0b19 	vmov	d9, r0, r1
 8011d4c:	ec51 0b18 	vmov	r0, r1, d8
 8011d50:	f7ee fc52 	bl	80005f8 <__aeabi_dmul>
 8011d54:	a37c      	add	r3, pc, #496	; (adr r3, 8011f48 <__ieee754_pow+0x708>)
 8011d56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d5a:	4604      	mov	r4, r0
 8011d5c:	460d      	mov	r5, r1
 8011d5e:	f7ee fc4b 	bl	80005f8 <__aeabi_dmul>
 8011d62:	a37b      	add	r3, pc, #492	; (adr r3, 8011f50 <__ieee754_pow+0x710>)
 8011d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d68:	f7ee fa90 	bl	800028c <__adddf3>
 8011d6c:	4622      	mov	r2, r4
 8011d6e:	462b      	mov	r3, r5
 8011d70:	f7ee fc42 	bl	80005f8 <__aeabi_dmul>
 8011d74:	a378      	add	r3, pc, #480	; (adr r3, 8011f58 <__ieee754_pow+0x718>)
 8011d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d7a:	f7ee fa87 	bl	800028c <__adddf3>
 8011d7e:	4622      	mov	r2, r4
 8011d80:	462b      	mov	r3, r5
 8011d82:	f7ee fc39 	bl	80005f8 <__aeabi_dmul>
 8011d86:	a376      	add	r3, pc, #472	; (adr r3, 8011f60 <__ieee754_pow+0x720>)
 8011d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d8c:	f7ee fa7e 	bl	800028c <__adddf3>
 8011d90:	4622      	mov	r2, r4
 8011d92:	462b      	mov	r3, r5
 8011d94:	f7ee fc30 	bl	80005f8 <__aeabi_dmul>
 8011d98:	a373      	add	r3, pc, #460	; (adr r3, 8011f68 <__ieee754_pow+0x728>)
 8011d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d9e:	f7ee fa75 	bl	800028c <__adddf3>
 8011da2:	4622      	mov	r2, r4
 8011da4:	462b      	mov	r3, r5
 8011da6:	f7ee fc27 	bl	80005f8 <__aeabi_dmul>
 8011daa:	a371      	add	r3, pc, #452	; (adr r3, 8011f70 <__ieee754_pow+0x730>)
 8011dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db0:	f7ee fa6c 	bl	800028c <__adddf3>
 8011db4:	4622      	mov	r2, r4
 8011db6:	4606      	mov	r6, r0
 8011db8:	460f      	mov	r7, r1
 8011dba:	462b      	mov	r3, r5
 8011dbc:	4620      	mov	r0, r4
 8011dbe:	4629      	mov	r1, r5
 8011dc0:	f7ee fc1a 	bl	80005f8 <__aeabi_dmul>
 8011dc4:	4602      	mov	r2, r0
 8011dc6:	460b      	mov	r3, r1
 8011dc8:	4630      	mov	r0, r6
 8011dca:	4639      	mov	r1, r7
 8011dcc:	f7ee fc14 	bl	80005f8 <__aeabi_dmul>
 8011dd0:	4642      	mov	r2, r8
 8011dd2:	4604      	mov	r4, r0
 8011dd4:	460d      	mov	r5, r1
 8011dd6:	464b      	mov	r3, r9
 8011dd8:	ec51 0b18 	vmov	r0, r1, d8
 8011ddc:	f7ee fa56 	bl	800028c <__adddf3>
 8011de0:	ec53 2b19 	vmov	r2, r3, d9
 8011de4:	f7ee fc08 	bl	80005f8 <__aeabi_dmul>
 8011de8:	4622      	mov	r2, r4
 8011dea:	462b      	mov	r3, r5
 8011dec:	f7ee fa4e 	bl	800028c <__adddf3>
 8011df0:	4642      	mov	r2, r8
 8011df2:	4682      	mov	sl, r0
 8011df4:	468b      	mov	fp, r1
 8011df6:	464b      	mov	r3, r9
 8011df8:	4640      	mov	r0, r8
 8011dfa:	4649      	mov	r1, r9
 8011dfc:	f7ee fbfc 	bl	80005f8 <__aeabi_dmul>
 8011e00:	4b6b      	ldr	r3, [pc, #428]	; (8011fb0 <__ieee754_pow+0x770>)
 8011e02:	2200      	movs	r2, #0
 8011e04:	4606      	mov	r6, r0
 8011e06:	460f      	mov	r7, r1
 8011e08:	f7ee fa40 	bl	800028c <__adddf3>
 8011e0c:	4652      	mov	r2, sl
 8011e0e:	465b      	mov	r3, fp
 8011e10:	f7ee fa3c 	bl	800028c <__adddf3>
 8011e14:	2000      	movs	r0, #0
 8011e16:	4604      	mov	r4, r0
 8011e18:	460d      	mov	r5, r1
 8011e1a:	4602      	mov	r2, r0
 8011e1c:	460b      	mov	r3, r1
 8011e1e:	4640      	mov	r0, r8
 8011e20:	4649      	mov	r1, r9
 8011e22:	f7ee fbe9 	bl	80005f8 <__aeabi_dmul>
 8011e26:	4b62      	ldr	r3, [pc, #392]	; (8011fb0 <__ieee754_pow+0x770>)
 8011e28:	4680      	mov	r8, r0
 8011e2a:	4689      	mov	r9, r1
 8011e2c:	2200      	movs	r2, #0
 8011e2e:	4620      	mov	r0, r4
 8011e30:	4629      	mov	r1, r5
 8011e32:	f7ee fa29 	bl	8000288 <__aeabi_dsub>
 8011e36:	4632      	mov	r2, r6
 8011e38:	463b      	mov	r3, r7
 8011e3a:	f7ee fa25 	bl	8000288 <__aeabi_dsub>
 8011e3e:	4602      	mov	r2, r0
 8011e40:	460b      	mov	r3, r1
 8011e42:	4650      	mov	r0, sl
 8011e44:	4659      	mov	r1, fp
 8011e46:	f7ee fa1f 	bl	8000288 <__aeabi_dsub>
 8011e4a:	ec53 2b18 	vmov	r2, r3, d8
 8011e4e:	f7ee fbd3 	bl	80005f8 <__aeabi_dmul>
 8011e52:	4622      	mov	r2, r4
 8011e54:	4606      	mov	r6, r0
 8011e56:	460f      	mov	r7, r1
 8011e58:	462b      	mov	r3, r5
 8011e5a:	ec51 0b19 	vmov	r0, r1, d9
 8011e5e:	f7ee fbcb 	bl	80005f8 <__aeabi_dmul>
 8011e62:	4602      	mov	r2, r0
 8011e64:	460b      	mov	r3, r1
 8011e66:	4630      	mov	r0, r6
 8011e68:	4639      	mov	r1, r7
 8011e6a:	f7ee fa0f 	bl	800028c <__adddf3>
 8011e6e:	4606      	mov	r6, r0
 8011e70:	460f      	mov	r7, r1
 8011e72:	4602      	mov	r2, r0
 8011e74:	460b      	mov	r3, r1
 8011e76:	4640      	mov	r0, r8
 8011e78:	4649      	mov	r1, r9
 8011e7a:	f7ee fa07 	bl	800028c <__adddf3>
 8011e7e:	a33e      	add	r3, pc, #248	; (adr r3, 8011f78 <__ieee754_pow+0x738>)
 8011e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e84:	2000      	movs	r0, #0
 8011e86:	4604      	mov	r4, r0
 8011e88:	460d      	mov	r5, r1
 8011e8a:	f7ee fbb5 	bl	80005f8 <__aeabi_dmul>
 8011e8e:	4642      	mov	r2, r8
 8011e90:	ec41 0b18 	vmov	d8, r0, r1
 8011e94:	464b      	mov	r3, r9
 8011e96:	4620      	mov	r0, r4
 8011e98:	4629      	mov	r1, r5
 8011e9a:	f7ee f9f5 	bl	8000288 <__aeabi_dsub>
 8011e9e:	4602      	mov	r2, r0
 8011ea0:	460b      	mov	r3, r1
 8011ea2:	4630      	mov	r0, r6
 8011ea4:	4639      	mov	r1, r7
 8011ea6:	f7ee f9ef 	bl	8000288 <__aeabi_dsub>
 8011eaa:	a335      	add	r3, pc, #212	; (adr r3, 8011f80 <__ieee754_pow+0x740>)
 8011eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb0:	f7ee fba2 	bl	80005f8 <__aeabi_dmul>
 8011eb4:	a334      	add	r3, pc, #208	; (adr r3, 8011f88 <__ieee754_pow+0x748>)
 8011eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eba:	4606      	mov	r6, r0
 8011ebc:	460f      	mov	r7, r1
 8011ebe:	4620      	mov	r0, r4
 8011ec0:	4629      	mov	r1, r5
 8011ec2:	f7ee fb99 	bl	80005f8 <__aeabi_dmul>
 8011ec6:	4602      	mov	r2, r0
 8011ec8:	460b      	mov	r3, r1
 8011eca:	4630      	mov	r0, r6
 8011ecc:	4639      	mov	r1, r7
 8011ece:	f7ee f9dd 	bl	800028c <__adddf3>
 8011ed2:	9a07      	ldr	r2, [sp, #28]
 8011ed4:	4b37      	ldr	r3, [pc, #220]	; (8011fb4 <__ieee754_pow+0x774>)
 8011ed6:	4413      	add	r3, r2
 8011ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011edc:	f7ee f9d6 	bl	800028c <__adddf3>
 8011ee0:	4682      	mov	sl, r0
 8011ee2:	9805      	ldr	r0, [sp, #20]
 8011ee4:	468b      	mov	fp, r1
 8011ee6:	f7ee fb1d 	bl	8000524 <__aeabi_i2d>
 8011eea:	9a07      	ldr	r2, [sp, #28]
 8011eec:	4b32      	ldr	r3, [pc, #200]	; (8011fb8 <__ieee754_pow+0x778>)
 8011eee:	4413      	add	r3, r2
 8011ef0:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011ef4:	4606      	mov	r6, r0
 8011ef6:	460f      	mov	r7, r1
 8011ef8:	4652      	mov	r2, sl
 8011efa:	465b      	mov	r3, fp
 8011efc:	ec51 0b18 	vmov	r0, r1, d8
 8011f00:	f7ee f9c4 	bl	800028c <__adddf3>
 8011f04:	4642      	mov	r2, r8
 8011f06:	464b      	mov	r3, r9
 8011f08:	f7ee f9c0 	bl	800028c <__adddf3>
 8011f0c:	4632      	mov	r2, r6
 8011f0e:	463b      	mov	r3, r7
 8011f10:	f7ee f9bc 	bl	800028c <__adddf3>
 8011f14:	2000      	movs	r0, #0
 8011f16:	4632      	mov	r2, r6
 8011f18:	463b      	mov	r3, r7
 8011f1a:	4604      	mov	r4, r0
 8011f1c:	460d      	mov	r5, r1
 8011f1e:	f7ee f9b3 	bl	8000288 <__aeabi_dsub>
 8011f22:	4642      	mov	r2, r8
 8011f24:	464b      	mov	r3, r9
 8011f26:	f7ee f9af 	bl	8000288 <__aeabi_dsub>
 8011f2a:	ec53 2b18 	vmov	r2, r3, d8
 8011f2e:	f7ee f9ab 	bl	8000288 <__aeabi_dsub>
 8011f32:	4602      	mov	r2, r0
 8011f34:	460b      	mov	r3, r1
 8011f36:	4650      	mov	r0, sl
 8011f38:	4659      	mov	r1, fp
 8011f3a:	e610      	b.n	8011b5e <__ieee754_pow+0x31e>
 8011f3c:	2401      	movs	r4, #1
 8011f3e:	e6a1      	b.n	8011c84 <__ieee754_pow+0x444>
 8011f40:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011f90 <__ieee754_pow+0x750>
 8011f44:	e617      	b.n	8011b76 <__ieee754_pow+0x336>
 8011f46:	bf00      	nop
 8011f48:	4a454eef 	.word	0x4a454eef
 8011f4c:	3fca7e28 	.word	0x3fca7e28
 8011f50:	93c9db65 	.word	0x93c9db65
 8011f54:	3fcd864a 	.word	0x3fcd864a
 8011f58:	a91d4101 	.word	0xa91d4101
 8011f5c:	3fd17460 	.word	0x3fd17460
 8011f60:	518f264d 	.word	0x518f264d
 8011f64:	3fd55555 	.word	0x3fd55555
 8011f68:	db6fabff 	.word	0xdb6fabff
 8011f6c:	3fdb6db6 	.word	0x3fdb6db6
 8011f70:	33333303 	.word	0x33333303
 8011f74:	3fe33333 	.word	0x3fe33333
 8011f78:	e0000000 	.word	0xe0000000
 8011f7c:	3feec709 	.word	0x3feec709
 8011f80:	dc3a03fd 	.word	0xdc3a03fd
 8011f84:	3feec709 	.word	0x3feec709
 8011f88:	145b01f5 	.word	0x145b01f5
 8011f8c:	be3e2fe0 	.word	0xbe3e2fe0
 8011f90:	00000000 	.word	0x00000000
 8011f94:	3ff00000 	.word	0x3ff00000
 8011f98:	7ff00000 	.word	0x7ff00000
 8011f9c:	43400000 	.word	0x43400000
 8011fa0:	0003988e 	.word	0x0003988e
 8011fa4:	000bb679 	.word	0x000bb679
 8011fa8:	08012848 	.word	0x08012848
 8011fac:	3ff00000 	.word	0x3ff00000
 8011fb0:	40080000 	.word	0x40080000
 8011fb4:	08012868 	.word	0x08012868
 8011fb8:	08012858 	.word	0x08012858
 8011fbc:	a3b3      	add	r3, pc, #716	; (adr r3, 801228c <__ieee754_pow+0xa4c>)
 8011fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011fc2:	4640      	mov	r0, r8
 8011fc4:	4649      	mov	r1, r9
 8011fc6:	f7ee f961 	bl	800028c <__adddf3>
 8011fca:	4622      	mov	r2, r4
 8011fcc:	ec41 0b1a 	vmov	d10, r0, r1
 8011fd0:	462b      	mov	r3, r5
 8011fd2:	4630      	mov	r0, r6
 8011fd4:	4639      	mov	r1, r7
 8011fd6:	f7ee f957 	bl	8000288 <__aeabi_dsub>
 8011fda:	4602      	mov	r2, r0
 8011fdc:	460b      	mov	r3, r1
 8011fde:	ec51 0b1a 	vmov	r0, r1, d10
 8011fe2:	f7ee fd99 	bl	8000b18 <__aeabi_dcmpgt>
 8011fe6:	2800      	cmp	r0, #0
 8011fe8:	f47f ae04 	bne.w	8011bf4 <__ieee754_pow+0x3b4>
 8011fec:	4aa2      	ldr	r2, [pc, #648]	; (8012278 <__ieee754_pow+0xa38>)
 8011fee:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011ff2:	4293      	cmp	r3, r2
 8011ff4:	f340 8107 	ble.w	8012206 <__ieee754_pow+0x9c6>
 8011ff8:	151b      	asrs	r3, r3, #20
 8011ffa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011ffe:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012002:	fa4a fa03 	asr.w	sl, sl, r3
 8012006:	44da      	add	sl, fp
 8012008:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801200c:	489b      	ldr	r0, [pc, #620]	; (801227c <__ieee754_pow+0xa3c>)
 801200e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012012:	4108      	asrs	r0, r1
 8012014:	ea00 030a 	and.w	r3, r0, sl
 8012018:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801201c:	f1c1 0114 	rsb	r1, r1, #20
 8012020:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012024:	fa4a fa01 	asr.w	sl, sl, r1
 8012028:	f1bb 0f00 	cmp.w	fp, #0
 801202c:	f04f 0200 	mov.w	r2, #0
 8012030:	4620      	mov	r0, r4
 8012032:	4629      	mov	r1, r5
 8012034:	bfb8      	it	lt
 8012036:	f1ca 0a00 	rsblt	sl, sl, #0
 801203a:	f7ee f925 	bl	8000288 <__aeabi_dsub>
 801203e:	ec41 0b19 	vmov	d9, r0, r1
 8012042:	4642      	mov	r2, r8
 8012044:	464b      	mov	r3, r9
 8012046:	ec51 0b19 	vmov	r0, r1, d9
 801204a:	f7ee f91f 	bl	800028c <__adddf3>
 801204e:	a37a      	add	r3, pc, #488	; (adr r3, 8012238 <__ieee754_pow+0x9f8>)
 8012050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012054:	2000      	movs	r0, #0
 8012056:	4604      	mov	r4, r0
 8012058:	460d      	mov	r5, r1
 801205a:	f7ee facd 	bl	80005f8 <__aeabi_dmul>
 801205e:	ec53 2b19 	vmov	r2, r3, d9
 8012062:	4606      	mov	r6, r0
 8012064:	460f      	mov	r7, r1
 8012066:	4620      	mov	r0, r4
 8012068:	4629      	mov	r1, r5
 801206a:	f7ee f90d 	bl	8000288 <__aeabi_dsub>
 801206e:	4602      	mov	r2, r0
 8012070:	460b      	mov	r3, r1
 8012072:	4640      	mov	r0, r8
 8012074:	4649      	mov	r1, r9
 8012076:	f7ee f907 	bl	8000288 <__aeabi_dsub>
 801207a:	a371      	add	r3, pc, #452	; (adr r3, 8012240 <__ieee754_pow+0xa00>)
 801207c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012080:	f7ee faba 	bl	80005f8 <__aeabi_dmul>
 8012084:	a370      	add	r3, pc, #448	; (adr r3, 8012248 <__ieee754_pow+0xa08>)
 8012086:	e9d3 2300 	ldrd	r2, r3, [r3]
 801208a:	4680      	mov	r8, r0
 801208c:	4689      	mov	r9, r1
 801208e:	4620      	mov	r0, r4
 8012090:	4629      	mov	r1, r5
 8012092:	f7ee fab1 	bl	80005f8 <__aeabi_dmul>
 8012096:	4602      	mov	r2, r0
 8012098:	460b      	mov	r3, r1
 801209a:	4640      	mov	r0, r8
 801209c:	4649      	mov	r1, r9
 801209e:	f7ee f8f5 	bl	800028c <__adddf3>
 80120a2:	4604      	mov	r4, r0
 80120a4:	460d      	mov	r5, r1
 80120a6:	4602      	mov	r2, r0
 80120a8:	460b      	mov	r3, r1
 80120aa:	4630      	mov	r0, r6
 80120ac:	4639      	mov	r1, r7
 80120ae:	f7ee f8ed 	bl	800028c <__adddf3>
 80120b2:	4632      	mov	r2, r6
 80120b4:	463b      	mov	r3, r7
 80120b6:	4680      	mov	r8, r0
 80120b8:	4689      	mov	r9, r1
 80120ba:	f7ee f8e5 	bl	8000288 <__aeabi_dsub>
 80120be:	4602      	mov	r2, r0
 80120c0:	460b      	mov	r3, r1
 80120c2:	4620      	mov	r0, r4
 80120c4:	4629      	mov	r1, r5
 80120c6:	f7ee f8df 	bl	8000288 <__aeabi_dsub>
 80120ca:	4642      	mov	r2, r8
 80120cc:	4606      	mov	r6, r0
 80120ce:	460f      	mov	r7, r1
 80120d0:	464b      	mov	r3, r9
 80120d2:	4640      	mov	r0, r8
 80120d4:	4649      	mov	r1, r9
 80120d6:	f7ee fa8f 	bl	80005f8 <__aeabi_dmul>
 80120da:	a35d      	add	r3, pc, #372	; (adr r3, 8012250 <__ieee754_pow+0xa10>)
 80120dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120e0:	4604      	mov	r4, r0
 80120e2:	460d      	mov	r5, r1
 80120e4:	f7ee fa88 	bl	80005f8 <__aeabi_dmul>
 80120e8:	a35b      	add	r3, pc, #364	; (adr r3, 8012258 <__ieee754_pow+0xa18>)
 80120ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ee:	f7ee f8cb 	bl	8000288 <__aeabi_dsub>
 80120f2:	4622      	mov	r2, r4
 80120f4:	462b      	mov	r3, r5
 80120f6:	f7ee fa7f 	bl	80005f8 <__aeabi_dmul>
 80120fa:	a359      	add	r3, pc, #356	; (adr r3, 8012260 <__ieee754_pow+0xa20>)
 80120fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012100:	f7ee f8c4 	bl	800028c <__adddf3>
 8012104:	4622      	mov	r2, r4
 8012106:	462b      	mov	r3, r5
 8012108:	f7ee fa76 	bl	80005f8 <__aeabi_dmul>
 801210c:	a356      	add	r3, pc, #344	; (adr r3, 8012268 <__ieee754_pow+0xa28>)
 801210e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012112:	f7ee f8b9 	bl	8000288 <__aeabi_dsub>
 8012116:	4622      	mov	r2, r4
 8012118:	462b      	mov	r3, r5
 801211a:	f7ee fa6d 	bl	80005f8 <__aeabi_dmul>
 801211e:	a354      	add	r3, pc, #336	; (adr r3, 8012270 <__ieee754_pow+0xa30>)
 8012120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012124:	f7ee f8b2 	bl	800028c <__adddf3>
 8012128:	4622      	mov	r2, r4
 801212a:	462b      	mov	r3, r5
 801212c:	f7ee fa64 	bl	80005f8 <__aeabi_dmul>
 8012130:	4602      	mov	r2, r0
 8012132:	460b      	mov	r3, r1
 8012134:	4640      	mov	r0, r8
 8012136:	4649      	mov	r1, r9
 8012138:	f7ee f8a6 	bl	8000288 <__aeabi_dsub>
 801213c:	4604      	mov	r4, r0
 801213e:	460d      	mov	r5, r1
 8012140:	4602      	mov	r2, r0
 8012142:	460b      	mov	r3, r1
 8012144:	4640      	mov	r0, r8
 8012146:	4649      	mov	r1, r9
 8012148:	f7ee fa56 	bl	80005f8 <__aeabi_dmul>
 801214c:	2200      	movs	r2, #0
 801214e:	ec41 0b19 	vmov	d9, r0, r1
 8012152:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012156:	4620      	mov	r0, r4
 8012158:	4629      	mov	r1, r5
 801215a:	f7ee f895 	bl	8000288 <__aeabi_dsub>
 801215e:	4602      	mov	r2, r0
 8012160:	460b      	mov	r3, r1
 8012162:	ec51 0b19 	vmov	r0, r1, d9
 8012166:	f7ee fb71 	bl	800084c <__aeabi_ddiv>
 801216a:	4632      	mov	r2, r6
 801216c:	4604      	mov	r4, r0
 801216e:	460d      	mov	r5, r1
 8012170:	463b      	mov	r3, r7
 8012172:	4640      	mov	r0, r8
 8012174:	4649      	mov	r1, r9
 8012176:	f7ee fa3f 	bl	80005f8 <__aeabi_dmul>
 801217a:	4632      	mov	r2, r6
 801217c:	463b      	mov	r3, r7
 801217e:	f7ee f885 	bl	800028c <__adddf3>
 8012182:	4602      	mov	r2, r0
 8012184:	460b      	mov	r3, r1
 8012186:	4620      	mov	r0, r4
 8012188:	4629      	mov	r1, r5
 801218a:	f7ee f87d 	bl	8000288 <__aeabi_dsub>
 801218e:	4642      	mov	r2, r8
 8012190:	464b      	mov	r3, r9
 8012192:	f7ee f879 	bl	8000288 <__aeabi_dsub>
 8012196:	460b      	mov	r3, r1
 8012198:	4602      	mov	r2, r0
 801219a:	4939      	ldr	r1, [pc, #228]	; (8012280 <__ieee754_pow+0xa40>)
 801219c:	2000      	movs	r0, #0
 801219e:	f7ee f873 	bl	8000288 <__aeabi_dsub>
 80121a2:	ec41 0b10 	vmov	d0, r0, r1
 80121a6:	ee10 3a90 	vmov	r3, s1
 80121aa:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80121ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80121b2:	da2b      	bge.n	801220c <__ieee754_pow+0x9cc>
 80121b4:	4650      	mov	r0, sl
 80121b6:	f000 f89f 	bl	80122f8 <scalbn>
 80121ba:	ec51 0b10 	vmov	r0, r1, d0
 80121be:	ec53 2b18 	vmov	r2, r3, d8
 80121c2:	f7ff bbee 	b.w	80119a2 <__ieee754_pow+0x162>
 80121c6:	4b2f      	ldr	r3, [pc, #188]	; (8012284 <__ieee754_pow+0xa44>)
 80121c8:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80121cc:	429e      	cmp	r6, r3
 80121ce:	f77f af0d 	ble.w	8011fec <__ieee754_pow+0x7ac>
 80121d2:	4b2d      	ldr	r3, [pc, #180]	; (8012288 <__ieee754_pow+0xa48>)
 80121d4:	440b      	add	r3, r1
 80121d6:	4303      	orrs	r3, r0
 80121d8:	d009      	beq.n	80121ee <__ieee754_pow+0x9ae>
 80121da:	ec51 0b18 	vmov	r0, r1, d8
 80121de:	2200      	movs	r2, #0
 80121e0:	2300      	movs	r3, #0
 80121e2:	f7ee fc7b 	bl	8000adc <__aeabi_dcmplt>
 80121e6:	3800      	subs	r0, #0
 80121e8:	bf18      	it	ne
 80121ea:	2001      	movne	r0, #1
 80121ec:	e448      	b.n	8011a80 <__ieee754_pow+0x240>
 80121ee:	4622      	mov	r2, r4
 80121f0:	462b      	mov	r3, r5
 80121f2:	f7ee f849 	bl	8000288 <__aeabi_dsub>
 80121f6:	4642      	mov	r2, r8
 80121f8:	464b      	mov	r3, r9
 80121fa:	f7ee fc83 	bl	8000b04 <__aeabi_dcmpge>
 80121fe:	2800      	cmp	r0, #0
 8012200:	f43f aef4 	beq.w	8011fec <__ieee754_pow+0x7ac>
 8012204:	e7e9      	b.n	80121da <__ieee754_pow+0x99a>
 8012206:	f04f 0a00 	mov.w	sl, #0
 801220a:	e71a      	b.n	8012042 <__ieee754_pow+0x802>
 801220c:	ec51 0b10 	vmov	r0, r1, d0
 8012210:	4619      	mov	r1, r3
 8012212:	e7d4      	b.n	80121be <__ieee754_pow+0x97e>
 8012214:	491a      	ldr	r1, [pc, #104]	; (8012280 <__ieee754_pow+0xa40>)
 8012216:	2000      	movs	r0, #0
 8012218:	f7ff bb31 	b.w	801187e <__ieee754_pow+0x3e>
 801221c:	2000      	movs	r0, #0
 801221e:	2100      	movs	r1, #0
 8012220:	f7ff bb2d 	b.w	801187e <__ieee754_pow+0x3e>
 8012224:	4630      	mov	r0, r6
 8012226:	4639      	mov	r1, r7
 8012228:	f7ff bb29 	b.w	801187e <__ieee754_pow+0x3e>
 801222c:	9204      	str	r2, [sp, #16]
 801222e:	f7ff bb7b 	b.w	8011928 <__ieee754_pow+0xe8>
 8012232:	2300      	movs	r3, #0
 8012234:	f7ff bb65 	b.w	8011902 <__ieee754_pow+0xc2>
 8012238:	00000000 	.word	0x00000000
 801223c:	3fe62e43 	.word	0x3fe62e43
 8012240:	fefa39ef 	.word	0xfefa39ef
 8012244:	3fe62e42 	.word	0x3fe62e42
 8012248:	0ca86c39 	.word	0x0ca86c39
 801224c:	be205c61 	.word	0xbe205c61
 8012250:	72bea4d0 	.word	0x72bea4d0
 8012254:	3e663769 	.word	0x3e663769
 8012258:	c5d26bf1 	.word	0xc5d26bf1
 801225c:	3ebbbd41 	.word	0x3ebbbd41
 8012260:	af25de2c 	.word	0xaf25de2c
 8012264:	3f11566a 	.word	0x3f11566a
 8012268:	16bebd93 	.word	0x16bebd93
 801226c:	3f66c16c 	.word	0x3f66c16c
 8012270:	5555553e 	.word	0x5555553e
 8012274:	3fc55555 	.word	0x3fc55555
 8012278:	3fe00000 	.word	0x3fe00000
 801227c:	fff00000 	.word	0xfff00000
 8012280:	3ff00000 	.word	0x3ff00000
 8012284:	4090cbff 	.word	0x4090cbff
 8012288:	3f6f3400 	.word	0x3f6f3400
 801228c:	652b82fe 	.word	0x652b82fe
 8012290:	3c971547 	.word	0x3c971547

08012294 <with_errno>:
 8012294:	b570      	push	{r4, r5, r6, lr}
 8012296:	4604      	mov	r4, r0
 8012298:	460d      	mov	r5, r1
 801229a:	4616      	mov	r6, r2
 801229c:	f7fc ffce 	bl	800f23c <__errno>
 80122a0:	4629      	mov	r1, r5
 80122a2:	6006      	str	r6, [r0, #0]
 80122a4:	4620      	mov	r0, r4
 80122a6:	bd70      	pop	{r4, r5, r6, pc}

080122a8 <xflow>:
 80122a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80122aa:	4614      	mov	r4, r2
 80122ac:	461d      	mov	r5, r3
 80122ae:	b108      	cbz	r0, 80122b4 <xflow+0xc>
 80122b0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80122b4:	e9cd 2300 	strd	r2, r3, [sp]
 80122b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122bc:	4620      	mov	r0, r4
 80122be:	4629      	mov	r1, r5
 80122c0:	f7ee f99a 	bl	80005f8 <__aeabi_dmul>
 80122c4:	2222      	movs	r2, #34	; 0x22
 80122c6:	b003      	add	sp, #12
 80122c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80122cc:	f7ff bfe2 	b.w	8012294 <with_errno>

080122d0 <__math_uflow>:
 80122d0:	b508      	push	{r3, lr}
 80122d2:	2200      	movs	r2, #0
 80122d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80122d8:	f7ff ffe6 	bl	80122a8 <xflow>
 80122dc:	ec41 0b10 	vmov	d0, r0, r1
 80122e0:	bd08      	pop	{r3, pc}

080122e2 <__math_oflow>:
 80122e2:	b508      	push	{r3, lr}
 80122e4:	2200      	movs	r2, #0
 80122e6:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80122ea:	f7ff ffdd 	bl	80122a8 <xflow>
 80122ee:	ec41 0b10 	vmov	d0, r0, r1
 80122f2:	bd08      	pop	{r3, pc}
 80122f4:	0000      	movs	r0, r0
	...

080122f8 <scalbn>:
 80122f8:	b570      	push	{r4, r5, r6, lr}
 80122fa:	ec55 4b10 	vmov	r4, r5, d0
 80122fe:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8012302:	4606      	mov	r6, r0
 8012304:	462b      	mov	r3, r5
 8012306:	b999      	cbnz	r1, 8012330 <scalbn+0x38>
 8012308:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801230c:	4323      	orrs	r3, r4
 801230e:	d03f      	beq.n	8012390 <scalbn+0x98>
 8012310:	4b35      	ldr	r3, [pc, #212]	; (80123e8 <scalbn+0xf0>)
 8012312:	4629      	mov	r1, r5
 8012314:	ee10 0a10 	vmov	r0, s0
 8012318:	2200      	movs	r2, #0
 801231a:	f7ee f96d 	bl	80005f8 <__aeabi_dmul>
 801231e:	4b33      	ldr	r3, [pc, #204]	; (80123ec <scalbn+0xf4>)
 8012320:	429e      	cmp	r6, r3
 8012322:	4604      	mov	r4, r0
 8012324:	460d      	mov	r5, r1
 8012326:	da10      	bge.n	801234a <scalbn+0x52>
 8012328:	a327      	add	r3, pc, #156	; (adr r3, 80123c8 <scalbn+0xd0>)
 801232a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801232e:	e01f      	b.n	8012370 <scalbn+0x78>
 8012330:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8012334:	4291      	cmp	r1, r2
 8012336:	d10c      	bne.n	8012352 <scalbn+0x5a>
 8012338:	ee10 2a10 	vmov	r2, s0
 801233c:	4620      	mov	r0, r4
 801233e:	4629      	mov	r1, r5
 8012340:	f7ed ffa4 	bl	800028c <__adddf3>
 8012344:	4604      	mov	r4, r0
 8012346:	460d      	mov	r5, r1
 8012348:	e022      	b.n	8012390 <scalbn+0x98>
 801234a:	460b      	mov	r3, r1
 801234c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8012350:	3936      	subs	r1, #54	; 0x36
 8012352:	f24c 3250 	movw	r2, #50000	; 0xc350
 8012356:	4296      	cmp	r6, r2
 8012358:	dd0d      	ble.n	8012376 <scalbn+0x7e>
 801235a:	2d00      	cmp	r5, #0
 801235c:	a11c      	add	r1, pc, #112	; (adr r1, 80123d0 <scalbn+0xd8>)
 801235e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012362:	da02      	bge.n	801236a <scalbn+0x72>
 8012364:	a11c      	add	r1, pc, #112	; (adr r1, 80123d8 <scalbn+0xe0>)
 8012366:	e9d1 0100 	ldrd	r0, r1, [r1]
 801236a:	a319      	add	r3, pc, #100	; (adr r3, 80123d0 <scalbn+0xd8>)
 801236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012370:	f7ee f942 	bl	80005f8 <__aeabi_dmul>
 8012374:	e7e6      	b.n	8012344 <scalbn+0x4c>
 8012376:	1872      	adds	r2, r6, r1
 8012378:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801237c:	428a      	cmp	r2, r1
 801237e:	dcec      	bgt.n	801235a <scalbn+0x62>
 8012380:	2a00      	cmp	r2, #0
 8012382:	dd08      	ble.n	8012396 <scalbn+0x9e>
 8012384:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012388:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801238c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012390:	ec45 4b10 	vmov	d0, r4, r5
 8012394:	bd70      	pop	{r4, r5, r6, pc}
 8012396:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801239a:	da08      	bge.n	80123ae <scalbn+0xb6>
 801239c:	2d00      	cmp	r5, #0
 801239e:	a10a      	add	r1, pc, #40	; (adr r1, 80123c8 <scalbn+0xd0>)
 80123a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123a4:	dac0      	bge.n	8012328 <scalbn+0x30>
 80123a6:	a10e      	add	r1, pc, #56	; (adr r1, 80123e0 <scalbn+0xe8>)
 80123a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80123ac:	e7bc      	b.n	8012328 <scalbn+0x30>
 80123ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80123b2:	3236      	adds	r2, #54	; 0x36
 80123b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80123b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80123bc:	4620      	mov	r0, r4
 80123be:	4b0c      	ldr	r3, [pc, #48]	; (80123f0 <scalbn+0xf8>)
 80123c0:	2200      	movs	r2, #0
 80123c2:	e7d5      	b.n	8012370 <scalbn+0x78>
 80123c4:	f3af 8000 	nop.w
 80123c8:	c2f8f359 	.word	0xc2f8f359
 80123cc:	01a56e1f 	.word	0x01a56e1f
 80123d0:	8800759c 	.word	0x8800759c
 80123d4:	7e37e43c 	.word	0x7e37e43c
 80123d8:	8800759c 	.word	0x8800759c
 80123dc:	fe37e43c 	.word	0xfe37e43c
 80123e0:	c2f8f359 	.word	0xc2f8f359
 80123e4:	81a56e1f 	.word	0x81a56e1f
 80123e8:	43500000 	.word	0x43500000
 80123ec:	ffff3cb0 	.word	0xffff3cb0
 80123f0:	3c900000 	.word	0x3c900000

080123f4 <_init>:
 80123f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123f6:	bf00      	nop
 80123f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123fa:	bc08      	pop	{r3}
 80123fc:	469e      	mov	lr, r3
 80123fe:	4770      	bx	lr

08012400 <_fini>:
 8012400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012402:	bf00      	nop
 8012404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012406:	bc08      	pop	{r3}
 8012408:	469e      	mov	lr, r3
 801240a:	4770      	bx	lr
