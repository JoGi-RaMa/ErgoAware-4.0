
SDIO_Test_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000155bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000568  08015750  08015750  00025750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015cb8  08015cb8  000302f8  2**0
                  CONTENTS
  4 .ARM          00000008  08015cb8  08015cb8  00025cb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015cc0  08015cc0  000302f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015cc0  08015cc0  00025cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015cc4  08015cc4  00025cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  08015cc8  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000302f8  2**0
                  CONTENTS
 10 .bss          000025b4  200002f8  200002f8  000302f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200028ac  200028ac  000302f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000302f8  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00030328  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022cfd  00000000  00000000  0003036b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000050cd  00000000  00000000  00053068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001ea0  00000000  00000000  00058138  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000017b5  00000000  00000000  00059fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00008b21  00000000  00000000  0005b78d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00027f06  00000000  00000000  000642ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d0683  00000000  00000000  0008c1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000096e8  00000000  00000000  0015c838  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00165f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200002f8 	.word	0x200002f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08015734 	.word	0x08015734

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200002fc 	.word	0x200002fc
 80001cc:	08015734 	.word	0x08015734

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c5c:	f000 b970 	b.w	8000f40 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9e08      	ldr	r6, [sp, #32]
 8000c7e:	460d      	mov	r5, r1
 8000c80:	4604      	mov	r4, r0
 8000c82:	460f      	mov	r7, r1
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d14a      	bne.n	8000d1e <__udivmoddi4+0xa6>
 8000c88:	428a      	cmp	r2, r1
 8000c8a:	4694      	mov	ip, r2
 8000c8c:	d965      	bls.n	8000d5a <__udivmoddi4+0xe2>
 8000c8e:	fab2 f382 	clz	r3, r2
 8000c92:	b143      	cbz	r3, 8000ca6 <__udivmoddi4+0x2e>
 8000c94:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c98:	f1c3 0220 	rsb	r2, r3, #32
 8000c9c:	409f      	lsls	r7, r3
 8000c9e:	fa20 f202 	lsr.w	r2, r0, r2
 8000ca2:	4317      	orrs	r7, r2
 8000ca4:	409c      	lsls	r4, r3
 8000ca6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000caa:	fa1f f58c 	uxth.w	r5, ip
 8000cae:	fbb7 f1fe 	udiv	r1, r7, lr
 8000cb2:	0c22      	lsrs	r2, r4, #16
 8000cb4:	fb0e 7711 	mls	r7, lr, r1, r7
 8000cb8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000cbc:	fb01 f005 	mul.w	r0, r1, r5
 8000cc0:	4290      	cmp	r0, r2
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x62>
 8000cc4:	eb1c 0202 	adds.w	r2, ip, r2
 8000cc8:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000ccc:	f080 811c 	bcs.w	8000f08 <__udivmoddi4+0x290>
 8000cd0:	4290      	cmp	r0, r2
 8000cd2:	f240 8119 	bls.w	8000f08 <__udivmoddi4+0x290>
 8000cd6:	3902      	subs	r1, #2
 8000cd8:	4462      	add	r2, ip
 8000cda:	1a12      	subs	r2, r2, r0
 8000cdc:	b2a4      	uxth	r4, r4
 8000cde:	fbb2 f0fe 	udiv	r0, r2, lr
 8000ce2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000ce6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cea:	fb00 f505 	mul.w	r5, r0, r5
 8000cee:	42a5      	cmp	r5, r4
 8000cf0:	d90a      	bls.n	8000d08 <__udivmoddi4+0x90>
 8000cf2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x294>
 8000cfe:	42a5      	cmp	r5, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x294>
 8000d04:	4464      	add	r4, ip
 8000d06:	3802      	subs	r0, #2
 8000d08:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d0c:	1b64      	subs	r4, r4, r5
 8000d0e:	2100      	movs	r1, #0
 8000d10:	b11e      	cbz	r6, 8000d1a <__udivmoddi4+0xa2>
 8000d12:	40dc      	lsrs	r4, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d908      	bls.n	8000d34 <__udivmoddi4+0xbc>
 8000d22:	2e00      	cmp	r6, #0
 8000d24:	f000 80ed 	beq.w	8000f02 <__udivmoddi4+0x28a>
 8000d28:	2100      	movs	r1, #0
 8000d2a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d34:	fab3 f183 	clz	r1, r3
 8000d38:	2900      	cmp	r1, #0
 8000d3a:	d149      	bne.n	8000dd0 <__udivmoddi4+0x158>
 8000d3c:	42ab      	cmp	r3, r5
 8000d3e:	d302      	bcc.n	8000d46 <__udivmoddi4+0xce>
 8000d40:	4282      	cmp	r2, r0
 8000d42:	f200 80f8 	bhi.w	8000f36 <__udivmoddi4+0x2be>
 8000d46:	1a84      	subs	r4, r0, r2
 8000d48:	eb65 0203 	sbc.w	r2, r5, r3
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	4617      	mov	r7, r2
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d0e2      	beq.n	8000d1a <__udivmoddi4+0xa2>
 8000d54:	e9c6 4700 	strd	r4, r7, [r6]
 8000d58:	e7df      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000d5a:	b902      	cbnz	r2, 8000d5e <__udivmoddi4+0xe6>
 8000d5c:	deff      	udf	#255	; 0xff
 8000d5e:	fab2 f382 	clz	r3, r2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	f040 8090 	bne.w	8000e88 <__udivmoddi4+0x210>
 8000d68:	1a8a      	subs	r2, r1, r2
 8000d6a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d6e:	fa1f fe8c 	uxth.w	lr, ip
 8000d72:	2101      	movs	r1, #1
 8000d74:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d78:	fb07 2015 	mls	r0, r7, r5, r2
 8000d7c:	0c22      	lsrs	r2, r4, #16
 8000d7e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d82:	fb0e f005 	mul.w	r0, lr, r5
 8000d86:	4290      	cmp	r0, r2
 8000d88:	d908      	bls.n	8000d9c <__udivmoddi4+0x124>
 8000d8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d8e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000d92:	d202      	bcs.n	8000d9a <__udivmoddi4+0x122>
 8000d94:	4290      	cmp	r0, r2
 8000d96:	f200 80cb 	bhi.w	8000f30 <__udivmoddi4+0x2b8>
 8000d9a:	4645      	mov	r5, r8
 8000d9c:	1a12      	subs	r2, r2, r0
 8000d9e:	b2a4      	uxth	r4, r4
 8000da0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000da4:	fb07 2210 	mls	r2, r7, r0, r2
 8000da8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dac:	fb0e fe00 	mul.w	lr, lr, r0
 8000db0:	45a6      	cmp	lr, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x14e>
 8000db4:	eb1c 0404 	adds.w	r4, ip, r4
 8000db8:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000dbc:	d202      	bcs.n	8000dc4 <__udivmoddi4+0x14c>
 8000dbe:	45a6      	cmp	lr, r4
 8000dc0:	f200 80bb 	bhi.w	8000f3a <__udivmoddi4+0x2c2>
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000dce:	e79f      	b.n	8000d10 <__udivmoddi4+0x98>
 8000dd0:	f1c1 0720 	rsb	r7, r1, #32
 8000dd4:	408b      	lsls	r3, r1
 8000dd6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000dda:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dde:	fa05 f401 	lsl.w	r4, r5, r1
 8000de2:	fa20 f307 	lsr.w	r3, r0, r7
 8000de6:	40fd      	lsrs	r5, r7
 8000de8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dec:	4323      	orrs	r3, r4
 8000dee:	fbb5 f8f9 	udiv	r8, r5, r9
 8000df2:	fa1f fe8c 	uxth.w	lr, ip
 8000df6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dfa:	0c1c      	lsrs	r4, r3, #16
 8000dfc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e00:	fb08 f50e 	mul.w	r5, r8, lr
 8000e04:	42a5      	cmp	r5, r4
 8000e06:	fa02 f201 	lsl.w	r2, r2, r1
 8000e0a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e0e:	d90b      	bls.n	8000e28 <__udivmoddi4+0x1b0>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e18:	f080 8088 	bcs.w	8000f2c <__udivmoddi4+0x2b4>
 8000e1c:	42a5      	cmp	r5, r4
 8000e1e:	f240 8085 	bls.w	8000f2c <__udivmoddi4+0x2b4>
 8000e22:	f1a8 0802 	sub.w	r8, r8, #2
 8000e26:	4464      	add	r4, ip
 8000e28:	1b64      	subs	r4, r4, r5
 8000e2a:	b29d      	uxth	r5, r3
 8000e2c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e30:	fb09 4413 	mls	r4, r9, r3, r4
 8000e34:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e38:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e3c:	45a6      	cmp	lr, r4
 8000e3e:	d908      	bls.n	8000e52 <__udivmoddi4+0x1da>
 8000e40:	eb1c 0404 	adds.w	r4, ip, r4
 8000e44:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000e48:	d26c      	bcs.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4a:	45a6      	cmp	lr, r4
 8000e4c:	d96a      	bls.n	8000f24 <__udivmoddi4+0x2ac>
 8000e4e:	3b02      	subs	r3, #2
 8000e50:	4464      	add	r4, ip
 8000e52:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e56:	fba3 9502 	umull	r9, r5, r3, r2
 8000e5a:	eba4 040e 	sub.w	r4, r4, lr
 8000e5e:	42ac      	cmp	r4, r5
 8000e60:	46c8      	mov	r8, r9
 8000e62:	46ae      	mov	lr, r5
 8000e64:	d356      	bcc.n	8000f14 <__udivmoddi4+0x29c>
 8000e66:	d053      	beq.n	8000f10 <__udivmoddi4+0x298>
 8000e68:	b156      	cbz	r6, 8000e80 <__udivmoddi4+0x208>
 8000e6a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e6e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e72:	fa04 f707 	lsl.w	r7, r4, r7
 8000e76:	40ca      	lsrs	r2, r1
 8000e78:	40cc      	lsrs	r4, r1
 8000e7a:	4317      	orrs	r7, r2
 8000e7c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e80:	4618      	mov	r0, r3
 8000e82:	2100      	movs	r1, #0
 8000e84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e88:	f1c3 0120 	rsb	r1, r3, #32
 8000e8c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e90:	fa20 f201 	lsr.w	r2, r0, r1
 8000e94:	fa25 f101 	lsr.w	r1, r5, r1
 8000e98:	409d      	lsls	r5, r3
 8000e9a:	432a      	orrs	r2, r5
 8000e9c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea0:	fa1f fe8c 	uxth.w	lr, ip
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1510 	mls	r5, r7, r0, r1
 8000eac:	0c11      	lsrs	r1, r2, #16
 8000eae:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000eb2:	fb00 f50e 	mul.w	r5, r0, lr
 8000eb6:	428d      	cmp	r5, r1
 8000eb8:	fa04 f403 	lsl.w	r4, r4, r3
 8000ebc:	d908      	bls.n	8000ed0 <__udivmoddi4+0x258>
 8000ebe:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000ec6:	d22f      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000ec8:	428d      	cmp	r5, r1
 8000eca:	d92d      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000ecc:	3802      	subs	r0, #2
 8000ece:	4461      	add	r1, ip
 8000ed0:	1b49      	subs	r1, r1, r5
 8000ed2:	b292      	uxth	r2, r2
 8000ed4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ed8:	fb07 1115 	mls	r1, r7, r5, r1
 8000edc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ee0:	fb05 f10e 	mul.w	r1, r5, lr
 8000ee4:	4291      	cmp	r1, r2
 8000ee6:	d908      	bls.n	8000efa <__udivmoddi4+0x282>
 8000ee8:	eb1c 0202 	adds.w	r2, ip, r2
 8000eec:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000ef0:	d216      	bcs.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef2:	4291      	cmp	r1, r2
 8000ef4:	d914      	bls.n	8000f20 <__udivmoddi4+0x2a8>
 8000ef6:	3d02      	subs	r5, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a52      	subs	r2, r2, r1
 8000efc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f00:	e738      	b.n	8000d74 <__udivmoddi4+0xfc>
 8000f02:	4631      	mov	r1, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e708      	b.n	8000d1a <__udivmoddi4+0xa2>
 8000f08:	4639      	mov	r1, r7
 8000f0a:	e6e6      	b.n	8000cda <__udivmoddi4+0x62>
 8000f0c:	4610      	mov	r0, r2
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x90>
 8000f10:	4548      	cmp	r0, r9
 8000f12:	d2a9      	bcs.n	8000e68 <__udivmoddi4+0x1f0>
 8000f14:	ebb9 0802 	subs.w	r8, r9, r2
 8000f18:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	e7a3      	b.n	8000e68 <__udivmoddi4+0x1f0>
 8000f20:	4645      	mov	r5, r8
 8000f22:	e7ea      	b.n	8000efa <__udivmoddi4+0x282>
 8000f24:	462b      	mov	r3, r5
 8000f26:	e794      	b.n	8000e52 <__udivmoddi4+0x1da>
 8000f28:	4640      	mov	r0, r8
 8000f2a:	e7d1      	b.n	8000ed0 <__udivmoddi4+0x258>
 8000f2c:	46d0      	mov	r8, sl
 8000f2e:	e77b      	b.n	8000e28 <__udivmoddi4+0x1b0>
 8000f30:	3d02      	subs	r5, #2
 8000f32:	4462      	add	r2, ip
 8000f34:	e732      	b.n	8000d9c <__udivmoddi4+0x124>
 8000f36:	4608      	mov	r0, r1
 8000f38:	e70a      	b.n	8000d50 <__udivmoddi4+0xd8>
 8000f3a:	4464      	add	r4, ip
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	e742      	b.n	8000dc6 <__udivmoddi4+0x14e>

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <LSM6DSOX_begin>:
int16_t data_gyr[3];
int16_t data_temp[1];


int LSM6DSOX_begin(I2C_HandleTypeDef* I2Cx, uint8_t imu_address) // Wake up the sensor boards -> Configurations
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	460b      	mov	r3, r1
 8000f4e:	70fb      	strb	r3, [r7, #3]
//  }
	
	// I2C_HandleTypeDef* I2CX = I2Cx;
	

  if (LSM6DSOX_readRegister8(I2Cx, imu_address, LSM6DSOX_WHO_AM_I_REG) != 0x6C) {
 8000f50:	78fb      	ldrb	r3, [r7, #3]
 8000f52:	220f      	movs	r2, #15
 8000f54:	4619      	mov	r1, r3
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f000 f834 	bl	8000fc4 <LSM6DSOX_readRegister8>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b6c      	cmp	r3, #108	; 0x6c
 8000f60:	d006      	beq.n	8000f70 <LSM6DSOX_begin+0x2c>
    //end();
		// I2C_HandleTypeDef* I2Cx = I2Cx; // Resende
		LSM6DSOX_end(I2Cx, imu_address);
 8000f62:	78fb      	ldrb	r3, [r7, #3]
 8000f64:	4619      	mov	r1, r3
 8000f66:	6878      	ldr	r0, [r7, #4]
 8000f68:	f000 f881 	bl	800106e <LSM6DSOX_end>
    return 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e01f      	b.n	8000fb0 <LSM6DSOX_begin+0x6c>
	// FASTSETTL_MODE_XL = 0 -> Enables LPF2 and fast-setting mode 
	// HP_SLOPE_XL_EN = 0
	// XL_FS_MODE = 0
	// LOW_PASS_ON_6D = 0
	// 00000000 -> 0x00
	LSM6DSOX_writeRegister8(I2Cx, imu_address, LSM6DSOX_CTRL8_XL, 0x00); // Resende
 8000f70:	78f9      	ldrb	r1, [r7, #3]
 8000f72:	2300      	movs	r3, #0
 8000f74:	2217      	movs	r2, #23
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f000 f856 	bl	8001028 <LSM6DSOX_writeRegister8>
	// For 16g: FS_XS = 01
	// For 4g: FS_XS = 10
	// For 2g: FS_XS = 00
	// LPF2_XL_EN = 0 -> disable LPF2 in acc acquisition
	// 10000100 -> 0x84
  LSM6DSOX_writeRegister8(I2Cx, imu_address, LSM6DSOX_CTRL1_XL, 0x84);
 8000f7c:	78f9      	ldrb	r1, [r7, #3]
 8000f7e:	2384      	movs	r3, #132	; 0x84
 8000f80:	2210      	movs	r2, #16
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 f850 	bl	8001028 <LSM6DSOX_writeRegister8>
	acc_FS = 16; //g
 8000f88:	4b0b      	ldr	r3, [pc, #44]	; (8000fb8 <LSM6DSOX_begin+0x74>)
 8000f8a:	f04f 4283 	mov.w	r2, #1098907648	; 0x41800000
 8000f8e:	601a      	str	r2, [r3, #0]
	// HPM_GN = 00 => (16mHz)
	// OIS_ON_EN = 0
	// USR_OFF_ON_OUT = 0
	// OIS_ON = 0
	// 00000000 -> 0x00
	LSM6DSOX_writeRegister8(I2Cx, imu_address, LSM6DSOX_CTRL7_G, 0x00);
 8000f90:	78f9      	ldrb	r1, [r7, #3]
 8000f92:	2300      	movs	r3, #0
 8000f94:	2216      	movs	r2, #22
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f000 f846 	bl	8001028 <LSM6DSOX_writeRegister8>
	// For 500dps: FS_G = 01
	// For 1000dps: FS_G = 10
	// For 2000dps: FS_G = 11
	// FS_125 = 0
	// 10001100 -> 0x8C
  LSM6DSOX_writeRegister8(I2Cx, imu_address, LSM6DSOX_CTRL2_G, 0x8C);
 8000f9c:	78f9      	ldrb	r1, [r7, #3]
 8000f9e:	238c      	movs	r3, #140	; 0x8c
 8000fa0:	2211      	movs	r2, #17
 8000fa2:	6878      	ldr	r0, [r7, #4]
 8000fa4:	f000 f840 	bl	8001028 <LSM6DSOX_writeRegister8>
	gyr_FS = 2000; // dps
 8000fa8:	4b04      	ldr	r3, [pc, #16]	; (8000fbc <LSM6DSOX_begin+0x78>)
 8000faa:	4a05      	ldr	r2, [pc, #20]	; (8000fc0 <LSM6DSOX_begin+0x7c>)
 8000fac:	601a      	str	r2, [r3, #0]

  return 1;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000314 	.word	0x20000314
 8000fbc:	20000318 	.word	0x20000318
 8000fc0:	44fa0000 	.word	0x44fa0000

08000fc4 <LSM6DSOX_readRegister8>:



uint8_t LSM6DSOX_readRegister8(I2C_HandleTypeDef* I2Cx, uint8_t imu_address, uint8_t reg) { // Altered to include various i2c peripheral addresses - Resende
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af02      	add	r7, sp, #8
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	70fb      	strb	r3, [r7, #3]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	70bb      	strb	r3, [r7, #2]

  uint8_t x;
  HAL_StatusTypeDef result;
	// I2C_HandleTypeDef* I2Cx = I2Cx; // TODO: Remove this after and see if it works - Resende
  
  result = HAL_I2C_Master_Transmit( I2Cx, (imu_address << 1), &reg, 1, 10 ); // Original device address - (LSM6DSOX_ADDRESS << 1) - Resende
 8000fd4:	78fb      	ldrb	r3, [r7, #3]
 8000fd6:	b29b      	uxth	r3, r3
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	b299      	uxth	r1, r3
 8000fdc:	1cba      	adds	r2, r7, #2
 8000fde:	230a      	movs	r3, #10
 8000fe0:	9300      	str	r3, [sp, #0]
 8000fe2:	2301      	movs	r3, #1
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f003 fa77 	bl	80044d8 <HAL_I2C_Master_Transmit>
 8000fea:	4603      	mov	r3, r0
 8000fec:	73fb      	strb	r3, [r7, #15]
  if( result != HAL_OK ) 
 8000fee:	7bfb      	ldrb	r3, [r7, #15]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <LSM6DSOX_readRegister8+0x34>
  {
    /*Failed to send register value to driver*/
    x = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73bb      	strb	r3, [r7, #14]
  }
  
  result = HAL_I2C_Master_Receive ( I2Cx, (imu_address << 1) , &x  , 1, 10 ); // TODO: Try to commute the least valued bit to 1 - read mode
 8000ff8:	78fb      	ldrb	r3, [r7, #3]
 8000ffa:	b29b      	uxth	r3, r3
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	b299      	uxth	r1, r3
 8001000:	f107 020e 	add.w	r2, r7, #14
 8001004:	230a      	movs	r3, #10
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	6878      	ldr	r0, [r7, #4]
 800100c:	f003 fb62 	bl	80046d4 <HAL_I2C_Master_Receive>
 8001010:	4603      	mov	r3, r0
 8001012:	73fb      	strb	r3, [r7, #15]
  if( result != HAL_OK ) 
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d001      	beq.n	800101e <LSM6DSOX_readRegister8+0x5a>
  {
    /*Failed to send register value to driver*/
    x = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	73bb      	strb	r3, [r7, #14]
  }
  
  return x;
 800101e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <LSM6DSOX_writeRegister8>:


void LSM6DSOX_writeRegister8(I2C_HandleTypeDef* I2Cx, uint8_t imu_address, uint8_t reg, uint8_t val) { // Altered to include various i2c peripheral addresses - Resende
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af02      	add	r7, sp, #8
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	4608      	mov	r0, r1
 8001032:	4611      	mov	r1, r2
 8001034:	461a      	mov	r2, r3
 8001036:	4603      	mov	r3, r0
 8001038:	70fb      	strb	r3, [r7, #3]
 800103a:	460b      	mov	r3, r1
 800103c:	70bb      	strb	r3, [r7, #2]
 800103e:	4613      	mov	r3, r2
 8001040:	707b      	strb	r3, [r7, #1]
   
  HAL_StatusTypeDef result;
  // I2C_HandleTypeDef* I2Cx = I2Cx; // TODO: Remove this after and see if this works - Resende
  uint8_t data[2];
  
  data[0] = reg;
 8001042:	78bb      	ldrb	r3, [r7, #2]
 8001044:	733b      	strb	r3, [r7, #12]
  data[1] = val;
 8001046:	787b      	ldrb	r3, [r7, #1]
 8001048:	737b      	strb	r3, [r7, #13]
  
  result = HAL_I2C_Master_Transmit( I2Cx, (imu_address << 1), data, 2, 10 ); // Original device address - (LSM6DSOX_ADDRESS << 1) - Resende
 800104a:	78fb      	ldrb	r3, [r7, #3]
 800104c:	b29b      	uxth	r3, r3
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	b299      	uxth	r1, r3
 8001052:	f107 020c 	add.w	r2, r7, #12
 8001056:	230a      	movs	r3, #10
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2302      	movs	r3, #2
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f003 fa3b 	bl	80044d8 <HAL_I2C_Master_Transmit>
 8001062:	4603      	mov	r3, r0
 8001064:	73fb      	strb	r3, [r7, #15]
  if( result != HAL_OK ) 
  {
    /*Failed to send register value to driver*/    
  }
  
}
 8001066:	bf00      	nop
 8001068:	3710      	adds	r7, #16
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <LSM6DSOX_end>:

void LSM6DSOX_end(I2C_HandleTypeDef* I2Cx, uint8_t imu_address)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b082      	sub	sp, #8
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	460b      	mov	r3, r1
 8001078:	70fb      	strb	r3, [r7, #3]
		
		// I2C_HandleTypeDef* I2Cx = I2Cx // Resende
	
    LSM6DSOX_writeRegister8(I2Cx, imu_address, LSM6DSOX_CTRL2_G, 0x00);
 800107a:	78f9      	ldrb	r1, [r7, #3]
 800107c:	2300      	movs	r3, #0
 800107e:	2211      	movs	r2, #17
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff ffd1 	bl	8001028 <LSM6DSOX_writeRegister8>
    LSM6DSOX_writeRegister8(I2Cx, imu_address, LSM6DSOX_CTRL1_XL, 0x00);
 8001086:	78f9      	ldrb	r1, [r7, #3]
 8001088:	2300      	movs	r3, #0
 800108a:	2210      	movs	r2, #16
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ffcb 	bl	8001028 <LSM6DSOX_writeRegister8>
    // Desconnectar I2C _wire->end();
  
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
	...

0800109c <LSM6DSOX_readAcceleration>:

//returns data in g
int LSM6DSOX_readAcceleration(I2C_HandleTypeDef* I2Cx, uint8_t imu_address, float* x, float* y, float* z)
{	
 800109c:	b580      	push	{r7, lr}
 800109e:	b088      	sub	sp, #32
 80010a0:	af02      	add	r7, sp, #8
 80010a2:	60f8      	str	r0, [r7, #12]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	460b      	mov	r3, r1
 80010aa:	72fb      	strb	r3, [r7, #11]
	// I2C_HandleTypeDef* I2Cx = I2Cx // Resende
  int16_t data[3];

  if (!LSM6DSOX_readRegisters(I2Cx, imu_address, LSM6DSOX_OUTX_L_XL, (uint8_t*)data, sizeof(data))) {
 80010ac:	f107 0310 	add.w	r3, r7, #16
 80010b0:	7af9      	ldrb	r1, [r7, #11]
 80010b2:	2206      	movs	r2, #6
 80010b4:	9200      	str	r2, [sp, #0]
 80010b6:	2228      	movs	r2, #40	; 0x28
 80010b8:	68f8      	ldr	r0, [r7, #12]
 80010ba:	f000 f8d7 	bl	800126c <LSM6DSOX_readRegisters>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d107      	bne.n	80010d4 <LSM6DSOX_readAcceleration+0x38>
    x = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	607b      	str	r3, [r7, #4]
    y = 0;
 80010c8:	2300      	movs	r3, #0
 80010ca:	603b      	str	r3, [r7, #0]
    z = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]

    return 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	e036      	b.n	8001142 <LSM6DSOX_readAcceleration+0xa6>
  }

  *x = data[0] * acc_FS / 32768.0; // (2^16)/2 = 32768 (it is dividev by two since data is int16 - signed values - with allowed negative values)
 80010d4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80010d8:	ee07 3a90 	vmov	s15, r3
 80010dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <LSM6DSOX_readAcceleration+0xb0>)
 80010e2:	edd3 7a00 	vldr	s15, [r3]
 80010e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010ea:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001150 <LSM6DSOX_readAcceleration+0xb4>
 80010ee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	edc3 7a00 	vstr	s15, [r3]
  *y = data[1] * acc_FS / 32768.0;
 80010f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80010fc:	ee07 3a90 	vmov	s15, r3
 8001100:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001104:	4b11      	ldr	r3, [pc, #68]	; (800114c <LSM6DSOX_readAcceleration+0xb0>)
 8001106:	edd3 7a00 	vldr	s15, [r3]
 800110a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800110e:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001150 <LSM6DSOX_readAcceleration+0xb4>
 8001112:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	edc3 7a00 	vstr	s15, [r3]
  *z = data[2] * acc_FS / 32768.0;
 800111c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001120:	ee07 3a90 	vmov	s15, r3
 8001124:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <LSM6DSOX_readAcceleration+0xb0>)
 800112a:	edd3 7a00 	vldr	s15, [r3]
 800112e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001132:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001150 <LSM6DSOX_readAcceleration+0xb4>
 8001136:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113a:	6a3b      	ldr	r3, [r7, #32]
 800113c:	edc3 7a00 	vstr	s15, [r3]

  return 1;
 8001140:	2301      	movs	r3, #1
	
}
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000314 	.word	0x20000314
 8001150:	47000000 	.word	0x47000000

08001154 <LSM6DSOX_accelerationAvailable>:
	}
}


int LSM6DSOX_accelerationAvailable(I2C_HandleTypeDef* I2Cx, uint8_t imu_address)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b082      	sub	sp, #8
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	460b      	mov	r3, r1
 800115e:	70fb      	strb	r3, [r7, #3]
	//I2C_HandleTypeDef* I2Cx = I2Cx // Resende
  if (LSM6DSOX_readRegister8(I2Cx, imu_address, LSM6DSOX_STATUS_REG) & 0x01) {
 8001160:	78fb      	ldrb	r3, [r7, #3]
 8001162:	221e      	movs	r2, #30
 8001164:	4619      	mov	r1, r3
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ff2c 	bl	8000fc4 <LSM6DSOX_readRegister8>
 800116c:	4603      	mov	r3, r0
 800116e:	f003 0301 	and.w	r3, r3, #1
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <LSM6DSOX_accelerationAvailable+0x26>
    return 1;
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <LSM6DSOX_accelerationAvailable+0x28>
  }

  return 0;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <LSM6DSOX_readGyroscope>:


//returns data in dps
int LSM6DSOX_readGyroscope(I2C_HandleTypeDef* I2Cx, uint8_t imu_address, float* x, float* y, float* z)
{		
 8001184:	b580      	push	{r7, lr}
 8001186:	b088      	sub	sp, #32
 8001188:	af02      	add	r7, sp, #8
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	607a      	str	r2, [r7, #4]
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	460b      	mov	r3, r1
 8001192:	72fb      	strb	r3, [r7, #11]
		//I2C_HandleTypeDef* I2Cx = I2Cx //Resende
	  int16_t data[3];

  if (!LSM6DSOX_readRegisters(I2Cx, imu_address, LSM6DSOX_OUTX_L_G, (uint8_t*)data, sizeof(data))) {
 8001194:	f107 0310 	add.w	r3, r7, #16
 8001198:	7af9      	ldrb	r1, [r7, #11]
 800119a:	2206      	movs	r2, #6
 800119c:	9200      	str	r2, [sp, #0]
 800119e:	2222      	movs	r2, #34	; 0x22
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f000 f863 	bl	800126c <LSM6DSOX_readRegisters>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d107      	bne.n	80011bc <LSM6DSOX_readGyroscope+0x38>
    x = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	607b      	str	r3, [r7, #4]
    y = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	603b      	str	r3, [r7, #0]
    z = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]

    return 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	e036      	b.n	800122a <LSM6DSOX_readGyroscope+0xa6>
  }
	
	*x = data[0] * gyr_FS / 32768.0;  // (2^16)/2 = 32768 (it is dividev by two since data is int16 - signed values - with allowed negative values)
 80011bc:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011c0:	ee07 3a90 	vmov	s15, r3
 80011c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011c8:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <LSM6DSOX_readGyroscope+0xb0>)
 80011ca:	edd3 7a00 	vldr	s15, [r3]
 80011ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d2:	eddf 6a19 	vldr	s13, [pc, #100]	; 8001238 <LSM6DSOX_readGyroscope+0xb4>
 80011d6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	edc3 7a00 	vstr	s15, [r3]
  *y = data[1] * gyr_FS / 32768.0;  // (2^16)/2 = 32768 (it is dividev by two since data is int16 - signed values - with allowed negative values)
 80011e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80011e4:	ee07 3a90 	vmov	s15, r3
 80011e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011ec:	4b11      	ldr	r3, [pc, #68]	; (8001234 <LSM6DSOX_readGyroscope+0xb0>)
 80011ee:	edd3 7a00 	vldr	s15, [r3]
 80011f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011f6:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001238 <LSM6DSOX_readGyroscope+0xb4>
 80011fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	edc3 7a00 	vstr	s15, [r3]
  *z = data[2] * gyr_FS / 32768.0; // (2^16)/2 = 32768 (it is dividev by two since data is int16 - signed values - with allowed negative values) 
 8001204:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001208:	ee07 3a90 	vmov	s15, r3
 800120c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001210:	4b08      	ldr	r3, [pc, #32]	; (8001234 <LSM6DSOX_readGyroscope+0xb0>)
 8001212:	edd3 7a00 	vldr	s15, [r3]
 8001216:	ee27 7a27 	vmul.f32	s14, s14, s15
 800121a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8001238 <LSM6DSOX_readGyroscope+0xb4>
 800121e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001222:	6a3b      	ldr	r3, [r7, #32]
 8001224:	edc3 7a00 	vstr	s15, [r3]
	
  return 1;
 8001228:	2301      	movs	r3, #1
	
}
 800122a:	4618      	mov	r0, r3
 800122c:	3718      	adds	r7, #24
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000318 	.word	0x20000318
 8001238:	47000000 	.word	0x47000000

0800123c <LSM6DSOX_gyroscopeAvailable>:
		return *data_gyr;
	}
}

int LSM6DSOX_gyroscopeAvailable(I2C_HandleTypeDef* I2Cx, uint8_t imu_address)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	70fb      	strb	r3, [r7, #3]
	//I2C_HandleTypeDef* I2Cx = I2Cx
  if (LSM6DSOX_readRegister8(I2Cx, imu_address, LSM6DSOX_STATUS_REG) & 0x02) {
 8001248:	78fb      	ldrb	r3, [r7, #3]
 800124a:	221e      	movs	r2, #30
 800124c:	4619      	mov	r1, r3
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	f7ff feb8 	bl	8000fc4 <LSM6DSOX_readRegister8>
 8001254:	4603      	mov	r3, r0
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <LSM6DSOX_gyroscopeAvailable+0x26>
    return 1;
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <LSM6DSOX_gyroscopeAvailable+0x28>
  }

  return 0;
 8001262:	2300      	movs	r3, #0
}
 8001264:	4618      	mov	r0, r3
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <LSM6DSOX_readRegisters>:
}



int LSM6DSOX_readRegisters(I2C_HandleTypeDef* I2Cx, uint8_t imu_address , uint8_t address, uint8_t* data, uint16_t length)
{	
 800126c:	b580      	push	{r7, lr}
 800126e:	b088      	sub	sp, #32
 8001270:	af02      	add	r7, sp, #8
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	607b      	str	r3, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	72fb      	strb	r3, [r7, #11]
 800127a:	4613      	mov	r3, r2
 800127c:	72bb      	strb	r3, [r7, #10]
	uint8_t x;
  HAL_StatusTypeDef result;
	//I2C_HandleTypeDef* I2Cx = I2Cx // TODO: Remove this after and see if this works
  
  result = HAL_I2C_Master_Transmit( I2Cx, (imu_address << 1), &address, 1, 10 ); // Original address - (LSM6DSOX_ADDRESS << 1) - Resende
 800127e:	7afb      	ldrb	r3, [r7, #11]
 8001280:	b29b      	uxth	r3, r3
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	b299      	uxth	r1, r3
 8001286:	f107 020a 	add.w	r2, r7, #10
 800128a:	230a      	movs	r3, #10
 800128c:	9300      	str	r3, [sp, #0]
 800128e:	2301      	movs	r3, #1
 8001290:	68f8      	ldr	r0, [r7, #12]
 8001292:	f003 f921 	bl	80044d8 <HAL_I2C_Master_Transmit>
 8001296:	4603      	mov	r3, r0
 8001298:	75fb      	strb	r3, [r7, #23]
  if( result != HAL_OK ) 
 800129a:	7dfb      	ldrb	r3, [r7, #23]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <LSM6DSOX_readRegisters+0x38>
  {
    /*Failed to send register value to driver*/
    //x = 0;
		return 0;
 80012a0:	2300      	movs	r3, #0
 80012a2:	e012      	b.n	80012ca <LSM6DSOX_readRegisters+0x5e>
  }
  
  result = HAL_I2C_Master_Receive ( I2Cx, (imu_address << 1), data, length, 10);
 80012a4:	7afb      	ldrb	r3, [r7, #11]
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	b299      	uxth	r1, r3
 80012ac:	8c3b      	ldrh	r3, [r7, #32]
 80012ae:	220a      	movs	r2, #10
 80012b0:	9200      	str	r2, [sp, #0]
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68f8      	ldr	r0, [r7, #12]
 80012b6:	f003 fa0d 	bl	80046d4 <HAL_I2C_Master_Receive>
 80012ba:	4603      	mov	r3, r0
 80012bc:	75fb      	strb	r3, [r7, #23]
  if( result != HAL_OK ) 
 80012be:	7dfb      	ldrb	r3, [r7, #23]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <LSM6DSOX_readRegisters+0x5c>
  {
    /*Failed to send register value to driver*/
    //x = 0;
		return 0;
 80012c4:	2300      	movs	r3, #0
 80012c6:	e000      	b.n	80012ca <LSM6DSOX_readRegisters+0x5e>
  }
  
  return 1;
 80012c8:	2301      	movs	r3, #1
	//return x;
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <IMU_Initialization>:
SDI_areas Gyro_integral[2] = {0};
Accel_angles Acc_ang[2] = {0};
Estimated_angles Estim_ang[2] = {0};

int IMU_Initialization()
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
	int i;
	int initialization_flag;
	for(i = 0; i<2; i++)
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
 80012de:	e035      	b.n	800134c <IMU_Initialization+0x78>
	{
		if(IMU_ON_OFF[i] == 0)
 80012e0:	4a1e      	ldr	r2, [pc, #120]	; (800135c <IMU_Initialization+0x88>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d12c      	bne.n	8001346 <IMU_Initialization+0x72>
		{
			switch(i)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d003      	beq.n	80012fa <IMU_Initialization+0x26>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d013      	beq.n	8001320 <IMU_Initialization+0x4c>
 80012f8:	e025      	b.n	8001346 <IMU_Initialization+0x72>
			{
			case 0:
				initialization_flag = LSM6DSOX_begin(&hi2c1, LSM6DSOX_ADDRESS_1);
 80012fa:	216a      	movs	r1, #106	; 0x6a
 80012fc:	4818      	ldr	r0, [pc, #96]	; (8001360 <IMU_Initialization+0x8c>)
 80012fe:	f7ff fe21 	bl	8000f44 <LSM6DSOX_begin>
 8001302:	6038      	str	r0, [r7, #0]
				if (initialization_flag == 0)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d104      	bne.n	8001314 <IMU_Initialization+0x40>
				{
					BlinkLED(200, 3);
 800130a:	2103      	movs	r1, #3
 800130c:	20c8      	movs	r0, #200	; 0xc8
 800130e:	f000 ff69 	bl	80021e4 <BlinkLED>
				}
				else
				{
					IMU_ON_OFF[i] = 1;
				}
				break;
 8001312:	e018      	b.n	8001346 <IMU_Initialization+0x72>
					IMU_ON_OFF[i] = 1;
 8001314:	4a11      	ldr	r2, [pc, #68]	; (800135c <IMU_Initialization+0x88>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2101      	movs	r1, #1
 800131a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 800131e:	e012      	b.n	8001346 <IMU_Initialization+0x72>


			case 1:
				initialization_flag = LSM6DSOX_begin(&hi2c1, LSM6DSOX_ADDRESS_2);
 8001320:	216b      	movs	r1, #107	; 0x6b
 8001322:	480f      	ldr	r0, [pc, #60]	; (8001360 <IMU_Initialization+0x8c>)
 8001324:	f7ff fe0e 	bl	8000f44 <LSM6DSOX_begin>
 8001328:	6038      	str	r0, [r7, #0]
				if (initialization_flag == 0)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d104      	bne.n	800133a <IMU_Initialization+0x66>
				{
					BlinkLED(200, 4);
 8001330:	2104      	movs	r1, #4
 8001332:	20c8      	movs	r0, #200	; 0xc8
 8001334:	f000 ff56 	bl	80021e4 <BlinkLED>
				}
				else
				{
					IMU_ON_OFF[i] = 1;
				}
				break;
 8001338:	e004      	b.n	8001344 <IMU_Initialization+0x70>
					IMU_ON_OFF[i] = 1;
 800133a:	4a08      	ldr	r2, [pc, #32]	; (800135c <IMU_Initialization+0x88>)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2101      	movs	r1, #1
 8001340:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				break;
 8001344:	bf00      	nop
	for(i = 0; i<2; i++)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	3301      	adds	r3, #1
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2b01      	cmp	r3, #1
 8001350:	ddc6      	ble.n	80012e0 <IMU_Initialization+0xc>
			}
		}
	}
	return initialization_flag;
 8001352:	683b      	ldr	r3, [r7, #0]
}
 8001354:	4618      	mov	r0, r3
 8001356:	3708      	adds	r7, #8
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	20000950 	.word	0x20000950
 8001360:	2000031c 	.word	0x2000031c
 8001364:	00000000 	.word	0x00000000

08001368 <Accelerometer_Gyroscope_Calibration>:

int Accelerometer_Gyroscope_Calibration()
{
 8001368:	b5b0      	push	{r4, r5, r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af02      	add	r7, sp, #8
	int i, elapsed_time;
	int calibration_samples = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
	int begin_calibration = 0;
 8001372:	2300      	movs	r3, #0
 8001374:	607b      	str	r3, [r7, #4]
	do
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001376:	2201      	movs	r2, #1
 8001378:	2102      	movs	r1, #2
 800137a:	4890      	ldr	r0, [pc, #576]	; (80015bc <Accelerometer_Gyroscope_Calibration+0x254>)
 800137c:	f002 ff4e 	bl	800421c <HAL_GPIO_WritePin>
		for(i = 0; i<2; i++)
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	e23a      	b.n	80017fc <Accelerometer_Gyroscope_Calibration+0x494>
		{
			switch(i)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d004      	beq.n	8001396 <Accelerometer_Gyroscope_Calibration+0x2e>
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	2b01      	cmp	r3, #1
 8001390:	f000 811e 	beq.w	80015d0 <Accelerometer_Gyroscope_Calibration+0x268>
 8001394:	e22f      	b.n	80017f6 <Accelerometer_Gyroscope_Calibration+0x48e>
			{
			case 0:
				if((LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_1) == 1) &
 8001396:	216a      	movs	r1, #106	; 0x6a
 8001398:	4889      	ldr	r0, [pc, #548]	; (80015c0 <Accelerometer_Gyroscope_Calibration+0x258>)
 800139a:	f7ff fedb 	bl	8001154 <LSM6DSOX_accelerationAvailable>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	bf0c      	ite	eq
 80013a4:	2301      	moveq	r3, #1
 80013a6:	2300      	movne	r3, #0
 80013a8:	b2dc      	uxtb	r4, r3
						(LSM6DSOX_gyroscopeAvailable(&hi2c1, LSM6DSOX_ADDRESS_1) == 1))
 80013aa:	216a      	movs	r1, #106	; 0x6a
 80013ac:	4884      	ldr	r0, [pc, #528]	; (80015c0 <Accelerometer_Gyroscope_Calibration+0x258>)
 80013ae:	f7ff ff45 	bl	800123c <LSM6DSOX_gyroscopeAvailable>
 80013b2:	4603      	mov	r3, r0
				if((LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_1) == 1) &
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	bf0c      	ite	eq
 80013b8:	2301      	moveq	r3, #1
 80013ba:	2300      	movne	r3, #0
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	4023      	ands	r3, r4
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d03e      	beq.n	8001444 <Accelerometer_Gyroscope_Calibration+0xdc>
				{
					LSM6DSOX_readAcceleration(&hi2c1, LSM6DSOX_ADDRESS_1, &IMUrawdata[i].Accelerometer_X, &IMUrawdata[i].Accelerometer_Y, &IMUrawdata[i].Accelerometer_Z);
 80013c6:	68fa      	ldr	r2, [r7, #12]
 80013c8:	4613      	mov	r3, r2
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	4a7c      	ldr	r2, [pc, #496]	; (80015c4 <Accelerometer_Gyroscope_Calibration+0x25c>)
 80013d2:	1899      	adds	r1, r3, r2
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	4613      	mov	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	4a79      	ldr	r2, [pc, #484]	; (80015c4 <Accelerometer_Gyroscope_Calibration+0x25c>)
 80013e0:	4413      	add	r3, r2
 80013e2:	1d18      	adds	r0, r3, #4
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	4613      	mov	r3, r2
 80013e8:	005b      	lsls	r3, r3, #1
 80013ea:	4413      	add	r3, r2
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	3308      	adds	r3, #8
 80013f0:	4a74      	ldr	r2, [pc, #464]	; (80015c4 <Accelerometer_Gyroscope_Calibration+0x25c>)
 80013f2:	4413      	add	r3, r2
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	4603      	mov	r3, r0
 80013f8:	460a      	mov	r2, r1
 80013fa:	216a      	movs	r1, #106	; 0x6a
 80013fc:	4870      	ldr	r0, [pc, #448]	; (80015c0 <Accelerometer_Gyroscope_Calibration+0x258>)
 80013fe:	f7ff fe4d 	bl	800109c <LSM6DSOX_readAcceleration>
					LSM6DSOX_readGyroscope(&hi2c1, LSM6DSOX_ADDRESS_1, &IMUrawdata[i].Gyroscope_X, &IMUrawdata[i].Gyroscope_Y, &IMUrawdata[i].Gyroscope_Z);
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	4613      	mov	r3, r2
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4413      	add	r3, r2
 800140a:	00db      	lsls	r3, r3, #3
 800140c:	3308      	adds	r3, #8
 800140e:	4a6d      	ldr	r2, [pc, #436]	; (80015c4 <Accelerometer_Gyroscope_Calibration+0x25c>)
 8001410:	4413      	add	r3, r2
 8001412:	1d19      	adds	r1, r3, #4
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	4613      	mov	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	4413      	add	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	3310      	adds	r3, #16
 8001420:	4a68      	ldr	r2, [pc, #416]	; (80015c4 <Accelerometer_Gyroscope_Calibration+0x25c>)
 8001422:	1898      	adds	r0, r3, r2
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	4613      	mov	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	4413      	add	r3, r2
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	3310      	adds	r3, #16
 8001430:	4a64      	ldr	r2, [pc, #400]	; (80015c4 <Accelerometer_Gyroscope_Calibration+0x25c>)
 8001432:	4413      	add	r3, r2
 8001434:	3304      	adds	r3, #4
 8001436:	9300      	str	r3, [sp, #0]
 8001438:	4603      	mov	r3, r0
 800143a:	460a      	mov	r2, r1
 800143c:	216a      	movs	r1, #106	; 0x6a
 800143e:	4860      	ldr	r0, [pc, #384]	; (80015c0 <Accelerometer_Gyroscope_Calibration+0x258>)
 8001440:	f7ff fea0 	bl	8001184 <LSM6DSOX_readGyroscope>
				}
				accelerometer_mean[i][0] += IMUrawdata[i].Accelerometer_X;
 8001444:	4960      	ldr	r1, [pc, #384]	; (80015c8 <Accelerometer_Gyroscope_Calibration+0x260>)
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	4613      	mov	r3, r2
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	4413      	add	r3, r2
 800144e:	009b      	lsls	r3, r3, #2
 8001450:	440b      	add	r3, r1
 8001452:	ed93 7a00 	vldr	s14, [r3]
 8001456:	495b      	ldr	r1, [pc, #364]	; (80015c4 <Accelerometer_Gyroscope_Calibration+0x25c>)
 8001458:	68fa      	ldr	r2, [r7, #12]
 800145a:	4613      	mov	r3, r2
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	440b      	add	r3, r1
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800146c:	4956      	ldr	r1, [pc, #344]	; (80015c8 <Accelerometer_Gyroscope_Calibration+0x260>)
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	4613      	mov	r3, r2
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	4413      	add	r3, r2
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	440b      	add	r3, r1
 800147a:	edc3 7a00 	vstr	s15, [r3]
				accelerometer_mean[i][1] += IMUrawdata[i].Accelerometer_Y;
 800147e:	4952      	ldr	r1, [pc, #328]	; (80015c8 <Accelerometer_Gyroscope_Calibration+0x260>)
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	3304      	adds	r3, #4
 800148e:	ed93 7a00 	vldr	s14, [r3]
 8001492:	494c      	ldr	r1, [pc, #304]	; (80015c4 <Accelerometer_Gyroscope_Calibration+0x25c>)
 8001494:	68fa      	ldr	r2, [r7, #12]
 8001496:	4613      	mov	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	00db      	lsls	r3, r3, #3
 800149e:	440b      	add	r3, r1
 80014a0:	3304      	adds	r3, #4
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014aa:	4947      	ldr	r1, [pc, #284]	; (80015c8 <Accelerometer_Gyroscope_Calibration+0x260>)
 80014ac:	68fa      	ldr	r2, [r7, #12]
 80014ae:	4613      	mov	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	4413      	add	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	3304      	adds	r3, #4
 80014ba:	edc3 7a00 	vstr	s15, [r3]
				accelerometer_mean[i][2] += IMUrawdata[i].Accelerometer_Z;
 80014be:	4942      	ldr	r1, [pc, #264]	; (80015c8 <Accelerometer_Gyroscope_Calibration+0x260>)
 80014c0:	68fa      	ldr	r2, [r7, #12]
 80014c2:	4613      	mov	r3, r2
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	4413      	add	r3, r2
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	440b      	add	r3, r1
 80014cc:	3308      	adds	r3, #8
 80014ce:	ed93 7a00 	vldr	s14, [r3]
 80014d2:	493c      	ldr	r1, [pc, #240]	; (80015c4 <Accelerometer_Gyroscope_Calibration+0x25c>)
 80014d4:	68fa      	ldr	r2, [r7, #12]
 80014d6:	4613      	mov	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	4413      	add	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	440b      	add	r3, r1
 80014e0:	3308      	adds	r3, #8
 80014e2:	edd3 7a00 	vldr	s15, [r3]
 80014e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014ea:	4937      	ldr	r1, [pc, #220]	; (80015c8 <Accelerometer_Gyroscope_Calibration+0x260>)
 80014ec:	68fa      	ldr	r2, [r7, #12]
 80014ee:	4613      	mov	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	4413      	add	r3, r2
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	440b      	add	r3, r1
 80014f8:	3308      	adds	r3, #8
 80014fa:	edc3 7a00 	vstr	s15, [r3]
				gyroscope_offset[i][0] += IMUrawdata[i].Gyroscope_X;
 80014fe:	4933      	ldr	r1, [pc, #204]	; (80015cc <Accelerometer_Gyroscope_Calibration+0x264>)
 8001500:	68fa      	ldr	r2, [r7, #12]
 8001502:	4613      	mov	r3, r2
 8001504:	005b      	lsls	r3, r3, #1
 8001506:	4413      	add	r3, r2
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	440b      	add	r3, r1
 800150c:	ed93 7a00 	vldr	s14, [r3]
 8001510:	492c      	ldr	r1, [pc, #176]	; (80015c4 <Accelerometer_Gyroscope_Calibration+0x25c>)
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	4613      	mov	r3, r2
 8001516:	005b      	lsls	r3, r3, #1
 8001518:	4413      	add	r3, r2
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	440b      	add	r3, r1
 800151e:	330c      	adds	r3, #12
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001528:	4928      	ldr	r1, [pc, #160]	; (80015cc <Accelerometer_Gyroscope_Calibration+0x264>)
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	edc3 7a00 	vstr	s15, [r3]
				gyroscope_offset[i][1] += IMUrawdata[i].Gyroscope_Y;
 800153a:	4924      	ldr	r1, [pc, #144]	; (80015cc <Accelerometer_Gyroscope_Calibration+0x264>)
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	440b      	add	r3, r1
 8001548:	3304      	adds	r3, #4
 800154a:	ed93 7a00 	vldr	s14, [r3]
 800154e:	491d      	ldr	r1, [pc, #116]	; (80015c4 <Accelerometer_Gyroscope_Calibration+0x25c>)
 8001550:	68fa      	ldr	r2, [r7, #12]
 8001552:	4613      	mov	r3, r2
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	4413      	add	r3, r2
 8001558:	00db      	lsls	r3, r3, #3
 800155a:	440b      	add	r3, r1
 800155c:	3310      	adds	r3, #16
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001566:	4919      	ldr	r1, [pc, #100]	; (80015cc <Accelerometer_Gyroscope_Calibration+0x264>)
 8001568:	68fa      	ldr	r2, [r7, #12]
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	440b      	add	r3, r1
 8001574:	3304      	adds	r3, #4
 8001576:	edc3 7a00 	vstr	s15, [r3]
				gyroscope_offset[i][2] += IMUrawdata[i].Gyroscope_Z;
 800157a:	4914      	ldr	r1, [pc, #80]	; (80015cc <Accelerometer_Gyroscope_Calibration+0x264>)
 800157c:	68fa      	ldr	r2, [r7, #12]
 800157e:	4613      	mov	r3, r2
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	4413      	add	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	440b      	add	r3, r1
 8001588:	3308      	adds	r3, #8
 800158a:	ed93 7a00 	vldr	s14, [r3]
 800158e:	490d      	ldr	r1, [pc, #52]	; (80015c4 <Accelerometer_Gyroscope_Calibration+0x25c>)
 8001590:	68fa      	ldr	r2, [r7, #12]
 8001592:	4613      	mov	r3, r2
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4413      	add	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	440b      	add	r3, r1
 800159c:	3314      	adds	r3, #20
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015a6:	4909      	ldr	r1, [pc, #36]	; (80015cc <Accelerometer_Gyroscope_Calibration+0x264>)
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	4613      	mov	r3, r2
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	4413      	add	r3, r2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	3308      	adds	r3, #8
 80015b6:	edc3 7a00 	vstr	s15, [r3]

				break;
 80015ba:	e11c      	b.n	80017f6 <Accelerometer_Gyroscope_Calibration+0x48e>
 80015bc:	40020800 	.word	0x40020800
 80015c0:	2000031c 	.word	0x2000031c
 80015c4:	20000990 	.word	0x20000990
 80015c8:	20000958 	.word	0x20000958
 80015cc:	20000970 	.word	0x20000970

			case 1:
				if((LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_2) == 1) &
 80015d0:	216b      	movs	r1, #107	; 0x6b
 80015d2:	4898      	ldr	r0, [pc, #608]	; (8001834 <Accelerometer_Gyroscope_Calibration+0x4cc>)
 80015d4:	f7ff fdbe 	bl	8001154 <LSM6DSOX_accelerationAvailable>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b01      	cmp	r3, #1
 80015dc:	bf0c      	ite	eq
 80015de:	2301      	moveq	r3, #1
 80015e0:	2300      	movne	r3, #0
 80015e2:	b2dc      	uxtb	r4, r3
						(LSM6DSOX_gyroscopeAvailable(&hi2c1, LSM6DSOX_ADDRESS_2) == 1))
 80015e4:	216b      	movs	r1, #107	; 0x6b
 80015e6:	4893      	ldr	r0, [pc, #588]	; (8001834 <Accelerometer_Gyroscope_Calibration+0x4cc>)
 80015e8:	f7ff fe28 	bl	800123c <LSM6DSOX_gyroscopeAvailable>
 80015ec:	4603      	mov	r3, r0
				if((LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_2) == 1) &
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	bf0c      	ite	eq
 80015f2:	2301      	moveq	r3, #1
 80015f4:	2300      	movne	r3, #0
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	4023      	ands	r3, r4
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d03e      	beq.n	800167e <Accelerometer_Gyroscope_Calibration+0x316>
				{
					LSM6DSOX_readAcceleration(&hi2c1, LSM6DSOX_ADDRESS_2, &IMUrawdata[i].Accelerometer_X, &IMUrawdata[i].Accelerometer_Y, &IMUrawdata[i].Accelerometer_Z);
 8001600:	68fa      	ldr	r2, [r7, #12]
 8001602:	4613      	mov	r3, r2
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	4a8b      	ldr	r2, [pc, #556]	; (8001838 <Accelerometer_Gyroscope_Calibration+0x4d0>)
 800160c:	1899      	adds	r1, r3, r2
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	4613      	mov	r3, r2
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	4413      	add	r3, r2
 8001616:	00db      	lsls	r3, r3, #3
 8001618:	4a87      	ldr	r2, [pc, #540]	; (8001838 <Accelerometer_Gyroscope_Calibration+0x4d0>)
 800161a:	4413      	add	r3, r2
 800161c:	1d18      	adds	r0, r3, #4
 800161e:	68fa      	ldr	r2, [r7, #12]
 8001620:	4613      	mov	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4413      	add	r3, r2
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	3308      	adds	r3, #8
 800162a:	4a83      	ldr	r2, [pc, #524]	; (8001838 <Accelerometer_Gyroscope_Calibration+0x4d0>)
 800162c:	4413      	add	r3, r2
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	4603      	mov	r3, r0
 8001632:	460a      	mov	r2, r1
 8001634:	216b      	movs	r1, #107	; 0x6b
 8001636:	487f      	ldr	r0, [pc, #508]	; (8001834 <Accelerometer_Gyroscope_Calibration+0x4cc>)
 8001638:	f7ff fd30 	bl	800109c <LSM6DSOX_readAcceleration>
					LSM6DSOX_readGyroscope(&hi2c1, LSM6DSOX_ADDRESS_2, &IMUrawdata[i].Gyroscope_X, &IMUrawdata[i].Gyroscope_Y, &IMUrawdata[i].Gyroscope_Z);
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4613      	mov	r3, r2
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	4413      	add	r3, r2
 8001644:	00db      	lsls	r3, r3, #3
 8001646:	3308      	adds	r3, #8
 8001648:	4a7b      	ldr	r2, [pc, #492]	; (8001838 <Accelerometer_Gyroscope_Calibration+0x4d0>)
 800164a:	4413      	add	r3, r2
 800164c:	1d19      	adds	r1, r3, #4
 800164e:	68fa      	ldr	r2, [r7, #12]
 8001650:	4613      	mov	r3, r2
 8001652:	005b      	lsls	r3, r3, #1
 8001654:	4413      	add	r3, r2
 8001656:	00db      	lsls	r3, r3, #3
 8001658:	3310      	adds	r3, #16
 800165a:	4a77      	ldr	r2, [pc, #476]	; (8001838 <Accelerometer_Gyroscope_Calibration+0x4d0>)
 800165c:	1898      	adds	r0, r3, r2
 800165e:	68fa      	ldr	r2, [r7, #12]
 8001660:	4613      	mov	r3, r2
 8001662:	005b      	lsls	r3, r3, #1
 8001664:	4413      	add	r3, r2
 8001666:	00db      	lsls	r3, r3, #3
 8001668:	3310      	adds	r3, #16
 800166a:	4a73      	ldr	r2, [pc, #460]	; (8001838 <Accelerometer_Gyroscope_Calibration+0x4d0>)
 800166c:	4413      	add	r3, r2
 800166e:	3304      	adds	r3, #4
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	4603      	mov	r3, r0
 8001674:	460a      	mov	r2, r1
 8001676:	216b      	movs	r1, #107	; 0x6b
 8001678:	486e      	ldr	r0, [pc, #440]	; (8001834 <Accelerometer_Gyroscope_Calibration+0x4cc>)
 800167a:	f7ff fd83 	bl	8001184 <LSM6DSOX_readGyroscope>
				}
				accelerometer_mean[i][0] += IMUrawdata[i].Accelerometer_X;
 800167e:	496f      	ldr	r1, [pc, #444]	; (800183c <Accelerometer_Gyroscope_Calibration+0x4d4>)
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	4613      	mov	r3, r2
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	4413      	add	r3, r2
 8001688:	009b      	lsls	r3, r3, #2
 800168a:	440b      	add	r3, r1
 800168c:	ed93 7a00 	vldr	s14, [r3]
 8001690:	4969      	ldr	r1, [pc, #420]	; (8001838 <Accelerometer_Gyroscope_Calibration+0x4d0>)
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	4613      	mov	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	00db      	lsls	r3, r3, #3
 800169c:	440b      	add	r3, r1
 800169e:	edd3 7a00 	vldr	s15, [r3]
 80016a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016a6:	4965      	ldr	r1, [pc, #404]	; (800183c <Accelerometer_Gyroscope_Calibration+0x4d4>)
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4613      	mov	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	4413      	add	r3, r2
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	440b      	add	r3, r1
 80016b4:	edc3 7a00 	vstr	s15, [r3]
				accelerometer_mean[i][1] += IMUrawdata[i].Accelerometer_Y;
 80016b8:	4960      	ldr	r1, [pc, #384]	; (800183c <Accelerometer_Gyroscope_Calibration+0x4d4>)
 80016ba:	68fa      	ldr	r2, [r7, #12]
 80016bc:	4613      	mov	r3, r2
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	4413      	add	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	3304      	adds	r3, #4
 80016c8:	ed93 7a00 	vldr	s14, [r3]
 80016cc:	495a      	ldr	r1, [pc, #360]	; (8001838 <Accelerometer_Gyroscope_Calibration+0x4d0>)
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4613      	mov	r3, r2
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	4413      	add	r3, r2
 80016d6:	00db      	lsls	r3, r3, #3
 80016d8:	440b      	add	r3, r1
 80016da:	3304      	adds	r3, #4
 80016dc:	edd3 7a00 	vldr	s15, [r3]
 80016e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016e4:	4955      	ldr	r1, [pc, #340]	; (800183c <Accelerometer_Gyroscope_Calibration+0x4d4>)
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	4613      	mov	r3, r2
 80016ea:	005b      	lsls	r3, r3, #1
 80016ec:	4413      	add	r3, r2
 80016ee:	009b      	lsls	r3, r3, #2
 80016f0:	440b      	add	r3, r1
 80016f2:	3304      	adds	r3, #4
 80016f4:	edc3 7a00 	vstr	s15, [r3]
				accelerometer_mean[i][2] += IMUrawdata[i].Accelerometer_Z;
 80016f8:	4950      	ldr	r1, [pc, #320]	; (800183c <Accelerometer_Gyroscope_Calibration+0x4d4>)
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	440b      	add	r3, r1
 8001706:	3308      	adds	r3, #8
 8001708:	ed93 7a00 	vldr	s14, [r3]
 800170c:	494a      	ldr	r1, [pc, #296]	; (8001838 <Accelerometer_Gyroscope_Calibration+0x4d0>)
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	4613      	mov	r3, r2
 8001712:	005b      	lsls	r3, r3, #1
 8001714:	4413      	add	r3, r2
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	440b      	add	r3, r1
 800171a:	3308      	adds	r3, #8
 800171c:	edd3 7a00 	vldr	s15, [r3]
 8001720:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001724:	4945      	ldr	r1, [pc, #276]	; (800183c <Accelerometer_Gyroscope_Calibration+0x4d4>)
 8001726:	68fa      	ldr	r2, [r7, #12]
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	440b      	add	r3, r1
 8001732:	3308      	adds	r3, #8
 8001734:	edc3 7a00 	vstr	s15, [r3]
				gyroscope_offset[i][0] += IMUrawdata[i].Gyroscope_X;
 8001738:	4941      	ldr	r1, [pc, #260]	; (8001840 <Accelerometer_Gyroscope_Calibration+0x4d8>)
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	4613      	mov	r3, r2
 800173e:	005b      	lsls	r3, r3, #1
 8001740:	4413      	add	r3, r2
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	440b      	add	r3, r1
 8001746:	ed93 7a00 	vldr	s14, [r3]
 800174a:	493b      	ldr	r1, [pc, #236]	; (8001838 <Accelerometer_Gyroscope_Calibration+0x4d0>)
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	00db      	lsls	r3, r3, #3
 8001756:	440b      	add	r3, r1
 8001758:	330c      	adds	r3, #12
 800175a:	edd3 7a00 	vldr	s15, [r3]
 800175e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001762:	4937      	ldr	r1, [pc, #220]	; (8001840 <Accelerometer_Gyroscope_Calibration+0x4d8>)
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	4613      	mov	r3, r2
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	4413      	add	r3, r2
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	440b      	add	r3, r1
 8001770:	edc3 7a00 	vstr	s15, [r3]
				gyroscope_offset[i][1] += IMUrawdata[i].Gyroscope_Y;
 8001774:	4932      	ldr	r1, [pc, #200]	; (8001840 <Accelerometer_Gyroscope_Calibration+0x4d8>)
 8001776:	68fa      	ldr	r2, [r7, #12]
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	3304      	adds	r3, #4
 8001784:	ed93 7a00 	vldr	s14, [r3]
 8001788:	492b      	ldr	r1, [pc, #172]	; (8001838 <Accelerometer_Gyroscope_Calibration+0x4d0>)
 800178a:	68fa      	ldr	r2, [r7, #12]
 800178c:	4613      	mov	r3, r2
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	4413      	add	r3, r2
 8001792:	00db      	lsls	r3, r3, #3
 8001794:	440b      	add	r3, r1
 8001796:	3310      	adds	r3, #16
 8001798:	edd3 7a00 	vldr	s15, [r3]
 800179c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017a0:	4927      	ldr	r1, [pc, #156]	; (8001840 <Accelerometer_Gyroscope_Calibration+0x4d8>)
 80017a2:	68fa      	ldr	r2, [r7, #12]
 80017a4:	4613      	mov	r3, r2
 80017a6:	005b      	lsls	r3, r3, #1
 80017a8:	4413      	add	r3, r2
 80017aa:	009b      	lsls	r3, r3, #2
 80017ac:	440b      	add	r3, r1
 80017ae:	3304      	adds	r3, #4
 80017b0:	edc3 7a00 	vstr	s15, [r3]
				gyroscope_offset[i][2] += IMUrawdata[i].Gyroscope_Z;
 80017b4:	4922      	ldr	r1, [pc, #136]	; (8001840 <Accelerometer_Gyroscope_Calibration+0x4d8>)
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	3308      	adds	r3, #8
 80017c4:	ed93 7a00 	vldr	s14, [r3]
 80017c8:	491b      	ldr	r1, [pc, #108]	; (8001838 <Accelerometer_Gyroscope_Calibration+0x4d0>)
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	4613      	mov	r3, r2
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	4413      	add	r3, r2
 80017d2:	00db      	lsls	r3, r3, #3
 80017d4:	440b      	add	r3, r1
 80017d6:	3314      	adds	r3, #20
 80017d8:	edd3 7a00 	vldr	s15, [r3]
 80017dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017e0:	4917      	ldr	r1, [pc, #92]	; (8001840 <Accelerometer_Gyroscope_Calibration+0x4d8>)
 80017e2:	68fa      	ldr	r2, [r7, #12]
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	440b      	add	r3, r1
 80017ee:	3308      	adds	r3, #8
 80017f0:	edc3 7a00 	vstr	s15, [r3]

				break;
 80017f4:	bf00      	nop
		for(i = 0; i<2; i++)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	3301      	adds	r3, #1
 80017fa:	60fb      	str	r3, [r7, #12]
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	2b01      	cmp	r3, #1
 8001800:	f77f adc1 	ble.w	8001386 <Accelerometer_Gyroscope_Calibration+0x1e>
			}
		}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8001804:	2200      	movs	r2, #0
 8001806:	2102      	movs	r1, #2
 8001808:	480e      	ldr	r0, [pc, #56]	; (8001844 <Accelerometer_Gyroscope_Calibration+0x4dc>)
 800180a:	f002 fd07 	bl	800421c <HAL_GPIO_WritePin>
		++calibration_samples;
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	3301      	adds	r3, #1
 8001812:	60bb      	str	r3, [r7, #8]
		elapsed_time = HAL_GetTick() - begin_calibration;
 8001814:	f001 fdfe 	bl	8003414 <HAL_GetTick>
 8001818:	4602      	mov	r2, r0
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	1ad3      	subs	r3, r2, r3
 800181e:	603b      	str	r3, [r7, #0]
	}while(elapsed_time < (Calibration_Time * 1000));
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	f242 720f 	movw	r2, #9999	; 0x270f
 8001826:	4293      	cmp	r3, r2
 8001828:	f77f ada5 	ble.w	8001376 <Accelerometer_Gyroscope_Calibration+0xe>

	for(i = 0; i<2; i++)
 800182c:	2300      	movs	r3, #0
 800182e:	60fb      	str	r3, [r7, #12]
 8001830:	e117      	b.n	8001a62 <Accelerometer_Gyroscope_Calibration+0x6fa>
 8001832:	bf00      	nop
 8001834:	2000031c 	.word	0x2000031c
 8001838:	20000990 	.word	0x20000990
 800183c:	20000958 	.word	0x20000958
 8001840:	20000970 	.word	0x20000970
 8001844:	40020800 	.word	0x40020800
	{
		accelerometer_mean[i][0] = accelerometer_mean[i][0]/calibration_samples;
 8001848:	498d      	ldr	r1, [pc, #564]	; (8001a80 <Accelerometer_Gyroscope_Calibration+0x718>)
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	4613      	mov	r3, r2
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	4413      	add	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	edd3 6a00 	vldr	s13, [r3]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	ee07 3a90 	vmov	s15, r3
 8001860:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001864:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001868:	4985      	ldr	r1, [pc, #532]	; (8001a80 <Accelerometer_Gyroscope_Calibration+0x718>)
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	4613      	mov	r3, r2
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	4413      	add	r3, r2
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	440b      	add	r3, r1
 8001876:	edc3 7a00 	vstr	s15, [r3]
		accelerometer_mean[i][1] = accelerometer_mean[i][1]/calibration_samples;
 800187a:	4981      	ldr	r1, [pc, #516]	; (8001a80 <Accelerometer_Gyroscope_Calibration+0x718>)
 800187c:	68fa      	ldr	r2, [r7, #12]
 800187e:	4613      	mov	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	4413      	add	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	440b      	add	r3, r1
 8001888:	3304      	adds	r3, #4
 800188a:	edd3 6a00 	vldr	s13, [r3]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	ee07 3a90 	vmov	s15, r3
 8001894:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001898:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800189c:	4978      	ldr	r1, [pc, #480]	; (8001a80 <Accelerometer_Gyroscope_Calibration+0x718>)
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4613      	mov	r3, r2
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	4413      	add	r3, r2
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	3304      	adds	r3, #4
 80018ac:	edc3 7a00 	vstr	s15, [r3]
		accelerometer_mean[i][2] = accelerometer_mean[i][2]/calibration_samples;
 80018b0:	4973      	ldr	r1, [pc, #460]	; (8001a80 <Accelerometer_Gyroscope_Calibration+0x718>)
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	4613      	mov	r3, r2
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4413      	add	r3, r2
 80018ba:	009b      	lsls	r3, r3, #2
 80018bc:	440b      	add	r3, r1
 80018be:	3308      	adds	r3, #8
 80018c0:	edd3 6a00 	vldr	s13, [r3]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	ee07 3a90 	vmov	s15, r3
 80018ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018d2:	496b      	ldr	r1, [pc, #428]	; (8001a80 <Accelerometer_Gyroscope_Calibration+0x718>)
 80018d4:	68fa      	ldr	r2, [r7, #12]
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	440b      	add	r3, r1
 80018e0:	3308      	adds	r3, #8
 80018e2:	edc3 7a00 	vstr	s15, [r3]
		gyroscope_offset[i][0] = gyroscope_offset[i][0]/calibration_samples;
 80018e6:	4967      	ldr	r1, [pc, #412]	; (8001a84 <Accelerometer_Gyroscope_Calibration+0x71c>)
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	4613      	mov	r3, r2
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	4413      	add	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	440b      	add	r3, r1
 80018f4:	edd3 6a00 	vldr	s13, [r3]
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	ee07 3a90 	vmov	s15, r3
 80018fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001906:	495f      	ldr	r1, [pc, #380]	; (8001a84 <Accelerometer_Gyroscope_Calibration+0x71c>)
 8001908:	68fa      	ldr	r2, [r7, #12]
 800190a:	4613      	mov	r3, r2
 800190c:	005b      	lsls	r3, r3, #1
 800190e:	4413      	add	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	edc3 7a00 	vstr	s15, [r3]
		gyroscope_offset[i][1] = gyroscope_offset[i][1]/calibration_samples;
 8001918:	495a      	ldr	r1, [pc, #360]	; (8001a84 <Accelerometer_Gyroscope_Calibration+0x71c>)
 800191a:	68fa      	ldr	r2, [r7, #12]
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	440b      	add	r3, r1
 8001926:	3304      	adds	r3, #4
 8001928:	edd3 6a00 	vldr	s13, [r3]
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	ee07 3a90 	vmov	s15, r3
 8001932:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800193a:	4952      	ldr	r1, [pc, #328]	; (8001a84 <Accelerometer_Gyroscope_Calibration+0x71c>)
 800193c:	68fa      	ldr	r2, [r7, #12]
 800193e:	4613      	mov	r3, r2
 8001940:	005b      	lsls	r3, r3, #1
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	440b      	add	r3, r1
 8001948:	3304      	adds	r3, #4
 800194a:	edc3 7a00 	vstr	s15, [r3]
		gyroscope_offset[i][2] = gyroscope_offset[i][2]/calibration_samples;
 800194e:	494d      	ldr	r1, [pc, #308]	; (8001a84 <Accelerometer_Gyroscope_Calibration+0x71c>)
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	440b      	add	r3, r1
 800195c:	3308      	adds	r3, #8
 800195e:	edd3 6a00 	vldr	s13, [r3]
 8001962:	68bb      	ldr	r3, [r7, #8]
 8001964:	ee07 3a90 	vmov	s15, r3
 8001968:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800196c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001970:	4944      	ldr	r1, [pc, #272]	; (8001a84 <Accelerometer_Gyroscope_Calibration+0x71c>)
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	3308      	adds	r3, #8
 8001980:	edc3 7a00 	vstr	s15, [r3]

		norm_acceleration[i] = round(sqrt(pow(accelerometer_mean[i][0], 2) + pow(accelerometer_mean[i][1], 2) + pow(accelerometer_mean[i][2], 2)));
 8001984:	493e      	ldr	r1, [pc, #248]	; (8001a80 <Accelerometer_Gyroscope_Calibration+0x718>)
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4613      	mov	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	440b      	add	r3, r1
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fdd7 	bl	8000548 <__aeabi_f2d>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8001a78 <Accelerometer_Gyroscope_Calibration+0x710>
 80019a2:	ec43 2b10 	vmov	d0, r2, r3
 80019a6:	f012 fd75 	bl	8014494 <pow>
 80019aa:	ec55 4b10 	vmov	r4, r5, d0
 80019ae:	4934      	ldr	r1, [pc, #208]	; (8001a80 <Accelerometer_Gyroscope_Calibration+0x718>)
 80019b0:	68fa      	ldr	r2, [r7, #12]
 80019b2:	4613      	mov	r3, r2
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	3304      	adds	r3, #4
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7fe fdc1 	bl	8000548 <__aeabi_f2d>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	ed9f 1b2b 	vldr	d1, [pc, #172]	; 8001a78 <Accelerometer_Gyroscope_Calibration+0x710>
 80019ce:	ec43 2b10 	vmov	d0, r2, r3
 80019d2:	f012 fd5f 	bl	8014494 <pow>
 80019d6:	ec53 2b10 	vmov	r2, r3, d0
 80019da:	4620      	mov	r0, r4
 80019dc:	4629      	mov	r1, r5
 80019de:	f7fe fc55 	bl	800028c <__adddf3>
 80019e2:	4602      	mov	r2, r0
 80019e4:	460b      	mov	r3, r1
 80019e6:	4614      	mov	r4, r2
 80019e8:	461d      	mov	r5, r3
 80019ea:	4925      	ldr	r1, [pc, #148]	; (8001a80 <Accelerometer_Gyroscope_Calibration+0x718>)
 80019ec:	68fa      	ldr	r2, [r7, #12]
 80019ee:	4613      	mov	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	3308      	adds	r3, #8
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fda3 	bl	8000548 <__aeabi_f2d>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8001a78 <Accelerometer_Gyroscope_Calibration+0x710>
 8001a0a:	ec43 2b10 	vmov	d0, r2, r3
 8001a0e:	f012 fd41 	bl	8014494 <pow>
 8001a12:	ec53 2b10 	vmov	r2, r3, d0
 8001a16:	4620      	mov	r0, r4
 8001a18:	4629      	mov	r1, r5
 8001a1a:	f7fe fc37 	bl	800028c <__adddf3>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	460b      	mov	r3, r1
 8001a22:	ec43 2b17 	vmov	d7, r2, r3
 8001a26:	eeb0 0a47 	vmov.f32	s0, s14
 8001a2a:	eef0 0a67 	vmov.f32	s1, s15
 8001a2e:	f012 fda1 	bl	8014574 <sqrt>
 8001a32:	eeb0 7a40 	vmov.f32	s14, s0
 8001a36:	eef0 7a60 	vmov.f32	s15, s1
 8001a3a:	eeb0 0a47 	vmov.f32	s0, s14
 8001a3e:	eef0 0a67 	vmov.f32	s1, s15
 8001a42:	f013 f853 	bl	8014aec <round>
 8001a46:	ec53 2b10 	vmov	r2, r3, d0
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f7ff f883 	bl	8000b58 <__aeabi_d2iz>
 8001a52:	4602      	mov	r2, r0
 8001a54:	490c      	ldr	r1, [pc, #48]	; (8001a88 <Accelerometer_Gyroscope_Calibration+0x720>)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(i = 0; i<2; i++)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	f77f aeef 	ble.w	8001848 <Accelerometer_Gyroscope_Calibration+0x4e0>
	}

	return 0;
 8001a6a:	2300      	movs	r3, #0
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bdb0      	pop	{r4, r5, r7, pc}
 8001a74:	f3af 8000 	nop.w
 8001a78:	00000000 	.word	0x00000000
 8001a7c:	40000000 	.word	0x40000000
 8001a80:	20000958 	.word	0x20000958
 8001a84:	20000970 	.word	0x20000970
 8001a88:	20000988 	.word	0x20000988

08001a8c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b083      	sub	sp, #12
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	4a07      	ldr	r2, [pc, #28]	; (8001ab4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d105      	bne.n	8001aa8 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		flag = 1;
 8001a9c:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	601a      	str	r2, [r3, #0]
		emg_flag = 1;
 8001aa2:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	601a      	str	r2, [r3, #0]
	}

}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	200004b4 	.word	0x200004b4
 8001ab8:	20000934 	.word	0x20000934
 8001abc:	20000938 	.word	0x20000938

08001ac0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ac0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ac4:	b096      	sub	sp, #88	; 0x58
 8001ac6:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ac8:	f001 fc3e 	bl	8003348 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001acc:	f000 f918 	bl	8001d00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ad0:	f000 fa6c 	bl	8001fac <MX_GPIO_Init>
  MX_DMA_Init();
 8001ad4:	f000 fa42 	bl	8001f5c <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8001ad8:	f000 f9aa 	bl	8001e30 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8001adc:	f00a fbbc 	bl	800c258 <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001ae0:	f00f f882 	bl	8010be8 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8001ae4:	f000 f9c4 	bl	8001e70 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001ae8:	f000 f974 	bl	8001dd4 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 8001aec:	f000 fa0c 	bl	8001f08 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  IMU_Initialization();
 8001af0:	f7ff fbf0 	bl	80012d4 <IMU_Initialization>
  Accelerometer_Gyroscope_Calibration();
 8001af4:	f7ff fc38 	bl	8001368 <Accelerometer_Gyroscope_Calibration>
  HAL_TIM_Base_Start_IT(&htim2);
 8001af8:	4876      	ldr	r0, [pc, #472]	; (8001cd4 <main+0x214>)
 8001afa:	f006 fd95 	bl	8008628 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(flag == 1)
 8001afe:	4b76      	ldr	r3, [pc, #472]	; (8001cd8 <main+0x218>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	f040 80cf 	bne.w	8001ca6 <main+0x1e6>
	  {
		  char temp_buffer[TEMP_BUFFER_SIZE];
		  Gyro_Reading();
 8001b08:	f000 fb94 	bl	8002234 <Gyro_Reading>
		  n_int++;
 8001b0c:	4b73      	ldr	r3, [pc, #460]	; (8001cdc <main+0x21c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	3301      	adds	r3, #1
 8001b12:	4a72      	ldr	r2, [pc, #456]	; (8001cdc <main+0x21c>)
 8001b14:	6013      	str	r3, [r2, #0]
		  if(n_int == 10)
 8001b16:	4b71      	ldr	r3, [pc, #452]	; (8001cdc <main+0x21c>)
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	2b0a      	cmp	r3, #10
 8001b1c:	f040 80c0 	bne.w	8001ca0 <main+0x1e0>
		  {

			  Acc_Mag_Reading();
 8001b20:	f000 fd10 	bl	8002544 <Acc_Mag_Reading>
			  SDI();
 8001b24:	f000 fe3a 	bl	800279c <SDI>
			  //Gyro_Integration_Test();
			  Complementary_filter();
 8001b28:	f000 ff0e 	bl	8002948 <Complementary_filter>

			  int temp_length = sprintf((char*)temp_buffer, "%.3f;%.3f;%.3f;%.3f",
					  Estim_ang[0].roll, Estim_ang[0].pitch, Estim_ang[1].roll, Estim_ang[1].pitch);
 8001b2c:	4b6c      	ldr	r3, [pc, #432]	; (8001ce0 <main+0x220>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
			  int temp_length = sprintf((char*)temp_buffer, "%.3f;%.3f;%.3f;%.3f",
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fd09 	bl	8000548 <__aeabi_f2d>
 8001b36:	4682      	mov	sl, r0
 8001b38:	468b      	mov	fp, r1
					  Estim_ang[0].roll, Estim_ang[0].pitch, Estim_ang[1].roll, Estim_ang[1].pitch);
 8001b3a:	4b69      	ldr	r3, [pc, #420]	; (8001ce0 <main+0x220>)
 8001b3c:	685b      	ldr	r3, [r3, #4]
			  int temp_length = sprintf((char*)temp_buffer, "%.3f;%.3f;%.3f;%.3f",
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7fe fd02 	bl	8000548 <__aeabi_f2d>
 8001b44:	4604      	mov	r4, r0
 8001b46:	460d      	mov	r5, r1
					  Estim_ang[0].roll, Estim_ang[0].pitch, Estim_ang[1].roll, Estim_ang[1].pitch);
 8001b48:	4b65      	ldr	r3, [pc, #404]	; (8001ce0 <main+0x220>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
			  int temp_length = sprintf((char*)temp_buffer, "%.3f;%.3f;%.3f;%.3f",
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7fe fcfb 	bl	8000548 <__aeabi_f2d>
 8001b52:	4680      	mov	r8, r0
 8001b54:	4689      	mov	r9, r1
					  Estim_ang[0].roll, Estim_ang[0].pitch, Estim_ang[1].roll, Estim_ang[1].pitch);
 8001b56:	4b62      	ldr	r3, [pc, #392]	; (8001ce0 <main+0x220>)
 8001b58:	68db      	ldr	r3, [r3, #12]
			  int temp_length = sprintf((char*)temp_buffer, "%.3f;%.3f;%.3f;%.3f",
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7fe fcf4 	bl	8000548 <__aeabi_f2d>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4638      	mov	r0, r7
 8001b66:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001b6a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001b6e:	e9cd 4500 	strd	r4, r5, [sp]
 8001b72:	4652      	mov	r2, sl
 8001b74:	465b      	mov	r3, fp
 8001b76:	495b      	ldr	r1, [pc, #364]	; (8001ce4 <main+0x224>)
 8001b78:	f010 f9b6 	bl	8011ee8 <siprintf>
 8001b7c:	6378      	str	r0, [r7, #52]	; 0x34

			  for(size_t k = strlen(temp_buffer); k < TEMP_BUFFER_SIZE - 1; k++)
 8001b7e:	463b      	mov	r3, r7
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7fe fb75 	bl	8000270 <strlen>
 8001b86:	63f8      	str	r0, [r7, #60]	; 0x3c
 8001b88:	e007      	b.n	8001b9a <main+0xda>
			  {
				  temp_buffer[k] = ' ';
 8001b8a:	463a      	mov	r2, r7
 8001b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b8e:	4413      	add	r3, r2
 8001b90:	2220      	movs	r2, #32
 8001b92:	701a      	strb	r2, [r3, #0]
			  for(size_t k = strlen(temp_buffer); k < TEMP_BUFFER_SIZE - 1; k++)
 8001b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b96:	3301      	adds	r3, #1
 8001b98:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b9c:	2b30      	cmp	r3, #48	; 0x30
 8001b9e:	d9f4      	bls.n	8001b8a <main+0xca>
			  }

			  if(buffer_length + TEMP_BUFFER_SIZE >= BUFFER_SIZE)
 8001ba0:	4b51      	ldr	r3, [pc, #324]	; (8001ce8 <main+0x228>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f240 32b5 	movw	r2, #949	; 0x3b5
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	dd18      	ble.n	8001bde <main+0x11e>
			  {
				  CDC_Transmit_FS((uint8_t*)buf, strlen(buf));
 8001bac:	484f      	ldr	r0, [pc, #316]	; (8001cec <main+0x22c>)
 8001bae:	f7fe fb5f 	bl	8000270 <strlen>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	484c      	ldr	r0, [pc, #304]	; (8001cec <main+0x22c>)
 8001bba:	f00f f8d3 	bl	8010d64 <CDC_Transmit_FS>
				  AppendToFile(log_path, strlen(log_path), buf, strlen(buf));
 8001bbe:	484c      	ldr	r0, [pc, #304]	; (8001cf0 <main+0x230>)
 8001bc0:	f7fe fb56 	bl	8000270 <strlen>
 8001bc4:	4604      	mov	r4, r0
 8001bc6:	4849      	ldr	r0, [pc, #292]	; (8001cec <main+0x22c>)
 8001bc8:	f7fe fb52 	bl	8000270 <strlen>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	4a47      	ldr	r2, [pc, #284]	; (8001cec <main+0x22c>)
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	4847      	ldr	r0, [pc, #284]	; (8001cf0 <main+0x230>)
 8001bd4:	f000 fa66 	bl	80020a4 <AppendToFile>
				  buffer_length = 0;
 8001bd8:	4b43      	ldr	r3, [pc, #268]	; (8001ce8 <main+0x228>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
			  }

			  if(buffer_length + TEMP_BUFFER_SIZE < BUFFER_SIZE)
 8001bde:	4b42      	ldr	r3, [pc, #264]	; (8001ce8 <main+0x228>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f240 32b5 	movw	r2, #949	; 0x3b5
 8001be6:	4293      	cmp	r3, r2
 8001be8:	dc28      	bgt.n	8001c3c <main+0x17c>
			  {
				  memcpy(buf + buffer_length, temp_buffer, strlen(temp_buffer));
 8001bea:	4b3f      	ldr	r3, [pc, #252]	; (8001ce8 <main+0x228>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4b3e      	ldr	r3, [pc, #248]	; (8001cec <main+0x22c>)
 8001bf2:	18d4      	adds	r4, r2, r3
 8001bf4:	463b      	mov	r3, r7
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fb3a 	bl	8000270 <strlen>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	463b      	mov	r3, r7
 8001c00:	4619      	mov	r1, r3
 8001c02:	4620      	mov	r0, r4
 8001c04:	f010 fa78 	bl	80120f8 <memcpy>
				  buffer_length += strlen(temp_buffer);
 8001c08:	463b      	mov	r3, r7
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7fe fb30 	bl	8000270 <strlen>
 8001c10:	4603      	mov	r3, r0
 8001c12:	4a35      	ldr	r2, [pc, #212]	; (8001ce8 <main+0x228>)
 8001c14:	6812      	ldr	r2, [r2, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b33      	ldr	r3, [pc, #204]	; (8001ce8 <main+0x228>)
 8001c1c:	601a      	str	r2, [r3, #0]
				  buf[buffer_length] = '\n';
 8001c1e:	4b32      	ldr	r3, [pc, #200]	; (8001ce8 <main+0x228>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a32      	ldr	r2, [pc, #200]	; (8001cec <main+0x22c>)
 8001c24:	210a      	movs	r1, #10
 8001c26:	54d1      	strb	r1, [r2, r3]
				  buffer_length++;
 8001c28:	4b2f      	ldr	r3, [pc, #188]	; (8001ce8 <main+0x228>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	4a2e      	ldr	r2, [pc, #184]	; (8001ce8 <main+0x228>)
 8001c30:	6013      	str	r3, [r2, #0]
				  buf[buffer_length] = '\0';
 8001c32:	4b2d      	ldr	r3, [pc, #180]	; (8001ce8 <main+0x228>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a2d      	ldr	r2, [pc, #180]	; (8001cec <main+0x22c>)
 8001c38:	2100      	movs	r1, #0
 8001c3a:	54d1      	strb	r1, [r2, r3]
			  }

			  int i;

			  for(i = 0; i < 2; i++)
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c40:	e028      	b.n	8001c94 <main+0x1d4>
			  {
				  memset(&SDIareas[i].area_x, 0, sizeof(SDIareas[i].area_x));
 8001c42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c44:	4613      	mov	r3, r2
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	4413      	add	r3, r2
 8001c4a:	009b      	lsls	r3, r3, #2
 8001c4c:	4a29      	ldr	r2, [pc, #164]	; (8001cf4 <main+0x234>)
 8001c4e:	4413      	add	r3, r2
 8001c50:	2204      	movs	r2, #4
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f010 fa17 	bl	8012088 <memset>
				  memset(&SDIareas[i].area_y, 0, sizeof(SDIareas[i].area_y));
 8001c5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	4413      	add	r3, r2
 8001c62:	009b      	lsls	r3, r3, #2
 8001c64:	4a23      	ldr	r2, [pc, #140]	; (8001cf4 <main+0x234>)
 8001c66:	4413      	add	r3, r2
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2204      	movs	r2, #4
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	4618      	mov	r0, r3
 8001c70:	f010 fa0a 	bl	8012088 <memset>
				  memset(&SDIareas[i].area_z, 0, sizeof(SDIareas[i].area_z));
 8001c74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c76:	4613      	mov	r3, r2
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	4413      	add	r3, r2
 8001c7c:	009b      	lsls	r3, r3, #2
 8001c7e:	3308      	adds	r3, #8
 8001c80:	4a1c      	ldr	r2, [pc, #112]	; (8001cf4 <main+0x234>)
 8001c82:	4413      	add	r3, r2
 8001c84:	2204      	movs	r2, #4
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f010 f9fd 	bl	8012088 <memset>
			  for(i = 0; i < 2; i++)
 8001c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c90:	3301      	adds	r3, #1
 8001c92:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	ddd3      	ble.n	8001c42 <main+0x182>
			  }

			  n_int = 0;
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <main+0x21c>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]

		  }
		  flag = 0;
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <main+0x218>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	601a      	str	r2, [r3, #0]
	  }

	  if(emg_flag == 1)
 8001ca6:	4b14      	ldr	r3, [pc, #80]	; (8001cf8 <main+0x238>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	f47f af27 	bne.w	8001afe <main+0x3e>
	  {
		  emg_n_int++;
 8001cb0:	4b12      	ldr	r3, [pc, #72]	; (8001cfc <main+0x23c>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	4a11      	ldr	r2, [pc, #68]	; (8001cfc <main+0x23c>)
 8001cb8:	6013      	str	r3, [r2, #0]
		  if(emg_n_int == 125)
 8001cba:	4b10      	ldr	r3, [pc, #64]	; (8001cfc <main+0x23c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2b7d      	cmp	r3, #125	; 0x7d
 8001cc0:	d104      	bne.n	8001ccc <main+0x20c>
		  {
			  EMG_Data_Reception();
 8001cc2:	f000 ffd3 	bl	8002c6c <EMG_Data_Reception>
			  emg_n_int = 0;
 8001cc6:	4b0d      	ldr	r3, [pc, #52]	; (8001cfc <main+0x23c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]
		  }
		  emg_flag = 0;
 8001ccc:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <main+0x238>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
	  if(flag == 1)
 8001cd2:	e714      	b.n	8001afe <main+0x3e>
 8001cd4:	200004b4 	.word	0x200004b4
 8001cd8:	20000934 	.word	0x20000934
 8001cdc:	2000092c 	.word	0x2000092c
 8001ce0:	20000af8 	.word	0x20000af8
 8001ce4:	08015750 	.word	0x08015750
 8001ce8:	20000928 	.word	0x20000928
 8001cec:	20000540 	.word	0x20000540
 8001cf0:	20000000 	.word	0x20000000
 8001cf4:	20000ac8 	.word	0x20000ac8
 8001cf8:	20000938 	.word	0x20000938
 8001cfc:	20000930 	.word	0x20000930

08001d00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b094      	sub	sp, #80	; 0x50
 8001d04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d06:	f107 0320 	add.w	r3, r7, #32
 8001d0a:	2230      	movs	r2, #48	; 0x30
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f010 f9ba 	bl	8012088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d14:	f107 030c 	add.w	r3, r7, #12
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d24:	2300      	movs	r3, #0
 8001d26:	60bb      	str	r3, [r7, #8]
 8001d28:	4b28      	ldr	r3, [pc, #160]	; (8001dcc <SystemClock_Config+0xcc>)
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2c:	4a27      	ldr	r2, [pc, #156]	; (8001dcc <SystemClock_Config+0xcc>)
 8001d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d32:	6413      	str	r3, [r2, #64]	; 0x40
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <SystemClock_Config+0xcc>)
 8001d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d40:	2300      	movs	r3, #0
 8001d42:	607b      	str	r3, [r7, #4]
 8001d44:	4b22      	ldr	r3, [pc, #136]	; (8001dd0 <SystemClock_Config+0xd0>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a21      	ldr	r2, [pc, #132]	; (8001dd0 <SystemClock_Config+0xd0>)
 8001d4a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	4b1f      	ldr	r3, [pc, #124]	; (8001dd0 <SystemClock_Config+0xd0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d58:	607b      	str	r3, [r7, #4]
 8001d5a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d66:	2302      	movs	r3, #2
 8001d68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8001d70:	2306      	movs	r3, #6
 8001d72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001d74:	23a8      	movs	r3, #168	; 0xa8
 8001d76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d78:	2302      	movs	r3, #2
 8001d7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001d7c:	2307      	movs	r3, #7
 8001d7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001d80:	f107 0320 	add.w	r3, r7, #32
 8001d84:	4618      	mov	r0, r3
 8001d86:	f004 fc75 	bl	8006674 <HAL_RCC_OscConfig>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001d90:	f000 ff86 	bl	8002ca0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001d94:	230f      	movs	r3, #15
 8001d96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001da0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001da4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001da6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001daa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001dac:	f107 030c 	add.w	r3, r7, #12
 8001db0:	2105      	movs	r1, #5
 8001db2:	4618      	mov	r0, r3
 8001db4:	f004 fed6 	bl	8006b64 <HAL_RCC_ClockConfig>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001dbe:	f000 ff6f 	bl	8002ca0 <Error_Handler>
  }
}
 8001dc2:	bf00      	nop
 8001dc4:	3750      	adds	r7, #80	; 0x50
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	40023800 	.word	0x40023800
 8001dd0:	40007000 	.word	0x40007000

08001dd4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001dd8:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <MX_I2C1_Init+0x50>)
 8001dda:	4a13      	ldr	r2, [pc, #76]	; (8001e28 <MX_I2C1_Init+0x54>)
 8001ddc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001dde:	4b11      	ldr	r3, [pc, #68]	; (8001e24 <MX_I2C1_Init+0x50>)
 8001de0:	4a12      	ldr	r2, [pc, #72]	; (8001e2c <MX_I2C1_Init+0x58>)
 8001de2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001de4:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <MX_I2C1_Init+0x50>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001dea:	4b0e      	ldr	r3, [pc, #56]	; (8001e24 <MX_I2C1_Init+0x50>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001df0:	4b0c      	ldr	r3, [pc, #48]	; (8001e24 <MX_I2C1_Init+0x50>)
 8001df2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001df6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001df8:	4b0a      	ldr	r3, [pc, #40]	; (8001e24 <MX_I2C1_Init+0x50>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001dfe:	4b09      	ldr	r3, [pc, #36]	; (8001e24 <MX_I2C1_Init+0x50>)
 8001e00:	2200      	movs	r2, #0
 8001e02:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001e04:	4b07      	ldr	r3, [pc, #28]	; (8001e24 <MX_I2C1_Init+0x50>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <MX_I2C1_Init+0x50>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001e10:	4804      	ldr	r0, [pc, #16]	; (8001e24 <MX_I2C1_Init+0x50>)
 8001e12:	f002 fa1d 	bl	8004250 <HAL_I2C_Init>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001e1c:	f000 ff40 	bl	8002ca0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}
 8001e24:	2000031c 	.word	0x2000031c
 8001e28:	40005400 	.word	0x40005400
 8001e2c:	00061a80 	.word	0x00061a80

08001e30 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <MX_SDIO_SD_Init+0x38>)
 8001e36:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <MX_SDIO_SD_Init+0x3c>)
 8001e38:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <MX_SDIO_SD_Init+0x38>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <MX_SDIO_SD_Init+0x38>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001e46:	4b08      	ldr	r3, [pc, #32]	; (8001e68 <MX_SDIO_SD_Init+0x38>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <MX_SDIO_SD_Init+0x38>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <MX_SDIO_SD_Init+0x38>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <MX_SDIO_SD_Init+0x38>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	20000370 	.word	0x20000370
 8001e6c:	40012c00 	.word	0x40012c00

08001e70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e76:	f107 0308 	add.w	r3, r7, #8
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e84:	463b      	mov	r3, r7
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
 8001e8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <MX_TIM2_Init+0x94>)
 8001e8e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e92:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4200-1;
 8001e94:	4b1b      	ldr	r3, [pc, #108]	; (8001f04 <MX_TIM2_Init+0x94>)
 8001e96:	f241 0267 	movw	r2, #4199	; 0x1067
 8001e9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e9c:	4b19      	ldr	r3, [pc, #100]	; (8001f04 <MX_TIM2_Init+0x94>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20-1;
 8001ea2:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <MX_TIM2_Init+0x94>)
 8001ea4:	2213      	movs	r2, #19
 8001ea6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ea8:	4b16      	ldr	r3, [pc, #88]	; (8001f04 <MX_TIM2_Init+0x94>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eae:	4b15      	ldr	r3, [pc, #84]	; (8001f04 <MX_TIM2_Init+0x94>)
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001eb4:	4813      	ldr	r0, [pc, #76]	; (8001f04 <MX_TIM2_Init+0x94>)
 8001eb6:	f006 fb68 	bl	800858a <HAL_TIM_Base_Init>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001ec0:	f000 feee 	bl	8002ca0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ec4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ec8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001eca:	f107 0308 	add.w	r3, r7, #8
 8001ece:	4619      	mov	r1, r3
 8001ed0:	480c      	ldr	r0, [pc, #48]	; (8001f04 <MX_TIM2_Init+0x94>)
 8001ed2:	f006 fd21 	bl	8008918 <HAL_TIM_ConfigClockSource>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001edc:	f000 fee0 	bl	8002ca0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001ee8:	463b      	mov	r3, r7
 8001eea:	4619      	mov	r1, r3
 8001eec:	4805      	ldr	r0, [pc, #20]	; (8001f04 <MX_TIM2_Init+0x94>)
 8001eee:	f006 ff3d 	bl	8008d6c <HAL_TIMEx_MasterConfigSynchronization>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001ef8:	f000 fed2 	bl	8002ca0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001efc:	bf00      	nop
 8001efe:	3718      	adds	r7, #24
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	200004b4 	.word	0x200004b4

08001f08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f0c:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <MX_USART3_UART_Init+0x48>)
 8001f0e:	4a11      	ldr	r2, [pc, #68]	; (8001f54 <MX_USART3_UART_Init+0x4c>)
 8001f10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 249600;
 8001f12:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <MX_USART3_UART_Init+0x48>)
 8001f14:	4a10      	ldr	r2, [pc, #64]	; (8001f58 <MX_USART3_UART_Init+0x50>)
 8001f16:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f18:	4b0d      	ldr	r3, [pc, #52]	; (8001f50 <MX_USART3_UART_Init+0x48>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f1e:	4b0c      	ldr	r3, [pc, #48]	; (8001f50 <MX_USART3_UART_Init+0x48>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f24:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <MX_USART3_UART_Init+0x48>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f2a:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <MX_USART3_UART_Init+0x48>)
 8001f2c:	220c      	movs	r2, #12
 8001f2e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f30:	4b07      	ldr	r3, [pc, #28]	; (8001f50 <MX_USART3_UART_Init+0x48>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f36:	4b06      	ldr	r3, [pc, #24]	; (8001f50 <MX_USART3_UART_Init+0x48>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f3c:	4804      	ldr	r0, [pc, #16]	; (8001f50 <MX_USART3_UART_Init+0x48>)
 8001f3e:	f006 ffa5 	bl	8008e8c <HAL_UART_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_USART3_UART_Init+0x44>
  {
    Error_Handler();
 8001f48:	f000 feaa 	bl	8002ca0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f4c:	bf00      	nop
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	200004fc 	.word	0x200004fc
 8001f54:	40004800 	.word	0x40004800
 8001f58:	0003cf00 	.word	0x0003cf00

08001f5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <MX_DMA_Init+0x4c>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a0f      	ldr	r2, [pc, #60]	; (8001fa8 <MX_DMA_Init+0x4c>)
 8001f6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <MX_DMA_Init+0x4c>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f7a:	607b      	str	r3, [r7, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2100      	movs	r1, #0
 8001f82:	203b      	movs	r0, #59	; 0x3b
 8001f84:	f001 fb51 	bl	800362a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001f88:	203b      	movs	r0, #59	; 0x3b
 8001f8a:	f001 fb6a 	bl	8003662 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2100      	movs	r1, #0
 8001f92:	2045      	movs	r0, #69	; 0x45
 8001f94:	f001 fb49 	bl	800362a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001f98:	2045      	movs	r0, #69	; 0x45
 8001f9a:	f001 fb62 	bl	8003662 <HAL_NVIC_EnableIRQ>

}
 8001f9e:	bf00      	nop
 8001fa0:	3708      	adds	r7, #8
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40023800 	.word	0x40023800

08001fac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b08a      	sub	sp, #40	; 0x28
 8001fb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb2:	f107 0314 	add.w	r3, r7, #20
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	605a      	str	r2, [r3, #4]
 8001fbc:	609a      	str	r2, [r3, #8]
 8001fbe:	60da      	str	r2, [r3, #12]
 8001fc0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	613b      	str	r3, [r7, #16]
 8001fc6:	4b34      	ldr	r3, [pc, #208]	; (8002098 <MX_GPIO_Init+0xec>)
 8001fc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fca:	4a33      	ldr	r2, [pc, #204]	; (8002098 <MX_GPIO_Init+0xec>)
 8001fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fd2:	4b31      	ldr	r3, [pc, #196]	; (8002098 <MX_GPIO_Init+0xec>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fde:	2300      	movs	r3, #0
 8001fe0:	60fb      	str	r3, [r7, #12]
 8001fe2:	4b2d      	ldr	r3, [pc, #180]	; (8002098 <MX_GPIO_Init+0xec>)
 8001fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe6:	4a2c      	ldr	r2, [pc, #176]	; (8002098 <MX_GPIO_Init+0xec>)
 8001fe8:	f043 0304 	orr.w	r3, r3, #4
 8001fec:	6313      	str	r3, [r2, #48]	; 0x30
 8001fee:	4b2a      	ldr	r3, [pc, #168]	; (8002098 <MX_GPIO_Init+0xec>)
 8001ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff2:	f003 0304 	and.w	r3, r3, #4
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
 8001ffe:	4b26      	ldr	r3, [pc, #152]	; (8002098 <MX_GPIO_Init+0xec>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	4a25      	ldr	r2, [pc, #148]	; (8002098 <MX_GPIO_Init+0xec>)
 8002004:	f043 0302 	orr.w	r3, r3, #2
 8002008:	6313      	str	r3, [r2, #48]	; 0x30
 800200a:	4b23      	ldr	r3, [pc, #140]	; (8002098 <MX_GPIO_Init+0xec>)
 800200c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	60bb      	str	r3, [r7, #8]
 8002014:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
 800201a:	4b1f      	ldr	r3, [pc, #124]	; (8002098 <MX_GPIO_Init+0xec>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	4a1e      	ldr	r2, [pc, #120]	; (8002098 <MX_GPIO_Init+0xec>)
 8002020:	f043 0301 	orr.w	r3, r3, #1
 8002024:	6313      	str	r3, [r2, #48]	; 0x30
 8002026:	4b1c      	ldr	r3, [pc, #112]	; (8002098 <MX_GPIO_Init+0xec>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	f003 0301 	and.w	r3, r3, #1
 800202e:	607b      	str	r3, [r7, #4]
 8002030:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	603b      	str	r3, [r7, #0]
 8002036:	4b18      	ldr	r3, [pc, #96]	; (8002098 <MX_GPIO_Init+0xec>)
 8002038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203a:	4a17      	ldr	r2, [pc, #92]	; (8002098 <MX_GPIO_Init+0xec>)
 800203c:	f043 0308 	orr.w	r3, r3, #8
 8002040:	6313      	str	r3, [r2, #48]	; 0x30
 8002042:	4b15      	ldr	r3, [pc, #84]	; (8002098 <MX_GPIO_Init+0xec>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	f003 0308 	and.w	r3, r3, #8
 800204a:	603b      	str	r3, [r7, #0]
 800204c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 800204e:	2200      	movs	r2, #0
 8002050:	2102      	movs	r1, #2
 8002052:	4812      	ldr	r0, [pc, #72]	; (800209c <MX_GPIO_Init+0xf0>)
 8002054:	f002 f8e2 	bl	800421c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002058:	2302      	movs	r3, #2
 800205a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800205c:	2301      	movs	r3, #1
 800205e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002060:	2300      	movs	r3, #0
 8002062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002064:	2300      	movs	r3, #0
 8002066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002068:	f107 0314 	add.w	r3, r7, #20
 800206c:	4619      	mov	r1, r3
 800206e:	480b      	ldr	r0, [pc, #44]	; (800209c <MX_GPIO_Init+0xf0>)
 8002070:	f001 ff20 	bl	8003eb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002074:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002078:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207e:	2300      	movs	r3, #0
 8002080:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002082:	f107 0314 	add.w	r3, r7, #20
 8002086:	4619      	mov	r1, r3
 8002088:	4805      	ldr	r0, [pc, #20]	; (80020a0 <MX_GPIO_Init+0xf4>)
 800208a:	f001 ff13 	bl	8003eb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 800208e:	bf00      	nop
 8002090:	3728      	adds	r7, #40	; 0x28
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	40023800 	.word	0x40023800
 800209c:	40020800 	.word	0x40020800
 80020a0:	40020400 	.word	0x40020400

080020a4 <AppendToFile>:

/* USER CODE BEGIN 4 */
FRESULT AppendToFile(char* path, size_t path_len, char* buf, size_t buf_len)
{
 80020a4:	b590      	push	{r4, r7, lr}
 80020a6:	f5ad 5d02 	sub.w	sp, sp, #8320	; 0x2080
 80020aa:	b081      	sub	sp, #4
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	f107 0480 	add.w	r4, r7, #128	; 0x80
 80020b2:	f844 0c74 	str.w	r0, [r4, #-116]
 80020b6:	f107 0080 	add.w	r0, r7, #128	; 0x80
 80020ba:	f840 1c78 	str.w	r1, [r0, #-120]
 80020be:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80020c2:	f841 2c7c 	str.w	r2, [r1, #-124]
 80020c6:	f107 0280 	add.w	r2, r7, #128	; 0x80
 80020ca:	f842 3c80 	str.w	r3, [r2, #-128]
	}
	if ( FATFS_LinkDriver(&SD_Driver, SDPath) != 0 ) {
		return FR_NOT_READY;
	}*/

	stat = f_mount(&myFatFS, SDPath, 0);
 80020ce:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 80020d2:	3b18      	subs	r3, #24
 80020d4:	2200      	movs	r2, #0
 80020d6:	4942      	ldr	r1, [pc, #264]	; (80021e0 <AppendToFile+0x13c>)
 80020d8:	4618      	mov	r0, r3
 80020da:	f00e f8db 	bl	8010294 <f_mount>
 80020de:	4603      	mov	r3, r0
 80020e0:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80020e4:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 80020e8:	7013      	strb	r3, [r2, #0]
	if(stat != FR_OK)
 80020ea:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80020ee:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00a      	beq.n	800210e <AppendToFile+0x6a>
	{
		f_mount(0, SDPath, 0);
 80020f8:	2200      	movs	r2, #0
 80020fa:	4939      	ldr	r1, [pc, #228]	; (80021e0 <AppendToFile+0x13c>)
 80020fc:	2000      	movs	r0, #0
 80020fe:	f00e f8c9 	bl	8010294 <f_mount>
		return stat;
 8002102:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8002106:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	e061      	b.n	80021d2 <AppendToFile+0x12e>
	}

	stat = f_open(&myFile, path, FA_WRITE | FA_OPEN_APPEND);
 800210e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002112:	4619      	mov	r1, r3
 8002114:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002118:	3b28      	subs	r3, #40	; 0x28
 800211a:	2232      	movs	r2, #50	; 0x32
 800211c:	f851 1c74 	ldr.w	r1, [r1, #-116]
 8002120:	4618      	mov	r0, r3
 8002122:	f00e f8fd 	bl	8010320 <f_open>
 8002126:	4603      	mov	r3, r0
 8002128:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800212c:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8002130:	7013      	strb	r3, [r2, #0]
	if(stat != FR_OK)
 8002132:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8002136:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d00a      	beq.n	8002156 <AppendToFile+0xb2>
	{
		f_mount(0, SDPath, 0);
 8002140:	2200      	movs	r2, #0
 8002142:	4927      	ldr	r1, [pc, #156]	; (80021e0 <AppendToFile+0x13c>)
 8002144:	2000      	movs	r0, #0
 8002146:	f00e f8a5 	bl	8010294 <f_mount>
		return stat;
 800214a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800214e:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	e03d      	b.n	80021d2 <AppendToFile+0x12e>
	}

	stat = f_write(&myFile, buf, buf_len, &myBytes);
 8002156:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800215a:	3b2c      	subs	r3, #44	; 0x2c
 800215c:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8002160:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8002164:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8002168:	3828      	subs	r0, #40	; 0x28
 800216a:	f852 2c80 	ldr.w	r2, [r2, #-128]
 800216e:	f851 1c7c 	ldr.w	r1, [r1, #-124]
 8002172:	f00e faa1 	bl	80106b8 <f_write>
 8002176:	4603      	mov	r3, r0
 8002178:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 800217c:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 8002180:	7013      	strb	r3, [r2, #0]
	if(stat != FR_OK)
 8002182:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 8002186:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d00a      	beq.n	80021a6 <AppendToFile+0x102>
	{
		f_mount(0, SDPath, 0);
 8002190:	2200      	movs	r2, #0
 8002192:	4913      	ldr	r1, [pc, #76]	; (80021e0 <AppendToFile+0x13c>)
 8002194:	2000      	movs	r0, #0
 8002196:	f00e f87d 	bl	8010294 <f_mount>
		return stat;
 800219a:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 800219e:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	e015      	b.n	80021d2 <AppendToFile+0x12e>
	}

	stat = f_close(&myFile);
 80021a6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021aa:	3b28      	subs	r3, #40	; 0x28
 80021ac:	4618      	mov	r0, r3
 80021ae:	f00e fc95 	bl	8010adc <f_close>
 80021b2:	4603      	mov	r3, r0
 80021b4:	f507 5201 	add.w	r2, r7, #8256	; 0x2040
 80021b8:	f102 023f 	add.w	r2, r2, #63	; 0x3f
 80021bc:	7013      	strb	r3, [r2, #0]

	f_mount(0, SDPath, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	4907      	ldr	r1, [pc, #28]	; (80021e0 <AppendToFile+0x13c>)
 80021c2:	2000      	movs	r0, #0
 80021c4:	f00e f866 	bl	8010294 <f_mount>

	return stat;
 80021c8:	f507 5301 	add.w	r3, r7, #8256	; 0x2040
 80021cc:	f103 033f 	add.w	r3, r3, #63	; 0x3f
 80021d0:	781b      	ldrb	r3, [r3, #0]

}
 80021d2:	4618      	mov	r0, r3
 80021d4:	f507 5702 	add.w	r7, r7, #8320	; 0x2080
 80021d8:	3704      	adds	r7, #4
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd90      	pop	{r4, r7, pc}
 80021de:	bf00      	nop
 80021e0:	20000b14 	.word	0x20000b14

080021e4 <BlinkLED>:


void BlinkLED(uint32_t blink_delay, uint8_t num_blinks) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	460b      	mov	r3, r1
 80021ee:	70fb      	strb	r3, [r7, #3]
  for ( int i = 0; i < num_blinks; i++ ) {
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	e012      	b.n	800221c <BlinkLED+0x38>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80021f6:	2201      	movs	r2, #1
 80021f8:	2102      	movs	r1, #2
 80021fa:	480d      	ldr	r0, [pc, #52]	; (8002230 <BlinkLED+0x4c>)
 80021fc:	f002 f80e 	bl	800421c <HAL_GPIO_WritePin>
    HAL_Delay(blink_delay);
 8002200:	6878      	ldr	r0, [r7, #4]
 8002202:	f001 f913 	bl	800342c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8002206:	2200      	movs	r2, #0
 8002208:	2102      	movs	r1, #2
 800220a:	4809      	ldr	r0, [pc, #36]	; (8002230 <BlinkLED+0x4c>)
 800220c:	f002 f806 	bl	800421c <HAL_GPIO_WritePin>
    HAL_Delay(blink_delay);
 8002210:	6878      	ldr	r0, [r7, #4]
 8002212:	f001 f90b 	bl	800342c <HAL_Delay>
  for ( int i = 0; i < num_blinks; i++ ) {
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	3301      	adds	r3, #1
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	78fb      	ldrb	r3, [r7, #3]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	429a      	cmp	r2, r3
 8002222:	dbe8      	blt.n	80021f6 <BlinkLED+0x12>
  }
}
 8002224:	bf00      	nop
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	40020800 	.word	0x40020800

08002234 <Gyro_Reading>:

void Gyro_Reading()
{
 8002234:	b590      	push	{r4, r7, lr}
 8002236:	b085      	sub	sp, #20
 8002238:	af02      	add	r7, sp, #8
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
	int i;
	for(i = 0;i < 2;i++)
 800223a:	2300      	movs	r3, #0
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	e16f      	b.n	8002520 <Gyro_Reading+0x2ec>
	{
		switch(i)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d004      	beq.n	8002250 <Gyro_Reading+0x1c>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	2b01      	cmp	r3, #1
 800224a:	f000 80b2 	beq.w	80023b2 <Gyro_Reading+0x17e>
 800224e:	e164      	b.n	800251a <Gyro_Reading+0x2e6>
		{
			case 0:
				if(LSM6DSOX_gyroscopeAvailable(&hi2c1, LSM6DSOX_ADDRESS_1)==1)
 8002250:	216a      	movs	r1, #106	; 0x6a
 8002252:	48b8      	ldr	r0, [pc, #736]	; (8002534 <Gyro_Reading+0x300>)
 8002254:	f7fe fff2 	bl	800123c <LSM6DSOX_gyroscopeAvailable>
 8002258:	4603      	mov	r3, r0
 800225a:	2b01      	cmp	r3, #1
 800225c:	f040 815a 	bne.w	8002514 <Gyro_Reading+0x2e0>
				{
					LSM6DSOX_readGyroscope(&hi2c1, LSM6DSOX_ADDRESS_1, &Gyro_data[i].x[n_int-1], &Gyro_data[i].y[n_int-1], &Gyro_data[i].z[n_int-1]);
 8002260:	4bb5      	ldr	r3, [pc, #724]	; (8002538 <Gyro_Reading+0x304>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	1e59      	subs	r1, r3, #1
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	4613      	mov	r3, r2
 800226a:	011b      	lsls	r3, r3, #4
 800226c:	1a9b      	subs	r3, r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	440b      	add	r3, r1
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4ab1      	ldr	r2, [pc, #708]	; (800253c <Gyro_Reading+0x308>)
 8002276:	1898      	adds	r0, r3, r2
 8002278:	4baf      	ldr	r3, [pc, #700]	; (8002538 <Gyro_Reading+0x304>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	1e59      	subs	r1, r3, #1
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	440b      	add	r3, r1
 800228a:	330a      	adds	r3, #10
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	4aab      	ldr	r2, [pc, #684]	; (800253c <Gyro_Reading+0x308>)
 8002290:	189c      	adds	r4, r3, r2
 8002292:	4ba9      	ldr	r3, [pc, #676]	; (8002538 <Gyro_Reading+0x304>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	1e59      	subs	r1, r3, #1
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4613      	mov	r3, r2
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	1a9b      	subs	r3, r3, r2
 80022a0:	005b      	lsls	r3, r3, #1
 80022a2:	440b      	add	r3, r1
 80022a4:	3314      	adds	r3, #20
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4aa4      	ldr	r2, [pc, #656]	; (800253c <Gyro_Reading+0x308>)
 80022aa:	4413      	add	r3, r2
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	4623      	mov	r3, r4
 80022b0:	4602      	mov	r2, r0
 80022b2:	216a      	movs	r1, #106	; 0x6a
 80022b4:	489f      	ldr	r0, [pc, #636]	; (8002534 <Gyro_Reading+0x300>)
 80022b6:	f7fe ff65 	bl	8001184 <LSM6DSOX_readGyroscope>
					Gyro_data[i].x[n_int-1] -= gyroscope_offset[i][0];
 80022ba:	4b9f      	ldr	r3, [pc, #636]	; (8002538 <Gyro_Reading+0x304>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	1e59      	subs	r1, r3, #1
 80022c0:	489e      	ldr	r0, [pc, #632]	; (800253c <Gyro_Reading+0x308>)
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	4613      	mov	r3, r2
 80022c6:	011b      	lsls	r3, r3, #4
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	440b      	add	r3, r1
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4403      	add	r3, r0
 80022d2:	ed93 7a00 	vldr	s14, [r3]
 80022d6:	499a      	ldr	r1, [pc, #616]	; (8002540 <Gyro_Reading+0x30c>)
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	4613      	mov	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	4413      	add	r3, r2
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	440b      	add	r3, r1
 80022e4:	edd3 7a00 	vldr	s15, [r3]
 80022e8:	4b93      	ldr	r3, [pc, #588]	; (8002538 <Gyro_Reading+0x304>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	1e59      	subs	r1, r3, #1
 80022ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f2:	4892      	ldr	r0, [pc, #584]	; (800253c <Gyro_Reading+0x308>)
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	4613      	mov	r3, r2
 80022f8:	011b      	lsls	r3, r3, #4
 80022fa:	1a9b      	subs	r3, r3, r2
 80022fc:	005b      	lsls	r3, r3, #1
 80022fe:	440b      	add	r3, r1
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	4403      	add	r3, r0
 8002304:	edc3 7a00 	vstr	s15, [r3]
					Gyro_data[i].y[n_int-1] -= gyroscope_offset[i][1];
 8002308:	4b8b      	ldr	r3, [pc, #556]	; (8002538 <Gyro_Reading+0x304>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	1e59      	subs	r1, r3, #1
 800230e:	488b      	ldr	r0, [pc, #556]	; (800253c <Gyro_Reading+0x308>)
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	4613      	mov	r3, r2
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	1a9b      	subs	r3, r3, r2
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	440b      	add	r3, r1
 800231c:	330a      	adds	r3, #10
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	4403      	add	r3, r0
 8002322:	ed93 7a00 	vldr	s14, [r3]
 8002326:	4986      	ldr	r1, [pc, #536]	; (8002540 <Gyro_Reading+0x30c>)
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	4613      	mov	r3, r2
 800232c:	005b      	lsls	r3, r3, #1
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	3304      	adds	r3, #4
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	4b7f      	ldr	r3, [pc, #508]	; (8002538 <Gyro_Reading+0x304>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	1e59      	subs	r1, r3, #1
 8002340:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002344:	487d      	ldr	r0, [pc, #500]	; (800253c <Gyro_Reading+0x308>)
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4613      	mov	r3, r2
 800234a:	011b      	lsls	r3, r3, #4
 800234c:	1a9b      	subs	r3, r3, r2
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	440b      	add	r3, r1
 8002352:	330a      	adds	r3, #10
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4403      	add	r3, r0
 8002358:	edc3 7a00 	vstr	s15, [r3]
					Gyro_data[i].z[n_int-1] -= gyroscope_offset[i][2];
 800235c:	4b76      	ldr	r3, [pc, #472]	; (8002538 <Gyro_Reading+0x304>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	1e59      	subs	r1, r3, #1
 8002362:	4876      	ldr	r0, [pc, #472]	; (800253c <Gyro_Reading+0x308>)
 8002364:	687a      	ldr	r2, [r7, #4]
 8002366:	4613      	mov	r3, r2
 8002368:	011b      	lsls	r3, r3, #4
 800236a:	1a9b      	subs	r3, r3, r2
 800236c:	005b      	lsls	r3, r3, #1
 800236e:	440b      	add	r3, r1
 8002370:	3314      	adds	r3, #20
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	4403      	add	r3, r0
 8002376:	ed93 7a00 	vldr	s14, [r3]
 800237a:	4971      	ldr	r1, [pc, #452]	; (8002540 <Gyro_Reading+0x30c>)
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	440b      	add	r3, r1
 8002388:	3308      	adds	r3, #8
 800238a:	edd3 7a00 	vldr	s15, [r3]
 800238e:	4b6a      	ldr	r3, [pc, #424]	; (8002538 <Gyro_Reading+0x304>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	1e59      	subs	r1, r3, #1
 8002394:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002398:	4868      	ldr	r0, [pc, #416]	; (800253c <Gyro_Reading+0x308>)
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	4613      	mov	r3, r2
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	1a9b      	subs	r3, r3, r2
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	440b      	add	r3, r1
 80023a6:	3314      	adds	r3, #20
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	4403      	add	r3, r0
 80023ac:	edc3 7a00 	vstr	s15, [r3]
				}
				break;
 80023b0:	e0b0      	b.n	8002514 <Gyro_Reading+0x2e0>

			case 1:
				if(LSM6DSOX_gyroscopeAvailable(&hi2c1, LSM6DSOX_ADDRESS_2)==1)
 80023b2:	216b      	movs	r1, #107	; 0x6b
 80023b4:	485f      	ldr	r0, [pc, #380]	; (8002534 <Gyro_Reading+0x300>)
 80023b6:	f7fe ff41 	bl	800123c <LSM6DSOX_gyroscopeAvailable>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b01      	cmp	r3, #1
 80023be:	f040 80ab 	bne.w	8002518 <Gyro_Reading+0x2e4>
				{
					LSM6DSOX_readGyroscope(&hi2c1, LSM6DSOX_ADDRESS_2, &Gyro_data[i].x[n_int-1], &Gyro_data[i].y[n_int-1], &Gyro_data[i].z[n_int-1]);
 80023c2:	4b5d      	ldr	r3, [pc, #372]	; (8002538 <Gyro_Reading+0x304>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	1e59      	subs	r1, r3, #1
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	005b      	lsls	r3, r3, #1
 80023d2:	440b      	add	r3, r1
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	4a59      	ldr	r2, [pc, #356]	; (800253c <Gyro_Reading+0x308>)
 80023d8:	1898      	adds	r0, r3, r2
 80023da:	4b57      	ldr	r3, [pc, #348]	; (8002538 <Gyro_Reading+0x304>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	1e59      	subs	r1, r3, #1
 80023e0:	687a      	ldr	r2, [r7, #4]
 80023e2:	4613      	mov	r3, r2
 80023e4:	011b      	lsls	r3, r3, #4
 80023e6:	1a9b      	subs	r3, r3, r2
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	440b      	add	r3, r1
 80023ec:	330a      	adds	r3, #10
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4a52      	ldr	r2, [pc, #328]	; (800253c <Gyro_Reading+0x308>)
 80023f2:	189c      	adds	r4, r3, r2
 80023f4:	4b50      	ldr	r3, [pc, #320]	; (8002538 <Gyro_Reading+0x304>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	1e59      	subs	r1, r3, #1
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	4613      	mov	r3, r2
 80023fe:	011b      	lsls	r3, r3, #4
 8002400:	1a9b      	subs	r3, r3, r2
 8002402:	005b      	lsls	r3, r3, #1
 8002404:	440b      	add	r3, r1
 8002406:	3314      	adds	r3, #20
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	4a4c      	ldr	r2, [pc, #304]	; (800253c <Gyro_Reading+0x308>)
 800240c:	4413      	add	r3, r2
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	4623      	mov	r3, r4
 8002412:	4602      	mov	r2, r0
 8002414:	216b      	movs	r1, #107	; 0x6b
 8002416:	4847      	ldr	r0, [pc, #284]	; (8002534 <Gyro_Reading+0x300>)
 8002418:	f7fe feb4 	bl	8001184 <LSM6DSOX_readGyroscope>
					Gyro_data[i].x[n_int-1] -= gyroscope_offset[i][0];
 800241c:	4b46      	ldr	r3, [pc, #280]	; (8002538 <Gyro_Reading+0x304>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	1e59      	subs	r1, r3, #1
 8002422:	4846      	ldr	r0, [pc, #280]	; (800253c <Gyro_Reading+0x308>)
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	4613      	mov	r3, r2
 8002428:	011b      	lsls	r3, r3, #4
 800242a:	1a9b      	subs	r3, r3, r2
 800242c:	005b      	lsls	r3, r3, #1
 800242e:	440b      	add	r3, r1
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4403      	add	r3, r0
 8002434:	ed93 7a00 	vldr	s14, [r3]
 8002438:	4941      	ldr	r1, [pc, #260]	; (8002540 <Gyro_Reading+0x30c>)
 800243a:	687a      	ldr	r2, [r7, #4]
 800243c:	4613      	mov	r3, r2
 800243e:	005b      	lsls	r3, r3, #1
 8002440:	4413      	add	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	440b      	add	r3, r1
 8002446:	edd3 7a00 	vldr	s15, [r3]
 800244a:	4b3b      	ldr	r3, [pc, #236]	; (8002538 <Gyro_Reading+0x304>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	1e59      	subs	r1, r3, #1
 8002450:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002454:	4839      	ldr	r0, [pc, #228]	; (800253c <Gyro_Reading+0x308>)
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	440b      	add	r3, r1
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	4403      	add	r3, r0
 8002466:	edc3 7a00 	vstr	s15, [r3]
					Gyro_data[i].y[n_int-1] -= gyroscope_offset[i][1];
 800246a:	4b33      	ldr	r3, [pc, #204]	; (8002538 <Gyro_Reading+0x304>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	1e59      	subs	r1, r3, #1
 8002470:	4832      	ldr	r0, [pc, #200]	; (800253c <Gyro_Reading+0x308>)
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	440b      	add	r3, r1
 800247e:	330a      	adds	r3, #10
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	4403      	add	r3, r0
 8002484:	ed93 7a00 	vldr	s14, [r3]
 8002488:	492d      	ldr	r1, [pc, #180]	; (8002540 <Gyro_Reading+0x30c>)
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	4413      	add	r3, r2
 8002492:	009b      	lsls	r3, r3, #2
 8002494:	440b      	add	r3, r1
 8002496:	3304      	adds	r3, #4
 8002498:	edd3 7a00 	vldr	s15, [r3]
 800249c:	4b26      	ldr	r3, [pc, #152]	; (8002538 <Gyro_Reading+0x304>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	1e59      	subs	r1, r3, #1
 80024a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024a6:	4825      	ldr	r0, [pc, #148]	; (800253c <Gyro_Reading+0x308>)
 80024a8:	687a      	ldr	r2, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	440b      	add	r3, r1
 80024b4:	330a      	adds	r3, #10
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	4403      	add	r3, r0
 80024ba:	edc3 7a00 	vstr	s15, [r3]
					Gyro_data[i].z[n_int-1] -= gyroscope_offset[i][2];
 80024be:	4b1e      	ldr	r3, [pc, #120]	; (8002538 <Gyro_Reading+0x304>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	1e59      	subs	r1, r3, #1
 80024c4:	481d      	ldr	r0, [pc, #116]	; (800253c <Gyro_Reading+0x308>)
 80024c6:	687a      	ldr	r2, [r7, #4]
 80024c8:	4613      	mov	r3, r2
 80024ca:	011b      	lsls	r3, r3, #4
 80024cc:	1a9b      	subs	r3, r3, r2
 80024ce:	005b      	lsls	r3, r3, #1
 80024d0:	440b      	add	r3, r1
 80024d2:	3314      	adds	r3, #20
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	4403      	add	r3, r0
 80024d8:	ed93 7a00 	vldr	s14, [r3]
 80024dc:	4918      	ldr	r1, [pc, #96]	; (8002540 <Gyro_Reading+0x30c>)
 80024de:	687a      	ldr	r2, [r7, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	440b      	add	r3, r1
 80024ea:	3308      	adds	r3, #8
 80024ec:	edd3 7a00 	vldr	s15, [r3]
 80024f0:	4b11      	ldr	r3, [pc, #68]	; (8002538 <Gyro_Reading+0x304>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	1e59      	subs	r1, r3, #1
 80024f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024fa:	4810      	ldr	r0, [pc, #64]	; (800253c <Gyro_Reading+0x308>)
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	440b      	add	r3, r1
 8002508:	3314      	adds	r3, #20
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4403      	add	r3, r0
 800250e:	edc3 7a00 	vstr	s15, [r3]
				}
				break;
 8002512:	e001      	b.n	8002518 <Gyro_Reading+0x2e4>
				break;
 8002514:	bf00      	nop
 8002516:	e000      	b.n	800251a <Gyro_Reading+0x2e6>
				break;
 8002518:	bf00      	nop
	for(i = 0;i < 2;i++)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	3301      	adds	r3, #1
 800251e:	607b      	str	r3, [r7, #4]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b01      	cmp	r3, #1
 8002524:	f77f ae8c 	ble.w	8002240 <Gyro_Reading+0xc>
		}
	}
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
}
 8002528:	bf00      	nop
 800252a:	bf00      	nop
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	bd90      	pop	{r4, r7, pc}
 8002532:	bf00      	nop
 8002534:	2000031c 	.word	0x2000031c
 8002538:	2000092c 	.word	0x2000092c
 800253c:	200009c0 	.word	0x200009c0
 8002540:	20000970 	.word	0x20000970

08002544 <Acc_Mag_Reading>:

void Acc_Mag_Reading()
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b084      	sub	sp, #16
 8002548:	af02      	add	r7, sp, #8
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
	LSM6DSOX_writeRegister8(&hi2c1, LSM6DSOX_ADDRESS_1, LSM6DSOX_CTRL1_XL, 0x44);
 800254a:	2344      	movs	r3, #68	; 0x44
 800254c:	2210      	movs	r2, #16
 800254e:	216a      	movs	r1, #106	; 0x6a
 8002550:	488f      	ldr	r0, [pc, #572]	; (8002790 <Acc_Mag_Reading+0x24c>)
 8002552:	f7fe fd69 	bl	8001028 <LSM6DSOX_writeRegister8>
	LSM6DSOX_writeRegister8(&hi2c1, LSM6DSOX_ADDRESS_2, LSM6DSOX_CTRL1_XL, 0x44);
 8002556:	2344      	movs	r3, #68	; 0x44
 8002558:	2210      	movs	r2, #16
 800255a:	216b      	movs	r1, #107	; 0x6b
 800255c:	488c      	ldr	r0, [pc, #560]	; (8002790 <Acc_Mag_Reading+0x24c>)
 800255e:	f7fe fd63 	bl	8001028 <LSM6DSOX_writeRegister8>
	int i;
	for(i = 0;i < 2;i++)
 8002562:	2300      	movs	r3, #0
 8002564:	607b      	str	r3, [r7, #4]
 8002566:	e109      	b.n	800277c <Acc_Mag_Reading+0x238>
	  {
		  switch(i)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <Acc_Mag_Reading+0x32>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2b01      	cmp	r3, #1
 8002572:	d07f      	beq.n	8002674 <Acc_Mag_Reading+0x130>
 8002574:	e0ff      	b.n	8002776 <Acc_Mag_Reading+0x232>
		  {
		  case 0:
			  if(LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_1)==1)
 8002576:	216a      	movs	r1, #106	; 0x6a
 8002578:	4885      	ldr	r0, [pc, #532]	; (8002790 <Acc_Mag_Reading+0x24c>)
 800257a:	f7fe fdeb 	bl	8001154 <LSM6DSOX_accelerationAvailable>
 800257e:	4603      	mov	r3, r0
 8002580:	2b01      	cmp	r3, #1
 8002582:	f040 80f5 	bne.w	8002770 <Acc_Mag_Reading+0x22c>
			  {
				  LSM6DSOX_readAcceleration(&hi2c1, LSM6DSOX_ADDRESS_1, &Acc_data[i].x, &Acc_data[i].y, &Acc_data[i].z);
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	4613      	mov	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4413      	add	r3, r2
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	4a80      	ldr	r2, [pc, #512]	; (8002794 <Acc_Mag_Reading+0x250>)
 8002592:	1899      	adds	r1, r3, r2
 8002594:	687a      	ldr	r2, [r7, #4]
 8002596:	4613      	mov	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4a7d      	ldr	r2, [pc, #500]	; (8002794 <Acc_Mag_Reading+0x250>)
 80025a0:	4413      	add	r3, r2
 80025a2:	1d18      	adds	r0, r3, #4
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	4413      	add	r3, r2
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	3308      	adds	r3, #8
 80025b0:	4a78      	ldr	r2, [pc, #480]	; (8002794 <Acc_Mag_Reading+0x250>)
 80025b2:	4413      	add	r3, r2
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	4603      	mov	r3, r0
 80025b8:	460a      	mov	r2, r1
 80025ba:	216a      	movs	r1, #106	; 0x6a
 80025bc:	4874      	ldr	r0, [pc, #464]	; (8002790 <Acc_Mag_Reading+0x24c>)
 80025be:	f7fe fd6d 	bl	800109c <LSM6DSOX_readAcceleration>
				  Acc_data[i].x/=norm_acceleration[i];
 80025c2:	4974      	ldr	r1, [pc, #464]	; (8002794 <Acc_Mag_Reading+0x250>)
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	4413      	add	r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	edd3 6a00 	vldr	s13, [r3]
 80025d4:	4a70      	ldr	r2, [pc, #448]	; (8002798 <Acc_Mag_Reading+0x254>)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025dc:	ee07 3a90 	vmov	s15, r3
 80025e0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80025e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80025e8:	496a      	ldr	r1, [pc, #424]	; (8002794 <Acc_Mag_Reading+0x250>)
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	009b      	lsls	r3, r3, #2
 80025f4:	440b      	add	r3, r1
 80025f6:	edc3 7a00 	vstr	s15, [r3]
				  Acc_data[i].y/=norm_acceleration[i];
 80025fa:	4966      	ldr	r1, [pc, #408]	; (8002794 <Acc_Mag_Reading+0x250>)
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	009b      	lsls	r3, r3, #2
 8002606:	440b      	add	r3, r1
 8002608:	3304      	adds	r3, #4
 800260a:	edd3 6a00 	vldr	s13, [r3]
 800260e:	4a62      	ldr	r2, [pc, #392]	; (8002798 <Acc_Mag_Reading+0x254>)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002616:	ee07 3a90 	vmov	s15, r3
 800261a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800261e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002622:	495c      	ldr	r1, [pc, #368]	; (8002794 <Acc_Mag_Reading+0x250>)
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	005b      	lsls	r3, r3, #1
 800262a:	4413      	add	r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	3304      	adds	r3, #4
 8002632:	edc3 7a00 	vstr	s15, [r3]
				  Acc_data[i].z/=norm_acceleration[i];
 8002636:	4957      	ldr	r1, [pc, #348]	; (8002794 <Acc_Mag_Reading+0x250>)
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	005b      	lsls	r3, r3, #1
 800263e:	4413      	add	r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	3308      	adds	r3, #8
 8002646:	edd3 6a00 	vldr	s13, [r3]
 800264a:	4a53      	ldr	r2, [pc, #332]	; (8002798 <Acc_Mag_Reading+0x254>)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002652:	ee07 3a90 	vmov	s15, r3
 8002656:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800265a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800265e:	494d      	ldr	r1, [pc, #308]	; (8002794 <Acc_Mag_Reading+0x250>)
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	4613      	mov	r3, r2
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	4413      	add	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	3308      	adds	r3, #8
 800266e:	edc3 7a00 	vstr	s15, [r3]
			  }
			  break;
 8002672:	e07d      	b.n	8002770 <Acc_Mag_Reading+0x22c>

		  case 1:
			  if(LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_2)==1)
 8002674:	216b      	movs	r1, #107	; 0x6b
 8002676:	4846      	ldr	r0, [pc, #280]	; (8002790 <Acc_Mag_Reading+0x24c>)
 8002678:	f7fe fd6c 	bl	8001154 <LSM6DSOX_accelerationAvailable>
 800267c:	4603      	mov	r3, r0
 800267e:	2b01      	cmp	r3, #1
 8002680:	d178      	bne.n	8002774 <Acc_Mag_Reading+0x230>
			  {
				  LSM6DSOX_readAcceleration(&hi2c1, LSM6DSOX_ADDRESS_2, &Acc_data[i].x, &Acc_data[i].y, &Acc_data[i].z);
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	4613      	mov	r3, r2
 8002686:	005b      	lsls	r3, r3, #1
 8002688:	4413      	add	r3, r2
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4a41      	ldr	r2, [pc, #260]	; (8002794 <Acc_Mag_Reading+0x250>)
 800268e:	1899      	adds	r1, r3, r2
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	4613      	mov	r3, r2
 8002694:	005b      	lsls	r3, r3, #1
 8002696:	4413      	add	r3, r2
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	4a3e      	ldr	r2, [pc, #248]	; (8002794 <Acc_Mag_Reading+0x250>)
 800269c:	4413      	add	r3, r2
 800269e:	1d18      	adds	r0, r3, #4
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	005b      	lsls	r3, r3, #1
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	3308      	adds	r3, #8
 80026ac:	4a39      	ldr	r2, [pc, #228]	; (8002794 <Acc_Mag_Reading+0x250>)
 80026ae:	4413      	add	r3, r2
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	4603      	mov	r3, r0
 80026b4:	460a      	mov	r2, r1
 80026b6:	216b      	movs	r1, #107	; 0x6b
 80026b8:	4835      	ldr	r0, [pc, #212]	; (8002790 <Acc_Mag_Reading+0x24c>)
 80026ba:	f7fe fcef 	bl	800109c <LSM6DSOX_readAcceleration>
				  Acc_data[i].x/=norm_acceleration[i];
 80026be:	4935      	ldr	r1, [pc, #212]	; (8002794 <Acc_Mag_Reading+0x250>)
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	edd3 6a00 	vldr	s13, [r3]
 80026d0:	4a31      	ldr	r2, [pc, #196]	; (8002798 <Acc_Mag_Reading+0x254>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026d8:	ee07 3a90 	vmov	s15, r3
 80026dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80026e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026e4:	492b      	ldr	r1, [pc, #172]	; (8002794 <Acc_Mag_Reading+0x250>)
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	4613      	mov	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	4413      	add	r3, r2
 80026ee:	009b      	lsls	r3, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	edc3 7a00 	vstr	s15, [r3]
				  Acc_data[i].y/=norm_acceleration[i];
 80026f6:	4927      	ldr	r1, [pc, #156]	; (8002794 <Acc_Mag_Reading+0x250>)
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	4613      	mov	r3, r2
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	4413      	add	r3, r2
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	440b      	add	r3, r1
 8002704:	3304      	adds	r3, #4
 8002706:	edd3 6a00 	vldr	s13, [r3]
 800270a:	4a23      	ldr	r2, [pc, #140]	; (8002798 <Acc_Mag_Reading+0x254>)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002712:	ee07 3a90 	vmov	s15, r3
 8002716:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800271a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800271e:	491d      	ldr	r1, [pc, #116]	; (8002794 <Acc_Mag_Reading+0x250>)
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	3304      	adds	r3, #4
 800272e:	edc3 7a00 	vstr	s15, [r3]
				  Acc_data[i].z/=norm_acceleration[i];
 8002732:	4918      	ldr	r1, [pc, #96]	; (8002794 <Acc_Mag_Reading+0x250>)
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	005b      	lsls	r3, r3, #1
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	3308      	adds	r3, #8
 8002742:	edd3 6a00 	vldr	s13, [r3]
 8002746:	4a14      	ldr	r2, [pc, #80]	; (8002798 <Acc_Mag_Reading+0x254>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800274e:	ee07 3a90 	vmov	s15, r3
 8002752:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002756:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800275a:	490e      	ldr	r1, [pc, #56]	; (8002794 <Acc_Mag_Reading+0x250>)
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	3308      	adds	r3, #8
 800276a:	edc3 7a00 	vstr	s15, [r3]
			  }
			  break;
 800276e:	e001      	b.n	8002774 <Acc_Mag_Reading+0x230>
			  break;
 8002770:	bf00      	nop
 8002772:	e000      	b.n	8002776 <Acc_Mag_Reading+0x232>
			  break;
 8002774:	bf00      	nop
	for(i = 0;i < 2;i++)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	3301      	adds	r3, #1
 800277a:	607b      	str	r3, [r7, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b01      	cmp	r3, #1
 8002780:	f77f aef2 	ble.w	8002568 <Acc_Mag_Reading+0x24>
		  }
	  }
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
}
 8002784:	bf00      	nop
 8002786:	bf00      	nop
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	2000031c 	.word	0x2000031c
 8002794:	20000ab0 	.word	0x20000ab0
 8002798:	20000988 	.word	0x20000988

0800279c <SDI>:

void SDI()
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
	int k;
	int i;
	for(i = 0; i<2; i++)
 80027a2:	2300      	movs	r3, #0
 80027a4:	603b      	str	r3, [r7, #0]
 80027a6:	e0bc      	b.n	8002922 <SDI+0x186>
	{
		for(k = 0; k<9; k++)
 80027a8:	2300      	movs	r3, #0
 80027aa:	607b      	str	r3, [r7, #4]
 80027ac:	e0b2      	b.n	8002914 <SDI+0x178>
		{
			SDIareas[i].area_x += ((Gyro_data[i].x[k] + Gyro_data[i].x[k+1])/(2*gyro_fs));
 80027ae:	4962      	ldr	r1, [pc, #392]	; (8002938 <SDI+0x19c>)
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	4613      	mov	r3, r2
 80027b4:	005b      	lsls	r3, r3, #1
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	440b      	add	r3, r1
 80027bc:	ed93 7a00 	vldr	s14, [r3]
 80027c0:	495e      	ldr	r1, [pc, #376]	; (800293c <SDI+0x1a0>)
 80027c2:	683a      	ldr	r2, [r7, #0]
 80027c4:	4613      	mov	r3, r2
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	005b      	lsls	r3, r3, #1
 80027cc:	687a      	ldr	r2, [r7, #4]
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	edd3 6a00 	vldr	s13, [r3]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	1c59      	adds	r1, r3, #1
 80027dc:	4857      	ldr	r0, [pc, #348]	; (800293c <SDI+0x1a0>)
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	4613      	mov	r3, r2
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	1a9b      	subs	r3, r3, r2
 80027e6:	005b      	lsls	r3, r3, #1
 80027e8:	440b      	add	r3, r1
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4403      	add	r3, r0
 80027ee:	edd3 7a00 	vldr	s15, [r3]
 80027f2:	ee36 6aa7 	vadd.f32	s12, s13, s15
 80027f6:	4b52      	ldr	r3, [pc, #328]	; (8002940 <SDI+0x1a4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	005b      	lsls	r3, r3, #1
 80027fc:	ee07 3a90 	vmov	s15, r3
 8002800:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002804:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002808:	ee77 7a27 	vadd.f32	s15, s14, s15
 800280c:	494a      	ldr	r1, [pc, #296]	; (8002938 <SDI+0x19c>)
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	4613      	mov	r3, r2
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	4413      	add	r3, r2
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	440b      	add	r3, r1
 800281a:	edc3 7a00 	vstr	s15, [r3]
			SDIareas[i].area_y += ((Gyro_data[i].y[k] + Gyro_data[i].y[k+1])/(2*gyro_fs));
 800281e:	4946      	ldr	r1, [pc, #280]	; (8002938 <SDI+0x19c>)
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	4613      	mov	r3, r2
 8002824:	005b      	lsls	r3, r3, #1
 8002826:	4413      	add	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	3304      	adds	r3, #4
 800282e:	ed93 7a00 	vldr	s14, [r3]
 8002832:	4942      	ldr	r1, [pc, #264]	; (800293c <SDI+0x1a0>)
 8002834:	683a      	ldr	r2, [r7, #0]
 8002836:	4613      	mov	r3, r2
 8002838:	011b      	lsls	r3, r3, #4
 800283a:	1a9b      	subs	r3, r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	687a      	ldr	r2, [r7, #4]
 8002840:	4413      	add	r3, r2
 8002842:	330a      	adds	r3, #10
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	440b      	add	r3, r1
 8002848:	edd3 6a00 	vldr	s13, [r3]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	1c59      	adds	r1, r3, #1
 8002850:	483a      	ldr	r0, [pc, #232]	; (800293c <SDI+0x1a0>)
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	4613      	mov	r3, r2
 8002856:	011b      	lsls	r3, r3, #4
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	005b      	lsls	r3, r3, #1
 800285c:	440b      	add	r3, r1
 800285e:	330a      	adds	r3, #10
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4403      	add	r3, r0
 8002864:	edd3 7a00 	vldr	s15, [r3]
 8002868:	ee36 6aa7 	vadd.f32	s12, s13, s15
 800286c:	4b34      	ldr	r3, [pc, #208]	; (8002940 <SDI+0x1a4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	005b      	lsls	r3, r3, #1
 8002872:	ee07 3a90 	vmov	s15, r3
 8002876:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800287a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800287e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002882:	492d      	ldr	r1, [pc, #180]	; (8002938 <SDI+0x19c>)
 8002884:	683a      	ldr	r2, [r7, #0]
 8002886:	4613      	mov	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	3304      	adds	r3, #4
 8002892:	edc3 7a00 	vstr	s15, [r3]
			SDIareas[i].area_z += ((Gyro_data[i].z[k] + Gyro_data[i].z[k+1])/(2*gyro_fs));
 8002896:	4928      	ldr	r1, [pc, #160]	; (8002938 <SDI+0x19c>)
 8002898:	683a      	ldr	r2, [r7, #0]
 800289a:	4613      	mov	r3, r2
 800289c:	005b      	lsls	r3, r3, #1
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	440b      	add	r3, r1
 80028a4:	3308      	adds	r3, #8
 80028a6:	ed93 7a00 	vldr	s14, [r3]
 80028aa:	4924      	ldr	r1, [pc, #144]	; (800293c <SDI+0x1a0>)
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	4613      	mov	r3, r2
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	1a9b      	subs	r3, r3, r2
 80028b4:	005b      	lsls	r3, r3, #1
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	3314      	adds	r3, #20
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	edd3 6a00 	vldr	s13, [r3]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	1c59      	adds	r1, r3, #1
 80028c8:	481c      	ldr	r0, [pc, #112]	; (800293c <SDI+0x1a0>)
 80028ca:	683a      	ldr	r2, [r7, #0]
 80028cc:	4613      	mov	r3, r2
 80028ce:	011b      	lsls	r3, r3, #4
 80028d0:	1a9b      	subs	r3, r3, r2
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	440b      	add	r3, r1
 80028d6:	3314      	adds	r3, #20
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4403      	add	r3, r0
 80028dc:	edd3 7a00 	vldr	s15, [r3]
 80028e0:	ee36 6aa7 	vadd.f32	s12, s13, s15
 80028e4:	4b16      	ldr	r3, [pc, #88]	; (8002940 <SDI+0x1a4>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	005b      	lsls	r3, r3, #1
 80028ea:	ee07 3a90 	vmov	s15, r3
 80028ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80028f2:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80028f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028fa:	490f      	ldr	r1, [pc, #60]	; (8002938 <SDI+0x19c>)
 80028fc:	683a      	ldr	r2, [r7, #0]
 80028fe:	4613      	mov	r3, r2
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	4413      	add	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	440b      	add	r3, r1
 8002908:	3308      	adds	r3, #8
 800290a:	edc3 7a00 	vstr	s15, [r3]
		for(k = 0; k<9; k++)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	3301      	adds	r3, #1
 8002912:	607b      	str	r3, [r7, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b08      	cmp	r3, #8
 8002918:	f77f af49 	ble.w	80027ae <SDI+0x12>
	for(i = 0; i<2; i++)
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	3301      	adds	r3, #1
 8002920:	603b      	str	r3, [r7, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	2b01      	cmp	r3, #1
 8002926:	f77f af3f 	ble.w	80027a8 <SDI+0xc>
		}
	}
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
}
 800292a:	bf00      	nop
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	20000ac8 	.word	0x20000ac8
 800293c:	200009c0 	.word	0x200009c0
 8002940:	20000020 	.word	0x20000020
 8002944:	00000000 	.word	0x00000000

08002948 <Complementary_filter>:

void Complementary_filter()
{
 8002948:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800294c:	b082      	sub	sp, #8
 800294e:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
	int i;
	for(i = 0; i < 2; i++)
 8002950:	2300      	movs	r3, #0
 8002952:	607b      	str	r3, [r7, #4]
 8002954:	e15b      	b.n	8002c0e <Complementary_filter+0x2c6>
	{
		Acc_ang[i].pitch = atan2(-Acc_data[i].x, sqrt(pow(Acc_data[i].y, 2.0) + pow(Acc_data[i].z, 2.0))) * 180.0/M_PI;
 8002956:	49c0      	ldr	r1, [pc, #768]	; (8002c58 <Complementary_filter+0x310>)
 8002958:	687a      	ldr	r2, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	005b      	lsls	r3, r3, #1
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	edd3 7a00 	vldr	s15, [r3]
 8002968:	eef1 7a67 	vneg.f32	s15, s15
 800296c:	ee17 3a90 	vmov	r3, s15
 8002970:	4618      	mov	r0, r3
 8002972:	f7fd fde9 	bl	8000548 <__aeabi_f2d>
 8002976:	4604      	mov	r4, r0
 8002978:	460d      	mov	r5, r1
 800297a:	49b7      	ldr	r1, [pc, #732]	; (8002c58 <Complementary_filter+0x310>)
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4613      	mov	r3, r2
 8002980:	005b      	lsls	r3, r3, #1
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	440b      	add	r3, r1
 8002988:	3304      	adds	r3, #4
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4618      	mov	r0, r3
 800298e:	f7fd fddb 	bl	8000548 <__aeabi_f2d>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	ed9f 1ba4 	vldr	d1, [pc, #656]	; 8002c28 <Complementary_filter+0x2e0>
 800299a:	ec43 2b10 	vmov	d0, r2, r3
 800299e:	f011 fd79 	bl	8014494 <pow>
 80029a2:	ec59 8b10 	vmov	r8, r9, d0
 80029a6:	49ac      	ldr	r1, [pc, #688]	; (8002c58 <Complementary_filter+0x310>)
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	4413      	add	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	3308      	adds	r3, #8
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7fd fdc5 	bl	8000548 <__aeabi_f2d>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	ed9f 1b99 	vldr	d1, [pc, #612]	; 8002c28 <Complementary_filter+0x2e0>
 80029c6:	ec43 2b10 	vmov	d0, r2, r3
 80029ca:	f011 fd63 	bl	8014494 <pow>
 80029ce:	ec53 2b10 	vmov	r2, r3, d0
 80029d2:	4640      	mov	r0, r8
 80029d4:	4649      	mov	r1, r9
 80029d6:	f7fd fc59 	bl	800028c <__adddf3>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	ec43 2b17 	vmov	d7, r2, r3
 80029e2:	eeb0 0a47 	vmov.f32	s0, s14
 80029e6:	eef0 0a67 	vmov.f32	s1, s15
 80029ea:	f011 fdc3 	bl	8014574 <sqrt>
 80029ee:	eeb0 7a40 	vmov.f32	s14, s0
 80029f2:	eef0 7a60 	vmov.f32	s15, s1
 80029f6:	eeb0 1a47 	vmov.f32	s2, s14
 80029fa:	eef0 1a67 	vmov.f32	s3, s15
 80029fe:	ec45 4b10 	vmov	d0, r4, r5
 8002a02:	f011 fc7d 	bl	8014300 <atan2>
 8002a06:	ec51 0b10 	vmov	r0, r1, d0
 8002a0a:	f04f 0200 	mov.w	r2, #0
 8002a0e:	4b93      	ldr	r3, [pc, #588]	; (8002c5c <Complementary_filter+0x314>)
 8002a10:	f7fd fdf2 	bl	80005f8 <__aeabi_dmul>
 8002a14:	4602      	mov	r2, r0
 8002a16:	460b      	mov	r3, r1
 8002a18:	4610      	mov	r0, r2
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	a384      	add	r3, pc, #528	; (adr r3, 8002c30 <Complementary_filter+0x2e8>)
 8002a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a22:	f7fd ff13 	bl	800084c <__aeabi_ddiv>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	f7fe f8bb 	bl	8000ba8 <__aeabi_d2f>
 8002a32:	4601      	mov	r1, r0
 8002a34:	488a      	ldr	r0, [pc, #552]	; (8002c60 <Complementary_filter+0x318>)
 8002a36:	687a      	ldr	r2, [r7, #4]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4403      	add	r3, r0
 8002a42:	6019      	str	r1, [r3, #0]
		Acc_ang[i].roll = atan2(Acc_data[i].y, sqrt(pow(Acc_data[i].x, 2.0) + pow(Acc_data[i].z, 2.0))) * 180.0/M_PI;
 8002a44:	4984      	ldr	r1, [pc, #528]	; (8002c58 <Complementary_filter+0x310>)
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	3304      	adds	r3, #4
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7fd fd76 	bl	8000548 <__aeabi_f2d>
 8002a5c:	4604      	mov	r4, r0
 8002a5e:	460d      	mov	r5, r1
 8002a60:	497d      	ldr	r1, [pc, #500]	; (8002c58 <Complementary_filter+0x310>)
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f7fd fd69 	bl	8000548 <__aeabi_f2d>
 8002a76:	4602      	mov	r2, r0
 8002a78:	460b      	mov	r3, r1
 8002a7a:	ed9f 1b6b 	vldr	d1, [pc, #428]	; 8002c28 <Complementary_filter+0x2e0>
 8002a7e:	ec43 2b10 	vmov	d0, r2, r3
 8002a82:	f011 fd07 	bl	8014494 <pow>
 8002a86:	ec59 8b10 	vmov	r8, r9, d0
 8002a8a:	4973      	ldr	r1, [pc, #460]	; (8002c58 <Complementary_filter+0x310>)
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	4613      	mov	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	4413      	add	r3, r2
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	440b      	add	r3, r1
 8002a98:	3308      	adds	r3, #8
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7fd fd53 	bl	8000548 <__aeabi_f2d>
 8002aa2:	4602      	mov	r2, r0
 8002aa4:	460b      	mov	r3, r1
 8002aa6:	ed9f 1b60 	vldr	d1, [pc, #384]	; 8002c28 <Complementary_filter+0x2e0>
 8002aaa:	ec43 2b10 	vmov	d0, r2, r3
 8002aae:	f011 fcf1 	bl	8014494 <pow>
 8002ab2:	ec53 2b10 	vmov	r2, r3, d0
 8002ab6:	4640      	mov	r0, r8
 8002ab8:	4649      	mov	r1, r9
 8002aba:	f7fd fbe7 	bl	800028c <__adddf3>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	ec43 2b17 	vmov	d7, r2, r3
 8002ac6:	eeb0 0a47 	vmov.f32	s0, s14
 8002aca:	eef0 0a67 	vmov.f32	s1, s15
 8002ace:	f011 fd51 	bl	8014574 <sqrt>
 8002ad2:	eeb0 7a40 	vmov.f32	s14, s0
 8002ad6:	eef0 7a60 	vmov.f32	s15, s1
 8002ada:	eeb0 1a47 	vmov.f32	s2, s14
 8002ade:	eef0 1a67 	vmov.f32	s3, s15
 8002ae2:	ec45 4b10 	vmov	d0, r4, r5
 8002ae6:	f011 fc0b 	bl	8014300 <atan2>
 8002aea:	ec51 0b10 	vmov	r0, r1, d0
 8002aee:	f04f 0200 	mov.w	r2, #0
 8002af2:	4b5a      	ldr	r3, [pc, #360]	; (8002c5c <Complementary_filter+0x314>)
 8002af4:	f7fd fd80 	bl	80005f8 <__aeabi_dmul>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	a34b      	add	r3, pc, #300	; (adr r3, 8002c30 <Complementary_filter+0x2e8>)
 8002b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b06:	f7fd fea1 	bl	800084c <__aeabi_ddiv>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4610      	mov	r0, r2
 8002b10:	4619      	mov	r1, r3
 8002b12:	f7fe f849 	bl	8000ba8 <__aeabi_d2f>
 8002b16:	4601      	mov	r1, r0
 8002b18:	4851      	ldr	r0, [pc, #324]	; (8002c60 <Complementary_filter+0x318>)
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4403      	add	r3, r0
 8002b26:	3304      	adds	r3, #4
 8002b28:	6019      	str	r1, [r3, #0]

		Estim_ang[i].roll = (0.982207 * Acc_ang[i].roll) + (0.017794 * SDIareas[i].area_x);
 8002b2a:	494d      	ldr	r1, [pc, #308]	; (8002c60 <Complementary_filter+0x318>)
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	4413      	add	r3, r2
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	440b      	add	r3, r1
 8002b38:	3304      	adds	r3, #4
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fd fd03 	bl	8000548 <__aeabi_f2d>
 8002b42:	a33d      	add	r3, pc, #244	; (adr r3, 8002c38 <Complementary_filter+0x2f0>)
 8002b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b48:	f7fd fd56 	bl	80005f8 <__aeabi_dmul>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	460b      	mov	r3, r1
 8002b50:	4614      	mov	r4, r2
 8002b52:	461d      	mov	r5, r3
 8002b54:	4943      	ldr	r1, [pc, #268]	; (8002c64 <Complementary_filter+0x31c>)
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	005b      	lsls	r3, r3, #1
 8002b5c:	4413      	add	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd fcef 	bl	8000548 <__aeabi_f2d>
 8002b6a:	a335      	add	r3, pc, #212	; (adr r3, 8002c40 <Complementary_filter+0x2f8>)
 8002b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b70:	f7fd fd42 	bl	80005f8 <__aeabi_dmul>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4620      	mov	r0, r4
 8002b7a:	4629      	mov	r1, r5
 8002b7c:	f7fd fb86 	bl	800028c <__adddf3>
 8002b80:	4602      	mov	r2, r0
 8002b82:	460b      	mov	r3, r1
 8002b84:	4610      	mov	r0, r2
 8002b86:	4619      	mov	r1, r3
 8002b88:	f7fe f80e 	bl	8000ba8 <__aeabi_d2f>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	4936      	ldr	r1, [pc, #216]	; (8002c68 <Complementary_filter+0x320>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	00db      	lsls	r3, r3, #3
 8002b94:	440b      	add	r3, r1
 8002b96:	601a      	str	r2, [r3, #0]
		Estim_ang[i].pitch = (0.981646 * Acc_ang[i].pitch) + (0.018354 * SDIareas[i].area_y);
 8002b98:	4931      	ldr	r1, [pc, #196]	; (8002c60 <Complementary_filter+0x318>)
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	005b      	lsls	r3, r3, #1
 8002ba0:	4413      	add	r3, r2
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	440b      	add	r3, r1
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7fd fccd 	bl	8000548 <__aeabi_f2d>
 8002bae:	a326      	add	r3, pc, #152	; (adr r3, 8002c48 <Complementary_filter+0x300>)
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f7fd fd20 	bl	80005f8 <__aeabi_dmul>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	460b      	mov	r3, r1
 8002bbc:	4614      	mov	r4, r2
 8002bbe:	461d      	mov	r5, r3
 8002bc0:	4928      	ldr	r1, [pc, #160]	; (8002c64 <Complementary_filter+0x31c>)
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	4613      	mov	r3, r2
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	4413      	add	r3, r2
 8002bca:	009b      	lsls	r3, r3, #2
 8002bcc:	440b      	add	r3, r1
 8002bce:	3304      	adds	r3, #4
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f7fd fcb8 	bl	8000548 <__aeabi_f2d>
 8002bd8:	a31d      	add	r3, pc, #116	; (adr r3, 8002c50 <Complementary_filter+0x308>)
 8002bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bde:	f7fd fd0b 	bl	80005f8 <__aeabi_dmul>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4620      	mov	r0, r4
 8002be8:	4629      	mov	r1, r5
 8002bea:	f7fd fb4f 	bl	800028c <__adddf3>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f7fd ffd7 	bl	8000ba8 <__aeabi_d2f>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	491a      	ldr	r1, [pc, #104]	; (8002c68 <Complementary_filter+0x320>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	440b      	add	r3, r1
 8002c04:	3304      	adds	r3, #4
 8002c06:	601a      	str	r2, [r3, #0]
	for(i = 0; i < 2; i++)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	607b      	str	r3, [r7, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b01      	cmp	r3, #1
 8002c12:	f77f aea0 	ble.w	8002956 <Complementary_filter+0xe>
	}
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
}
 8002c16:	bf00      	nop
 8002c18:	bf00      	nop
 8002c1a:	3708      	adds	r7, #8
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c22:	bf00      	nop
 8002c24:	f3af 8000 	nop.w
 8002c28:	00000000 	.word	0x00000000
 8002c2c:	40000000 	.word	0x40000000
 8002c30:	54442d18 	.word	0x54442d18
 8002c34:	400921fb 	.word	0x400921fb
 8002c38:	5fdcdf6a 	.word	0x5fdcdf6a
 8002c3c:	3fef6e3d 	.word	0x3fef6e3d
 8002c40:	204295a7 	.word	0x204295a7
 8002c44:	3f923897 	.word	0x3f923897
 8002c48:	df47f994 	.word	0xdf47f994
 8002c4c:	3fef69a4 	.word	0x3fef69a4
 8002c50:	1700cd85 	.word	0x1700cd85
 8002c54:	3f92cb64 	.word	0x3f92cb64
 8002c58:	20000ab0 	.word	0x20000ab0
 8002c5c:	40668000 	.word	0x40668000
 8002c60:	20000ae0 	.word	0x20000ae0
 8002c64:	20000ac8 	.word	0x20000ac8
 8002c68:	20000af8 	.word	0x20000af8

08002c6c <EMG_Data_Reception>:
	}
}


void EMG_Data_Reception()
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
	if(HAL_UART_Receive(&huart3, (uint8_t*)rx_data, sizeof(rx_data), HAL_MAX_DELAY) == HAL_OK)
 8002c70:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002c74:	2211      	movs	r2, #17
 8002c76:	4907      	ldr	r1, [pc, #28]	; (8002c94 <EMG_Data_Reception+0x28>)
 8002c78:	4807      	ldr	r0, [pc, #28]	; (8002c98 <EMG_Data_Reception+0x2c>)
 8002c7a:	f006 f954 	bl	8008f26 <HAL_UART_Receive>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d105      	bne.n	8002c90 <EMG_Data_Reception+0x24>
	{
		//CDC_Transmit_FS((uint8_t*)rx_data, strlen(rx_data));
		AppendToFile(emg_log_path, sizeof(emg_log_path), (char*)rx_data, sizeof(rx_data));
 8002c84:	2311      	movs	r3, #17
 8002c86:	4a03      	ldr	r2, [pc, #12]	; (8002c94 <EMG_Data_Reception+0x28>)
 8002c88:	210d      	movs	r1, #13
 8002c8a:	4804      	ldr	r0, [pc, #16]	; (8002c9c <EMG_Data_Reception+0x30>)
 8002c8c:	f7ff fa0a 	bl	80020a4 <AppendToFile>
	}
}
 8002c90:	bf00      	nop
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	2000093c 	.word	0x2000093c
 8002c98:	200004fc 	.word	0x200004fc
 8002c9c:	20000010 	.word	0x20000010

08002ca0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002ca4:	b672      	cpsid	i
}
 8002ca6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002ca8:	e7fe      	b.n	8002ca8 <Error_Handler+0x8>
	...

08002cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b083      	sub	sp, #12
 8002cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	607b      	str	r3, [r7, #4]
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <HAL_MspInit+0x4c>)
 8002cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cba:	4a0f      	ldr	r2, [pc, #60]	; (8002cf8 <HAL_MspInit+0x4c>)
 8002cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	; (8002cf8 <HAL_MspInit+0x4c>)
 8002cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cca:	607b      	str	r3, [r7, #4]
 8002ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002cce:	2300      	movs	r3, #0
 8002cd0:	603b      	str	r3, [r7, #0]
 8002cd2:	4b09      	ldr	r3, [pc, #36]	; (8002cf8 <HAL_MspInit+0x4c>)
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	4a08      	ldr	r2, [pc, #32]	; (8002cf8 <HAL_MspInit+0x4c>)
 8002cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	6413      	str	r3, [r2, #64]	; 0x40
 8002cde:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <HAL_MspInit+0x4c>)
 8002ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce6:	603b      	str	r3, [r7, #0]
 8002ce8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40023800 	.word	0x40023800

08002cfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08a      	sub	sp, #40	; 0x28
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d04:	f107 0314 	add.w	r3, r7, #20
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a19      	ldr	r2, [pc, #100]	; (8002d80 <HAL_I2C_MspInit+0x84>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d12b      	bne.n	8002d76 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	4b18      	ldr	r3, [pc, #96]	; (8002d84 <HAL_I2C_MspInit+0x88>)
 8002d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d26:	4a17      	ldr	r2, [pc, #92]	; (8002d84 <HAL_I2C_MspInit+0x88>)
 8002d28:	f043 0302 	orr.w	r3, r3, #2
 8002d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d2e:	4b15      	ldr	r3, [pc, #84]	; (8002d84 <HAL_I2C_MspInit+0x88>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002d3a:	23c0      	movs	r3, #192	; 0xc0
 8002d3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002d3e:	2312      	movs	r3, #18
 8002d40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d42:	2300      	movs	r3, #0
 8002d44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d46:	2303      	movs	r3, #3
 8002d48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002d4a:	2304      	movs	r3, #4
 8002d4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002d4e:	f107 0314 	add.w	r3, r7, #20
 8002d52:	4619      	mov	r1, r3
 8002d54:	480c      	ldr	r0, [pc, #48]	; (8002d88 <HAL_I2C_MspInit+0x8c>)
 8002d56:	f001 f8ad 	bl	8003eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	60fb      	str	r3, [r7, #12]
 8002d5e:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_I2C_MspInit+0x88>)
 8002d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d62:	4a08      	ldr	r2, [pc, #32]	; (8002d84 <HAL_I2C_MspInit+0x88>)
 8002d64:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002d68:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6a:	4b06      	ldr	r3, [pc, #24]	; (8002d84 <HAL_I2C_MspInit+0x88>)
 8002d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002d76:	bf00      	nop
 8002d78:	3728      	adds	r7, #40	; 0x28
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40005400 	.word	0x40005400
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40020400 	.word	0x40020400

08002d8c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b08a      	sub	sp, #40	; 0x28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	2200      	movs	r2, #0
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	605a      	str	r2, [r3, #4]
 8002d9e:	609a      	str	r2, [r3, #8]
 8002da0:	60da      	str	r2, [r3, #12]
 8002da2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a70      	ldr	r2, [pc, #448]	; (8002f6c <HAL_SD_MspInit+0x1e0>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	f040 80da 	bne.w	8002f64 <HAL_SD_MspInit+0x1d8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8002db0:	2300      	movs	r3, #0
 8002db2:	613b      	str	r3, [r7, #16]
 8002db4:	4b6e      	ldr	r3, [pc, #440]	; (8002f70 <HAL_SD_MspInit+0x1e4>)
 8002db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db8:	4a6d      	ldr	r2, [pc, #436]	; (8002f70 <HAL_SD_MspInit+0x1e4>)
 8002dba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002dbe:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc0:	4b6b      	ldr	r3, [pc, #428]	; (8002f70 <HAL_SD_MspInit+0x1e4>)
 8002dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dcc:	2300      	movs	r3, #0
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	4b67      	ldr	r3, [pc, #412]	; (8002f70 <HAL_SD_MspInit+0x1e4>)
 8002dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd4:	4a66      	ldr	r2, [pc, #408]	; (8002f70 <HAL_SD_MspInit+0x1e4>)
 8002dd6:	f043 0304 	orr.w	r3, r3, #4
 8002dda:	6313      	str	r3, [r2, #48]	; 0x30
 8002ddc:	4b64      	ldr	r3, [pc, #400]	; (8002f70 <HAL_SD_MspInit+0x1e4>)
 8002dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de0:	f003 0304 	and.w	r3, r3, #4
 8002de4:	60fb      	str	r3, [r7, #12]
 8002de6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002de8:	2300      	movs	r3, #0
 8002dea:	60bb      	str	r3, [r7, #8]
 8002dec:	4b60      	ldr	r3, [pc, #384]	; (8002f70 <HAL_SD_MspInit+0x1e4>)
 8002dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df0:	4a5f      	ldr	r2, [pc, #380]	; (8002f70 <HAL_SD_MspInit+0x1e4>)
 8002df2:	f043 0308 	orr.w	r3, r3, #8
 8002df6:	6313      	str	r3, [r2, #48]	; 0x30
 8002df8:	4b5d      	ldr	r3, [pc, #372]	; (8002f70 <HAL_SD_MspInit+0x1e4>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	f003 0308 	and.w	r3, r3, #8
 8002e00:	60bb      	str	r3, [r7, #8]
 8002e02:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8002e04:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e12:	2303      	movs	r3, #3
 8002e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002e16:	230c      	movs	r3, #12
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e1a:	f107 0314 	add.w	r3, r7, #20
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4854      	ldr	r0, [pc, #336]	; (8002f74 <HAL_SD_MspInit+0x1e8>)
 8002e22:	f001 f847 	bl	8003eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8002e26:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8002e2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e34:	2303      	movs	r3, #3
 8002e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002e38:	230c      	movs	r3, #12
 8002e3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e3c:	f107 0314 	add.w	r3, r7, #20
 8002e40:	4619      	mov	r1, r3
 8002e42:	484c      	ldr	r0, [pc, #304]	; (8002f74 <HAL_SD_MspInit+0x1e8>)
 8002e44:	f001 f836 	bl	8003eb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002e48:	2304      	movs	r3, #4
 8002e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e50:	2301      	movs	r3, #1
 8002e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e54:	2303      	movs	r3, #3
 8002e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002e58:	230c      	movs	r3, #12
 8002e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e5c:	f107 0314 	add.w	r3, r7, #20
 8002e60:	4619      	mov	r1, r3
 8002e62:	4845      	ldr	r0, [pc, #276]	; (8002f78 <HAL_SD_MspInit+0x1ec>)
 8002e64:	f001 f826 	bl	8003eb4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8002e68:	4b44      	ldr	r3, [pc, #272]	; (8002f7c <HAL_SD_MspInit+0x1f0>)
 8002e6a:	4a45      	ldr	r2, [pc, #276]	; (8002f80 <HAL_SD_MspInit+0x1f4>)
 8002e6c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8002e6e:	4b43      	ldr	r3, [pc, #268]	; (8002f7c <HAL_SD_MspInit+0x1f0>)
 8002e70:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e74:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e76:	4b41      	ldr	r3, [pc, #260]	; (8002f7c <HAL_SD_MspInit+0x1f0>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e7c:	4b3f      	ldr	r3, [pc, #252]	; (8002f7c <HAL_SD_MspInit+0x1f0>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e82:	4b3e      	ldr	r3, [pc, #248]	; (8002f7c <HAL_SD_MspInit+0x1f0>)
 8002e84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e88:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002e8a:	4b3c      	ldr	r3, [pc, #240]	; (8002f7c <HAL_SD_MspInit+0x1f0>)
 8002e8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002e90:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002e92:	4b3a      	ldr	r3, [pc, #232]	; (8002f7c <HAL_SD_MspInit+0x1f0>)
 8002e94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e98:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8002e9a:	4b38      	ldr	r3, [pc, #224]	; (8002f7c <HAL_SD_MspInit+0x1f0>)
 8002e9c:	2220      	movs	r2, #32
 8002e9e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ea0:	4b36      	ldr	r3, [pc, #216]	; (8002f7c <HAL_SD_MspInit+0x1f0>)
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002ea6:	4b35      	ldr	r3, [pc, #212]	; (8002f7c <HAL_SD_MspInit+0x1f0>)
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002eac:	4b33      	ldr	r3, [pc, #204]	; (8002f7c <HAL_SD_MspInit+0x1f0>)
 8002eae:	2203      	movs	r2, #3
 8002eb0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8002eb2:	4b32      	ldr	r3, [pc, #200]	; (8002f7c <HAL_SD_MspInit+0x1f0>)
 8002eb4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002eb8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002eba:	4b30      	ldr	r3, [pc, #192]	; (8002f7c <HAL_SD_MspInit+0x1f0>)
 8002ebc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002ec0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8002ec2:	482e      	ldr	r0, [pc, #184]	; (8002f7c <HAL_SD_MspInit+0x1f0>)
 8002ec4:	f000 fbe8 	bl	8003698 <HAL_DMA_Init>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <HAL_SD_MspInit+0x146>
    {
      Error_Handler();
 8002ece:	f7ff fee7 	bl	8002ca0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdio_rx);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a29      	ldr	r2, [pc, #164]	; (8002f7c <HAL_SD_MspInit+0x1f0>)
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ed8:	4a28      	ldr	r2, [pc, #160]	; (8002f7c <HAL_SD_MspInit+0x1f0>)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8002ede:	4b29      	ldr	r3, [pc, #164]	; (8002f84 <HAL_SD_MspInit+0x1f8>)
 8002ee0:	4a29      	ldr	r2, [pc, #164]	; (8002f88 <HAL_SD_MspInit+0x1fc>)
 8002ee2:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8002ee4:	4b27      	ldr	r3, [pc, #156]	; (8002f84 <HAL_SD_MspInit+0x1f8>)
 8002ee6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002eea:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002eec:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <HAL_SD_MspInit+0x1f8>)
 8002eee:	2240      	movs	r2, #64	; 0x40
 8002ef0:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ef2:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <HAL_SD_MspInit+0x1f8>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ef8:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <HAL_SD_MspInit+0x1f8>)
 8002efa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002efe:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002f00:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <HAL_SD_MspInit+0x1f8>)
 8002f02:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002f06:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002f08:	4b1e      	ldr	r3, [pc, #120]	; (8002f84 <HAL_SD_MspInit+0x1f8>)
 8002f0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002f0e:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8002f10:	4b1c      	ldr	r3, [pc, #112]	; (8002f84 <HAL_SD_MspInit+0x1f8>)
 8002f12:	2220      	movs	r2, #32
 8002f14:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f16:	4b1b      	ldr	r3, [pc, #108]	; (8002f84 <HAL_SD_MspInit+0x1f8>)
 8002f18:	2200      	movs	r2, #0
 8002f1a:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002f1c:	4b19      	ldr	r3, [pc, #100]	; (8002f84 <HAL_SD_MspInit+0x1f8>)
 8002f1e:	2204      	movs	r2, #4
 8002f20:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002f22:	4b18      	ldr	r3, [pc, #96]	; (8002f84 <HAL_SD_MspInit+0x1f8>)
 8002f24:	2203      	movs	r2, #3
 8002f26:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002f28:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <HAL_SD_MspInit+0x1f8>)
 8002f2a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002f2e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <HAL_SD_MspInit+0x1f8>)
 8002f32:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002f36:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8002f38:	4812      	ldr	r0, [pc, #72]	; (8002f84 <HAL_SD_MspInit+0x1f8>)
 8002f3a:	f000 fbad 	bl	8003698 <HAL_DMA_Init>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <HAL_SD_MspInit+0x1bc>
    {
      Error_Handler();
 8002f44:	f7ff feac 	bl	8002ca0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdio_tx);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a0e      	ldr	r2, [pc, #56]	; (8002f84 <HAL_SD_MspInit+0x1f8>)
 8002f4c:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f4e:	4a0d      	ldr	r2, [pc, #52]	; (8002f84 <HAL_SD_MspInit+0x1f8>)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8002f54:	2200      	movs	r2, #0
 8002f56:	2100      	movs	r1, #0
 8002f58:	2031      	movs	r0, #49	; 0x31
 8002f5a:	f000 fb66 	bl	800362a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8002f5e:	2031      	movs	r0, #49	; 0x31
 8002f60:	f000 fb7f 	bl	8003662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002f64:	bf00      	nop
 8002f66:	3728      	adds	r7, #40	; 0x28
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	40012c00 	.word	0x40012c00
 8002f70:	40023800 	.word	0x40023800
 8002f74:	40020800 	.word	0x40020800
 8002f78:	40020c00 	.word	0x40020c00
 8002f7c:	200003f4 	.word	0x200003f4
 8002f80:	40026458 	.word	0x40026458
 8002f84:	20000454 	.word	0x20000454
 8002f88:	400264a0 	.word	0x400264a0

08002f8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9c:	d115      	bne.n	8002fca <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60fb      	str	r3, [r7, #12]
 8002fa2:	4b0c      	ldr	r3, [pc, #48]	; (8002fd4 <HAL_TIM_Base_MspInit+0x48>)
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	4a0b      	ldr	r2, [pc, #44]	; (8002fd4 <HAL_TIM_Base_MspInit+0x48>)
 8002fa8:	f043 0301 	orr.w	r3, r3, #1
 8002fac:	6413      	str	r3, [r2, #64]	; 0x40
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_TIM_Base_MspInit+0x48>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	60fb      	str	r3, [r7, #12]
 8002fb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002fba:	2200      	movs	r2, #0
 8002fbc:	2100      	movs	r1, #0
 8002fbe:	201c      	movs	r0, #28
 8002fc0:	f000 fb33 	bl	800362a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002fc4:	201c      	movs	r0, #28
 8002fc6:	f000 fb4c 	bl	8003662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002fca:	bf00      	nop
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800

08002fd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b08a      	sub	sp, #40	; 0x28
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]
 8002fe8:	605a      	str	r2, [r3, #4]
 8002fea:	609a      	str	r2, [r3, #8]
 8002fec:	60da      	str	r2, [r3, #12]
 8002fee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1d      	ldr	r2, [pc, #116]	; (800306c <HAL_UART_MspInit+0x94>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d134      	bne.n	8003064 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	613b      	str	r3, [r7, #16]
 8002ffe:	4b1c      	ldr	r3, [pc, #112]	; (8003070 <HAL_UART_MspInit+0x98>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	4a1b      	ldr	r2, [pc, #108]	; (8003070 <HAL_UART_MspInit+0x98>)
 8003004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003008:	6413      	str	r3, [r2, #64]	; 0x40
 800300a:	4b19      	ldr	r3, [pc, #100]	; (8003070 <HAL_UART_MspInit+0x98>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003012:	613b      	str	r3, [r7, #16]
 8003014:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003016:	2300      	movs	r3, #0
 8003018:	60fb      	str	r3, [r7, #12]
 800301a:	4b15      	ldr	r3, [pc, #84]	; (8003070 <HAL_UART_MspInit+0x98>)
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	4a14      	ldr	r2, [pc, #80]	; (8003070 <HAL_UART_MspInit+0x98>)
 8003020:	f043 0302 	orr.w	r3, r3, #2
 8003024:	6313      	str	r3, [r2, #48]	; 0x30
 8003026:	4b12      	ldr	r3, [pc, #72]	; (8003070 <HAL_UART_MspInit+0x98>)
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	60fb      	str	r3, [r7, #12]
 8003030:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003032:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003038:	2302      	movs	r3, #2
 800303a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003040:	2303      	movs	r3, #3
 8003042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003044:	2307      	movs	r3, #7
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003048:	f107 0314 	add.w	r3, r7, #20
 800304c:	4619      	mov	r1, r3
 800304e:	4809      	ldr	r0, [pc, #36]	; (8003074 <HAL_UART_MspInit+0x9c>)
 8003050:	f000 ff30 	bl	8003eb4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003054:	2200      	movs	r2, #0
 8003056:	2100      	movs	r1, #0
 8003058:	2027      	movs	r0, #39	; 0x27
 800305a:	f000 fae6 	bl	800362a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800305e:	2027      	movs	r0, #39	; 0x27
 8003060:	f000 faff 	bl	8003662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003064:	bf00      	nop
 8003066:	3728      	adds	r7, #40	; 0x28
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}
 800306c:	40004800 	.word	0x40004800
 8003070:	40023800 	.word	0x40023800
 8003074:	40020400 	.word	0x40020400

08003078 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800307c:	e7fe      	b.n	800307c <NMI_Handler+0x4>

0800307e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800307e:	b480      	push	{r7}
 8003080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003082:	e7fe      	b.n	8003082 <HardFault_Handler+0x4>

08003084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003084:	b480      	push	{r7}
 8003086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003088:	e7fe      	b.n	8003088 <MemManage_Handler+0x4>

0800308a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800308a:	b480      	push	{r7}
 800308c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800308e:	e7fe      	b.n	800308e <BusFault_Handler+0x4>

08003090 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003094:	e7fe      	b.n	8003094 <UsageFault_Handler+0x4>

08003096 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003096:	b480      	push	{r7}
 8003098:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800309a:	bf00      	nop
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80030b6:	bf00      	nop
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80030c4:	f000 f992 	bl	80033ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80030c8:	bf00      	nop
 80030ca:	bd80      	pop	{r7, pc}

080030cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80030d0:	4802      	ldr	r0, [pc, #8]	; (80030dc <TIM2_IRQHandler+0x10>)
 80030d2:	f005 fb19 	bl	8008708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80030d6:	bf00      	nop
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	200004b4 	.word	0x200004b4

080030e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80030e4:	4802      	ldr	r0, [pc, #8]	; (80030f0 <USART3_IRQHandler+0x10>)
 80030e6:	f005 ffc1 	bl	800906c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	200004fc 	.word	0x200004fc

080030f4 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80030f8:	4802      	ldr	r0, [pc, #8]	; (8003104 <SDIO_IRQHandler+0x10>)
 80030fa:	f004 f98b 	bl	8007414 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80030fe:	bf00      	nop
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000370 	.word	0x20000370

08003108 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800310c:	4802      	ldr	r0, [pc, #8]	; (8003118 <DMA2_Stream3_IRQHandler+0x10>)
 800310e:	f000 fc5b 	bl	80039c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8003112:	bf00      	nop
 8003114:	bd80      	pop	{r7, pc}
 8003116:	bf00      	nop
 8003118:	200003f4 	.word	0x200003f4

0800311c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003120:	4802      	ldr	r0, [pc, #8]	; (800312c <OTG_FS_IRQHandler+0x10>)
 8003122:	f002 f97a 	bl	800541a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003126:	bf00      	nop
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	20002034 	.word	0x20002034

08003130 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8003134:	4802      	ldr	r0, [pc, #8]	; (8003140 <DMA2_Stream6_IRQHandler+0x10>)
 8003136:	f000 fc47 	bl	80039c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800313a:	bf00      	nop
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	20000454 	.word	0x20000454

08003144 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return 1;
 8003148:	2301      	movs	r3, #1
}
 800314a:	4618      	mov	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <_kill>:

int _kill(int pid, int sig)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b082      	sub	sp, #8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800315e:	f00e ff9f 	bl	80120a0 <__errno>
 8003162:	4603      	mov	r3, r0
 8003164:	2216      	movs	r2, #22
 8003166:	601a      	str	r2, [r3, #0]
  return -1;
 8003168:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800316c:	4618      	mov	r0, r3
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}

08003174 <_exit>:

void _exit (int status)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b082      	sub	sp, #8
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800317c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f7ff ffe7 	bl	8003154 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003186:	e7fe      	b.n	8003186 <_exit+0x12>

08003188 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b086      	sub	sp, #24
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	e00a      	b.n	80031b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800319a:	f3af 8000 	nop.w
 800319e:	4601      	mov	r1, r0
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	60ba      	str	r2, [r7, #8]
 80031a6:	b2ca      	uxtb	r2, r1
 80031a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	3301      	adds	r3, #1
 80031ae:	617b      	str	r3, [r7, #20]
 80031b0:	697a      	ldr	r2, [r7, #20]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	dbf0      	blt.n	800319a <_read+0x12>
  }

  return len;
 80031b8:	687b      	ldr	r3, [r7, #4]
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3718      	adds	r7, #24
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}

080031c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80031c2:	b580      	push	{r7, lr}
 80031c4:	b086      	sub	sp, #24
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	e009      	b.n	80031e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	60ba      	str	r2, [r7, #8]
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031e2:	697b      	ldr	r3, [r7, #20]
 80031e4:	3301      	adds	r3, #1
 80031e6:	617b      	str	r3, [r7, #20]
 80031e8:	697a      	ldr	r2, [r7, #20]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	429a      	cmp	r2, r3
 80031ee:	dbf1      	blt.n	80031d4 <_write+0x12>
  }
  return len;
 80031f0:	687b      	ldr	r3, [r7, #4]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <_close>:

int _close(int file)
{
 80031fa:	b480      	push	{r7}
 80031fc:	b083      	sub	sp, #12
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003202:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003210:	4770      	bx	lr

08003212 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003212:	b480      	push	{r7}
 8003214:	b083      	sub	sp, #12
 8003216:	af00      	add	r7, sp, #0
 8003218:	6078      	str	r0, [r7, #4]
 800321a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003222:	605a      	str	r2, [r3, #4]
  return 0;
 8003224:	2300      	movs	r3, #0
}
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <_isatty>:

int _isatty(int file)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800323a:	2301      	movs	r3, #1
}
 800323c:	4618      	mov	r0, r3
 800323e:	370c      	adds	r7, #12
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3714      	adds	r7, #20
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
	...

08003264 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b086      	sub	sp, #24
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800326c:	4a14      	ldr	r2, [pc, #80]	; (80032c0 <_sbrk+0x5c>)
 800326e:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <_sbrk+0x60>)
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003278:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <_sbrk+0x64>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d102      	bne.n	8003286 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003280:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <_sbrk+0x64>)
 8003282:	4a12      	ldr	r2, [pc, #72]	; (80032cc <_sbrk+0x68>)
 8003284:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003286:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <_sbrk+0x64>)
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	4413      	add	r3, r2
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	429a      	cmp	r2, r3
 8003292:	d207      	bcs.n	80032a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003294:	f00e ff04 	bl	80120a0 <__errno>
 8003298:	4603      	mov	r3, r0
 800329a:	220c      	movs	r2, #12
 800329c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800329e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032a2:	e009      	b.n	80032b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032a4:	4b08      	ldr	r3, [pc, #32]	; (80032c8 <_sbrk+0x64>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032aa:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <_sbrk+0x64>)
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4413      	add	r3, r2
 80032b2:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <_sbrk+0x64>)
 80032b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032b6:	68fb      	ldr	r3, [r7, #12]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}
 80032c0:	20020000 	.word	0x20020000
 80032c4:	00000400 	.word	0x00000400
 80032c8:	20000b08 	.word	0x20000b08
 80032cc:	200028b0 	.word	0x200028b0

080032d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80032d0:	b480      	push	{r7}
 80032d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <SystemInit+0x20>)
 80032d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032da:	4a05      	ldr	r2, [pc, #20]	; (80032f0 <SystemInit+0x20>)
 80032dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80032e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032e4:	bf00      	nop
 80032e6:	46bd      	mov	sp, r7
 80032e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ec:	4770      	bx	lr
 80032ee:	bf00      	nop
 80032f0:	e000ed00 	.word	0xe000ed00

080032f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80032f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800332c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80032f8:	480d      	ldr	r0, [pc, #52]	; (8003330 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80032fa:	490e      	ldr	r1, [pc, #56]	; (8003334 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80032fc:	4a0e      	ldr	r2, [pc, #56]	; (8003338 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80032fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003300:	e002      	b.n	8003308 <LoopCopyDataInit>

08003302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003306:	3304      	adds	r3, #4

08003308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800330a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800330c:	d3f9      	bcc.n	8003302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800330e:	4a0b      	ldr	r2, [pc, #44]	; (800333c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003310:	4c0b      	ldr	r4, [pc, #44]	; (8003340 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003314:	e001      	b.n	800331a <LoopFillZerobss>

08003316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003318:	3204      	adds	r2, #4

0800331a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800331a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800331c:	d3fb      	bcc.n	8003316 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800331e:	f7ff ffd7 	bl	80032d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003322:	f00e fec3 	bl	80120ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003326:	f7fe fbcb 	bl	8001ac0 <main>
  bx  lr    
 800332a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800332c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003330:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003334:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8003338:	08015cc8 	.word	0x08015cc8
  ldr r2, =_sbss
 800333c:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 8003340:	200028ac 	.word	0x200028ac

08003344 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003344:	e7fe      	b.n	8003344 <ADC_IRQHandler>
	...

08003348 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800334c:	4b0e      	ldr	r3, [pc, #56]	; (8003388 <HAL_Init+0x40>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a0d      	ldr	r2, [pc, #52]	; (8003388 <HAL_Init+0x40>)
 8003352:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003356:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003358:	4b0b      	ldr	r3, [pc, #44]	; (8003388 <HAL_Init+0x40>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <HAL_Init+0x40>)
 800335e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003362:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003364:	4b08      	ldr	r3, [pc, #32]	; (8003388 <HAL_Init+0x40>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a07      	ldr	r2, [pc, #28]	; (8003388 <HAL_Init+0x40>)
 800336a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003370:	2003      	movs	r0, #3
 8003372:	f000 f94f 	bl	8003614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003376:	200f      	movs	r0, #15
 8003378:	f000 f808 	bl	800338c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800337c:	f7ff fc96 	bl	8002cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023c00 	.word	0x40023c00

0800338c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003394:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <HAL_InitTick+0x54>)
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	4b12      	ldr	r3, [pc, #72]	; (80033e4 <HAL_InitTick+0x58>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	4619      	mov	r1, r3
 800339e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80033a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 f967 	bl	800367e <HAL_SYSTICK_Config>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e00e      	b.n	80033d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	2b0f      	cmp	r3, #15
 80033be:	d80a      	bhi.n	80033d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80033c0:	2200      	movs	r2, #0
 80033c2:	6879      	ldr	r1, [r7, #4]
 80033c4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033c8:	f000 f92f 	bl	800362a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80033cc:	4a06      	ldr	r2, [pc, #24]	; (80033e8 <HAL_InitTick+0x5c>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	e000      	b.n	80033d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3708      	adds	r7, #8
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	20000024 	.word	0x20000024
 80033e4:	2000002c 	.word	0x2000002c
 80033e8:	20000028 	.word	0x20000028

080033ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033f0:	4b06      	ldr	r3, [pc, #24]	; (800340c <HAL_IncTick+0x20>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	461a      	mov	r2, r3
 80033f6:	4b06      	ldr	r3, [pc, #24]	; (8003410 <HAL_IncTick+0x24>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4413      	add	r3, r2
 80033fc:	4a04      	ldr	r2, [pc, #16]	; (8003410 <HAL_IncTick+0x24>)
 80033fe:	6013      	str	r3, [r2, #0]
}
 8003400:	bf00      	nop
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	2000002c 	.word	0x2000002c
 8003410:	20000b0c 	.word	0x20000b0c

08003414 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  return uwTick;
 8003418:	4b03      	ldr	r3, [pc, #12]	; (8003428 <HAL_GetTick+0x14>)
 800341a:	681b      	ldr	r3, [r3, #0]
}
 800341c:	4618      	mov	r0, r3
 800341e:	46bd      	mov	sp, r7
 8003420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003424:	4770      	bx	lr
 8003426:	bf00      	nop
 8003428:	20000b0c 	.word	0x20000b0c

0800342c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b084      	sub	sp, #16
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003434:	f7ff ffee 	bl	8003414 <HAL_GetTick>
 8003438:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003444:	d005      	beq.n	8003452 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003446:	4b0a      	ldr	r3, [pc, #40]	; (8003470 <HAL_Delay+0x44>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	461a      	mov	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	4413      	add	r3, r2
 8003450:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003452:	bf00      	nop
 8003454:	f7ff ffde 	bl	8003414 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	68fa      	ldr	r2, [r7, #12]
 8003460:	429a      	cmp	r2, r3
 8003462:	d8f7      	bhi.n	8003454 <HAL_Delay+0x28>
  {
  }
}
 8003464:	bf00      	nop
 8003466:	bf00      	nop
 8003468:	3710      	adds	r7, #16
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	2000002c 	.word	0x2000002c

08003474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f003 0307 	and.w	r3, r3, #7
 8003482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003484:	4b0c      	ldr	r3, [pc, #48]	; (80034b8 <__NVIC_SetPriorityGrouping+0x44>)
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003490:	4013      	ands	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800349c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80034a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034a6:	4a04      	ldr	r2, [pc, #16]	; (80034b8 <__NVIC_SetPriorityGrouping+0x44>)
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	60d3      	str	r3, [r2, #12]
}
 80034ac:	bf00      	nop
 80034ae:	3714      	adds	r7, #20
 80034b0:	46bd      	mov	sp, r7
 80034b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b6:	4770      	bx	lr
 80034b8:	e000ed00 	.word	0xe000ed00

080034bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034bc:	b480      	push	{r7}
 80034be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034c0:	4b04      	ldr	r3, [pc, #16]	; (80034d4 <__NVIC_GetPriorityGrouping+0x18>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	0a1b      	lsrs	r3, r3, #8
 80034c6:	f003 0307 	and.w	r3, r3, #7
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	46bd      	mov	sp, r7
 80034ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d2:	4770      	bx	lr
 80034d4:	e000ed00 	.word	0xe000ed00

080034d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	4603      	mov	r3, r0
 80034e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	db0b      	blt.n	8003502 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034ea:	79fb      	ldrb	r3, [r7, #7]
 80034ec:	f003 021f 	and.w	r2, r3, #31
 80034f0:	4907      	ldr	r1, [pc, #28]	; (8003510 <__NVIC_EnableIRQ+0x38>)
 80034f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f6:	095b      	lsrs	r3, r3, #5
 80034f8:	2001      	movs	r0, #1
 80034fa:	fa00 f202 	lsl.w	r2, r0, r2
 80034fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003502:	bf00      	nop
 8003504:	370c      	adds	r7, #12
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	e000e100 	.word	0xe000e100

08003514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	4603      	mov	r3, r0
 800351c:	6039      	str	r1, [r7, #0]
 800351e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003524:	2b00      	cmp	r3, #0
 8003526:	db0a      	blt.n	800353e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	b2da      	uxtb	r2, r3
 800352c:	490c      	ldr	r1, [pc, #48]	; (8003560 <__NVIC_SetPriority+0x4c>)
 800352e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003532:	0112      	lsls	r2, r2, #4
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	440b      	add	r3, r1
 8003538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800353c:	e00a      	b.n	8003554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4908      	ldr	r1, [pc, #32]	; (8003564 <__NVIC_SetPriority+0x50>)
 8003544:	79fb      	ldrb	r3, [r7, #7]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	3b04      	subs	r3, #4
 800354c:	0112      	lsls	r2, r2, #4
 800354e:	b2d2      	uxtb	r2, r2
 8003550:	440b      	add	r3, r1
 8003552:	761a      	strb	r2, [r3, #24]
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	e000e100 	.word	0xe000e100
 8003564:	e000ed00 	.word	0xe000ed00

08003568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003568:	b480      	push	{r7}
 800356a:	b089      	sub	sp, #36	; 0x24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 0307 	and.w	r3, r3, #7
 800357a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	f1c3 0307 	rsb	r3, r3, #7
 8003582:	2b04      	cmp	r3, #4
 8003584:	bf28      	it	cs
 8003586:	2304      	movcs	r3, #4
 8003588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800358a:	69fb      	ldr	r3, [r7, #28]
 800358c:	3304      	adds	r3, #4
 800358e:	2b06      	cmp	r3, #6
 8003590:	d902      	bls.n	8003598 <NVIC_EncodePriority+0x30>
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	3b03      	subs	r3, #3
 8003596:	e000      	b.n	800359a <NVIC_EncodePriority+0x32>
 8003598:	2300      	movs	r3, #0
 800359a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800359c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43da      	mvns	r2, r3
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	401a      	ands	r2, r3
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ba:	43d9      	mvns	r1, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035c0:	4313      	orrs	r3, r2
         );
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3724      	adds	r7, #36	; 0x24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
	...

080035d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b082      	sub	sp, #8
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3b01      	subs	r3, #1
 80035dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80035e0:	d301      	bcc.n	80035e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035e2:	2301      	movs	r3, #1
 80035e4:	e00f      	b.n	8003606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035e6:	4a0a      	ldr	r2, [pc, #40]	; (8003610 <SysTick_Config+0x40>)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035ee:	210f      	movs	r1, #15
 80035f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80035f4:	f7ff ff8e 	bl	8003514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035f8:	4b05      	ldr	r3, [pc, #20]	; (8003610 <SysTick_Config+0x40>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035fe:	4b04      	ldr	r3, [pc, #16]	; (8003610 <SysTick_Config+0x40>)
 8003600:	2207      	movs	r2, #7
 8003602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	e000e010 	.word	0xe000e010

08003614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f7ff ff29 	bl	8003474 <__NVIC_SetPriorityGrouping>
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}

0800362a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800362a:	b580      	push	{r7, lr}
 800362c:	b086      	sub	sp, #24
 800362e:	af00      	add	r7, sp, #0
 8003630:	4603      	mov	r3, r0
 8003632:	60b9      	str	r1, [r7, #8]
 8003634:	607a      	str	r2, [r7, #4]
 8003636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800363c:	f7ff ff3e 	bl	80034bc <__NVIC_GetPriorityGrouping>
 8003640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	68b9      	ldr	r1, [r7, #8]
 8003646:	6978      	ldr	r0, [r7, #20]
 8003648:	f7ff ff8e 	bl	8003568 <NVIC_EncodePriority>
 800364c:	4602      	mov	r2, r0
 800364e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003652:	4611      	mov	r1, r2
 8003654:	4618      	mov	r0, r3
 8003656:	f7ff ff5d 	bl	8003514 <__NVIC_SetPriority>
}
 800365a:	bf00      	nop
 800365c:	3718      	adds	r7, #24
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}

08003662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003662:	b580      	push	{r7, lr}
 8003664:	b082      	sub	sp, #8
 8003666:	af00      	add	r7, sp, #0
 8003668:	4603      	mov	r3, r0
 800366a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800366c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ff31 	bl	80034d8 <__NVIC_EnableIRQ>
}
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f7ff ffa2 	bl	80035d0 <SysTick_Config>
 800368c:	4603      	mov	r3, r0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3708      	adds	r7, #8
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
	...

08003698 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036a0:	2300      	movs	r3, #0
 80036a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036a4:	f7ff feb6 	bl	8003414 <HAL_GetTick>
 80036a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d101      	bne.n	80036b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e099      	b.n	80037e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f022 0201 	bic.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036d4:	e00f      	b.n	80036f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036d6:	f7ff fe9d 	bl	8003414 <HAL_GetTick>
 80036da:	4602      	mov	r2, r0
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	1ad3      	subs	r3, r2, r3
 80036e0:	2b05      	cmp	r3, #5
 80036e2:	d908      	bls.n	80036f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2220      	movs	r2, #32
 80036e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2203      	movs	r2, #3
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e078      	b.n	80037e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1e8      	bne.n	80036d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	4b38      	ldr	r3, [pc, #224]	; (80037f0 <HAL_DMA_Init+0x158>)
 8003710:	4013      	ands	r3, r2
 8003712:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685a      	ldr	r2, [r3, #4]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003722:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691b      	ldr	r3, [r3, #16]
 8003728:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800372e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800373a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	2b04      	cmp	r3, #4
 800374e:	d107      	bne.n	8003760 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003758:	4313      	orrs	r3, r2
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	695b      	ldr	r3, [r3, #20]
 800376e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	f023 0307 	bic.w	r3, r3, #7
 8003776:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003786:	2b04      	cmp	r3, #4
 8003788:	d117      	bne.n	80037ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800378e:	697a      	ldr	r2, [r7, #20]
 8003790:	4313      	orrs	r3, r2
 8003792:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003798:	2b00      	cmp	r3, #0
 800379a:	d00e      	beq.n	80037ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 fb0d 	bl	8003dbc <DMA_CheckFifoParam>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d008      	beq.n	80037ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2240      	movs	r2, #64	; 0x40
 80037ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80037b6:	2301      	movs	r3, #1
 80037b8:	e016      	b.n	80037e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	697a      	ldr	r2, [r7, #20]
 80037c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f000 fac4 	bl	8003d50 <DMA_CalcBaseAndBitshift>
 80037c8:	4603      	mov	r3, r0
 80037ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d0:	223f      	movs	r2, #63	; 0x3f
 80037d2:	409a      	lsls	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80037e6:	2300      	movs	r3, #0
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3718      	adds	r7, #24
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	f010803f 	.word	0xf010803f

080037f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	60f8      	str	r0, [r7, #12]
 80037fc:	60b9      	str	r1, [r7, #8]
 80037fe:	607a      	str	r2, [r7, #4]
 8003800:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800380a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003812:	2b01      	cmp	r3, #1
 8003814:	d101      	bne.n	800381a <HAL_DMA_Start_IT+0x26>
 8003816:	2302      	movs	r3, #2
 8003818:	e040      	b.n	800389c <HAL_DMA_Start_IT+0xa8>
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003828:	b2db      	uxtb	r3, r3
 800382a:	2b01      	cmp	r3, #1
 800382c:	d12f      	bne.n	800388e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2202      	movs	r2, #2
 8003832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2200      	movs	r2, #0
 800383a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	68b9      	ldr	r1, [r7, #8]
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	f000 fa56 	bl	8003cf4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384c:	223f      	movs	r2, #63	; 0x3f
 800384e:	409a      	lsls	r2, r3
 8003850:	693b      	ldr	r3, [r7, #16]
 8003852:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0216 	orr.w	r2, r2, #22
 8003862:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	2b00      	cmp	r3, #0
 800386a:	d007      	beq.n	800387c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0208 	orr.w	r2, r2, #8
 800387a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f042 0201 	orr.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]
 800388c:	e005      	b.n	800389a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003896:	2302      	movs	r3, #2
 8003898:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800389a:	7dfb      	ldrb	r3, [r7, #23]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3718      	adds	r7, #24
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038b2:	f7ff fdaf 	bl	8003414 <HAL_GetTick>
 80038b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d008      	beq.n	80038d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2280      	movs	r2, #128	; 0x80
 80038c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e052      	b.n	800397c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 0216 	bic.w	r2, r2, #22
 80038e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	695a      	ldr	r2, [r3, #20]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d103      	bne.n	8003906 <HAL_DMA_Abort+0x62>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003902:	2b00      	cmp	r3, #0
 8003904:	d007      	beq.n	8003916 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f022 0208 	bic.w	r2, r2, #8
 8003914:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f022 0201 	bic.w	r2, r2, #1
 8003924:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003926:	e013      	b.n	8003950 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003928:	f7ff fd74 	bl	8003414 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	2b05      	cmp	r3, #5
 8003934:	d90c      	bls.n	8003950 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2220      	movs	r2, #32
 800393a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2203      	movs	r2, #3
 8003940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800394c:	2303      	movs	r3, #3
 800394e:	e015      	b.n	800397c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0301 	and.w	r3, r3, #1
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1e4      	bne.n	8003928 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003962:	223f      	movs	r2, #63	; 0x3f
 8003964:	409a      	lsls	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2201      	movs	r2, #1
 800396e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3710      	adds	r7, #16
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d004      	beq.n	80039a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2280      	movs	r2, #128	; 0x80
 800399c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e00c      	b.n	80039bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2205      	movs	r2, #5
 80039a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f022 0201 	bic.w	r2, r2, #1
 80039b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b086      	sub	sp, #24
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039d4:	4b8e      	ldr	r3, [pc, #568]	; (8003c10 <HAL_DMA_IRQHandler+0x248>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a8e      	ldr	r2, [pc, #568]	; (8003c14 <HAL_DMA_IRQHandler+0x24c>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	0a9b      	lsrs	r3, r3, #10
 80039e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f2:	2208      	movs	r2, #8
 80039f4:	409a      	lsls	r2, r3
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	4013      	ands	r3, r2
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d01a      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0304 	and.w	r3, r3, #4
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d013      	beq.n	8003a34 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f022 0204 	bic.w	r2, r2, #4
 8003a1a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a20:	2208      	movs	r2, #8
 8003a22:	409a      	lsls	r2, r3
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a2c:	f043 0201 	orr.w	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a38:	2201      	movs	r2, #1
 8003a3a:	409a      	lsls	r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	4013      	ands	r3, r2
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d012      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d00b      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a56:	2201      	movs	r2, #1
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a62:	f043 0202 	orr.w	r2, r3, #2
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a6e:	2204      	movs	r2, #4
 8003a70:	409a      	lsls	r2, r3
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4013      	ands	r3, r2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d012      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0302 	and.w	r3, r3, #2
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00b      	beq.n	8003aa0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a98:	f043 0204 	orr.w	r2, r3, #4
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa4:	2210      	movs	r2, #16
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d043      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f003 0308 	and.w	r3, r3, #8
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d03c      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac2:	2210      	movs	r2, #16
 8003ac4:	409a      	lsls	r2, r3
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d018      	beq.n	8003b0a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d108      	bne.n	8003af8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d024      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	6878      	ldr	r0, [r7, #4]
 8003af4:	4798      	blx	r3
 8003af6:	e01f      	b.n	8003b38 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d01b      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	4798      	blx	r3
 8003b08:	e016      	b.n	8003b38 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d107      	bne.n	8003b28 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0208 	bic.w	r2, r2, #8
 8003b26:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d003      	beq.n	8003b38 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3c:	2220      	movs	r2, #32
 8003b3e:	409a      	lsls	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	4013      	ands	r3, r2
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	f000 808f 	beq.w	8003c68 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0310 	and.w	r3, r3, #16
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f000 8087 	beq.w	8003c68 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5e:	2220      	movs	r2, #32
 8003b60:	409a      	lsls	r2, r3
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b05      	cmp	r3, #5
 8003b70:	d136      	bne.n	8003be0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 0216 	bic.w	r2, r2, #22
 8003b80:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	695a      	ldr	r2, [r3, #20]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b90:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d103      	bne.n	8003ba2 <HAL_DMA_IRQHandler+0x1da>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d007      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 0208 	bic.w	r2, r2, #8
 8003bb0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb6:	223f      	movs	r2, #63	; 0x3f
 8003bb8:	409a      	lsls	r2, r3
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2201      	movs	r2, #1
 8003bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d07e      	beq.n	8003cd4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	4798      	blx	r3
        }
        return;
 8003bde:	e079      	b.n	8003cd4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d01d      	beq.n	8003c2a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10d      	bne.n	8003c18 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d031      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	4798      	blx	r3
 8003c0c:	e02c      	b.n	8003c68 <HAL_DMA_IRQHandler+0x2a0>
 8003c0e:	bf00      	nop
 8003c10:	20000024 	.word	0x20000024
 8003c14:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d023      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
 8003c28:	e01e      	b.n	8003c68 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10f      	bne.n	8003c58 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0210 	bic.w	r2, r2, #16
 8003c46:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d003      	beq.n	8003c68 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d032      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d022      	beq.n	8003cc2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2205      	movs	r2, #5
 8003c80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0201 	bic.w	r2, r2, #1
 8003c92:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	3301      	adds	r3, #1
 8003c98:	60bb      	str	r3, [r7, #8]
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	d307      	bcc.n	8003cb0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f2      	bne.n	8003c94 <HAL_DMA_IRQHandler+0x2cc>
 8003cae:	e000      	b.n	8003cb2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003cb0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d005      	beq.n	8003cd6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	4798      	blx	r3
 8003cd2:	e000      	b.n	8003cd6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cd4:	bf00      	nop
    }
  }
}
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}

08003cdc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b085      	sub	sp, #20
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	60f8      	str	r0, [r7, #12]
 8003cfc:	60b9      	str	r1, [r7, #8]
 8003cfe:	607a      	str	r2, [r7, #4]
 8003d00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681a      	ldr	r2, [r3, #0]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b40      	cmp	r3, #64	; 0x40
 8003d20:	d108      	bne.n	8003d34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	68ba      	ldr	r2, [r7, #8]
 8003d30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d32:	e007      	b.n	8003d44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	68ba      	ldr	r2, [r7, #8]
 8003d3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	60da      	str	r2, [r3, #12]
}
 8003d44:	bf00      	nop
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b085      	sub	sp, #20
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	3b10      	subs	r3, #16
 8003d60:	4a14      	ldr	r2, [pc, #80]	; (8003db4 <DMA_CalcBaseAndBitshift+0x64>)
 8003d62:	fba2 2303 	umull	r2, r3, r2, r3
 8003d66:	091b      	lsrs	r3, r3, #4
 8003d68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d6a:	4a13      	ldr	r2, [pc, #76]	; (8003db8 <DMA_CalcBaseAndBitshift+0x68>)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	4413      	add	r3, r2
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	2b03      	cmp	r3, #3
 8003d7c:	d909      	bls.n	8003d92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d86:	f023 0303 	bic.w	r3, r3, #3
 8003d8a:	1d1a      	adds	r2, r3, #4
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	659a      	str	r2, [r3, #88]	; 0x58
 8003d90:	e007      	b.n	8003da2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003d9a:	f023 0303 	bic.w	r3, r3, #3
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	aaaaaaab 	.word	0xaaaaaaab
 8003db8:	08015808 	.word	0x08015808

08003dbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b085      	sub	sp, #20
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d11f      	bne.n	8003e16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b03      	cmp	r3, #3
 8003dda:	d856      	bhi.n	8003e8a <DMA_CheckFifoParam+0xce>
 8003ddc:	a201      	add	r2, pc, #4	; (adr r2, 8003de4 <DMA_CheckFifoParam+0x28>)
 8003dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de2:	bf00      	nop
 8003de4:	08003df5 	.word	0x08003df5
 8003de8:	08003e07 	.word	0x08003e07
 8003dec:	08003df5 	.word	0x08003df5
 8003df0:	08003e8b 	.word	0x08003e8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d046      	beq.n	8003e8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e04:	e043      	b.n	8003e8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e0e:	d140      	bne.n	8003e92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e14:	e03d      	b.n	8003e92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e1e:	d121      	bne.n	8003e64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d837      	bhi.n	8003e96 <DMA_CheckFifoParam+0xda>
 8003e26:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <DMA_CheckFifoParam+0x70>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003e3d 	.word	0x08003e3d
 8003e30:	08003e43 	.word	0x08003e43
 8003e34:	08003e3d 	.word	0x08003e3d
 8003e38:	08003e55 	.word	0x08003e55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e40:	e030      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d025      	beq.n	8003e9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e52:	e022      	b.n	8003e9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e5c:	d11f      	bne.n	8003e9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e62:	e01c      	b.n	8003e9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d903      	bls.n	8003e72 <DMA_CheckFifoParam+0xb6>
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b03      	cmp	r3, #3
 8003e6e:	d003      	beq.n	8003e78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e70:	e018      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	73fb      	strb	r3, [r7, #15]
      break;
 8003e76:	e015      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d00e      	beq.n	8003ea2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	73fb      	strb	r3, [r7, #15]
      break;
 8003e88:	e00b      	b.n	8003ea2 <DMA_CheckFifoParam+0xe6>
      break;
 8003e8a:	bf00      	nop
 8003e8c:	e00a      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8003e8e:	bf00      	nop
 8003e90:	e008      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8003e92:	bf00      	nop
 8003e94:	e006      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8003e96:	bf00      	nop
 8003e98:	e004      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8003e9a:	bf00      	nop
 8003e9c:	e002      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e9e:	bf00      	nop
 8003ea0:	e000      	b.n	8003ea4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ea2:	bf00      	nop
    }
  } 
  
  return status; 
 8003ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3714      	adds	r7, #20
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop

08003eb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b089      	sub	sp, #36	; 0x24
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
 8003ebc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eca:	2300      	movs	r3, #0
 8003ecc:	61fb      	str	r3, [r7, #28]
 8003ece:	e16b      	b.n	80041a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ed0:	2201      	movs	r2, #1
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	697a      	ldr	r2, [r7, #20]
 8003ee0:	4013      	ands	r3, r2
 8003ee2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	f040 815a 	bne.w	80041a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d005      	beq.n	8003f06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	685b      	ldr	r3, [r3, #4]
 8003efe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d130      	bne.n	8003f68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f0c:	69fb      	ldr	r3, [r7, #28]
 8003f0e:	005b      	lsls	r3, r3, #1
 8003f10:	2203      	movs	r2, #3
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43db      	mvns	r3, r3
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4013      	ands	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68da      	ldr	r2, [r3, #12]
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	005b      	lsls	r3, r3, #1
 8003f26:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	43db      	mvns	r3, r3
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4013      	ands	r3, r2
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	091b      	lsrs	r3, r3, #4
 8003f52:	f003 0201 	and.w	r2, r3, #1
 8003f56:	69fb      	ldr	r3, [r7, #28]
 8003f58:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5c:	69ba      	ldr	r2, [r7, #24]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	2b03      	cmp	r3, #3
 8003f72:	d017      	beq.n	8003fa4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	2203      	movs	r2, #3
 8003f80:	fa02 f303 	lsl.w	r3, r2, r3
 8003f84:	43db      	mvns	r3, r3
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4013      	ands	r3, r2
 8003f8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	69fb      	ldr	r3, [r7, #28]
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 0303 	and.w	r3, r3, #3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d123      	bne.n	8003ff8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	08da      	lsrs	r2, r3, #3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	3208      	adds	r2, #8
 8003fb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fbe:	69fb      	ldr	r3, [r7, #28]
 8003fc0:	f003 0307 	and.w	r3, r3, #7
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	220f      	movs	r2, #15
 8003fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	691a      	ldr	r2, [r3, #16]
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	f003 0307 	and.w	r3, r3, #7
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	08da      	lsrs	r2, r3, #3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	3208      	adds	r2, #8
 8003ff2:	69b9      	ldr	r1, [r7, #24]
 8003ff4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	005b      	lsls	r3, r3, #1
 8004002:	2203      	movs	r2, #3
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	43db      	mvns	r3, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4013      	ands	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	f003 0203 	and.w	r2, r3, #3
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4313      	orrs	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	69ba      	ldr	r2, [r7, #24]
 800402a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 80b4 	beq.w	80041a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	60fb      	str	r3, [r7, #12]
 800403e:	4b60      	ldr	r3, [pc, #384]	; (80041c0 <HAL_GPIO_Init+0x30c>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	4a5f      	ldr	r2, [pc, #380]	; (80041c0 <HAL_GPIO_Init+0x30c>)
 8004044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004048:	6453      	str	r3, [r2, #68]	; 0x44
 800404a:	4b5d      	ldr	r3, [pc, #372]	; (80041c0 <HAL_GPIO_Init+0x30c>)
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004052:	60fb      	str	r3, [r7, #12]
 8004054:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004056:	4a5b      	ldr	r2, [pc, #364]	; (80041c4 <HAL_GPIO_Init+0x310>)
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	089b      	lsrs	r3, r3, #2
 800405c:	3302      	adds	r3, #2
 800405e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004062:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	f003 0303 	and.w	r3, r3, #3
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	220f      	movs	r2, #15
 800406e:	fa02 f303 	lsl.w	r3, r2, r3
 8004072:	43db      	mvns	r3, r3
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	4013      	ands	r3, r2
 8004078:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a52      	ldr	r2, [pc, #328]	; (80041c8 <HAL_GPIO_Init+0x314>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d02b      	beq.n	80040da <HAL_GPIO_Init+0x226>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a51      	ldr	r2, [pc, #324]	; (80041cc <HAL_GPIO_Init+0x318>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d025      	beq.n	80040d6 <HAL_GPIO_Init+0x222>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a50      	ldr	r2, [pc, #320]	; (80041d0 <HAL_GPIO_Init+0x31c>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d01f      	beq.n	80040d2 <HAL_GPIO_Init+0x21e>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a4f      	ldr	r2, [pc, #316]	; (80041d4 <HAL_GPIO_Init+0x320>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d019      	beq.n	80040ce <HAL_GPIO_Init+0x21a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a4e      	ldr	r2, [pc, #312]	; (80041d8 <HAL_GPIO_Init+0x324>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d013      	beq.n	80040ca <HAL_GPIO_Init+0x216>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a4d      	ldr	r2, [pc, #308]	; (80041dc <HAL_GPIO_Init+0x328>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00d      	beq.n	80040c6 <HAL_GPIO_Init+0x212>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a4c      	ldr	r2, [pc, #304]	; (80041e0 <HAL_GPIO_Init+0x32c>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d007      	beq.n	80040c2 <HAL_GPIO_Init+0x20e>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a4b      	ldr	r2, [pc, #300]	; (80041e4 <HAL_GPIO_Init+0x330>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d101      	bne.n	80040be <HAL_GPIO_Init+0x20a>
 80040ba:	2307      	movs	r3, #7
 80040bc:	e00e      	b.n	80040dc <HAL_GPIO_Init+0x228>
 80040be:	2308      	movs	r3, #8
 80040c0:	e00c      	b.n	80040dc <HAL_GPIO_Init+0x228>
 80040c2:	2306      	movs	r3, #6
 80040c4:	e00a      	b.n	80040dc <HAL_GPIO_Init+0x228>
 80040c6:	2305      	movs	r3, #5
 80040c8:	e008      	b.n	80040dc <HAL_GPIO_Init+0x228>
 80040ca:	2304      	movs	r3, #4
 80040cc:	e006      	b.n	80040dc <HAL_GPIO_Init+0x228>
 80040ce:	2303      	movs	r3, #3
 80040d0:	e004      	b.n	80040dc <HAL_GPIO_Init+0x228>
 80040d2:	2302      	movs	r3, #2
 80040d4:	e002      	b.n	80040dc <HAL_GPIO_Init+0x228>
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <HAL_GPIO_Init+0x228>
 80040da:	2300      	movs	r3, #0
 80040dc:	69fa      	ldr	r2, [r7, #28]
 80040de:	f002 0203 	and.w	r2, r2, #3
 80040e2:	0092      	lsls	r2, r2, #2
 80040e4:	4093      	lsls	r3, r2
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4313      	orrs	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040ec:	4935      	ldr	r1, [pc, #212]	; (80041c4 <HAL_GPIO_Init+0x310>)
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	089b      	lsrs	r3, r3, #2
 80040f2:	3302      	adds	r3, #2
 80040f4:	69ba      	ldr	r2, [r7, #24]
 80040f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040fa:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <HAL_GPIO_Init+0x334>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	43db      	mvns	r3, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	4013      	ands	r3, r2
 8004108:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	4313      	orrs	r3, r2
 800411c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800411e:	4a32      	ldr	r2, [pc, #200]	; (80041e8 <HAL_GPIO_Init+0x334>)
 8004120:	69bb      	ldr	r3, [r7, #24]
 8004122:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004124:	4b30      	ldr	r3, [pc, #192]	; (80041e8 <HAL_GPIO_Init+0x334>)
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	43db      	mvns	r3, r3
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	4013      	ands	r3, r2
 8004132:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800413c:	2b00      	cmp	r3, #0
 800413e:	d003      	beq.n	8004148 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004148:	4a27      	ldr	r2, [pc, #156]	; (80041e8 <HAL_GPIO_Init+0x334>)
 800414a:	69bb      	ldr	r3, [r7, #24]
 800414c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800414e:	4b26      	ldr	r3, [pc, #152]	; (80041e8 <HAL_GPIO_Init+0x334>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	43db      	mvns	r3, r3
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	4013      	ands	r3, r2
 800415c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	4313      	orrs	r3, r2
 8004170:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004172:	4a1d      	ldr	r2, [pc, #116]	; (80041e8 <HAL_GPIO_Init+0x334>)
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004178:	4b1b      	ldr	r3, [pc, #108]	; (80041e8 <HAL_GPIO_Init+0x334>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	43db      	mvns	r3, r3
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	4013      	ands	r3, r2
 8004186:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004194:	69ba      	ldr	r2, [r7, #24]
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	4313      	orrs	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800419c:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <HAL_GPIO_Init+0x334>)
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	3301      	adds	r3, #1
 80041a6:	61fb      	str	r3, [r7, #28]
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	2b0f      	cmp	r3, #15
 80041ac:	f67f ae90 	bls.w	8003ed0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041b0:	bf00      	nop
 80041b2:	bf00      	nop
 80041b4:	3724      	adds	r7, #36	; 0x24
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	40023800 	.word	0x40023800
 80041c4:	40013800 	.word	0x40013800
 80041c8:	40020000 	.word	0x40020000
 80041cc:	40020400 	.word	0x40020400
 80041d0:	40020800 	.word	0x40020800
 80041d4:	40020c00 	.word	0x40020c00
 80041d8:	40021000 	.word	0x40021000
 80041dc:	40021400 	.word	0x40021400
 80041e0:	40021800 	.word	0x40021800
 80041e4:	40021c00 	.word	0x40021c00
 80041e8:	40013c00 	.word	0x40013c00

080041ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	887b      	ldrh	r3, [r7, #2]
 80041fe:	4013      	ands	r3, r2
 8004200:	2b00      	cmp	r3, #0
 8004202:	d002      	beq.n	800420a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004204:	2301      	movs	r3, #1
 8004206:	73fb      	strb	r3, [r7, #15]
 8004208:	e001      	b.n	800420e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800420a:	2300      	movs	r3, #0
 800420c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800420e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3714      	adds	r7, #20
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	807b      	strh	r3, [r7, #2]
 8004228:	4613      	mov	r3, r2
 800422a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800422c:	787b      	ldrb	r3, [r7, #1]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d003      	beq.n	800423a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004232:	887a      	ldrh	r2, [r7, #2]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004238:	e003      	b.n	8004242 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800423a:	887b      	ldrh	r3, [r7, #2]
 800423c:	041a      	lsls	r2, r3, #16
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	619a      	str	r2, [r3, #24]
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr
	...

08004250 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e12b      	b.n	80044ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fe fd40 	bl	8002cfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2224      	movs	r2, #36	; 0x24
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0201 	bic.w	r2, r2, #1
 8004292:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80042b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042b4:	f002 fe0e 	bl	8006ed4 <HAL_RCC_GetPCLK1Freq>
 80042b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	4a81      	ldr	r2, [pc, #516]	; (80044c4 <HAL_I2C_Init+0x274>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d807      	bhi.n	80042d4 <HAL_I2C_Init+0x84>
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	4a80      	ldr	r2, [pc, #512]	; (80044c8 <HAL_I2C_Init+0x278>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	bf94      	ite	ls
 80042cc:	2301      	movls	r3, #1
 80042ce:	2300      	movhi	r3, #0
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	e006      	b.n	80042e2 <HAL_I2C_Init+0x92>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	4a7d      	ldr	r2, [pc, #500]	; (80044cc <HAL_I2C_Init+0x27c>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	bf94      	ite	ls
 80042dc:	2301      	movls	r3, #1
 80042de:	2300      	movhi	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e0e7      	b.n	80044ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	4a78      	ldr	r2, [pc, #480]	; (80044d0 <HAL_I2C_Init+0x280>)
 80042ee:	fba2 2303 	umull	r2, r3, r2, r3
 80042f2:	0c9b      	lsrs	r3, r3, #18
 80042f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	68ba      	ldr	r2, [r7, #8]
 8004306:	430a      	orrs	r2, r1
 8004308:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	4a6a      	ldr	r2, [pc, #424]	; (80044c4 <HAL_I2C_Init+0x274>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d802      	bhi.n	8004324 <HAL_I2C_Init+0xd4>
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	3301      	adds	r3, #1
 8004322:	e009      	b.n	8004338 <HAL_I2C_Init+0xe8>
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800432a:	fb02 f303 	mul.w	r3, r2, r3
 800432e:	4a69      	ldr	r2, [pc, #420]	; (80044d4 <HAL_I2C_Init+0x284>)
 8004330:	fba2 2303 	umull	r2, r3, r2, r3
 8004334:	099b      	lsrs	r3, r3, #6
 8004336:	3301      	adds	r3, #1
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	6812      	ldr	r2, [r2, #0]
 800433c:	430b      	orrs	r3, r1
 800433e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69db      	ldr	r3, [r3, #28]
 8004346:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800434a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	495c      	ldr	r1, [pc, #368]	; (80044c4 <HAL_I2C_Init+0x274>)
 8004354:	428b      	cmp	r3, r1
 8004356:	d819      	bhi.n	800438c <HAL_I2C_Init+0x13c>
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	1e59      	subs	r1, r3, #1
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	005b      	lsls	r3, r3, #1
 8004362:	fbb1 f3f3 	udiv	r3, r1, r3
 8004366:	1c59      	adds	r1, r3, #1
 8004368:	f640 73fc 	movw	r3, #4092	; 0xffc
 800436c:	400b      	ands	r3, r1
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00a      	beq.n	8004388 <HAL_I2C_Init+0x138>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1e59      	subs	r1, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004380:	3301      	adds	r3, #1
 8004382:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004386:	e051      	b.n	800442c <HAL_I2C_Init+0x1dc>
 8004388:	2304      	movs	r3, #4
 800438a:	e04f      	b.n	800442c <HAL_I2C_Init+0x1dc>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d111      	bne.n	80043b8 <HAL_I2C_Init+0x168>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	1e58      	subs	r0, r3, #1
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6859      	ldr	r1, [r3, #4]
 800439c:	460b      	mov	r3, r1
 800439e:	005b      	lsls	r3, r3, #1
 80043a0:	440b      	add	r3, r1
 80043a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043a6:	3301      	adds	r3, #1
 80043a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf0c      	ite	eq
 80043b0:	2301      	moveq	r3, #1
 80043b2:	2300      	movne	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	e012      	b.n	80043de <HAL_I2C_Init+0x18e>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	1e58      	subs	r0, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6859      	ldr	r1, [r3, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	440b      	add	r3, r1
 80043c6:	0099      	lsls	r1, r3, #2
 80043c8:	440b      	add	r3, r1
 80043ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ce:	3301      	adds	r3, #1
 80043d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	bf0c      	ite	eq
 80043d8:	2301      	moveq	r3, #1
 80043da:	2300      	movne	r3, #0
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d001      	beq.n	80043e6 <HAL_I2C_Init+0x196>
 80043e2:	2301      	movs	r3, #1
 80043e4:	e022      	b.n	800442c <HAL_I2C_Init+0x1dc>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10e      	bne.n	800440c <HAL_I2C_Init+0x1bc>
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	1e58      	subs	r0, r3, #1
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6859      	ldr	r1, [r3, #4]
 80043f6:	460b      	mov	r3, r1
 80043f8:	005b      	lsls	r3, r3, #1
 80043fa:	440b      	add	r3, r1
 80043fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8004400:	3301      	adds	r3, #1
 8004402:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004406:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800440a:	e00f      	b.n	800442c <HAL_I2C_Init+0x1dc>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1e58      	subs	r0, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	0099      	lsls	r1, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004422:	3301      	adds	r3, #1
 8004424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004428:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800442c:	6879      	ldr	r1, [r7, #4]
 800442e:	6809      	ldr	r1, [r1, #0]
 8004430:	4313      	orrs	r3, r2
 8004432:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	69da      	ldr	r2, [r3, #28]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	431a      	orrs	r2, r3
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	430a      	orrs	r2, r1
 800444e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800445a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	6911      	ldr	r1, [r2, #16]
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	68d2      	ldr	r2, [r2, #12]
 8004466:	4311      	orrs	r1, r2
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6812      	ldr	r2, [r2, #0]
 800446c:	430b      	orrs	r3, r1
 800446e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68db      	ldr	r3, [r3, #12]
 8004476:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	695a      	ldr	r2, [r3, #20]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	431a      	orrs	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0201 	orr.w	r2, r2, #1
 800449a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2200      	movs	r2, #0
 80044a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2220      	movs	r2, #32
 80044a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	2200      	movs	r2, #0
 80044ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2200      	movs	r2, #0
 80044b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	000186a0 	.word	0x000186a0
 80044c8:	001e847f 	.word	0x001e847f
 80044cc:	003d08ff 	.word	0x003d08ff
 80044d0:	431bde83 	.word	0x431bde83
 80044d4:	10624dd3 	.word	0x10624dd3

080044d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b088      	sub	sp, #32
 80044dc:	af02      	add	r7, sp, #8
 80044de:	60f8      	str	r0, [r7, #12]
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	461a      	mov	r2, r3
 80044e4:	460b      	mov	r3, r1
 80044e6:	817b      	strh	r3, [r7, #10]
 80044e8:	4613      	mov	r3, r2
 80044ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044ec:	f7fe ff92 	bl	8003414 <HAL_GetTick>
 80044f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b20      	cmp	r3, #32
 80044fc:	f040 80e0 	bne.w	80046c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	2319      	movs	r3, #25
 8004506:	2201      	movs	r2, #1
 8004508:	4970      	ldr	r1, [pc, #448]	; (80046cc <HAL_I2C_Master_Transmit+0x1f4>)
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fc58 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004516:	2302      	movs	r3, #2
 8004518:	e0d3      	b.n	80046c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_I2C_Master_Transmit+0x50>
 8004524:	2302      	movs	r3, #2
 8004526:	e0cc      	b.n	80046c2 <HAL_I2C_Master_Transmit+0x1ea>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b01      	cmp	r3, #1
 800453c:	d007      	beq.n	800454e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f042 0201 	orr.w	r2, r2, #1
 800454c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800455c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2221      	movs	r2, #33	; 0x21
 8004562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2210      	movs	r2, #16
 800456a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	893a      	ldrh	r2, [r7, #8]
 800457e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004584:	b29a      	uxth	r2, r3
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4a50      	ldr	r2, [pc, #320]	; (80046d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800458e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004590:	8979      	ldrh	r1, [r7, #10]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	6a3a      	ldr	r2, [r7, #32]
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f000 fac2 	bl	8004b20 <I2C_MasterRequestWrite>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d001      	beq.n	80045a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80045a2:	2301      	movs	r3, #1
 80045a4:	e08d      	b.n	80046c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045a6:	2300      	movs	r3, #0
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	613b      	str	r3, [r7, #16]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	699b      	ldr	r3, [r3, #24]
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80045bc:	e066      	b.n	800468c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045be:	697a      	ldr	r2, [r7, #20]
 80045c0:	6a39      	ldr	r1, [r7, #32]
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 fcd2 	bl	8004f6c <I2C_WaitOnTXEFlagUntilTimeout>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00d      	beq.n	80045ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	2b04      	cmp	r3, #4
 80045d4:	d107      	bne.n	80045e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e06b      	b.n	80046c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ee:	781a      	ldrb	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	1c5a      	adds	r2, r3, #1
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004604:	b29b      	uxth	r3, r3
 8004606:	3b01      	subs	r3, #1
 8004608:	b29a      	uxth	r2, r3
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	695b      	ldr	r3, [r3, #20]
 8004620:	f003 0304 	and.w	r3, r3, #4
 8004624:	2b04      	cmp	r3, #4
 8004626:	d11b      	bne.n	8004660 <HAL_I2C_Master_Transmit+0x188>
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462c:	2b00      	cmp	r3, #0
 800462e:	d017      	beq.n	8004660 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	781a      	ldrb	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800464a:	b29b      	uxth	r3, r3
 800464c:	3b01      	subs	r3, #1
 800464e:	b29a      	uxth	r2, r3
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004658:	3b01      	subs	r3, #1
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	6a39      	ldr	r1, [r7, #32]
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 fcc2 	bl	8004fee <I2C_WaitOnBTFFlagUntilTimeout>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d00d      	beq.n	800468c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004674:	2b04      	cmp	r3, #4
 8004676:	d107      	bne.n	8004688 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	681a      	ldr	r2, [r3, #0]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004686:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004688:	2301      	movs	r3, #1
 800468a:	e01a      	b.n	80046c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004690:	2b00      	cmp	r3, #0
 8004692:	d194      	bne.n	80045be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	681a      	ldr	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	2220      	movs	r2, #32
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	e000      	b.n	80046c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80046c0:	2302      	movs	r3, #2
  }
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3718      	adds	r7, #24
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	00100002 	.word	0x00100002
 80046d0:	ffff0000 	.word	0xffff0000

080046d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b08c      	sub	sp, #48	; 0x30
 80046d8:	af02      	add	r7, sp, #8
 80046da:	60f8      	str	r0, [r7, #12]
 80046dc:	607a      	str	r2, [r7, #4]
 80046de:	461a      	mov	r2, r3
 80046e0:	460b      	mov	r3, r1
 80046e2:	817b      	strh	r3, [r7, #10]
 80046e4:	4613      	mov	r3, r2
 80046e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046e8:	f7fe fe94 	bl	8003414 <HAL_GetTick>
 80046ec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b20      	cmp	r3, #32
 80046f8:	f040 820b 	bne.w	8004b12 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	9300      	str	r3, [sp, #0]
 8004700:	2319      	movs	r3, #25
 8004702:	2201      	movs	r2, #1
 8004704:	497c      	ldr	r1, [pc, #496]	; (80048f8 <HAL_I2C_Master_Receive+0x224>)
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f000 fb5a 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d001      	beq.n	8004716 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004712:	2302      	movs	r3, #2
 8004714:	e1fe      	b.n	8004b14 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800471c:	2b01      	cmp	r3, #1
 800471e:	d101      	bne.n	8004724 <HAL_I2C_Master_Receive+0x50>
 8004720:	2302      	movs	r3, #2
 8004722:	e1f7      	b.n	8004b14 <HAL_I2C_Master_Receive+0x440>
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b01      	cmp	r3, #1
 8004738:	d007      	beq.n	800474a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	681a      	ldr	r2, [r3, #0]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f042 0201 	orr.w	r2, r2, #1
 8004748:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	681a      	ldr	r2, [r3, #0]
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004758:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2222      	movs	r2, #34	; 0x22
 800475e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2210      	movs	r2, #16
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2200      	movs	r2, #0
 800476e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	893a      	ldrh	r2, [r7, #8]
 800477a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004780:	b29a      	uxth	r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	4a5c      	ldr	r2, [pc, #368]	; (80048fc <HAL_I2C_Master_Receive+0x228>)
 800478a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800478c:	8979      	ldrh	r1, [r7, #10]
 800478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004790:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004792:	68f8      	ldr	r0, [r7, #12]
 8004794:	f000 fa46 	bl	8004c24 <I2C_MasterRequestRead>
 8004798:	4603      	mov	r3, r0
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e1b8      	b.n	8004b14 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d113      	bne.n	80047d2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047aa:	2300      	movs	r3, #0
 80047ac:	623b      	str	r3, [r7, #32]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	623b      	str	r3, [r7, #32]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	623b      	str	r3, [r7, #32]
 80047be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	e18c      	b.n	8004aec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d11b      	bne.n	8004812 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047ea:	2300      	movs	r3, #0
 80047ec:	61fb      	str	r3, [r7, #28]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	695b      	ldr	r3, [r3, #20]
 80047f4:	61fb      	str	r3, [r7, #28]
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	699b      	ldr	r3, [r3, #24]
 80047fc:	61fb      	str	r3, [r7, #28]
 80047fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681a      	ldr	r2, [r3, #0]
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800480e:	601a      	str	r2, [r3, #0]
 8004810:	e16c      	b.n	8004aec <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004816:	2b02      	cmp	r3, #2
 8004818:	d11b      	bne.n	8004852 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004828:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004838:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800483a:	2300      	movs	r3, #0
 800483c:	61bb      	str	r3, [r7, #24]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695b      	ldr	r3, [r3, #20]
 8004844:	61bb      	str	r3, [r7, #24]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	61bb      	str	r3, [r7, #24]
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	e14c      	b.n	8004aec <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004860:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004878:	e138      	b.n	8004aec <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800487e:	2b03      	cmp	r3, #3
 8004880:	f200 80f1 	bhi.w	8004a66 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004888:	2b01      	cmp	r3, #1
 800488a:	d123      	bne.n	80048d4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800488c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800488e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004890:	68f8      	ldr	r0, [r7, #12]
 8004892:	f000 fbed 	bl	8005070 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d001      	beq.n	80048a0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e139      	b.n	8004b14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	691a      	ldr	r2, [r3, #16]
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048aa:	b2d2      	uxtb	r2, r2
 80048ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	1c5a      	adds	r2, r3, #1
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048bc:	3b01      	subs	r3, #1
 80048be:	b29a      	uxth	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c8:	b29b      	uxth	r3, r3
 80048ca:	3b01      	subs	r3, #1
 80048cc:	b29a      	uxth	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80048d2:	e10b      	b.n	8004aec <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d14e      	bne.n	800497a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048de:	9300      	str	r3, [sp, #0]
 80048e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e2:	2200      	movs	r2, #0
 80048e4:	4906      	ldr	r1, [pc, #24]	; (8004900 <HAL_I2C_Master_Receive+0x22c>)
 80048e6:	68f8      	ldr	r0, [r7, #12]
 80048e8:	f000 fa6a 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 80048ec:	4603      	mov	r3, r0
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d008      	beq.n	8004904 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e10e      	b.n	8004b14 <HAL_I2C_Master_Receive+0x440>
 80048f6:	bf00      	nop
 80048f8:	00100002 	.word	0x00100002
 80048fc:	ffff0000 	.word	0xffff0000
 8004900:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681a      	ldr	r2, [r3, #0]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004912:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	691a      	ldr	r2, [r3, #16]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491e:	b2d2      	uxtb	r2, r2
 8004920:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	1c5a      	adds	r2, r3, #1
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004930:	3b01      	subs	r3, #1
 8004932:	b29a      	uxth	r2, r3
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493c:	b29b      	uxth	r3, r3
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004950:	b2d2      	uxtb	r2, r2
 8004952:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800496e:	b29b      	uxth	r3, r3
 8004970:	3b01      	subs	r3, #1
 8004972:	b29a      	uxth	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004978:	e0b8      	b.n	8004aec <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800497a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004980:	2200      	movs	r2, #0
 8004982:	4966      	ldr	r1, [pc, #408]	; (8004b1c <HAL_I2C_Master_Receive+0x448>)
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 fa1b 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e0bf      	b.n	8004b14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691a      	ldr	r2, [r3, #16]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b6:	1c5a      	adds	r2, r3, #1
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049c0:	3b01      	subs	r3, #1
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049cc:	b29b      	uxth	r3, r3
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d8:	9300      	str	r3, [sp, #0]
 80049da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049dc:	2200      	movs	r2, #0
 80049de:	494f      	ldr	r1, [pc, #316]	; (8004b1c <HAL_I2C_Master_Receive+0x448>)
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f9ed 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e091      	b.n	8004b14 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	691a      	ldr	r2, [r3, #16]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	b2d2      	uxtb	r2, r2
 8004a0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1c:	3b01      	subs	r3, #1
 8004a1e:	b29a      	uxth	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	691a      	ldr	r2, [r3, #16]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3c:	b2d2      	uxtb	r2, r2
 8004a3e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	1c5a      	adds	r2, r3, #1
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a4e:	3b01      	subs	r3, #1
 8004a50:	b29a      	uxth	r2, r3
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b29a      	uxth	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004a64:	e042      	b.n	8004aec <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a68:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a6a:	68f8      	ldr	r0, [r7, #12]
 8004a6c:	f000 fb00 	bl	8005070 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004a76:	2301      	movs	r3, #1
 8004a78:	e04c      	b.n	8004b14 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	691a      	ldr	r2, [r3, #16]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a84:	b2d2      	uxtb	r2, r2
 8004a86:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	1c5a      	adds	r2, r3, #1
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	3b01      	subs	r3, #1
 8004aa6:	b29a      	uxth	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f003 0304 	and.w	r3, r3, #4
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d118      	bne.n	8004aec <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	691a      	ldr	r2, [r3, #16]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	b2d2      	uxtb	r2, r2
 8004ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004acc:	1c5a      	adds	r2, r3, #1
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	b29a      	uxth	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	f47f aec2 	bne.w	800487a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2220      	movs	r2, #32
 8004afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	e000      	b.n	8004b14 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004b12:	2302      	movs	r3, #2
  }
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3728      	adds	r7, #40	; 0x28
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	00010004 	.word	0x00010004

08004b20 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b088      	sub	sp, #32
 8004b24:	af02      	add	r7, sp, #8
 8004b26:	60f8      	str	r0, [r7, #12]
 8004b28:	607a      	str	r2, [r7, #4]
 8004b2a:	603b      	str	r3, [r7, #0]
 8004b2c:	460b      	mov	r3, r1
 8004b2e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d006      	beq.n	8004b4a <I2C_MasterRequestWrite+0x2a>
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d003      	beq.n	8004b4a <I2C_MasterRequestWrite+0x2a>
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b48:	d108      	bne.n	8004b5c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b58:	601a      	str	r2, [r3, #0]
 8004b5a:	e00b      	b.n	8004b74 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b60:	2b12      	cmp	r3, #18
 8004b62:	d107      	bne.n	8004b74 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004b72:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	9300      	str	r3, [sp, #0]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f91d 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 8004b86:	4603      	mov	r3, r0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00d      	beq.n	8004ba8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b9a:	d103      	bne.n	8004ba4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004ba2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e035      	b.n	8004c14 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bb0:	d108      	bne.n	8004bc4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004bb2:	897b      	ldrh	r3, [r7, #10]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	461a      	mov	r2, r3
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004bc0:	611a      	str	r2, [r3, #16]
 8004bc2:	e01b      	b.n	8004bfc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004bc4:	897b      	ldrh	r3, [r7, #10]
 8004bc6:	11db      	asrs	r3, r3, #7
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	f003 0306 	and.w	r3, r3, #6
 8004bce:	b2db      	uxtb	r3, r3
 8004bd0:	f063 030f 	orn	r3, r3, #15
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	490e      	ldr	r1, [pc, #56]	; (8004c1c <I2C_MasterRequestWrite+0xfc>)
 8004be2:	68f8      	ldr	r0, [r7, #12]
 8004be4:	f000 f943 	bl	8004e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d001      	beq.n	8004bf2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e010      	b.n	8004c14 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004bf2:	897b      	ldrh	r3, [r7, #10]
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	4907      	ldr	r1, [pc, #28]	; (8004c20 <I2C_MasterRequestWrite+0x100>)
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 f933 	bl	8004e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e000      	b.n	8004c14 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3718      	adds	r7, #24
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}
 8004c1c:	00010008 	.word	0x00010008
 8004c20:	00010002 	.word	0x00010002

08004c24 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b088      	sub	sp, #32
 8004c28:	af02      	add	r7, sp, #8
 8004c2a:	60f8      	str	r0, [r7, #12]
 8004c2c:	607a      	str	r2, [r7, #4]
 8004c2e:	603b      	str	r3, [r7, #0]
 8004c30:	460b      	mov	r3, r1
 8004c32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	681a      	ldr	r2, [r3, #0]
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004c48:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d006      	beq.n	8004c5e <I2C_MasterRequestRead+0x3a>
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	2b01      	cmp	r3, #1
 8004c54:	d003      	beq.n	8004c5e <I2C_MasterRequestRead+0x3a>
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c5c:	d108      	bne.n	8004c70 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	e00b      	b.n	8004c88 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	2b11      	cmp	r3, #17
 8004c76:	d107      	bne.n	8004c88 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c86:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	9300      	str	r3, [sp, #0]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 f893 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d00d      	beq.n	8004cbc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004caa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cae:	d103      	bne.n	8004cb8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cb6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e079      	b.n	8004db0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004cc4:	d108      	bne.n	8004cd8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004cc6:	897b      	ldrh	r3, [r7, #10]
 8004cc8:	b2db      	uxtb	r3, r3
 8004cca:	f043 0301 	orr.w	r3, r3, #1
 8004cce:	b2da      	uxtb	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	611a      	str	r2, [r3, #16]
 8004cd6:	e05f      	b.n	8004d98 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004cd8:	897b      	ldrh	r3, [r7, #10]
 8004cda:	11db      	asrs	r3, r3, #7
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	f003 0306 	and.w	r3, r3, #6
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	f063 030f 	orn	r3, r3, #15
 8004ce8:	b2da      	uxtb	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	4930      	ldr	r1, [pc, #192]	; (8004db8 <I2C_MasterRequestRead+0x194>)
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f8b9 	bl	8004e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d001      	beq.n	8004d06 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e054      	b.n	8004db0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d06:	897b      	ldrh	r3, [r7, #10]
 8004d08:	b2da      	uxtb	r2, r3
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	687a      	ldr	r2, [r7, #4]
 8004d14:	4929      	ldr	r1, [pc, #164]	; (8004dbc <I2C_MasterRequestRead+0x198>)
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 f8a9 	bl	8004e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e044      	b.n	8004db0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d26:	2300      	movs	r3, #0
 8004d28:	613b      	str	r3, [r7, #16]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	613b      	str	r3, [r7, #16]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	699b      	ldr	r3, [r3, #24]
 8004d38:	613b      	str	r3, [r7, #16]
 8004d3a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d4a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f831 	bl	8004dc0 <I2C_WaitOnFlagUntilTimeout>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00d      	beq.n	8004d80 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d72:	d103      	bne.n	8004d7c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d7a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	e017      	b.n	8004db0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004d80:	897b      	ldrh	r3, [r7, #10]
 8004d82:	11db      	asrs	r3, r3, #7
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	f003 0306 	and.w	r3, r3, #6
 8004d8a:	b2db      	uxtb	r3, r3
 8004d8c:	f063 030e 	orn	r3, r3, #14
 8004d90:	b2da      	uxtb	r2, r3
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	4907      	ldr	r1, [pc, #28]	; (8004dbc <I2C_MasterRequestRead+0x198>)
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f865 	bl	8004e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d001      	beq.n	8004dae <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3718      	adds	r7, #24
 8004db4:	46bd      	mov	sp, r7
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	00010008 	.word	0x00010008
 8004dbc:	00010002 	.word	0x00010002

08004dc0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b084      	sub	sp, #16
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	603b      	str	r3, [r7, #0]
 8004dcc:	4613      	mov	r3, r2
 8004dce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dd0:	e025      	b.n	8004e1e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dd8:	d021      	beq.n	8004e1e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dda:	f7fe fb1b 	bl	8003414 <HAL_GetTick>
 8004dde:	4602      	mov	r2, r0
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	683a      	ldr	r2, [r7, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d302      	bcc.n	8004df0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d116      	bne.n	8004e1e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2220      	movs	r2, #32
 8004dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0a:	f043 0220 	orr.w	r2, r3, #32
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e023      	b.n	8004e66 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e1e:	68bb      	ldr	r3, [r7, #8]
 8004e20:	0c1b      	lsrs	r3, r3, #16
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d10d      	bne.n	8004e44 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	43da      	mvns	r2, r3
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	4013      	ands	r3, r2
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	bf0c      	ite	eq
 8004e3a:	2301      	moveq	r3, #1
 8004e3c:	2300      	movne	r3, #0
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	461a      	mov	r2, r3
 8004e42:	e00c      	b.n	8004e5e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	699b      	ldr	r3, [r3, #24]
 8004e4a:	43da      	mvns	r2, r3
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	bf0c      	ite	eq
 8004e56:	2301      	moveq	r3, #1
 8004e58:	2300      	movne	r3, #0
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	79fb      	ldrb	r3, [r7, #7]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d0b6      	beq.n	8004dd2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b084      	sub	sp, #16
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	60f8      	str	r0, [r7, #12]
 8004e76:	60b9      	str	r1, [r7, #8]
 8004e78:	607a      	str	r2, [r7, #4]
 8004e7a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004e7c:	e051      	b.n	8004f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8c:	d123      	bne.n	8004ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e9c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004ea6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2220      	movs	r2, #32
 8004eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f043 0204 	orr.w	r2, r3, #4
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	e046      	b.n	8004f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004edc:	d021      	beq.n	8004f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ede:	f7fe fa99 	bl	8003414 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d302      	bcc.n	8004ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d116      	bne.n	8004f22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f0e:	f043 0220 	orr.w	r2, r3, #32
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e020      	b.n	8004f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	0c1b      	lsrs	r3, r3, #16
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d10c      	bne.n	8004f46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	695b      	ldr	r3, [r3, #20]
 8004f32:	43da      	mvns	r2, r3
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4013      	ands	r3, r2
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	bf14      	ite	ne
 8004f3e:	2301      	movne	r3, #1
 8004f40:	2300      	moveq	r3, #0
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	e00b      	b.n	8004f5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	699b      	ldr	r3, [r3, #24]
 8004f4c:	43da      	mvns	r2, r3
 8004f4e:	68bb      	ldr	r3, [r7, #8]
 8004f50:	4013      	ands	r3, r2
 8004f52:	b29b      	uxth	r3, r3
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	bf14      	ite	ne
 8004f58:	2301      	movne	r3, #1
 8004f5a:	2300      	moveq	r3, #0
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d18d      	bne.n	8004e7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b084      	sub	sp, #16
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f78:	e02d      	b.n	8004fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f7a:	68f8      	ldr	r0, [r7, #12]
 8004f7c:	f000 f8ce 	bl	800511c <I2C_IsAcknowledgeFailed>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d001      	beq.n	8004f8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f86:	2301      	movs	r3, #1
 8004f88:	e02d      	b.n	8004fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f90:	d021      	beq.n	8004fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f92:	f7fe fa3f 	bl	8003414 <HAL_GetTick>
 8004f96:	4602      	mov	r2, r0
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	1ad3      	subs	r3, r2, r3
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d302      	bcc.n	8004fa8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d116      	bne.n	8004fd6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2200      	movs	r2, #0
 8004fac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2220      	movs	r2, #32
 8004fb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2200      	movs	r2, #0
 8004fba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fc2:	f043 0220 	orr.w	r2, r3, #32
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e007      	b.n	8004fe6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fe0:	2b80      	cmp	r3, #128	; 0x80
 8004fe2:	d1ca      	bne.n	8004f7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3710      	adds	r7, #16
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fee:	b580      	push	{r7, lr}
 8004ff0:	b084      	sub	sp, #16
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	60f8      	str	r0, [r7, #12]
 8004ff6:	60b9      	str	r1, [r7, #8]
 8004ff8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004ffa:	e02d      	b.n	8005058 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004ffc:	68f8      	ldr	r0, [r7, #12]
 8004ffe:	f000 f88d 	bl	800511c <I2C_IsAcknowledgeFailed>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d001      	beq.n	800500c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005008:	2301      	movs	r3, #1
 800500a:	e02d      	b.n	8005068 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005012:	d021      	beq.n	8005058 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005014:	f7fe f9fe 	bl	8003414 <HAL_GetTick>
 8005018:	4602      	mov	r2, r0
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	1ad3      	subs	r3, r2, r3
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	429a      	cmp	r2, r3
 8005022:	d302      	bcc.n	800502a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d116      	bne.n	8005058 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2200      	movs	r2, #0
 800502e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2220      	movs	r2, #32
 8005034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2200      	movs	r2, #0
 800503c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	f043 0220 	orr.w	r2, r3, #32
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e007      	b.n	8005068 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	695b      	ldr	r3, [r3, #20]
 800505e:	f003 0304 	and.w	r3, r3, #4
 8005062:	2b04      	cmp	r3, #4
 8005064:	d1ca      	bne.n	8004ffc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800507c:	e042      	b.n	8005104 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	2b10      	cmp	r3, #16
 800508a:	d119      	bne.n	80050c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f06f 0210 	mvn.w	r2, #16
 8005094:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2200      	movs	r2, #0
 800509a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2220      	movs	r2, #32
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e029      	b.n	8005114 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050c0:	f7fe f9a8 	bl	8003414 <HAL_GetTick>
 80050c4:	4602      	mov	r2, r0
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	1ad3      	subs	r3, r2, r3
 80050ca:	68ba      	ldr	r2, [r7, #8]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d302      	bcc.n	80050d6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d116      	bne.n	8005104 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2220      	movs	r2, #32
 80050e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f0:	f043 0220 	orr.w	r2, r3, #32
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e007      	b.n	8005114 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800510e:	2b40      	cmp	r3, #64	; 0x40
 8005110:	d1b5      	bne.n	800507e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005112:	2300      	movs	r3, #0
}
 8005114:	4618      	mov	r0, r3
 8005116:	3710      	adds	r7, #16
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	695b      	ldr	r3, [r3, #20]
 800512a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800512e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005132:	d11b      	bne.n	800516c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800513c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2200      	movs	r2, #0
 8005142:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2220      	movs	r2, #32
 8005148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	f043 0204 	orr.w	r2, r3, #4
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005168:	2301      	movs	r3, #1
 800516a:	e000      	b.n	800516e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	370c      	adds	r7, #12
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr

0800517a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800517a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800517c:	b08f      	sub	sp, #60	; 0x3c
 800517e:	af0a      	add	r7, sp, #40	; 0x28
 8005180:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d101      	bne.n	800518c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e10f      	b.n	80053ac <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f00b ff24 	bl	8010ff4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2203      	movs	r2, #3
 80051b0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d102      	bne.n	80051c6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	4618      	mov	r0, r3
 80051cc:	f005 fd0b 	bl	800abe6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	603b      	str	r3, [r7, #0]
 80051d6:	687e      	ldr	r6, [r7, #4]
 80051d8:	466d      	mov	r5, sp
 80051da:	f106 0410 	add.w	r4, r6, #16
 80051de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80051e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80051e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80051ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80051ee:	1d33      	adds	r3, r6, #4
 80051f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80051f2:	6838      	ldr	r0, [r7, #0]
 80051f4:	f005 fbe2 	bl	800a9bc <USB_CoreInit>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d005      	beq.n	800520a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2202      	movs	r2, #2
 8005202:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005206:	2301      	movs	r3, #1
 8005208:	e0d0      	b.n	80053ac <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2100      	movs	r1, #0
 8005210:	4618      	mov	r0, r3
 8005212:	f005 fcf9 	bl	800ac08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005216:	2300      	movs	r3, #0
 8005218:	73fb      	strb	r3, [r7, #15]
 800521a:	e04a      	b.n	80052b2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800521c:	7bfa      	ldrb	r2, [r7, #15]
 800521e:	6879      	ldr	r1, [r7, #4]
 8005220:	4613      	mov	r3, r2
 8005222:	00db      	lsls	r3, r3, #3
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	440b      	add	r3, r1
 800522a:	333d      	adds	r3, #61	; 0x3d
 800522c:	2201      	movs	r2, #1
 800522e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005230:	7bfa      	ldrb	r2, [r7, #15]
 8005232:	6879      	ldr	r1, [r7, #4]
 8005234:	4613      	mov	r3, r2
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	4413      	add	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	333c      	adds	r3, #60	; 0x3c
 8005240:	7bfa      	ldrb	r2, [r7, #15]
 8005242:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005244:	7bfa      	ldrb	r2, [r7, #15]
 8005246:	7bfb      	ldrb	r3, [r7, #15]
 8005248:	b298      	uxth	r0, r3
 800524a:	6879      	ldr	r1, [r7, #4]
 800524c:	4613      	mov	r3, r2
 800524e:	00db      	lsls	r3, r3, #3
 8005250:	4413      	add	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	440b      	add	r3, r1
 8005256:	3344      	adds	r3, #68	; 0x44
 8005258:	4602      	mov	r2, r0
 800525a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800525c:	7bfa      	ldrb	r2, [r7, #15]
 800525e:	6879      	ldr	r1, [r7, #4]
 8005260:	4613      	mov	r3, r2
 8005262:	00db      	lsls	r3, r3, #3
 8005264:	4413      	add	r3, r2
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	440b      	add	r3, r1
 800526a:	3340      	adds	r3, #64	; 0x40
 800526c:	2200      	movs	r2, #0
 800526e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005270:	7bfa      	ldrb	r2, [r7, #15]
 8005272:	6879      	ldr	r1, [r7, #4]
 8005274:	4613      	mov	r3, r2
 8005276:	00db      	lsls	r3, r3, #3
 8005278:	4413      	add	r3, r2
 800527a:	009b      	lsls	r3, r3, #2
 800527c:	440b      	add	r3, r1
 800527e:	3348      	adds	r3, #72	; 0x48
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005284:	7bfa      	ldrb	r2, [r7, #15]
 8005286:	6879      	ldr	r1, [r7, #4]
 8005288:	4613      	mov	r3, r2
 800528a:	00db      	lsls	r3, r3, #3
 800528c:	4413      	add	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	440b      	add	r3, r1
 8005292:	334c      	adds	r3, #76	; 0x4c
 8005294:	2200      	movs	r2, #0
 8005296:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005298:	7bfa      	ldrb	r2, [r7, #15]
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	4613      	mov	r3, r2
 800529e:	00db      	lsls	r3, r3, #3
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	3354      	adds	r3, #84	; 0x54
 80052a8:	2200      	movs	r2, #0
 80052aa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052ac:	7bfb      	ldrb	r3, [r7, #15]
 80052ae:	3301      	adds	r3, #1
 80052b0:	73fb      	strb	r3, [r7, #15]
 80052b2:	7bfa      	ldrb	r2, [r7, #15]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d3af      	bcc.n	800521c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052bc:	2300      	movs	r3, #0
 80052be:	73fb      	strb	r3, [r7, #15]
 80052c0:	e044      	b.n	800534c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80052c2:	7bfa      	ldrb	r2, [r7, #15]
 80052c4:	6879      	ldr	r1, [r7, #4]
 80052c6:	4613      	mov	r3, r2
 80052c8:	00db      	lsls	r3, r3, #3
 80052ca:	4413      	add	r3, r2
 80052cc:	009b      	lsls	r3, r3, #2
 80052ce:	440b      	add	r3, r1
 80052d0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80052d4:	2200      	movs	r2, #0
 80052d6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80052d8:	7bfa      	ldrb	r2, [r7, #15]
 80052da:	6879      	ldr	r1, [r7, #4]
 80052dc:	4613      	mov	r3, r2
 80052de:	00db      	lsls	r3, r3, #3
 80052e0:	4413      	add	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	440b      	add	r3, r1
 80052e6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80052ea:	7bfa      	ldrb	r2, [r7, #15]
 80052ec:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80052ee:	7bfa      	ldrb	r2, [r7, #15]
 80052f0:	6879      	ldr	r1, [r7, #4]
 80052f2:	4613      	mov	r3, r2
 80052f4:	00db      	lsls	r3, r3, #3
 80052f6:	4413      	add	r3, r2
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	440b      	add	r3, r1
 80052fc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005300:	2200      	movs	r2, #0
 8005302:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005304:	7bfa      	ldrb	r2, [r7, #15]
 8005306:	6879      	ldr	r1, [r7, #4]
 8005308:	4613      	mov	r3, r2
 800530a:	00db      	lsls	r3, r3, #3
 800530c:	4413      	add	r3, r2
 800530e:	009b      	lsls	r3, r3, #2
 8005310:	440b      	add	r3, r1
 8005312:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005316:	2200      	movs	r2, #0
 8005318:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800531a:	7bfa      	ldrb	r2, [r7, #15]
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	4613      	mov	r3, r2
 8005320:	00db      	lsls	r3, r3, #3
 8005322:	4413      	add	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	440b      	add	r3, r1
 8005328:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800532c:	2200      	movs	r2, #0
 800532e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005330:	7bfa      	ldrb	r2, [r7, #15]
 8005332:	6879      	ldr	r1, [r7, #4]
 8005334:	4613      	mov	r3, r2
 8005336:	00db      	lsls	r3, r3, #3
 8005338:	4413      	add	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	440b      	add	r3, r1
 800533e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005342:	2200      	movs	r2, #0
 8005344:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005346:	7bfb      	ldrb	r3, [r7, #15]
 8005348:	3301      	adds	r3, #1
 800534a:	73fb      	strb	r3, [r7, #15]
 800534c:	7bfa      	ldrb	r2, [r7, #15]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	429a      	cmp	r2, r3
 8005354:	d3b5      	bcc.n	80052c2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	603b      	str	r3, [r7, #0]
 800535c:	687e      	ldr	r6, [r7, #4]
 800535e:	466d      	mov	r5, sp
 8005360:	f106 0410 	add.w	r4, r6, #16
 8005364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005368:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800536a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800536c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005370:	e885 0003 	stmia.w	r5, {r0, r1}
 8005374:	1d33      	adds	r3, r6, #4
 8005376:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005378:	6838      	ldr	r0, [r7, #0]
 800537a:	f005 fc91 	bl	800aca0 <USB_DevInit>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d005      	beq.n	8005390 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2202      	movs	r2, #2
 8005388:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800538c:	2301      	movs	r3, #1
 800538e:	e00d      	b.n	80053ac <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4618      	mov	r0, r3
 80053a6:	f006 fde0 	bl	800bf6a <USB_DevDisconnect>

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3714      	adds	r7, #20
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080053b4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b084      	sub	sp, #16
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d101      	bne.n	80053d0 <HAL_PCD_Start+0x1c>
 80053cc:	2302      	movs	r3, #2
 80053ce:	e020      	b.n	8005412 <HAL_PCD_Start+0x5e>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053dc:	2b01      	cmp	r3, #1
 80053de:	d109      	bne.n	80053f4 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d005      	beq.n	80053f4 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4618      	mov	r0, r3
 80053fa:	f005 fbe3 	bl	800abc4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4618      	mov	r0, r3
 8005404:	f006 fd90 	bl	800bf28 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800541a:	b590      	push	{r4, r7, lr}
 800541c:	b08d      	sub	sp, #52	; 0x34
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005428:	6a3b      	ldr	r3, [r7, #32]
 800542a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f006 fe4e 	bl	800c0d2 <USB_GetMode>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	f040 848a 	bne.w	8005d52 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f006 fdb2 	bl	800bfac <USB_ReadInterrupts>
 8005448:	4603      	mov	r3, r0
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 8480 	beq.w	8005d50 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005456:	689b      	ldr	r3, [r3, #8]
 8005458:	0a1b      	lsrs	r3, r3, #8
 800545a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f006 fd9f 	bl	800bfac <USB_ReadInterrupts>
 800546e:	4603      	mov	r3, r0
 8005470:	f003 0302 	and.w	r3, r3, #2
 8005474:	2b02      	cmp	r3, #2
 8005476:	d107      	bne.n	8005488 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	695a      	ldr	r2, [r3, #20]
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f002 0202 	and.w	r2, r2, #2
 8005486:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f006 fd8d 	bl	800bfac <USB_ReadInterrupts>
 8005492:	4603      	mov	r3, r0
 8005494:	f003 0310 	and.w	r3, r3, #16
 8005498:	2b10      	cmp	r3, #16
 800549a:	d161      	bne.n	8005560 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	699a      	ldr	r2, [r3, #24]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f022 0210 	bic.w	r2, r2, #16
 80054aa:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80054ac:	6a3b      	ldr	r3, [r7, #32]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	f003 020f 	and.w	r2, r3, #15
 80054b8:	4613      	mov	r3, r2
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	4413      	add	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	4413      	add	r3, r2
 80054c8:	3304      	adds	r3, #4
 80054ca:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80054cc:	69bb      	ldr	r3, [r7, #24]
 80054ce:	0c5b      	lsrs	r3, r3, #17
 80054d0:	f003 030f 	and.w	r3, r3, #15
 80054d4:	2b02      	cmp	r3, #2
 80054d6:	d124      	bne.n	8005522 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80054de:	4013      	ands	r3, r2
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d035      	beq.n	8005550 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	091b      	lsrs	r3, r3, #4
 80054ec:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80054ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	461a      	mov	r2, r3
 80054f6:	6a38      	ldr	r0, [r7, #32]
 80054f8:	f006 fbc4 	bl	800bc84 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	69bb      	ldr	r3, [r7, #24]
 8005502:	091b      	lsrs	r3, r3, #4
 8005504:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005508:	441a      	add	r2, r3
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	6a1a      	ldr	r2, [r3, #32]
 8005512:	69bb      	ldr	r3, [r7, #24]
 8005514:	091b      	lsrs	r3, r3, #4
 8005516:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800551a:	441a      	add	r2, r3
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	621a      	str	r2, [r3, #32]
 8005520:	e016      	b.n	8005550 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	0c5b      	lsrs	r3, r3, #17
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	2b06      	cmp	r3, #6
 800552c:	d110      	bne.n	8005550 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005534:	2208      	movs	r2, #8
 8005536:	4619      	mov	r1, r3
 8005538:	6a38      	ldr	r0, [r7, #32]
 800553a:	f006 fba3 	bl	800bc84 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	6a1a      	ldr	r2, [r3, #32]
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	091b      	lsrs	r3, r3, #4
 8005546:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800554a:	441a      	add	r2, r3
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	699a      	ldr	r2, [r3, #24]
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f042 0210 	orr.w	r2, r2, #16
 800555e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4618      	mov	r0, r3
 8005566:	f006 fd21 	bl	800bfac <USB_ReadInterrupts>
 800556a:	4603      	mov	r3, r0
 800556c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005570:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005574:	f040 80a7 	bne.w	80056c6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4618      	mov	r0, r3
 8005582:	f006 fd26 	bl	800bfd2 <USB_ReadDevAllOutEpInterrupt>
 8005586:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005588:	e099      	b.n	80056be <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800558a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 808e 	beq.w	80056b2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800559c:	b2d2      	uxtb	r2, r2
 800559e:	4611      	mov	r1, r2
 80055a0:	4618      	mov	r0, r3
 80055a2:	f006 fd4a 	bl	800c03a <USB_ReadDevOutEPInterrupt>
 80055a6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00c      	beq.n	80055cc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	015a      	lsls	r2, r3, #5
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	4413      	add	r3, r2
 80055ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055be:	461a      	mov	r2, r3
 80055c0:	2301      	movs	r3, #1
 80055c2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80055c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f000 fec2 	bl	8006350 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d00c      	beq.n	80055f0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	015a      	lsls	r2, r3, #5
 80055da:	69fb      	ldr	r3, [r7, #28]
 80055dc:	4413      	add	r3, r2
 80055de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055e2:	461a      	mov	r2, r3
 80055e4:	2308      	movs	r3, #8
 80055e6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80055e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f000 ff98 	bl	8006520 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	f003 0310 	and.w	r3, r3, #16
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d008      	beq.n	800560c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80055fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fc:	015a      	lsls	r2, r3, #5
 80055fe:	69fb      	ldr	r3, [r7, #28]
 8005600:	4413      	add	r3, r2
 8005602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005606:	461a      	mov	r2, r3
 8005608:	2310      	movs	r3, #16
 800560a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	f003 0302 	and.w	r3, r3, #2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d030      	beq.n	8005678 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800561e:	2b80      	cmp	r3, #128	; 0x80
 8005620:	d109      	bne.n	8005636 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	69fa      	ldr	r2, [r7, #28]
 800562c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005630:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005634:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005638:	4613      	mov	r3, r2
 800563a:	00db      	lsls	r3, r3, #3
 800563c:	4413      	add	r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005644:	687a      	ldr	r2, [r7, #4]
 8005646:	4413      	add	r3, r2
 8005648:	3304      	adds	r3, #4
 800564a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	78db      	ldrb	r3, [r3, #3]
 8005650:	2b01      	cmp	r3, #1
 8005652:	d108      	bne.n	8005666 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	2200      	movs	r2, #0
 8005658:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800565a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565c:	b2db      	uxtb	r3, r3
 800565e:	4619      	mov	r1, r3
 8005660:	6878      	ldr	r0, [r7, #4]
 8005662:	f00b fdcd 	bl	8011200 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	69fb      	ldr	r3, [r7, #28]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005672:	461a      	mov	r2, r3
 8005674:	2302      	movs	r3, #2
 8005676:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005678:	693b      	ldr	r3, [r7, #16]
 800567a:	f003 0320 	and.w	r3, r3, #32
 800567e:	2b00      	cmp	r3, #0
 8005680:	d008      	beq.n	8005694 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005682:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568e:	461a      	mov	r2, r3
 8005690:	2320      	movs	r3, #32
 8005692:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d009      	beq.n	80056b2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	015a      	lsls	r2, r3, #5
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	4413      	add	r3, r2
 80056a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056aa:	461a      	mov	r2, r3
 80056ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80056b0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80056b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b4:	3301      	adds	r3, #1
 80056b6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80056b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ba:	085b      	lsrs	r3, r3, #1
 80056bc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80056be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f47f af62 	bne.w	800558a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f006 fc6e 	bl	800bfac <USB_ReadInterrupts>
 80056d0:	4603      	mov	r3, r0
 80056d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056da:	f040 80db 	bne.w	8005894 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4618      	mov	r0, r3
 80056e4:	f006 fc8f 	bl	800c006 <USB_ReadDevAllInEpInterrupt>
 80056e8:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80056ea:	2300      	movs	r3, #0
 80056ec:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80056ee:	e0cd      	b.n	800588c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80056f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f000 80c2 	beq.w	8005880 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	4611      	mov	r1, r2
 8005706:	4618      	mov	r0, r3
 8005708:	f006 fcb5 	bl	800c076 <USB_ReadDevInEPInterrupt>
 800570c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f003 0301 	and.w	r3, r3, #1
 8005714:	2b00      	cmp	r3, #0
 8005716:	d057      	beq.n	80057c8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	2201      	movs	r2, #1
 8005720:	fa02 f303 	lsl.w	r3, r2, r3
 8005724:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800572c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	43db      	mvns	r3, r3
 8005732:	69f9      	ldr	r1, [r7, #28]
 8005734:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005738:	4013      	ands	r3, r2
 800573a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800573c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	4413      	add	r3, r2
 8005744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005748:	461a      	mov	r2, r3
 800574a:	2301      	movs	r3, #1
 800574c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b01      	cmp	r3, #1
 8005754:	d132      	bne.n	80057bc <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005756:	6879      	ldr	r1, [r7, #4]
 8005758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800575a:	4613      	mov	r3, r2
 800575c:	00db      	lsls	r3, r3, #3
 800575e:	4413      	add	r3, r2
 8005760:	009b      	lsls	r3, r3, #2
 8005762:	440b      	add	r3, r1
 8005764:	334c      	adds	r3, #76	; 0x4c
 8005766:	6819      	ldr	r1, [r3, #0]
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800576c:	4613      	mov	r3, r2
 800576e:	00db      	lsls	r3, r3, #3
 8005770:	4413      	add	r3, r2
 8005772:	009b      	lsls	r3, r3, #2
 8005774:	4403      	add	r3, r0
 8005776:	3348      	adds	r3, #72	; 0x48
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4419      	add	r1, r3
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005780:	4613      	mov	r3, r2
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	4413      	add	r3, r2
 8005786:	009b      	lsls	r3, r3, #2
 8005788:	4403      	add	r3, r0
 800578a:	334c      	adds	r3, #76	; 0x4c
 800578c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800578e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005790:	2b00      	cmp	r3, #0
 8005792:	d113      	bne.n	80057bc <HAL_PCD_IRQHandler+0x3a2>
 8005794:	6879      	ldr	r1, [r7, #4]
 8005796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005798:	4613      	mov	r3, r2
 800579a:	00db      	lsls	r3, r3, #3
 800579c:	4413      	add	r3, r2
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	440b      	add	r3, r1
 80057a2:	3354      	adds	r3, #84	; 0x54
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d108      	bne.n	80057bc <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80057b4:	461a      	mov	r2, r3
 80057b6:	2101      	movs	r1, #1
 80057b8:	f006 fcbc 	bl	800c134 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80057bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	4619      	mov	r1, r3
 80057c2:	6878      	ldr	r0, [r7, #4]
 80057c4:	f00b fc97 	bl	80110f6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	f003 0308 	and.w	r3, r3, #8
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d008      	beq.n	80057e4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	69fb      	ldr	r3, [r7, #28]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057de:	461a      	mov	r2, r3
 80057e0:	2308      	movs	r3, #8
 80057e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	f003 0310 	and.w	r3, r3, #16
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d008      	beq.n	8005800 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80057ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057fa:	461a      	mov	r2, r3
 80057fc:	2310      	movs	r3, #16
 80057fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005806:	2b00      	cmp	r3, #0
 8005808:	d008      	beq.n	800581c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800580a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005816:	461a      	mov	r2, r3
 8005818:	2340      	movs	r3, #64	; 0x40
 800581a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d023      	beq.n	800586e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005826:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005828:	6a38      	ldr	r0, [r7, #32]
 800582a:	f005 fb9d 	bl	800af68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800582e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005830:	4613      	mov	r3, r2
 8005832:	00db      	lsls	r3, r3, #3
 8005834:	4413      	add	r3, r2
 8005836:	009b      	lsls	r3, r3, #2
 8005838:	3338      	adds	r3, #56	; 0x38
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	4413      	add	r3, r2
 800583e:	3304      	adds	r3, #4
 8005840:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	78db      	ldrb	r3, [r3, #3]
 8005846:	2b01      	cmp	r3, #1
 8005848:	d108      	bne.n	800585c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800584a:	697b      	ldr	r3, [r7, #20]
 800584c:	2200      	movs	r2, #0
 800584e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	b2db      	uxtb	r3, r3
 8005854:	4619      	mov	r1, r3
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f00b fce4 	bl	8011224 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005868:	461a      	mov	r2, r3
 800586a:	2302      	movs	r3, #2
 800586c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005874:	2b00      	cmp	r3, #0
 8005876:	d003      	beq.n	8005880 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005878:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f000 fcdb 	bl	8006236 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005882:	3301      	adds	r3, #1
 8005884:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	085b      	lsrs	r3, r3, #1
 800588a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	2b00      	cmp	r3, #0
 8005890:	f47f af2e 	bne.w	80056f0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4618      	mov	r0, r3
 800589a:	f006 fb87 	bl	800bfac <USB_ReadInterrupts>
 800589e:	4603      	mov	r3, r0
 80058a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058a8:	d122      	bne.n	80058f0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	69fa      	ldr	r2, [r7, #28]
 80058b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80058b8:	f023 0301 	bic.w	r3, r3, #1
 80058bc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d108      	bne.n	80058da <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2200      	movs	r2, #0
 80058cc:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80058d0:	2100      	movs	r1, #0
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fec2 	bl	800665c <HAL_PCDEx_LPM_Callback>
 80058d8:	e002      	b.n	80058e0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f00b fc82 	bl	80111e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	695a      	ldr	r2, [r3, #20]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80058ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f006 fb59 	bl	800bfac <USB_ReadInterrupts>
 80058fa:	4603      	mov	r3, r0
 80058fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005904:	d112      	bne.n	800592c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	f003 0301 	and.w	r3, r3, #1
 8005912:	2b01      	cmp	r3, #1
 8005914:	d102      	bne.n	800591c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f00b fc3e 	bl	8011198 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	695a      	ldr	r2, [r3, #20]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800592a:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f006 fb3b 	bl	800bfac <USB_ReadInterrupts>
 8005936:	4603      	mov	r3, r0
 8005938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800593c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005940:	f040 80b7 	bne.w	8005ab2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005944:	69fb      	ldr	r3, [r7, #28]
 8005946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	69fa      	ldr	r2, [r7, #28]
 800594e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005952:	f023 0301 	bic.w	r3, r3, #1
 8005956:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2110      	movs	r1, #16
 800595e:	4618      	mov	r0, r3
 8005960:	f005 fb02 	bl	800af68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005964:	2300      	movs	r3, #0
 8005966:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005968:	e046      	b.n	80059f8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800596a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	69fb      	ldr	r3, [r7, #28]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005976:	461a      	mov	r2, r3
 8005978:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800597c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800597e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800598e:	0151      	lsls	r1, r2, #5
 8005990:	69fa      	ldr	r2, [r7, #28]
 8005992:	440a      	add	r2, r1
 8005994:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005998:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800599c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800599e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059a0:	015a      	lsls	r2, r3, #5
 80059a2:	69fb      	ldr	r3, [r7, #28]
 80059a4:	4413      	add	r3, r2
 80059a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059aa:	461a      	mov	r2, r3
 80059ac:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059b0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059c2:	0151      	lsls	r1, r2, #5
 80059c4:	69fa      	ldr	r2, [r7, #28]
 80059c6:	440a      	add	r2, r1
 80059c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059cc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059d0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80059d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059d4:	015a      	lsls	r2, r3, #5
 80059d6:	69fb      	ldr	r3, [r7, #28]
 80059d8:	4413      	add	r3, r2
 80059da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059e2:	0151      	lsls	r1, r2, #5
 80059e4:	69fa      	ldr	r2, [r7, #28]
 80059e6:	440a      	add	r2, r1
 80059e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059f0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f4:	3301      	adds	r3, #1
 80059f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	685b      	ldr	r3, [r3, #4]
 80059fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d3b3      	bcc.n	800596a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	69fa      	ldr	r2, [r7, #28]
 8005a0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a10:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005a14:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d016      	beq.n	8005a4c <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005a1e:	69fb      	ldr	r3, [r7, #28]
 8005a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a28:	69fa      	ldr	r2, [r7, #28]
 8005a2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a2e:	f043 030b 	orr.w	r3, r3, #11
 8005a32:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005a36:	69fb      	ldr	r3, [r7, #28]
 8005a38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a44:	f043 030b 	orr.w	r3, r3, #11
 8005a48:	6453      	str	r3, [r2, #68]	; 0x44
 8005a4a:	e015      	b.n	8005a78 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a52:	695b      	ldr	r3, [r3, #20]
 8005a54:	69fa      	ldr	r2, [r7, #28]
 8005a56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005a5e:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005a62:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6a:	691b      	ldr	r3, [r3, #16]
 8005a6c:	69fa      	ldr	r2, [r7, #28]
 8005a6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a72:	f043 030b 	orr.w	r3, r3, #11
 8005a76:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69fa      	ldr	r2, [r7, #28]
 8005a82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a86:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a8a:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6818      	ldr	r0, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	691b      	ldr	r3, [r3, #16]
 8005a94:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	f006 fb49 	bl	800c134 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	695a      	ldr	r2, [r3, #20]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005ab0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	f006 fa78 	bl	800bfac <USB_ReadInterrupts>
 8005abc:	4603      	mov	r3, r0
 8005abe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ac6:	d124      	bne.n	8005b12 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4618      	mov	r0, r3
 8005ace:	f006 fb0e 	bl	800c0ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f005 fac3 	bl	800b062 <USB_GetDevSpeed>
 8005adc:	4603      	mov	r3, r0
 8005ade:	461a      	mov	r2, r3
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681c      	ldr	r4, [r3, #0]
 8005ae8:	f001 f9e8 	bl	8006ebc <HAL_RCC_GetHCLKFreq>
 8005aec:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	461a      	mov	r2, r3
 8005af6:	4620      	mov	r0, r4
 8005af8:	f004 ffc2 	bl	800aa80 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005afc:	6878      	ldr	r0, [r7, #4]
 8005afe:	f00b fb22 	bl	8011146 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	695a      	ldr	r2, [r3, #20]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005b10:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	4618      	mov	r0, r3
 8005b18:	f006 fa48 	bl	800bfac <USB_ReadInterrupts>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	f003 0308 	and.w	r3, r3, #8
 8005b22:	2b08      	cmp	r3, #8
 8005b24:	d10a      	bne.n	8005b3c <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f00b faff 	bl	801112a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	695a      	ldr	r2, [r3, #20]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f002 0208 	and.w	r2, r2, #8
 8005b3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4618      	mov	r0, r3
 8005b42:	f006 fa33 	bl	800bfac <USB_ReadInterrupts>
 8005b46:	4603      	mov	r3, r0
 8005b48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4c:	2b80      	cmp	r3, #128	; 0x80
 8005b4e:	d122      	bne.n	8005b96 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	699b      	ldr	r3, [r3, #24]
 8005b54:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b58:	6a3b      	ldr	r3, [r7, #32]
 8005b5a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b60:	e014      	b.n	8005b8c <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005b62:	6879      	ldr	r1, [r7, #4]
 8005b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b66:	4613      	mov	r3, r2
 8005b68:	00db      	lsls	r3, r3, #3
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	440b      	add	r3, r1
 8005b70:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d105      	bne.n	8005b86 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b7c:	b2db      	uxtb	r3, r3
 8005b7e:	4619      	mov	r1, r3
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f000 fb27 	bl	80061d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b88:	3301      	adds	r3, #1
 8005b8a:	627b      	str	r3, [r7, #36]	; 0x24
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	685b      	ldr	r3, [r3, #4]
 8005b90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d3e5      	bcc.n	8005b62 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f006 fa06 	bl	800bfac <USB_ReadInterrupts>
 8005ba0:	4603      	mov	r3, r0
 8005ba2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005baa:	d13b      	bne.n	8005c24 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bac:	2301      	movs	r3, #1
 8005bae:	627b      	str	r3, [r7, #36]	; 0x24
 8005bb0:	e02b      	b.n	8005c0a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	00db      	lsls	r3, r3, #3
 8005bca:	4413      	add	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	440b      	add	r3, r1
 8005bd0:	3340      	adds	r3, #64	; 0x40
 8005bd2:	781b      	ldrb	r3, [r3, #0]
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	d115      	bne.n	8005c04 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005bd8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	da12      	bge.n	8005c04 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005be2:	4613      	mov	r3, r2
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	4413      	add	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	440b      	add	r3, r1
 8005bec:	333f      	adds	r3, #63	; 0x3f
 8005bee:	2201      	movs	r2, #1
 8005bf0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fae8 	bl	80061d4 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c06:	3301      	adds	r3, #1
 8005c08:	627b      	str	r3, [r7, #36]	; 0x24
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d3ce      	bcc.n	8005bb2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	695a      	ldr	r2, [r3, #20]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005c22:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f006 f9bf 	bl	800bfac <USB_ReadInterrupts>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005c34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c38:	d155      	bne.n	8005ce6 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8005c3e:	e045      	b.n	8005ccc <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c42:	015a      	lsls	r2, r3, #5
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	4413      	add	r3, r2
 8005c48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c50:	6879      	ldr	r1, [r7, #4]
 8005c52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c54:	4613      	mov	r3, r2
 8005c56:	00db      	lsls	r3, r3, #3
 8005c58:	4413      	add	r3, r2
 8005c5a:	009b      	lsls	r3, r3, #2
 8005c5c:	440b      	add	r3, r1
 8005c5e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d12e      	bne.n	8005cc6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005c68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	da2b      	bge.n	8005cc6 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005c7a:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d121      	bne.n	8005cc6 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005c82:	6879      	ldr	r1, [r7, #4]
 8005c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c86:	4613      	mov	r3, r2
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	4413      	add	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	440b      	add	r3, r1
 8005c90:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005c94:	2201      	movs	r2, #1
 8005c96:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005c98:	6a3b      	ldr	r3, [r7, #32]
 8005c9a:	699b      	ldr	r3, [r3, #24]
 8005c9c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ca0:	6a3b      	ldr	r3, [r7, #32]
 8005ca2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005ca4:	6a3b      	ldr	r3, [r7, #32]
 8005ca6:	695b      	ldr	r3, [r3, #20]
 8005ca8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10a      	bne.n	8005cc6 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005cb0:	69fb      	ldr	r3, [r7, #28]
 8005cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	69fa      	ldr	r2, [r7, #28]
 8005cba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005cc2:	6053      	str	r3, [r2, #4]
            break;
 8005cc4:	e007      	b.n	8005cd6 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc8:	3301      	adds	r3, #1
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d3b4      	bcc.n	8005c40 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	695a      	ldr	r2, [r3, #20]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005ce4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4618      	mov	r0, r3
 8005cec:	f006 f95e 	bl	800bfac <USB_ReadInterrupts>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cfa:	d10a      	bne.n	8005d12 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f00b faa3 	bl	8011248 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	695a      	ldr	r2, [r3, #20]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005d10:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f006 f948 	bl	800bfac <USB_ReadInterrupts>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	f003 0304 	and.w	r3, r3, #4
 8005d22:	2b04      	cmp	r3, #4
 8005d24:	d115      	bne.n	8005d52 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	685b      	ldr	r3, [r3, #4]
 8005d2c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005d2e:	69bb      	ldr	r3, [r7, #24]
 8005d30:	f003 0304 	and.w	r3, r3, #4
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d002      	beq.n	8005d3e <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f00b fa93 	bl	8011264 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6859      	ldr	r1, [r3, #4]
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	430a      	orrs	r2, r1
 8005d4c:	605a      	str	r2, [r3, #4]
 8005d4e:	e000      	b.n	8005d52 <HAL_PCD_IRQHandler+0x938>
      return;
 8005d50:	bf00      	nop
    }
  }
}
 8005d52:	3734      	adds	r7, #52	; 0x34
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd90      	pop	{r4, r7, pc}

08005d58 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b082      	sub	sp, #8
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
 8005d60:	460b      	mov	r3, r1
 8005d62:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_PCD_SetAddress+0x1a>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e013      	b.n	8005d9a <HAL_PCD_SetAddress+0x42>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	78fa      	ldrb	r2, [r7, #3]
 8005d7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	78fa      	ldrb	r2, [r7, #3]
 8005d88:	4611      	mov	r1, r2
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f006 f8a6 	bl	800bedc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3708      	adds	r7, #8
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b084      	sub	sp, #16
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	4608      	mov	r0, r1
 8005dac:	4611      	mov	r1, r2
 8005dae:	461a      	mov	r2, r3
 8005db0:	4603      	mov	r3, r0
 8005db2:	70fb      	strb	r3, [r7, #3]
 8005db4:	460b      	mov	r3, r1
 8005db6:	803b      	strh	r3, [r7, #0]
 8005db8:	4613      	mov	r3, r2
 8005dba:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005dc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	da0f      	bge.n	8005de8 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dc8:	78fb      	ldrb	r3, [r7, #3]
 8005dca:	f003 020f 	and.w	r2, r3, #15
 8005dce:	4613      	mov	r3, r2
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	4413      	add	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	3338      	adds	r3, #56	; 0x38
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	4413      	add	r3, r2
 8005ddc:	3304      	adds	r3, #4
 8005dde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2201      	movs	r2, #1
 8005de4:	705a      	strb	r2, [r3, #1]
 8005de6:	e00f      	b.n	8005e08 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005de8:	78fb      	ldrb	r3, [r7, #3]
 8005dea:	f003 020f 	and.w	r2, r3, #15
 8005dee:	4613      	mov	r3, r2
 8005df0:	00db      	lsls	r3, r3, #3
 8005df2:	4413      	add	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005dfa:	687a      	ldr	r2, [r7, #4]
 8005dfc:	4413      	add	r3, r2
 8005dfe:	3304      	adds	r3, #4
 8005e00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	f003 030f 	and.w	r3, r3, #15
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005e14:	883a      	ldrh	r2, [r7, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	78ba      	ldrb	r2, [r7, #2]
 8005e1e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	785b      	ldrb	r3, [r3, #1]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d004      	beq.n	8005e32 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	b29a      	uxth	r2, r3
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e32:	78bb      	ldrb	r3, [r7, #2]
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d102      	bne.n	8005e3e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d101      	bne.n	8005e4c <HAL_PCD_EP_Open+0xaa>
 8005e48:	2302      	movs	r3, #2
 8005e4a:	e00e      	b.n	8005e6a <HAL_PCD_EP_Open+0xc8>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	68f9      	ldr	r1, [r7, #12]
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f005 f926 	bl	800b0ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005e68:	7afb      	ldrb	r3, [r7, #11]
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b084      	sub	sp, #16
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
 8005e7a:	460b      	mov	r3, r1
 8005e7c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e7e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	da0f      	bge.n	8005ea6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e86:	78fb      	ldrb	r3, [r7, #3]
 8005e88:	f003 020f 	and.w	r2, r3, #15
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	4413      	add	r3, r2
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	3338      	adds	r3, #56	; 0x38
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	4413      	add	r3, r2
 8005e9a:	3304      	adds	r3, #4
 8005e9c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	705a      	strb	r2, [r3, #1]
 8005ea4:	e00f      	b.n	8005ec6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ea6:	78fb      	ldrb	r3, [r7, #3]
 8005ea8:	f003 020f 	and.w	r2, r3, #15
 8005eac:	4613      	mov	r3, r2
 8005eae:	00db      	lsls	r3, r3, #3
 8005eb0:	4413      	add	r3, r2
 8005eb2:	009b      	lsls	r3, r3, #2
 8005eb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	4413      	add	r3, r2
 8005ebc:	3304      	adds	r3, #4
 8005ebe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005ec6:	78fb      	ldrb	r3, [r7, #3]
 8005ec8:	f003 030f 	and.w	r3, r3, #15
 8005ecc:	b2da      	uxtb	r2, r3
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_PCD_EP_Close+0x6e>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e00e      	b.n	8005efe <HAL_PCD_EP_Close+0x8c>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68f9      	ldr	r1, [r7, #12]
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f005 f964 	bl	800b1bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3710      	adds	r7, #16
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b086      	sub	sp, #24
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	60f8      	str	r0, [r7, #12]
 8005f0e:	607a      	str	r2, [r7, #4]
 8005f10:	603b      	str	r3, [r7, #0]
 8005f12:	460b      	mov	r3, r1
 8005f14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f16:	7afb      	ldrb	r3, [r7, #11]
 8005f18:	f003 020f 	and.w	r2, r3, #15
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	4413      	add	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	4413      	add	r3, r2
 8005f2c:	3304      	adds	r3, #4
 8005f2e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005f36:	697b      	ldr	r3, [r7, #20]
 8005f38:	683a      	ldr	r2, [r7, #0]
 8005f3a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005f3c:	697b      	ldr	r3, [r7, #20]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005f42:	697b      	ldr	r3, [r7, #20]
 8005f44:	2200      	movs	r2, #0
 8005f46:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f48:	7afb      	ldrb	r3, [r7, #11]
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	b2da      	uxtb	r2, r3
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	d102      	bne.n	8005f62 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f5c:	687a      	ldr	r2, [r7, #4]
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f62:	7afb      	ldrb	r3, [r7, #11]
 8005f64:	f003 030f 	and.w	r3, r3, #15
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d109      	bne.n	8005f80 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6818      	ldr	r0, [r3, #0]
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	691b      	ldr	r3, [r3, #16]
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	461a      	mov	r2, r3
 8005f78:	6979      	ldr	r1, [r7, #20]
 8005f7a:	f005 fc43 	bl	800b804 <USB_EP0StartXfer>
 8005f7e:	e008      	b.n	8005f92 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6818      	ldr	r0, [r3, #0]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	691b      	ldr	r3, [r3, #16]
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	6979      	ldr	r1, [r7, #20]
 8005f8e:	f005 f9f1 	bl	800b374 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b083      	sub	sp, #12
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005fa8:	78fb      	ldrb	r3, [r7, #3]
 8005faa:	f003 020f 	and.w	r2, r3, #15
 8005fae:	6879      	ldr	r1, [r7, #4]
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	440b      	add	r3, r1
 8005fba:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005fbe:	681b      	ldr	r3, [r3, #0]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b086      	sub	sp, #24
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	607a      	str	r2, [r7, #4]
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	460b      	mov	r3, r1
 8005fda:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fdc:	7afb      	ldrb	r3, [r7, #11]
 8005fde:	f003 020f 	and.w	r2, r3, #15
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	00db      	lsls	r3, r3, #3
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	3338      	adds	r3, #56	; 0x38
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	4413      	add	r3, r2
 8005ff0:	3304      	adds	r3, #4
 8005ff2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ff4:	697b      	ldr	r3, [r7, #20]
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	2200      	movs	r2, #0
 8006004:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	2201      	movs	r2, #1
 800600a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800600c:	7afb      	ldrb	r3, [r7, #11]
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	b2da      	uxtb	r2, r3
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	691b      	ldr	r3, [r3, #16]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d102      	bne.n	8006026 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006026:	7afb      	ldrb	r3, [r7, #11]
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	2b00      	cmp	r3, #0
 800602e:	d109      	bne.n	8006044 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6818      	ldr	r0, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	691b      	ldr	r3, [r3, #16]
 8006038:	b2db      	uxtb	r3, r3
 800603a:	461a      	mov	r2, r3
 800603c:	6979      	ldr	r1, [r7, #20]
 800603e:	f005 fbe1 	bl	800b804 <USB_EP0StartXfer>
 8006042:	e008      	b.n	8006056 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6818      	ldr	r0, [r3, #0]
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	b2db      	uxtb	r3, r3
 800604e:	461a      	mov	r2, r3
 8006050:	6979      	ldr	r1, [r7, #20]
 8006052:	f005 f98f 	bl	800b374 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006056:	2300      	movs	r3, #0
}
 8006058:	4618      	mov	r0, r3
 800605a:	3718      	adds	r7, #24
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b084      	sub	sp, #16
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	460b      	mov	r3, r1
 800606a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800606c:	78fb      	ldrb	r3, [r7, #3]
 800606e:	f003 020f 	and.w	r2, r3, #15
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	685b      	ldr	r3, [r3, #4]
 8006076:	429a      	cmp	r2, r3
 8006078:	d901      	bls.n	800607e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e050      	b.n	8006120 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800607e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006082:	2b00      	cmp	r3, #0
 8006084:	da0f      	bge.n	80060a6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006086:	78fb      	ldrb	r3, [r7, #3]
 8006088:	f003 020f 	and.w	r2, r3, #15
 800608c:	4613      	mov	r3, r2
 800608e:	00db      	lsls	r3, r3, #3
 8006090:	4413      	add	r3, r2
 8006092:	009b      	lsls	r3, r3, #2
 8006094:	3338      	adds	r3, #56	; 0x38
 8006096:	687a      	ldr	r2, [r7, #4]
 8006098:	4413      	add	r3, r2
 800609a:	3304      	adds	r3, #4
 800609c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	2201      	movs	r2, #1
 80060a2:	705a      	strb	r2, [r3, #1]
 80060a4:	e00d      	b.n	80060c2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80060a6:	78fa      	ldrb	r2, [r7, #3]
 80060a8:	4613      	mov	r3, r2
 80060aa:	00db      	lsls	r3, r3, #3
 80060ac:	4413      	add	r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80060b4:	687a      	ldr	r2, [r7, #4]
 80060b6:	4413      	add	r3, r2
 80060b8:	3304      	adds	r3, #4
 80060ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2201      	movs	r2, #1
 80060c6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060c8:	78fb      	ldrb	r3, [r7, #3]
 80060ca:	f003 030f 	and.w	r3, r3, #15
 80060ce:	b2da      	uxtb	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d101      	bne.n	80060e2 <HAL_PCD_EP_SetStall+0x82>
 80060de:	2302      	movs	r3, #2
 80060e0:	e01e      	b.n	8006120 <HAL_PCD_EP_SetStall+0xc0>
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68f9      	ldr	r1, [r7, #12]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f005 fe1f 	bl	800bd34 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060f6:	78fb      	ldrb	r3, [r7, #3]
 80060f8:	f003 030f 	and.w	r3, r3, #15
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6818      	ldr	r0, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	b2d9      	uxtb	r1, r3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006110:	461a      	mov	r2, r3
 8006112:	f006 f80f 	bl	800c134 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3710      	adds	r7, #16
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	460b      	mov	r3, r1
 8006132:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006134:	78fb      	ldrb	r3, [r7, #3]
 8006136:	f003 020f 	and.w	r2, r3, #15
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	429a      	cmp	r2, r3
 8006140:	d901      	bls.n	8006146 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e042      	b.n	80061cc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006146:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800614a:	2b00      	cmp	r3, #0
 800614c:	da0f      	bge.n	800616e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800614e:	78fb      	ldrb	r3, [r7, #3]
 8006150:	f003 020f 	and.w	r2, r3, #15
 8006154:	4613      	mov	r3, r2
 8006156:	00db      	lsls	r3, r3, #3
 8006158:	4413      	add	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	3338      	adds	r3, #56	; 0x38
 800615e:	687a      	ldr	r2, [r7, #4]
 8006160:	4413      	add	r3, r2
 8006162:	3304      	adds	r3, #4
 8006164:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2201      	movs	r2, #1
 800616a:	705a      	strb	r2, [r3, #1]
 800616c:	e00f      	b.n	800618e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800616e:	78fb      	ldrb	r3, [r7, #3]
 8006170:	f003 020f 	and.w	r2, r3, #15
 8006174:	4613      	mov	r3, r2
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	4413      	add	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006180:	687a      	ldr	r2, [r7, #4]
 8006182:	4413      	add	r3, r2
 8006184:	3304      	adds	r3, #4
 8006186:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	2200      	movs	r2, #0
 8006192:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006194:	78fb      	ldrb	r3, [r7, #3]
 8006196:	f003 030f 	and.w	r3, r3, #15
 800619a:	b2da      	uxtb	r2, r3
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d101      	bne.n	80061ae <HAL_PCD_EP_ClrStall+0x86>
 80061aa:	2302      	movs	r3, #2
 80061ac:	e00e      	b.n	80061cc <HAL_PCD_EP_ClrStall+0xa4>
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68f9      	ldr	r1, [r7, #12]
 80061bc:	4618      	mov	r0, r3
 80061be:	f005 fe27 	bl	800be10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80061ca:	2300      	movs	r3, #0
}
 80061cc:	4618      	mov	r0, r3
 80061ce:	3710      	adds	r7, #16
 80061d0:	46bd      	mov	sp, r7
 80061d2:	bd80      	pop	{r7, pc}

080061d4 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	460b      	mov	r3, r1
 80061de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80061e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	da0c      	bge.n	8006202 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061e8:	78fb      	ldrb	r3, [r7, #3]
 80061ea:	f003 020f 	and.w	r2, r3, #15
 80061ee:	4613      	mov	r3, r2
 80061f0:	00db      	lsls	r3, r3, #3
 80061f2:	4413      	add	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	3338      	adds	r3, #56	; 0x38
 80061f8:	687a      	ldr	r2, [r7, #4]
 80061fa:	4413      	add	r3, r2
 80061fc:	3304      	adds	r3, #4
 80061fe:	60fb      	str	r3, [r7, #12]
 8006200:	e00c      	b.n	800621c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006202:	78fb      	ldrb	r3, [r7, #3]
 8006204:	f003 020f 	and.w	r2, r3, #15
 8006208:	4613      	mov	r3, r2
 800620a:	00db      	lsls	r3, r3, #3
 800620c:	4413      	add	r3, r2
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	4413      	add	r3, r2
 8006218:	3304      	adds	r3, #4
 800621a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	68f9      	ldr	r1, [r7, #12]
 8006222:	4618      	mov	r0, r3
 8006224:	f005 fc46 	bl	800bab4 <USB_EPStopXfer>
 8006228:	4603      	mov	r3, r0
 800622a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800622c:	7afb      	ldrb	r3, [r7, #11]
}
 800622e:	4618      	mov	r0, r3
 8006230:	3710      	adds	r7, #16
 8006232:	46bd      	mov	sp, r7
 8006234:	bd80      	pop	{r7, pc}

08006236 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006236:	b580      	push	{r7, lr}
 8006238:	b08a      	sub	sp, #40	; 0x28
 800623a:	af02      	add	r7, sp, #8
 800623c:	6078      	str	r0, [r7, #4]
 800623e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	4613      	mov	r3, r2
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	4413      	add	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	3338      	adds	r3, #56	; 0x38
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	4413      	add	r3, r2
 800625a:	3304      	adds	r3, #4
 800625c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	6a1a      	ldr	r2, [r3, #32]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	699b      	ldr	r3, [r3, #24]
 8006266:	429a      	cmp	r2, r3
 8006268:	d901      	bls.n	800626e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e06c      	b.n	8006348 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	699a      	ldr	r2, [r3, #24]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	1ad3      	subs	r3, r2, r3
 8006278:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	69fa      	ldr	r2, [r7, #28]
 8006280:	429a      	cmp	r2, r3
 8006282:	d902      	bls.n	800628a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800628a:	69fb      	ldr	r3, [r7, #28]
 800628c:	3303      	adds	r3, #3
 800628e:	089b      	lsrs	r3, r3, #2
 8006290:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006292:	e02b      	b.n	80062ec <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	699a      	ldr	r2, [r3, #24]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	6a1b      	ldr	r3, [r3, #32]
 800629c:	1ad3      	subs	r3, r2, r3
 800629e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	69fa      	ldr	r2, [r7, #28]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d902      	bls.n	80062b0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	68db      	ldr	r3, [r3, #12]
 80062ae:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80062b0:	69fb      	ldr	r3, [r7, #28]
 80062b2:	3303      	adds	r3, #3
 80062b4:	089b      	lsrs	r3, r3, #2
 80062b6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6919      	ldr	r1, [r3, #16]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	b2da      	uxtb	r2, r3
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	4603      	mov	r3, r0
 80062ce:	6978      	ldr	r0, [r7, #20]
 80062d0:	f005 fc9a 	bl	800bc08 <USB_WritePacket>

    ep->xfer_buff  += len;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	691a      	ldr	r2, [r3, #16]
 80062d8:	69fb      	ldr	r3, [r7, #28]
 80062da:	441a      	add	r2, r3
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6a1a      	ldr	r2, [r3, #32]
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	441a      	add	r2, r3
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	015a      	lsls	r2, r3, #5
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	4413      	add	r3, r2
 80062f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f8:	699b      	ldr	r3, [r3, #24]
 80062fa:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d809      	bhi.n	8006316 <PCD_WriteEmptyTxFifo+0xe0>
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	6a1a      	ldr	r2, [r3, #32]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800630a:	429a      	cmp	r2, r3
 800630c:	d203      	bcs.n	8006316 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	699b      	ldr	r3, [r3, #24]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1be      	bne.n	8006294 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	699a      	ldr	r2, [r3, #24]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	429a      	cmp	r2, r3
 8006320:	d811      	bhi.n	8006346 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	f003 030f 	and.w	r3, r3, #15
 8006328:	2201      	movs	r2, #1
 800632a:	fa02 f303 	lsl.w	r3, r2, r3
 800632e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006330:	693b      	ldr	r3, [r7, #16]
 8006332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006338:	68bb      	ldr	r3, [r7, #8]
 800633a:	43db      	mvns	r3, r3
 800633c:	6939      	ldr	r1, [r7, #16]
 800633e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006342:	4013      	ands	r3, r2
 8006344:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006346:	2300      	movs	r3, #0
}
 8006348:	4618      	mov	r0, r3
 800634a:	3720      	adds	r7, #32
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b088      	sub	sp, #32
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	333c      	adds	r3, #60	; 0x3c
 8006368:	3304      	adds	r3, #4
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	015a      	lsls	r2, r3, #5
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	4413      	add	r3, r2
 8006376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	2b01      	cmp	r3, #1
 8006384:	d17b      	bne.n	800647e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006386:	693b      	ldr	r3, [r7, #16]
 8006388:	f003 0308 	and.w	r3, r3, #8
 800638c:	2b00      	cmp	r3, #0
 800638e:	d015      	beq.n	80063bc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	4a61      	ldr	r2, [pc, #388]	; (8006518 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006394:	4293      	cmp	r3, r2
 8006396:	f240 80b9 	bls.w	800650c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	f000 80b3 	beq.w	800650c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	015a      	lsls	r2, r3, #5
 80063aa:	69bb      	ldr	r3, [r7, #24]
 80063ac:	4413      	add	r3, r2
 80063ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b2:	461a      	mov	r2, r3
 80063b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063b8:	6093      	str	r3, [r2, #8]
 80063ba:	e0a7      	b.n	800650c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f003 0320 	and.w	r3, r3, #32
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d009      	beq.n	80063da <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	015a      	lsls	r2, r3, #5
 80063ca:	69bb      	ldr	r3, [r7, #24]
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063d2:	461a      	mov	r2, r3
 80063d4:	2320      	movs	r3, #32
 80063d6:	6093      	str	r3, [r2, #8]
 80063d8:	e098      	b.n	800650c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80063da:	693b      	ldr	r3, [r7, #16]
 80063dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f040 8093 	bne.w	800650c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	4a4b      	ldr	r2, [pc, #300]	; (8006518 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d90f      	bls.n	800640e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d00a      	beq.n	800640e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	015a      	lsls	r2, r3, #5
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	4413      	add	r3, r2
 8006400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006404:	461a      	mov	r2, r3
 8006406:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800640a:	6093      	str	r3, [r2, #8]
 800640c:	e07e      	b.n	800650c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	4613      	mov	r3, r2
 8006412:	00db      	lsls	r3, r3, #3
 8006414:	4413      	add	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800641c:	687a      	ldr	r2, [r7, #4]
 800641e:	4413      	add	r3, r2
 8006420:	3304      	adds	r3, #4
 8006422:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	69da      	ldr	r2, [r3, #28]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	0159      	lsls	r1, r3, #5
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	440b      	add	r3, r1
 8006430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006434:	691b      	ldr	r3, [r3, #16]
 8006436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800643a:	1ad2      	subs	r2, r2, r3
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d114      	bne.n	8006470 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	699b      	ldr	r3, [r3, #24]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d109      	bne.n	8006462 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006458:	461a      	mov	r2, r3
 800645a:	2101      	movs	r1, #1
 800645c:	f005 fe6a 	bl	800c134 <USB_EP0_OutStart>
 8006460:	e006      	b.n	8006470 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	691a      	ldr	r2, [r3, #16]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6a1b      	ldr	r3, [r3, #32]
 800646a:	441a      	add	r2, r3
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	b2db      	uxtb	r3, r3
 8006474:	4619      	mov	r1, r3
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f00a fe22 	bl	80110c0 <HAL_PCD_DataOutStageCallback>
 800647c:	e046      	b.n	800650c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	4a26      	ldr	r2, [pc, #152]	; (800651c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d124      	bne.n	80064d0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	015a      	lsls	r2, r3, #5
 8006494:	69bb      	ldr	r3, [r7, #24]
 8006496:	4413      	add	r3, r2
 8006498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800649c:	461a      	mov	r2, r3
 800649e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064a2:	6093      	str	r3, [r2, #8]
 80064a4:	e032      	b.n	800650c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	f003 0320 	and.w	r3, r3, #32
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d008      	beq.n	80064c2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	015a      	lsls	r2, r3, #5
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	4413      	add	r3, r2
 80064b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064bc:	461a      	mov	r2, r3
 80064be:	2320      	movs	r3, #32
 80064c0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	4619      	mov	r1, r3
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f00a fdf9 	bl	80110c0 <HAL_PCD_DataOutStageCallback>
 80064ce:	e01d      	b.n	800650c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d114      	bne.n	8006500 <PCD_EP_OutXfrComplete_int+0x1b0>
 80064d6:	6879      	ldr	r1, [r7, #4]
 80064d8:	683a      	ldr	r2, [r7, #0]
 80064da:	4613      	mov	r3, r2
 80064dc:	00db      	lsls	r3, r3, #3
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	440b      	add	r3, r1
 80064e4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d108      	bne.n	8006500 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6818      	ldr	r0, [r3, #0]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80064f8:	461a      	mov	r2, r3
 80064fa:	2100      	movs	r1, #0
 80064fc:	f005 fe1a 	bl	800c134 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	b2db      	uxtb	r3, r3
 8006504:	4619      	mov	r1, r3
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f00a fdda 	bl	80110c0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3720      	adds	r7, #32
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	4f54300a 	.word	0x4f54300a
 800651c:	4f54310a 	.word	0x4f54310a

08006520 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006530:	697b      	ldr	r3, [r7, #20]
 8006532:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	333c      	adds	r3, #60	; 0x3c
 8006538:	3304      	adds	r3, #4
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4a15      	ldr	r2, [pc, #84]	; (80065a8 <PCD_EP_OutSetupPacket_int+0x88>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d90e      	bls.n	8006574 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800655c:	2b00      	cmp	r3, #0
 800655e:	d009      	beq.n	8006574 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	015a      	lsls	r2, r3, #5
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	4413      	add	r3, r2
 8006568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800656c:	461a      	mov	r2, r3
 800656e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006572:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f00a fd91 	bl	801109c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	4a0a      	ldr	r2, [pc, #40]	; (80065a8 <PCD_EP_OutSetupPacket_int+0x88>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d90c      	bls.n	800659c <PCD_EP_OutSetupPacket_int+0x7c>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d108      	bne.n	800659c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6818      	ldr	r0, [r3, #0]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006594:	461a      	mov	r2, r3
 8006596:	2101      	movs	r1, #1
 8006598:	f005 fdcc 	bl	800c134 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800659c:	2300      	movs	r3, #0
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3718      	adds	r7, #24
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}
 80065a6:	bf00      	nop
 80065a8:	4f54300a 	.word	0x4f54300a

080065ac <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
 80065b4:	460b      	mov	r3, r1
 80065b6:	70fb      	strb	r3, [r7, #3]
 80065b8:	4613      	mov	r3, r2
 80065ba:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80065c4:	78fb      	ldrb	r3, [r7, #3]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d107      	bne.n	80065da <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80065ca:	883b      	ldrh	r3, [r7, #0]
 80065cc:	0419      	lsls	r1, r3, #16
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	68ba      	ldr	r2, [r7, #8]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	629a      	str	r2, [r3, #40]	; 0x28
 80065d8:	e028      	b.n	800662c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065e0:	0c1b      	lsrs	r3, r3, #16
 80065e2:	68ba      	ldr	r2, [r7, #8]
 80065e4:	4413      	add	r3, r2
 80065e6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065e8:	2300      	movs	r3, #0
 80065ea:	73fb      	strb	r3, [r7, #15]
 80065ec:	e00d      	b.n	800660a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	7bfb      	ldrb	r3, [r7, #15]
 80065f4:	3340      	adds	r3, #64	; 0x40
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	0c1b      	lsrs	r3, r3, #16
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	4413      	add	r3, r2
 8006602:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006604:	7bfb      	ldrb	r3, [r7, #15]
 8006606:	3301      	adds	r3, #1
 8006608:	73fb      	strb	r3, [r7, #15]
 800660a:	7bfa      	ldrb	r2, [r7, #15]
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	3b01      	subs	r3, #1
 8006610:	429a      	cmp	r2, r3
 8006612:	d3ec      	bcc.n	80065ee <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006614:	883b      	ldrh	r3, [r7, #0]
 8006616:	0418      	lsls	r0, r3, #16
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	6819      	ldr	r1, [r3, #0]
 800661c:	78fb      	ldrb	r3, [r7, #3]
 800661e:	3b01      	subs	r3, #1
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	4302      	orrs	r2, r0
 8006624:	3340      	adds	r3, #64	; 0x40
 8006626:	009b      	lsls	r3, r3, #2
 8006628:	440b      	add	r3, r1
 800662a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3714      	adds	r7, #20
 8006632:	46bd      	mov	sp, r7
 8006634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006638:	4770      	bx	lr

0800663a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800663a:	b480      	push	{r7}
 800663c:	b083      	sub	sp, #12
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	460b      	mov	r3, r1
 8006644:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	887a      	ldrh	r2, [r7, #2]
 800664c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800665c:	b480      	push	{r7}
 800665e:	b083      	sub	sp, #12
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	460b      	mov	r3, r1
 8006666:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006668:	bf00      	nop
 800666a:	370c      	adds	r7, #12
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b086      	sub	sp, #24
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d101      	bne.n	8006686 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e267      	b.n	8006b56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f003 0301 	and.w	r3, r3, #1
 800668e:	2b00      	cmp	r3, #0
 8006690:	d075      	beq.n	800677e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006692:	4b88      	ldr	r3, [pc, #544]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	f003 030c 	and.w	r3, r3, #12
 800669a:	2b04      	cmp	r3, #4
 800669c:	d00c      	beq.n	80066b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800669e:	4b85      	ldr	r3, [pc, #532]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066a6:	2b08      	cmp	r3, #8
 80066a8:	d112      	bne.n	80066d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066aa:	4b82      	ldr	r3, [pc, #520]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066b6:	d10b      	bne.n	80066d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b8:	4b7e      	ldr	r3, [pc, #504]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d05b      	beq.n	800677c <HAL_RCC_OscConfig+0x108>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d157      	bne.n	800677c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e242      	b.n	8006b56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685b      	ldr	r3, [r3, #4]
 80066d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d8:	d106      	bne.n	80066e8 <HAL_RCC_OscConfig+0x74>
 80066da:	4b76      	ldr	r3, [pc, #472]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a75      	ldr	r2, [pc, #468]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 80066e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066e4:	6013      	str	r3, [r2, #0]
 80066e6:	e01d      	b.n	8006724 <HAL_RCC_OscConfig+0xb0>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066f0:	d10c      	bne.n	800670c <HAL_RCC_OscConfig+0x98>
 80066f2:	4b70      	ldr	r3, [pc, #448]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	4a6f      	ldr	r2, [pc, #444]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 80066f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80066fc:	6013      	str	r3, [r2, #0]
 80066fe:	4b6d      	ldr	r3, [pc, #436]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a6c      	ldr	r2, [pc, #432]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 8006704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	e00b      	b.n	8006724 <HAL_RCC_OscConfig+0xb0>
 800670c:	4b69      	ldr	r3, [pc, #420]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a68      	ldr	r2, [pc, #416]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 8006712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006716:	6013      	str	r3, [r2, #0]
 8006718:	4b66      	ldr	r3, [pc, #408]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a65      	ldr	r2, [pc, #404]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 800671e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d013      	beq.n	8006754 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800672c:	f7fc fe72 	bl	8003414 <HAL_GetTick>
 8006730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006732:	e008      	b.n	8006746 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006734:	f7fc fe6e 	bl	8003414 <HAL_GetTick>
 8006738:	4602      	mov	r2, r0
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	1ad3      	subs	r3, r2, r3
 800673e:	2b64      	cmp	r3, #100	; 0x64
 8006740:	d901      	bls.n	8006746 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006742:	2303      	movs	r3, #3
 8006744:	e207      	b.n	8006b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006746:	4b5b      	ldr	r3, [pc, #364]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0f0      	beq.n	8006734 <HAL_RCC_OscConfig+0xc0>
 8006752:	e014      	b.n	800677e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006754:	f7fc fe5e 	bl	8003414 <HAL_GetTick>
 8006758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800675a:	e008      	b.n	800676e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800675c:	f7fc fe5a 	bl	8003414 <HAL_GetTick>
 8006760:	4602      	mov	r2, r0
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	2b64      	cmp	r3, #100	; 0x64
 8006768:	d901      	bls.n	800676e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800676a:	2303      	movs	r3, #3
 800676c:	e1f3      	b.n	8006b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800676e:	4b51      	ldr	r3, [pc, #324]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1f0      	bne.n	800675c <HAL_RCC_OscConfig+0xe8>
 800677a:	e000      	b.n	800677e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800677c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0302 	and.w	r3, r3, #2
 8006786:	2b00      	cmp	r3, #0
 8006788:	d063      	beq.n	8006852 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800678a:	4b4a      	ldr	r3, [pc, #296]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 800678c:	689b      	ldr	r3, [r3, #8]
 800678e:	f003 030c 	and.w	r3, r3, #12
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00b      	beq.n	80067ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006796:	4b47      	ldr	r3, [pc, #284]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800679e:	2b08      	cmp	r3, #8
 80067a0:	d11c      	bne.n	80067dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067a2:	4b44      	ldr	r3, [pc, #272]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 80067a4:	685b      	ldr	r3, [r3, #4]
 80067a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d116      	bne.n	80067dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ae:	4b41      	ldr	r3, [pc, #260]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0302 	and.w	r3, r3, #2
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d005      	beq.n	80067c6 <HAL_RCC_OscConfig+0x152>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d001      	beq.n	80067c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067c2:	2301      	movs	r3, #1
 80067c4:	e1c7      	b.n	8006b56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067c6:	4b3b      	ldr	r3, [pc, #236]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	691b      	ldr	r3, [r3, #16]
 80067d2:	00db      	lsls	r3, r3, #3
 80067d4:	4937      	ldr	r1, [pc, #220]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067da:	e03a      	b.n	8006852 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d020      	beq.n	8006826 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067e4:	4b34      	ldr	r3, [pc, #208]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 80067e6:	2201      	movs	r2, #1
 80067e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ea:	f7fc fe13 	bl	8003414 <HAL_GetTick>
 80067ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067f0:	e008      	b.n	8006804 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80067f2:	f7fc fe0f 	bl	8003414 <HAL_GetTick>
 80067f6:	4602      	mov	r2, r0
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	1ad3      	subs	r3, r2, r3
 80067fc:	2b02      	cmp	r3, #2
 80067fe:	d901      	bls.n	8006804 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e1a8      	b.n	8006b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006804:	4b2b      	ldr	r3, [pc, #172]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f003 0302 	and.w	r3, r3, #2
 800680c:	2b00      	cmp	r3, #0
 800680e:	d0f0      	beq.n	80067f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006810:	4b28      	ldr	r3, [pc, #160]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	00db      	lsls	r3, r3, #3
 800681e:	4925      	ldr	r1, [pc, #148]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 8006820:	4313      	orrs	r3, r2
 8006822:	600b      	str	r3, [r1, #0]
 8006824:	e015      	b.n	8006852 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006826:	4b24      	ldr	r3, [pc, #144]	; (80068b8 <HAL_RCC_OscConfig+0x244>)
 8006828:	2200      	movs	r2, #0
 800682a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800682c:	f7fc fdf2 	bl	8003414 <HAL_GetTick>
 8006830:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006832:	e008      	b.n	8006846 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006834:	f7fc fdee 	bl	8003414 <HAL_GetTick>
 8006838:	4602      	mov	r2, r0
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	1ad3      	subs	r3, r2, r3
 800683e:	2b02      	cmp	r3, #2
 8006840:	d901      	bls.n	8006846 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e187      	b.n	8006b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006846:	4b1b      	ldr	r3, [pc, #108]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f003 0302 	and.w	r3, r3, #2
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1f0      	bne.n	8006834 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0308 	and.w	r3, r3, #8
 800685a:	2b00      	cmp	r3, #0
 800685c:	d036      	beq.n	80068cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	695b      	ldr	r3, [r3, #20]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d016      	beq.n	8006894 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006866:	4b15      	ldr	r3, [pc, #84]	; (80068bc <HAL_RCC_OscConfig+0x248>)
 8006868:	2201      	movs	r2, #1
 800686a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800686c:	f7fc fdd2 	bl	8003414 <HAL_GetTick>
 8006870:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006872:	e008      	b.n	8006886 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006874:	f7fc fdce 	bl	8003414 <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b02      	cmp	r3, #2
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e167      	b.n	8006b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006886:	4b0b      	ldr	r3, [pc, #44]	; (80068b4 <HAL_RCC_OscConfig+0x240>)
 8006888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b00      	cmp	r3, #0
 8006890:	d0f0      	beq.n	8006874 <HAL_RCC_OscConfig+0x200>
 8006892:	e01b      	b.n	80068cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006894:	4b09      	ldr	r3, [pc, #36]	; (80068bc <HAL_RCC_OscConfig+0x248>)
 8006896:	2200      	movs	r2, #0
 8006898:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800689a:	f7fc fdbb 	bl	8003414 <HAL_GetTick>
 800689e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068a0:	e00e      	b.n	80068c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068a2:	f7fc fdb7 	bl	8003414 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d907      	bls.n	80068c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e150      	b.n	8006b56 <HAL_RCC_OscConfig+0x4e2>
 80068b4:	40023800 	.word	0x40023800
 80068b8:	42470000 	.word	0x42470000
 80068bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068c0:	4b88      	ldr	r3, [pc, #544]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 80068c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c4:	f003 0302 	and.w	r3, r3, #2
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d1ea      	bne.n	80068a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f003 0304 	and.w	r3, r3, #4
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 8097 	beq.w	8006a08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068da:	2300      	movs	r3, #0
 80068dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068de:	4b81      	ldr	r3, [pc, #516]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 80068e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d10f      	bne.n	800690a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068ea:	2300      	movs	r3, #0
 80068ec:	60bb      	str	r3, [r7, #8]
 80068ee:	4b7d      	ldr	r3, [pc, #500]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 80068f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068f2:	4a7c      	ldr	r2, [pc, #496]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 80068f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80068f8:	6413      	str	r3, [r2, #64]	; 0x40
 80068fa:	4b7a      	ldr	r3, [pc, #488]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 80068fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006902:	60bb      	str	r3, [r7, #8]
 8006904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006906:	2301      	movs	r3, #1
 8006908:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800690a:	4b77      	ldr	r3, [pc, #476]	; (8006ae8 <HAL_RCC_OscConfig+0x474>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006912:	2b00      	cmp	r3, #0
 8006914:	d118      	bne.n	8006948 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006916:	4b74      	ldr	r3, [pc, #464]	; (8006ae8 <HAL_RCC_OscConfig+0x474>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a73      	ldr	r2, [pc, #460]	; (8006ae8 <HAL_RCC_OscConfig+0x474>)
 800691c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006922:	f7fc fd77 	bl	8003414 <HAL_GetTick>
 8006926:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006928:	e008      	b.n	800693c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800692a:	f7fc fd73 	bl	8003414 <HAL_GetTick>
 800692e:	4602      	mov	r2, r0
 8006930:	693b      	ldr	r3, [r7, #16]
 8006932:	1ad3      	subs	r3, r2, r3
 8006934:	2b02      	cmp	r3, #2
 8006936:	d901      	bls.n	800693c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006938:	2303      	movs	r3, #3
 800693a:	e10c      	b.n	8006b56 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800693c:	4b6a      	ldr	r3, [pc, #424]	; (8006ae8 <HAL_RCC_OscConfig+0x474>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006944:	2b00      	cmp	r3, #0
 8006946:	d0f0      	beq.n	800692a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	689b      	ldr	r3, [r3, #8]
 800694c:	2b01      	cmp	r3, #1
 800694e:	d106      	bne.n	800695e <HAL_RCC_OscConfig+0x2ea>
 8006950:	4b64      	ldr	r3, [pc, #400]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 8006952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006954:	4a63      	ldr	r2, [pc, #396]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 8006956:	f043 0301 	orr.w	r3, r3, #1
 800695a:	6713      	str	r3, [r2, #112]	; 0x70
 800695c:	e01c      	b.n	8006998 <HAL_RCC_OscConfig+0x324>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	2b05      	cmp	r3, #5
 8006964:	d10c      	bne.n	8006980 <HAL_RCC_OscConfig+0x30c>
 8006966:	4b5f      	ldr	r3, [pc, #380]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 8006968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800696a:	4a5e      	ldr	r2, [pc, #376]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 800696c:	f043 0304 	orr.w	r3, r3, #4
 8006970:	6713      	str	r3, [r2, #112]	; 0x70
 8006972:	4b5c      	ldr	r3, [pc, #368]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 8006974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006976:	4a5b      	ldr	r2, [pc, #364]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 8006978:	f043 0301 	orr.w	r3, r3, #1
 800697c:	6713      	str	r3, [r2, #112]	; 0x70
 800697e:	e00b      	b.n	8006998 <HAL_RCC_OscConfig+0x324>
 8006980:	4b58      	ldr	r3, [pc, #352]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 8006982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006984:	4a57      	ldr	r2, [pc, #348]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 8006986:	f023 0301 	bic.w	r3, r3, #1
 800698a:	6713      	str	r3, [r2, #112]	; 0x70
 800698c:	4b55      	ldr	r3, [pc, #340]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 800698e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006990:	4a54      	ldr	r2, [pc, #336]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 8006992:	f023 0304 	bic.w	r3, r3, #4
 8006996:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d015      	beq.n	80069cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069a0:	f7fc fd38 	bl	8003414 <HAL_GetTick>
 80069a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069a6:	e00a      	b.n	80069be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069a8:	f7fc fd34 	bl	8003414 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80069b6:	4293      	cmp	r3, r2
 80069b8:	d901      	bls.n	80069be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069ba:	2303      	movs	r3, #3
 80069bc:	e0cb      	b.n	8006b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069be:	4b49      	ldr	r3, [pc, #292]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 80069c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c2:	f003 0302 	and.w	r3, r3, #2
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0ee      	beq.n	80069a8 <HAL_RCC_OscConfig+0x334>
 80069ca:	e014      	b.n	80069f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069cc:	f7fc fd22 	bl	8003414 <HAL_GetTick>
 80069d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069d2:	e00a      	b.n	80069ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069d4:	f7fc fd1e 	bl	8003414 <HAL_GetTick>
 80069d8:	4602      	mov	r2, r0
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	1ad3      	subs	r3, r2, r3
 80069de:	f241 3288 	movw	r2, #5000	; 0x1388
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e0b5      	b.n	8006b56 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069ea:	4b3e      	ldr	r3, [pc, #248]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 80069ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d1ee      	bne.n	80069d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80069f6:	7dfb      	ldrb	r3, [r7, #23]
 80069f8:	2b01      	cmp	r3, #1
 80069fa:	d105      	bne.n	8006a08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069fc:	4b39      	ldr	r3, [pc, #228]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 80069fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a00:	4a38      	ldr	r2, [pc, #224]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 8006a02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	699b      	ldr	r3, [r3, #24]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	f000 80a1 	beq.w	8006b54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a12:	4b34      	ldr	r3, [pc, #208]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	f003 030c 	and.w	r3, r3, #12
 8006a1a:	2b08      	cmp	r3, #8
 8006a1c:	d05c      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	2b02      	cmp	r3, #2
 8006a24:	d141      	bne.n	8006aaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a26:	4b31      	ldr	r3, [pc, #196]	; (8006aec <HAL_RCC_OscConfig+0x478>)
 8006a28:	2200      	movs	r2, #0
 8006a2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a2c:	f7fc fcf2 	bl	8003414 <HAL_GetTick>
 8006a30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a34:	f7fc fcee 	bl	8003414 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e087      	b.n	8006b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a46:	4b27      	ldr	r3, [pc, #156]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1f0      	bne.n	8006a34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	69da      	ldr	r2, [r3, #28]
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6a1b      	ldr	r3, [r3, #32]
 8006a5a:	431a      	orrs	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a60:	019b      	lsls	r3, r3, #6
 8006a62:	431a      	orrs	r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a68:	085b      	lsrs	r3, r3, #1
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	041b      	lsls	r3, r3, #16
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a74:	061b      	lsls	r3, r3, #24
 8006a76:	491b      	ldr	r1, [pc, #108]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 8006a78:	4313      	orrs	r3, r2
 8006a7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a7c:	4b1b      	ldr	r3, [pc, #108]	; (8006aec <HAL_RCC_OscConfig+0x478>)
 8006a7e:	2201      	movs	r2, #1
 8006a80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a82:	f7fc fcc7 	bl	8003414 <HAL_GetTick>
 8006a86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a88:	e008      	b.n	8006a9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a8a:	f7fc fcc3 	bl	8003414 <HAL_GetTick>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	1ad3      	subs	r3, r2, r3
 8006a94:	2b02      	cmp	r3, #2
 8006a96:	d901      	bls.n	8006a9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a98:	2303      	movs	r3, #3
 8006a9a:	e05c      	b.n	8006b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a9c:	4b11      	ldr	r3, [pc, #68]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d0f0      	beq.n	8006a8a <HAL_RCC_OscConfig+0x416>
 8006aa8:	e054      	b.n	8006b54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aaa:	4b10      	ldr	r3, [pc, #64]	; (8006aec <HAL_RCC_OscConfig+0x478>)
 8006aac:	2200      	movs	r2, #0
 8006aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ab0:	f7fc fcb0 	bl	8003414 <HAL_GetTick>
 8006ab4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ab6:	e008      	b.n	8006aca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ab8:	f7fc fcac 	bl	8003414 <HAL_GetTick>
 8006abc:	4602      	mov	r2, r0
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	1ad3      	subs	r3, r2, r3
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d901      	bls.n	8006aca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e045      	b.n	8006b56 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aca:	4b06      	ldr	r3, [pc, #24]	; (8006ae4 <HAL_RCC_OscConfig+0x470>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1f0      	bne.n	8006ab8 <HAL_RCC_OscConfig+0x444>
 8006ad6:	e03d      	b.n	8006b54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	699b      	ldr	r3, [r3, #24]
 8006adc:	2b01      	cmp	r3, #1
 8006ade:	d107      	bne.n	8006af0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	e038      	b.n	8006b56 <HAL_RCC_OscConfig+0x4e2>
 8006ae4:	40023800 	.word	0x40023800
 8006ae8:	40007000 	.word	0x40007000
 8006aec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006af0:	4b1b      	ldr	r3, [pc, #108]	; (8006b60 <HAL_RCC_OscConfig+0x4ec>)
 8006af2:	685b      	ldr	r3, [r3, #4]
 8006af4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	2b01      	cmp	r3, #1
 8006afc:	d028      	beq.n	8006b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d121      	bne.n	8006b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b16:	429a      	cmp	r2, r3
 8006b18:	d11a      	bne.n	8006b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b1a:	68fa      	ldr	r2, [r7, #12]
 8006b1c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b20:	4013      	ands	r3, r2
 8006b22:	687a      	ldr	r2, [r7, #4]
 8006b24:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b28:	4293      	cmp	r3, r2
 8006b2a:	d111      	bne.n	8006b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b36:	085b      	lsrs	r3, r3, #1
 8006b38:	3b01      	subs	r3, #1
 8006b3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d107      	bne.n	8006b50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d001      	beq.n	8006b54 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e000      	b.n	8006b56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b54:	2300      	movs	r3, #0
}
 8006b56:	4618      	mov	r0, r3
 8006b58:	3718      	adds	r7, #24
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	40023800 	.word	0x40023800

08006b64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b084      	sub	sp, #16
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
 8006b6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d101      	bne.n	8006b78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e0cc      	b.n	8006d12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006b78:	4b68      	ldr	r3, [pc, #416]	; (8006d1c <HAL_RCC_ClockConfig+0x1b8>)
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f003 0307 	and.w	r3, r3, #7
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d90c      	bls.n	8006ba0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b86:	4b65      	ldr	r3, [pc, #404]	; (8006d1c <HAL_RCC_ClockConfig+0x1b8>)
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	b2d2      	uxtb	r2, r2
 8006b8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b8e:	4b63      	ldr	r3, [pc, #396]	; (8006d1c <HAL_RCC_ClockConfig+0x1b8>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0307 	and.w	r3, r3, #7
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d001      	beq.n	8006ba0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e0b8      	b.n	8006d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0302 	and.w	r3, r3, #2
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d020      	beq.n	8006bee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d005      	beq.n	8006bc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bb8:	4b59      	ldr	r3, [pc, #356]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	4a58      	ldr	r2, [pc, #352]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006bbe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006bc2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f003 0308 	and.w	r3, r3, #8
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d005      	beq.n	8006bdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bd0:	4b53      	ldr	r3, [pc, #332]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	4a52      	ldr	r2, [pc, #328]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006bda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bdc:	4b50      	ldr	r3, [pc, #320]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	494d      	ldr	r1, [pc, #308]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006bea:	4313      	orrs	r3, r2
 8006bec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f003 0301 	and.w	r3, r3, #1
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d044      	beq.n	8006c84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	2b01      	cmp	r3, #1
 8006c00:	d107      	bne.n	8006c12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c02:	4b47      	ldr	r3, [pc, #284]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d119      	bne.n	8006c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e07f      	b.n	8006d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	2b02      	cmp	r3, #2
 8006c18:	d003      	beq.n	8006c22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c1e:	2b03      	cmp	r3, #3
 8006c20:	d107      	bne.n	8006c32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c22:	4b3f      	ldr	r3, [pc, #252]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d109      	bne.n	8006c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e06f      	b.n	8006d12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c32:	4b3b      	ldr	r3, [pc, #236]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e067      	b.n	8006d12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c42:	4b37      	ldr	r3, [pc, #220]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f023 0203 	bic.w	r2, r3, #3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	685b      	ldr	r3, [r3, #4]
 8006c4e:	4934      	ldr	r1, [pc, #208]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006c50:	4313      	orrs	r3, r2
 8006c52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c54:	f7fc fbde 	bl	8003414 <HAL_GetTick>
 8006c58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c5a:	e00a      	b.n	8006c72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c5c:	f7fc fbda 	bl	8003414 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e04f      	b.n	8006d12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c72:	4b2b      	ldr	r3, [pc, #172]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f003 020c 	and.w	r2, r3, #12
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	685b      	ldr	r3, [r3, #4]
 8006c7e:	009b      	lsls	r3, r3, #2
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d1eb      	bne.n	8006c5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006c84:	4b25      	ldr	r3, [pc, #148]	; (8006d1c <HAL_RCC_ClockConfig+0x1b8>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f003 0307 	and.w	r3, r3, #7
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	429a      	cmp	r2, r3
 8006c90:	d20c      	bcs.n	8006cac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c92:	4b22      	ldr	r3, [pc, #136]	; (8006d1c <HAL_RCC_ClockConfig+0x1b8>)
 8006c94:	683a      	ldr	r2, [r7, #0]
 8006c96:	b2d2      	uxtb	r2, r2
 8006c98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c9a:	4b20      	ldr	r3, [pc, #128]	; (8006d1c <HAL_RCC_ClockConfig+0x1b8>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 0307 	and.w	r3, r3, #7
 8006ca2:	683a      	ldr	r2, [r7, #0]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d001      	beq.n	8006cac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	e032      	b.n	8006d12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f003 0304 	and.w	r3, r3, #4
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d008      	beq.n	8006cca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cb8:	4b19      	ldr	r3, [pc, #100]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	4916      	ldr	r1, [pc, #88]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f003 0308 	and.w	r3, r3, #8
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d009      	beq.n	8006cea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cd6:	4b12      	ldr	r3, [pc, #72]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	00db      	lsls	r3, r3, #3
 8006ce4:	490e      	ldr	r1, [pc, #56]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce6:	4313      	orrs	r3, r2
 8006ce8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006cea:	f000 f821 	bl	8006d30 <HAL_RCC_GetSysClockFreq>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	4b0b      	ldr	r3, [pc, #44]	; (8006d20 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	091b      	lsrs	r3, r3, #4
 8006cf6:	f003 030f 	and.w	r3, r3, #15
 8006cfa:	490a      	ldr	r1, [pc, #40]	; (8006d24 <HAL_RCC_ClockConfig+0x1c0>)
 8006cfc:	5ccb      	ldrb	r3, [r1, r3]
 8006cfe:	fa22 f303 	lsr.w	r3, r2, r3
 8006d02:	4a09      	ldr	r2, [pc, #36]	; (8006d28 <HAL_RCC_ClockConfig+0x1c4>)
 8006d04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d06:	4b09      	ldr	r3, [pc, #36]	; (8006d2c <HAL_RCC_ClockConfig+0x1c8>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f7fc fb3e 	bl	800338c <HAL_InitTick>

  return HAL_OK;
 8006d10:	2300      	movs	r3, #0
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	40023c00 	.word	0x40023c00
 8006d20:	40023800 	.word	0x40023800
 8006d24:	080157f0 	.word	0x080157f0
 8006d28:	20000024 	.word	0x20000024
 8006d2c:	20000028 	.word	0x20000028

08006d30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d34:	b090      	sub	sp, #64	; 0x40
 8006d36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	637b      	str	r3, [r7, #52]	; 0x34
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d40:	2300      	movs	r3, #0
 8006d42:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006d44:	2300      	movs	r3, #0
 8006d46:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d48:	4b59      	ldr	r3, [pc, #356]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	f003 030c 	and.w	r3, r3, #12
 8006d50:	2b08      	cmp	r3, #8
 8006d52:	d00d      	beq.n	8006d70 <HAL_RCC_GetSysClockFreq+0x40>
 8006d54:	2b08      	cmp	r3, #8
 8006d56:	f200 80a1 	bhi.w	8006e9c <HAL_RCC_GetSysClockFreq+0x16c>
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d002      	beq.n	8006d64 <HAL_RCC_GetSysClockFreq+0x34>
 8006d5e:	2b04      	cmp	r3, #4
 8006d60:	d003      	beq.n	8006d6a <HAL_RCC_GetSysClockFreq+0x3a>
 8006d62:	e09b      	b.n	8006e9c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d64:	4b53      	ldr	r3, [pc, #332]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006d66:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006d68:	e09b      	b.n	8006ea2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d6a:	4b53      	ldr	r3, [pc, #332]	; (8006eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006d6e:	e098      	b.n	8006ea2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d70:	4b4f      	ldr	r3, [pc, #316]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d78:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d7a:	4b4d      	ldr	r3, [pc, #308]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d028      	beq.n	8006dd8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d86:	4b4a      	ldr	r3, [pc, #296]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	099b      	lsrs	r3, r3, #6
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	623b      	str	r3, [r7, #32]
 8006d90:	627a      	str	r2, [r7, #36]	; 0x24
 8006d92:	6a3b      	ldr	r3, [r7, #32]
 8006d94:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006d98:	2100      	movs	r1, #0
 8006d9a:	4b47      	ldr	r3, [pc, #284]	; (8006eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d9c:	fb03 f201 	mul.w	r2, r3, r1
 8006da0:	2300      	movs	r3, #0
 8006da2:	fb00 f303 	mul.w	r3, r0, r3
 8006da6:	4413      	add	r3, r2
 8006da8:	4a43      	ldr	r2, [pc, #268]	; (8006eb8 <HAL_RCC_GetSysClockFreq+0x188>)
 8006daa:	fba0 1202 	umull	r1, r2, r0, r2
 8006dae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006db0:	460a      	mov	r2, r1
 8006db2:	62ba      	str	r2, [r7, #40]	; 0x28
 8006db4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006db6:	4413      	add	r3, r2
 8006db8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	61bb      	str	r3, [r7, #24]
 8006dc0:	61fa      	str	r2, [r7, #28]
 8006dc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dc6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006dca:	f7f9 ff3d 	bl	8000c48 <__aeabi_uldivmod>
 8006dce:	4602      	mov	r2, r0
 8006dd0:	460b      	mov	r3, r1
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006dd6:	e053      	b.n	8006e80 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dd8:	4b35      	ldr	r3, [pc, #212]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	099b      	lsrs	r3, r3, #6
 8006dde:	2200      	movs	r2, #0
 8006de0:	613b      	str	r3, [r7, #16]
 8006de2:	617a      	str	r2, [r7, #20]
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006dea:	f04f 0b00 	mov.w	fp, #0
 8006dee:	4652      	mov	r2, sl
 8006df0:	465b      	mov	r3, fp
 8006df2:	f04f 0000 	mov.w	r0, #0
 8006df6:	f04f 0100 	mov.w	r1, #0
 8006dfa:	0159      	lsls	r1, r3, #5
 8006dfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e00:	0150      	lsls	r0, r2, #5
 8006e02:	4602      	mov	r2, r0
 8006e04:	460b      	mov	r3, r1
 8006e06:	ebb2 080a 	subs.w	r8, r2, sl
 8006e0a:	eb63 090b 	sbc.w	r9, r3, fp
 8006e0e:	f04f 0200 	mov.w	r2, #0
 8006e12:	f04f 0300 	mov.w	r3, #0
 8006e16:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006e1a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006e1e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006e22:	ebb2 0408 	subs.w	r4, r2, r8
 8006e26:	eb63 0509 	sbc.w	r5, r3, r9
 8006e2a:	f04f 0200 	mov.w	r2, #0
 8006e2e:	f04f 0300 	mov.w	r3, #0
 8006e32:	00eb      	lsls	r3, r5, #3
 8006e34:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e38:	00e2      	lsls	r2, r4, #3
 8006e3a:	4614      	mov	r4, r2
 8006e3c:	461d      	mov	r5, r3
 8006e3e:	eb14 030a 	adds.w	r3, r4, sl
 8006e42:	603b      	str	r3, [r7, #0]
 8006e44:	eb45 030b 	adc.w	r3, r5, fp
 8006e48:	607b      	str	r3, [r7, #4]
 8006e4a:	f04f 0200 	mov.w	r2, #0
 8006e4e:	f04f 0300 	mov.w	r3, #0
 8006e52:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e56:	4629      	mov	r1, r5
 8006e58:	028b      	lsls	r3, r1, #10
 8006e5a:	4621      	mov	r1, r4
 8006e5c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e60:	4621      	mov	r1, r4
 8006e62:	028a      	lsls	r2, r1, #10
 8006e64:	4610      	mov	r0, r2
 8006e66:	4619      	mov	r1, r3
 8006e68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	60bb      	str	r3, [r7, #8]
 8006e6e:	60fa      	str	r2, [r7, #12]
 8006e70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e74:	f7f9 fee8 	bl	8000c48 <__aeabi_uldivmod>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	4613      	mov	r3, r2
 8006e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006e80:	4b0b      	ldr	r3, [pc, #44]	; (8006eb0 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	0c1b      	lsrs	r3, r3, #16
 8006e86:	f003 0303 	and.w	r3, r3, #3
 8006e8a:	3301      	adds	r3, #1
 8006e8c:	005b      	lsls	r3, r3, #1
 8006e8e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006e90:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006e9a:	e002      	b.n	8006ea2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e9c:	4b05      	ldr	r3, [pc, #20]	; (8006eb4 <HAL_RCC_GetSysClockFreq+0x184>)
 8006e9e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006ea0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3740      	adds	r7, #64	; 0x40
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006eae:	bf00      	nop
 8006eb0:	40023800 	.word	0x40023800
 8006eb4:	00f42400 	.word	0x00f42400
 8006eb8:	00b71b00 	.word	0x00b71b00

08006ebc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ec0:	4b03      	ldr	r3, [pc, #12]	; (8006ed0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	20000024 	.word	0x20000024

08006ed4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ed8:	f7ff fff0 	bl	8006ebc <HAL_RCC_GetHCLKFreq>
 8006edc:	4602      	mov	r2, r0
 8006ede:	4b05      	ldr	r3, [pc, #20]	; (8006ef4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ee0:	689b      	ldr	r3, [r3, #8]
 8006ee2:	0a9b      	lsrs	r3, r3, #10
 8006ee4:	f003 0307 	and.w	r3, r3, #7
 8006ee8:	4903      	ldr	r1, [pc, #12]	; (8006ef8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006eea:	5ccb      	ldrb	r3, [r1, r3]
 8006eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	bd80      	pop	{r7, pc}
 8006ef4:	40023800 	.word	0x40023800
 8006ef8:	08015800 	.word	0x08015800

08006efc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f00:	f7ff ffdc 	bl	8006ebc <HAL_RCC_GetHCLKFreq>
 8006f04:	4602      	mov	r2, r0
 8006f06:	4b05      	ldr	r3, [pc, #20]	; (8006f1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	0b5b      	lsrs	r3, r3, #13
 8006f0c:	f003 0307 	and.w	r3, r3, #7
 8006f10:	4903      	ldr	r1, [pc, #12]	; (8006f20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f12:	5ccb      	ldrb	r3, [r1, r3]
 8006f14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	bd80      	pop	{r7, pc}
 8006f1c:	40023800 	.word	0x40023800
 8006f20:	08015800 	.word	0x08015800

08006f24 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8006f24:	b580      	push	{r7, lr}
 8006f26:	b082      	sub	sp, #8
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d101      	bne.n	8006f36 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e022      	b.n	8006f7c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d105      	bne.n	8006f4e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f7fb ff1f 	bl	8002d8c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2203      	movs	r2, #3
 8006f52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 f814 	bl	8006f84 <HAL_SD_InitCard>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e00a      	b.n	8006f7c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2201      	movs	r2, #1
 8006f76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3708      	adds	r7, #8
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bd80      	pop	{r7, pc}

08006f84 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006f84:	b5b0      	push	{r4, r5, r7, lr}
 8006f86:	b08e      	sub	sp, #56	; 0x38
 8006f88:	af04      	add	r7, sp, #16
 8006f8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8006f90:	2300      	movs	r3, #0
 8006f92:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8006f94:	2300      	movs	r3, #0
 8006f96:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8006fa0:	2376      	movs	r3, #118	; 0x76
 8006fa2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681d      	ldr	r5, [r3, #0]
 8006fa8:	466c      	mov	r4, sp
 8006faa:	f107 0314 	add.w	r3, r7, #20
 8006fae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006fb2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006fb6:	f107 0308 	add.w	r3, r7, #8
 8006fba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006fbc:	4628      	mov	r0, r5
 8006fbe:	f002 ff89 	bl	8009ed4 <SDIO_Init>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8006fc8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d001      	beq.n	8006fd4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e04f      	b.n	8007074 <HAL_SD_InitCard+0xf0>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8006fd4:	4b29      	ldr	r3, [pc, #164]	; (800707c <HAL_SD_InitCard+0xf8>)
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f002 ffc1 	bl	8009f66 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8006fe4:	4b25      	ldr	r3, [pc, #148]	; (800707c <HAL_SD_InitCard+0xf8>)
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	601a      	str	r2, [r3, #0]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8006fea:	2002      	movs	r0, #2
 8006fec:	f7fc fa1e 	bl	800342c <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f001 f805 	bl	8008000 <SD_PowerON>
 8006ff6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00b      	beq.n	8007016 <HAL_SD_InitCard+0x92>
  {
    hsd->State = HAL_SD_STATE_READY;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2201      	movs	r2, #1
 8007002:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800700a:	6a3b      	ldr	r3, [r7, #32]
 800700c:	431a      	orrs	r2, r3
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007012:	2301      	movs	r3, #1
 8007014:	e02e      	b.n	8007074 <HAL_SD_InitCard+0xf0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 ff24 	bl	8007e64 <SD_InitCard>
 800701c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800701e:	6a3b      	ldr	r3, [r7, #32]
 8007020:	2b00      	cmp	r3, #0
 8007022:	d00b      	beq.n	800703c <HAL_SD_InitCard+0xb8>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007030:	6a3b      	ldr	r3, [r7, #32]
 8007032:	431a      	orrs	r2, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007038:	2301      	movs	r3, #1
 800703a:	e01b      	b.n	8007074 <HAL_SD_InitCard+0xf0>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007044:	4618      	mov	r0, r3
 8007046:	f003 f820 	bl	800a08a <SDMMC_CmdBlockLength>
 800704a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800704c:	6a3b      	ldr	r3, [r7, #32]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00f      	beq.n	8007072 <HAL_SD_InitCard+0xee>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	4a0a      	ldr	r2, [pc, #40]	; (8007080 <HAL_SD_InitCard+0xfc>)
 8007058:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800705e:	6a3b      	ldr	r3, [r7, #32]
 8007060:	431a      	orrs	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	2201      	movs	r2, #1
 800706a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800706e:	2301      	movs	r3, #1
 8007070:	e000      	b.n	8007074 <HAL_SD_InitCard+0xf0>
  }

  return HAL_OK;
 8007072:	2300      	movs	r3, #0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3728      	adds	r7, #40	; 0x28
 8007078:	46bd      	mov	sp, r7
 800707a:	bdb0      	pop	{r4, r5, r7, pc}
 800707c:	422580a0 	.word	0x422580a0
 8007080:	004005ff 	.word	0x004005ff

08007084 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b08c      	sub	sp, #48	; 0x30
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
 8007090:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d107      	bne.n	80070ac <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070a0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	e0c0      	b.n	800722e <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	f040 80b9 	bne.w	800722c <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2200      	movs	r2, #0
 80070be:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80070c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	441a      	add	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d907      	bls.n	80070de <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070d2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80070da:	2301      	movs	r3, #1
 80070dc:	e0a7      	b.n	800722e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	2203      	movs	r2, #3
 80070e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2200      	movs	r2, #0
 80070ec:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070f4:	68fa      	ldr	r2, [r7, #12]
 80070f6:	6812      	ldr	r2, [r2, #0]
 80070f8:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80070fc:	f043 0302 	orr.w	r3, r3, #2
 8007100:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007106:	4a4c      	ldr	r2, [pc, #304]	; (8007238 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8007108:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710e:	4a4b      	ldr	r2, [pc, #300]	; (800723c <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8007110:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007116:	2200      	movs	r2, #0
 8007118:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800711e:	2200      	movs	r2, #0
 8007120:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007132:	689a      	ldr	r2, [r3, #8]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	3380      	adds	r3, #128	; 0x80
 8007148:	4619      	mov	r1, r3
 800714a:	68ba      	ldr	r2, [r7, #8]
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	025b      	lsls	r3, r3, #9
 8007150:	089b      	lsrs	r3, r3, #2
 8007152:	f7fc fb4f 	bl	80037f4 <HAL_DMA_Start_IT>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d017      	beq.n	800718c <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800716a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a33      	ldr	r2, [pc, #204]	; (8007240 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007172:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007178:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007188:	2301      	movs	r3, #1
 800718a:	e050      	b.n	800722e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800718c:	4b2d      	ldr	r3, [pc, #180]	; (8007244 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800718e:	2201      	movs	r2, #1
 8007190:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007196:	2b01      	cmp	r3, #1
 8007198:	d002      	beq.n	80071a0 <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 800719a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719c:	025b      	lsls	r3, r3, #9
 800719e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80071a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071a4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	025b      	lsls	r3, r3, #9
 80071aa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80071ac:	2390      	movs	r3, #144	; 0x90
 80071ae:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80071b0:	2302      	movs	r3, #2
 80071b2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80071b4:	2300      	movs	r3, #0
 80071b6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80071b8:	2301      	movs	r3, #1
 80071ba:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f107 0210 	add.w	r2, r7, #16
 80071c4:	4611      	mov	r1, r2
 80071c6:	4618      	mov	r0, r3
 80071c8:	f002 ff33 	bl	800a032 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d90a      	bls.n	80071e8 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2282      	movs	r2, #130	; 0x82
 80071d6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071de:	4618      	mov	r0, r3
 80071e0:	f002 ff97 	bl	800a112 <SDMMC_CmdReadMultiBlock>
 80071e4:	62f8      	str	r0, [r7, #44]	; 0x2c
 80071e6:	e009      	b.n	80071fc <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2281      	movs	r2, #129	; 0x81
 80071ec:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80071f4:	4618      	mov	r0, r3
 80071f6:	f002 ff6a 	bl	800a0ce <SDMMC_CmdReadSingleBlock>
 80071fa:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80071fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d012      	beq.n	8007228 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a0e      	ldr	r2, [pc, #56]	; (8007240 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8007208:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800720e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007210:	431a      	orrs	r2, r3
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	2201      	movs	r2, #1
 800721a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007224:	2301      	movs	r3, #1
 8007226:	e002      	b.n	800722e <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	e000      	b.n	800722e <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 800722c:	2302      	movs	r3, #2
  }
}
 800722e:	4618      	mov	r0, r3
 8007230:	3730      	adds	r7, #48	; 0x30
 8007232:	46bd      	mov	sp, r7
 8007234:	bd80      	pop	{r7, pc}
 8007236:	bf00      	nop
 8007238:	08007c73 	.word	0x08007c73
 800723c:	08007ce5 	.word	0x08007ce5
 8007240:	004005ff 	.word	0x004005ff
 8007244:	4225858c 	.word	0x4225858c

08007248 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08c      	sub	sp, #48	; 0x30
 800724c:	af00      	add	r7, sp, #0
 800724e:	60f8      	str	r0, [r7, #12]
 8007250:	60b9      	str	r1, [r7, #8]
 8007252:	607a      	str	r2, [r7, #4]
 8007254:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d107      	bne.n	8007270 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007264:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800726c:	2301      	movs	r3, #1
 800726e:	e0c5      	b.n	80073fc <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b01      	cmp	r3, #1
 800727a:	f040 80be 	bne.w	80073fa <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007284:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	441a      	add	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800728e:	429a      	cmp	r2, r3
 8007290:	d907      	bls.n	80072a2 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007296:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e0ac      	b.n	80073fc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2203      	movs	r2, #3
 80072a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	2200      	movs	r2, #0
 80072b0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072b8:	68fa      	ldr	r2, [r7, #12]
 80072ba:	6812      	ldr	r2, [r2, #0]
 80072bc:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80072c0:	f043 0302 	orr.w	r3, r3, #2
 80072c4:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ca:	4a4e      	ldr	r2, [pc, #312]	; (8007404 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80072cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072d2:	4a4d      	ldr	r2, [pc, #308]	; (8007408 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80072d4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072da:	2200      	movs	r2, #0
 80072dc:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d002      	beq.n	80072ec <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80072e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072e8:	025b      	lsls	r3, r3, #9
 80072ea:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d90a      	bls.n	8007308 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	22a0      	movs	r2, #160	; 0xa0
 80072f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072fe:	4618      	mov	r0, r3
 8007300:	f002 ff4b 	bl	800a19a <SDMMC_CmdWriteMultiBlock>
 8007304:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007306:	e009      	b.n	800731c <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2290      	movs	r2, #144	; 0x90
 800730c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007314:	4618      	mov	r0, r3
 8007316:	f002 ff1e 	bl	800a156 <SDMMC_CmdWriteSingleBlock>
 800731a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800731c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800731e:	2b00      	cmp	r3, #0
 8007320:	d012      	beq.n	8007348 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a39      	ldr	r2, [pc, #228]	; (800740c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8007328:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800732e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007330:	431a      	orrs	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2201      	movs	r2, #1
 800733a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2200      	movs	r2, #0
 8007342:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007344:	2301      	movs	r3, #1
 8007346:	e059      	b.n	80073fc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007348:	4b31      	ldr	r3, [pc, #196]	; (8007410 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800734a:	2201      	movs	r2, #1
 800734c:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007352:	2240      	movs	r2, #64	; 0x40
 8007354:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007366:	689a      	ldr	r2, [r3, #8]
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007376:	68b9      	ldr	r1, [r7, #8]
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3380      	adds	r3, #128	; 0x80
 800737e:	461a      	mov	r2, r3
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	025b      	lsls	r3, r3, #9
 8007384:	089b      	lsrs	r3, r3, #2
 8007386:	f7fc fa35 	bl	80037f4 <HAL_DMA_Start_IT>
 800738a:	4603      	mov	r3, r0
 800738c:	2b00      	cmp	r3, #0
 800738e:	d01c      	beq.n	80073ca <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007396:	68fa      	ldr	r2, [r7, #12]
 8007398:	6812      	ldr	r2, [r2, #0]
 800739a:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800739e:	f023 0302 	bic.w	r3, r3, #2
 80073a2:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a18      	ldr	r2, [pc, #96]	; (800740c <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80073aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e018      	b.n	80073fc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80073ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80073ce:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80073d0:	683b      	ldr	r3, [r7, #0]
 80073d2:	025b      	lsls	r3, r3, #9
 80073d4:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80073d6:	2390      	movs	r3, #144	; 0x90
 80073d8:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80073da:	2300      	movs	r3, #0
 80073dc:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80073de:	2300      	movs	r3, #0
 80073e0:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80073e2:	2301      	movs	r3, #1
 80073e4:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f107 0210 	add.w	r2, r7, #16
 80073ee:	4611      	mov	r1, r2
 80073f0:	4618      	mov	r0, r3
 80073f2:	f002 fe1e 	bl	800a032 <SDIO_ConfigData>

      return HAL_OK;
 80073f6:	2300      	movs	r3, #0
 80073f8:	e000      	b.n	80073fc <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80073fa:	2302      	movs	r3, #2
  }
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3730      	adds	r7, #48	; 0x30
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}
 8007404:	08007c49 	.word	0x08007c49
 8007408:	08007ce5 	.word	0x08007ce5
 800740c:	004005ff 	.word	0x004005ff
 8007410:	4225858c 	.word	0x4225858c

08007414 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007420:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d008      	beq.n	8007442 <HAL_SD_IRQHandler+0x2e>
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	f003 0308 	and.w	r3, r3, #8
 8007436:	2b00      	cmp	r3, #0
 8007438:	d003      	beq.n	8007442 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800743a:	6878      	ldr	r0, [r7, #4]
 800743c:	f000 ffff 	bl	800843e <SD_Read_IT>
 8007440:	e165      	b.n	800770e <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007448:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 808f 	beq.w	8007570 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f44f 7280 	mov.w	r2, #256	; 0x100
 800745a:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007462:	687a      	ldr	r2, [r7, #4]
 8007464:	6812      	ldr	r2, [r2, #0]
 8007466:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 800746a:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800746e:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	f022 0201 	bic.w	r2, r2, #1
 800747e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f003 0308 	and.w	r3, r3, #8
 8007486:	2b00      	cmp	r3, #0
 8007488:	d039      	beq.n	80074fe <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d104      	bne.n	800749e <HAL_SD_IRQHandler+0x8a>
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f003 0320 	and.w	r3, r3, #32
 800749a:	2b00      	cmp	r3, #0
 800749c:	d011      	beq.n	80074c2 <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4618      	mov	r0, r3
 80074a4:	f002 fe9c 	bl	800a1e0 <SDMMC_CmdStopTransfer>
 80074a8:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d008      	beq.n	80074c2 <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	431a      	orrs	r2, r3
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 f92f 	bl	8007720 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f240 523a 	movw	r2, #1338	; 0x53a
 80074ca:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f003 0301 	and.w	r3, r3, #1
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d104      	bne.n	80074ee <HAL_SD_IRQHandler+0xda>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	f003 0302 	and.w	r3, r3, #2
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d003      	beq.n	80074f6 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f004 ff58 	bl	800c3a4 <HAL_SD_RxCpltCallback>
 80074f4:	e10b      	b.n	800770e <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80074f6:	6878      	ldr	r0, [r7, #4]
 80074f8:	f004 ff4a 	bl	800c390 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80074fc:	e107      	b.n	800770e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007504:	2b00      	cmp	r3, #0
 8007506:	f000 8102 	beq.w	800770e <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	f003 0320 	and.w	r3, r3, #32
 8007510:	2b00      	cmp	r3, #0
 8007512:	d011      	beq.n	8007538 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4618      	mov	r0, r3
 800751a:	f002 fe61 	bl	800a1e0 <SDMMC_CmdStopTransfer>
 800751e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8007520:	68bb      	ldr	r3, [r7, #8]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d008      	beq.n	8007538 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	431a      	orrs	r2, r3
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f8f4 	bl	8007720 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f003 0301 	and.w	r3, r3, #1
 800753e:	2b00      	cmp	r3, #0
 8007540:	f040 80e5 	bne.w	800770e <HAL_SD_IRQHandler+0x2fa>
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	f003 0302 	and.w	r3, r3, #2
 800754a:	2b00      	cmp	r3, #0
 800754c:	f040 80df 	bne.w	800770e <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 0208 	bic.w	r2, r2, #8
 800755e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8007568:	6878      	ldr	r0, [r7, #4]
 800756a:	f004 ff11 	bl	800c390 <HAL_SD_TxCpltCallback>
}
 800756e:	e0ce      	b.n	800770e <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007576:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d008      	beq.n	8007590 <HAL_SD_IRQHandler+0x17c>
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	f003 0308 	and.w	r3, r3, #8
 8007584:	2b00      	cmp	r3, #0
 8007586:	d003      	beq.n	8007590 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 ffa9 	bl	80084e0 <SD_Write_IT>
 800758e:	e0be      	b.n	800770e <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007596:	f240 233a 	movw	r3, #570	; 0x23a
 800759a:	4013      	ands	r3, r2
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 80b6 	beq.w	800770e <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075a8:	f003 0302 	and.w	r3, r3, #2
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d005      	beq.n	80075bc <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b4:	f043 0202 	orr.w	r2, r3, #2
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075c2:	f003 0308 	and.w	r3, r3, #8
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d005      	beq.n	80075d6 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ce:	f043 0208 	orr.w	r2, r3, #8
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075dc:	f003 0320 	and.w	r3, r3, #32
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d005      	beq.n	80075f0 <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075e8:	f043 0220 	orr.w	r2, r3, #32
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075f6:	f003 0310 	and.w	r3, r3, #16
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d005      	beq.n	800760a <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007602:	f043 0210 	orr.w	r2, r3, #16
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007610:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007614:	2b00      	cmp	r3, #0
 8007616:	d005      	beq.n	8007624 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761c:	f043 0208 	orr.w	r2, r3, #8
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f240 723a 	movw	r2, #1850	; 0x73a
 800762c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	6812      	ldr	r2, [r2, #0]
 8007638:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 800763c:	f023 0302 	bic.w	r3, r3, #2
 8007640:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4618      	mov	r0, r3
 8007648:	f002 fdca 	bl	800a1e0 <SDMMC_CmdStopTransfer>
 800764c:	4602      	mov	r2, r0
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007652:	431a      	orrs	r2, r3
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	f003 0308 	and.w	r3, r3, #8
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00a      	beq.n	8007678 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f000 f855 	bl	8007720 <HAL_SD_ErrorCallback>
}
 8007676:	e04a      	b.n	800770e <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800767e:	2b00      	cmp	r3, #0
 8007680:	d045      	beq.n	800770e <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	f003 0310 	and.w	r3, r3, #16
 8007688:	2b00      	cmp	r3, #0
 800768a:	d104      	bne.n	8007696 <HAL_SD_IRQHandler+0x282>
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	f003 0320 	and.w	r3, r3, #32
 8007692:	2b00      	cmp	r3, #0
 8007694:	d011      	beq.n	80076ba <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800769a:	4a1f      	ldr	r2, [pc, #124]	; (8007718 <HAL_SD_IRQHandler+0x304>)
 800769c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fc f96e 	bl	8003984 <HAL_DMA_Abort_IT>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d02f      	beq.n	800770e <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 fb68 	bl	8007d88 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80076b8:	e029      	b.n	800770e <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	f003 0301 	and.w	r3, r3, #1
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d104      	bne.n	80076ce <HAL_SD_IRQHandler+0x2ba>
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f003 0302 	and.w	r3, r3, #2
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d011      	beq.n	80076f2 <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d2:	4a12      	ldr	r2, [pc, #72]	; (800771c <HAL_SD_IRQHandler+0x308>)
 80076d4:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076da:	4618      	mov	r0, r3
 80076dc:	f7fc f952 	bl	8003984 <HAL_DMA_Abort_IT>
 80076e0:	4603      	mov	r3, r0
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d013      	beq.n	800770e <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076ea:	4618      	mov	r0, r3
 80076ec:	f000 fb83 	bl	8007df6 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80076f0:	e00d      	b.n	800770e <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2201      	movs	r2, #1
 80076fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2200      	movs	r2, #0
 8007704:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f004 fe38 	bl	800c37c <HAL_SD_AbortCallback>
}
 800770c:	e7ff      	b.n	800770e <HAL_SD_IRQHandler+0x2fa>
 800770e:	bf00      	nop
 8007710:	3710      	adds	r7, #16
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	08007d89 	.word	0x08007d89
 800771c:	08007df7 	.word	0x08007df7

08007720 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007720:	b480      	push	{r7}
 8007722:	b083      	sub	sp, #12
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8007728:	bf00      	nop
 800772a:	370c      	adds	r7, #12
 800772c:	46bd      	mov	sp, r7
 800772e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007732:	4770      	bx	lr

08007734 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007734:	b480      	push	{r7}
 8007736:	b083      	sub	sp, #12
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
 800773c:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007742:	0f9b      	lsrs	r3, r3, #30
 8007744:	b2da      	uxtb	r2, r3
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800774e:	0e9b      	lsrs	r3, r3, #26
 8007750:	b2db      	uxtb	r3, r3
 8007752:	f003 030f 	and.w	r3, r3, #15
 8007756:	b2da      	uxtb	r2, r3
 8007758:	683b      	ldr	r3, [r7, #0]
 800775a:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007760:	0e1b      	lsrs	r3, r3, #24
 8007762:	b2db      	uxtb	r3, r3
 8007764:	f003 0303 	and.w	r3, r3, #3
 8007768:	b2da      	uxtb	r2, r3
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007772:	0c1b      	lsrs	r3, r3, #16
 8007774:	b2da      	uxtb	r2, r3
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800777e:	0a1b      	lsrs	r3, r3, #8
 8007780:	b2da      	uxtb	r2, r3
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800778a:	b2da      	uxtb	r2, r3
 800778c:	683b      	ldr	r3, [r7, #0]
 800778e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007794:	0d1b      	lsrs	r3, r3, #20
 8007796:	b29a      	uxth	r2, r3
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077a0:	0c1b      	lsrs	r3, r3, #16
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	f003 030f 	and.w	r3, r3, #15
 80077a8:	b2da      	uxtb	r2, r3
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077b2:	0bdb      	lsrs	r3, r3, #15
 80077b4:	b2db      	uxtb	r3, r3
 80077b6:	f003 0301 	and.w	r3, r3, #1
 80077ba:	b2da      	uxtb	r2, r3
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077c4:	0b9b      	lsrs	r3, r3, #14
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	f003 0301 	and.w	r3, r3, #1
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077d6:	0b5b      	lsrs	r3, r3, #13
 80077d8:	b2db      	uxtb	r3, r3
 80077da:	f003 0301 	and.w	r3, r3, #1
 80077de:	b2da      	uxtb	r2, r3
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80077e8:	0b1b      	lsrs	r3, r3, #12
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	f003 0301 	and.w	r3, r3, #1
 80077f0:	b2da      	uxtb	r2, r3
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	2200      	movs	r2, #0
 80077fa:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007800:	2b00      	cmp	r3, #0
 8007802:	d163      	bne.n	80078cc <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007808:	009a      	lsls	r2, r3, #2
 800780a:	f640 73fc 	movw	r3, #4092	; 0xffc
 800780e:	4013      	ands	r3, r2
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007814:	0f92      	lsrs	r2, r2, #30
 8007816:	431a      	orrs	r2, r3
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007820:	0edb      	lsrs	r3, r3, #27
 8007822:	b2db      	uxtb	r3, r3
 8007824:	f003 0307 	and.w	r3, r3, #7
 8007828:	b2da      	uxtb	r2, r3
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007832:	0e1b      	lsrs	r3, r3, #24
 8007834:	b2db      	uxtb	r3, r3
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	b2da      	uxtb	r2, r3
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007844:	0d5b      	lsrs	r3, r3, #21
 8007846:	b2db      	uxtb	r3, r3
 8007848:	f003 0307 	and.w	r3, r3, #7
 800784c:	b2da      	uxtb	r2, r3
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007856:	0c9b      	lsrs	r3, r3, #18
 8007858:	b2db      	uxtb	r3, r3
 800785a:	f003 0307 	and.w	r3, r3, #7
 800785e:	b2da      	uxtb	r2, r3
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007868:	0bdb      	lsrs	r3, r3, #15
 800786a:	b2db      	uxtb	r3, r3
 800786c:	f003 0307 	and.w	r3, r3, #7
 8007870:	b2da      	uxtb	r2, r3
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	1c5a      	adds	r2, r3, #1
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	7e1b      	ldrb	r3, [r3, #24]
 8007884:	b2db      	uxtb	r3, r3
 8007886:	f003 0307 	and.w	r3, r3, #7
 800788a:	3302      	adds	r3, #2
 800788c:	2201      	movs	r2, #1
 800788e:	fa02 f303 	lsl.w	r3, r2, r3
 8007892:	687a      	ldr	r2, [r7, #4]
 8007894:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007896:	fb03 f202 	mul.w	r2, r3, r2
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	7a1b      	ldrb	r3, [r3, #8]
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	f003 030f 	and.w	r3, r3, #15
 80078a8:	2201      	movs	r2, #1
 80078aa:	409a      	lsls	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b4:	687a      	ldr	r2, [r7, #4]
 80078b6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80078b8:	0a52      	lsrs	r2, r2, #9
 80078ba:	fb03 f202 	mul.w	r2, r3, r2
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078c8:	661a      	str	r2, [r3, #96]	; 0x60
 80078ca:	e031      	b.n	8007930 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d11d      	bne.n	8007910 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80078d8:	041b      	lsls	r3, r3, #16
 80078da:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078e2:	0c1b      	lsrs	r3, r3, #16
 80078e4:	431a      	orrs	r2, r3
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	3301      	adds	r3, #1
 80078f0:	029a      	lsls	r2, r3, #10
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007904:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	661a      	str	r2, [r3, #96]	; 0x60
 800790e:	e00f      	b.n	8007930 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	4a58      	ldr	r2, [pc, #352]	; (8007a78 <HAL_SD_GetCardCSD+0x344>)
 8007916:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800791c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e09d      	b.n	8007a6c <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007934:	0b9b      	lsrs	r3, r3, #14
 8007936:	b2db      	uxtb	r3, r3
 8007938:	f003 0301 	and.w	r3, r3, #1
 800793c:	b2da      	uxtb	r2, r3
 800793e:	683b      	ldr	r3, [r7, #0]
 8007940:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007946:	09db      	lsrs	r3, r3, #7
 8007948:	b2db      	uxtb	r3, r3
 800794a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800794e:	b2da      	uxtb	r2, r3
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007958:	b2db      	uxtb	r3, r3
 800795a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800795e:	b2da      	uxtb	r2, r3
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007968:	0fdb      	lsrs	r3, r3, #31
 800796a:	b2da      	uxtb	r2, r3
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007974:	0f5b      	lsrs	r3, r3, #29
 8007976:	b2db      	uxtb	r3, r3
 8007978:	f003 0303 	and.w	r3, r3, #3
 800797c:	b2da      	uxtb	r2, r3
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007986:	0e9b      	lsrs	r3, r3, #26
 8007988:	b2db      	uxtb	r3, r3
 800798a:	f003 0307 	and.w	r3, r3, #7
 800798e:	b2da      	uxtb	r2, r3
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007998:	0d9b      	lsrs	r3, r3, #22
 800799a:	b2db      	uxtb	r3, r3
 800799c:	f003 030f 	and.w	r3, r3, #15
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	683b      	ldr	r3, [r7, #0]
 80079a4:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079aa:	0d5b      	lsrs	r3, r3, #21
 80079ac:	b2db      	uxtb	r3, r3
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	b2da      	uxtb	r2, r3
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2200      	movs	r2, #0
 80079be:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079c6:	0c1b      	lsrs	r3, r3, #16
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079da:	0bdb      	lsrs	r3, r3, #15
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	b2da      	uxtb	r2, r3
 80079e4:	683b      	ldr	r3, [r7, #0]
 80079e6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079ee:	0b9b      	lsrs	r3, r3, #14
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	b2da      	uxtb	r2, r3
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a02:	0b5b      	lsrs	r3, r3, #13
 8007a04:	b2db      	uxtb	r3, r3
 8007a06:	f003 0301 	and.w	r3, r3, #1
 8007a0a:	b2da      	uxtb	r2, r3
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a16:	0b1b      	lsrs	r3, r3, #12
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	f003 0301 	and.w	r3, r3, #1
 8007a1e:	b2da      	uxtb	r2, r3
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2a:	0a9b      	lsrs	r3, r3, #10
 8007a2c:	b2db      	uxtb	r3, r3
 8007a2e:	f003 0303 	and.w	r3, r3, #3
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a3e:	0a1b      	lsrs	r3, r3, #8
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	f003 0303 	and.w	r3, r3, #3
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a52:	085b      	lsrs	r3, r3, #1
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a5a:	b2da      	uxtb	r2, r3
 8007a5c:	683b      	ldr	r3, [r7, #0]
 8007a5e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007a6a:	2300      	movs	r3, #0
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	370c      	adds	r7, #12
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr
 8007a78:	004005ff 	.word	0x004005ff

08007a7c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007a7c:	b480      	push	{r7}
 8007a7e:	b083      	sub	sp, #12
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007aaa:	683b      	ldr	r3, [r7, #0]
 8007aac:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	370c      	adds	r7, #12
 8007acc:	46bd      	mov	sp, r7
 8007ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad2:	4770      	bx	lr

08007ad4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8007ad4:	b5b0      	push	{r4, r5, r7, lr}
 8007ad6:	b08e      	sub	sp, #56	; 0x38
 8007ad8:	af04      	add	r7, sp, #16
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2203      	movs	r2, #3
 8007ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007af0:	2b03      	cmp	r3, #3
 8007af2:	d02e      	beq.n	8007b52 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afa:	d106      	bne.n	8007b0a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b00:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	639a      	str	r2, [r3, #56]	; 0x38
 8007b08:	e029      	b.n	8007b5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b10:	d10a      	bne.n	8007b28 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8007b12:	6878      	ldr	r0, [r7, #4]
 8007b14:	f000 fb2a 	bl	800816c <SD_WideBus_Enable>
 8007b18:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b1e:	6a3b      	ldr	r3, [r7, #32]
 8007b20:	431a      	orrs	r2, r3
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	639a      	str	r2, [r3, #56]	; 0x38
 8007b26:	e01a      	b.n	8007b5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8007b28:	683b      	ldr	r3, [r7, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d10a      	bne.n	8007b44 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fb67 	bl	8008202 <SD_WideBus_Disable>
 8007b34:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b3a:	6a3b      	ldr	r3, [r7, #32]
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	639a      	str	r2, [r3, #56]	; 0x38
 8007b42:	e00c      	b.n	8007b5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b48:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	639a      	str	r2, [r3, #56]	; 0x38
 8007b50:	e005      	b.n	8007b5e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b56:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00b      	beq.n	8007b7e <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a26      	ldr	r2, [pc, #152]	; (8007c04 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007b6c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2201      	movs	r2, #1
 8007b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007b7c:	e01f      	b.n	8007bbe <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	689b      	ldr	r3, [r3, #8]
 8007b88:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	68db      	ldr	r3, [r3, #12]
 8007b8e:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	695b      	ldr	r3, [r3, #20]
 8007b98:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	699b      	ldr	r3, [r3, #24]
 8007b9e:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681d      	ldr	r5, [r3, #0]
 8007ba4:	466c      	mov	r4, sp
 8007ba6:	f107 0314 	add.w	r3, r7, #20
 8007baa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007bae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007bb2:	f107 0308 	add.w	r3, r7, #8
 8007bb6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007bb8:	4628      	mov	r0, r5
 8007bba:	f002 f98b 	bl	8009ed4 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	f002 fa5f 	bl	800a08a <SDMMC_CmdBlockLength>
 8007bcc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007bce:	6a3b      	ldr	r3, [r7, #32]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d00c      	beq.n	8007bee <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a0a      	ldr	r2, [pc, #40]	; (8007c04 <HAL_SD_ConfigWideBusOperation+0x130>)
 8007bda:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	431a      	orrs	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8007be8:	2301      	movs	r3, #1
 8007bea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8007bf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3728      	adds	r7, #40	; 0x28
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bdb0      	pop	{r4, r5, r7, pc}
 8007c02:	bf00      	nop
 8007c04:	004005ff 	.word	0x004005ff

08007c08 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b086      	sub	sp, #24
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007c10:	2300      	movs	r3, #0
 8007c12:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007c14:	f107 030c 	add.w	r3, r7, #12
 8007c18:	4619      	mov	r1, r3
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fa7e 	bl	800811c <SD_SendStatus>
 8007c20:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d005      	beq.n	8007c34 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c2c:	697b      	ldr	r3, [r7, #20]
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	0a5b      	lsrs	r3, r3, #9
 8007c38:	f003 030f 	and.w	r3, r3, #15
 8007c3c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007c3e:	693b      	ldr	r3, [r7, #16]
}
 8007c40:	4618      	mov	r0, r3
 8007c42:	3718      	adds	r7, #24
 8007c44:	46bd      	mov	sp, r7
 8007c46:	bd80      	pop	{r7, pc}

08007c48 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b085      	sub	sp, #20
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c54:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007c64:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8007c66:	bf00      	nop
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	b084      	sub	sp, #16
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7e:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c84:	2b82      	cmp	r3, #130	; 0x82
 8007c86:	d111      	bne.n	8007cac <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	f002 faa7 	bl	800a1e0 <SDMMC_CmdStopTransfer>
 8007c92:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c94:	68bb      	ldr	r3, [r7, #8]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d008      	beq.n	8007cac <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c9e:	68bb      	ldr	r3, [r7, #8]
 8007ca0:	431a      	orrs	r2, r3
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8007ca6:	68f8      	ldr	r0, [r7, #12]
 8007ca8:	f7ff fd3a 	bl	8007720 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f022 0208 	bic.w	r2, r2, #8
 8007cba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f240 523a 	movw	r2, #1338	; 0x53a
 8007cc4:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8007cd4:	68f8      	ldr	r0, [r7, #12]
 8007cd6:	f004 fb65 	bl	800c3a4 <HAL_SD_RxCpltCallback>
#endif
}
 8007cda:	bf00      	nop
 8007cdc:	3710      	adds	r7, #16
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}
	...

08007ce4 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b086      	sub	sp, #24
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cf0:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7fb fff2 	bl	8003cdc <HAL_DMA_GetError>
 8007cf8:	4603      	mov	r3, r0
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d03e      	beq.n	8007d7c <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d04:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8007d06:	697b      	ldr	r3, [r7, #20]
 8007d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d0c:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	2b01      	cmp	r3, #1
 8007d12:	d002      	beq.n	8007d1a <SD_DMAError+0x36>
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d12d      	bne.n	8007d76 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	4a19      	ldr	r2, [pc, #100]	; (8007d84 <SD_DMAError+0xa0>)
 8007d20:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8007d30:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8007d32:	697b      	ldr	r3, [r7, #20]
 8007d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d36:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8007d3e:	6978      	ldr	r0, [r7, #20]
 8007d40:	f7ff ff62 	bl	8007c08 <HAL_SD_GetCardState>
 8007d44:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	2b06      	cmp	r3, #6
 8007d4a:	d002      	beq.n	8007d52 <SD_DMAError+0x6e>
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2b05      	cmp	r3, #5
 8007d50:	d10a      	bne.n	8007d68 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4618      	mov	r0, r3
 8007d58:	f002 fa42 	bl	800a1e0 <SDMMC_CmdStopTransfer>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	697b      	ldr	r3, [r7, #20]
 8007d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d62:	431a      	orrs	r2, r3
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	2200      	movs	r2, #0
 8007d74:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8007d76:	6978      	ldr	r0, [r7, #20]
 8007d78:	f7ff fcd2 	bl	8007720 <HAL_SD_ErrorCallback>
#endif
  }
}
 8007d7c:	bf00      	nop
 8007d7e:	3718      	adds	r7, #24
 8007d80:	46bd      	mov	sp, r7
 8007d82:	bd80      	pop	{r7, pc}
 8007d84:	004005ff 	.word	0x004005ff

08007d88 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b084      	sub	sp, #16
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d94:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f240 523a 	movw	r2, #1338	; 0x53a
 8007d9e:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007da0:	68f8      	ldr	r0, [r7, #12]
 8007da2:	f7ff ff31 	bl	8007c08 <HAL_SD_GetCardState>
 8007da6:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	2200      	movs	r2, #0
 8007db4:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	2b06      	cmp	r3, #6
 8007dba:	d002      	beq.n	8007dc2 <SD_DMATxAbort+0x3a>
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2b05      	cmp	r3, #5
 8007dc0:	d10a      	bne.n	8007dd8 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	f002 fa0a 	bl	800a1e0 <SDMMC_CmdStopTransfer>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd2:	431a      	orrs	r2, r3
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d103      	bne.n	8007de8 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007de0:	68f8      	ldr	r0, [r7, #12]
 8007de2:	f004 facb 	bl	800c37c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007de6:	e002      	b.n	8007dee <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007de8:	68f8      	ldr	r0, [r7, #12]
 8007dea:	f7ff fc99 	bl	8007720 <HAL_SD_ErrorCallback>
}
 8007dee:	bf00      	nop
 8007df0:	3710      	adds	r7, #16
 8007df2:	46bd      	mov	sp, r7
 8007df4:	bd80      	pop	{r7, pc}

08007df6 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8007df6:	b580      	push	{r7, lr}
 8007df8:	b084      	sub	sp, #16
 8007dfa:	af00      	add	r7, sp, #0
 8007dfc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e02:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f240 523a 	movw	r2, #1338	; 0x53a
 8007e0c:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8007e0e:	68f8      	ldr	r0, [r7, #12]
 8007e10:	f7ff fefa 	bl	8007c08 <HAL_SD_GetCardState>
 8007e14:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2200      	movs	r2, #0
 8007e22:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2b06      	cmp	r3, #6
 8007e28:	d002      	beq.n	8007e30 <SD_DMARxAbort+0x3a>
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	2b05      	cmp	r3, #5
 8007e2e:	d10a      	bne.n	8007e46 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4618      	mov	r0, r3
 8007e36:	f002 f9d3 	bl	800a1e0 <SDMMC_CmdStopTransfer>
 8007e3a:	4602      	mov	r2, r0
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e40:	431a      	orrs	r2, r3
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d103      	bne.n	8007e56 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f004 fa94 	bl	800c37c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8007e54:	e002      	b.n	8007e5c <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8007e56:	68f8      	ldr	r0, [r7, #12]
 8007e58:	f7ff fc62 	bl	8007720 <HAL_SD_ErrorCallback>
}
 8007e5c:	bf00      	nop
 8007e5e:	3710      	adds	r7, #16
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}

08007e64 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007e64:	b5b0      	push	{r4, r5, r7, lr}
 8007e66:	b094      	sub	sp, #80	; 0x50
 8007e68:	af04      	add	r7, sp, #16
 8007e6a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4618      	mov	r0, r3
 8007e76:	f002 f884 	bl	8009f82 <SDIO_GetPowerState>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d102      	bne.n	8007e86 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007e80:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007e84:	e0b8      	b.n	8007ff8 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e8a:	2b03      	cmp	r3, #3
 8007e8c:	d02f      	beq.n	8007eee <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	4618      	mov	r0, r3
 8007e94:	f002 faae 	bl	800a3f4 <SDMMC_CmdSendCID>
 8007e98:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <SD_InitCard+0x40>
    {
      return errorstate;
 8007ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ea2:	e0a9      	b.n	8007ff8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f002 f8ae 	bl	800a00c <SDIO_GetResponse>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	2104      	movs	r1, #4
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f002 f8a5 	bl	800a00c <SDIO_GetResponse>
 8007ec2:	4602      	mov	r2, r0
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	2108      	movs	r1, #8
 8007ece:	4618      	mov	r0, r3
 8007ed0:	f002 f89c 	bl	800a00c <SDIO_GetResponse>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	210c      	movs	r1, #12
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f002 f893 	bl	800a00c <SDIO_GetResponse>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	d00d      	beq.n	8007f12 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f107 020e 	add.w	r2, r7, #14
 8007efe:	4611      	mov	r1, r2
 8007f00:	4618      	mov	r0, r3
 8007f02:	f002 fab4 	bl	800a46e <SDMMC_CmdSetRelAdd>
 8007f06:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d001      	beq.n	8007f12 <SD_InitCard+0xae>
    {
      return errorstate;
 8007f0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f10:	e072      	b.n	8007ff8 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f16:	2b03      	cmp	r3, #3
 8007f18:	d036      	beq.n	8007f88 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007f1a:	89fb      	ldrh	r3, [r7, #14]
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681a      	ldr	r2, [r3, #0]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f2a:	041b      	lsls	r3, r3, #16
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	4610      	mov	r0, r2
 8007f30:	f002 fa7e 	bl	800a430 <SDMMC_CmdSendCSD>
 8007f34:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d001      	beq.n	8007f40 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007f3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f3e:	e05b      	b.n	8007ff8 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	2100      	movs	r1, #0
 8007f46:	4618      	mov	r0, r3
 8007f48:	f002 f860 	bl	800a00c <SDIO_GetResponse>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	2104      	movs	r1, #4
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f002 f857 	bl	800a00c <SDIO_GetResponse>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2108      	movs	r1, #8
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f002 f84e 	bl	800a00c <SDIO_GetResponse>
 8007f70:	4602      	mov	r2, r0
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	210c      	movs	r1, #12
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f002 f845 	bl	800a00c <SDIO_GetResponse>
 8007f82:	4602      	mov	r2, r0
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	2104      	movs	r1, #4
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f002 f83c 	bl	800a00c <SDIO_GetResponse>
 8007f94:	4603      	mov	r3, r0
 8007f96:	0d1a      	lsrs	r2, r3, #20
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007f9c:	f107 0310 	add.w	r3, r7, #16
 8007fa0:	4619      	mov	r1, r3
 8007fa2:	6878      	ldr	r0, [r7, #4]
 8007fa4:	f7ff fbc6 	bl	8007734 <HAL_SD_GetCardCSD>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d002      	beq.n	8007fb4 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007fae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007fb2:	e021      	b.n	8007ff8 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6819      	ldr	r1, [r3, #0]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007fbc:	041b      	lsls	r3, r3, #16
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	461c      	mov	r4, r3
 8007fc2:	4615      	mov	r5, r2
 8007fc4:	4622      	mov	r2, r4
 8007fc6:	462b      	mov	r3, r5
 8007fc8:	4608      	mov	r0, r1
 8007fca:	f002 f92b 	bl	800a224 <SDMMC_CmdSelDesel>
 8007fce:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <SD_InitCard+0x176>
  {
    return errorstate;
 8007fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fd8:	e00e      	b.n	8007ff8 <SD_InitCard+0x194>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681d      	ldr	r5, [r3, #0]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	466c      	mov	r4, sp
 8007fe2:	f103 0210 	add.w	r2, r3, #16
 8007fe6:	ca07      	ldmia	r2, {r0, r1, r2}
 8007fe8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007fec:	3304      	adds	r3, #4
 8007fee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	f001 ff6f 	bl	8009ed4 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8007ff6:	2300      	movs	r3, #0
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3740      	adds	r7, #64	; 0x40
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bdb0      	pop	{r4, r5, r7, pc}

08008000 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b086      	sub	sp, #24
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800800c:	2300      	movs	r3, #0
 800800e:	617b      	str	r3, [r7, #20]
 8008010:	2300      	movs	r3, #0
 8008012:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	4618      	mov	r0, r3
 800801a:	f002 f926 	bl	800a26a <SDMMC_CmdGoIdleState>
 800801e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <SD_PowerON+0x2a>
  {
    return errorstate;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	e072      	b.n	8008110 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	4618      	mov	r0, r3
 8008030:	f002 f939 	bl	800a2a6 <SDMMC_CmdOperCond>
 8008034:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00d      	beq.n	8008058 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	4618      	mov	r0, r3
 8008048:	f002 f90f 	bl	800a26a <SDMMC_CmdGoIdleState>
 800804c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d004      	beq.n	800805e <SD_PowerON+0x5e>
    {
      return errorstate;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	e05b      	b.n	8008110 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008062:	2b01      	cmp	r3, #1
 8008064:	d137      	bne.n	80080d6 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	2100      	movs	r1, #0
 800806c:	4618      	mov	r0, r3
 800806e:	f002 f939 	bl	800a2e4 <SDMMC_CmdAppCommand>
 8008072:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d02d      	beq.n	80080d6 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800807a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800807e:	e047      	b.n	8008110 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2100      	movs	r1, #0
 8008086:	4618      	mov	r0, r3
 8008088:	f002 f92c 	bl	800a2e4 <SDMMC_CmdAppCommand>
 800808c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d001      	beq.n	8008098 <SD_PowerON+0x98>
    {
      return errorstate;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	e03b      	b.n	8008110 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	491e      	ldr	r1, [pc, #120]	; (8008118 <SD_PowerON+0x118>)
 800809e:	4618      	mov	r0, r3
 80080a0:	f002 f942 	bl	800a328 <SDMMC_CmdAppOperCommand>
 80080a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d002      	beq.n	80080b2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80080b0:	e02e      	b.n	8008110 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	2100      	movs	r1, #0
 80080b8:	4618      	mov	r0, r3
 80080ba:	f001 ffa7 	bl	800a00c <SDIO_GetResponse>
 80080be:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80080c0:	697b      	ldr	r3, [r7, #20]
 80080c2:	0fdb      	lsrs	r3, r3, #31
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d101      	bne.n	80080cc <SD_PowerON+0xcc>
 80080c8:	2301      	movs	r3, #1
 80080ca:	e000      	b.n	80080ce <SD_PowerON+0xce>
 80080cc:	2300      	movs	r3, #0
 80080ce:	613b      	str	r3, [r7, #16]

    count++;
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	3301      	adds	r3, #1
 80080d4:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80080dc:	4293      	cmp	r3, r2
 80080de:	d802      	bhi.n	80080e6 <SD_PowerON+0xe6>
 80080e0:	693b      	ldr	r3, [r7, #16]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d0cc      	beq.n	8008080 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80080e6:	68bb      	ldr	r3, [r7, #8]
 80080e8:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d902      	bls.n	80080f6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80080f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080f4:	e00c      	b.n	8008110 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	645a      	str	r2, [r3, #68]	; 0x44
 8008106:	e002      	b.n	800810e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	2200      	movs	r2, #0
 800810c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	3718      	adds	r7, #24
 8008114:	46bd      	mov	sp, r7
 8008116:	bd80      	pop	{r7, pc}
 8008118:	c1100000 	.word	0xc1100000

0800811c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d102      	bne.n	8008132 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800812c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008130:	e018      	b.n	8008164 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681a      	ldr	r2, [r3, #0]
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800813a:	041b      	lsls	r3, r3, #16
 800813c:	4619      	mov	r1, r3
 800813e:	4610      	mov	r0, r2
 8008140:	f002 f9b6 	bl	800a4b0 <SDMMC_CmdSendStatus>
 8008144:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <SD_SendStatus+0x34>
  {
    return errorstate;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	e009      	b.n	8008164 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	2100      	movs	r1, #0
 8008156:	4618      	mov	r0, r3
 8008158:	f001 ff58 	bl	800a00c <SDIO_GetResponse>
 800815c:	4602      	mov	r2, r0
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}

0800816c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b086      	sub	sp, #24
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8008174:	2300      	movs	r3, #0
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	2300      	movs	r3, #0
 800817a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2100      	movs	r1, #0
 8008182:	4618      	mov	r0, r3
 8008184:	f001 ff42 	bl	800a00c <SDIO_GetResponse>
 8008188:	4603      	mov	r3, r0
 800818a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800818e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008192:	d102      	bne.n	800819a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008194:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008198:	e02f      	b.n	80081fa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800819a:	f107 030c 	add.w	r3, r7, #12
 800819e:	4619      	mov	r1, r3
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f000 f879 	bl	8008298 <SD_FindSCR>
 80081a6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	e023      	b.n	80081fa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d01c      	beq.n	80081f6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681a      	ldr	r2, [r3, #0]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c4:	041b      	lsls	r3, r3, #16
 80081c6:	4619      	mov	r1, r3
 80081c8:	4610      	mov	r0, r2
 80081ca:	f002 f88b 	bl	800a2e4 <SDMMC_CmdAppCommand>
 80081ce:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081d0:	697b      	ldr	r3, [r7, #20]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d001      	beq.n	80081da <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	e00f      	b.n	80081fa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	2102      	movs	r1, #2
 80081e0:	4618      	mov	r0, r3
 80081e2:	f002 f8c4 	bl	800a36e <SDMMC_CmdBusWidth>
 80081e6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d001      	beq.n	80081f2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	e003      	b.n	80081fa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80081f2:	2300      	movs	r3, #0
 80081f4:	e001      	b.n	80081fa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80081f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3718      	adds	r7, #24
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}

08008202 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008202:	b580      	push	{r7, lr}
 8008204:	b086      	sub	sp, #24
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800820a:	2300      	movs	r3, #0
 800820c:	60fb      	str	r3, [r7, #12]
 800820e:	2300      	movs	r3, #0
 8008210:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2100      	movs	r1, #0
 8008218:	4618      	mov	r0, r3
 800821a:	f001 fef7 	bl	800a00c <SDIO_GetResponse>
 800821e:	4603      	mov	r3, r0
 8008220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008224:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008228:	d102      	bne.n	8008230 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800822a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800822e:	e02f      	b.n	8008290 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008230:	f107 030c 	add.w	r3, r7, #12
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f000 f82e 	bl	8008298 <SD_FindSCR>
 800823c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d001      	beq.n	8008248 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	e023      	b.n	8008290 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800824e:	2b00      	cmp	r3, #0
 8008250:	d01c      	beq.n	800828c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681a      	ldr	r2, [r3, #0]
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800825a:	041b      	lsls	r3, r3, #16
 800825c:	4619      	mov	r1, r3
 800825e:	4610      	mov	r0, r2
 8008260:	f002 f840 	bl	800a2e4 <SDMMC_CmdAppCommand>
 8008264:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d001      	beq.n	8008270 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	e00f      	b.n	8008290 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2100      	movs	r1, #0
 8008276:	4618      	mov	r0, r3
 8008278:	f002 f879 	bl	800a36e <SDMMC_CmdBusWidth>
 800827c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	e003      	b.n	8008290 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8008288:	2300      	movs	r3, #0
 800828a:	e001      	b.n	8008290 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800828c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008290:	4618      	mov	r0, r3
 8008292:	3718      	adds	r7, #24
 8008294:	46bd      	mov	sp, r7
 8008296:	bd80      	pop	{r7, pc}

08008298 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008298:	b590      	push	{r4, r7, lr}
 800829a:	b08f      	sub	sp, #60	; 0x3c
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80082a2:	f7fb f8b7 	bl	8003414 <HAL_GetTick>
 80082a6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80082a8:	2300      	movs	r3, #0
 80082aa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80082ac:	2300      	movs	r3, #0
 80082ae:	60bb      	str	r3, [r7, #8]
 80082b0:	2300      	movs	r3, #0
 80082b2:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2108      	movs	r1, #8
 80082be:	4618      	mov	r0, r3
 80082c0:	f001 fee3 	bl	800a08a <SDMMC_CmdBlockLength>
 80082c4:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80082c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d001      	beq.n	80082d0 <SD_FindSCR+0x38>
  {
    return errorstate;
 80082cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ce:	e0b2      	b.n	8008436 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082d8:	041b      	lsls	r3, r3, #16
 80082da:	4619      	mov	r1, r3
 80082dc:	4610      	mov	r0, r2
 80082de:	f002 f801 	bl	800a2e4 <SDMMC_CmdAppCommand>
 80082e2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80082e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <SD_FindSCR+0x56>
  {
    return errorstate;
 80082ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ec:	e0a3      	b.n	8008436 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80082ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80082f2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80082f4:	2308      	movs	r3, #8
 80082f6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80082f8:	2330      	movs	r3, #48	; 0x30
 80082fa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80082fc:	2302      	movs	r3, #2
 80082fe:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8008300:	2300      	movs	r3, #0
 8008302:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8008304:	2301      	movs	r3, #1
 8008306:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f107 0210 	add.w	r2, r7, #16
 8008310:	4611      	mov	r1, r2
 8008312:	4618      	mov	r0, r3
 8008314:	f001 fe8d 	bl	800a032 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4618      	mov	r0, r3
 800831e:	f002 f848 	bl	800a3b2 <SDMMC_CmdSendSCR>
 8008322:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8008324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008326:	2b00      	cmp	r3, #0
 8008328:	d02a      	beq.n	8008380 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800832a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800832c:	e083      	b.n	8008436 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008334:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008338:	2b00      	cmp	r3, #0
 800833a:	d00f      	beq.n	800835c <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6819      	ldr	r1, [r3, #0]
 8008340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008342:	009b      	lsls	r3, r3, #2
 8008344:	f107 0208 	add.w	r2, r7, #8
 8008348:	18d4      	adds	r4, r2, r3
 800834a:	4608      	mov	r0, r1
 800834c:	f001 fded 	bl	8009f2a <SDIO_ReadFIFO>
 8008350:	4603      	mov	r3, r0
 8008352:	6023      	str	r3, [r4, #0]
      index++;
 8008354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008356:	3301      	adds	r3, #1
 8008358:	637b      	str	r3, [r7, #52]	; 0x34
 800835a:	e006      	b.n	800836a <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008366:	2b00      	cmp	r3, #0
 8008368:	d012      	beq.n	8008390 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800836a:	f7fb f853 	bl	8003414 <HAL_GetTick>
 800836e:	4602      	mov	r2, r0
 8008370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008372:	1ad3      	subs	r3, r2, r3
 8008374:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008378:	d102      	bne.n	8008380 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800837a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800837e:	e05a      	b.n	8008436 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008386:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800838a:	2b00      	cmp	r3, #0
 800838c:	d0cf      	beq.n	800832e <SD_FindSCR+0x96>
 800838e:	e000      	b.n	8008392 <SD_FindSCR+0xfa>
      break;
 8008390:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008398:	f003 0308 	and.w	r3, r3, #8
 800839c:	2b00      	cmp	r3, #0
 800839e:	d005      	beq.n	80083ac <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2208      	movs	r2, #8
 80083a6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80083a8:	2308      	movs	r3, #8
 80083aa:	e044      	b.n	8008436 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083b2:	f003 0302 	and.w	r3, r3, #2
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d005      	beq.n	80083c6 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2202      	movs	r2, #2
 80083c0:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80083c2:	2302      	movs	r3, #2
 80083c4:	e037      	b.n	8008436 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083cc:	f003 0320 	and.w	r3, r3, #32
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d005      	beq.n	80083e0 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2220      	movs	r2, #32
 80083da:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80083dc:	2320      	movs	r3, #32
 80083de:	e02a      	b.n	8008436 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f240 523a 	movw	r2, #1338	; 0x53a
 80083e8:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	061a      	lsls	r2, r3, #24
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	021b      	lsls	r3, r3, #8
 80083f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80083f6:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	0a1b      	lsrs	r3, r3, #8
 80083fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008400:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	0e1b      	lsrs	r3, r3, #24
 8008406:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840a:	601a      	str	r2, [r3, #0]
    scr++;
 800840c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840e:	3304      	adds	r3, #4
 8008410:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008412:	68bb      	ldr	r3, [r7, #8]
 8008414:	061a      	lsls	r2, r3, #24
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	021b      	lsls	r3, r3, #8
 800841a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800841e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	0a1b      	lsrs	r3, r3, #8
 8008424:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008428:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	0e1b      	lsrs	r3, r3, #24
 800842e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008432:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8008434:	2300      	movs	r3, #0
}
 8008436:	4618      	mov	r0, r3
 8008438:	373c      	adds	r7, #60	; 0x3c
 800843a:	46bd      	mov	sp, r7
 800843c:	bd90      	pop	{r4, r7, pc}

0800843e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b086      	sub	sp, #24
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008450:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d03f      	beq.n	80084d8 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8008458:	2300      	movs	r3, #0
 800845a:	617b      	str	r3, [r7, #20]
 800845c:	e033      	b.n	80084c6 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	4618      	mov	r0, r3
 8008464:	f001 fd61 	bl	8009f2a <SDIO_ReadFIFO>
 8008468:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	b2da      	uxtb	r2, r3
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	3301      	adds	r3, #1
 8008476:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008478:	693b      	ldr	r3, [r7, #16]
 800847a:	3b01      	subs	r3, #1
 800847c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	0a1b      	lsrs	r3, r3, #8
 8008482:	b2da      	uxtb	r2, r3
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	701a      	strb	r2, [r3, #0]
      tmp++;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	3301      	adds	r3, #1
 800848c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800848e:	693b      	ldr	r3, [r7, #16]
 8008490:	3b01      	subs	r3, #1
 8008492:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	0c1b      	lsrs	r3, r3, #16
 8008498:	b2da      	uxtb	r2, r3
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	701a      	strb	r2, [r3, #0]
      tmp++;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	3301      	adds	r3, #1
 80084a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	3b01      	subs	r3, #1
 80084a8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	0e1b      	lsrs	r3, r3, #24
 80084ae:	b2da      	uxtb	r2, r3
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	3301      	adds	r3, #1
 80084b8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	3b01      	subs	r3, #1
 80084be:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	3301      	adds	r3, #1
 80084c4:	617b      	str	r3, [r7, #20]
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	2b07      	cmp	r3, #7
 80084ca:	d9c8      	bls.n	800845e <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	693a      	ldr	r2, [r7, #16]
 80084d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80084d8:	bf00      	nop
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b086      	sub	sp, #24
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a1b      	ldr	r3, [r3, #32]
 80084ec:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80084f4:	693b      	ldr	r3, [r7, #16]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d043      	beq.n	8008582 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80084fa:	2300      	movs	r3, #0
 80084fc:	617b      	str	r3, [r7, #20]
 80084fe:	e037      	b.n	8008570 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	3301      	adds	r3, #1
 800850a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800850c:	693b      	ldr	r3, [r7, #16]
 800850e:	3b01      	subs	r3, #1
 8008510:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	021a      	lsls	r2, r3, #8
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	4313      	orrs	r3, r2
 800851c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	3301      	adds	r3, #1
 8008522:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008524:	693b      	ldr	r3, [r7, #16]
 8008526:	3b01      	subs	r3, #1
 8008528:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	041a      	lsls	r2, r3, #16
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	4313      	orrs	r3, r2
 8008534:	60bb      	str	r3, [r7, #8]
      tmp++;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	3301      	adds	r3, #1
 800853a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	3b01      	subs	r3, #1
 8008540:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	061a      	lsls	r2, r3, #24
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	4313      	orrs	r3, r2
 800854c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	3301      	adds	r3, #1
 8008552:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8008554:	693b      	ldr	r3, [r7, #16]
 8008556:	3b01      	subs	r3, #1
 8008558:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f107 0208 	add.w	r2, r7, #8
 8008562:	4611      	mov	r1, r2
 8008564:	4618      	mov	r0, r3
 8008566:	f001 fced 	bl	8009f44 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800856a:	697b      	ldr	r3, [r7, #20]
 800856c:	3301      	adds	r3, #1
 800856e:	617b      	str	r3, [r7, #20]
 8008570:	697b      	ldr	r3, [r7, #20]
 8008572:	2b07      	cmp	r3, #7
 8008574:	d9c4      	bls.n	8008500 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	68fa      	ldr	r2, [r7, #12]
 800857a:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	693a      	ldr	r2, [r7, #16]
 8008580:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8008582:	bf00      	nop
 8008584:	3718      	adds	r7, #24
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}

0800858a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800858a:	b580      	push	{r7, lr}
 800858c:	b082      	sub	sp, #8
 800858e:	af00      	add	r7, sp, #0
 8008590:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d101      	bne.n	800859c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e041      	b.n	8008620 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80085a2:	b2db      	uxtb	r3, r3
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d106      	bne.n	80085b6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f7fa fceb 	bl	8002f8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2202      	movs	r2, #2
 80085ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	3304      	adds	r3, #4
 80085c6:	4619      	mov	r1, r3
 80085c8:	4610      	mov	r0, r2
 80085ca:	f000 fa95 	bl	8008af8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2201      	movs	r2, #1
 80085d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	2201      	movs	r2, #1
 80085da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	2201      	movs	r2, #1
 80085e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2201      	movs	r2, #1
 80085ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	2201      	movs	r2, #1
 80085f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	2201      	movs	r2, #1
 80085fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2201      	movs	r2, #1
 8008602:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2201      	movs	r2, #1
 800860a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2201      	movs	r2, #1
 8008612:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	2201      	movs	r2, #1
 800861a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3708      	adds	r7, #8
 8008624:	46bd      	mov	sp, r7
 8008626:	bd80      	pop	{r7, pc}

08008628 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008628:	b480      	push	{r7}
 800862a:	b085      	sub	sp, #20
 800862c:	af00      	add	r7, sp, #0
 800862e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008636:	b2db      	uxtb	r3, r3
 8008638:	2b01      	cmp	r3, #1
 800863a:	d001      	beq.n	8008640 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800863c:	2301      	movs	r3, #1
 800863e:	e04e      	b.n	80086de <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2202      	movs	r2, #2
 8008644:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	68da      	ldr	r2, [r3, #12]
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f042 0201 	orr.w	r2, r2, #1
 8008656:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4a23      	ldr	r2, [pc, #140]	; (80086ec <HAL_TIM_Base_Start_IT+0xc4>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d022      	beq.n	80086a8 <HAL_TIM_Base_Start_IT+0x80>
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800866a:	d01d      	beq.n	80086a8 <HAL_TIM_Base_Start_IT+0x80>
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a1f      	ldr	r2, [pc, #124]	; (80086f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d018      	beq.n	80086a8 <HAL_TIM_Base_Start_IT+0x80>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4a1e      	ldr	r2, [pc, #120]	; (80086f4 <HAL_TIM_Base_Start_IT+0xcc>)
 800867c:	4293      	cmp	r3, r2
 800867e:	d013      	beq.n	80086a8 <HAL_TIM_Base_Start_IT+0x80>
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4a1c      	ldr	r2, [pc, #112]	; (80086f8 <HAL_TIM_Base_Start_IT+0xd0>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d00e      	beq.n	80086a8 <HAL_TIM_Base_Start_IT+0x80>
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	4a1b      	ldr	r2, [pc, #108]	; (80086fc <HAL_TIM_Base_Start_IT+0xd4>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d009      	beq.n	80086a8 <HAL_TIM_Base_Start_IT+0x80>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4a19      	ldr	r2, [pc, #100]	; (8008700 <HAL_TIM_Base_Start_IT+0xd8>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d004      	beq.n	80086a8 <HAL_TIM_Base_Start_IT+0x80>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a18      	ldr	r2, [pc, #96]	; (8008704 <HAL_TIM_Base_Start_IT+0xdc>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d111      	bne.n	80086cc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	689b      	ldr	r3, [r3, #8]
 80086ae:	f003 0307 	and.w	r3, r3, #7
 80086b2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2b06      	cmp	r3, #6
 80086b8:	d010      	beq.n	80086dc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	681a      	ldr	r2, [r3, #0]
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f042 0201 	orr.w	r2, r2, #1
 80086c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ca:	e007      	b.n	80086dc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681a      	ldr	r2, [r3, #0]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f042 0201 	orr.w	r2, r2, #1
 80086da:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	40010000 	.word	0x40010000
 80086f0:	40000400 	.word	0x40000400
 80086f4:	40000800 	.word	0x40000800
 80086f8:	40000c00 	.word	0x40000c00
 80086fc:	40010400 	.word	0x40010400
 8008700:	40014000 	.word	0x40014000
 8008704:	40001800 	.word	0x40001800

08008708 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b082      	sub	sp, #8
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	f003 0302 	and.w	r3, r3, #2
 800871a:	2b02      	cmp	r3, #2
 800871c:	d122      	bne.n	8008764 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	f003 0302 	and.w	r3, r3, #2
 8008728:	2b02      	cmp	r3, #2
 800872a:	d11b      	bne.n	8008764 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f06f 0202 	mvn.w	r2, #2
 8008734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	f003 0303 	and.w	r3, r3, #3
 8008746:	2b00      	cmp	r3, #0
 8008748:	d003      	beq.n	8008752 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 f9b5 	bl	8008aba <HAL_TIM_IC_CaptureCallback>
 8008750:	e005      	b.n	800875e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f9a7 	bl	8008aa6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f000 f9b8 	bl	8008ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	2200      	movs	r2, #0
 8008762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	691b      	ldr	r3, [r3, #16]
 800876a:	f003 0304 	and.w	r3, r3, #4
 800876e:	2b04      	cmp	r3, #4
 8008770:	d122      	bne.n	80087b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	68db      	ldr	r3, [r3, #12]
 8008778:	f003 0304 	and.w	r3, r3, #4
 800877c:	2b04      	cmp	r3, #4
 800877e:	d11b      	bne.n	80087b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f06f 0204 	mvn.w	r2, #4
 8008788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2202      	movs	r2, #2
 800878e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	699b      	ldr	r3, [r3, #24]
 8008796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800879a:	2b00      	cmp	r3, #0
 800879c:	d003      	beq.n	80087a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f98b 	bl	8008aba <HAL_TIM_IC_CaptureCallback>
 80087a4:	e005      	b.n	80087b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 f97d 	bl	8008aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087ac:	6878      	ldr	r0, [r7, #4]
 80087ae:	f000 f98e 	bl	8008ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2200      	movs	r2, #0
 80087b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	691b      	ldr	r3, [r3, #16]
 80087be:	f003 0308 	and.w	r3, r3, #8
 80087c2:	2b08      	cmp	r3, #8
 80087c4:	d122      	bne.n	800880c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	f003 0308 	and.w	r3, r3, #8
 80087d0:	2b08      	cmp	r3, #8
 80087d2:	d11b      	bne.n	800880c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	f06f 0208 	mvn.w	r2, #8
 80087dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2204      	movs	r2, #4
 80087e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	f003 0303 	and.w	r3, r3, #3
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d003      	beq.n	80087fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f000 f961 	bl	8008aba <HAL_TIM_IC_CaptureCallback>
 80087f8:	e005      	b.n	8008806 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f953 	bl	8008aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f964 	bl	8008ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	691b      	ldr	r3, [r3, #16]
 8008812:	f003 0310 	and.w	r3, r3, #16
 8008816:	2b10      	cmp	r3, #16
 8008818:	d122      	bne.n	8008860 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	f003 0310 	and.w	r3, r3, #16
 8008824:	2b10      	cmp	r3, #16
 8008826:	d11b      	bne.n	8008860 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f06f 0210 	mvn.w	r2, #16
 8008830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2208      	movs	r2, #8
 8008836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	69db      	ldr	r3, [r3, #28]
 800883e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008842:	2b00      	cmp	r3, #0
 8008844:	d003      	beq.n	800884e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008846:	6878      	ldr	r0, [r7, #4]
 8008848:	f000 f937 	bl	8008aba <HAL_TIM_IC_CaptureCallback>
 800884c:	e005      	b.n	800885a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 f929 	bl	8008aa6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f000 f93a 	bl	8008ace <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2200      	movs	r2, #0
 800885e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	691b      	ldr	r3, [r3, #16]
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b01      	cmp	r3, #1
 800886c:	d10e      	bne.n	800888c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	68db      	ldr	r3, [r3, #12]
 8008874:	f003 0301 	and.w	r3, r3, #1
 8008878:	2b01      	cmp	r3, #1
 800887a:	d107      	bne.n	800888c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f06f 0201 	mvn.w	r2, #1
 8008884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f7f9 f900 	bl	8001a8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	691b      	ldr	r3, [r3, #16]
 8008892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008896:	2b80      	cmp	r3, #128	; 0x80
 8008898:	d10e      	bne.n	80088b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	68db      	ldr	r3, [r3, #12]
 80088a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088a4:	2b80      	cmp	r3, #128	; 0x80
 80088a6:	d107      	bne.n	80088b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80088b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80088b2:	6878      	ldr	r0, [r7, #4]
 80088b4:	f000 fae0 	bl	8008e78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	691b      	ldr	r3, [r3, #16]
 80088be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088c2:	2b40      	cmp	r3, #64	; 0x40
 80088c4:	d10e      	bne.n	80088e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088d0:	2b40      	cmp	r3, #64	; 0x40
 80088d2:	d107      	bne.n	80088e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80088dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 f8ff 	bl	8008ae2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	f003 0320 	and.w	r3, r3, #32
 80088ee:	2b20      	cmp	r3, #32
 80088f0:	d10e      	bne.n	8008910 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	68db      	ldr	r3, [r3, #12]
 80088f8:	f003 0320 	and.w	r3, r3, #32
 80088fc:	2b20      	cmp	r3, #32
 80088fe:	d107      	bne.n	8008910 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f06f 0220 	mvn.w	r2, #32
 8008908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 faaa 	bl	8008e64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b084      	sub	sp, #16
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800892c:	2b01      	cmp	r3, #1
 800892e:	d101      	bne.n	8008934 <HAL_TIM_ConfigClockSource+0x1c>
 8008930:	2302      	movs	r3, #2
 8008932:	e0b4      	b.n	8008a9e <HAL_TIM_ConfigClockSource+0x186>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2202      	movs	r2, #2
 8008940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800894c:	68bb      	ldr	r3, [r7, #8]
 800894e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008952:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800895a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	68ba      	ldr	r2, [r7, #8]
 8008962:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800896c:	d03e      	beq.n	80089ec <HAL_TIM_ConfigClockSource+0xd4>
 800896e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008972:	f200 8087 	bhi.w	8008a84 <HAL_TIM_ConfigClockSource+0x16c>
 8008976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800897a:	f000 8086 	beq.w	8008a8a <HAL_TIM_ConfigClockSource+0x172>
 800897e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008982:	d87f      	bhi.n	8008a84 <HAL_TIM_ConfigClockSource+0x16c>
 8008984:	2b70      	cmp	r3, #112	; 0x70
 8008986:	d01a      	beq.n	80089be <HAL_TIM_ConfigClockSource+0xa6>
 8008988:	2b70      	cmp	r3, #112	; 0x70
 800898a:	d87b      	bhi.n	8008a84 <HAL_TIM_ConfigClockSource+0x16c>
 800898c:	2b60      	cmp	r3, #96	; 0x60
 800898e:	d050      	beq.n	8008a32 <HAL_TIM_ConfigClockSource+0x11a>
 8008990:	2b60      	cmp	r3, #96	; 0x60
 8008992:	d877      	bhi.n	8008a84 <HAL_TIM_ConfigClockSource+0x16c>
 8008994:	2b50      	cmp	r3, #80	; 0x50
 8008996:	d03c      	beq.n	8008a12 <HAL_TIM_ConfigClockSource+0xfa>
 8008998:	2b50      	cmp	r3, #80	; 0x50
 800899a:	d873      	bhi.n	8008a84 <HAL_TIM_ConfigClockSource+0x16c>
 800899c:	2b40      	cmp	r3, #64	; 0x40
 800899e:	d058      	beq.n	8008a52 <HAL_TIM_ConfigClockSource+0x13a>
 80089a0:	2b40      	cmp	r3, #64	; 0x40
 80089a2:	d86f      	bhi.n	8008a84 <HAL_TIM_ConfigClockSource+0x16c>
 80089a4:	2b30      	cmp	r3, #48	; 0x30
 80089a6:	d064      	beq.n	8008a72 <HAL_TIM_ConfigClockSource+0x15a>
 80089a8:	2b30      	cmp	r3, #48	; 0x30
 80089aa:	d86b      	bhi.n	8008a84 <HAL_TIM_ConfigClockSource+0x16c>
 80089ac:	2b20      	cmp	r3, #32
 80089ae:	d060      	beq.n	8008a72 <HAL_TIM_ConfigClockSource+0x15a>
 80089b0:	2b20      	cmp	r3, #32
 80089b2:	d867      	bhi.n	8008a84 <HAL_TIM_ConfigClockSource+0x16c>
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d05c      	beq.n	8008a72 <HAL_TIM_ConfigClockSource+0x15a>
 80089b8:	2b10      	cmp	r3, #16
 80089ba:	d05a      	beq.n	8008a72 <HAL_TIM_ConfigClockSource+0x15a>
 80089bc:	e062      	b.n	8008a84 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6818      	ldr	r0, [r3, #0]
 80089c2:	683b      	ldr	r3, [r7, #0]
 80089c4:	6899      	ldr	r1, [r3, #8]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	685a      	ldr	r2, [r3, #4]
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	68db      	ldr	r3, [r3, #12]
 80089ce:	f000 f9ad 	bl	8008d2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80089e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	68ba      	ldr	r2, [r7, #8]
 80089e8:	609a      	str	r2, [r3, #8]
      break;
 80089ea:	e04f      	b.n	8008a8c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6818      	ldr	r0, [r3, #0]
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	6899      	ldr	r1, [r3, #8]
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	685a      	ldr	r2, [r3, #4]
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	68db      	ldr	r3, [r3, #12]
 80089fc:	f000 f996 	bl	8008d2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	689a      	ldr	r2, [r3, #8]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008a0e:	609a      	str	r2, [r3, #8]
      break;
 8008a10:	e03c      	b.n	8008a8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6818      	ldr	r0, [r3, #0]
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	6859      	ldr	r1, [r3, #4]
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	461a      	mov	r2, r3
 8008a20:	f000 f90a 	bl	8008c38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2150      	movs	r1, #80	; 0x50
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 f963 	bl	8008cf6 <TIM_ITRx_SetConfig>
      break;
 8008a30:	e02c      	b.n	8008a8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6818      	ldr	r0, [r3, #0]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	6859      	ldr	r1, [r3, #4]
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	461a      	mov	r2, r3
 8008a40:	f000 f929 	bl	8008c96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2160      	movs	r1, #96	; 0x60
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f000 f953 	bl	8008cf6 <TIM_ITRx_SetConfig>
      break;
 8008a50:	e01c      	b.n	8008a8c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6818      	ldr	r0, [r3, #0]
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	6859      	ldr	r1, [r3, #4]
 8008a5a:	683b      	ldr	r3, [r7, #0]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	461a      	mov	r2, r3
 8008a60:	f000 f8ea 	bl	8008c38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2140      	movs	r1, #64	; 0x40
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 f943 	bl	8008cf6 <TIM_ITRx_SetConfig>
      break;
 8008a70:	e00c      	b.n	8008a8c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	f000 f93a 	bl	8008cf6 <TIM_ITRx_SetConfig>
      break;
 8008a82:	e003      	b.n	8008a8c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	73fb      	strb	r3, [r7, #15]
      break;
 8008a88:	e000      	b.n	8008a8c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a8a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}

08008aa6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008aa6:	b480      	push	{r7}
 8008aa8:	b083      	sub	sp, #12
 8008aaa:	af00      	add	r7, sp, #0
 8008aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008aae:	bf00      	nop
 8008ab0:	370c      	adds	r7, #12
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab8:	4770      	bx	lr

08008aba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008aba:	b480      	push	{r7}
 8008abc:	b083      	sub	sp, #12
 8008abe:	af00      	add	r7, sp, #0
 8008ac0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008ac2:	bf00      	nop
 8008ac4:	370c      	adds	r7, #12
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr

08008ace <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ace:	b480      	push	{r7}
 8008ad0:	b083      	sub	sp, #12
 8008ad2:	af00      	add	r7, sp, #0
 8008ad4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ad6:	bf00      	nop
 8008ad8:	370c      	adds	r7, #12
 8008ada:	46bd      	mov	sp, r7
 8008adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae0:	4770      	bx	lr

08008ae2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ae2:	b480      	push	{r7}
 8008ae4:	b083      	sub	sp, #12
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008aea:	bf00      	nop
 8008aec:	370c      	adds	r7, #12
 8008aee:	46bd      	mov	sp, r7
 8008af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af4:	4770      	bx	lr
	...

08008af8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	4a40      	ldr	r2, [pc, #256]	; (8008c0c <TIM_Base_SetConfig+0x114>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d013      	beq.n	8008b38 <TIM_Base_SetConfig+0x40>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b16:	d00f      	beq.n	8008b38 <TIM_Base_SetConfig+0x40>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	4a3d      	ldr	r2, [pc, #244]	; (8008c10 <TIM_Base_SetConfig+0x118>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d00b      	beq.n	8008b38 <TIM_Base_SetConfig+0x40>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	4a3c      	ldr	r2, [pc, #240]	; (8008c14 <TIM_Base_SetConfig+0x11c>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d007      	beq.n	8008b38 <TIM_Base_SetConfig+0x40>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a3b      	ldr	r2, [pc, #236]	; (8008c18 <TIM_Base_SetConfig+0x120>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d003      	beq.n	8008b38 <TIM_Base_SetConfig+0x40>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a3a      	ldr	r2, [pc, #232]	; (8008c1c <TIM_Base_SetConfig+0x124>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d108      	bne.n	8008b4a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	685b      	ldr	r3, [r3, #4]
 8008b44:	68fa      	ldr	r2, [r7, #12]
 8008b46:	4313      	orrs	r3, r2
 8008b48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a2f      	ldr	r2, [pc, #188]	; (8008c0c <TIM_Base_SetConfig+0x114>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d02b      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008b58:	d027      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	4a2c      	ldr	r2, [pc, #176]	; (8008c10 <TIM_Base_SetConfig+0x118>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d023      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	4a2b      	ldr	r2, [pc, #172]	; (8008c14 <TIM_Base_SetConfig+0x11c>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d01f      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a2a      	ldr	r2, [pc, #168]	; (8008c18 <TIM_Base_SetConfig+0x120>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d01b      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	4a29      	ldr	r2, [pc, #164]	; (8008c1c <TIM_Base_SetConfig+0x124>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d017      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	4a28      	ldr	r2, [pc, #160]	; (8008c20 <TIM_Base_SetConfig+0x128>)
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d013      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	4a27      	ldr	r2, [pc, #156]	; (8008c24 <TIM_Base_SetConfig+0x12c>)
 8008b86:	4293      	cmp	r3, r2
 8008b88:	d00f      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	4a26      	ldr	r2, [pc, #152]	; (8008c28 <TIM_Base_SetConfig+0x130>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d00b      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	4a25      	ldr	r2, [pc, #148]	; (8008c2c <TIM_Base_SetConfig+0x134>)
 8008b96:	4293      	cmp	r3, r2
 8008b98:	d007      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	4a24      	ldr	r2, [pc, #144]	; (8008c30 <TIM_Base_SetConfig+0x138>)
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	d003      	beq.n	8008baa <TIM_Base_SetConfig+0xb2>
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	4a23      	ldr	r2, [pc, #140]	; (8008c34 <TIM_Base_SetConfig+0x13c>)
 8008ba6:	4293      	cmp	r3, r2
 8008ba8:	d108      	bne.n	8008bbc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	68fa      	ldr	r2, [r7, #12]
 8008bb8:	4313      	orrs	r3, r2
 8008bba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	695b      	ldr	r3, [r3, #20]
 8008bc6:	4313      	orrs	r3, r2
 8008bc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	68fa      	ldr	r2, [r7, #12]
 8008bce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	689a      	ldr	r2, [r3, #8]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681a      	ldr	r2, [r3, #0]
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a0a      	ldr	r2, [pc, #40]	; (8008c0c <TIM_Base_SetConfig+0x114>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d003      	beq.n	8008bf0 <TIM_Base_SetConfig+0xf8>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a0c      	ldr	r2, [pc, #48]	; (8008c1c <TIM_Base_SetConfig+0x124>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d103      	bne.n	8008bf8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	691a      	ldr	r2, [r3, #16]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2201      	movs	r2, #1
 8008bfc:	615a      	str	r2, [r3, #20]
}
 8008bfe:	bf00      	nop
 8008c00:	3714      	adds	r7, #20
 8008c02:	46bd      	mov	sp, r7
 8008c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c08:	4770      	bx	lr
 8008c0a:	bf00      	nop
 8008c0c:	40010000 	.word	0x40010000
 8008c10:	40000400 	.word	0x40000400
 8008c14:	40000800 	.word	0x40000800
 8008c18:	40000c00 	.word	0x40000c00
 8008c1c:	40010400 	.word	0x40010400
 8008c20:	40014000 	.word	0x40014000
 8008c24:	40014400 	.word	0x40014400
 8008c28:	40014800 	.word	0x40014800
 8008c2c:	40001800 	.word	0x40001800
 8008c30:	40001c00 	.word	0x40001c00
 8008c34:	40002000 	.word	0x40002000

08008c38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b087      	sub	sp, #28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	6a1b      	ldr	r3, [r3, #32]
 8008c48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6a1b      	ldr	r3, [r3, #32]
 8008c4e:	f023 0201 	bic.w	r2, r3, #1
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	699b      	ldr	r3, [r3, #24]
 8008c5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	011b      	lsls	r3, r3, #4
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	f023 030a 	bic.w	r3, r3, #10
 8008c74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c76:	697a      	ldr	r2, [r7, #20]
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	621a      	str	r2, [r3, #32]
}
 8008c8a:	bf00      	nop
 8008c8c:	371c      	adds	r7, #28
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c96:	b480      	push	{r7}
 8008c98:	b087      	sub	sp, #28
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	60f8      	str	r0, [r7, #12]
 8008c9e:	60b9      	str	r1, [r7, #8]
 8008ca0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	6a1b      	ldr	r3, [r3, #32]
 8008ca6:	f023 0210 	bic.w	r2, r3, #16
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	699b      	ldr	r3, [r3, #24]
 8008cb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6a1b      	ldr	r3, [r3, #32]
 8008cb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008cc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	031b      	lsls	r3, r3, #12
 8008cc6:	697a      	ldr	r2, [r7, #20]
 8008cc8:	4313      	orrs	r3, r2
 8008cca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008cd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cd4:	68bb      	ldr	r3, [r7, #8]
 8008cd6:	011b      	lsls	r3, r3, #4
 8008cd8:	693a      	ldr	r2, [r7, #16]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	697a      	ldr	r2, [r7, #20]
 8008ce2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	693a      	ldr	r2, [r7, #16]
 8008ce8:	621a      	str	r2, [r3, #32]
}
 8008cea:	bf00      	nop
 8008cec:	371c      	adds	r7, #28
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr

08008cf6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008cf6:	b480      	push	{r7}
 8008cf8:	b085      	sub	sp, #20
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
 8008cfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	689b      	ldr	r3, [r3, #8]
 8008d04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d0e:	683a      	ldr	r2, [r7, #0]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	f043 0307 	orr.w	r3, r3, #7
 8008d18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	68fa      	ldr	r2, [r7, #12]
 8008d1e:	609a      	str	r2, [r3, #8]
}
 8008d20:	bf00      	nop
 8008d22:	3714      	adds	r7, #20
 8008d24:	46bd      	mov	sp, r7
 8008d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2a:	4770      	bx	lr

08008d2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b087      	sub	sp, #28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	60f8      	str	r0, [r7, #12]
 8008d34:	60b9      	str	r1, [r7, #8]
 8008d36:	607a      	str	r2, [r7, #4]
 8008d38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	021a      	lsls	r2, r3, #8
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	431a      	orrs	r2, r3
 8008d50:	68bb      	ldr	r3, [r7, #8]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	697a      	ldr	r2, [r7, #20]
 8008d56:	4313      	orrs	r3, r2
 8008d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	697a      	ldr	r2, [r7, #20]
 8008d5e:	609a      	str	r2, [r3, #8]
}
 8008d60:	bf00      	nop
 8008d62:	371c      	adds	r7, #28
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d6c:	b480      	push	{r7}
 8008d6e:	b085      	sub	sp, #20
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d101      	bne.n	8008d84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d80:	2302      	movs	r3, #2
 8008d82:	e05a      	b.n	8008e3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2202      	movs	r2, #2
 8008d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008daa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dac:	683b      	ldr	r3, [r7, #0]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68fa      	ldr	r2, [r7, #12]
 8008db2:	4313      	orrs	r3, r2
 8008db4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	68fa      	ldr	r2, [r7, #12]
 8008dbc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a21      	ldr	r2, [pc, #132]	; (8008e48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d022      	beq.n	8008e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dd0:	d01d      	beq.n	8008e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a1d      	ldr	r2, [pc, #116]	; (8008e4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d018      	beq.n	8008e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a1b      	ldr	r2, [pc, #108]	; (8008e50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d013      	beq.n	8008e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a1a      	ldr	r2, [pc, #104]	; (8008e54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d00e      	beq.n	8008e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a18      	ldr	r2, [pc, #96]	; (8008e58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d009      	beq.n	8008e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a17      	ldr	r2, [pc, #92]	; (8008e5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d004      	beq.n	8008e0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a15      	ldr	r2, [pc, #84]	; (8008e60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d10c      	bne.n	8008e28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008e14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	685b      	ldr	r3, [r3, #4]
 8008e1a:	68ba      	ldr	r2, [r7, #8]
 8008e1c:	4313      	orrs	r3, r2
 8008e1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	68ba      	ldr	r2, [r7, #8]
 8008e26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2201      	movs	r2, #1
 8008e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	2200      	movs	r2, #0
 8008e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008e38:	2300      	movs	r3, #0
}
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	40010000 	.word	0x40010000
 8008e4c:	40000400 	.word	0x40000400
 8008e50:	40000800 	.word	0x40000800
 8008e54:	40000c00 	.word	0x40000c00
 8008e58:	40010400 	.word	0x40010400
 8008e5c:	40014000 	.word	0x40014000
 8008e60:	40001800 	.word	0x40001800

08008e64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b083      	sub	sp, #12
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e6c:	bf00      	nop
 8008e6e:	370c      	adds	r7, #12
 8008e70:	46bd      	mov	sp, r7
 8008e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e76:	4770      	bx	lr

08008e78 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e78:	b480      	push	{r7}
 8008e7a:	b083      	sub	sp, #12
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e80:	bf00      	nop
 8008e82:	370c      	adds	r7, #12
 8008e84:	46bd      	mov	sp, r7
 8008e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8a:	4770      	bx	lr

08008e8c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e8c:	b580      	push	{r7, lr}
 8008e8e:	b082      	sub	sp, #8
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d101      	bne.n	8008e9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e9a:	2301      	movs	r3, #1
 8008e9c:	e03f      	b.n	8008f1e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ea4:	b2db      	uxtb	r3, r3
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d106      	bne.n	8008eb8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f7fa f890 	bl	8002fd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2224      	movs	r2, #36	; 0x24
 8008ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	68da      	ldr	r2, [r3, #12]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008ece:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fd8b 	bl	80099ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	691a      	ldr	r2, [r3, #16]
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008ee4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	695a      	ldr	r2, [r3, #20]
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008ef4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	68da      	ldr	r2, [r3, #12]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008f04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2200      	movs	r2, #0
 8008f0a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	2220      	movs	r2, #32
 8008f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2220      	movs	r2, #32
 8008f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f26:	b580      	push	{r7, lr}
 8008f28:	b08a      	sub	sp, #40	; 0x28
 8008f2a:	af02      	add	r7, sp, #8
 8008f2c:	60f8      	str	r0, [r7, #12]
 8008f2e:	60b9      	str	r1, [r7, #8]
 8008f30:	603b      	str	r3, [r7, #0]
 8008f32:	4613      	mov	r3, r2
 8008f34:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008f36:	2300      	movs	r3, #0
 8008f38:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	2b20      	cmp	r3, #32
 8008f44:	f040 808c 	bne.w	8009060 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d002      	beq.n	8008f54 <HAL_UART_Receive+0x2e>
 8008f4e:	88fb      	ldrh	r3, [r7, #6]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d101      	bne.n	8008f58 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	e084      	b.n	8009062 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f5e:	2b01      	cmp	r3, #1
 8008f60:	d101      	bne.n	8008f66 <HAL_UART_Receive+0x40>
 8008f62:	2302      	movs	r3, #2
 8008f64:	e07d      	b.n	8009062 <HAL_UART_Receive+0x13c>
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	2201      	movs	r2, #1
 8008f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2200      	movs	r2, #0
 8008f72:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	2222      	movs	r2, #34	; 0x22
 8008f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f82:	f7fa fa47 	bl	8003414 <HAL_GetTick>
 8008f86:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	88fa      	ldrh	r2, [r7, #6]
 8008f8c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	88fa      	ldrh	r2, [r7, #6]
 8008f92:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	689b      	ldr	r3, [r3, #8]
 8008f98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f9c:	d108      	bne.n	8008fb0 <HAL_UART_Receive+0x8a>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	691b      	ldr	r3, [r3, #16]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d104      	bne.n	8008fb0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8008fa6:	2300      	movs	r3, #0
 8008fa8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	61bb      	str	r3, [r7, #24]
 8008fae:	e003      	b.n	8008fb8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8008fc0:	e043      	b.n	800904a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8008fc2:	683b      	ldr	r3, [r7, #0]
 8008fc4:	9300      	str	r3, [sp, #0]
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	2120      	movs	r1, #32
 8008fcc:	68f8      	ldr	r0, [r7, #12]
 8008fce:	f000 fb05 	bl	80095dc <UART_WaitOnFlagUntilTimeout>
 8008fd2:	4603      	mov	r3, r0
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d001      	beq.n	8008fdc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8008fd8:	2303      	movs	r3, #3
 8008fda:	e042      	b.n	8009062 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8008fdc:	69fb      	ldr	r3, [r7, #28]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d10c      	bne.n	8008ffc <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	b29b      	uxth	r3, r3
 8008fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8008ff4:	69bb      	ldr	r3, [r7, #24]
 8008ff6:	3302      	adds	r3, #2
 8008ff8:	61bb      	str	r3, [r7, #24]
 8008ffa:	e01f      	b.n	800903c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009004:	d007      	beq.n	8009016 <HAL_UART_Receive+0xf0>
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d10a      	bne.n	8009024 <HAL_UART_Receive+0xfe>
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	691b      	ldr	r3, [r3, #16]
 8009012:	2b00      	cmp	r3, #0
 8009014:	d106      	bne.n	8009024 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	b2da      	uxtb	r2, r3
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	701a      	strb	r2, [r3, #0]
 8009022:	e008      	b.n	8009036 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	685b      	ldr	r3, [r3, #4]
 800902a:	b2db      	uxtb	r3, r3
 800902c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009030:	b2da      	uxtb	r2, r3
 8009032:	69fb      	ldr	r3, [r7, #28]
 8009034:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8009036:	69fb      	ldr	r3, [r7, #28]
 8009038:	3301      	adds	r3, #1
 800903a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009040:	b29b      	uxth	r3, r3
 8009042:	3b01      	subs	r3, #1
 8009044:	b29a      	uxth	r2, r3
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800904e:	b29b      	uxth	r3, r3
 8009050:	2b00      	cmp	r3, #0
 8009052:	d1b6      	bne.n	8008fc2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	2220      	movs	r2, #32
 8009058:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800905c:	2300      	movs	r3, #0
 800905e:	e000      	b.n	8009062 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8009060:	2302      	movs	r3, #2
  }
}
 8009062:	4618      	mov	r0, r3
 8009064:	3720      	adds	r7, #32
 8009066:	46bd      	mov	sp, r7
 8009068:	bd80      	pop	{r7, pc}
	...

0800906c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b0ba      	sub	sp, #232	; 0xe8
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	68db      	ldr	r3, [r3, #12]
 8009084:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	695b      	ldr	r3, [r3, #20]
 800908e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009092:	2300      	movs	r3, #0
 8009094:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009098:	2300      	movs	r3, #0
 800909a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800909e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090a2:	f003 030f 	and.w	r3, r3, #15
 80090a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80090aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d10f      	bne.n	80090d2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090b6:	f003 0320 	and.w	r3, r3, #32
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d009      	beq.n	80090d2 <HAL_UART_IRQHandler+0x66>
 80090be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090c2:	f003 0320 	and.w	r3, r3, #32
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d003      	beq.n	80090d2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fbd3 	bl	8009876 <UART_Receive_IT>
      return;
 80090d0:	e256      	b.n	8009580 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80090d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f000 80de 	beq.w	8009298 <HAL_UART_IRQHandler+0x22c>
 80090dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090e0:	f003 0301 	and.w	r3, r3, #1
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d106      	bne.n	80090f6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80090e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090ec:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	f000 80d1 	beq.w	8009298 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80090f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090fa:	f003 0301 	and.w	r3, r3, #1
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00b      	beq.n	800911a <HAL_UART_IRQHandler+0xae>
 8009102:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800910a:	2b00      	cmp	r3, #0
 800910c:	d005      	beq.n	800911a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009112:	f043 0201 	orr.w	r2, r3, #1
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800911a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800911e:	f003 0304 	and.w	r3, r3, #4
 8009122:	2b00      	cmp	r3, #0
 8009124:	d00b      	beq.n	800913e <HAL_UART_IRQHandler+0xd2>
 8009126:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800912a:	f003 0301 	and.w	r3, r3, #1
 800912e:	2b00      	cmp	r3, #0
 8009130:	d005      	beq.n	800913e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009136:	f043 0202 	orr.w	r2, r3, #2
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800913e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009142:	f003 0302 	and.w	r3, r3, #2
 8009146:	2b00      	cmp	r3, #0
 8009148:	d00b      	beq.n	8009162 <HAL_UART_IRQHandler+0xf6>
 800914a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800914e:	f003 0301 	and.w	r3, r3, #1
 8009152:	2b00      	cmp	r3, #0
 8009154:	d005      	beq.n	8009162 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800915a:	f043 0204 	orr.w	r2, r3, #4
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009162:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009166:	f003 0308 	and.w	r3, r3, #8
 800916a:	2b00      	cmp	r3, #0
 800916c:	d011      	beq.n	8009192 <HAL_UART_IRQHandler+0x126>
 800916e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009172:	f003 0320 	and.w	r3, r3, #32
 8009176:	2b00      	cmp	r3, #0
 8009178:	d105      	bne.n	8009186 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800917a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800917e:	f003 0301 	and.w	r3, r3, #1
 8009182:	2b00      	cmp	r3, #0
 8009184:	d005      	beq.n	8009192 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918a:	f043 0208 	orr.w	r2, r3, #8
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009196:	2b00      	cmp	r3, #0
 8009198:	f000 81ed 	beq.w	8009576 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800919c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091a0:	f003 0320 	and.w	r3, r3, #32
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d008      	beq.n	80091ba <HAL_UART_IRQHandler+0x14e>
 80091a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80091ac:	f003 0320 	and.w	r3, r3, #32
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d002      	beq.n	80091ba <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80091b4:	6878      	ldr	r0, [r7, #4]
 80091b6:	f000 fb5e 	bl	8009876 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	695b      	ldr	r3, [r3, #20]
 80091c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c4:	2b40      	cmp	r3, #64	; 0x40
 80091c6:	bf0c      	ite	eq
 80091c8:	2301      	moveq	r3, #1
 80091ca:	2300      	movne	r3, #0
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d6:	f003 0308 	and.w	r3, r3, #8
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d103      	bne.n	80091e6 <HAL_UART_IRQHandler+0x17a>
 80091de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d04f      	beq.n	8009286 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091e6:	6878      	ldr	r0, [r7, #4]
 80091e8:	f000 fa66 	bl	80096b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	695b      	ldr	r3, [r3, #20]
 80091f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091f6:	2b40      	cmp	r3, #64	; 0x40
 80091f8:	d141      	bne.n	800927e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	3314      	adds	r3, #20
 8009200:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009204:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009208:	e853 3f00 	ldrex	r3, [r3]
 800920c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009210:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009214:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009218:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	3314      	adds	r3, #20
 8009222:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009226:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800922a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009232:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009236:	e841 2300 	strex	r3, r2, [r1]
 800923a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800923e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009242:	2b00      	cmp	r3, #0
 8009244:	d1d9      	bne.n	80091fa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800924a:	2b00      	cmp	r3, #0
 800924c:	d013      	beq.n	8009276 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009252:	4a7d      	ldr	r2, [pc, #500]	; (8009448 <HAL_UART_IRQHandler+0x3dc>)
 8009254:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800925a:	4618      	mov	r0, r3
 800925c:	f7fa fb92 	bl	8003984 <HAL_DMA_Abort_IT>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d016      	beq.n	8009294 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800926a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009270:	4610      	mov	r0, r2
 8009272:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009274:	e00e      	b.n	8009294 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f99a 	bl	80095b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800927c:	e00a      	b.n	8009294 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f000 f996 	bl	80095b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009284:	e006      	b.n	8009294 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 f992 	bl	80095b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009292:	e170      	b.n	8009576 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009294:	bf00      	nop
    return;
 8009296:	e16e      	b.n	8009576 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929c:	2b01      	cmp	r3, #1
 800929e:	f040 814a 	bne.w	8009536 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80092a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80092a6:	f003 0310 	and.w	r3, r3, #16
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f000 8143 	beq.w	8009536 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80092b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80092b4:	f003 0310 	and.w	r3, r3, #16
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	f000 813c 	beq.w	8009536 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80092be:	2300      	movs	r3, #0
 80092c0:	60bb      	str	r3, [r7, #8]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	60bb      	str	r3, [r7, #8]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	685b      	ldr	r3, [r3, #4]
 80092d0:	60bb      	str	r3, [r7, #8]
 80092d2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	695b      	ldr	r3, [r3, #20]
 80092da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092de:	2b40      	cmp	r3, #64	; 0x40
 80092e0:	f040 80b4 	bne.w	800944c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	685b      	ldr	r3, [r3, #4]
 80092ec:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	f000 8140 	beq.w	800957a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80092fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009302:	429a      	cmp	r2, r3
 8009304:	f080 8139 	bcs.w	800957a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800930e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009314:	69db      	ldr	r3, [r3, #28]
 8009316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800931a:	f000 8088 	beq.w	800942e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	330c      	adds	r3, #12
 8009324:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009328:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800932c:	e853 3f00 	ldrex	r3, [r3]
 8009330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009334:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009338:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800933c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	330c      	adds	r3, #12
 8009346:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800934a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800934e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009352:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009356:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800935a:	e841 2300 	strex	r3, r2, [r1]
 800935e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009362:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009366:	2b00      	cmp	r3, #0
 8009368:	d1d9      	bne.n	800931e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3314      	adds	r3, #20
 8009370:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009372:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009374:	e853 3f00 	ldrex	r3, [r3]
 8009378:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800937a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800937c:	f023 0301 	bic.w	r3, r3, #1
 8009380:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	3314      	adds	r3, #20
 800938a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800938e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009392:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009394:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009396:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800939a:	e841 2300 	strex	r3, r2, [r1]
 800939e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80093a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1e1      	bne.n	800936a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	3314      	adds	r3, #20
 80093ac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093b0:	e853 3f00 	ldrex	r3, [r3]
 80093b4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80093b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80093bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3314      	adds	r3, #20
 80093c6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80093ca:	66fa      	str	r2, [r7, #108]	; 0x6c
 80093cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80093d0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80093d2:	e841 2300 	strex	r3, r2, [r1]
 80093d6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80093d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d1e3      	bne.n	80093a6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	2220      	movs	r2, #32
 80093e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	330c      	adds	r3, #12
 80093f2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093f6:	e853 3f00 	ldrex	r3, [r3]
 80093fa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80093fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093fe:	f023 0310 	bic.w	r3, r3, #16
 8009402:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	330c      	adds	r3, #12
 800940c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009410:	65ba      	str	r2, [r7, #88]	; 0x58
 8009412:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009414:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009416:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009418:	e841 2300 	strex	r3, r2, [r1]
 800941c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800941e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009420:	2b00      	cmp	r3, #0
 8009422:	d1e3      	bne.n	80093ec <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009428:	4618      	mov	r0, r3
 800942a:	f7fa fa3b 	bl	80038a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009436:	b29b      	uxth	r3, r3
 8009438:	1ad3      	subs	r3, r2, r3
 800943a:	b29b      	uxth	r3, r3
 800943c:	4619      	mov	r1, r3
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 f8c0 	bl	80095c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009444:	e099      	b.n	800957a <HAL_UART_IRQHandler+0x50e>
 8009446:	bf00      	nop
 8009448:	0800977f 	.word	0x0800977f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009454:	b29b      	uxth	r3, r3
 8009456:	1ad3      	subs	r3, r2, r3
 8009458:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009460:	b29b      	uxth	r3, r3
 8009462:	2b00      	cmp	r3, #0
 8009464:	f000 808b 	beq.w	800957e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8009468:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800946c:	2b00      	cmp	r3, #0
 800946e:	f000 8086 	beq.w	800957e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	330c      	adds	r3, #12
 8009478:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800947c:	e853 3f00 	ldrex	r3, [r3]
 8009480:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009484:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009488:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	330c      	adds	r3, #12
 8009492:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009496:	647a      	str	r2, [r7, #68]	; 0x44
 8009498:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800949c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800949e:	e841 2300 	strex	r3, r2, [r1]
 80094a2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1e3      	bne.n	8009472 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	3314      	adds	r3, #20
 80094b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094b4:	e853 3f00 	ldrex	r3, [r3]
 80094b8:	623b      	str	r3, [r7, #32]
   return(result);
 80094ba:	6a3b      	ldr	r3, [r7, #32]
 80094bc:	f023 0301 	bic.w	r3, r3, #1
 80094c0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	3314      	adds	r3, #20
 80094ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80094ce:	633a      	str	r2, [r7, #48]	; 0x30
 80094d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094d6:	e841 2300 	strex	r3, r2, [r1]
 80094da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1e3      	bne.n	80094aa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2220      	movs	r2, #32
 80094e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2200      	movs	r2, #0
 80094ee:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	330c      	adds	r3, #12
 80094f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094f8:	693b      	ldr	r3, [r7, #16]
 80094fa:	e853 3f00 	ldrex	r3, [r3]
 80094fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f023 0310 	bic.w	r3, r3, #16
 8009506:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	330c      	adds	r3, #12
 8009510:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009514:	61fa      	str	r2, [r7, #28]
 8009516:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009518:	69b9      	ldr	r1, [r7, #24]
 800951a:	69fa      	ldr	r2, [r7, #28]
 800951c:	e841 2300 	strex	r3, r2, [r1]
 8009520:	617b      	str	r3, [r7, #20]
   return(result);
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d1e3      	bne.n	80094f0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009528:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800952c:	4619      	mov	r1, r3
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 f848 	bl	80095c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009534:	e023      	b.n	800957e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800953a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800953e:	2b00      	cmp	r3, #0
 8009540:	d009      	beq.n	8009556 <HAL_UART_IRQHandler+0x4ea>
 8009542:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800954a:	2b00      	cmp	r3, #0
 800954c:	d003      	beq.n	8009556 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800954e:	6878      	ldr	r0, [r7, #4]
 8009550:	f000 f929 	bl	80097a6 <UART_Transmit_IT>
    return;
 8009554:	e014      	b.n	8009580 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800955a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800955e:	2b00      	cmp	r3, #0
 8009560:	d00e      	beq.n	8009580 <HAL_UART_IRQHandler+0x514>
 8009562:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800956a:	2b00      	cmp	r3, #0
 800956c:	d008      	beq.n	8009580 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 f969 	bl	8009846 <UART_EndTransmit_IT>
    return;
 8009574:	e004      	b.n	8009580 <HAL_UART_IRQHandler+0x514>
    return;
 8009576:	bf00      	nop
 8009578:	e002      	b.n	8009580 <HAL_UART_IRQHandler+0x514>
      return;
 800957a:	bf00      	nop
 800957c:	e000      	b.n	8009580 <HAL_UART_IRQHandler+0x514>
      return;
 800957e:	bf00      	nop
  }
}
 8009580:	37e8      	adds	r7, #232	; 0xe8
 8009582:	46bd      	mov	sp, r7
 8009584:	bd80      	pop	{r7, pc}
 8009586:	bf00      	nop

08009588 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	460b      	mov	r3, r1
 80095ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80095d0:	bf00      	nop
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b090      	sub	sp, #64	; 0x40
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	603b      	str	r3, [r7, #0]
 80095e8:	4613      	mov	r3, r2
 80095ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095ec:	e050      	b.n	8009690 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095f4:	d04c      	beq.n	8009690 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80095f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d007      	beq.n	800960c <UART_WaitOnFlagUntilTimeout+0x30>
 80095fc:	f7f9 ff0a 	bl	8003414 <HAL_GetTick>
 8009600:	4602      	mov	r2, r0
 8009602:	683b      	ldr	r3, [r7, #0]
 8009604:	1ad3      	subs	r3, r2, r3
 8009606:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009608:	429a      	cmp	r2, r3
 800960a:	d241      	bcs.n	8009690 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	330c      	adds	r3, #12
 8009612:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009616:	e853 3f00 	ldrex	r3, [r3]
 800961a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800961c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009622:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	330c      	adds	r3, #12
 800962a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800962c:	637a      	str	r2, [r7, #52]	; 0x34
 800962e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009630:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009634:	e841 2300 	strex	r3, r2, [r1]
 8009638:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800963a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800963c:	2b00      	cmp	r3, #0
 800963e:	d1e5      	bne.n	800960c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	3314      	adds	r3, #20
 8009646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009648:	697b      	ldr	r3, [r7, #20]
 800964a:	e853 3f00 	ldrex	r3, [r3]
 800964e:	613b      	str	r3, [r7, #16]
   return(result);
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	f023 0301 	bic.w	r3, r3, #1
 8009656:	63bb      	str	r3, [r7, #56]	; 0x38
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	3314      	adds	r3, #20
 800965e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009660:	623a      	str	r2, [r7, #32]
 8009662:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009664:	69f9      	ldr	r1, [r7, #28]
 8009666:	6a3a      	ldr	r2, [r7, #32]
 8009668:	e841 2300 	strex	r3, r2, [r1]
 800966c:	61bb      	str	r3, [r7, #24]
   return(result);
 800966e:	69bb      	ldr	r3, [r7, #24]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d1e5      	bne.n	8009640 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	2220      	movs	r2, #32
 8009678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2220      	movs	r2, #32
 8009680:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800968c:	2303      	movs	r3, #3
 800968e:	e00f      	b.n	80096b0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009690:	68fb      	ldr	r3, [r7, #12]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	681a      	ldr	r2, [r3, #0]
 8009696:	68bb      	ldr	r3, [r7, #8]
 8009698:	4013      	ands	r3, r2
 800969a:	68ba      	ldr	r2, [r7, #8]
 800969c:	429a      	cmp	r2, r3
 800969e:	bf0c      	ite	eq
 80096a0:	2301      	moveq	r3, #1
 80096a2:	2300      	movne	r3, #0
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	461a      	mov	r2, r3
 80096a8:	79fb      	ldrb	r3, [r7, #7]
 80096aa:	429a      	cmp	r2, r3
 80096ac:	d09f      	beq.n	80095ee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80096ae:	2300      	movs	r3, #0
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	3740      	adds	r7, #64	; 0x40
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd80      	pop	{r7, pc}

080096b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096b8:	b480      	push	{r7}
 80096ba:	b095      	sub	sp, #84	; 0x54
 80096bc:	af00      	add	r7, sp, #0
 80096be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	330c      	adds	r3, #12
 80096c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096ca:	e853 3f00 	ldrex	r3, [r3]
 80096ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80096d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80096d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	330c      	adds	r3, #12
 80096de:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80096e0:	643a      	str	r2, [r7, #64]	; 0x40
 80096e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80096e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80096e8:	e841 2300 	strex	r3, r2, [r1]
 80096ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80096ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d1e5      	bne.n	80096c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	3314      	adds	r3, #20
 80096fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fc:	6a3b      	ldr	r3, [r7, #32]
 80096fe:	e853 3f00 	ldrex	r3, [r3]
 8009702:	61fb      	str	r3, [r7, #28]
   return(result);
 8009704:	69fb      	ldr	r3, [r7, #28]
 8009706:	f023 0301 	bic.w	r3, r3, #1
 800970a:	64bb      	str	r3, [r7, #72]	; 0x48
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	3314      	adds	r3, #20
 8009712:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009714:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800971a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800971c:	e841 2300 	strex	r3, r2, [r1]
 8009720:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1e5      	bne.n	80096f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800972c:	2b01      	cmp	r3, #1
 800972e:	d119      	bne.n	8009764 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	330c      	adds	r3, #12
 8009736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	e853 3f00 	ldrex	r3, [r3]
 800973e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	f023 0310 	bic.w	r3, r3, #16
 8009746:	647b      	str	r3, [r7, #68]	; 0x44
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	330c      	adds	r3, #12
 800974e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009750:	61ba      	str	r2, [r7, #24]
 8009752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009754:	6979      	ldr	r1, [r7, #20]
 8009756:	69ba      	ldr	r2, [r7, #24]
 8009758:	e841 2300 	strex	r3, r2, [r1]
 800975c:	613b      	str	r3, [r7, #16]
   return(result);
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1e5      	bne.n	8009730 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	2220      	movs	r2, #32
 8009768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	2200      	movs	r2, #0
 8009770:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009772:	bf00      	nop
 8009774:	3754      	adds	r7, #84	; 0x54
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr

0800977e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800977e:	b580      	push	{r7, lr}
 8009780:	b084      	sub	sp, #16
 8009782:	af00      	add	r7, sp, #0
 8009784:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2200      	movs	r2, #0
 8009796:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009798:	68f8      	ldr	r0, [r7, #12]
 800979a:	f7ff ff09 	bl	80095b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800979e:	bf00      	nop
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80097a6:	b480      	push	{r7}
 80097a8:	b085      	sub	sp, #20
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	2b21      	cmp	r3, #33	; 0x21
 80097b8:	d13e      	bne.n	8009838 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	689b      	ldr	r3, [r3, #8]
 80097be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097c2:	d114      	bne.n	80097ee <UART_Transmit_IT+0x48>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	691b      	ldr	r3, [r3, #16]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d110      	bne.n	80097ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6a1b      	ldr	r3, [r3, #32]
 80097d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	881b      	ldrh	r3, [r3, #0]
 80097d6:	461a      	mov	r2, r3
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80097e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6a1b      	ldr	r3, [r3, #32]
 80097e6:	1c9a      	adds	r2, r3, #2
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	621a      	str	r2, [r3, #32]
 80097ec:	e008      	b.n	8009800 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6a1b      	ldr	r3, [r3, #32]
 80097f2:	1c59      	adds	r1, r3, #1
 80097f4:	687a      	ldr	r2, [r7, #4]
 80097f6:	6211      	str	r1, [r2, #32]
 80097f8:	781a      	ldrb	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009804:	b29b      	uxth	r3, r3
 8009806:	3b01      	subs	r3, #1
 8009808:	b29b      	uxth	r3, r3
 800980a:	687a      	ldr	r2, [r7, #4]
 800980c:	4619      	mov	r1, r3
 800980e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009810:	2b00      	cmp	r3, #0
 8009812:	d10f      	bne.n	8009834 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	68da      	ldr	r2, [r3, #12]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009822:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	68da      	ldr	r2, [r3, #12]
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009832:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009834:	2300      	movs	r3, #0
 8009836:	e000      	b.n	800983a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009838:	2302      	movs	r3, #2
  }
}
 800983a:	4618      	mov	r0, r3
 800983c:	3714      	adds	r7, #20
 800983e:	46bd      	mov	sp, r7
 8009840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009844:	4770      	bx	lr

08009846 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009846:	b580      	push	{r7, lr}
 8009848:	b082      	sub	sp, #8
 800984a:	af00      	add	r7, sp, #0
 800984c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	68da      	ldr	r2, [r3, #12]
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800985c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2220      	movs	r2, #32
 8009862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009866:	6878      	ldr	r0, [r7, #4]
 8009868:	f7ff fe8e 	bl	8009588 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800986c:	2300      	movs	r3, #0
}
 800986e:	4618      	mov	r0, r3
 8009870:	3708      	adds	r7, #8
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}

08009876 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009876:	b580      	push	{r7, lr}
 8009878:	b08c      	sub	sp, #48	; 0x30
 800987a:	af00      	add	r7, sp, #0
 800987c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009884:	b2db      	uxtb	r3, r3
 8009886:	2b22      	cmp	r3, #34	; 0x22
 8009888:	f040 80ab 	bne.w	80099e2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	689b      	ldr	r3, [r3, #8]
 8009890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009894:	d117      	bne.n	80098c6 <UART_Receive_IT+0x50>
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d113      	bne.n	80098c6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800989e:	2300      	movs	r3, #0
 80098a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098a6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098b8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098be:	1c9a      	adds	r2, r3, #2
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	629a      	str	r2, [r3, #40]	; 0x28
 80098c4:	e026      	b.n	8009914 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ca:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80098cc:	2300      	movs	r3, #0
 80098ce:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	689b      	ldr	r3, [r3, #8]
 80098d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098d8:	d007      	beq.n	80098ea <UART_Receive_IT+0x74>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d10a      	bne.n	80098f8 <UART_Receive_IT+0x82>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	691b      	ldr	r3, [r3, #16]
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d106      	bne.n	80098f8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	b2da      	uxtb	r2, r3
 80098f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f4:	701a      	strb	r2, [r3, #0]
 80098f6:	e008      	b.n	800990a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	685b      	ldr	r3, [r3, #4]
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009904:	b2da      	uxtb	r2, r3
 8009906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009908:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990e:	1c5a      	adds	r2, r3, #1
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009918:	b29b      	uxth	r3, r3
 800991a:	3b01      	subs	r3, #1
 800991c:	b29b      	uxth	r3, r3
 800991e:	687a      	ldr	r2, [r7, #4]
 8009920:	4619      	mov	r1, r3
 8009922:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009924:	2b00      	cmp	r3, #0
 8009926:	d15a      	bne.n	80099de <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	68da      	ldr	r2, [r3, #12]
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	f022 0220 	bic.w	r2, r2, #32
 8009936:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	68da      	ldr	r2, [r3, #12]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009946:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	695a      	ldr	r2, [r3, #20]
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f022 0201 	bic.w	r2, r2, #1
 8009956:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2220      	movs	r2, #32
 800995c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009964:	2b01      	cmp	r3, #1
 8009966:	d135      	bne.n	80099d4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	330c      	adds	r3, #12
 8009974:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009976:	697b      	ldr	r3, [r7, #20]
 8009978:	e853 3f00 	ldrex	r3, [r3]
 800997c:	613b      	str	r3, [r7, #16]
   return(result);
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	f023 0310 	bic.w	r3, r3, #16
 8009984:	627b      	str	r3, [r7, #36]	; 0x24
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	330c      	adds	r3, #12
 800998c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800998e:	623a      	str	r2, [r7, #32]
 8009990:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009992:	69f9      	ldr	r1, [r7, #28]
 8009994:	6a3a      	ldr	r2, [r7, #32]
 8009996:	e841 2300 	strex	r3, r2, [r1]
 800999a:	61bb      	str	r3, [r7, #24]
   return(result);
 800999c:	69bb      	ldr	r3, [r7, #24]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d1e5      	bne.n	800996e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 0310 	and.w	r3, r3, #16
 80099ac:	2b10      	cmp	r3, #16
 80099ae:	d10a      	bne.n	80099c6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80099b0:	2300      	movs	r3, #0
 80099b2:	60fb      	str	r3, [r7, #12]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	60fb      	str	r3, [r7, #12]
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	685b      	ldr	r3, [r3, #4]
 80099c2:	60fb      	str	r3, [r7, #12]
 80099c4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80099ca:	4619      	mov	r1, r3
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f7ff fdf9 	bl	80095c4 <HAL_UARTEx_RxEventCallback>
 80099d2:	e002      	b.n	80099da <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f7ff fde1 	bl	800959c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80099da:	2300      	movs	r3, #0
 80099dc:	e002      	b.n	80099e4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80099de:	2300      	movs	r3, #0
 80099e0:	e000      	b.n	80099e4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80099e2:	2302      	movs	r3, #2
  }
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3730      	adds	r7, #48	; 0x30
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80099ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80099f0:	b0c0      	sub	sp, #256	; 0x100
 80099f2:	af00      	add	r7, sp, #0
 80099f4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	691b      	ldr	r3, [r3, #16]
 8009a00:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009a04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a08:	68d9      	ldr	r1, [r3, #12]
 8009a0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a0e:	681a      	ldr	r2, [r3, #0]
 8009a10:	ea40 0301 	orr.w	r3, r0, r1
 8009a14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a1a:	689a      	ldr	r2, [r3, #8]
 8009a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	431a      	orrs	r2, r3
 8009a24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a28:	695b      	ldr	r3, [r3, #20]
 8009a2a:	431a      	orrs	r2, r3
 8009a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a30:	69db      	ldr	r3, [r3, #28]
 8009a32:	4313      	orrs	r3, r2
 8009a34:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009a44:	f021 010c 	bic.w	r1, r1, #12
 8009a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009a52:	430b      	orrs	r3, r1
 8009a54:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a66:	6999      	ldr	r1, [r3, #24]
 8009a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	ea40 0301 	orr.w	r3, r0, r1
 8009a72:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a78:	681a      	ldr	r2, [r3, #0]
 8009a7a:	4b8f      	ldr	r3, [pc, #572]	; (8009cb8 <UART_SetConfig+0x2cc>)
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d005      	beq.n	8009a8c <UART_SetConfig+0xa0>
 8009a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a84:	681a      	ldr	r2, [r3, #0]
 8009a86:	4b8d      	ldr	r3, [pc, #564]	; (8009cbc <UART_SetConfig+0x2d0>)
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d104      	bne.n	8009a96 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a8c:	f7fd fa36 	bl	8006efc <HAL_RCC_GetPCLK2Freq>
 8009a90:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009a94:	e003      	b.n	8009a9e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a96:	f7fd fa1d 	bl	8006ed4 <HAL_RCC_GetPCLK1Freq>
 8009a9a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aa2:	69db      	ldr	r3, [r3, #28]
 8009aa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009aa8:	f040 810c 	bne.w	8009cc4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009aac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009ab6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009aba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009abe:	4622      	mov	r2, r4
 8009ac0:	462b      	mov	r3, r5
 8009ac2:	1891      	adds	r1, r2, r2
 8009ac4:	65b9      	str	r1, [r7, #88]	; 0x58
 8009ac6:	415b      	adcs	r3, r3
 8009ac8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009aca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009ace:	4621      	mov	r1, r4
 8009ad0:	eb12 0801 	adds.w	r8, r2, r1
 8009ad4:	4629      	mov	r1, r5
 8009ad6:	eb43 0901 	adc.w	r9, r3, r1
 8009ada:	f04f 0200 	mov.w	r2, #0
 8009ade:	f04f 0300 	mov.w	r3, #0
 8009ae2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009ae6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009aea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009aee:	4690      	mov	r8, r2
 8009af0:	4699      	mov	r9, r3
 8009af2:	4623      	mov	r3, r4
 8009af4:	eb18 0303 	adds.w	r3, r8, r3
 8009af8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009afc:	462b      	mov	r3, r5
 8009afe:	eb49 0303 	adc.w	r3, r9, r3
 8009b02:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b0a:	685b      	ldr	r3, [r3, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009b12:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009b16:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	18db      	adds	r3, r3, r3
 8009b1e:	653b      	str	r3, [r7, #80]	; 0x50
 8009b20:	4613      	mov	r3, r2
 8009b22:	eb42 0303 	adc.w	r3, r2, r3
 8009b26:	657b      	str	r3, [r7, #84]	; 0x54
 8009b28:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009b2c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009b30:	f7f7 f88a 	bl	8000c48 <__aeabi_uldivmod>
 8009b34:	4602      	mov	r2, r0
 8009b36:	460b      	mov	r3, r1
 8009b38:	4b61      	ldr	r3, [pc, #388]	; (8009cc0 <UART_SetConfig+0x2d4>)
 8009b3a:	fba3 2302 	umull	r2, r3, r3, r2
 8009b3e:	095b      	lsrs	r3, r3, #5
 8009b40:	011c      	lsls	r4, r3, #4
 8009b42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b46:	2200      	movs	r2, #0
 8009b48:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b4c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009b50:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009b54:	4642      	mov	r2, r8
 8009b56:	464b      	mov	r3, r9
 8009b58:	1891      	adds	r1, r2, r2
 8009b5a:	64b9      	str	r1, [r7, #72]	; 0x48
 8009b5c:	415b      	adcs	r3, r3
 8009b5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b60:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009b64:	4641      	mov	r1, r8
 8009b66:	eb12 0a01 	adds.w	sl, r2, r1
 8009b6a:	4649      	mov	r1, r9
 8009b6c:	eb43 0b01 	adc.w	fp, r3, r1
 8009b70:	f04f 0200 	mov.w	r2, #0
 8009b74:	f04f 0300 	mov.w	r3, #0
 8009b78:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009b7c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009b80:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b84:	4692      	mov	sl, r2
 8009b86:	469b      	mov	fp, r3
 8009b88:	4643      	mov	r3, r8
 8009b8a:	eb1a 0303 	adds.w	r3, sl, r3
 8009b8e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b92:	464b      	mov	r3, r9
 8009b94:	eb4b 0303 	adc.w	r3, fp, r3
 8009b98:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ba0:	685b      	ldr	r3, [r3, #4]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009ba8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009bac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	18db      	adds	r3, r3, r3
 8009bb4:	643b      	str	r3, [r7, #64]	; 0x40
 8009bb6:	4613      	mov	r3, r2
 8009bb8:	eb42 0303 	adc.w	r3, r2, r3
 8009bbc:	647b      	str	r3, [r7, #68]	; 0x44
 8009bbe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009bc2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009bc6:	f7f7 f83f 	bl	8000c48 <__aeabi_uldivmod>
 8009bca:	4602      	mov	r2, r0
 8009bcc:	460b      	mov	r3, r1
 8009bce:	4611      	mov	r1, r2
 8009bd0:	4b3b      	ldr	r3, [pc, #236]	; (8009cc0 <UART_SetConfig+0x2d4>)
 8009bd2:	fba3 2301 	umull	r2, r3, r3, r1
 8009bd6:	095b      	lsrs	r3, r3, #5
 8009bd8:	2264      	movs	r2, #100	; 0x64
 8009bda:	fb02 f303 	mul.w	r3, r2, r3
 8009bde:	1acb      	subs	r3, r1, r3
 8009be0:	00db      	lsls	r3, r3, #3
 8009be2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009be6:	4b36      	ldr	r3, [pc, #216]	; (8009cc0 <UART_SetConfig+0x2d4>)
 8009be8:	fba3 2302 	umull	r2, r3, r3, r2
 8009bec:	095b      	lsrs	r3, r3, #5
 8009bee:	005b      	lsls	r3, r3, #1
 8009bf0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009bf4:	441c      	add	r4, r3
 8009bf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009bfa:	2200      	movs	r2, #0
 8009bfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c00:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009c04:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009c08:	4642      	mov	r2, r8
 8009c0a:	464b      	mov	r3, r9
 8009c0c:	1891      	adds	r1, r2, r2
 8009c0e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009c10:	415b      	adcs	r3, r3
 8009c12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c14:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009c18:	4641      	mov	r1, r8
 8009c1a:	1851      	adds	r1, r2, r1
 8009c1c:	6339      	str	r1, [r7, #48]	; 0x30
 8009c1e:	4649      	mov	r1, r9
 8009c20:	414b      	adcs	r3, r1
 8009c22:	637b      	str	r3, [r7, #52]	; 0x34
 8009c24:	f04f 0200 	mov.w	r2, #0
 8009c28:	f04f 0300 	mov.w	r3, #0
 8009c2c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009c30:	4659      	mov	r1, fp
 8009c32:	00cb      	lsls	r3, r1, #3
 8009c34:	4651      	mov	r1, sl
 8009c36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c3a:	4651      	mov	r1, sl
 8009c3c:	00ca      	lsls	r2, r1, #3
 8009c3e:	4610      	mov	r0, r2
 8009c40:	4619      	mov	r1, r3
 8009c42:	4603      	mov	r3, r0
 8009c44:	4642      	mov	r2, r8
 8009c46:	189b      	adds	r3, r3, r2
 8009c48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c4c:	464b      	mov	r3, r9
 8009c4e:	460a      	mov	r2, r1
 8009c50:	eb42 0303 	adc.w	r3, r2, r3
 8009c54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c5c:	685b      	ldr	r3, [r3, #4]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009c64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009c68:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	18db      	adds	r3, r3, r3
 8009c70:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c72:	4613      	mov	r3, r2
 8009c74:	eb42 0303 	adc.w	r3, r2, r3
 8009c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c7a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c7e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009c82:	f7f6 ffe1 	bl	8000c48 <__aeabi_uldivmod>
 8009c86:	4602      	mov	r2, r0
 8009c88:	460b      	mov	r3, r1
 8009c8a:	4b0d      	ldr	r3, [pc, #52]	; (8009cc0 <UART_SetConfig+0x2d4>)
 8009c8c:	fba3 1302 	umull	r1, r3, r3, r2
 8009c90:	095b      	lsrs	r3, r3, #5
 8009c92:	2164      	movs	r1, #100	; 0x64
 8009c94:	fb01 f303 	mul.w	r3, r1, r3
 8009c98:	1ad3      	subs	r3, r2, r3
 8009c9a:	00db      	lsls	r3, r3, #3
 8009c9c:	3332      	adds	r3, #50	; 0x32
 8009c9e:	4a08      	ldr	r2, [pc, #32]	; (8009cc0 <UART_SetConfig+0x2d4>)
 8009ca0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ca4:	095b      	lsrs	r3, r3, #5
 8009ca6:	f003 0207 	and.w	r2, r3, #7
 8009caa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4422      	add	r2, r4
 8009cb2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009cb4:	e106      	b.n	8009ec4 <UART_SetConfig+0x4d8>
 8009cb6:	bf00      	nop
 8009cb8:	40011000 	.word	0x40011000
 8009cbc:	40011400 	.word	0x40011400
 8009cc0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009cc4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009cce:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009cd2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009cd6:	4642      	mov	r2, r8
 8009cd8:	464b      	mov	r3, r9
 8009cda:	1891      	adds	r1, r2, r2
 8009cdc:	6239      	str	r1, [r7, #32]
 8009cde:	415b      	adcs	r3, r3
 8009ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8009ce2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009ce6:	4641      	mov	r1, r8
 8009ce8:	1854      	adds	r4, r2, r1
 8009cea:	4649      	mov	r1, r9
 8009cec:	eb43 0501 	adc.w	r5, r3, r1
 8009cf0:	f04f 0200 	mov.w	r2, #0
 8009cf4:	f04f 0300 	mov.w	r3, #0
 8009cf8:	00eb      	lsls	r3, r5, #3
 8009cfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009cfe:	00e2      	lsls	r2, r4, #3
 8009d00:	4614      	mov	r4, r2
 8009d02:	461d      	mov	r5, r3
 8009d04:	4643      	mov	r3, r8
 8009d06:	18e3      	adds	r3, r4, r3
 8009d08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d0c:	464b      	mov	r3, r9
 8009d0e:	eb45 0303 	adc.w	r3, r5, r3
 8009d12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009d16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009d22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009d26:	f04f 0200 	mov.w	r2, #0
 8009d2a:	f04f 0300 	mov.w	r3, #0
 8009d2e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009d32:	4629      	mov	r1, r5
 8009d34:	008b      	lsls	r3, r1, #2
 8009d36:	4621      	mov	r1, r4
 8009d38:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d3c:	4621      	mov	r1, r4
 8009d3e:	008a      	lsls	r2, r1, #2
 8009d40:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009d44:	f7f6 ff80 	bl	8000c48 <__aeabi_uldivmod>
 8009d48:	4602      	mov	r2, r0
 8009d4a:	460b      	mov	r3, r1
 8009d4c:	4b60      	ldr	r3, [pc, #384]	; (8009ed0 <UART_SetConfig+0x4e4>)
 8009d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8009d52:	095b      	lsrs	r3, r3, #5
 8009d54:	011c      	lsls	r4, r3, #4
 8009d56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d5a:	2200      	movs	r2, #0
 8009d5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009d60:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009d64:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009d68:	4642      	mov	r2, r8
 8009d6a:	464b      	mov	r3, r9
 8009d6c:	1891      	adds	r1, r2, r2
 8009d6e:	61b9      	str	r1, [r7, #24]
 8009d70:	415b      	adcs	r3, r3
 8009d72:	61fb      	str	r3, [r7, #28]
 8009d74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d78:	4641      	mov	r1, r8
 8009d7a:	1851      	adds	r1, r2, r1
 8009d7c:	6139      	str	r1, [r7, #16]
 8009d7e:	4649      	mov	r1, r9
 8009d80:	414b      	adcs	r3, r1
 8009d82:	617b      	str	r3, [r7, #20]
 8009d84:	f04f 0200 	mov.w	r2, #0
 8009d88:	f04f 0300 	mov.w	r3, #0
 8009d8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d90:	4659      	mov	r1, fp
 8009d92:	00cb      	lsls	r3, r1, #3
 8009d94:	4651      	mov	r1, sl
 8009d96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d9a:	4651      	mov	r1, sl
 8009d9c:	00ca      	lsls	r2, r1, #3
 8009d9e:	4610      	mov	r0, r2
 8009da0:	4619      	mov	r1, r3
 8009da2:	4603      	mov	r3, r0
 8009da4:	4642      	mov	r2, r8
 8009da6:	189b      	adds	r3, r3, r2
 8009da8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009dac:	464b      	mov	r3, r9
 8009dae:	460a      	mov	r2, r1
 8009db0:	eb42 0303 	adc.w	r3, r2, r3
 8009db4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009dbc:	685b      	ldr	r3, [r3, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	67bb      	str	r3, [r7, #120]	; 0x78
 8009dc2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009dc4:	f04f 0200 	mov.w	r2, #0
 8009dc8:	f04f 0300 	mov.w	r3, #0
 8009dcc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009dd0:	4649      	mov	r1, r9
 8009dd2:	008b      	lsls	r3, r1, #2
 8009dd4:	4641      	mov	r1, r8
 8009dd6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009dda:	4641      	mov	r1, r8
 8009ddc:	008a      	lsls	r2, r1, #2
 8009dde:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009de2:	f7f6 ff31 	bl	8000c48 <__aeabi_uldivmod>
 8009de6:	4602      	mov	r2, r0
 8009de8:	460b      	mov	r3, r1
 8009dea:	4611      	mov	r1, r2
 8009dec:	4b38      	ldr	r3, [pc, #224]	; (8009ed0 <UART_SetConfig+0x4e4>)
 8009dee:	fba3 2301 	umull	r2, r3, r3, r1
 8009df2:	095b      	lsrs	r3, r3, #5
 8009df4:	2264      	movs	r2, #100	; 0x64
 8009df6:	fb02 f303 	mul.w	r3, r2, r3
 8009dfa:	1acb      	subs	r3, r1, r3
 8009dfc:	011b      	lsls	r3, r3, #4
 8009dfe:	3332      	adds	r3, #50	; 0x32
 8009e00:	4a33      	ldr	r2, [pc, #204]	; (8009ed0 <UART_SetConfig+0x4e4>)
 8009e02:	fba2 2303 	umull	r2, r3, r2, r3
 8009e06:	095b      	lsrs	r3, r3, #5
 8009e08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e0c:	441c      	add	r4, r3
 8009e0e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e12:	2200      	movs	r2, #0
 8009e14:	673b      	str	r3, [r7, #112]	; 0x70
 8009e16:	677a      	str	r2, [r7, #116]	; 0x74
 8009e18:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009e1c:	4642      	mov	r2, r8
 8009e1e:	464b      	mov	r3, r9
 8009e20:	1891      	adds	r1, r2, r2
 8009e22:	60b9      	str	r1, [r7, #8]
 8009e24:	415b      	adcs	r3, r3
 8009e26:	60fb      	str	r3, [r7, #12]
 8009e28:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e2c:	4641      	mov	r1, r8
 8009e2e:	1851      	adds	r1, r2, r1
 8009e30:	6039      	str	r1, [r7, #0]
 8009e32:	4649      	mov	r1, r9
 8009e34:	414b      	adcs	r3, r1
 8009e36:	607b      	str	r3, [r7, #4]
 8009e38:	f04f 0200 	mov.w	r2, #0
 8009e3c:	f04f 0300 	mov.w	r3, #0
 8009e40:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009e44:	4659      	mov	r1, fp
 8009e46:	00cb      	lsls	r3, r1, #3
 8009e48:	4651      	mov	r1, sl
 8009e4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e4e:	4651      	mov	r1, sl
 8009e50:	00ca      	lsls	r2, r1, #3
 8009e52:	4610      	mov	r0, r2
 8009e54:	4619      	mov	r1, r3
 8009e56:	4603      	mov	r3, r0
 8009e58:	4642      	mov	r2, r8
 8009e5a:	189b      	adds	r3, r3, r2
 8009e5c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e5e:	464b      	mov	r3, r9
 8009e60:	460a      	mov	r2, r1
 8009e62:	eb42 0303 	adc.w	r3, r2, r3
 8009e66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e6c:	685b      	ldr	r3, [r3, #4]
 8009e6e:	2200      	movs	r2, #0
 8009e70:	663b      	str	r3, [r7, #96]	; 0x60
 8009e72:	667a      	str	r2, [r7, #100]	; 0x64
 8009e74:	f04f 0200 	mov.w	r2, #0
 8009e78:	f04f 0300 	mov.w	r3, #0
 8009e7c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009e80:	4649      	mov	r1, r9
 8009e82:	008b      	lsls	r3, r1, #2
 8009e84:	4641      	mov	r1, r8
 8009e86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e8a:	4641      	mov	r1, r8
 8009e8c:	008a      	lsls	r2, r1, #2
 8009e8e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009e92:	f7f6 fed9 	bl	8000c48 <__aeabi_uldivmod>
 8009e96:	4602      	mov	r2, r0
 8009e98:	460b      	mov	r3, r1
 8009e9a:	4b0d      	ldr	r3, [pc, #52]	; (8009ed0 <UART_SetConfig+0x4e4>)
 8009e9c:	fba3 1302 	umull	r1, r3, r3, r2
 8009ea0:	095b      	lsrs	r3, r3, #5
 8009ea2:	2164      	movs	r1, #100	; 0x64
 8009ea4:	fb01 f303 	mul.w	r3, r1, r3
 8009ea8:	1ad3      	subs	r3, r2, r3
 8009eaa:	011b      	lsls	r3, r3, #4
 8009eac:	3332      	adds	r3, #50	; 0x32
 8009eae:	4a08      	ldr	r2, [pc, #32]	; (8009ed0 <UART_SetConfig+0x4e4>)
 8009eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8009eb4:	095b      	lsrs	r3, r3, #5
 8009eb6:	f003 020f 	and.w	r2, r3, #15
 8009eba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4422      	add	r2, r4
 8009ec2:	609a      	str	r2, [r3, #8]
}
 8009ec4:	bf00      	nop
 8009ec6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009ed0:	51eb851f 	.word	0x51eb851f

08009ed4 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8009ed4:	b084      	sub	sp, #16
 8009ed6:	b480      	push	{r7}
 8009ed8:	b085      	sub	sp, #20
 8009eda:	af00      	add	r7, sp, #0
 8009edc:	6078      	str	r0, [r7, #4]
 8009ede:	f107 001c 	add.w	r0, r7, #28
 8009ee2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009eea:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009eec:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009eee:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009ef2:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009ef6:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009ef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009efa:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009efe:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009f00:	68fa      	ldr	r2, [r7, #12]
 8009f02:	4313      	orrs	r3, r2
 8009f04:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	685b      	ldr	r3, [r3, #4]
 8009f0a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8009f0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009f12:	68fa      	ldr	r2, [r7, #12]
 8009f14:	431a      	orrs	r2, r3
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009f1a:	2300      	movs	r3, #0
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	3714      	adds	r7, #20
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	b004      	add	sp, #16
 8009f28:	4770      	bx	lr

08009f2a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b083      	sub	sp, #12
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8009f44:	b480      	push	{r7}
 8009f46:	b083      	sub	sp, #12
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
 8009f4c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009f58:	2300      	movs	r3, #0
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	370c      	adds	r7, #12
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f64:	4770      	bx	lr

08009f66 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8009f66:	b480      	push	{r7}
 8009f68:	b083      	sub	sp, #12
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2203      	movs	r2, #3
 8009f72:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009f74:	2300      	movs	r3, #0
}
 8009f76:	4618      	mov	r0, r3
 8009f78:	370c      	adds	r7, #12
 8009f7a:	46bd      	mov	sp, r7
 8009f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f80:	4770      	bx	lr

08009f82 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8009f82:	b480      	push	{r7}
 8009f84:	b083      	sub	sp, #12
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	f003 0303 	and.w	r3, r3, #3
}
 8009f92:	4618      	mov	r0, r3
 8009f94:	370c      	adds	r7, #12
 8009f96:	46bd      	mov	sp, r7
 8009f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9c:	4770      	bx	lr

08009f9e <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8009f9e:	b480      	push	{r7}
 8009fa0:	b085      	sub	sp, #20
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
 8009fa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009fa8:	2300      	movs	r3, #0
 8009faa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	681a      	ldr	r2, [r3, #0]
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009fbc:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009fbe:	683b      	ldr	r3, [r7, #0]
 8009fc0:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009fc2:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009fc8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009fca:	68fa      	ldr	r2, [r7, #12]
 8009fcc:	4313      	orrs	r3, r2
 8009fce:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	68db      	ldr	r3, [r3, #12]
 8009fd4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8009fd8:	f023 030f 	bic.w	r3, r3, #15
 8009fdc:	68fa      	ldr	r2, [r7, #12]
 8009fde:	431a      	orrs	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009fe4:	2300      	movs	r3, #0
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr

08009ff2 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8009ff2:	b480      	push	{r7}
 8009ff4:	b083      	sub	sp, #12
 8009ff6:	af00      	add	r7, sp, #0
 8009ff8:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	691b      	ldr	r3, [r3, #16]
 8009ffe:	b2db      	uxtb	r3, r3
}
 800a000:	4618      	mov	r0, r3
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr

0800a00c <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b085      	sub	sp, #20
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
 800a014:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	3314      	adds	r3, #20
 800a01a:	461a      	mov	r2, r3
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	4413      	add	r3, r2
 800a020:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	681b      	ldr	r3, [r3, #0]
}  
 800a026:	4618      	mov	r0, r3
 800a028:	3714      	adds	r7, #20
 800a02a:	46bd      	mov	sp, r7
 800a02c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a030:	4770      	bx	lr

0800a032 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800a032:	b480      	push	{r7}
 800a034:	b085      	sub	sp, #20
 800a036:	af00      	add	r7, sp, #0
 800a038:	6078      	str	r0, [r7, #4]
 800a03a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a03c:	2300      	movs	r3, #0
 800a03e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	685a      	ldr	r2, [r3, #4]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a054:	683b      	ldr	r3, [r7, #0]
 800a056:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a058:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a05a:	683b      	ldr	r3, [r7, #0]
 800a05c:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a05e:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a064:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a066:	68fa      	ldr	r2, [r7, #12]
 800a068:	4313      	orrs	r3, r2
 800a06a:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a070:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	431a      	orrs	r2, r3
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a07c:	2300      	movs	r3, #0

}
 800a07e:	4618      	mov	r0, r3
 800a080:	3714      	adds	r7, #20
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr

0800a08a <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b088      	sub	sp, #32
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
 800a092:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a094:	683b      	ldr	r3, [r7, #0]
 800a096:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a098:	2310      	movs	r3, #16
 800a09a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a09c:	2340      	movs	r3, #64	; 0x40
 800a09e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0a0:	2300      	movs	r3, #0
 800a0a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0aa:	f107 0308 	add.w	r3, r7, #8
 800a0ae:	4619      	mov	r1, r3
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f7ff ff74 	bl	8009f9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800a0b6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0ba:	2110      	movs	r1, #16
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 fa19 	bl	800a4f4 <SDMMC_GetCmdResp1>
 800a0c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0c4:	69fb      	ldr	r3, [r7, #28]
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3720      	adds	r7, #32
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}

0800a0ce <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a0ce:	b580      	push	{r7, lr}
 800a0d0:	b088      	sub	sp, #32
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
 800a0d6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a0dc:	2311      	movs	r3, #17
 800a0de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a0e0:	2340      	movs	r3, #64	; 0x40
 800a0e2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a0e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0ec:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a0ee:	f107 0308 	add.w	r3, r7, #8
 800a0f2:	4619      	mov	r1, r3
 800a0f4:	6878      	ldr	r0, [r7, #4]
 800a0f6:	f7ff ff52 	bl	8009f9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a0fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0fe:	2111      	movs	r1, #17
 800a100:	6878      	ldr	r0, [r7, #4]
 800a102:	f000 f9f7 	bl	800a4f4 <SDMMC_GetCmdResp1>
 800a106:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a108:	69fb      	ldr	r3, [r7, #28]
}
 800a10a:	4618      	mov	r0, r3
 800a10c:	3720      	adds	r7, #32
 800a10e:	46bd      	mov	sp, r7
 800a110:	bd80      	pop	{r7, pc}

0800a112 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800a112:	b580      	push	{r7, lr}
 800a114:	b088      	sub	sp, #32
 800a116:	af00      	add	r7, sp, #0
 800a118:	6078      	str	r0, [r7, #4]
 800a11a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a120:	2312      	movs	r3, #18
 800a122:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a124:	2340      	movs	r3, #64	; 0x40
 800a126:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a128:	2300      	movs	r3, #0
 800a12a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a12c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a130:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a132:	f107 0308 	add.w	r3, r7, #8
 800a136:	4619      	mov	r1, r3
 800a138:	6878      	ldr	r0, [r7, #4]
 800a13a:	f7ff ff30 	bl	8009f9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a13e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a142:	2112      	movs	r1, #18
 800a144:	6878      	ldr	r0, [r7, #4]
 800a146:	f000 f9d5 	bl	800a4f4 <SDMMC_GetCmdResp1>
 800a14a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a14c:	69fb      	ldr	r3, [r7, #28]
}
 800a14e:	4618      	mov	r0, r3
 800a150:	3720      	adds	r7, #32
 800a152:	46bd      	mov	sp, r7
 800a154:	bd80      	pop	{r7, pc}

0800a156 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a156:	b580      	push	{r7, lr}
 800a158:	b088      	sub	sp, #32
 800a15a:	af00      	add	r7, sp, #0
 800a15c:	6078      	str	r0, [r7, #4]
 800a15e:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a164:	2318      	movs	r3, #24
 800a166:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a168:	2340      	movs	r3, #64	; 0x40
 800a16a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a16c:	2300      	movs	r3, #0
 800a16e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a170:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a174:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a176:	f107 0308 	add.w	r3, r7, #8
 800a17a:	4619      	mov	r1, r3
 800a17c:	6878      	ldr	r0, [r7, #4]
 800a17e:	f7ff ff0e 	bl	8009f9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 800a182:	f241 3288 	movw	r2, #5000	; 0x1388
 800a186:	2118      	movs	r1, #24
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f000 f9b3 	bl	800a4f4 <SDMMC_GetCmdResp1>
 800a18e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a190:	69fb      	ldr	r3, [r7, #28]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3720      	adds	r7, #32
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b088      	sub	sp, #32
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
 800a1a2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a1a8:	2319      	movs	r3, #25
 800a1aa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1ac:	2340      	movs	r3, #64	; 0x40
 800a1ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1b8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1ba:	f107 0308 	add.w	r3, r7, #8
 800a1be:	4619      	mov	r1, r3
 800a1c0:	6878      	ldr	r0, [r7, #4]
 800a1c2:	f7ff feec 	bl	8009f9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800a1c6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1ca:	2119      	movs	r1, #25
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 f991 	bl	800a4f4 <SDMMC_GetCmdResp1>
 800a1d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1d4:	69fb      	ldr	r3, [r7, #28]
}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3720      	adds	r7, #32
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}
	...

0800a1e0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b088      	sub	sp, #32
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a1ec:	230c      	movs	r3, #12
 800a1ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a1f0:	2340      	movs	r3, #64	; 0x40
 800a1f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a1f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a1fe:	f107 0308 	add.w	r3, r7, #8
 800a202:	4619      	mov	r1, r3
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f7ff feca 	bl	8009f9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800a20a:	4a05      	ldr	r2, [pc, #20]	; (800a220 <SDMMC_CmdStopTransfer+0x40>)
 800a20c:	210c      	movs	r1, #12
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f000 f970 	bl	800a4f4 <SDMMC_GetCmdResp1>
 800a214:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a216:	69fb      	ldr	r3, [r7, #28]
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3720      	adds	r7, #32
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}
 800a220:	05f5e100 	.word	0x05f5e100

0800a224 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b08a      	sub	sp, #40	; 0x28
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a234:	2307      	movs	r3, #7
 800a236:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a238:	2340      	movs	r3, #64	; 0x40
 800a23a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a23c:	2300      	movs	r3, #0
 800a23e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a240:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a244:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a246:	f107 0310 	add.w	r3, r7, #16
 800a24a:	4619      	mov	r1, r3
 800a24c:	68f8      	ldr	r0, [r7, #12]
 800a24e:	f7ff fea6 	bl	8009f9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800a252:	f241 3288 	movw	r2, #5000	; 0x1388
 800a256:	2107      	movs	r1, #7
 800a258:	68f8      	ldr	r0, [r7, #12]
 800a25a:	f000 f94b 	bl	800a4f4 <SDMMC_GetCmdResp1>
 800a25e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a262:	4618      	mov	r0, r3
 800a264:	3728      	adds	r7, #40	; 0x28
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 800a26a:	b580      	push	{r7, lr}
 800a26c:	b088      	sub	sp, #32
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a272:	2300      	movs	r3, #0
 800a274:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a276:	2300      	movs	r3, #0
 800a278:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 800a27a:	2300      	movs	r3, #0
 800a27c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a27e:	2300      	movs	r3, #0
 800a280:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a282:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a286:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a288:	f107 0308 	add.w	r3, r7, #8
 800a28c:	4619      	mov	r1, r3
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	f7ff fe85 	bl	8009f9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f000 fb65 	bl	800a964 <SDMMC_GetCmdError>
 800a29a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a29c:	69fb      	ldr	r3, [r7, #28]
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3720      	adds	r7, #32
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b088      	sub	sp, #32
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a2ae:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a2b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a2b4:	2308      	movs	r3, #8
 800a2b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2b8:	2340      	movs	r3, #64	; 0x40
 800a2ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2c4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a2c6:	f107 0308 	add.w	r3, r7, #8
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	6878      	ldr	r0, [r7, #4]
 800a2ce:	f7ff fe66 	bl	8009f9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800a2d2:	6878      	ldr	r0, [r7, #4]
 800a2d4:	f000 faf8 	bl	800a8c8 <SDMMC_GetCmdResp7>
 800a2d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2da:	69fb      	ldr	r3, [r7, #28]
}
 800a2dc:	4618      	mov	r0, r3
 800a2de:	3720      	adds	r7, #32
 800a2e0:	46bd      	mov	sp, r7
 800a2e2:	bd80      	pop	{r7, pc}

0800a2e4 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b088      	sub	sp, #32
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
 800a2ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a2f2:	2337      	movs	r3, #55	; 0x37
 800a2f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a2f6:	2340      	movs	r3, #64	; 0x40
 800a2f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a2fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a302:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a304:	f107 0308 	add.w	r3, r7, #8
 800a308:	4619      	mov	r1, r3
 800a30a:	6878      	ldr	r0, [r7, #4]
 800a30c:	f7ff fe47 	bl	8009f9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800a310:	f241 3288 	movw	r2, #5000	; 0x1388
 800a314:	2137      	movs	r1, #55	; 0x37
 800a316:	6878      	ldr	r0, [r7, #4]
 800a318:	f000 f8ec 	bl	800a4f4 <SDMMC_GetCmdResp1>
 800a31c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a31e:	69fb      	ldr	r3, [r7, #28]
}
 800a320:	4618      	mov	r0, r3
 800a322:	3720      	adds	r7, #32
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b088      	sub	sp, #32
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800a338:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a33c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a33e:	2329      	movs	r3, #41	; 0x29
 800a340:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a342:	2340      	movs	r3, #64	; 0x40
 800a344:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a346:	2300      	movs	r3, #0
 800a348:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a34a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a34e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a350:	f107 0308 	add.w	r3, r7, #8
 800a354:	4619      	mov	r1, r3
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f7ff fe21 	bl	8009f9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f000 f9ff 	bl	800a760 <SDMMC_GetCmdResp3>
 800a362:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a364:	69fb      	ldr	r3, [r7, #28]
}
 800a366:	4618      	mov	r0, r3
 800a368:	3720      	adds	r7, #32
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800a36e:	b580      	push	{r7, lr}
 800a370:	b088      	sub	sp, #32
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
 800a376:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800a37c:	2306      	movs	r3, #6
 800a37e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a380:	2340      	movs	r3, #64	; 0x40
 800a382:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a384:	2300      	movs	r3, #0
 800a386:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a388:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a38c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a38e:	f107 0308 	add.w	r3, r7, #8
 800a392:	4619      	mov	r1, r3
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	f7ff fe02 	bl	8009f9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 800a39a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a39e:	2106      	movs	r1, #6
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f8a7 	bl	800a4f4 <SDMMC_GetCmdResp1>
 800a3a6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3a8:	69fb      	ldr	r3, [r7, #28]
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3720      	adds	r7, #32
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b088      	sub	sp, #32
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800a3be:	2333      	movs	r3, #51	; 0x33
 800a3c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a3c2:	2340      	movs	r3, #64	; 0x40
 800a3c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a3ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a3d0:	f107 0308 	add.w	r3, r7, #8
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f7ff fde1 	bl	8009f9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800a3dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3e0:	2133      	movs	r1, #51	; 0x33
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f886 	bl	800a4f4 <SDMMC_GetCmdResp1>
 800a3e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3ea:	69fb      	ldr	r3, [r7, #28]
}
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	3720      	adds	r7, #32
 800a3f0:	46bd      	mov	sp, r7
 800a3f2:	bd80      	pop	{r7, pc}

0800a3f4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b088      	sub	sp, #32
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a400:	2302      	movs	r3, #2
 800a402:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a404:	23c0      	movs	r3, #192	; 0xc0
 800a406:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a408:	2300      	movs	r3, #0
 800a40a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a40c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a410:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a412:	f107 0308 	add.w	r3, r7, #8
 800a416:	4619      	mov	r1, r3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f7ff fdc0 	bl	8009f9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a41e:	6878      	ldr	r0, [r7, #4]
 800a420:	f000 f956 	bl	800a6d0 <SDMMC_GetCmdResp2>
 800a424:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a426:	69fb      	ldr	r3, [r7, #28]
}
 800a428:	4618      	mov	r0, r3
 800a42a:	3720      	adds	r7, #32
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b088      	sub	sp, #32
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
 800a438:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a43e:	2309      	movs	r3, #9
 800a440:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800a442:	23c0      	movs	r3, #192	; 0xc0
 800a444:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a446:	2300      	movs	r3, #0
 800a448:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a44a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a44e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a450:	f107 0308 	add.w	r3, r7, #8
 800a454:	4619      	mov	r1, r3
 800a456:	6878      	ldr	r0, [r7, #4]
 800a458:	f7ff fda1 	bl	8009f9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800a45c:	6878      	ldr	r0, [r7, #4]
 800a45e:	f000 f937 	bl	800a6d0 <SDMMC_GetCmdResp2>
 800a462:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a464:	69fb      	ldr	r3, [r7, #28]
}
 800a466:	4618      	mov	r0, r3
 800a468:	3720      	adds	r7, #32
 800a46a:	46bd      	mov	sp, r7
 800a46c:	bd80      	pop	{r7, pc}

0800a46e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800a46e:	b580      	push	{r7, lr}
 800a470:	b088      	sub	sp, #32
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
 800a476:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a478:	2300      	movs	r3, #0
 800a47a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a47c:	2303      	movs	r3, #3
 800a47e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a480:	2340      	movs	r3, #64	; 0x40
 800a482:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a484:	2300      	movs	r3, #0
 800a486:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a48c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a48e:	f107 0308 	add.w	r3, r7, #8
 800a492:	4619      	mov	r1, r3
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f7ff fd82 	bl	8009f9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a49a:	683a      	ldr	r2, [r7, #0]
 800a49c:	2103      	movs	r1, #3
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 f99c 	bl	800a7dc <SDMMC_GetCmdResp6>
 800a4a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4a6:	69fb      	ldr	r3, [r7, #28]
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	3720      	adds	r7, #32
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b088      	sub	sp, #32
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a4be:	230d      	movs	r3, #13
 800a4c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800a4c2:	2340      	movs	r3, #64	; 0x40
 800a4c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800a4ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800a4d0:	f107 0308 	add.w	r3, r7, #8
 800a4d4:	4619      	mov	r1, r3
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f7ff fd61 	bl	8009f9e <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800a4dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4e0:	210d      	movs	r1, #13
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f000 f806 	bl	800a4f4 <SDMMC_GetCmdResp1>
 800a4e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4ea:	69fb      	ldr	r3, [r7, #28]
}
 800a4ec:	4618      	mov	r0, r3
 800a4ee:	3720      	adds	r7, #32
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	bd80      	pop	{r7, pc}

0800a4f4 <SDMMC_GetCmdResp1>:
  * @param  SDIOx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a4f4:	b580      	push	{r7, lr}
 800a4f6:	b088      	sub	sp, #32
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	460b      	mov	r3, r1
 800a4fe:	607a      	str	r2, [r7, #4]
 800a500:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a502:	4b70      	ldr	r3, [pc, #448]	; (800a6c4 <SDMMC_GetCmdResp1+0x1d0>)
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a70      	ldr	r2, [pc, #448]	; (800a6c8 <SDMMC_GetCmdResp1+0x1d4>)
 800a508:	fba2 2303 	umull	r2, r3, r2, r3
 800a50c:	0a5a      	lsrs	r2, r3, #9
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	fb02 f303 	mul.w	r3, r2, r3
 800a514:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a516:	69fb      	ldr	r3, [r7, #28]
 800a518:	1e5a      	subs	r2, r3, #1
 800a51a:	61fa      	str	r2, [r7, #28]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d102      	bne.n	800a526 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a520:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a524:	e0c9      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a52a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a52c:	69bb      	ldr	r3, [r7, #24]
 800a52e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a532:	2b00      	cmp	r3, #0
 800a534:	d0ef      	beq.n	800a516 <SDMMC_GetCmdResp1+0x22>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a536:	69bb      	ldr	r3, [r7, #24]
 800a538:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a53c:	2b00      	cmp	r3, #0
 800a53e:	d1ea      	bne.n	800a516 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a544:	f003 0304 	and.w	r3, r3, #4
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d004      	beq.n	800a556 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2204      	movs	r2, #4
 800a550:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a552:	2304      	movs	r3, #4
 800a554:	e0b1      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a55a:	f003 0301 	and.w	r3, r3, #1
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d004      	beq.n	800a56c <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2201      	movs	r2, #1
 800a566:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a568:	2301      	movs	r3, #1
 800a56a:	e0a6      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	22c5      	movs	r2, #197	; 0xc5
 800a570:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a572:	68f8      	ldr	r0, [r7, #12]
 800a574:	f7ff fd3d 	bl	8009ff2 <SDIO_GetCommandResponse>
 800a578:	4603      	mov	r3, r0
 800a57a:	461a      	mov	r2, r3
 800a57c:	7afb      	ldrb	r3, [r7, #11]
 800a57e:	4293      	cmp	r3, r2
 800a580:	d001      	beq.n	800a586 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a582:	2301      	movs	r3, #1
 800a584:	e099      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a586:	2100      	movs	r1, #0
 800a588:	68f8      	ldr	r0, [r7, #12]
 800a58a:	f7ff fd3f 	bl	800a00c <SDIO_GetResponse>
 800a58e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a590:	697a      	ldr	r2, [r7, #20]
 800a592:	4b4e      	ldr	r3, [pc, #312]	; (800a6cc <SDMMC_GetCmdResp1+0x1d8>)
 800a594:	4013      	ands	r3, r2
 800a596:	2b00      	cmp	r3, #0
 800a598:	d101      	bne.n	800a59e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a59a:	2300      	movs	r3, #0
 800a59c:	e08d      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	da02      	bge.n	800a5aa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a5a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5a8:	e087      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d001      	beq.n	800a5b8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a5b4:	2340      	movs	r3, #64	; 0x40
 800a5b6:	e080      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a5b8:	697b      	ldr	r3, [r7, #20]
 800a5ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d001      	beq.n	800a5c6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a5c2:	2380      	movs	r3, #128	; 0x80
 800a5c4:	e079      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d002      	beq.n	800a5d6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a5d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5d4:	e071      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d002      	beq.n	800a5e6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a5e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5e4:	e069      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d002      	beq.n	800a5f6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a5f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5f4:	e061      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d002      	beq.n	800a606 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a600:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a604:	e059      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d002      	beq.n	800a616 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a610:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a614:	e051      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a616:	697b      	ldr	r3, [r7, #20]
 800a618:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d002      	beq.n	800a626 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a620:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a624:	e049      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a626:	697b      	ldr	r3, [r7, #20]
 800a628:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d002      	beq.n	800a636 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a630:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a634:	e041      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a636:	697b      	ldr	r3, [r7, #20]
 800a638:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d002      	beq.n	800a646 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a640:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a644:	e039      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d002      	beq.n	800a656 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a650:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a654:	e031      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d002      	beq.n	800a666 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a660:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a664:	e029      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a666:	697b      	ldr	r3, [r7, #20]
 800a668:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d002      	beq.n	800a676 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a670:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a674:	e021      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a676:	697b      	ldr	r3, [r7, #20]
 800a678:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d002      	beq.n	800a686 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a680:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a684:	e019      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d002      	beq.n	800a696 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a690:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a694:	e011      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a696:	697b      	ldr	r3, [r7, #20]
 800a698:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d002      	beq.n	800a6a6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a6a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a6a4:	e009      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a6a6:	697b      	ldr	r3, [r7, #20]
 800a6a8:	f003 0308 	and.w	r3, r3, #8
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d002      	beq.n	800a6b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a6b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a6b4:	e001      	b.n	800a6ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a6b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3720      	adds	r7, #32
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	bd80      	pop	{r7, pc}
 800a6c2:	bf00      	nop
 800a6c4:	20000024 	.word	0x20000024
 800a6c8:	10624dd3 	.word	0x10624dd3
 800a6cc:	fdffe008 	.word	0xfdffe008

0800a6d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800a6d0:	b480      	push	{r7}
 800a6d2:	b085      	sub	sp, #20
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a6d8:	4b1f      	ldr	r3, [pc, #124]	; (800a758 <SDMMC_GetCmdResp2+0x88>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a1f      	ldr	r2, [pc, #124]	; (800a75c <SDMMC_GetCmdResp2+0x8c>)
 800a6de:	fba2 2303 	umull	r2, r3, r2, r3
 800a6e2:	0a5b      	lsrs	r3, r3, #9
 800a6e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6e8:	fb02 f303 	mul.w	r3, r2, r3
 800a6ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	1e5a      	subs	r2, r3, #1
 800a6f2:	60fa      	str	r2, [r7, #12]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d102      	bne.n	800a6fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a6f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a6fc:	e026      	b.n	800a74c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a702:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a704:	68bb      	ldr	r3, [r7, #8]
 800a706:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d0ef      	beq.n	800a6ee <SDMMC_GetCmdResp2+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a70e:	68bb      	ldr	r3, [r7, #8]
 800a710:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a714:	2b00      	cmp	r3, #0
 800a716:	d1ea      	bne.n	800a6ee <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a71c:	f003 0304 	and.w	r3, r3, #4
 800a720:	2b00      	cmp	r3, #0
 800a722:	d004      	beq.n	800a72e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2204      	movs	r2, #4
 800a728:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a72a:	2304      	movs	r3, #4
 800a72c:	e00e      	b.n	800a74c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a732:	f003 0301 	and.w	r3, r3, #1
 800a736:	2b00      	cmp	r3, #0
 800a738:	d004      	beq.n	800a744 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	2201      	movs	r2, #1
 800a73e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a740:	2301      	movs	r3, #1
 800a742:	e003      	b.n	800a74c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	22c5      	movs	r2, #197	; 0xc5
 800a748:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a74a:	2300      	movs	r3, #0
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3714      	adds	r7, #20
 800a750:	46bd      	mov	sp, r7
 800a752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a756:	4770      	bx	lr
 800a758:	20000024 	.word	0x20000024
 800a75c:	10624dd3 	.word	0x10624dd3

0800a760 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800a760:	b480      	push	{r7}
 800a762:	b085      	sub	sp, #20
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a768:	4b1a      	ldr	r3, [pc, #104]	; (800a7d4 <SDMMC_GetCmdResp3+0x74>)
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a1a      	ldr	r2, [pc, #104]	; (800a7d8 <SDMMC_GetCmdResp3+0x78>)
 800a76e:	fba2 2303 	umull	r2, r3, r2, r3
 800a772:	0a5b      	lsrs	r3, r3, #9
 800a774:	f241 3288 	movw	r2, #5000	; 0x1388
 800a778:	fb02 f303 	mul.w	r3, r2, r3
 800a77c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	1e5a      	subs	r2, r3, #1
 800a782:	60fa      	str	r2, [r7, #12]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d102      	bne.n	800a78e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a788:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a78c:	e01b      	b.n	800a7c6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a792:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a794:	68bb      	ldr	r3, [r7, #8]
 800a796:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d0ef      	beq.n	800a77e <SDMMC_GetCmdResp3+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d1ea      	bne.n	800a77e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ac:	f003 0304 	and.w	r3, r3, #4
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d004      	beq.n	800a7be <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2204      	movs	r2, #4
 800a7b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7ba:	2304      	movs	r3, #4
 800a7bc:	e003      	b.n	800a7c6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	22c5      	movs	r2, #197	; 0xc5
 800a7c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a7c4:	2300      	movs	r3, #0
}
 800a7c6:	4618      	mov	r0, r3
 800a7c8:	3714      	adds	r7, #20
 800a7ca:	46bd      	mov	sp, r7
 800a7cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d0:	4770      	bx	lr
 800a7d2:	bf00      	nop
 800a7d4:	20000024 	.word	0x20000024
 800a7d8:	10624dd3 	.word	0x10624dd3

0800a7dc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b088      	sub	sp, #32
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	60f8      	str	r0, [r7, #12]
 800a7e4:	460b      	mov	r3, r1
 800a7e6:	607a      	str	r2, [r7, #4]
 800a7e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a7ea:	4b35      	ldr	r3, [pc, #212]	; (800a8c0 <SDMMC_GetCmdResp6+0xe4>)
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	4a35      	ldr	r2, [pc, #212]	; (800a8c4 <SDMMC_GetCmdResp6+0xe8>)
 800a7f0:	fba2 2303 	umull	r2, r3, r2, r3
 800a7f4:	0a5b      	lsrs	r3, r3, #9
 800a7f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7fa:	fb02 f303 	mul.w	r3, r2, r3
 800a7fe:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	1e5a      	subs	r2, r3, #1
 800a804:	61fa      	str	r2, [r7, #28]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d102      	bne.n	800a810 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a80a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a80e:	e052      	b.n	800a8b6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a814:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d0ef      	beq.n	800a800 <SDMMC_GetCmdResp6+0x24>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a826:	2b00      	cmp	r3, #0
 800a828:	d1ea      	bne.n	800a800 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a82e:	f003 0304 	and.w	r3, r3, #4
 800a832:	2b00      	cmp	r3, #0
 800a834:	d004      	beq.n	800a840 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	2204      	movs	r2, #4
 800a83a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a83c:	2304      	movs	r3, #4
 800a83e:	e03a      	b.n	800a8b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a844:	f003 0301 	and.w	r3, r3, #1
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d004      	beq.n	800a856 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	2201      	movs	r2, #1
 800a850:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a852:	2301      	movs	r3, #1
 800a854:	e02f      	b.n	800a8b6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800a856:	68f8      	ldr	r0, [r7, #12]
 800a858:	f7ff fbcb 	bl	8009ff2 <SDIO_GetCommandResponse>
 800a85c:	4603      	mov	r3, r0
 800a85e:	461a      	mov	r2, r3
 800a860:	7afb      	ldrb	r3, [r7, #11]
 800a862:	4293      	cmp	r3, r2
 800a864:	d001      	beq.n	800a86a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a866:	2301      	movs	r3, #1
 800a868:	e025      	b.n	800a8b6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	22c5      	movs	r2, #197	; 0xc5
 800a86e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800a870:	2100      	movs	r1, #0
 800a872:	68f8      	ldr	r0, [r7, #12]
 800a874:	f7ff fbca 	bl	800a00c <SDIO_GetResponse>
 800a878:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a880:	2b00      	cmp	r3, #0
 800a882:	d106      	bne.n	800a892 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	0c1b      	lsrs	r3, r3, #16
 800a888:	b29a      	uxth	r2, r3
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a88e:	2300      	movs	r3, #0
 800a890:	e011      	b.n	800a8b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d002      	beq.n	800a8a2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a89c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a8a0:	e009      	b.n	800a8b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a8a2:	697b      	ldr	r3, [r7, #20]
 800a8a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d002      	beq.n	800a8b2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a8ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8b0:	e001      	b.n	800a8b6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a8b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3720      	adds	r7, #32
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	bd80      	pop	{r7, pc}
 800a8be:	bf00      	nop
 800a8c0:	20000024 	.word	0x20000024
 800a8c4:	10624dd3 	.word	0x10624dd3

0800a8c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800a8c8:	b480      	push	{r7}
 800a8ca:	b085      	sub	sp, #20
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a8d0:	4b22      	ldr	r3, [pc, #136]	; (800a95c <SDMMC_GetCmdResp7+0x94>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	4a22      	ldr	r2, [pc, #136]	; (800a960 <SDMMC_GetCmdResp7+0x98>)
 800a8d6:	fba2 2303 	umull	r2, r3, r2, r3
 800a8da:	0a5b      	lsrs	r3, r3, #9
 800a8dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8e0:	fb02 f303 	mul.w	r3, r2, r3
 800a8e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	1e5a      	subs	r2, r3, #1
 800a8ea:	60fa      	str	r2, [r7, #12]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d102      	bne.n	800a8f6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a8f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a8f4:	e02c      	b.n	800a950 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a8fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a8fc:	68bb      	ldr	r3, [r7, #8]
 800a8fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800a902:	2b00      	cmp	r3, #0
 800a904:	d0ef      	beq.n	800a8e6 <SDMMC_GetCmdResp7+0x1e>
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800a906:	68bb      	ldr	r3, [r7, #8]
 800a908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d1ea      	bne.n	800a8e6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a914:	f003 0304 	and.w	r3, r3, #4
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d004      	beq.n	800a926 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2204      	movs	r2, #4
 800a920:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a922:	2304      	movs	r3, #4
 800a924:	e014      	b.n	800a950 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a92a:	f003 0301 	and.w	r3, r3, #1
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d004      	beq.n	800a93c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2201      	movs	r2, #1
 800a936:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a938:	2301      	movs	r3, #1
 800a93a:	e009      	b.n	800a950 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a944:	2b00      	cmp	r3, #0
 800a946:	d002      	beq.n	800a94e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2240      	movs	r2, #64	; 0x40
 800a94c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a94e:	2300      	movs	r3, #0
  
}
 800a950:	4618      	mov	r0, r3
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr
 800a95c:	20000024 	.word	0x20000024
 800a960:	10624dd3 	.word	0x10624dd3

0800a964 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDIOx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 800a964:	b480      	push	{r7}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a96c:	4b11      	ldr	r3, [pc, #68]	; (800a9b4 <SDMMC_GetCmdError+0x50>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a11      	ldr	r2, [pc, #68]	; (800a9b8 <SDMMC_GetCmdError+0x54>)
 800a972:	fba2 2303 	umull	r2, r3, r2, r3
 800a976:	0a5b      	lsrs	r3, r3, #9
 800a978:	f241 3288 	movw	r2, #5000	; 0x1388
 800a97c:	fb02 f303 	mul.w	r3, r2, r3
 800a980:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	1e5a      	subs	r2, r3, #1
 800a986:	60fa      	str	r2, [r7, #12]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d102      	bne.n	800a992 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a98c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a990:	e009      	b.n	800a9a6 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d0f1      	beq.n	800a982 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	22c5      	movs	r2, #197	; 0xc5
 800a9a2:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a9a4:	2300      	movs	r3, #0
}
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	3714      	adds	r7, #20
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b0:	4770      	bx	lr
 800a9b2:	bf00      	nop
 800a9b4:	20000024 	.word	0x20000024
 800a9b8:	10624dd3 	.word	0x10624dd3

0800a9bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a9bc:	b084      	sub	sp, #16
 800a9be:	b580      	push	{r7, lr}
 800a9c0:	b084      	sub	sp, #16
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	f107 001c 	add.w	r0, r7, #28
 800a9ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a9ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d122      	bne.n	800aa1a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	68db      	ldr	r3, [r3, #12]
 800a9e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a9e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	68db      	ldr	r3, [r3, #12]
 800a9f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a9fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9fe:	2b01      	cmp	r3, #1
 800aa00:	d105      	bne.n	800aa0e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	68db      	ldr	r3, [r3, #12]
 800aa06:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f001 fbee 	bl	800c1f0 <USB_CoreReset>
 800aa14:	4603      	mov	r3, r0
 800aa16:	73fb      	strb	r3, [r7, #15]
 800aa18:	e01a      	b.n	800aa50 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	68db      	ldr	r3, [r3, #12]
 800aa1e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f001 fbe2 	bl	800c1f0 <USB_CoreReset>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800aa30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d106      	bne.n	800aa44 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	639a      	str	r2, [r3, #56]	; 0x38
 800aa42:	e005      	b.n	800aa50 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800aa50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d10b      	bne.n	800aa6e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f043 0206 	orr.w	r2, r3, #6
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	f043 0220 	orr.w	r2, r3, #32
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aa6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	3710      	adds	r7, #16
 800aa74:	46bd      	mov	sp, r7
 800aa76:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa7a:	b004      	add	sp, #16
 800aa7c:	4770      	bx	lr
	...

0800aa80 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b087      	sub	sp, #28
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800aa8e:	79fb      	ldrb	r3, [r7, #7]
 800aa90:	2b02      	cmp	r3, #2
 800aa92:	d165      	bne.n	800ab60 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	4a41      	ldr	r2, [pc, #260]	; (800ab9c <USB_SetTurnaroundTime+0x11c>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d906      	bls.n	800aaaa <USB_SetTurnaroundTime+0x2a>
 800aa9c:	68bb      	ldr	r3, [r7, #8]
 800aa9e:	4a40      	ldr	r2, [pc, #256]	; (800aba0 <USB_SetTurnaroundTime+0x120>)
 800aaa0:	4293      	cmp	r3, r2
 800aaa2:	d202      	bcs.n	800aaaa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800aaa4:	230f      	movs	r3, #15
 800aaa6:	617b      	str	r3, [r7, #20]
 800aaa8:	e062      	b.n	800ab70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	4a3c      	ldr	r2, [pc, #240]	; (800aba0 <USB_SetTurnaroundTime+0x120>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d306      	bcc.n	800aac0 <USB_SetTurnaroundTime+0x40>
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	4a3b      	ldr	r2, [pc, #236]	; (800aba4 <USB_SetTurnaroundTime+0x124>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d202      	bcs.n	800aac0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800aaba:	230e      	movs	r3, #14
 800aabc:	617b      	str	r3, [r7, #20]
 800aabe:	e057      	b.n	800ab70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	4a38      	ldr	r2, [pc, #224]	; (800aba4 <USB_SetTurnaroundTime+0x124>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d306      	bcc.n	800aad6 <USB_SetTurnaroundTime+0x56>
 800aac8:	68bb      	ldr	r3, [r7, #8]
 800aaca:	4a37      	ldr	r2, [pc, #220]	; (800aba8 <USB_SetTurnaroundTime+0x128>)
 800aacc:	4293      	cmp	r3, r2
 800aace:	d202      	bcs.n	800aad6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800aad0:	230d      	movs	r3, #13
 800aad2:	617b      	str	r3, [r7, #20]
 800aad4:	e04c      	b.n	800ab70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	4a33      	ldr	r2, [pc, #204]	; (800aba8 <USB_SetTurnaroundTime+0x128>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d306      	bcc.n	800aaec <USB_SetTurnaroundTime+0x6c>
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	4a32      	ldr	r2, [pc, #200]	; (800abac <USB_SetTurnaroundTime+0x12c>)
 800aae2:	4293      	cmp	r3, r2
 800aae4:	d802      	bhi.n	800aaec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800aae6:	230c      	movs	r3, #12
 800aae8:	617b      	str	r3, [r7, #20]
 800aaea:	e041      	b.n	800ab70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	4a2f      	ldr	r2, [pc, #188]	; (800abac <USB_SetTurnaroundTime+0x12c>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d906      	bls.n	800ab02 <USB_SetTurnaroundTime+0x82>
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	4a2e      	ldr	r2, [pc, #184]	; (800abb0 <USB_SetTurnaroundTime+0x130>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d802      	bhi.n	800ab02 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800aafc:	230b      	movs	r3, #11
 800aafe:	617b      	str	r3, [r7, #20]
 800ab00:	e036      	b.n	800ab70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	4a2a      	ldr	r2, [pc, #168]	; (800abb0 <USB_SetTurnaroundTime+0x130>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d906      	bls.n	800ab18 <USB_SetTurnaroundTime+0x98>
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	4a29      	ldr	r2, [pc, #164]	; (800abb4 <USB_SetTurnaroundTime+0x134>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d802      	bhi.n	800ab18 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ab12:	230a      	movs	r3, #10
 800ab14:	617b      	str	r3, [r7, #20]
 800ab16:	e02b      	b.n	800ab70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	4a26      	ldr	r2, [pc, #152]	; (800abb4 <USB_SetTurnaroundTime+0x134>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d906      	bls.n	800ab2e <USB_SetTurnaroundTime+0xae>
 800ab20:	68bb      	ldr	r3, [r7, #8]
 800ab22:	4a25      	ldr	r2, [pc, #148]	; (800abb8 <USB_SetTurnaroundTime+0x138>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d202      	bcs.n	800ab2e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ab28:	2309      	movs	r3, #9
 800ab2a:	617b      	str	r3, [r7, #20]
 800ab2c:	e020      	b.n	800ab70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	4a21      	ldr	r2, [pc, #132]	; (800abb8 <USB_SetTurnaroundTime+0x138>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d306      	bcc.n	800ab44 <USB_SetTurnaroundTime+0xc4>
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	4a20      	ldr	r2, [pc, #128]	; (800abbc <USB_SetTurnaroundTime+0x13c>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d802      	bhi.n	800ab44 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ab3e:	2308      	movs	r3, #8
 800ab40:	617b      	str	r3, [r7, #20]
 800ab42:	e015      	b.n	800ab70 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	4a1d      	ldr	r2, [pc, #116]	; (800abbc <USB_SetTurnaroundTime+0x13c>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d906      	bls.n	800ab5a <USB_SetTurnaroundTime+0xda>
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	4a1c      	ldr	r2, [pc, #112]	; (800abc0 <USB_SetTurnaroundTime+0x140>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d202      	bcs.n	800ab5a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ab54:	2307      	movs	r3, #7
 800ab56:	617b      	str	r3, [r7, #20]
 800ab58:	e00a      	b.n	800ab70 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ab5a:	2306      	movs	r3, #6
 800ab5c:	617b      	str	r3, [r7, #20]
 800ab5e:	e007      	b.n	800ab70 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ab60:	79fb      	ldrb	r3, [r7, #7]
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d102      	bne.n	800ab6c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ab66:	2309      	movs	r3, #9
 800ab68:	617b      	str	r3, [r7, #20]
 800ab6a:	e001      	b.n	800ab70 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ab6c:	2309      	movs	r3, #9
 800ab6e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	68db      	ldr	r3, [r3, #12]
 800ab74:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	68da      	ldr	r2, [r3, #12]
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	029b      	lsls	r3, r3, #10
 800ab84:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ab88:	431a      	orrs	r2, r3
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ab8e:	2300      	movs	r3, #0
}
 800ab90:	4618      	mov	r0, r3
 800ab92:	371c      	adds	r7, #28
 800ab94:	46bd      	mov	sp, r7
 800ab96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab9a:	4770      	bx	lr
 800ab9c:	00d8acbf 	.word	0x00d8acbf
 800aba0:	00e4e1c0 	.word	0x00e4e1c0
 800aba4:	00f42400 	.word	0x00f42400
 800aba8:	01067380 	.word	0x01067380
 800abac:	011a499f 	.word	0x011a499f
 800abb0:	01312cff 	.word	0x01312cff
 800abb4:	014ca43f 	.word	0x014ca43f
 800abb8:	016e3600 	.word	0x016e3600
 800abbc:	01a6ab1f 	.word	0x01a6ab1f
 800abc0:	01e84800 	.word	0x01e84800

0800abc4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b083      	sub	sp, #12
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	689b      	ldr	r3, [r3, #8]
 800abd0:	f043 0201 	orr.w	r2, r3, #1
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800abd8:	2300      	movs	r3, #0
}
 800abda:	4618      	mov	r0, r3
 800abdc:	370c      	adds	r7, #12
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr

0800abe6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800abe6:	b480      	push	{r7}
 800abe8:	b083      	sub	sp, #12
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	f023 0201 	bic.w	r2, r3, #1
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800abfa:	2300      	movs	r3, #0
}
 800abfc:	4618      	mov	r0, r3
 800abfe:	370c      	adds	r7, #12
 800ac00:	46bd      	mov	sp, r7
 800ac02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac06:	4770      	bx	lr

0800ac08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b084      	sub	sp, #16
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
 800ac10:	460b      	mov	r3, r1
 800ac12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ac14:	2300      	movs	r3, #0
 800ac16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	68db      	ldr	r3, [r3, #12]
 800ac1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ac24:	78fb      	ldrb	r3, [r7, #3]
 800ac26:	2b01      	cmp	r3, #1
 800ac28:	d115      	bne.n	800ac56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	68db      	ldr	r3, [r3, #12]
 800ac2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ac36:	2001      	movs	r0, #1
 800ac38:	f7f8 fbf8 	bl	800342c <HAL_Delay>
      ms++;
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	3301      	adds	r3, #1
 800ac40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f001 fa45 	bl	800c0d2 <USB_GetMode>
 800ac48:	4603      	mov	r3, r0
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d01e      	beq.n	800ac8c <USB_SetCurrentMode+0x84>
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2b31      	cmp	r3, #49	; 0x31
 800ac52:	d9f0      	bls.n	800ac36 <USB_SetCurrentMode+0x2e>
 800ac54:	e01a      	b.n	800ac8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ac56:	78fb      	ldrb	r3, [r7, #3]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d115      	bne.n	800ac88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	68db      	ldr	r3, [r3, #12]
 800ac60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ac68:	2001      	movs	r0, #1
 800ac6a:	f7f8 fbdf 	bl	800342c <HAL_Delay>
      ms++;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	3301      	adds	r3, #1
 800ac72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ac74:	6878      	ldr	r0, [r7, #4]
 800ac76:	f001 fa2c 	bl	800c0d2 <USB_GetMode>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d005      	beq.n	800ac8c <USB_SetCurrentMode+0x84>
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	2b31      	cmp	r3, #49	; 0x31
 800ac84:	d9f0      	bls.n	800ac68 <USB_SetCurrentMode+0x60>
 800ac86:	e001      	b.n	800ac8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ac88:	2301      	movs	r3, #1
 800ac8a:	e005      	b.n	800ac98 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	2b32      	cmp	r3, #50	; 0x32
 800ac90:	d101      	bne.n	800ac96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ac92:	2301      	movs	r3, #1
 800ac94:	e000      	b.n	800ac98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}

0800aca0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aca0:	b084      	sub	sp, #16
 800aca2:	b580      	push	{r7, lr}
 800aca4:	b086      	sub	sp, #24
 800aca6:	af00      	add	r7, sp, #0
 800aca8:	6078      	str	r0, [r7, #4]
 800acaa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800acae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800acb2:	2300      	movs	r3, #0
 800acb4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800acba:	2300      	movs	r3, #0
 800acbc:	613b      	str	r3, [r7, #16]
 800acbe:	e009      	b.n	800acd4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800acc0:	687a      	ldr	r2, [r7, #4]
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	3340      	adds	r3, #64	; 0x40
 800acc6:	009b      	lsls	r3, r3, #2
 800acc8:	4413      	add	r3, r2
 800acca:	2200      	movs	r2, #0
 800accc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800acce:	693b      	ldr	r3, [r7, #16]
 800acd0:	3301      	adds	r3, #1
 800acd2:	613b      	str	r3, [r7, #16]
 800acd4:	693b      	ldr	r3, [r7, #16]
 800acd6:	2b0e      	cmp	r3, #14
 800acd8:	d9f2      	bls.n	800acc0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800acda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d11c      	bne.n	800ad1a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ace6:	685b      	ldr	r3, [r3, #4]
 800ace8:	68fa      	ldr	r2, [r7, #12]
 800acea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acee:	f043 0302 	orr.w	r3, r3, #2
 800acf2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad04:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad10:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	639a      	str	r2, [r3, #56]	; 0x38
 800ad18:	e00b      	b.n	800ad32 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad1e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad38:	461a      	mov	r2, r3
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad44:	4619      	mov	r1, r3
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad4c:	461a      	mov	r2, r3
 800ad4e:	680b      	ldr	r3, [r1, #0]
 800ad50:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ad52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad54:	2b01      	cmp	r3, #1
 800ad56:	d10c      	bne.n	800ad72 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ad58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d104      	bne.n	800ad68 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ad5e:	2100      	movs	r1, #0
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 f965 	bl	800b030 <USB_SetDevSpeed>
 800ad66:	e008      	b.n	800ad7a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ad68:	2101      	movs	r1, #1
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 f960 	bl	800b030 <USB_SetDevSpeed>
 800ad70:	e003      	b.n	800ad7a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ad72:	2103      	movs	r1, #3
 800ad74:	6878      	ldr	r0, [r7, #4]
 800ad76:	f000 f95b 	bl	800b030 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ad7a:	2110      	movs	r1, #16
 800ad7c:	6878      	ldr	r0, [r7, #4]
 800ad7e:	f000 f8f3 	bl	800af68 <USB_FlushTxFifo>
 800ad82:	4603      	mov	r3, r0
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d001      	beq.n	800ad8c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800ad88:	2301      	movs	r3, #1
 800ad8a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 f91f 	bl	800afd0 <USB_FlushRxFifo>
 800ad92:	4603      	mov	r3, r0
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d001      	beq.n	800ad9c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ada2:	461a      	mov	r2, r3
 800ada4:	2300      	movs	r3, #0
 800ada6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adae:	461a      	mov	r2, r3
 800adb0:	2300      	movs	r3, #0
 800adb2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adba:	461a      	mov	r2, r3
 800adbc:	2300      	movs	r3, #0
 800adbe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adc0:	2300      	movs	r3, #0
 800adc2:	613b      	str	r3, [r7, #16]
 800adc4:	e043      	b.n	800ae4e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800adc6:	693b      	ldr	r3, [r7, #16]
 800adc8:	015a      	lsls	r2, r3, #5
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	4413      	add	r3, r2
 800adce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800add8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800addc:	d118      	bne.n	800ae10 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800adde:	693b      	ldr	r3, [r7, #16]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d10a      	bne.n	800adfa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ade4:	693b      	ldr	r3, [r7, #16]
 800ade6:	015a      	lsls	r2, r3, #5
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	4413      	add	r3, r2
 800adec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf0:	461a      	mov	r2, r3
 800adf2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800adf6:	6013      	str	r3, [r2, #0]
 800adf8:	e013      	b.n	800ae22 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	015a      	lsls	r2, r3, #5
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	4413      	add	r3, r2
 800ae02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae06:	461a      	mov	r2, r3
 800ae08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ae0c:	6013      	str	r3, [r2, #0]
 800ae0e:	e008      	b.n	800ae22 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ae10:	693b      	ldr	r3, [r7, #16]
 800ae12:	015a      	lsls	r2, r3, #5
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	4413      	add	r3, r2
 800ae18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae1c:	461a      	mov	r2, r3
 800ae1e:	2300      	movs	r3, #0
 800ae20:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	015a      	lsls	r2, r3, #5
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	4413      	add	r3, r2
 800ae2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae2e:	461a      	mov	r2, r3
 800ae30:	2300      	movs	r3, #0
 800ae32:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	015a      	lsls	r2, r3, #5
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae40:	461a      	mov	r2, r3
 800ae42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ae46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	3301      	adds	r3, #1
 800ae4c:	613b      	str	r3, [r7, #16]
 800ae4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae50:	693a      	ldr	r2, [r7, #16]
 800ae52:	429a      	cmp	r2, r3
 800ae54:	d3b7      	bcc.n	800adc6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae56:	2300      	movs	r3, #0
 800ae58:	613b      	str	r3, [r7, #16]
 800ae5a:	e043      	b.n	800aee4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	015a      	lsls	r2, r3, #5
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	4413      	add	r3, r2
 800ae64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae72:	d118      	bne.n	800aea6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 800ae74:	693b      	ldr	r3, [r7, #16]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d10a      	bne.n	800ae90 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ae7a:	693b      	ldr	r3, [r7, #16]
 800ae7c:	015a      	lsls	r2, r3, #5
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	4413      	add	r3, r2
 800ae82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae86:	461a      	mov	r2, r3
 800ae88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae8c:	6013      	str	r3, [r2, #0]
 800ae8e:	e013      	b.n	800aeb8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ae90:	693b      	ldr	r3, [r7, #16]
 800ae92:	015a      	lsls	r2, r3, #5
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	4413      	add	r3, r2
 800ae98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae9c:	461a      	mov	r2, r3
 800ae9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aea2:	6013      	str	r3, [r2, #0]
 800aea4:	e008      	b.n	800aeb8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aea6:	693b      	ldr	r3, [r7, #16]
 800aea8:	015a      	lsls	r2, r3, #5
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	4413      	add	r3, r2
 800aeae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	015a      	lsls	r2, r3, #5
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	4413      	add	r3, r2
 800aec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec4:	461a      	mov	r2, r3
 800aec6:	2300      	movs	r3, #0
 800aec8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	015a      	lsls	r2, r3, #5
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	4413      	add	r3, r2
 800aed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aed6:	461a      	mov	r2, r3
 800aed8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aedc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aede:	693b      	ldr	r3, [r7, #16]
 800aee0:	3301      	adds	r3, #1
 800aee2:	613b      	str	r3, [r7, #16]
 800aee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee6:	693a      	ldr	r2, [r7, #16]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d3b7      	bcc.n	800ae5c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aef2:	691b      	ldr	r3, [r3, #16]
 800aef4:	68fa      	ldr	r2, [r7, #12]
 800aef6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aefa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aefe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	2200      	movs	r2, #0
 800af04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800af0c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800af0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af10:	2b00      	cmp	r3, #0
 800af12:	d105      	bne.n	800af20 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	699b      	ldr	r3, [r3, #24]
 800af18:	f043 0210 	orr.w	r2, r3, #16
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	699a      	ldr	r2, [r3, #24]
 800af24:	4b0f      	ldr	r3, [pc, #60]	; (800af64 <USB_DevInit+0x2c4>)
 800af26:	4313      	orrs	r3, r2
 800af28:	687a      	ldr	r2, [r7, #4]
 800af2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800af2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d005      	beq.n	800af3e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	699b      	ldr	r3, [r3, #24]
 800af36:	f043 0208 	orr.w	r2, r3, #8
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800af3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af40:	2b01      	cmp	r3, #1
 800af42:	d107      	bne.n	800af54 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	699b      	ldr	r3, [r3, #24]
 800af48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af4c:	f043 0304 	orr.w	r3, r3, #4
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800af54:	7dfb      	ldrb	r3, [r7, #23]
}
 800af56:	4618      	mov	r0, r3
 800af58:	3718      	adds	r7, #24
 800af5a:	46bd      	mov	sp, r7
 800af5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af60:	b004      	add	sp, #16
 800af62:	4770      	bx	lr
 800af64:	803c3800 	.word	0x803c3800

0800af68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800af68:	b480      	push	{r7}
 800af6a:	b085      	sub	sp, #20
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800af72:	2300      	movs	r3, #0
 800af74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	3301      	adds	r3, #1
 800af7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	4a13      	ldr	r2, [pc, #76]	; (800afcc <USB_FlushTxFifo+0x64>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d901      	bls.n	800af88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800af84:	2303      	movs	r3, #3
 800af86:	e01b      	b.n	800afc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	691b      	ldr	r3, [r3, #16]
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	daf2      	bge.n	800af76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800af90:	2300      	movs	r3, #0
 800af92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	019b      	lsls	r3, r3, #6
 800af98:	f043 0220 	orr.w	r2, r3, #32
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	3301      	adds	r3, #1
 800afa4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	4a08      	ldr	r2, [pc, #32]	; (800afcc <USB_FlushTxFifo+0x64>)
 800afaa:	4293      	cmp	r3, r2
 800afac:	d901      	bls.n	800afb2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800afae:	2303      	movs	r3, #3
 800afb0:	e006      	b.n	800afc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	691b      	ldr	r3, [r3, #16]
 800afb6:	f003 0320 	and.w	r3, r3, #32
 800afba:	2b20      	cmp	r3, #32
 800afbc:	d0f0      	beq.n	800afa0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3714      	adds	r7, #20
 800afc4:	46bd      	mov	sp, r7
 800afc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afca:	4770      	bx	lr
 800afcc:	00030d40 	.word	0x00030d40

0800afd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800afd0:	b480      	push	{r7}
 800afd2:	b085      	sub	sp, #20
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800afd8:	2300      	movs	r3, #0
 800afda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	3301      	adds	r3, #1
 800afe0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	4a11      	ldr	r2, [pc, #68]	; (800b02c <USB_FlushRxFifo+0x5c>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d901      	bls.n	800afee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800afea:	2303      	movs	r3, #3
 800afec:	e018      	b.n	800b020 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	691b      	ldr	r3, [r3, #16]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	daf2      	bge.n	800afdc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800aff6:	2300      	movs	r3, #0
 800aff8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2210      	movs	r2, #16
 800affe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	3301      	adds	r3, #1
 800b004:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	4a08      	ldr	r2, [pc, #32]	; (800b02c <USB_FlushRxFifo+0x5c>)
 800b00a:	4293      	cmp	r3, r2
 800b00c:	d901      	bls.n	800b012 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b00e:	2303      	movs	r3, #3
 800b010:	e006      	b.n	800b020 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	f003 0310 	and.w	r3, r3, #16
 800b01a:	2b10      	cmp	r3, #16
 800b01c:	d0f0      	beq.n	800b000 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b01e:	2300      	movs	r3, #0
}
 800b020:	4618      	mov	r0, r3
 800b022:	3714      	adds	r7, #20
 800b024:	46bd      	mov	sp, r7
 800b026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02a:	4770      	bx	lr
 800b02c:	00030d40 	.word	0x00030d40

0800b030 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	460b      	mov	r3, r1
 800b03a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	78fb      	ldrb	r3, [r7, #3]
 800b04a:	68f9      	ldr	r1, [r7, #12]
 800b04c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b050:	4313      	orrs	r3, r2
 800b052:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b054:	2300      	movs	r3, #0
}
 800b056:	4618      	mov	r0, r3
 800b058:	3714      	adds	r7, #20
 800b05a:	46bd      	mov	sp, r7
 800b05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b060:	4770      	bx	lr

0800b062 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b062:	b480      	push	{r7}
 800b064:	b087      	sub	sp, #28
 800b066:	af00      	add	r7, sp, #0
 800b068:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	f003 0306 	and.w	r3, r3, #6
 800b07a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d102      	bne.n	800b088 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b082:	2300      	movs	r3, #0
 800b084:	75fb      	strb	r3, [r7, #23]
 800b086:	e00a      	b.n	800b09e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2b02      	cmp	r3, #2
 800b08c:	d002      	beq.n	800b094 <USB_GetDevSpeed+0x32>
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	2b06      	cmp	r3, #6
 800b092:	d102      	bne.n	800b09a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b094:	2302      	movs	r3, #2
 800b096:	75fb      	strb	r3, [r7, #23]
 800b098:	e001      	b.n	800b09e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b09a:	230f      	movs	r3, #15
 800b09c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b09e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0a0:	4618      	mov	r0, r3
 800b0a2:	371c      	adds	r7, #28
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0aa:	4770      	bx	lr

0800b0ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	b085      	sub	sp, #20
 800b0b0:	af00      	add	r7, sp, #0
 800b0b2:	6078      	str	r0, [r7, #4]
 800b0b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	781b      	ldrb	r3, [r3, #0]
 800b0be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	785b      	ldrb	r3, [r3, #1]
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d13a      	bne.n	800b13e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0ce:	69da      	ldr	r2, [r3, #28]
 800b0d0:	683b      	ldr	r3, [r7, #0]
 800b0d2:	781b      	ldrb	r3, [r3, #0]
 800b0d4:	f003 030f 	and.w	r3, r3, #15
 800b0d8:	2101      	movs	r1, #1
 800b0da:	fa01 f303 	lsl.w	r3, r1, r3
 800b0de:	b29b      	uxth	r3, r3
 800b0e0:	68f9      	ldr	r1, [r7, #12]
 800b0e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b0ea:	68bb      	ldr	r3, [r7, #8]
 800b0ec:	015a      	lsls	r2, r3, #5
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	4413      	add	r3, r2
 800b0f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0fc:	2b00      	cmp	r3, #0
 800b0fe:	d155      	bne.n	800b1ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b100:	68bb      	ldr	r3, [r7, #8]
 800b102:	015a      	lsls	r2, r3, #5
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	4413      	add	r3, r2
 800b108:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b10c:	681a      	ldr	r2, [r3, #0]
 800b10e:	683b      	ldr	r3, [r7, #0]
 800b110:	68db      	ldr	r3, [r3, #12]
 800b112:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b116:	683b      	ldr	r3, [r7, #0]
 800b118:	791b      	ldrb	r3, [r3, #4]
 800b11a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b11c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	059b      	lsls	r3, r3, #22
 800b122:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b124:	4313      	orrs	r3, r2
 800b126:	68ba      	ldr	r2, [r7, #8]
 800b128:	0151      	lsls	r1, r2, #5
 800b12a:	68fa      	ldr	r2, [r7, #12]
 800b12c:	440a      	add	r2, r1
 800b12e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b132:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b136:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b13a:	6013      	str	r3, [r2, #0]
 800b13c:	e036      	b.n	800b1ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b144:	69da      	ldr	r2, [r3, #28]
 800b146:	683b      	ldr	r3, [r7, #0]
 800b148:	781b      	ldrb	r3, [r3, #0]
 800b14a:	f003 030f 	and.w	r3, r3, #15
 800b14e:	2101      	movs	r1, #1
 800b150:	fa01 f303 	lsl.w	r3, r1, r3
 800b154:	041b      	lsls	r3, r3, #16
 800b156:	68f9      	ldr	r1, [r7, #12]
 800b158:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b15c:	4313      	orrs	r3, r2
 800b15e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	015a      	lsls	r2, r3, #5
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	4413      	add	r3, r2
 800b168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b172:	2b00      	cmp	r3, #0
 800b174:	d11a      	bne.n	800b1ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	015a      	lsls	r2, r3, #5
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	4413      	add	r3, r2
 800b17e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b182:	681a      	ldr	r2, [r3, #0]
 800b184:	683b      	ldr	r3, [r7, #0]
 800b186:	68db      	ldr	r3, [r3, #12]
 800b188:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	791b      	ldrb	r3, [r3, #4]
 800b190:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b192:	430b      	orrs	r3, r1
 800b194:	4313      	orrs	r3, r2
 800b196:	68ba      	ldr	r2, [r7, #8]
 800b198:	0151      	lsls	r1, r2, #5
 800b19a:	68fa      	ldr	r2, [r7, #12]
 800b19c:	440a      	add	r2, r1
 800b19e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	3714      	adds	r7, #20
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr
	...

0800b1bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	781b      	ldrb	r3, [r3, #0]
 800b1ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	785b      	ldrb	r3, [r3, #1]
 800b1d4:	2b01      	cmp	r3, #1
 800b1d6:	d161      	bne.n	800b29c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	015a      	lsls	r2, r3, #5
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	4413      	add	r3, r2
 800b1e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1ee:	d11f      	bne.n	800b230 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b1f0:	68bb      	ldr	r3, [r7, #8]
 800b1f2:	015a      	lsls	r2, r3, #5
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	4413      	add	r3, r2
 800b1f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	68ba      	ldr	r2, [r7, #8]
 800b200:	0151      	lsls	r1, r2, #5
 800b202:	68fa      	ldr	r2, [r7, #12]
 800b204:	440a      	add	r2, r1
 800b206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b20a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b20e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b210:	68bb      	ldr	r3, [r7, #8]
 800b212:	015a      	lsls	r2, r3, #5
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	4413      	add	r3, r2
 800b218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	68ba      	ldr	r2, [r7, #8]
 800b220:	0151      	lsls	r1, r2, #5
 800b222:	68fa      	ldr	r2, [r7, #12]
 800b224:	440a      	add	r2, r1
 800b226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b22a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b22e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b236:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	781b      	ldrb	r3, [r3, #0]
 800b23c:	f003 030f 	and.w	r3, r3, #15
 800b240:	2101      	movs	r1, #1
 800b242:	fa01 f303 	lsl.w	r3, r1, r3
 800b246:	b29b      	uxth	r3, r3
 800b248:	43db      	mvns	r3, r3
 800b24a:	68f9      	ldr	r1, [r7, #12]
 800b24c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b250:	4013      	ands	r3, r2
 800b252:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b25a:	69da      	ldr	r2, [r3, #28]
 800b25c:	683b      	ldr	r3, [r7, #0]
 800b25e:	781b      	ldrb	r3, [r3, #0]
 800b260:	f003 030f 	and.w	r3, r3, #15
 800b264:	2101      	movs	r1, #1
 800b266:	fa01 f303 	lsl.w	r3, r1, r3
 800b26a:	b29b      	uxth	r3, r3
 800b26c:	43db      	mvns	r3, r3
 800b26e:	68f9      	ldr	r1, [r7, #12]
 800b270:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b274:	4013      	ands	r3, r2
 800b276:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b278:	68bb      	ldr	r3, [r7, #8]
 800b27a:	015a      	lsls	r2, r3, #5
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	4413      	add	r3, r2
 800b280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	0159      	lsls	r1, r3, #5
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	440b      	add	r3, r1
 800b28e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b292:	4619      	mov	r1, r3
 800b294:	4b35      	ldr	r3, [pc, #212]	; (800b36c <USB_DeactivateEndpoint+0x1b0>)
 800b296:	4013      	ands	r3, r2
 800b298:	600b      	str	r3, [r1, #0]
 800b29a:	e060      	b.n	800b35e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	015a      	lsls	r2, r3, #5
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b2ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b2b2:	d11f      	bne.n	800b2f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b2b4:	68bb      	ldr	r3, [r7, #8]
 800b2b6:	015a      	lsls	r2, r3, #5
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	4413      	add	r3, r2
 800b2bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2c0:	681b      	ldr	r3, [r3, #0]
 800b2c2:	68ba      	ldr	r2, [r7, #8]
 800b2c4:	0151      	lsls	r1, r2, #5
 800b2c6:	68fa      	ldr	r2, [r7, #12]
 800b2c8:	440a      	add	r2, r1
 800b2ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b2d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b2d4:	68bb      	ldr	r3, [r7, #8]
 800b2d6:	015a      	lsls	r2, r3, #5
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	4413      	add	r3, r2
 800b2dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	68ba      	ldr	r2, [r7, #8]
 800b2e4:	0151      	lsls	r1, r2, #5
 800b2e6:	68fa      	ldr	r2, [r7, #12]
 800b2e8:	440a      	add	r2, r1
 800b2ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	781b      	ldrb	r3, [r3, #0]
 800b300:	f003 030f 	and.w	r3, r3, #15
 800b304:	2101      	movs	r1, #1
 800b306:	fa01 f303 	lsl.w	r3, r1, r3
 800b30a:	041b      	lsls	r3, r3, #16
 800b30c:	43db      	mvns	r3, r3
 800b30e:	68f9      	ldr	r1, [r7, #12]
 800b310:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b314:	4013      	ands	r3, r2
 800b316:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b31e:	69da      	ldr	r2, [r3, #28]
 800b320:	683b      	ldr	r3, [r7, #0]
 800b322:	781b      	ldrb	r3, [r3, #0]
 800b324:	f003 030f 	and.w	r3, r3, #15
 800b328:	2101      	movs	r1, #1
 800b32a:	fa01 f303 	lsl.w	r3, r1, r3
 800b32e:	041b      	lsls	r3, r3, #16
 800b330:	43db      	mvns	r3, r3
 800b332:	68f9      	ldr	r1, [r7, #12]
 800b334:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b338:	4013      	ands	r3, r2
 800b33a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	015a      	lsls	r2, r3, #5
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	4413      	add	r3, r2
 800b344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b348:	681a      	ldr	r2, [r3, #0]
 800b34a:	68bb      	ldr	r3, [r7, #8]
 800b34c:	0159      	lsls	r1, r3, #5
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	440b      	add	r3, r1
 800b352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b356:	4619      	mov	r1, r3
 800b358:	4b05      	ldr	r3, [pc, #20]	; (800b370 <USB_DeactivateEndpoint+0x1b4>)
 800b35a:	4013      	ands	r3, r2
 800b35c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b35e:	2300      	movs	r3, #0
}
 800b360:	4618      	mov	r0, r3
 800b362:	3714      	adds	r7, #20
 800b364:	46bd      	mov	sp, r7
 800b366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b36a:	4770      	bx	lr
 800b36c:	ec337800 	.word	0xec337800
 800b370:	eff37800 	.word	0xeff37800

0800b374 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b08a      	sub	sp, #40	; 0x28
 800b378:	af02      	add	r7, sp, #8
 800b37a:	60f8      	str	r0, [r7, #12]
 800b37c:	60b9      	str	r1, [r7, #8]
 800b37e:	4613      	mov	r3, r2
 800b380:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b386:	68bb      	ldr	r3, [r7, #8]
 800b388:	781b      	ldrb	r3, [r3, #0]
 800b38a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b38c:	68bb      	ldr	r3, [r7, #8]
 800b38e:	785b      	ldrb	r3, [r3, #1]
 800b390:	2b01      	cmp	r3, #1
 800b392:	f040 815c 	bne.w	800b64e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	699b      	ldr	r3, [r3, #24]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d132      	bne.n	800b404 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b39e:	69bb      	ldr	r3, [r7, #24]
 800b3a0:	015a      	lsls	r2, r3, #5
 800b3a2:	69fb      	ldr	r3, [r7, #28]
 800b3a4:	4413      	add	r3, r2
 800b3a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3aa:	691b      	ldr	r3, [r3, #16]
 800b3ac:	69ba      	ldr	r2, [r7, #24]
 800b3ae:	0151      	lsls	r1, r2, #5
 800b3b0:	69fa      	ldr	r2, [r7, #28]
 800b3b2:	440a      	add	r2, r1
 800b3b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b3bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b3c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b3c2:	69bb      	ldr	r3, [r7, #24]
 800b3c4:	015a      	lsls	r2, r3, #5
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3ce:	691b      	ldr	r3, [r3, #16]
 800b3d0:	69ba      	ldr	r2, [r7, #24]
 800b3d2:	0151      	lsls	r1, r2, #5
 800b3d4:	69fa      	ldr	r2, [r7, #28]
 800b3d6:	440a      	add	r2, r1
 800b3d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b3e2:	69bb      	ldr	r3, [r7, #24]
 800b3e4:	015a      	lsls	r2, r3, #5
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	4413      	add	r3, r2
 800b3ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3ee:	691b      	ldr	r3, [r3, #16]
 800b3f0:	69ba      	ldr	r2, [r7, #24]
 800b3f2:	0151      	lsls	r1, r2, #5
 800b3f4:	69fa      	ldr	r2, [r7, #28]
 800b3f6:	440a      	add	r2, r1
 800b3f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3fc:	0cdb      	lsrs	r3, r3, #19
 800b3fe:	04db      	lsls	r3, r3, #19
 800b400:	6113      	str	r3, [r2, #16]
 800b402:	e074      	b.n	800b4ee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	015a      	lsls	r2, r3, #5
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	4413      	add	r3, r2
 800b40c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b410:	691b      	ldr	r3, [r3, #16]
 800b412:	69ba      	ldr	r2, [r7, #24]
 800b414:	0151      	lsls	r1, r2, #5
 800b416:	69fa      	ldr	r2, [r7, #28]
 800b418:	440a      	add	r2, r1
 800b41a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b41e:	0cdb      	lsrs	r3, r3, #19
 800b420:	04db      	lsls	r3, r3, #19
 800b422:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b424:	69bb      	ldr	r3, [r7, #24]
 800b426:	015a      	lsls	r2, r3, #5
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	4413      	add	r3, r2
 800b42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b430:	691b      	ldr	r3, [r3, #16]
 800b432:	69ba      	ldr	r2, [r7, #24]
 800b434:	0151      	lsls	r1, r2, #5
 800b436:	69fa      	ldr	r2, [r7, #28]
 800b438:	440a      	add	r2, r1
 800b43a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b43e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b442:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b446:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	015a      	lsls	r2, r3, #5
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	4413      	add	r3, r2
 800b450:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b454:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	6999      	ldr	r1, [r3, #24]
 800b45a:	68bb      	ldr	r3, [r7, #8]
 800b45c:	68db      	ldr	r3, [r3, #12]
 800b45e:	440b      	add	r3, r1
 800b460:	1e59      	subs	r1, r3, #1
 800b462:	68bb      	ldr	r3, [r7, #8]
 800b464:	68db      	ldr	r3, [r3, #12]
 800b466:	fbb1 f3f3 	udiv	r3, r1, r3
 800b46a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b46c:	4b9d      	ldr	r3, [pc, #628]	; (800b6e4 <USB_EPStartXfer+0x370>)
 800b46e:	400b      	ands	r3, r1
 800b470:	69b9      	ldr	r1, [r7, #24]
 800b472:	0148      	lsls	r0, r1, #5
 800b474:	69f9      	ldr	r1, [r7, #28]
 800b476:	4401      	add	r1, r0
 800b478:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b47c:	4313      	orrs	r3, r2
 800b47e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b480:	69bb      	ldr	r3, [r7, #24]
 800b482:	015a      	lsls	r2, r3, #5
 800b484:	69fb      	ldr	r3, [r7, #28]
 800b486:	4413      	add	r3, r2
 800b488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b48c:	691a      	ldr	r2, [r3, #16]
 800b48e:	68bb      	ldr	r3, [r7, #8]
 800b490:	699b      	ldr	r3, [r3, #24]
 800b492:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b496:	69b9      	ldr	r1, [r7, #24]
 800b498:	0148      	lsls	r0, r1, #5
 800b49a:	69f9      	ldr	r1, [r7, #28]
 800b49c:	4401      	add	r1, r0
 800b49e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b4a2:	4313      	orrs	r3, r2
 800b4a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	791b      	ldrb	r3, [r3, #4]
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d11f      	bne.n	800b4ee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b4ae:	69bb      	ldr	r3, [r7, #24]
 800b4b0:	015a      	lsls	r2, r3, #5
 800b4b2:	69fb      	ldr	r3, [r7, #28]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ba:	691b      	ldr	r3, [r3, #16]
 800b4bc:	69ba      	ldr	r2, [r7, #24]
 800b4be:	0151      	lsls	r1, r2, #5
 800b4c0:	69fa      	ldr	r2, [r7, #28]
 800b4c2:	440a      	add	r2, r1
 800b4c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b4cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b4ce:	69bb      	ldr	r3, [r7, #24]
 800b4d0:	015a      	lsls	r2, r3, #5
 800b4d2:	69fb      	ldr	r3, [r7, #28]
 800b4d4:	4413      	add	r3, r2
 800b4d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4da:	691b      	ldr	r3, [r3, #16]
 800b4dc:	69ba      	ldr	r2, [r7, #24]
 800b4de:	0151      	lsls	r1, r2, #5
 800b4e0:	69fa      	ldr	r2, [r7, #28]
 800b4e2:	440a      	add	r2, r1
 800b4e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b4ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b4ee:	79fb      	ldrb	r3, [r7, #7]
 800b4f0:	2b01      	cmp	r3, #1
 800b4f2:	d14b      	bne.n	800b58c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	695b      	ldr	r3, [r3, #20]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d009      	beq.n	800b510 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b4fc:	69bb      	ldr	r3, [r7, #24]
 800b4fe:	015a      	lsls	r2, r3, #5
 800b500:	69fb      	ldr	r3, [r7, #28]
 800b502:	4413      	add	r3, r2
 800b504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b508:	461a      	mov	r2, r3
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	695b      	ldr	r3, [r3, #20]
 800b50e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	791b      	ldrb	r3, [r3, #4]
 800b514:	2b01      	cmp	r3, #1
 800b516:	d128      	bne.n	800b56a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b51e:	689b      	ldr	r3, [r3, #8]
 800b520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b524:	2b00      	cmp	r3, #0
 800b526:	d110      	bne.n	800b54a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b528:	69bb      	ldr	r3, [r7, #24]
 800b52a:	015a      	lsls	r2, r3, #5
 800b52c:	69fb      	ldr	r3, [r7, #28]
 800b52e:	4413      	add	r3, r2
 800b530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	69ba      	ldr	r2, [r7, #24]
 800b538:	0151      	lsls	r1, r2, #5
 800b53a:	69fa      	ldr	r2, [r7, #28]
 800b53c:	440a      	add	r2, r1
 800b53e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b542:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b546:	6013      	str	r3, [r2, #0]
 800b548:	e00f      	b.n	800b56a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b54a:	69bb      	ldr	r3, [r7, #24]
 800b54c:	015a      	lsls	r2, r3, #5
 800b54e:	69fb      	ldr	r3, [r7, #28]
 800b550:	4413      	add	r3, r2
 800b552:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	69ba      	ldr	r2, [r7, #24]
 800b55a:	0151      	lsls	r1, r2, #5
 800b55c:	69fa      	ldr	r2, [r7, #28]
 800b55e:	440a      	add	r2, r1
 800b560:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b564:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b568:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b56a:	69bb      	ldr	r3, [r7, #24]
 800b56c:	015a      	lsls	r2, r3, #5
 800b56e:	69fb      	ldr	r3, [r7, #28]
 800b570:	4413      	add	r3, r2
 800b572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	69ba      	ldr	r2, [r7, #24]
 800b57a:	0151      	lsls	r1, r2, #5
 800b57c:	69fa      	ldr	r2, [r7, #28]
 800b57e:	440a      	add	r2, r1
 800b580:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b584:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b588:	6013      	str	r3, [r2, #0]
 800b58a:	e133      	b.n	800b7f4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b58c:	69bb      	ldr	r3, [r7, #24]
 800b58e:	015a      	lsls	r2, r3, #5
 800b590:	69fb      	ldr	r3, [r7, #28]
 800b592:	4413      	add	r3, r2
 800b594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	69ba      	ldr	r2, [r7, #24]
 800b59c:	0151      	lsls	r1, r2, #5
 800b59e:	69fa      	ldr	r2, [r7, #28]
 800b5a0:	440a      	add	r2, r1
 800b5a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b5ac:	68bb      	ldr	r3, [r7, #8]
 800b5ae:	791b      	ldrb	r3, [r3, #4]
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d015      	beq.n	800b5e0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	699b      	ldr	r3, [r3, #24]
 800b5b8:	2b00      	cmp	r3, #0
 800b5ba:	f000 811b 	beq.w	800b7f4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b5be:	69fb      	ldr	r3, [r7, #28]
 800b5c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	781b      	ldrb	r3, [r3, #0]
 800b5ca:	f003 030f 	and.w	r3, r3, #15
 800b5ce:	2101      	movs	r1, #1
 800b5d0:	fa01 f303 	lsl.w	r3, r1, r3
 800b5d4:	69f9      	ldr	r1, [r7, #28]
 800b5d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5da:	4313      	orrs	r3, r2
 800b5dc:	634b      	str	r3, [r1, #52]	; 0x34
 800b5de:	e109      	b.n	800b7f4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5e6:	689b      	ldr	r3, [r3, #8]
 800b5e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d110      	bne.n	800b612 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b5f0:	69bb      	ldr	r3, [r7, #24]
 800b5f2:	015a      	lsls	r2, r3, #5
 800b5f4:	69fb      	ldr	r3, [r7, #28]
 800b5f6:	4413      	add	r3, r2
 800b5f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	69ba      	ldr	r2, [r7, #24]
 800b600:	0151      	lsls	r1, r2, #5
 800b602:	69fa      	ldr	r2, [r7, #28]
 800b604:	440a      	add	r2, r1
 800b606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b60a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b60e:	6013      	str	r3, [r2, #0]
 800b610:	e00f      	b.n	800b632 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b612:	69bb      	ldr	r3, [r7, #24]
 800b614:	015a      	lsls	r2, r3, #5
 800b616:	69fb      	ldr	r3, [r7, #28]
 800b618:	4413      	add	r3, r2
 800b61a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b61e:	681b      	ldr	r3, [r3, #0]
 800b620:	69ba      	ldr	r2, [r7, #24]
 800b622:	0151      	lsls	r1, r2, #5
 800b624:	69fa      	ldr	r2, [r7, #28]
 800b626:	440a      	add	r2, r1
 800b628:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b62c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b630:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	6919      	ldr	r1, [r3, #16]
 800b636:	68bb      	ldr	r3, [r7, #8]
 800b638:	781a      	ldrb	r2, [r3, #0]
 800b63a:	68bb      	ldr	r3, [r7, #8]
 800b63c:	699b      	ldr	r3, [r3, #24]
 800b63e:	b298      	uxth	r0, r3
 800b640:	79fb      	ldrb	r3, [r7, #7]
 800b642:	9300      	str	r3, [sp, #0]
 800b644:	4603      	mov	r3, r0
 800b646:	68f8      	ldr	r0, [r7, #12]
 800b648:	f000 fade 	bl	800bc08 <USB_WritePacket>
 800b64c:	e0d2      	b.n	800b7f4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	015a      	lsls	r2, r3, #5
 800b652:	69fb      	ldr	r3, [r7, #28]
 800b654:	4413      	add	r3, r2
 800b656:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b65a:	691b      	ldr	r3, [r3, #16]
 800b65c:	69ba      	ldr	r2, [r7, #24]
 800b65e:	0151      	lsls	r1, r2, #5
 800b660:	69fa      	ldr	r2, [r7, #28]
 800b662:	440a      	add	r2, r1
 800b664:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b668:	0cdb      	lsrs	r3, r3, #19
 800b66a:	04db      	lsls	r3, r3, #19
 800b66c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b66e:	69bb      	ldr	r3, [r7, #24]
 800b670:	015a      	lsls	r2, r3, #5
 800b672:	69fb      	ldr	r3, [r7, #28]
 800b674:	4413      	add	r3, r2
 800b676:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	69ba      	ldr	r2, [r7, #24]
 800b67e:	0151      	lsls	r1, r2, #5
 800b680:	69fa      	ldr	r2, [r7, #28]
 800b682:	440a      	add	r2, r1
 800b684:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b688:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b68c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b690:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800b692:	68bb      	ldr	r3, [r7, #8]
 800b694:	699b      	ldr	r3, [r3, #24]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d126      	bne.n	800b6e8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	015a      	lsls	r2, r3, #5
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	4413      	add	r3, r2
 800b6a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6a6:	691a      	ldr	r2, [r3, #16]
 800b6a8:	68bb      	ldr	r3, [r7, #8]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6b0:	69b9      	ldr	r1, [r7, #24]
 800b6b2:	0148      	lsls	r0, r1, #5
 800b6b4:	69f9      	ldr	r1, [r7, #28]
 800b6b6:	4401      	add	r1, r0
 800b6b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	015a      	lsls	r2, r3, #5
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	4413      	add	r3, r2
 800b6c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	69ba      	ldr	r2, [r7, #24]
 800b6d0:	0151      	lsls	r1, r2, #5
 800b6d2:	69fa      	ldr	r2, [r7, #28]
 800b6d4:	440a      	add	r2, r1
 800b6d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b6de:	6113      	str	r3, [r2, #16]
 800b6e0:	e03a      	b.n	800b758 <USB_EPStartXfer+0x3e4>
 800b6e2:	bf00      	nop
 800b6e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	699a      	ldr	r2, [r3, #24]
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	68db      	ldr	r3, [r3, #12]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	1e5a      	subs	r2, r3, #1
 800b6f4:	68bb      	ldr	r3, [r7, #8]
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6fc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	68db      	ldr	r3, [r3, #12]
 800b702:	8afa      	ldrh	r2, [r7, #22]
 800b704:	fb03 f202 	mul.w	r2, r3, r2
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b70c:	69bb      	ldr	r3, [r7, #24]
 800b70e:	015a      	lsls	r2, r3, #5
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	4413      	add	r3, r2
 800b714:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b718:	691a      	ldr	r2, [r3, #16]
 800b71a:	8afb      	ldrh	r3, [r7, #22]
 800b71c:	04d9      	lsls	r1, r3, #19
 800b71e:	4b38      	ldr	r3, [pc, #224]	; (800b800 <USB_EPStartXfer+0x48c>)
 800b720:	400b      	ands	r3, r1
 800b722:	69b9      	ldr	r1, [r7, #24]
 800b724:	0148      	lsls	r0, r1, #5
 800b726:	69f9      	ldr	r1, [r7, #28]
 800b728:	4401      	add	r1, r0
 800b72a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b72e:	4313      	orrs	r3, r2
 800b730:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b732:	69bb      	ldr	r3, [r7, #24]
 800b734:	015a      	lsls	r2, r3, #5
 800b736:	69fb      	ldr	r3, [r7, #28]
 800b738:	4413      	add	r3, r2
 800b73a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b73e:	691a      	ldr	r2, [r3, #16]
 800b740:	68bb      	ldr	r3, [r7, #8]
 800b742:	69db      	ldr	r3, [r3, #28]
 800b744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b748:	69b9      	ldr	r1, [r7, #24]
 800b74a:	0148      	lsls	r0, r1, #5
 800b74c:	69f9      	ldr	r1, [r7, #28]
 800b74e:	4401      	add	r1, r0
 800b750:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b754:	4313      	orrs	r3, r2
 800b756:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b758:	79fb      	ldrb	r3, [r7, #7]
 800b75a:	2b01      	cmp	r3, #1
 800b75c:	d10d      	bne.n	800b77a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d009      	beq.n	800b77a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	6919      	ldr	r1, [r3, #16]
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	015a      	lsls	r2, r3, #5
 800b76e:	69fb      	ldr	r3, [r7, #28]
 800b770:	4413      	add	r3, r2
 800b772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b776:	460a      	mov	r2, r1
 800b778:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b77a:	68bb      	ldr	r3, [r7, #8]
 800b77c:	791b      	ldrb	r3, [r3, #4]
 800b77e:	2b01      	cmp	r3, #1
 800b780:	d128      	bne.n	800b7d4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b782:	69fb      	ldr	r3, [r7, #28]
 800b784:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d110      	bne.n	800b7b4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b792:	69bb      	ldr	r3, [r7, #24]
 800b794:	015a      	lsls	r2, r3, #5
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	4413      	add	r3, r2
 800b79a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	69ba      	ldr	r2, [r7, #24]
 800b7a2:	0151      	lsls	r1, r2, #5
 800b7a4:	69fa      	ldr	r2, [r7, #28]
 800b7a6:	440a      	add	r2, r1
 800b7a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b7b0:	6013      	str	r3, [r2, #0]
 800b7b2:	e00f      	b.n	800b7d4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	015a      	lsls	r2, r3, #5
 800b7b8:	69fb      	ldr	r3, [r7, #28]
 800b7ba:	4413      	add	r3, r2
 800b7bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	69ba      	ldr	r2, [r7, #24]
 800b7c4:	0151      	lsls	r1, r2, #5
 800b7c6:	69fa      	ldr	r2, [r7, #28]
 800b7c8:	440a      	add	r2, r1
 800b7ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b7d4:	69bb      	ldr	r3, [r7, #24]
 800b7d6:	015a      	lsls	r2, r3, #5
 800b7d8:	69fb      	ldr	r3, [r7, #28]
 800b7da:	4413      	add	r3, r2
 800b7dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	69ba      	ldr	r2, [r7, #24]
 800b7e4:	0151      	lsls	r1, r2, #5
 800b7e6:	69fa      	ldr	r2, [r7, #28]
 800b7e8:	440a      	add	r2, r1
 800b7ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b7f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3720      	adds	r7, #32
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	1ff80000 	.word	0x1ff80000

0800b804 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b804:	b480      	push	{r7}
 800b806:	b087      	sub	sp, #28
 800b808:	af00      	add	r7, sp, #0
 800b80a:	60f8      	str	r0, [r7, #12]
 800b80c:	60b9      	str	r1, [r7, #8]
 800b80e:	4613      	mov	r3, r2
 800b810:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b816:	68bb      	ldr	r3, [r7, #8]
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b81c:	68bb      	ldr	r3, [r7, #8]
 800b81e:	785b      	ldrb	r3, [r3, #1]
 800b820:	2b01      	cmp	r3, #1
 800b822:	f040 80ce 	bne.w	800b9c2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b826:	68bb      	ldr	r3, [r7, #8]
 800b828:	699b      	ldr	r3, [r3, #24]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d132      	bne.n	800b894 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b82e:	693b      	ldr	r3, [r7, #16]
 800b830:	015a      	lsls	r2, r3, #5
 800b832:	697b      	ldr	r3, [r7, #20]
 800b834:	4413      	add	r3, r2
 800b836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b83a:	691b      	ldr	r3, [r3, #16]
 800b83c:	693a      	ldr	r2, [r7, #16]
 800b83e:	0151      	lsls	r1, r2, #5
 800b840:	697a      	ldr	r2, [r7, #20]
 800b842:	440a      	add	r2, r1
 800b844:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b848:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b84c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b850:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	015a      	lsls	r2, r3, #5
 800b856:	697b      	ldr	r3, [r7, #20]
 800b858:	4413      	add	r3, r2
 800b85a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b85e:	691b      	ldr	r3, [r3, #16]
 800b860:	693a      	ldr	r2, [r7, #16]
 800b862:	0151      	lsls	r1, r2, #5
 800b864:	697a      	ldr	r2, [r7, #20]
 800b866:	440a      	add	r2, r1
 800b868:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b86c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b870:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	015a      	lsls	r2, r3, #5
 800b876:	697b      	ldr	r3, [r7, #20]
 800b878:	4413      	add	r3, r2
 800b87a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b87e:	691b      	ldr	r3, [r3, #16]
 800b880:	693a      	ldr	r2, [r7, #16]
 800b882:	0151      	lsls	r1, r2, #5
 800b884:	697a      	ldr	r2, [r7, #20]
 800b886:	440a      	add	r2, r1
 800b888:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b88c:	0cdb      	lsrs	r3, r3, #19
 800b88e:	04db      	lsls	r3, r3, #19
 800b890:	6113      	str	r3, [r2, #16]
 800b892:	e04e      	b.n	800b932 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b894:	693b      	ldr	r3, [r7, #16]
 800b896:	015a      	lsls	r2, r3, #5
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	4413      	add	r3, r2
 800b89c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	693a      	ldr	r2, [r7, #16]
 800b8a4:	0151      	lsls	r1, r2, #5
 800b8a6:	697a      	ldr	r2, [r7, #20]
 800b8a8:	440a      	add	r2, r1
 800b8aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8ae:	0cdb      	lsrs	r3, r3, #19
 800b8b0:	04db      	lsls	r3, r3, #19
 800b8b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b8b4:	693b      	ldr	r3, [r7, #16]
 800b8b6:	015a      	lsls	r2, r3, #5
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8c0:	691b      	ldr	r3, [r3, #16]
 800b8c2:	693a      	ldr	r2, [r7, #16]
 800b8c4:	0151      	lsls	r1, r2, #5
 800b8c6:	697a      	ldr	r2, [r7, #20]
 800b8c8:	440a      	add	r2, r1
 800b8ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b8d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b8d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	699a      	ldr	r2, [r3, #24]
 800b8dc:	68bb      	ldr	r3, [r7, #8]
 800b8de:	68db      	ldr	r3, [r3, #12]
 800b8e0:	429a      	cmp	r2, r3
 800b8e2:	d903      	bls.n	800b8ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	68da      	ldr	r2, [r3, #12]
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	015a      	lsls	r2, r3, #5
 800b8f0:	697b      	ldr	r3, [r7, #20]
 800b8f2:	4413      	add	r3, r2
 800b8f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8f8:	691b      	ldr	r3, [r3, #16]
 800b8fa:	693a      	ldr	r2, [r7, #16]
 800b8fc:	0151      	lsls	r1, r2, #5
 800b8fe:	697a      	ldr	r2, [r7, #20]
 800b900:	440a      	add	r2, r1
 800b902:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b906:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b90a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b90c:	693b      	ldr	r3, [r7, #16]
 800b90e:	015a      	lsls	r2, r3, #5
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	4413      	add	r3, r2
 800b914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b918:	691a      	ldr	r2, [r3, #16]
 800b91a:	68bb      	ldr	r3, [r7, #8]
 800b91c:	699b      	ldr	r3, [r3, #24]
 800b91e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b922:	6939      	ldr	r1, [r7, #16]
 800b924:	0148      	lsls	r0, r1, #5
 800b926:	6979      	ldr	r1, [r7, #20]
 800b928:	4401      	add	r1, r0
 800b92a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b92e:	4313      	orrs	r3, r2
 800b930:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b932:	79fb      	ldrb	r3, [r7, #7]
 800b934:	2b01      	cmp	r3, #1
 800b936:	d11e      	bne.n	800b976 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	695b      	ldr	r3, [r3, #20]
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d009      	beq.n	800b954 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b940:	693b      	ldr	r3, [r7, #16]
 800b942:	015a      	lsls	r2, r3, #5
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	4413      	add	r3, r2
 800b948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b94c:	461a      	mov	r2, r3
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	695b      	ldr	r3, [r3, #20]
 800b952:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b954:	693b      	ldr	r3, [r7, #16]
 800b956:	015a      	lsls	r2, r3, #5
 800b958:	697b      	ldr	r3, [r7, #20]
 800b95a:	4413      	add	r3, r2
 800b95c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	693a      	ldr	r2, [r7, #16]
 800b964:	0151      	lsls	r1, r2, #5
 800b966:	697a      	ldr	r2, [r7, #20]
 800b968:	440a      	add	r2, r1
 800b96a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b96e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b972:	6013      	str	r3, [r2, #0]
 800b974:	e097      	b.n	800baa6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	015a      	lsls	r2, r3, #5
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	4413      	add	r3, r2
 800b97e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	693a      	ldr	r2, [r7, #16]
 800b986:	0151      	lsls	r1, r2, #5
 800b988:	697a      	ldr	r2, [r7, #20]
 800b98a:	440a      	add	r2, r1
 800b98c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b990:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b994:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	699b      	ldr	r3, [r3, #24]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	f000 8083 	beq.w	800baa6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	781b      	ldrb	r3, [r3, #0]
 800b9ac:	f003 030f 	and.w	r3, r3, #15
 800b9b0:	2101      	movs	r1, #1
 800b9b2:	fa01 f303 	lsl.w	r3, r1, r3
 800b9b6:	6979      	ldr	r1, [r7, #20]
 800b9b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9bc:	4313      	orrs	r3, r2
 800b9be:	634b      	str	r3, [r1, #52]	; 0x34
 800b9c0:	e071      	b.n	800baa6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b9c2:	693b      	ldr	r3, [r7, #16]
 800b9c4:	015a      	lsls	r2, r3, #5
 800b9c6:	697b      	ldr	r3, [r7, #20]
 800b9c8:	4413      	add	r3, r2
 800b9ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ce:	691b      	ldr	r3, [r3, #16]
 800b9d0:	693a      	ldr	r2, [r7, #16]
 800b9d2:	0151      	lsls	r1, r2, #5
 800b9d4:	697a      	ldr	r2, [r7, #20]
 800b9d6:	440a      	add	r2, r1
 800b9d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9dc:	0cdb      	lsrs	r3, r3, #19
 800b9de:	04db      	lsls	r3, r3, #19
 800b9e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b9e2:	693b      	ldr	r3, [r7, #16]
 800b9e4:	015a      	lsls	r2, r3, #5
 800b9e6:	697b      	ldr	r3, [r7, #20]
 800b9e8:	4413      	add	r3, r2
 800b9ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ee:	691b      	ldr	r3, [r3, #16]
 800b9f0:	693a      	ldr	r2, [r7, #16]
 800b9f2:	0151      	lsls	r1, r2, #5
 800b9f4:	697a      	ldr	r2, [r7, #20]
 800b9f6:	440a      	add	r2, r1
 800b9f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ba00:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ba04:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	699b      	ldr	r3, [r3, #24]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d003      	beq.n	800ba16 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	68da      	ldr	r2, [r3, #12]
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	68da      	ldr	r2, [r3, #12]
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	015a      	lsls	r2, r3, #5
 800ba22:	697b      	ldr	r3, [r7, #20]
 800ba24:	4413      	add	r3, r2
 800ba26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba2a:	691b      	ldr	r3, [r3, #16]
 800ba2c:	693a      	ldr	r2, [r7, #16]
 800ba2e:	0151      	lsls	r1, r2, #5
 800ba30:	697a      	ldr	r2, [r7, #20]
 800ba32:	440a      	add	r2, r1
 800ba34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ba3e:	693b      	ldr	r3, [r7, #16]
 800ba40:	015a      	lsls	r2, r3, #5
 800ba42:	697b      	ldr	r3, [r7, #20]
 800ba44:	4413      	add	r3, r2
 800ba46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba4a:	691a      	ldr	r2, [r3, #16]
 800ba4c:	68bb      	ldr	r3, [r7, #8]
 800ba4e:	69db      	ldr	r3, [r3, #28]
 800ba50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba54:	6939      	ldr	r1, [r7, #16]
 800ba56:	0148      	lsls	r0, r1, #5
 800ba58:	6979      	ldr	r1, [r7, #20]
 800ba5a:	4401      	add	r1, r0
 800ba5c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ba60:	4313      	orrs	r3, r2
 800ba62:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ba64:	79fb      	ldrb	r3, [r7, #7]
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d10d      	bne.n	800ba86 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ba6a:	68bb      	ldr	r3, [r7, #8]
 800ba6c:	691b      	ldr	r3, [r3, #16]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d009      	beq.n	800ba86 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	6919      	ldr	r1, [r3, #16]
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	015a      	lsls	r2, r3, #5
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	4413      	add	r3, r2
 800ba7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba82:	460a      	mov	r2, r1
 800ba84:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ba86:	693b      	ldr	r3, [r7, #16]
 800ba88:	015a      	lsls	r2, r3, #5
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	4413      	add	r3, r2
 800ba8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	693a      	ldr	r2, [r7, #16]
 800ba96:	0151      	lsls	r1, r2, #5
 800ba98:	697a      	ldr	r2, [r7, #20]
 800ba9a:	440a      	add	r2, r1
 800ba9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800baa0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800baa4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800baa6:	2300      	movs	r3, #0
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	371c      	adds	r7, #28
 800baac:	46bd      	mov	sp, r7
 800baae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab2:	4770      	bx	lr

0800bab4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bab4:	b480      	push	{r7}
 800bab6:	b087      	sub	sp, #28
 800bab8:	af00      	add	r7, sp, #0
 800baba:	6078      	str	r0, [r7, #4]
 800babc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800babe:	2300      	movs	r3, #0
 800bac0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bac2:	2300      	movs	r3, #0
 800bac4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800baca:	683b      	ldr	r3, [r7, #0]
 800bacc:	785b      	ldrb	r3, [r3, #1]
 800bace:	2b01      	cmp	r3, #1
 800bad0:	d14a      	bne.n	800bb68 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	015a      	lsls	r2, r3, #5
 800bad8:	693b      	ldr	r3, [r7, #16]
 800bada:	4413      	add	r3, r2
 800badc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bae6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800baea:	f040 8086 	bne.w	800bbfa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	781b      	ldrb	r3, [r3, #0]
 800baf2:	015a      	lsls	r2, r3, #5
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	4413      	add	r3, r2
 800baf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	683a      	ldr	r2, [r7, #0]
 800bb00:	7812      	ldrb	r2, [r2, #0]
 800bb02:	0151      	lsls	r1, r2, #5
 800bb04:	693a      	ldr	r2, [r7, #16]
 800bb06:	440a      	add	r2, r1
 800bb08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb10:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	015a      	lsls	r2, r3, #5
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	4413      	add	r3, r2
 800bb1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	683a      	ldr	r2, [r7, #0]
 800bb24:	7812      	ldrb	r2, [r2, #0]
 800bb26:	0151      	lsls	r1, r2, #5
 800bb28:	693a      	ldr	r2, [r7, #16]
 800bb2a:	440a      	add	r2, r1
 800bb2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	3301      	adds	r3, #1
 800bb3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bb3c:	68fb      	ldr	r3, [r7, #12]
 800bb3e:	f242 7210 	movw	r2, #10000	; 0x2710
 800bb42:	4293      	cmp	r3, r2
 800bb44:	d902      	bls.n	800bb4c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bb46:	2301      	movs	r3, #1
 800bb48:	75fb      	strb	r3, [r7, #23]
          break;
 800bb4a:	e056      	b.n	800bbfa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bb4c:	683b      	ldr	r3, [r7, #0]
 800bb4e:	781b      	ldrb	r3, [r3, #0]
 800bb50:	015a      	lsls	r2, r3, #5
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	4413      	add	r3, r2
 800bb56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb64:	d0e7      	beq.n	800bb36 <USB_EPStopXfer+0x82>
 800bb66:	e048      	b.n	800bbfa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb68:	683b      	ldr	r3, [r7, #0]
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	015a      	lsls	r2, r3, #5
 800bb6e:	693b      	ldr	r3, [r7, #16]
 800bb70:	4413      	add	r3, r2
 800bb72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb80:	d13b      	bne.n	800bbfa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bb82:	683b      	ldr	r3, [r7, #0]
 800bb84:	781b      	ldrb	r3, [r3, #0]
 800bb86:	015a      	lsls	r2, r3, #5
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	683a      	ldr	r2, [r7, #0]
 800bb94:	7812      	ldrb	r2, [r2, #0]
 800bb96:	0151      	lsls	r1, r2, #5
 800bb98:	693a      	ldr	r2, [r7, #16]
 800bb9a:	440a      	add	r2, r1
 800bb9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bba0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bba4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	015a      	lsls	r2, r3, #5
 800bbac:	693b      	ldr	r3, [r7, #16]
 800bbae:	4413      	add	r3, r2
 800bbb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	683a      	ldr	r2, [r7, #0]
 800bbb8:	7812      	ldrb	r2, [r2, #0]
 800bbba:	0151      	lsls	r1, r2, #5
 800bbbc:	693a      	ldr	r2, [r7, #16]
 800bbbe:	440a      	add	r2, r1
 800bbc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bbc8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f242 7210 	movw	r2, #10000	; 0x2710
 800bbd6:	4293      	cmp	r3, r2
 800bbd8:	d902      	bls.n	800bbe0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bbda:	2301      	movs	r3, #1
 800bbdc:	75fb      	strb	r3, [r7, #23]
          break;
 800bbde:	e00c      	b.n	800bbfa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bbe0:	683b      	ldr	r3, [r7, #0]
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	015a      	lsls	r2, r3, #5
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	4413      	add	r3, r2
 800bbea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbf8:	d0e7      	beq.n	800bbca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bbfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbfc:	4618      	mov	r0, r3
 800bbfe:	371c      	adds	r7, #28
 800bc00:	46bd      	mov	sp, r7
 800bc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc06:	4770      	bx	lr

0800bc08 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bc08:	b480      	push	{r7}
 800bc0a:	b089      	sub	sp, #36	; 0x24
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	60f8      	str	r0, [r7, #12]
 800bc10:	60b9      	str	r1, [r7, #8]
 800bc12:	4611      	mov	r1, r2
 800bc14:	461a      	mov	r2, r3
 800bc16:	460b      	mov	r3, r1
 800bc18:	71fb      	strb	r3, [r7, #7]
 800bc1a:	4613      	mov	r3, r2
 800bc1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bc26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d123      	bne.n	800bc76 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bc2e:	88bb      	ldrh	r3, [r7, #4]
 800bc30:	3303      	adds	r3, #3
 800bc32:	089b      	lsrs	r3, r3, #2
 800bc34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bc36:	2300      	movs	r3, #0
 800bc38:	61bb      	str	r3, [r7, #24]
 800bc3a:	e018      	b.n	800bc6e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bc3c:	79fb      	ldrb	r3, [r7, #7]
 800bc3e:	031a      	lsls	r2, r3, #12
 800bc40:	697b      	ldr	r3, [r7, #20]
 800bc42:	4413      	add	r3, r2
 800bc44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc48:	461a      	mov	r2, r3
 800bc4a:	69fb      	ldr	r3, [r7, #28]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	3301      	adds	r3, #1
 800bc54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc56:	69fb      	ldr	r3, [r7, #28]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc5c:	69fb      	ldr	r3, [r7, #28]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc62:	69fb      	ldr	r3, [r7, #28]
 800bc64:	3301      	adds	r3, #1
 800bc66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	3301      	adds	r3, #1
 800bc6c:	61bb      	str	r3, [r7, #24]
 800bc6e:	69ba      	ldr	r2, [r7, #24]
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	429a      	cmp	r2, r3
 800bc74:	d3e2      	bcc.n	800bc3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bc76:	2300      	movs	r3, #0
}
 800bc78:	4618      	mov	r0, r3
 800bc7a:	3724      	adds	r7, #36	; 0x24
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b08b      	sub	sp, #44	; 0x2c
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	4613      	mov	r3, r2
 800bc90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bc96:	68bb      	ldr	r3, [r7, #8]
 800bc98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bc9a:	88fb      	ldrh	r3, [r7, #6]
 800bc9c:	089b      	lsrs	r3, r3, #2
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bca2:	88fb      	ldrh	r3, [r7, #6]
 800bca4:	f003 0303 	and.w	r3, r3, #3
 800bca8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bcaa:	2300      	movs	r3, #0
 800bcac:	623b      	str	r3, [r7, #32]
 800bcae:	e014      	b.n	800bcda <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bcb0:	69bb      	ldr	r3, [r7, #24]
 800bcb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcb6:	681a      	ldr	r2, [r3, #0]
 800bcb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcba:	601a      	str	r2, [r3, #0]
    pDest++;
 800bcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bcc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcca:	3301      	adds	r3, #1
 800bccc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bcce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd0:	3301      	adds	r3, #1
 800bcd2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bcd4:	6a3b      	ldr	r3, [r7, #32]
 800bcd6:	3301      	adds	r3, #1
 800bcd8:	623b      	str	r3, [r7, #32]
 800bcda:	6a3a      	ldr	r2, [r7, #32]
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	429a      	cmp	r2, r3
 800bce0:	d3e6      	bcc.n	800bcb0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bce2:	8bfb      	ldrh	r3, [r7, #30]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d01e      	beq.n	800bd26 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bce8:	2300      	movs	r3, #0
 800bcea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bcec:	69bb      	ldr	r3, [r7, #24]
 800bcee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcf2:	461a      	mov	r2, r3
 800bcf4:	f107 0310 	add.w	r3, r7, #16
 800bcf8:	6812      	ldr	r2, [r2, #0]
 800bcfa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bcfc:	693a      	ldr	r2, [r7, #16]
 800bcfe:	6a3b      	ldr	r3, [r7, #32]
 800bd00:	b2db      	uxtb	r3, r3
 800bd02:	00db      	lsls	r3, r3, #3
 800bd04:	fa22 f303 	lsr.w	r3, r2, r3
 800bd08:	b2da      	uxtb	r2, r3
 800bd0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd0c:	701a      	strb	r2, [r3, #0]
      i++;
 800bd0e:	6a3b      	ldr	r3, [r7, #32]
 800bd10:	3301      	adds	r3, #1
 800bd12:	623b      	str	r3, [r7, #32]
      pDest++;
 800bd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd16:	3301      	adds	r3, #1
 800bd18:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bd1a:	8bfb      	ldrh	r3, [r7, #30]
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bd20:	8bfb      	ldrh	r3, [r7, #30]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d1ea      	bne.n	800bcfc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd28:	4618      	mov	r0, r3
 800bd2a:	372c      	adds	r7, #44	; 0x2c
 800bd2c:	46bd      	mov	sp, r7
 800bd2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd32:	4770      	bx	lr

0800bd34 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bd34:	b480      	push	{r7}
 800bd36:	b085      	sub	sp, #20
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
 800bd3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd42:	683b      	ldr	r3, [r7, #0]
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bd48:	683b      	ldr	r3, [r7, #0]
 800bd4a:	785b      	ldrb	r3, [r3, #1]
 800bd4c:	2b01      	cmp	r3, #1
 800bd4e:	d12c      	bne.n	800bdaa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	015a      	lsls	r2, r3, #5
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	4413      	add	r3, r2
 800bd58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	db12      	blt.n	800bd88 <USB_EPSetStall+0x54>
 800bd62:	68bb      	ldr	r3, [r7, #8]
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d00f      	beq.n	800bd88 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bd68:	68bb      	ldr	r3, [r7, #8]
 800bd6a:	015a      	lsls	r2, r3, #5
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	4413      	add	r3, r2
 800bd70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	0151      	lsls	r1, r2, #5
 800bd7a:	68fa      	ldr	r2, [r7, #12]
 800bd7c:	440a      	add	r2, r1
 800bd7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bd86:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	015a      	lsls	r2, r3, #5
 800bd8c:	68fb      	ldr	r3, [r7, #12]
 800bd8e:	4413      	add	r3, r2
 800bd90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	0151      	lsls	r1, r2, #5
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	440a      	add	r2, r1
 800bd9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bda2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bda6:	6013      	str	r3, [r2, #0]
 800bda8:	e02b      	b.n	800be02 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bdaa:	68bb      	ldr	r3, [r7, #8]
 800bdac:	015a      	lsls	r2, r3, #5
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	4413      	add	r3, r2
 800bdb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	db12      	blt.n	800bde2 <USB_EPSetStall+0xae>
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d00f      	beq.n	800bde2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bdc2:	68bb      	ldr	r3, [r7, #8]
 800bdc4:	015a      	lsls	r2, r3, #5
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	4413      	add	r3, r2
 800bdca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	68ba      	ldr	r2, [r7, #8]
 800bdd2:	0151      	lsls	r1, r2, #5
 800bdd4:	68fa      	ldr	r2, [r7, #12]
 800bdd6:	440a      	add	r2, r1
 800bdd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bddc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bde0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	015a      	lsls	r2, r3, #5
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	4413      	add	r3, r2
 800bdea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	68ba      	ldr	r2, [r7, #8]
 800bdf2:	0151      	lsls	r1, r2, #5
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	440a      	add	r2, r1
 800bdf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bdfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800be00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be02:	2300      	movs	r3, #0
}
 800be04:	4618      	mov	r0, r3
 800be06:	3714      	adds	r7, #20
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr

0800be10 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800be10:	b480      	push	{r7}
 800be12:	b085      	sub	sp, #20
 800be14:	af00      	add	r7, sp, #0
 800be16:	6078      	str	r0, [r7, #4]
 800be18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be1e:	683b      	ldr	r3, [r7, #0]
 800be20:	781b      	ldrb	r3, [r3, #0]
 800be22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	785b      	ldrb	r3, [r3, #1]
 800be28:	2b01      	cmp	r3, #1
 800be2a:	d128      	bne.n	800be7e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	015a      	lsls	r2, r3, #5
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	4413      	add	r3, r2
 800be34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	68ba      	ldr	r2, [r7, #8]
 800be3c:	0151      	lsls	r1, r2, #5
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	440a      	add	r2, r1
 800be42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800be4a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	791b      	ldrb	r3, [r3, #4]
 800be50:	2b03      	cmp	r3, #3
 800be52:	d003      	beq.n	800be5c <USB_EPClearStall+0x4c>
 800be54:	683b      	ldr	r3, [r7, #0]
 800be56:	791b      	ldrb	r3, [r3, #4]
 800be58:	2b02      	cmp	r3, #2
 800be5a:	d138      	bne.n	800bece <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800be5c:	68bb      	ldr	r3, [r7, #8]
 800be5e:	015a      	lsls	r2, r3, #5
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	4413      	add	r3, r2
 800be64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	68ba      	ldr	r2, [r7, #8]
 800be6c:	0151      	lsls	r1, r2, #5
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	440a      	add	r2, r1
 800be72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be7a:	6013      	str	r3, [r2, #0]
 800be7c:	e027      	b.n	800bece <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800be7e:	68bb      	ldr	r3, [r7, #8]
 800be80:	015a      	lsls	r2, r3, #5
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	4413      	add	r3, r2
 800be86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	68ba      	ldr	r2, [r7, #8]
 800be8e:	0151      	lsls	r1, r2, #5
 800be90:	68fa      	ldr	r2, [r7, #12]
 800be92:	440a      	add	r2, r1
 800be94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800be9c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	791b      	ldrb	r3, [r3, #4]
 800bea2:	2b03      	cmp	r3, #3
 800bea4:	d003      	beq.n	800beae <USB_EPClearStall+0x9e>
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	791b      	ldrb	r3, [r3, #4]
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d10f      	bne.n	800bece <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	015a      	lsls	r2, r3, #5
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	4413      	add	r3, r2
 800beb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	68ba      	ldr	r2, [r7, #8]
 800bebe:	0151      	lsls	r1, r2, #5
 800bec0:	68fa      	ldr	r2, [r7, #12]
 800bec2:	440a      	add	r2, r1
 800bec4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800becc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bece:	2300      	movs	r3, #0
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3714      	adds	r7, #20
 800bed4:	46bd      	mov	sp, r7
 800bed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beda:	4770      	bx	lr

0800bedc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bedc:	b480      	push	{r7}
 800bede:	b085      	sub	sp, #20
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
 800bee4:	460b      	mov	r3, r1
 800bee6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	68fa      	ldr	r2, [r7, #12]
 800bef6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800befa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800befe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf06:	681a      	ldr	r2, [r3, #0]
 800bf08:	78fb      	ldrb	r3, [r7, #3]
 800bf0a:	011b      	lsls	r3, r3, #4
 800bf0c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bf10:	68f9      	ldr	r1, [r7, #12]
 800bf12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf16:	4313      	orrs	r3, r2
 800bf18:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bf1a:	2300      	movs	r3, #0
}
 800bf1c:	4618      	mov	r0, r3
 800bf1e:	3714      	adds	r7, #20
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr

0800bf28 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bf28:	b480      	push	{r7}
 800bf2a:	b085      	sub	sp, #20
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	68fa      	ldr	r2, [r7, #12]
 800bf3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bf42:	f023 0303 	bic.w	r3, r3, #3
 800bf46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	68fa      	ldr	r2, [r7, #12]
 800bf52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf56:	f023 0302 	bic.w	r3, r3, #2
 800bf5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf5c:	2300      	movs	r3, #0
}
 800bf5e:	4618      	mov	r0, r3
 800bf60:	3714      	adds	r7, #20
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr

0800bf6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bf6a:	b480      	push	{r7}
 800bf6c:	b085      	sub	sp, #20
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68fa      	ldr	r2, [r7, #12]
 800bf80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bf84:	f023 0303 	bic.w	r3, r3, #3
 800bf88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	68fa      	ldr	r2, [r7, #12]
 800bf94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf98:	f043 0302 	orr.w	r3, r3, #2
 800bf9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf9e:	2300      	movs	r3, #0
}
 800bfa0:	4618      	mov	r0, r3
 800bfa2:	3714      	adds	r7, #20
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfaa:	4770      	bx	lr

0800bfac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bfac:	b480      	push	{r7}
 800bfae:	b085      	sub	sp, #20
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	695b      	ldr	r3, [r3, #20]
 800bfb8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	699b      	ldr	r3, [r3, #24]
 800bfbe:	68fa      	ldr	r2, [r7, #12]
 800bfc0:	4013      	ands	r3, r2
 800bfc2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bfc4:	68fb      	ldr	r3, [r7, #12]
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3714      	adds	r7, #20
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd0:	4770      	bx	lr

0800bfd2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bfd2:	b480      	push	{r7}
 800bfd4:	b085      	sub	sp, #20
 800bfd6:	af00      	add	r7, sp, #0
 800bfd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfe4:	699b      	ldr	r3, [r3, #24]
 800bfe6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bfee:	69db      	ldr	r3, [r3, #28]
 800bff0:	68ba      	ldr	r2, [r7, #8]
 800bff2:	4013      	ands	r3, r2
 800bff4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	0c1b      	lsrs	r3, r3, #16
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3714      	adds	r7, #20
 800bffe:	46bd      	mov	sp, r7
 800c000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c004:	4770      	bx	lr

0800c006 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c006:	b480      	push	{r7}
 800c008:	b085      	sub	sp, #20
 800c00a:	af00      	add	r7, sp, #0
 800c00c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c018:	699b      	ldr	r3, [r3, #24]
 800c01a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c022:	69db      	ldr	r3, [r3, #28]
 800c024:	68ba      	ldr	r2, [r7, #8]
 800c026:	4013      	ands	r3, r2
 800c028:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	b29b      	uxth	r3, r3
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3714      	adds	r7, #20
 800c032:	46bd      	mov	sp, r7
 800c034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c038:	4770      	bx	lr

0800c03a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c03a:	b480      	push	{r7}
 800c03c:	b085      	sub	sp, #20
 800c03e:	af00      	add	r7, sp, #0
 800c040:	6078      	str	r0, [r7, #4]
 800c042:	460b      	mov	r3, r1
 800c044:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c04a:	78fb      	ldrb	r3, [r7, #3]
 800c04c:	015a      	lsls	r2, r3, #5
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	4413      	add	r3, r2
 800c052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c056:	689b      	ldr	r3, [r3, #8]
 800c058:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c060:	695b      	ldr	r3, [r3, #20]
 800c062:	68ba      	ldr	r2, [r7, #8]
 800c064:	4013      	ands	r3, r2
 800c066:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c068:	68bb      	ldr	r3, [r7, #8]
}
 800c06a:	4618      	mov	r0, r3
 800c06c:	3714      	adds	r7, #20
 800c06e:	46bd      	mov	sp, r7
 800c070:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c074:	4770      	bx	lr

0800c076 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c076:	b480      	push	{r7}
 800c078:	b087      	sub	sp, #28
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
 800c07e:	460b      	mov	r3, r1
 800c080:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c08c:	691b      	ldr	r3, [r3, #16]
 800c08e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c090:	697b      	ldr	r3, [r7, #20]
 800c092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c098:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c09a:	78fb      	ldrb	r3, [r7, #3]
 800c09c:	f003 030f 	and.w	r3, r3, #15
 800c0a0:	68fa      	ldr	r2, [r7, #12]
 800c0a2:	fa22 f303 	lsr.w	r3, r2, r3
 800c0a6:	01db      	lsls	r3, r3, #7
 800c0a8:	b2db      	uxtb	r3, r3
 800c0aa:	693a      	ldr	r2, [r7, #16]
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c0b0:	78fb      	ldrb	r3, [r7, #3]
 800c0b2:	015a      	lsls	r2, r3, #5
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	4413      	add	r3, r2
 800c0b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0bc:	689b      	ldr	r3, [r3, #8]
 800c0be:	693a      	ldr	r2, [r7, #16]
 800c0c0:	4013      	ands	r3, r2
 800c0c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c0c4:	68bb      	ldr	r3, [r7, #8]
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	371c      	adds	r7, #28
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr

0800c0d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c0d2:	b480      	push	{r7}
 800c0d4:	b083      	sub	sp, #12
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	695b      	ldr	r3, [r3, #20]
 800c0de:	f003 0301 	and.w	r3, r3, #1
}
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	370c      	adds	r7, #12
 800c0e6:	46bd      	mov	sp, r7
 800c0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ec:	4770      	bx	lr

0800c0ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c0ee:	b480      	push	{r7}
 800c0f0:	b085      	sub	sp, #20
 800c0f2:	af00      	add	r7, sp, #0
 800c0f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	68fa      	ldr	r2, [r7, #12]
 800c104:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c108:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800c10c:	f023 0307 	bic.w	r3, r3, #7
 800c110:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c118:	685b      	ldr	r3, [r3, #4]
 800c11a:	68fa      	ldr	r2, [r7, #12]
 800c11c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c124:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c126:	2300      	movs	r3, #0
}
 800c128:	4618      	mov	r0, r3
 800c12a:	3714      	adds	r7, #20
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr

0800c134 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c134:	b480      	push	{r7}
 800c136:	b087      	sub	sp, #28
 800c138:	af00      	add	r7, sp, #0
 800c13a:	60f8      	str	r0, [r7, #12]
 800c13c:	460b      	mov	r3, r1
 800c13e:	607a      	str	r2, [r7, #4]
 800c140:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	333c      	adds	r3, #60	; 0x3c
 800c14a:	3304      	adds	r3, #4
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c150:	693b      	ldr	r3, [r7, #16]
 800c152:	4a26      	ldr	r2, [pc, #152]	; (800c1ec <USB_EP0_OutStart+0xb8>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d90a      	bls.n	800c16e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c158:	697b      	ldr	r3, [r7, #20]
 800c15a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c164:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c168:	d101      	bne.n	800c16e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c16a:	2300      	movs	r3, #0
 800c16c:	e037      	b.n	800c1de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c16e:	697b      	ldr	r3, [r7, #20]
 800c170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c174:	461a      	mov	r2, r3
 800c176:	2300      	movs	r3, #0
 800c178:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c180:	691b      	ldr	r3, [r3, #16]
 800c182:	697a      	ldr	r2, [r7, #20]
 800c184:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c188:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c18c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c18e:	697b      	ldr	r3, [r7, #20]
 800c190:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c194:	691b      	ldr	r3, [r3, #16]
 800c196:	697a      	ldr	r2, [r7, #20]
 800c198:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c19c:	f043 0318 	orr.w	r3, r3, #24
 800c1a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c1a2:	697b      	ldr	r3, [r7, #20]
 800c1a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1a8:	691b      	ldr	r3, [r3, #16]
 800c1aa:	697a      	ldr	r2, [r7, #20]
 800c1ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c1b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c1b6:	7afb      	ldrb	r3, [r7, #11]
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	d10f      	bne.n	800c1dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1c2:	461a      	mov	r2, r3
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	697a      	ldr	r2, [r7, #20]
 800c1d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c1da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c1dc:	2300      	movs	r3, #0
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	371c      	adds	r7, #28
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	4f54300a 	.word	0x4f54300a

0800c1f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b085      	sub	sp, #20
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	3301      	adds	r3, #1
 800c200:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	4a13      	ldr	r2, [pc, #76]	; (800c254 <USB_CoreReset+0x64>)
 800c206:	4293      	cmp	r3, r2
 800c208:	d901      	bls.n	800c20e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c20a:	2303      	movs	r3, #3
 800c20c:	e01b      	b.n	800c246 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	691b      	ldr	r3, [r3, #16]
 800c212:	2b00      	cmp	r3, #0
 800c214:	daf2      	bge.n	800c1fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c216:	2300      	movs	r3, #0
 800c218:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	691b      	ldr	r3, [r3, #16]
 800c21e:	f043 0201 	orr.w	r2, r3, #1
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	3301      	adds	r3, #1
 800c22a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	4a09      	ldr	r2, [pc, #36]	; (800c254 <USB_CoreReset+0x64>)
 800c230:	4293      	cmp	r3, r2
 800c232:	d901      	bls.n	800c238 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c234:	2303      	movs	r3, #3
 800c236:	e006      	b.n	800c246 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	691b      	ldr	r3, [r3, #16]
 800c23c:	f003 0301 	and.w	r3, r3, #1
 800c240:	2b01      	cmp	r3, #1
 800c242:	d0f0      	beq.n	800c226 <USB_CoreReset+0x36>

  return HAL_OK;
 800c244:	2300      	movs	r3, #0
}
 800c246:	4618      	mov	r0, r3
 800c248:	3714      	adds	r7, #20
 800c24a:	46bd      	mov	sp, r7
 800c24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c250:	4770      	bx	lr
 800c252:	bf00      	nop
 800c254:	00030d40 	.word	0x00030d40

0800c258 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c258:	b580      	push	{r7, lr}
 800c25a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c25c:	4904      	ldr	r1, [pc, #16]	; (800c270 <MX_FATFS_Init+0x18>)
 800c25e:	4805      	ldr	r0, [pc, #20]	; (800c274 <MX_FATFS_Init+0x1c>)
 800c260:	f004 fcb2 	bl	8010bc8 <FATFS_LinkDriver>
 800c264:	4603      	mov	r3, r0
 800c266:	461a      	mov	r2, r3
 800c268:	4b03      	ldr	r3, [pc, #12]	; (800c278 <MX_FATFS_Init+0x20>)
 800c26a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c26c:	bf00      	nop
 800c26e:	bd80      	pop	{r7, pc}
 800c270:	20000b14 	.word	0x20000b14
 800c274:	08015810 	.word	0x08015810
 800c278:	20000b10 	.word	0x20000b10

0800c27c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c27c:	b480      	push	{r7}
 800c27e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c280:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c282:	4618      	mov	r0, r3
 800c284:	46bd      	mov	sp, r7
 800c286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c28a:	4770      	bx	lr

0800c28c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b082      	sub	sp, #8
 800c290:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c292:	2300      	movs	r3, #0
 800c294:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c296:	f000 f896 	bl	800c3c6 <BSP_SD_IsDetected>
 800c29a:	4603      	mov	r3, r0
 800c29c:	2b01      	cmp	r3, #1
 800c29e:	d001      	beq.n	800c2a4 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 800c2a0:	2301      	movs	r3, #1
 800c2a2:	e012      	b.n	800c2ca <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800c2a4:	480b      	ldr	r0, [pc, #44]	; (800c2d4 <BSP_SD_Init+0x48>)
 800c2a6:	f7fa fe3d 	bl	8006f24 <HAL_SD_Init>
 800c2aa:	4603      	mov	r3, r0
 800c2ac:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800c2ae:	79fb      	ldrb	r3, [r7, #7]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d109      	bne.n	800c2c8 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 800c2b4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c2b8:	4806      	ldr	r0, [pc, #24]	; (800c2d4 <BSP_SD_Init+0x48>)
 800c2ba:	f7fb fc0b 	bl	8007ad4 <HAL_SD_ConfigWideBusOperation>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d001      	beq.n	800c2c8 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800c2c8:	79fb      	ldrb	r3, [r7, #7]
}
 800c2ca:	4618      	mov	r0, r3
 800c2cc:	3708      	adds	r7, #8
 800c2ce:	46bd      	mov	sp, r7
 800c2d0:	bd80      	pop	{r7, pc}
 800c2d2:	bf00      	nop
 800c2d4:	20000370 	.word	0x20000370

0800c2d8 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800c2d8:	b580      	push	{r7, lr}
 800c2da:	b086      	sub	sp, #24
 800c2dc:	af00      	add	r7, sp, #0
 800c2de:	60f8      	str	r0, [r7, #12]
 800c2e0:	60b9      	str	r1, [r7, #8]
 800c2e2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	68ba      	ldr	r2, [r7, #8]
 800c2ec:	68f9      	ldr	r1, [r7, #12]
 800c2ee:	4806      	ldr	r0, [pc, #24]	; (800c308 <BSP_SD_ReadBlocks_DMA+0x30>)
 800c2f0:	f7fa fec8 	bl	8007084 <HAL_SD_ReadBlocks_DMA>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d001      	beq.n	800c2fe <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c2fa:	2301      	movs	r3, #1
 800c2fc:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c2fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800c300:	4618      	mov	r0, r3
 800c302:	3718      	adds	r7, #24
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	20000370 	.word	0x20000370

0800c30c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b086      	sub	sp, #24
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800c318:	2300      	movs	r3, #0
 800c31a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	68ba      	ldr	r2, [r7, #8]
 800c320:	68f9      	ldr	r1, [r7, #12]
 800c322:	4806      	ldr	r0, [pc, #24]	; (800c33c <BSP_SD_WriteBlocks_DMA+0x30>)
 800c324:	f7fa ff90 	bl	8007248 <HAL_SD_WriteBlocks_DMA>
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d001      	beq.n	800c332 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800c32e:	2301      	movs	r3, #1
 800c330:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c332:	7dfb      	ldrb	r3, [r7, #23]
}
 800c334:	4618      	mov	r0, r3
 800c336:	3718      	adds	r7, #24
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	20000370 	.word	0x20000370

0800c340 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800c344:	4805      	ldr	r0, [pc, #20]	; (800c35c <BSP_SD_GetCardState+0x1c>)
 800c346:	f7fb fc5f 	bl	8007c08 <HAL_SD_GetCardState>
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b04      	cmp	r3, #4
 800c34e:	bf14      	ite	ne
 800c350:	2301      	movne	r3, #1
 800c352:	2300      	moveq	r3, #0
 800c354:	b2db      	uxtb	r3, r3
}
 800c356:	4618      	mov	r0, r3
 800c358:	bd80      	pop	{r7, pc}
 800c35a:	bf00      	nop
 800c35c:	20000370 	.word	0x20000370

0800c360 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 800c368:	6879      	ldr	r1, [r7, #4]
 800c36a:	4803      	ldr	r0, [pc, #12]	; (800c378 <BSP_SD_GetCardInfo+0x18>)
 800c36c:	f7fb fb86 	bl	8007a7c <HAL_SD_GetCardInfo>
}
 800c370:	bf00      	nop
 800c372:	3708      	adds	r7, #8
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	20000370 	.word	0x20000370

0800c37c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b082      	sub	sp, #8
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800c384:	f000 f818 	bl	800c3b8 <BSP_SD_AbortCallback>
}
 800c388:	bf00      	nop
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b082      	sub	sp, #8
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800c398:	f000 f9a8 	bl	800c6ec <BSP_SD_WriteCpltCallback>
}
 800c39c:	bf00      	nop
 800c39e:	3708      	adds	r7, #8
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b082      	sub	sp, #8
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800c3ac:	f000 f9aa 	bl	800c704 <BSP_SD_ReadCpltCallback>
}
 800c3b0:	bf00      	nop
 800c3b2:	3708      	adds	r7, #8
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	bd80      	pop	{r7, pc}

0800c3b8 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800c3b8:	b480      	push	{r7}
 800c3ba:	af00      	add	r7, sp, #0

}
 800c3bc:	bf00      	nop
 800c3be:	46bd      	mov	sp, r7
 800c3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c4:	4770      	bx	lr

0800c3c6 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b082      	sub	sp, #8
 800c3ca:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800c3d0:	f000 f80c 	bl	800c3ec <BSP_PlatformIsDetected>
 800c3d4:	4603      	mov	r3, r0
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d101      	bne.n	800c3de <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800c3de:	79fb      	ldrb	r3, [r7, #7]
 800c3e0:	b2db      	uxtb	r3, r3
}
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	3708      	adds	r7, #8
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	bd80      	pop	{r7, pc}
	...

0800c3ec <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b082      	sub	sp, #8
 800c3f0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800c3f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c3fa:	4806      	ldr	r0, [pc, #24]	; (800c414 <BSP_PlatformIsDetected+0x28>)
 800c3fc:	f7f7 fef6 	bl	80041ec <HAL_GPIO_ReadPin>
 800c400:	4603      	mov	r3, r0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d001      	beq.n	800c40a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800c406:	2300      	movs	r3, #0
 800c408:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800c40a:	79fb      	ldrb	r3, [r7, #7]
}
 800c40c:	4618      	mov	r0, r3
 800c40e:	3708      	adds	r7, #8
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}
 800c414:	40020400 	.word	0x40020400

0800c418 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800c420:	f7f6 fff8 	bl	8003414 <HAL_GetTick>
 800c424:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800c426:	e006      	b.n	800c436 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c428:	f7ff ff8a 	bl	800c340 <BSP_SD_GetCardState>
 800c42c:	4603      	mov	r3, r0
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d101      	bne.n	800c436 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800c432:	2300      	movs	r3, #0
 800c434:	e009      	b.n	800c44a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800c436:	f7f6 ffed 	bl	8003414 <HAL_GetTick>
 800c43a:	4602      	mov	r2, r0
 800c43c:	68fb      	ldr	r3, [r7, #12]
 800c43e:	1ad3      	subs	r3, r2, r3
 800c440:	687a      	ldr	r2, [r7, #4]
 800c442:	429a      	cmp	r2, r3
 800c444:	d8f0      	bhi.n	800c428 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800c446:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800c44a:	4618      	mov	r0, r3
 800c44c:	3710      	adds	r7, #16
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
	...

0800c454 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	4603      	mov	r3, r0
 800c45c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800c45e:	4b0b      	ldr	r3, [pc, #44]	; (800c48c <SD_CheckStatus+0x38>)
 800c460:	2201      	movs	r2, #1
 800c462:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800c464:	f7ff ff6c 	bl	800c340 <BSP_SD_GetCardState>
 800c468:	4603      	mov	r3, r0
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d107      	bne.n	800c47e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800c46e:	4b07      	ldr	r3, [pc, #28]	; (800c48c <SD_CheckStatus+0x38>)
 800c470:	781b      	ldrb	r3, [r3, #0]
 800c472:	b2db      	uxtb	r3, r3
 800c474:	f023 0301 	bic.w	r3, r3, #1
 800c478:	b2da      	uxtb	r2, r3
 800c47a:	4b04      	ldr	r3, [pc, #16]	; (800c48c <SD_CheckStatus+0x38>)
 800c47c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800c47e:	4b03      	ldr	r3, [pc, #12]	; (800c48c <SD_CheckStatus+0x38>)
 800c480:	781b      	ldrb	r3, [r3, #0]
 800c482:	b2db      	uxtb	r3, r3
}
 800c484:	4618      	mov	r0, r3
 800c486:	3708      	adds	r7, #8
 800c488:	46bd      	mov	sp, r7
 800c48a:	bd80      	pop	{r7, pc}
 800c48c:	2000002d 	.word	0x2000002d

0800c490 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b082      	sub	sp, #8
 800c494:	af00      	add	r7, sp, #0
 800c496:	4603      	mov	r3, r0
 800c498:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800c49a:	f7ff fef7 	bl	800c28c <BSP_SD_Init>
 800c49e:	4603      	mov	r3, r0
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d107      	bne.n	800c4b4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800c4a4:	79fb      	ldrb	r3, [r7, #7]
 800c4a6:	4618      	mov	r0, r3
 800c4a8:	f7ff ffd4 	bl	800c454 <SD_CheckStatus>
 800c4ac:	4603      	mov	r3, r0
 800c4ae:	461a      	mov	r2, r3
 800c4b0:	4b04      	ldr	r3, [pc, #16]	; (800c4c4 <SD_initialize+0x34>)
 800c4b2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800c4b4:	4b03      	ldr	r3, [pc, #12]	; (800c4c4 <SD_initialize+0x34>)
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	b2db      	uxtb	r3, r3
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3708      	adds	r7, #8
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	2000002d 	.word	0x2000002d

0800c4c8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b082      	sub	sp, #8
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	4603      	mov	r3, r0
 800c4d0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800c4d2:	79fb      	ldrb	r3, [r7, #7]
 800c4d4:	4618      	mov	r0, r3
 800c4d6:	f7ff ffbd 	bl	800c454 <SD_CheckStatus>
 800c4da:	4603      	mov	r3, r0
}
 800c4dc:	4618      	mov	r0, r3
 800c4de:	3708      	adds	r7, #8
 800c4e0:	46bd      	mov	sp, r7
 800c4e2:	bd80      	pop	{r7, pc}

0800c4e4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b086      	sub	sp, #24
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	60b9      	str	r1, [r7, #8]
 800c4ec:	607a      	str	r2, [r7, #4]
 800c4ee:	603b      	str	r3, [r7, #0]
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c4f8:	f247 5030 	movw	r0, #30000	; 0x7530
 800c4fc:	f7ff ff8c 	bl	800c418 <SD_CheckStatusWithTimeout>
 800c500:	4603      	mov	r3, r0
 800c502:	2b00      	cmp	r3, #0
 800c504:	da01      	bge.n	800c50a <SD_read+0x26>
  {
    return res;
 800c506:	7dfb      	ldrb	r3, [r7, #23]
 800c508:	e03b      	b.n	800c582 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800c50a:	683a      	ldr	r2, [r7, #0]
 800c50c:	6879      	ldr	r1, [r7, #4]
 800c50e:	68b8      	ldr	r0, [r7, #8]
 800c510:	f7ff fee2 	bl	800c2d8 <BSP_SD_ReadBlocks_DMA>
 800c514:	4603      	mov	r3, r0
 800c516:	2b00      	cmp	r3, #0
 800c518:	d132      	bne.n	800c580 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800c51a:	4b1c      	ldr	r3, [pc, #112]	; (800c58c <SD_read+0xa8>)
 800c51c:	2200      	movs	r2, #0
 800c51e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800c520:	f7f6 ff78 	bl	8003414 <HAL_GetTick>
 800c524:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c526:	bf00      	nop
 800c528:	4b18      	ldr	r3, [pc, #96]	; (800c58c <SD_read+0xa8>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d108      	bne.n	800c542 <SD_read+0x5e>
 800c530:	f7f6 ff70 	bl	8003414 <HAL_GetTick>
 800c534:	4602      	mov	r2, r0
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	1ad3      	subs	r3, r2, r3
 800c53a:	f247 522f 	movw	r2, #29999	; 0x752f
 800c53e:	4293      	cmp	r3, r2
 800c540:	d9f2      	bls.n	800c528 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 800c542:	4b12      	ldr	r3, [pc, #72]	; (800c58c <SD_read+0xa8>)
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d102      	bne.n	800c550 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800c54a:	2301      	movs	r3, #1
 800c54c:	75fb      	strb	r3, [r7, #23]
 800c54e:	e017      	b.n	800c580 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800c550:	4b0e      	ldr	r3, [pc, #56]	; (800c58c <SD_read+0xa8>)
 800c552:	2200      	movs	r2, #0
 800c554:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c556:	f7f6 ff5d 	bl	8003414 <HAL_GetTick>
 800c55a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c55c:	e007      	b.n	800c56e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c55e:	f7ff feef 	bl	800c340 <BSP_SD_GetCardState>
 800c562:	4603      	mov	r3, r0
 800c564:	2b00      	cmp	r3, #0
 800c566:	d102      	bne.n	800c56e <SD_read+0x8a>
          {
            res = RES_OK;
 800c568:	2300      	movs	r3, #0
 800c56a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800c56c:	e008      	b.n	800c580 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c56e:	f7f6 ff51 	bl	8003414 <HAL_GetTick>
 800c572:	4602      	mov	r2, r0
 800c574:	693b      	ldr	r3, [r7, #16]
 800c576:	1ad3      	subs	r3, r2, r3
 800c578:	f247 522f 	movw	r2, #29999	; 0x752f
 800c57c:	4293      	cmp	r3, r2
 800c57e:	d9ee      	bls.n	800c55e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800c580:	7dfb      	ldrb	r3, [r7, #23]
}
 800c582:	4618      	mov	r0, r3
 800c584:	3718      	adds	r7, #24
 800c586:	46bd      	mov	sp, r7
 800c588:	bd80      	pop	{r7, pc}
 800c58a:	bf00      	nop
 800c58c:	20000b1c 	.word	0x20000b1c

0800c590 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b086      	sub	sp, #24
 800c594:	af00      	add	r7, sp, #0
 800c596:	60b9      	str	r1, [r7, #8]
 800c598:	607a      	str	r2, [r7, #4]
 800c59a:	603b      	str	r3, [r7, #0]
 800c59c:	4603      	mov	r3, r0
 800c59e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800c5a4:	4b24      	ldr	r3, [pc, #144]	; (800c638 <SD_write+0xa8>)
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800c5aa:	f247 5030 	movw	r0, #30000	; 0x7530
 800c5ae:	f7ff ff33 	bl	800c418 <SD_CheckStatusWithTimeout>
 800c5b2:	4603      	mov	r3, r0
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	da01      	bge.n	800c5bc <SD_write+0x2c>
  {
    return res;
 800c5b8:	7dfb      	ldrb	r3, [r7, #23]
 800c5ba:	e038      	b.n	800c62e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800c5bc:	683a      	ldr	r2, [r7, #0]
 800c5be:	6879      	ldr	r1, [r7, #4]
 800c5c0:	68b8      	ldr	r0, [r7, #8]
 800c5c2:	f7ff fea3 	bl	800c30c <BSP_SD_WriteBlocks_DMA>
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d12f      	bne.n	800c62c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800c5cc:	f7f6 ff22 	bl	8003414 <HAL_GetTick>
 800c5d0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800c5d2:	bf00      	nop
 800c5d4:	4b18      	ldr	r3, [pc, #96]	; (800c638 <SD_write+0xa8>)
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	2b00      	cmp	r3, #0
 800c5da:	d108      	bne.n	800c5ee <SD_write+0x5e>
 800c5dc:	f7f6 ff1a 	bl	8003414 <HAL_GetTick>
 800c5e0:	4602      	mov	r2, r0
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	1ad3      	subs	r3, r2, r3
 800c5e6:	f247 522f 	movw	r2, #29999	; 0x752f
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d9f2      	bls.n	800c5d4 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800c5ee:	4b12      	ldr	r3, [pc, #72]	; (800c638 <SD_write+0xa8>)
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d102      	bne.n	800c5fc <SD_write+0x6c>
      {
        res = RES_ERROR;
 800c5f6:	2301      	movs	r3, #1
 800c5f8:	75fb      	strb	r3, [r7, #23]
 800c5fa:	e017      	b.n	800c62c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800c5fc:	4b0e      	ldr	r3, [pc, #56]	; (800c638 <SD_write+0xa8>)
 800c5fe:	2200      	movs	r2, #0
 800c600:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800c602:	f7f6 ff07 	bl	8003414 <HAL_GetTick>
 800c606:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c608:	e007      	b.n	800c61a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800c60a:	f7ff fe99 	bl	800c340 <BSP_SD_GetCardState>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d102      	bne.n	800c61a <SD_write+0x8a>
          {
            res = RES_OK;
 800c614:	2300      	movs	r3, #0
 800c616:	75fb      	strb	r3, [r7, #23]
            break;
 800c618:	e008      	b.n	800c62c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800c61a:	f7f6 fefb 	bl	8003414 <HAL_GetTick>
 800c61e:	4602      	mov	r2, r0
 800c620:	693b      	ldr	r3, [r7, #16]
 800c622:	1ad3      	subs	r3, r2, r3
 800c624:	f247 522f 	movw	r2, #29999	; 0x752f
 800c628:	4293      	cmp	r3, r2
 800c62a:	d9ee      	bls.n	800c60a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800c62c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c62e:	4618      	mov	r0, r3
 800c630:	3718      	adds	r7, #24
 800c632:	46bd      	mov	sp, r7
 800c634:	bd80      	pop	{r7, pc}
 800c636:	bf00      	nop
 800c638:	20000b18 	.word	0x20000b18

0800c63c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800c63c:	b580      	push	{r7, lr}
 800c63e:	b08c      	sub	sp, #48	; 0x30
 800c640:	af00      	add	r7, sp, #0
 800c642:	4603      	mov	r3, r0
 800c644:	603a      	str	r2, [r7, #0]
 800c646:	71fb      	strb	r3, [r7, #7]
 800c648:	460b      	mov	r3, r1
 800c64a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800c64c:	2301      	movs	r3, #1
 800c64e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800c652:	4b25      	ldr	r3, [pc, #148]	; (800c6e8 <SD_ioctl+0xac>)
 800c654:	781b      	ldrb	r3, [r3, #0]
 800c656:	b2db      	uxtb	r3, r3
 800c658:	f003 0301 	and.w	r3, r3, #1
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d001      	beq.n	800c664 <SD_ioctl+0x28>
 800c660:	2303      	movs	r3, #3
 800c662:	e03c      	b.n	800c6de <SD_ioctl+0xa2>

  switch (cmd)
 800c664:	79bb      	ldrb	r3, [r7, #6]
 800c666:	2b03      	cmp	r3, #3
 800c668:	d834      	bhi.n	800c6d4 <SD_ioctl+0x98>
 800c66a:	a201      	add	r2, pc, #4	; (adr r2, 800c670 <SD_ioctl+0x34>)
 800c66c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c670:	0800c681 	.word	0x0800c681
 800c674:	0800c689 	.word	0x0800c689
 800c678:	0800c6a1 	.word	0x0800c6a1
 800c67c:	0800c6bb 	.word	0x0800c6bb
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800c680:	2300      	movs	r3, #0
 800c682:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c686:	e028      	b.n	800c6da <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800c688:	f107 030c 	add.w	r3, r7, #12
 800c68c:	4618      	mov	r0, r3
 800c68e:	f7ff fe67 	bl	800c360 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800c692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c694:	683b      	ldr	r3, [r7, #0]
 800c696:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c698:	2300      	movs	r3, #0
 800c69a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c69e:	e01c      	b.n	800c6da <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c6a0:	f107 030c 	add.w	r3, r7, #12
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	f7ff fe5b 	bl	800c360 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800c6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6ac:	b29a      	uxth	r2, r3
 800c6ae:	683b      	ldr	r3, [r7, #0]
 800c6b0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800c6b2:	2300      	movs	r3, #0
 800c6b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c6b8:	e00f      	b.n	800c6da <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800c6ba:	f107 030c 	add.w	r3, r7, #12
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7ff fe4e 	bl	800c360 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800c6c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c6:	0a5a      	lsrs	r2, r3, #9
 800c6c8:	683b      	ldr	r3, [r7, #0]
 800c6ca:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800c6d2:	e002      	b.n	800c6da <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800c6d4:	2304      	movs	r3, #4
 800c6d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800c6da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3730      	adds	r7, #48	; 0x30
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	2000002d 	.word	0x2000002d

0800c6ec <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800c6f0:	4b03      	ldr	r3, [pc, #12]	; (800c700 <BSP_SD_WriteCpltCallback+0x14>)
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	601a      	str	r2, [r3, #0]
}
 800c6f6:	bf00      	nop
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fe:	4770      	bx	lr
 800c700:	20000b18 	.word	0x20000b18

0800c704 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800c704:	b480      	push	{r7}
 800c706:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800c708:	4b03      	ldr	r3, [pc, #12]	; (800c718 <BSP_SD_ReadCpltCallback+0x14>)
 800c70a:	2201      	movs	r2, #1
 800c70c:	601a      	str	r2, [r3, #0]
}
 800c70e:	bf00      	nop
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr
 800c718:	20000b1c 	.word	0x20000b1c

0800c71c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c71c:	b580      	push	{r7, lr}
 800c71e:	b084      	sub	sp, #16
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
 800c724:	460b      	mov	r3, r1
 800c726:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c728:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c72c:	f004 ff32 	bl	8011594 <USBD_static_malloc>
 800c730:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	2b00      	cmp	r3, #0
 800c736:	d109      	bne.n	800c74c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	32b0      	adds	r2, #176	; 0xb0
 800c742:	2100      	movs	r1, #0
 800c744:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c748:	2302      	movs	r3, #2
 800c74a:	e0d4      	b.n	800c8f6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c74c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c750:	2100      	movs	r1, #0
 800c752:	68f8      	ldr	r0, [r7, #12]
 800c754:	f005 fc98 	bl	8012088 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	32b0      	adds	r2, #176	; 0xb0
 800c762:	68f9      	ldr	r1, [r7, #12]
 800c764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	32b0      	adds	r2, #176	; 0xb0
 800c772:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	7c1b      	ldrb	r3, [r3, #16]
 800c780:	2b00      	cmp	r3, #0
 800c782:	d138      	bne.n	800c7f6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c784:	4b5e      	ldr	r3, [pc, #376]	; (800c900 <USBD_CDC_Init+0x1e4>)
 800c786:	7819      	ldrb	r1, [r3, #0]
 800c788:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c78c:	2202      	movs	r2, #2
 800c78e:	6878      	ldr	r0, [r7, #4]
 800c790:	f004 fddd 	bl	801134e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c794:	4b5a      	ldr	r3, [pc, #360]	; (800c900 <USBD_CDC_Init+0x1e4>)
 800c796:	781b      	ldrb	r3, [r3, #0]
 800c798:	f003 020f 	and.w	r2, r3, #15
 800c79c:	6879      	ldr	r1, [r7, #4]
 800c79e:	4613      	mov	r3, r2
 800c7a0:	009b      	lsls	r3, r3, #2
 800c7a2:	4413      	add	r3, r2
 800c7a4:	009b      	lsls	r3, r3, #2
 800c7a6:	440b      	add	r3, r1
 800c7a8:	3324      	adds	r3, #36	; 0x24
 800c7aa:	2201      	movs	r2, #1
 800c7ac:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c7ae:	4b55      	ldr	r3, [pc, #340]	; (800c904 <USBD_CDC_Init+0x1e8>)
 800c7b0:	7819      	ldrb	r1, [r3, #0]
 800c7b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c7b6:	2202      	movs	r2, #2
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f004 fdc8 	bl	801134e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c7be:	4b51      	ldr	r3, [pc, #324]	; (800c904 <USBD_CDC_Init+0x1e8>)
 800c7c0:	781b      	ldrb	r3, [r3, #0]
 800c7c2:	f003 020f 	and.w	r2, r3, #15
 800c7c6:	6879      	ldr	r1, [r7, #4]
 800c7c8:	4613      	mov	r3, r2
 800c7ca:	009b      	lsls	r3, r3, #2
 800c7cc:	4413      	add	r3, r2
 800c7ce:	009b      	lsls	r3, r3, #2
 800c7d0:	440b      	add	r3, r1
 800c7d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c7d6:	2201      	movs	r2, #1
 800c7d8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c7da:	4b4b      	ldr	r3, [pc, #300]	; (800c908 <USBD_CDC_Init+0x1ec>)
 800c7dc:	781b      	ldrb	r3, [r3, #0]
 800c7de:	f003 020f 	and.w	r2, r3, #15
 800c7e2:	6879      	ldr	r1, [r7, #4]
 800c7e4:	4613      	mov	r3, r2
 800c7e6:	009b      	lsls	r3, r3, #2
 800c7e8:	4413      	add	r3, r2
 800c7ea:	009b      	lsls	r3, r3, #2
 800c7ec:	440b      	add	r3, r1
 800c7ee:	3326      	adds	r3, #38	; 0x26
 800c7f0:	2210      	movs	r2, #16
 800c7f2:	801a      	strh	r2, [r3, #0]
 800c7f4:	e035      	b.n	800c862 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c7f6:	4b42      	ldr	r3, [pc, #264]	; (800c900 <USBD_CDC_Init+0x1e4>)
 800c7f8:	7819      	ldrb	r1, [r3, #0]
 800c7fa:	2340      	movs	r3, #64	; 0x40
 800c7fc:	2202      	movs	r2, #2
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f004 fda5 	bl	801134e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c804:	4b3e      	ldr	r3, [pc, #248]	; (800c900 <USBD_CDC_Init+0x1e4>)
 800c806:	781b      	ldrb	r3, [r3, #0]
 800c808:	f003 020f 	and.w	r2, r3, #15
 800c80c:	6879      	ldr	r1, [r7, #4]
 800c80e:	4613      	mov	r3, r2
 800c810:	009b      	lsls	r3, r3, #2
 800c812:	4413      	add	r3, r2
 800c814:	009b      	lsls	r3, r3, #2
 800c816:	440b      	add	r3, r1
 800c818:	3324      	adds	r3, #36	; 0x24
 800c81a:	2201      	movs	r2, #1
 800c81c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c81e:	4b39      	ldr	r3, [pc, #228]	; (800c904 <USBD_CDC_Init+0x1e8>)
 800c820:	7819      	ldrb	r1, [r3, #0]
 800c822:	2340      	movs	r3, #64	; 0x40
 800c824:	2202      	movs	r2, #2
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f004 fd91 	bl	801134e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c82c:	4b35      	ldr	r3, [pc, #212]	; (800c904 <USBD_CDC_Init+0x1e8>)
 800c82e:	781b      	ldrb	r3, [r3, #0]
 800c830:	f003 020f 	and.w	r2, r3, #15
 800c834:	6879      	ldr	r1, [r7, #4]
 800c836:	4613      	mov	r3, r2
 800c838:	009b      	lsls	r3, r3, #2
 800c83a:	4413      	add	r3, r2
 800c83c:	009b      	lsls	r3, r3, #2
 800c83e:	440b      	add	r3, r1
 800c840:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c844:	2201      	movs	r2, #1
 800c846:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c848:	4b2f      	ldr	r3, [pc, #188]	; (800c908 <USBD_CDC_Init+0x1ec>)
 800c84a:	781b      	ldrb	r3, [r3, #0]
 800c84c:	f003 020f 	and.w	r2, r3, #15
 800c850:	6879      	ldr	r1, [r7, #4]
 800c852:	4613      	mov	r3, r2
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	4413      	add	r3, r2
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	440b      	add	r3, r1
 800c85c:	3326      	adds	r3, #38	; 0x26
 800c85e:	2210      	movs	r2, #16
 800c860:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c862:	4b29      	ldr	r3, [pc, #164]	; (800c908 <USBD_CDC_Init+0x1ec>)
 800c864:	7819      	ldrb	r1, [r3, #0]
 800c866:	2308      	movs	r3, #8
 800c868:	2203      	movs	r2, #3
 800c86a:	6878      	ldr	r0, [r7, #4]
 800c86c:	f004 fd6f 	bl	801134e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c870:	4b25      	ldr	r3, [pc, #148]	; (800c908 <USBD_CDC_Init+0x1ec>)
 800c872:	781b      	ldrb	r3, [r3, #0]
 800c874:	f003 020f 	and.w	r2, r3, #15
 800c878:	6879      	ldr	r1, [r7, #4]
 800c87a:	4613      	mov	r3, r2
 800c87c:	009b      	lsls	r3, r3, #2
 800c87e:	4413      	add	r3, r2
 800c880:	009b      	lsls	r3, r3, #2
 800c882:	440b      	add	r3, r1
 800c884:	3324      	adds	r3, #36	; 0x24
 800c886:	2201      	movs	r2, #1
 800c888:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	2200      	movs	r2, #0
 800c88e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c898:	687a      	ldr	r2, [r7, #4]
 800c89a:	33b0      	adds	r3, #176	; 0xb0
 800c89c:	009b      	lsls	r3, r3, #2
 800c89e:	4413      	add	r3, r2
 800c8a0:	685b      	ldr	r3, [r3, #4]
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	2200      	movs	r2, #0
 800c8b2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c8bc:	2b00      	cmp	r3, #0
 800c8be:	d101      	bne.n	800c8c4 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c8c0:	2302      	movs	r3, #2
 800c8c2:	e018      	b.n	800c8f6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	7c1b      	ldrb	r3, [r3, #16]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d10a      	bne.n	800c8e2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c8cc:	4b0d      	ldr	r3, [pc, #52]	; (800c904 <USBD_CDC_Init+0x1e8>)
 800c8ce:	7819      	ldrb	r1, [r3, #0]
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c8d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f004 fe26 	bl	801152c <USBD_LL_PrepareReceive>
 800c8e0:	e008      	b.n	800c8f4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c8e2:	4b08      	ldr	r3, [pc, #32]	; (800c904 <USBD_CDC_Init+0x1e8>)
 800c8e4:	7819      	ldrb	r1, [r3, #0]
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c8ec:	2340      	movs	r3, #64	; 0x40
 800c8ee:	6878      	ldr	r0, [r7, #4]
 800c8f0:	f004 fe1c 	bl	801152c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c8f4:	2300      	movs	r3, #0
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3710      	adds	r7, #16
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	200000b7 	.word	0x200000b7
 800c904:	200000b8 	.word	0x200000b8
 800c908:	200000b9 	.word	0x200000b9

0800c90c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b082      	sub	sp, #8
 800c910:	af00      	add	r7, sp, #0
 800c912:	6078      	str	r0, [r7, #4]
 800c914:	460b      	mov	r3, r1
 800c916:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c918:	4b3a      	ldr	r3, [pc, #232]	; (800ca04 <USBD_CDC_DeInit+0xf8>)
 800c91a:	781b      	ldrb	r3, [r3, #0]
 800c91c:	4619      	mov	r1, r3
 800c91e:	6878      	ldr	r0, [r7, #4]
 800c920:	f004 fd3b 	bl	801139a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c924:	4b37      	ldr	r3, [pc, #220]	; (800ca04 <USBD_CDC_DeInit+0xf8>)
 800c926:	781b      	ldrb	r3, [r3, #0]
 800c928:	f003 020f 	and.w	r2, r3, #15
 800c92c:	6879      	ldr	r1, [r7, #4]
 800c92e:	4613      	mov	r3, r2
 800c930:	009b      	lsls	r3, r3, #2
 800c932:	4413      	add	r3, r2
 800c934:	009b      	lsls	r3, r3, #2
 800c936:	440b      	add	r3, r1
 800c938:	3324      	adds	r3, #36	; 0x24
 800c93a:	2200      	movs	r2, #0
 800c93c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c93e:	4b32      	ldr	r3, [pc, #200]	; (800ca08 <USBD_CDC_DeInit+0xfc>)
 800c940:	781b      	ldrb	r3, [r3, #0]
 800c942:	4619      	mov	r1, r3
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	f004 fd28 	bl	801139a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c94a:	4b2f      	ldr	r3, [pc, #188]	; (800ca08 <USBD_CDC_DeInit+0xfc>)
 800c94c:	781b      	ldrb	r3, [r3, #0]
 800c94e:	f003 020f 	and.w	r2, r3, #15
 800c952:	6879      	ldr	r1, [r7, #4]
 800c954:	4613      	mov	r3, r2
 800c956:	009b      	lsls	r3, r3, #2
 800c958:	4413      	add	r3, r2
 800c95a:	009b      	lsls	r3, r3, #2
 800c95c:	440b      	add	r3, r1
 800c95e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c962:	2200      	movs	r2, #0
 800c964:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c966:	4b29      	ldr	r3, [pc, #164]	; (800ca0c <USBD_CDC_DeInit+0x100>)
 800c968:	781b      	ldrb	r3, [r3, #0]
 800c96a:	4619      	mov	r1, r3
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f004 fd14 	bl	801139a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c972:	4b26      	ldr	r3, [pc, #152]	; (800ca0c <USBD_CDC_DeInit+0x100>)
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	f003 020f 	and.w	r2, r3, #15
 800c97a:	6879      	ldr	r1, [r7, #4]
 800c97c:	4613      	mov	r3, r2
 800c97e:	009b      	lsls	r3, r3, #2
 800c980:	4413      	add	r3, r2
 800c982:	009b      	lsls	r3, r3, #2
 800c984:	440b      	add	r3, r1
 800c986:	3324      	adds	r3, #36	; 0x24
 800c988:	2200      	movs	r2, #0
 800c98a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c98c:	4b1f      	ldr	r3, [pc, #124]	; (800ca0c <USBD_CDC_DeInit+0x100>)
 800c98e:	781b      	ldrb	r3, [r3, #0]
 800c990:	f003 020f 	and.w	r2, r3, #15
 800c994:	6879      	ldr	r1, [r7, #4]
 800c996:	4613      	mov	r3, r2
 800c998:	009b      	lsls	r3, r3, #2
 800c99a:	4413      	add	r3, r2
 800c99c:	009b      	lsls	r3, r3, #2
 800c99e:	440b      	add	r3, r1
 800c9a0:	3326      	adds	r3, #38	; 0x26
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	32b0      	adds	r2, #176	; 0xb0
 800c9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d01f      	beq.n	800c9f8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c9be:	687a      	ldr	r2, [r7, #4]
 800c9c0:	33b0      	adds	r3, #176	; 0xb0
 800c9c2:	009b      	lsls	r3, r3, #2
 800c9c4:	4413      	add	r3, r2
 800c9c6:	685b      	ldr	r3, [r3, #4]
 800c9c8:	685b      	ldr	r3, [r3, #4]
 800c9ca:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	32b0      	adds	r2, #176	; 0xb0
 800c9d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9da:	4618      	mov	r0, r3
 800c9dc:	f004 fde8 	bl	80115b0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9e6:	687b      	ldr	r3, [r7, #4]
 800c9e8:	32b0      	adds	r2, #176	; 0xb0
 800c9ea:	2100      	movs	r1, #0
 800c9ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2200      	movs	r2, #0
 800c9f4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c9f8:	2300      	movs	r3, #0
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3708      	adds	r7, #8
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
 800ca02:	bf00      	nop
 800ca04:	200000b7 	.word	0x200000b7
 800ca08:	200000b8 	.word	0x200000b8
 800ca0c:	200000b9 	.word	0x200000b9

0800ca10 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b086      	sub	sp, #24
 800ca14:	af00      	add	r7, sp, #0
 800ca16:	6078      	str	r0, [r7, #4]
 800ca18:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	32b0      	adds	r2, #176	; 0xb0
 800ca24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca28:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca32:	2300      	movs	r3, #0
 800ca34:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d101      	bne.n	800ca40 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ca3c:	2303      	movs	r3, #3
 800ca3e:	e0bf      	b.n	800cbc0 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca40:	683b      	ldr	r3, [r7, #0]
 800ca42:	781b      	ldrb	r3, [r3, #0]
 800ca44:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d050      	beq.n	800caee <USBD_CDC_Setup+0xde>
 800ca4c:	2b20      	cmp	r3, #32
 800ca4e:	f040 80af 	bne.w	800cbb0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	88db      	ldrh	r3, [r3, #6]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d03a      	beq.n	800cad0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	781b      	ldrb	r3, [r3, #0]
 800ca5e:	b25b      	sxtb	r3, r3
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	da1b      	bge.n	800ca9c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ca6a:	687a      	ldr	r2, [r7, #4]
 800ca6c:	33b0      	adds	r3, #176	; 0xb0
 800ca6e:	009b      	lsls	r3, r3, #2
 800ca70:	4413      	add	r3, r2
 800ca72:	685b      	ldr	r3, [r3, #4]
 800ca74:	689b      	ldr	r3, [r3, #8]
 800ca76:	683a      	ldr	r2, [r7, #0]
 800ca78:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ca7a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ca7c:	683a      	ldr	r2, [r7, #0]
 800ca7e:	88d2      	ldrh	r2, [r2, #6]
 800ca80:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	88db      	ldrh	r3, [r3, #6]
 800ca86:	2b07      	cmp	r3, #7
 800ca88:	bf28      	it	cs
 800ca8a:	2307      	movcs	r3, #7
 800ca8c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	89fa      	ldrh	r2, [r7, #14]
 800ca92:	4619      	mov	r1, r3
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f001 fd89 	bl	800e5ac <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ca9a:	e090      	b.n	800cbbe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ca9c:	683b      	ldr	r3, [r7, #0]
 800ca9e:	785a      	ldrb	r2, [r3, #1]
 800caa0:	693b      	ldr	r3, [r7, #16]
 800caa2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	88db      	ldrh	r3, [r3, #6]
 800caaa:	2b3f      	cmp	r3, #63	; 0x3f
 800caac:	d803      	bhi.n	800cab6 <USBD_CDC_Setup+0xa6>
 800caae:	683b      	ldr	r3, [r7, #0]
 800cab0:	88db      	ldrh	r3, [r3, #6]
 800cab2:	b2da      	uxtb	r2, r3
 800cab4:	e000      	b.n	800cab8 <USBD_CDC_Setup+0xa8>
 800cab6:	2240      	movs	r2, #64	; 0x40
 800cab8:	693b      	ldr	r3, [r7, #16]
 800caba:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800cabe:	6939      	ldr	r1, [r7, #16]
 800cac0:	693b      	ldr	r3, [r7, #16]
 800cac2:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800cac6:	461a      	mov	r2, r3
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f001 fd9b 	bl	800e604 <USBD_CtlPrepareRx>
      break;
 800cace:	e076      	b.n	800cbbe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cad6:	687a      	ldr	r2, [r7, #4]
 800cad8:	33b0      	adds	r3, #176	; 0xb0
 800cada:	009b      	lsls	r3, r3, #2
 800cadc:	4413      	add	r3, r2
 800cade:	685b      	ldr	r3, [r3, #4]
 800cae0:	689b      	ldr	r3, [r3, #8]
 800cae2:	683a      	ldr	r2, [r7, #0]
 800cae4:	7850      	ldrb	r0, [r2, #1]
 800cae6:	2200      	movs	r2, #0
 800cae8:	6839      	ldr	r1, [r7, #0]
 800caea:	4798      	blx	r3
      break;
 800caec:	e067      	b.n	800cbbe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800caee:	683b      	ldr	r3, [r7, #0]
 800caf0:	785b      	ldrb	r3, [r3, #1]
 800caf2:	2b0b      	cmp	r3, #11
 800caf4:	d851      	bhi.n	800cb9a <USBD_CDC_Setup+0x18a>
 800caf6:	a201      	add	r2, pc, #4	; (adr r2, 800cafc <USBD_CDC_Setup+0xec>)
 800caf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cafc:	0800cb2d 	.word	0x0800cb2d
 800cb00:	0800cba9 	.word	0x0800cba9
 800cb04:	0800cb9b 	.word	0x0800cb9b
 800cb08:	0800cb9b 	.word	0x0800cb9b
 800cb0c:	0800cb9b 	.word	0x0800cb9b
 800cb10:	0800cb9b 	.word	0x0800cb9b
 800cb14:	0800cb9b 	.word	0x0800cb9b
 800cb18:	0800cb9b 	.word	0x0800cb9b
 800cb1c:	0800cb9b 	.word	0x0800cb9b
 800cb20:	0800cb9b 	.word	0x0800cb9b
 800cb24:	0800cb57 	.word	0x0800cb57
 800cb28:	0800cb81 	.word	0x0800cb81
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb32:	b2db      	uxtb	r3, r3
 800cb34:	2b03      	cmp	r3, #3
 800cb36:	d107      	bne.n	800cb48 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cb38:	f107 030a 	add.w	r3, r7, #10
 800cb3c:	2202      	movs	r2, #2
 800cb3e:	4619      	mov	r1, r3
 800cb40:	6878      	ldr	r0, [r7, #4]
 800cb42:	f001 fd33 	bl	800e5ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cb46:	e032      	b.n	800cbae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cb48:	6839      	ldr	r1, [r7, #0]
 800cb4a:	6878      	ldr	r0, [r7, #4]
 800cb4c:	f001 fcbd 	bl	800e4ca <USBD_CtlError>
            ret = USBD_FAIL;
 800cb50:	2303      	movs	r3, #3
 800cb52:	75fb      	strb	r3, [r7, #23]
          break;
 800cb54:	e02b      	b.n	800cbae <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	2b03      	cmp	r3, #3
 800cb60:	d107      	bne.n	800cb72 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800cb62:	f107 030d 	add.w	r3, r7, #13
 800cb66:	2201      	movs	r2, #1
 800cb68:	4619      	mov	r1, r3
 800cb6a:	6878      	ldr	r0, [r7, #4]
 800cb6c:	f001 fd1e 	bl	800e5ac <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800cb70:	e01d      	b.n	800cbae <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800cb72:	6839      	ldr	r1, [r7, #0]
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f001 fca8 	bl	800e4ca <USBD_CtlError>
            ret = USBD_FAIL;
 800cb7a:	2303      	movs	r3, #3
 800cb7c:	75fb      	strb	r3, [r7, #23]
          break;
 800cb7e:	e016      	b.n	800cbae <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb86:	b2db      	uxtb	r3, r3
 800cb88:	2b03      	cmp	r3, #3
 800cb8a:	d00f      	beq.n	800cbac <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800cb8c:	6839      	ldr	r1, [r7, #0]
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f001 fc9b 	bl	800e4ca <USBD_CtlError>
            ret = USBD_FAIL;
 800cb94:	2303      	movs	r3, #3
 800cb96:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800cb98:	e008      	b.n	800cbac <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800cb9a:	6839      	ldr	r1, [r7, #0]
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f001 fc94 	bl	800e4ca <USBD_CtlError>
          ret = USBD_FAIL;
 800cba2:	2303      	movs	r3, #3
 800cba4:	75fb      	strb	r3, [r7, #23]
          break;
 800cba6:	e002      	b.n	800cbae <USBD_CDC_Setup+0x19e>
          break;
 800cba8:	bf00      	nop
 800cbaa:	e008      	b.n	800cbbe <USBD_CDC_Setup+0x1ae>
          break;
 800cbac:	bf00      	nop
      }
      break;
 800cbae:	e006      	b.n	800cbbe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800cbb0:	6839      	ldr	r1, [r7, #0]
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f001 fc89 	bl	800e4ca <USBD_CtlError>
      ret = USBD_FAIL;
 800cbb8:	2303      	movs	r3, #3
 800cbba:	75fb      	strb	r3, [r7, #23]
      break;
 800cbbc:	bf00      	nop
  }

  return (uint8_t)ret;
 800cbbe:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	3718      	adds	r7, #24
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	bd80      	pop	{r7, pc}

0800cbc8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b084      	sub	sp, #16
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800cbda:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	32b0      	adds	r2, #176	; 0xb0
 800cbe6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d101      	bne.n	800cbf2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800cbee:	2303      	movs	r3, #3
 800cbf0:	e065      	b.n	800ccbe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	32b0      	adds	r2, #176	; 0xb0
 800cbfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc00:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cc02:	78fb      	ldrb	r3, [r7, #3]
 800cc04:	f003 020f 	and.w	r2, r3, #15
 800cc08:	6879      	ldr	r1, [r7, #4]
 800cc0a:	4613      	mov	r3, r2
 800cc0c:	009b      	lsls	r3, r3, #2
 800cc0e:	4413      	add	r3, r2
 800cc10:	009b      	lsls	r3, r3, #2
 800cc12:	440b      	add	r3, r1
 800cc14:	3318      	adds	r3, #24
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d02f      	beq.n	800cc7c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800cc1c:	78fb      	ldrb	r3, [r7, #3]
 800cc1e:	f003 020f 	and.w	r2, r3, #15
 800cc22:	6879      	ldr	r1, [r7, #4]
 800cc24:	4613      	mov	r3, r2
 800cc26:	009b      	lsls	r3, r3, #2
 800cc28:	4413      	add	r3, r2
 800cc2a:	009b      	lsls	r3, r3, #2
 800cc2c:	440b      	add	r3, r1
 800cc2e:	3318      	adds	r3, #24
 800cc30:	681a      	ldr	r2, [r3, #0]
 800cc32:	78fb      	ldrb	r3, [r7, #3]
 800cc34:	f003 010f 	and.w	r1, r3, #15
 800cc38:	68f8      	ldr	r0, [r7, #12]
 800cc3a:	460b      	mov	r3, r1
 800cc3c:	00db      	lsls	r3, r3, #3
 800cc3e:	440b      	add	r3, r1
 800cc40:	009b      	lsls	r3, r3, #2
 800cc42:	4403      	add	r3, r0
 800cc44:	3348      	adds	r3, #72	; 0x48
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	fbb2 f1f3 	udiv	r1, r2, r3
 800cc4c:	fb01 f303 	mul.w	r3, r1, r3
 800cc50:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d112      	bne.n	800cc7c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800cc56:	78fb      	ldrb	r3, [r7, #3]
 800cc58:	f003 020f 	and.w	r2, r3, #15
 800cc5c:	6879      	ldr	r1, [r7, #4]
 800cc5e:	4613      	mov	r3, r2
 800cc60:	009b      	lsls	r3, r3, #2
 800cc62:	4413      	add	r3, r2
 800cc64:	009b      	lsls	r3, r3, #2
 800cc66:	440b      	add	r3, r1
 800cc68:	3318      	adds	r3, #24
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800cc6e:	78f9      	ldrb	r1, [r7, #3]
 800cc70:	2300      	movs	r3, #0
 800cc72:	2200      	movs	r2, #0
 800cc74:	6878      	ldr	r0, [r7, #4]
 800cc76:	f004 fc38 	bl	80114ea <USBD_LL_Transmit>
 800cc7a:	e01f      	b.n	800ccbc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	2200      	movs	r2, #0
 800cc80:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cc8a:	687a      	ldr	r2, [r7, #4]
 800cc8c:	33b0      	adds	r3, #176	; 0xb0
 800cc8e:	009b      	lsls	r3, r3, #2
 800cc90:	4413      	add	r3, r2
 800cc92:	685b      	ldr	r3, [r3, #4]
 800cc94:	691b      	ldr	r3, [r3, #16]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d010      	beq.n	800ccbc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	33b0      	adds	r3, #176	; 0xb0
 800cca4:	009b      	lsls	r3, r3, #2
 800cca6:	4413      	add	r3, r2
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	691b      	ldr	r3, [r3, #16]
 800ccac:	68ba      	ldr	r2, [r7, #8]
 800ccae:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800ccb2:	68ba      	ldr	r2, [r7, #8]
 800ccb4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800ccb8:	78fa      	ldrb	r2, [r7, #3]
 800ccba:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800ccbc:	2300      	movs	r3, #0
}
 800ccbe:	4618      	mov	r0, r3
 800ccc0:	3710      	adds	r7, #16
 800ccc2:	46bd      	mov	sp, r7
 800ccc4:	bd80      	pop	{r7, pc}

0800ccc6 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ccc6:	b580      	push	{r7, lr}
 800ccc8:	b084      	sub	sp, #16
 800ccca:	af00      	add	r7, sp, #0
 800cccc:	6078      	str	r0, [r7, #4]
 800ccce:	460b      	mov	r3, r1
 800ccd0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	32b0      	adds	r2, #176	; 0xb0
 800ccdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cce0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	32b0      	adds	r2, #176	; 0xb0
 800ccec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d101      	bne.n	800ccf8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ccf4:	2303      	movs	r3, #3
 800ccf6:	e01a      	b.n	800cd2e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ccf8:	78fb      	ldrb	r3, [r7, #3]
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f004 fc36 	bl	801156e <USBD_LL_GetRxDataSize>
 800cd02:	4602      	mov	r2, r0
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd10:	687a      	ldr	r2, [r7, #4]
 800cd12:	33b0      	adds	r3, #176	; 0xb0
 800cd14:	009b      	lsls	r3, r3, #2
 800cd16:	4413      	add	r3, r2
 800cd18:	685b      	ldr	r3, [r3, #4]
 800cd1a:	68db      	ldr	r3, [r3, #12]
 800cd1c:	68fa      	ldr	r2, [r7, #12]
 800cd1e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cd22:	68fa      	ldr	r2, [r7, #12]
 800cd24:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cd28:	4611      	mov	r1, r2
 800cd2a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800cd2c:	2300      	movs	r3, #0
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3710      	adds	r7, #16
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}

0800cd36 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800cd36:	b580      	push	{r7, lr}
 800cd38:	b084      	sub	sp, #16
 800cd3a:	af00      	add	r7, sp, #0
 800cd3c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	32b0      	adds	r2, #176	; 0xb0
 800cd48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd4c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cd4e:	68fb      	ldr	r3, [r7, #12]
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d101      	bne.n	800cd58 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800cd54:	2303      	movs	r3, #3
 800cd56:	e025      	b.n	800cda4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd5e:	687a      	ldr	r2, [r7, #4]
 800cd60:	33b0      	adds	r3, #176	; 0xb0
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	4413      	add	r3, r2
 800cd66:	685b      	ldr	r3, [r3, #4]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d01a      	beq.n	800cda2 <USBD_CDC_EP0_RxReady+0x6c>
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cd72:	2bff      	cmp	r3, #255	; 0xff
 800cd74:	d015      	beq.n	800cda2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cd7c:	687a      	ldr	r2, [r7, #4]
 800cd7e:	33b0      	adds	r3, #176	; 0xb0
 800cd80:	009b      	lsls	r3, r3, #2
 800cd82:	4413      	add	r3, r2
 800cd84:	685b      	ldr	r3, [r3, #4]
 800cd86:	689b      	ldr	r3, [r3, #8]
 800cd88:	68fa      	ldr	r2, [r7, #12]
 800cd8a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800cd8e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800cd90:	68fa      	ldr	r2, [r7, #12]
 800cd92:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800cd96:	b292      	uxth	r2, r2
 800cd98:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	22ff      	movs	r2, #255	; 0xff
 800cd9e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800cda2:	2300      	movs	r3, #0
}
 800cda4:	4618      	mov	r0, r3
 800cda6:	3710      	adds	r7, #16
 800cda8:	46bd      	mov	sp, r7
 800cdaa:	bd80      	pop	{r7, pc}

0800cdac <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800cdac:	b580      	push	{r7, lr}
 800cdae:	b086      	sub	sp, #24
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cdb4:	2182      	movs	r1, #130	; 0x82
 800cdb6:	4818      	ldr	r0, [pc, #96]	; (800ce18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cdb8:	f000 fd4f 	bl	800d85a <USBD_GetEpDesc>
 800cdbc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cdbe:	2101      	movs	r1, #1
 800cdc0:	4815      	ldr	r0, [pc, #84]	; (800ce18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cdc2:	f000 fd4a 	bl	800d85a <USBD_GetEpDesc>
 800cdc6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cdc8:	2181      	movs	r1, #129	; 0x81
 800cdca:	4813      	ldr	r0, [pc, #76]	; (800ce18 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800cdcc:	f000 fd45 	bl	800d85a <USBD_GetEpDesc>
 800cdd0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800cdd2:	697b      	ldr	r3, [r7, #20]
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d002      	beq.n	800cdde <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800cdd8:	697b      	ldr	r3, [r7, #20]
 800cdda:	2210      	movs	r2, #16
 800cddc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cdde:	693b      	ldr	r3, [r7, #16]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d006      	beq.n	800cdf2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	2200      	movs	r2, #0
 800cde8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cdec:	711a      	strb	r2, [r3, #4]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cdf2:	68fb      	ldr	r3, [r7, #12]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d006      	beq.n	800ce06 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ce00:	711a      	strb	r2, [r3, #4]
 800ce02:	2200      	movs	r2, #0
 800ce04:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	2243      	movs	r2, #67	; 0x43
 800ce0a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ce0c:	4b02      	ldr	r3, [pc, #8]	; (800ce18 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3718      	adds	r7, #24
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
 800ce16:	bf00      	nop
 800ce18:	20000074 	.word	0x20000074

0800ce1c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b086      	sub	sp, #24
 800ce20:	af00      	add	r7, sp, #0
 800ce22:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ce24:	2182      	movs	r1, #130	; 0x82
 800ce26:	4818      	ldr	r0, [pc, #96]	; (800ce88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ce28:	f000 fd17 	bl	800d85a <USBD_GetEpDesc>
 800ce2c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ce2e:	2101      	movs	r1, #1
 800ce30:	4815      	ldr	r0, [pc, #84]	; (800ce88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ce32:	f000 fd12 	bl	800d85a <USBD_GetEpDesc>
 800ce36:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ce38:	2181      	movs	r1, #129	; 0x81
 800ce3a:	4813      	ldr	r0, [pc, #76]	; (800ce88 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ce3c:	f000 fd0d 	bl	800d85a <USBD_GetEpDesc>
 800ce40:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d002      	beq.n	800ce4e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ce48:	697b      	ldr	r3, [r7, #20]
 800ce4a:	2210      	movs	r2, #16
 800ce4c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ce4e:	693b      	ldr	r3, [r7, #16]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d006      	beq.n	800ce62 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ce54:	693b      	ldr	r3, [r7, #16]
 800ce56:	2200      	movs	r2, #0
 800ce58:	711a      	strb	r2, [r3, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	f042 0202 	orr.w	r2, r2, #2
 800ce60:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d006      	beq.n	800ce76 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2200      	movs	r2, #0
 800ce6c:	711a      	strb	r2, [r3, #4]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f042 0202 	orr.w	r2, r2, #2
 800ce74:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2243      	movs	r2, #67	; 0x43
 800ce7a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ce7c:	4b02      	ldr	r3, [pc, #8]	; (800ce88 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3718      	adds	r7, #24
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	20000074 	.word	0x20000074

0800ce8c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b086      	sub	sp, #24
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ce94:	2182      	movs	r1, #130	; 0x82
 800ce96:	4818      	ldr	r0, [pc, #96]	; (800cef8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ce98:	f000 fcdf 	bl	800d85a <USBD_GetEpDesc>
 800ce9c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ce9e:	2101      	movs	r1, #1
 800cea0:	4815      	ldr	r0, [pc, #84]	; (800cef8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cea2:	f000 fcda 	bl	800d85a <USBD_GetEpDesc>
 800cea6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cea8:	2181      	movs	r1, #129	; 0x81
 800ceaa:	4813      	ldr	r0, [pc, #76]	; (800cef8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ceac:	f000 fcd5 	bl	800d85a <USBD_GetEpDesc>
 800ceb0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ceb2:	697b      	ldr	r3, [r7, #20]
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d002      	beq.n	800cebe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	2210      	movs	r2, #16
 800cebc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cebe:	693b      	ldr	r3, [r7, #16]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d006      	beq.n	800ced2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	2200      	movs	r2, #0
 800cec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cecc:	711a      	strb	r2, [r3, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d006      	beq.n	800cee6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	2200      	movs	r2, #0
 800cedc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cee0:	711a      	strb	r2, [r3, #4]
 800cee2:	2200      	movs	r2, #0
 800cee4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2243      	movs	r2, #67	; 0x43
 800ceea:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ceec:	4b02      	ldr	r3, [pc, #8]	; (800cef8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3718      	adds	r7, #24
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	20000074 	.word	0x20000074

0800cefc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	220a      	movs	r2, #10
 800cf08:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cf0a:	4b03      	ldr	r3, [pc, #12]	; (800cf18 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cf0c:	4618      	mov	r0, r3
 800cf0e:	370c      	adds	r7, #12
 800cf10:	46bd      	mov	sp, r7
 800cf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf16:	4770      	bx	lr
 800cf18:	20000030 	.word	0x20000030

0800cf1c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cf1c:	b480      	push	{r7}
 800cf1e:	b083      	sub	sp, #12
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	6078      	str	r0, [r7, #4]
 800cf24:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cf26:	683b      	ldr	r3, [r7, #0]
 800cf28:	2b00      	cmp	r3, #0
 800cf2a:	d101      	bne.n	800cf30 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cf2c:	2303      	movs	r3, #3
 800cf2e:	e009      	b.n	800cf44 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf36:	687a      	ldr	r2, [r7, #4]
 800cf38:	33b0      	adds	r3, #176	; 0xb0
 800cf3a:	009b      	lsls	r3, r3, #2
 800cf3c:	4413      	add	r3, r2
 800cf3e:	683a      	ldr	r2, [r7, #0]
 800cf40:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cf42:	2300      	movs	r3, #0
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	370c      	adds	r7, #12
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf4e:	4770      	bx	lr

0800cf50 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b087      	sub	sp, #28
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf5c:	68fb      	ldr	r3, [r7, #12]
 800cf5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	32b0      	adds	r2, #176	; 0xb0
 800cf66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf6a:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800cf6c:	697b      	ldr	r3, [r7, #20]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d101      	bne.n	800cf76 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cf72:	2303      	movs	r3, #3
 800cf74:	e008      	b.n	800cf88 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800cf76:	697b      	ldr	r3, [r7, #20]
 800cf78:	68ba      	ldr	r2, [r7, #8]
 800cf7a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cf7e:	697b      	ldr	r3, [r7, #20]
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cf86:	2300      	movs	r3, #0
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	371c      	adds	r7, #28
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cf94:	b480      	push	{r7}
 800cf96:	b085      	sub	sp, #20
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	32b0      	adds	r2, #176	; 0xb0
 800cfa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfac:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d101      	bne.n	800cfb8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cfb4:	2303      	movs	r3, #3
 800cfb6:	e004      	b.n	800cfc2 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cfb8:	68fb      	ldr	r3, [r7, #12]
 800cfba:	683a      	ldr	r2, [r7, #0]
 800cfbc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3714      	adds	r7, #20
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfcc:	4770      	bx	lr
	...

0800cfd0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b084      	sub	sp, #16
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	32b0      	adds	r2, #176	; 0xb0
 800cfe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfe6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800cfe8:	2301      	movs	r3, #1
 800cfea:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	32b0      	adds	r2, #176	; 0xb0
 800cff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d101      	bne.n	800d002 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800cffe:	2303      	movs	r3, #3
 800d000:	e025      	b.n	800d04e <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d11f      	bne.n	800d04c <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	2201      	movs	r2, #1
 800d010:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800d014:	4b10      	ldr	r3, [pc, #64]	; (800d058 <USBD_CDC_TransmitPacket+0x88>)
 800d016:	781b      	ldrb	r3, [r3, #0]
 800d018:	f003 020f 	and.w	r2, r3, #15
 800d01c:	68bb      	ldr	r3, [r7, #8]
 800d01e:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800d022:	6878      	ldr	r0, [r7, #4]
 800d024:	4613      	mov	r3, r2
 800d026:	009b      	lsls	r3, r3, #2
 800d028:	4413      	add	r3, r2
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	4403      	add	r3, r0
 800d02e:	3318      	adds	r3, #24
 800d030:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800d032:	4b09      	ldr	r3, [pc, #36]	; (800d058 <USBD_CDC_TransmitPacket+0x88>)
 800d034:	7819      	ldrb	r1, [r3, #0]
 800d036:	68bb      	ldr	r3, [r7, #8]
 800d038:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800d03c:	68bb      	ldr	r3, [r7, #8]
 800d03e:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f004 fa51 	bl	80114ea <USBD_LL_Transmit>

    ret = USBD_OK;
 800d048:	2300      	movs	r3, #0
 800d04a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800d04c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d04e:	4618      	mov	r0, r3
 800d050:	3710      	adds	r7, #16
 800d052:	46bd      	mov	sp, r7
 800d054:	bd80      	pop	{r7, pc}
 800d056:	bf00      	nop
 800d058:	200000b7 	.word	0x200000b7

0800d05c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d05c:	b580      	push	{r7, lr}
 800d05e:	b084      	sub	sp, #16
 800d060:	af00      	add	r7, sp, #0
 800d062:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	32b0      	adds	r2, #176	; 0xb0
 800d06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d072:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	32b0      	adds	r2, #176	; 0xb0
 800d07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d101      	bne.n	800d08a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d086:	2303      	movs	r3, #3
 800d088:	e018      	b.n	800d0bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	7c1b      	ldrb	r3, [r3, #16]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d10a      	bne.n	800d0a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d092:	4b0c      	ldr	r3, [pc, #48]	; (800d0c4 <USBD_CDC_ReceivePacket+0x68>)
 800d094:	7819      	ldrb	r1, [r3, #0]
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d09c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f004 fa43 	bl	801152c <USBD_LL_PrepareReceive>
 800d0a6:	e008      	b.n	800d0ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d0a8:	4b06      	ldr	r3, [pc, #24]	; (800d0c4 <USBD_CDC_ReceivePacket+0x68>)
 800d0aa:	7819      	ldrb	r1, [r3, #0]
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d0b2:	2340      	movs	r3, #64	; 0x40
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f004 fa39 	bl	801152c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d0ba:	2300      	movs	r3, #0
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	3710      	adds	r7, #16
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	bd80      	pop	{r7, pc}
 800d0c4:	200000b8 	.word	0x200000b8

0800d0c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d0c8:	b580      	push	{r7, lr}
 800d0ca:	b086      	sub	sp, #24
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	60f8      	str	r0, [r7, #12]
 800d0d0:	60b9      	str	r1, [r7, #8]
 800d0d2:	4613      	mov	r3, r2
 800d0d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d0d6:	68fb      	ldr	r3, [r7, #12]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d101      	bne.n	800d0e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d0dc:	2303      	movs	r3, #3
 800d0de:	e01f      	b.n	800d120 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	2200      	movs	r2, #0
 800d0e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d0f8:	68bb      	ldr	r3, [r7, #8]
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d003      	beq.n	800d106 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	68ba      	ldr	r2, [r7, #8]
 800d102:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2201      	movs	r2, #1
 800d10a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	79fa      	ldrb	r2, [r7, #7]
 800d112:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d114:	68f8      	ldr	r0, [r7, #12]
 800d116:	f004 f8b3 	bl	8011280 <USBD_LL_Init>
 800d11a:	4603      	mov	r3, r0
 800d11c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d11e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d120:	4618      	mov	r0, r3
 800d122:	3718      	adds	r7, #24
 800d124:	46bd      	mov	sp, r7
 800d126:	bd80      	pop	{r7, pc}

0800d128 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b084      	sub	sp, #16
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
 800d130:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d132:	2300      	movs	r3, #0
 800d134:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d136:	683b      	ldr	r3, [r7, #0]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	d101      	bne.n	800d140 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d13c:	2303      	movs	r3, #3
 800d13e:	e025      	b.n	800d18c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	683a      	ldr	r2, [r7, #0]
 800d144:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	32ae      	adds	r2, #174	; 0xae
 800d152:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d00f      	beq.n	800d17c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	32ae      	adds	r2, #174	; 0xae
 800d166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d16c:	f107 020e 	add.w	r2, r7, #14
 800d170:	4610      	mov	r0, r2
 800d172:	4798      	blx	r3
 800d174:	4602      	mov	r2, r0
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d17c:	687b      	ldr	r3, [r7, #4]
 800d17e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d182:	1c5a      	adds	r2, r3, #1
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d18a:	2300      	movs	r3, #0
}
 800d18c:	4618      	mov	r0, r3
 800d18e:	3710      	adds	r7, #16
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b082      	sub	sp, #8
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f004 f8bb 	bl	8011318 <USBD_LL_Start>
 800d1a2:	4603      	mov	r3, r0
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3708      	adds	r7, #8
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b083      	sub	sp, #12
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d1b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	370c      	adds	r7, #12
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c0:	4770      	bx	lr

0800d1c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d1c2:	b580      	push	{r7, lr}
 800d1c4:	b084      	sub	sp, #16
 800d1c6:	af00      	add	r7, sp, #0
 800d1c8:	6078      	str	r0, [r7, #4]
 800d1ca:	460b      	mov	r3, r1
 800d1cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1ce:	2300      	movs	r3, #0
 800d1d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d009      	beq.n	800d1f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	78fa      	ldrb	r2, [r7, #3]
 800d1e6:	4611      	mov	r1, r2
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	4798      	blx	r3
 800d1ec:	4603      	mov	r3, r0
 800d1ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d1f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1f2:	4618      	mov	r0, r3
 800d1f4:	3710      	adds	r7, #16
 800d1f6:	46bd      	mov	sp, r7
 800d1f8:	bd80      	pop	{r7, pc}

0800d1fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d1fa:	b580      	push	{r7, lr}
 800d1fc:	b084      	sub	sp, #16
 800d1fe:	af00      	add	r7, sp, #0
 800d200:	6078      	str	r0, [r7, #4]
 800d202:	460b      	mov	r3, r1
 800d204:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d206:	2300      	movs	r3, #0
 800d208:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d210:	685b      	ldr	r3, [r3, #4]
 800d212:	78fa      	ldrb	r2, [r7, #3]
 800d214:	4611      	mov	r1, r2
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	4798      	blx	r3
 800d21a:	4603      	mov	r3, r0
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d001      	beq.n	800d224 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d220:	2303      	movs	r3, #3
 800d222:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d224:	7bfb      	ldrb	r3, [r7, #15]
}
 800d226:	4618      	mov	r0, r3
 800d228:	3710      	adds	r7, #16
 800d22a:	46bd      	mov	sp, r7
 800d22c:	bd80      	pop	{r7, pc}

0800d22e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d22e:	b580      	push	{r7, lr}
 800d230:	b084      	sub	sp, #16
 800d232:	af00      	add	r7, sp, #0
 800d234:	6078      	str	r0, [r7, #4]
 800d236:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d23e:	6839      	ldr	r1, [r7, #0]
 800d240:	4618      	mov	r0, r3
 800d242:	f001 f908 	bl	800e456 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2201      	movs	r2, #1
 800d24a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d24e:	687b      	ldr	r3, [r7, #4]
 800d250:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d254:	461a      	mov	r2, r3
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d262:	f003 031f 	and.w	r3, r3, #31
 800d266:	2b02      	cmp	r3, #2
 800d268:	d01a      	beq.n	800d2a0 <USBD_LL_SetupStage+0x72>
 800d26a:	2b02      	cmp	r3, #2
 800d26c:	d822      	bhi.n	800d2b4 <USBD_LL_SetupStage+0x86>
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d002      	beq.n	800d278 <USBD_LL_SetupStage+0x4a>
 800d272:	2b01      	cmp	r3, #1
 800d274:	d00a      	beq.n	800d28c <USBD_LL_SetupStage+0x5e>
 800d276:	e01d      	b.n	800d2b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d27e:	4619      	mov	r1, r3
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 fb5f 	bl	800d944 <USBD_StdDevReq>
 800d286:	4603      	mov	r3, r0
 800d288:	73fb      	strb	r3, [r7, #15]
      break;
 800d28a:	e020      	b.n	800d2ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d292:	4619      	mov	r1, r3
 800d294:	6878      	ldr	r0, [r7, #4]
 800d296:	f000 fbc7 	bl	800da28 <USBD_StdItfReq>
 800d29a:	4603      	mov	r3, r0
 800d29c:	73fb      	strb	r3, [r7, #15]
      break;
 800d29e:	e016      	b.n	800d2ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d2a6:	4619      	mov	r1, r3
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f000 fc29 	bl	800db00 <USBD_StdEPReq>
 800d2ae:	4603      	mov	r3, r0
 800d2b0:	73fb      	strb	r3, [r7, #15]
      break;
 800d2b2:	e00c      	b.n	800d2ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d2ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d2be:	b2db      	uxtb	r3, r3
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	6878      	ldr	r0, [r7, #4]
 800d2c4:	f004 f888 	bl	80113d8 <USBD_LL_StallEP>
 800d2c8:	4603      	mov	r3, r0
 800d2ca:	73fb      	strb	r3, [r7, #15]
      break;
 800d2cc:	bf00      	nop
  }

  return ret;
 800d2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d0:	4618      	mov	r0, r3
 800d2d2:	3710      	adds	r7, #16
 800d2d4:	46bd      	mov	sp, r7
 800d2d6:	bd80      	pop	{r7, pc}

0800d2d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b086      	sub	sp, #24
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	60f8      	str	r0, [r7, #12]
 800d2e0:	460b      	mov	r3, r1
 800d2e2:	607a      	str	r2, [r7, #4]
 800d2e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d2ea:	7afb      	ldrb	r3, [r7, #11]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d16e      	bne.n	800d3ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d2f0:	68fb      	ldr	r3, [r7, #12]
 800d2f2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d2f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d2f8:	68fb      	ldr	r3, [r7, #12]
 800d2fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d2fe:	2b03      	cmp	r3, #3
 800d300:	f040 8098 	bne.w	800d434 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d304:	693b      	ldr	r3, [r7, #16]
 800d306:	689a      	ldr	r2, [r3, #8]
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	68db      	ldr	r3, [r3, #12]
 800d30c:	429a      	cmp	r2, r3
 800d30e:	d913      	bls.n	800d338 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	689a      	ldr	r2, [r3, #8]
 800d314:	693b      	ldr	r3, [r7, #16]
 800d316:	68db      	ldr	r3, [r3, #12]
 800d318:	1ad2      	subs	r2, r2, r3
 800d31a:	693b      	ldr	r3, [r7, #16]
 800d31c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	68da      	ldr	r2, [r3, #12]
 800d322:	693b      	ldr	r3, [r7, #16]
 800d324:	689b      	ldr	r3, [r3, #8]
 800d326:	4293      	cmp	r3, r2
 800d328:	bf28      	it	cs
 800d32a:	4613      	movcs	r3, r2
 800d32c:	461a      	mov	r2, r3
 800d32e:	6879      	ldr	r1, [r7, #4]
 800d330:	68f8      	ldr	r0, [r7, #12]
 800d332:	f001 f984 	bl	800e63e <USBD_CtlContinueRx>
 800d336:	e07d      	b.n	800d434 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d33e:	f003 031f 	and.w	r3, r3, #31
 800d342:	2b02      	cmp	r3, #2
 800d344:	d014      	beq.n	800d370 <USBD_LL_DataOutStage+0x98>
 800d346:	2b02      	cmp	r3, #2
 800d348:	d81d      	bhi.n	800d386 <USBD_LL_DataOutStage+0xae>
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d002      	beq.n	800d354 <USBD_LL_DataOutStage+0x7c>
 800d34e:	2b01      	cmp	r3, #1
 800d350:	d003      	beq.n	800d35a <USBD_LL_DataOutStage+0x82>
 800d352:	e018      	b.n	800d386 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d354:	2300      	movs	r3, #0
 800d356:	75bb      	strb	r3, [r7, #22]
            break;
 800d358:	e018      	b.n	800d38c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d35a:	68fb      	ldr	r3, [r7, #12]
 800d35c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d360:	b2db      	uxtb	r3, r3
 800d362:	4619      	mov	r1, r3
 800d364:	68f8      	ldr	r0, [r7, #12]
 800d366:	f000 fa5e 	bl	800d826 <USBD_CoreFindIF>
 800d36a:	4603      	mov	r3, r0
 800d36c:	75bb      	strb	r3, [r7, #22]
            break;
 800d36e:	e00d      	b.n	800d38c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d376:	b2db      	uxtb	r3, r3
 800d378:	4619      	mov	r1, r3
 800d37a:	68f8      	ldr	r0, [r7, #12]
 800d37c:	f000 fa60 	bl	800d840 <USBD_CoreFindEP>
 800d380:	4603      	mov	r3, r0
 800d382:	75bb      	strb	r3, [r7, #22]
            break;
 800d384:	e002      	b.n	800d38c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d386:	2300      	movs	r3, #0
 800d388:	75bb      	strb	r3, [r7, #22]
            break;
 800d38a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d38c:	7dbb      	ldrb	r3, [r7, #22]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d119      	bne.n	800d3c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	2b03      	cmp	r3, #3
 800d39c:	d113      	bne.n	800d3c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d39e:	7dba      	ldrb	r2, [r7, #22]
 800d3a0:	68fb      	ldr	r3, [r7, #12]
 800d3a2:	32ae      	adds	r2, #174	; 0xae
 800d3a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3a8:	691b      	ldr	r3, [r3, #16]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00b      	beq.n	800d3c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d3ae:	7dba      	ldrb	r2, [r7, #22]
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d3b6:	7dba      	ldrb	r2, [r7, #22]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	32ae      	adds	r2, #174	; 0xae
 800d3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3c0:	691b      	ldr	r3, [r3, #16]
 800d3c2:	68f8      	ldr	r0, [r7, #12]
 800d3c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d3c6:	68f8      	ldr	r0, [r7, #12]
 800d3c8:	f001 f94a 	bl	800e660 <USBD_CtlSendStatus>
 800d3cc:	e032      	b.n	800d434 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d3ce:	7afb      	ldrb	r3, [r7, #11]
 800d3d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	4619      	mov	r1, r3
 800d3d8:	68f8      	ldr	r0, [r7, #12]
 800d3da:	f000 fa31 	bl	800d840 <USBD_CoreFindEP>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d3e2:	7dbb      	ldrb	r3, [r7, #22]
 800d3e4:	2bff      	cmp	r3, #255	; 0xff
 800d3e6:	d025      	beq.n	800d434 <USBD_LL_DataOutStage+0x15c>
 800d3e8:	7dbb      	ldrb	r3, [r7, #22]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d122      	bne.n	800d434 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3f4:	b2db      	uxtb	r3, r3
 800d3f6:	2b03      	cmp	r3, #3
 800d3f8:	d117      	bne.n	800d42a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d3fa:	7dba      	ldrb	r2, [r7, #22]
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	32ae      	adds	r2, #174	; 0xae
 800d400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d404:	699b      	ldr	r3, [r3, #24]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d00f      	beq.n	800d42a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d40a:	7dba      	ldrb	r2, [r7, #22]
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d412:	7dba      	ldrb	r2, [r7, #22]
 800d414:	68fb      	ldr	r3, [r7, #12]
 800d416:	32ae      	adds	r2, #174	; 0xae
 800d418:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d41c:	699b      	ldr	r3, [r3, #24]
 800d41e:	7afa      	ldrb	r2, [r7, #11]
 800d420:	4611      	mov	r1, r2
 800d422:	68f8      	ldr	r0, [r7, #12]
 800d424:	4798      	blx	r3
 800d426:	4603      	mov	r3, r0
 800d428:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d42a:	7dfb      	ldrb	r3, [r7, #23]
 800d42c:	2b00      	cmp	r3, #0
 800d42e:	d001      	beq.n	800d434 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d430:	7dfb      	ldrb	r3, [r7, #23]
 800d432:	e000      	b.n	800d436 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d434:	2300      	movs	r3, #0
}
 800d436:	4618      	mov	r0, r3
 800d438:	3718      	adds	r7, #24
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}

0800d43e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d43e:	b580      	push	{r7, lr}
 800d440:	b086      	sub	sp, #24
 800d442:	af00      	add	r7, sp, #0
 800d444:	60f8      	str	r0, [r7, #12]
 800d446:	460b      	mov	r3, r1
 800d448:	607a      	str	r2, [r7, #4]
 800d44a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d44c:	7afb      	ldrb	r3, [r7, #11]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d16f      	bne.n	800d532 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	3314      	adds	r3, #20
 800d456:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d45e:	2b02      	cmp	r3, #2
 800d460:	d15a      	bne.n	800d518 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d462:	693b      	ldr	r3, [r7, #16]
 800d464:	689a      	ldr	r2, [r3, #8]
 800d466:	693b      	ldr	r3, [r7, #16]
 800d468:	68db      	ldr	r3, [r3, #12]
 800d46a:	429a      	cmp	r2, r3
 800d46c:	d914      	bls.n	800d498 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	689a      	ldr	r2, [r3, #8]
 800d472:	693b      	ldr	r3, [r7, #16]
 800d474:	68db      	ldr	r3, [r3, #12]
 800d476:	1ad2      	subs	r2, r2, r3
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d47c:	693b      	ldr	r3, [r7, #16]
 800d47e:	689b      	ldr	r3, [r3, #8]
 800d480:	461a      	mov	r2, r3
 800d482:	6879      	ldr	r1, [r7, #4]
 800d484:	68f8      	ldr	r0, [r7, #12]
 800d486:	f001 f8ac 	bl	800e5e2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d48a:	2300      	movs	r3, #0
 800d48c:	2200      	movs	r2, #0
 800d48e:	2100      	movs	r1, #0
 800d490:	68f8      	ldr	r0, [r7, #12]
 800d492:	f004 f84b 	bl	801152c <USBD_LL_PrepareReceive>
 800d496:	e03f      	b.n	800d518 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d498:	693b      	ldr	r3, [r7, #16]
 800d49a:	68da      	ldr	r2, [r3, #12]
 800d49c:	693b      	ldr	r3, [r7, #16]
 800d49e:	689b      	ldr	r3, [r3, #8]
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	d11c      	bne.n	800d4de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d4a4:	693b      	ldr	r3, [r7, #16]
 800d4a6:	685a      	ldr	r2, [r3, #4]
 800d4a8:	693b      	ldr	r3, [r7, #16]
 800d4aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d316      	bcc.n	800d4de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d4b0:	693b      	ldr	r3, [r7, #16]
 800d4b2:	685a      	ldr	r2, [r3, #4]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d4ba:	429a      	cmp	r2, r3
 800d4bc:	d20f      	bcs.n	800d4de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d4be:	2200      	movs	r2, #0
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	68f8      	ldr	r0, [r7, #12]
 800d4c4:	f001 f88d 	bl	800e5e2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	2200      	movs	r2, #0
 800d4cc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d4d0:	2300      	movs	r3, #0
 800d4d2:	2200      	movs	r2, #0
 800d4d4:	2100      	movs	r1, #0
 800d4d6:	68f8      	ldr	r0, [r7, #12]
 800d4d8:	f004 f828 	bl	801152c <USBD_LL_PrepareReceive>
 800d4dc:	e01c      	b.n	800d518 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d4e4:	b2db      	uxtb	r3, r3
 800d4e6:	2b03      	cmp	r3, #3
 800d4e8:	d10f      	bne.n	800d50a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d4ea:	68fb      	ldr	r3, [r7, #12]
 800d4ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d4f0:	68db      	ldr	r3, [r3, #12]
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d009      	beq.n	800d50a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	2200      	movs	r2, #0
 800d4fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d504:	68db      	ldr	r3, [r3, #12]
 800d506:	68f8      	ldr	r0, [r7, #12]
 800d508:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d50a:	2180      	movs	r1, #128	; 0x80
 800d50c:	68f8      	ldr	r0, [r7, #12]
 800d50e:	f003 ff63 	bl	80113d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d512:	68f8      	ldr	r0, [r7, #12]
 800d514:	f001 f8b7 	bl	800e686 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d03a      	beq.n	800d598 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d522:	68f8      	ldr	r0, [r7, #12]
 800d524:	f7ff fe42 	bl	800d1ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	2200      	movs	r2, #0
 800d52c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d530:	e032      	b.n	800d598 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d532:	7afb      	ldrb	r3, [r7, #11]
 800d534:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d538:	b2db      	uxtb	r3, r3
 800d53a:	4619      	mov	r1, r3
 800d53c:	68f8      	ldr	r0, [r7, #12]
 800d53e:	f000 f97f 	bl	800d840 <USBD_CoreFindEP>
 800d542:	4603      	mov	r3, r0
 800d544:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d546:	7dfb      	ldrb	r3, [r7, #23]
 800d548:	2bff      	cmp	r3, #255	; 0xff
 800d54a:	d025      	beq.n	800d598 <USBD_LL_DataInStage+0x15a>
 800d54c:	7dfb      	ldrb	r3, [r7, #23]
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d122      	bne.n	800d598 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d558:	b2db      	uxtb	r3, r3
 800d55a:	2b03      	cmp	r3, #3
 800d55c:	d11c      	bne.n	800d598 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d55e:	7dfa      	ldrb	r2, [r7, #23]
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	32ae      	adds	r2, #174	; 0xae
 800d564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d568:	695b      	ldr	r3, [r3, #20]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d014      	beq.n	800d598 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d56e:	7dfa      	ldrb	r2, [r7, #23]
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d576:	7dfa      	ldrb	r2, [r7, #23]
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	32ae      	adds	r2, #174	; 0xae
 800d57c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d580:	695b      	ldr	r3, [r3, #20]
 800d582:	7afa      	ldrb	r2, [r7, #11]
 800d584:	4611      	mov	r1, r2
 800d586:	68f8      	ldr	r0, [r7, #12]
 800d588:	4798      	blx	r3
 800d58a:	4603      	mov	r3, r0
 800d58c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d58e:	7dbb      	ldrb	r3, [r7, #22]
 800d590:	2b00      	cmp	r3, #0
 800d592:	d001      	beq.n	800d598 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d594:	7dbb      	ldrb	r3, [r7, #22]
 800d596:	e000      	b.n	800d59a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d598:	2300      	movs	r3, #0
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	3718      	adds	r7, #24
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd80      	pop	{r7, pc}

0800d5a2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d5a2:	b580      	push	{r7, lr}
 800d5a4:	b084      	sub	sp, #16
 800d5a6:	af00      	add	r7, sp, #0
 800d5a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d5aa:	2300      	movs	r3, #0
 800d5ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	2201      	movs	r2, #1
 800d5b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	2200      	movs	r2, #0
 800d5c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	2200      	movs	r2, #0
 800d5c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d014      	beq.n	800d608 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5e4:	685b      	ldr	r3, [r3, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d00e      	beq.n	800d608 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d5f0:	685b      	ldr	r3, [r3, #4]
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	6852      	ldr	r2, [r2, #4]
 800d5f6:	b2d2      	uxtb	r2, r2
 800d5f8:	4611      	mov	r1, r2
 800d5fa:	6878      	ldr	r0, [r7, #4]
 800d5fc:	4798      	blx	r3
 800d5fe:	4603      	mov	r3, r0
 800d600:	2b00      	cmp	r3, #0
 800d602:	d001      	beq.n	800d608 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d604:	2303      	movs	r3, #3
 800d606:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d608:	2340      	movs	r3, #64	; 0x40
 800d60a:	2200      	movs	r2, #0
 800d60c:	2100      	movs	r1, #0
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f003 fe9d 	bl	801134e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	2201      	movs	r2, #1
 800d618:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	2240      	movs	r2, #64	; 0x40
 800d620:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d624:	2340      	movs	r3, #64	; 0x40
 800d626:	2200      	movs	r2, #0
 800d628:	2180      	movs	r1, #128	; 0x80
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f003 fe8f 	bl	801134e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	2201      	movs	r2, #1
 800d634:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	2240      	movs	r2, #64	; 0x40
 800d63a:	621a      	str	r2, [r3, #32]

  return ret;
 800d63c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d63e:	4618      	mov	r0, r3
 800d640:	3710      	adds	r7, #16
 800d642:	46bd      	mov	sp, r7
 800d644:	bd80      	pop	{r7, pc}

0800d646 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d646:	b480      	push	{r7}
 800d648:	b083      	sub	sp, #12
 800d64a:	af00      	add	r7, sp, #0
 800d64c:	6078      	str	r0, [r7, #4]
 800d64e:	460b      	mov	r3, r1
 800d650:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	78fa      	ldrb	r2, [r7, #3]
 800d656:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d658:	2300      	movs	r3, #0
}
 800d65a:	4618      	mov	r0, r3
 800d65c:	370c      	adds	r7, #12
 800d65e:	46bd      	mov	sp, r7
 800d660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d664:	4770      	bx	lr

0800d666 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d666:	b480      	push	{r7}
 800d668:	b083      	sub	sp, #12
 800d66a:	af00      	add	r7, sp, #0
 800d66c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d674:	b2da      	uxtb	r2, r3
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	2204      	movs	r2, #4
 800d680:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d684:	2300      	movs	r3, #0
}
 800d686:	4618      	mov	r0, r3
 800d688:	370c      	adds	r7, #12
 800d68a:	46bd      	mov	sp, r7
 800d68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d690:	4770      	bx	lr

0800d692 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d692:	b480      	push	{r7}
 800d694:	b083      	sub	sp, #12
 800d696:	af00      	add	r7, sp, #0
 800d698:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	2b04      	cmp	r3, #4
 800d6a4:	d106      	bne.n	800d6b4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d6ac:	b2da      	uxtb	r2, r3
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d6b4:	2300      	movs	r3, #0
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	370c      	adds	r7, #12
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c0:	4770      	bx	lr

0800d6c2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d6c2:	b580      	push	{r7, lr}
 800d6c4:	b082      	sub	sp, #8
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d6d0:	b2db      	uxtb	r3, r3
 800d6d2:	2b03      	cmp	r3, #3
 800d6d4:	d110      	bne.n	800d6f8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d00b      	beq.n	800d6f8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6e6:	69db      	ldr	r3, [r3, #28]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d005      	beq.n	800d6f8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6f2:	69db      	ldr	r3, [r3, #28]
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d6f8:	2300      	movs	r3, #0
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3708      	adds	r7, #8
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}

0800d702 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d702:	b580      	push	{r7, lr}
 800d704:	b082      	sub	sp, #8
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
 800d70a:	460b      	mov	r3, r1
 800d70c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	32ae      	adds	r2, #174	; 0xae
 800d718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d101      	bne.n	800d724 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d720:	2303      	movs	r3, #3
 800d722:	e01c      	b.n	800d75e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d72a:	b2db      	uxtb	r3, r3
 800d72c:	2b03      	cmp	r3, #3
 800d72e:	d115      	bne.n	800d75c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	32ae      	adds	r2, #174	; 0xae
 800d73a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d73e:	6a1b      	ldr	r3, [r3, #32]
 800d740:	2b00      	cmp	r3, #0
 800d742:	d00b      	beq.n	800d75c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	32ae      	adds	r2, #174	; 0xae
 800d74e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d752:	6a1b      	ldr	r3, [r3, #32]
 800d754:	78fa      	ldrb	r2, [r7, #3]
 800d756:	4611      	mov	r1, r2
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d75c:	2300      	movs	r3, #0
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3708      	adds	r7, #8
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d766:	b580      	push	{r7, lr}
 800d768:	b082      	sub	sp, #8
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	6078      	str	r0, [r7, #4]
 800d76e:	460b      	mov	r3, r1
 800d770:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	32ae      	adds	r2, #174	; 0xae
 800d77c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d101      	bne.n	800d788 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d784:	2303      	movs	r3, #3
 800d786:	e01c      	b.n	800d7c2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d78e:	b2db      	uxtb	r3, r3
 800d790:	2b03      	cmp	r3, #3
 800d792:	d115      	bne.n	800d7c0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	32ae      	adds	r2, #174	; 0xae
 800d79e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d00b      	beq.n	800d7c0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	32ae      	adds	r2, #174	; 0xae
 800d7b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d7b8:	78fa      	ldrb	r2, [r7, #3]
 800d7ba:	4611      	mov	r1, r2
 800d7bc:	6878      	ldr	r0, [r7, #4]
 800d7be:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d7c0:	2300      	movs	r3, #0
}
 800d7c2:	4618      	mov	r0, r3
 800d7c4:	3708      	adds	r7, #8
 800d7c6:	46bd      	mov	sp, r7
 800d7c8:	bd80      	pop	{r7, pc}

0800d7ca <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d7ca:	b480      	push	{r7}
 800d7cc:	b083      	sub	sp, #12
 800d7ce:	af00      	add	r7, sp, #0
 800d7d0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d7d2:	2300      	movs	r3, #0
}
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	370c      	adds	r7, #12
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7de:	4770      	bx	lr

0800d7e0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b084      	sub	sp, #16
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d7e8:	2300      	movs	r3, #0
 800d7ea:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d00e      	beq.n	800d81c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	687a      	ldr	r2, [r7, #4]
 800d808:	6852      	ldr	r2, [r2, #4]
 800d80a:	b2d2      	uxtb	r2, r2
 800d80c:	4611      	mov	r1, r2
 800d80e:	6878      	ldr	r0, [r7, #4]
 800d810:	4798      	blx	r3
 800d812:	4603      	mov	r3, r0
 800d814:	2b00      	cmp	r3, #0
 800d816:	d001      	beq.n	800d81c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d818:	2303      	movs	r3, #3
 800d81a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d81c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d81e:	4618      	mov	r0, r3
 800d820:	3710      	adds	r7, #16
 800d822:	46bd      	mov	sp, r7
 800d824:	bd80      	pop	{r7, pc}

0800d826 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d826:	b480      	push	{r7}
 800d828:	b083      	sub	sp, #12
 800d82a:	af00      	add	r7, sp, #0
 800d82c:	6078      	str	r0, [r7, #4]
 800d82e:	460b      	mov	r3, r1
 800d830:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d832:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d834:	4618      	mov	r0, r3
 800d836:	370c      	adds	r7, #12
 800d838:	46bd      	mov	sp, r7
 800d83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d83e:	4770      	bx	lr

0800d840 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d840:	b480      	push	{r7}
 800d842:	b083      	sub	sp, #12
 800d844:	af00      	add	r7, sp, #0
 800d846:	6078      	str	r0, [r7, #4]
 800d848:	460b      	mov	r3, r1
 800d84a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d84c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d84e:	4618      	mov	r0, r3
 800d850:	370c      	adds	r7, #12
 800d852:	46bd      	mov	sp, r7
 800d854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d858:	4770      	bx	lr

0800d85a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d85a:	b580      	push	{r7, lr}
 800d85c:	b086      	sub	sp, #24
 800d85e:	af00      	add	r7, sp, #0
 800d860:	6078      	str	r0, [r7, #4]
 800d862:	460b      	mov	r3, r1
 800d864:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d86e:	2300      	movs	r3, #0
 800d870:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d872:	68fb      	ldr	r3, [r7, #12]
 800d874:	885b      	ldrh	r3, [r3, #2]
 800d876:	b29a      	uxth	r2, r3
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	b29b      	uxth	r3, r3
 800d87e:	429a      	cmp	r2, r3
 800d880:	d920      	bls.n	800d8c4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	781b      	ldrb	r3, [r3, #0]
 800d886:	b29b      	uxth	r3, r3
 800d888:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d88a:	e013      	b.n	800d8b4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d88c:	f107 030a 	add.w	r3, r7, #10
 800d890:	4619      	mov	r1, r3
 800d892:	6978      	ldr	r0, [r7, #20]
 800d894:	f000 f81b 	bl	800d8ce <USBD_GetNextDesc>
 800d898:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d89a:	697b      	ldr	r3, [r7, #20]
 800d89c:	785b      	ldrb	r3, [r3, #1]
 800d89e:	2b05      	cmp	r3, #5
 800d8a0:	d108      	bne.n	800d8b4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d8a6:	693b      	ldr	r3, [r7, #16]
 800d8a8:	789b      	ldrb	r3, [r3, #2]
 800d8aa:	78fa      	ldrb	r2, [r7, #3]
 800d8ac:	429a      	cmp	r2, r3
 800d8ae:	d008      	beq.n	800d8c2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d8b4:	68fb      	ldr	r3, [r7, #12]
 800d8b6:	885b      	ldrh	r3, [r3, #2]
 800d8b8:	b29a      	uxth	r2, r3
 800d8ba:	897b      	ldrh	r3, [r7, #10]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d8e5      	bhi.n	800d88c <USBD_GetEpDesc+0x32>
 800d8c0:	e000      	b.n	800d8c4 <USBD_GetEpDesc+0x6a>
          break;
 800d8c2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d8c4:	693b      	ldr	r3, [r7, #16]
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3718      	adds	r7, #24
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}

0800d8ce <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d8ce:	b480      	push	{r7}
 800d8d0:	b085      	sub	sp, #20
 800d8d2:	af00      	add	r7, sp, #0
 800d8d4:	6078      	str	r0, [r7, #4]
 800d8d6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	881a      	ldrh	r2, [r3, #0]
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	b29b      	uxth	r3, r3
 800d8e6:	4413      	add	r3, r2
 800d8e8:	b29a      	uxth	r2, r3
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d8ee:	68fb      	ldr	r3, [r7, #12]
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	4413      	add	r3, r2
 800d8f8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d8fa:	68fb      	ldr	r3, [r7, #12]
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3714      	adds	r7, #20
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr

0800d908 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d908:	b480      	push	{r7}
 800d90a:	b087      	sub	sp, #28
 800d90c:	af00      	add	r7, sp, #0
 800d90e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	781b      	ldrb	r3, [r3, #0]
 800d918:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d91a:	697b      	ldr	r3, [r7, #20]
 800d91c:	3301      	adds	r3, #1
 800d91e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d920:	697b      	ldr	r3, [r7, #20]
 800d922:	781b      	ldrb	r3, [r3, #0]
 800d924:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d926:	8a3b      	ldrh	r3, [r7, #16]
 800d928:	021b      	lsls	r3, r3, #8
 800d92a:	b21a      	sxth	r2, r3
 800d92c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d930:	4313      	orrs	r3, r2
 800d932:	b21b      	sxth	r3, r3
 800d934:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d936:	89fb      	ldrh	r3, [r7, #14]
}
 800d938:	4618      	mov	r0, r3
 800d93a:	371c      	adds	r7, #28
 800d93c:	46bd      	mov	sp, r7
 800d93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d942:	4770      	bx	lr

0800d944 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b084      	sub	sp, #16
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
 800d94c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d94e:	2300      	movs	r3, #0
 800d950:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d952:	683b      	ldr	r3, [r7, #0]
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d95a:	2b40      	cmp	r3, #64	; 0x40
 800d95c:	d005      	beq.n	800d96a <USBD_StdDevReq+0x26>
 800d95e:	2b40      	cmp	r3, #64	; 0x40
 800d960:	d857      	bhi.n	800da12 <USBD_StdDevReq+0xce>
 800d962:	2b00      	cmp	r3, #0
 800d964:	d00f      	beq.n	800d986 <USBD_StdDevReq+0x42>
 800d966:	2b20      	cmp	r3, #32
 800d968:	d153      	bne.n	800da12 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	32ae      	adds	r2, #174	; 0xae
 800d974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d978:	689b      	ldr	r3, [r3, #8]
 800d97a:	6839      	ldr	r1, [r7, #0]
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	4798      	blx	r3
 800d980:	4603      	mov	r3, r0
 800d982:	73fb      	strb	r3, [r7, #15]
      break;
 800d984:	e04a      	b.n	800da1c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d986:	683b      	ldr	r3, [r7, #0]
 800d988:	785b      	ldrb	r3, [r3, #1]
 800d98a:	2b09      	cmp	r3, #9
 800d98c:	d83b      	bhi.n	800da06 <USBD_StdDevReq+0xc2>
 800d98e:	a201      	add	r2, pc, #4	; (adr r2, 800d994 <USBD_StdDevReq+0x50>)
 800d990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d994:	0800d9e9 	.word	0x0800d9e9
 800d998:	0800d9fd 	.word	0x0800d9fd
 800d99c:	0800da07 	.word	0x0800da07
 800d9a0:	0800d9f3 	.word	0x0800d9f3
 800d9a4:	0800da07 	.word	0x0800da07
 800d9a8:	0800d9c7 	.word	0x0800d9c7
 800d9ac:	0800d9bd 	.word	0x0800d9bd
 800d9b0:	0800da07 	.word	0x0800da07
 800d9b4:	0800d9df 	.word	0x0800d9df
 800d9b8:	0800d9d1 	.word	0x0800d9d1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d9bc:	6839      	ldr	r1, [r7, #0]
 800d9be:	6878      	ldr	r0, [r7, #4]
 800d9c0:	f000 fa3c 	bl	800de3c <USBD_GetDescriptor>
          break;
 800d9c4:	e024      	b.n	800da10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d9c6:	6839      	ldr	r1, [r7, #0]
 800d9c8:	6878      	ldr	r0, [r7, #4]
 800d9ca:	f000 fba1 	bl	800e110 <USBD_SetAddress>
          break;
 800d9ce:	e01f      	b.n	800da10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d9d0:	6839      	ldr	r1, [r7, #0]
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	f000 fbe0 	bl	800e198 <USBD_SetConfig>
 800d9d8:	4603      	mov	r3, r0
 800d9da:	73fb      	strb	r3, [r7, #15]
          break;
 800d9dc:	e018      	b.n	800da10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d9de:	6839      	ldr	r1, [r7, #0]
 800d9e0:	6878      	ldr	r0, [r7, #4]
 800d9e2:	f000 fc83 	bl	800e2ec <USBD_GetConfig>
          break;
 800d9e6:	e013      	b.n	800da10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d9e8:	6839      	ldr	r1, [r7, #0]
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 fcb4 	bl	800e358 <USBD_GetStatus>
          break;
 800d9f0:	e00e      	b.n	800da10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d9f2:	6839      	ldr	r1, [r7, #0]
 800d9f4:	6878      	ldr	r0, [r7, #4]
 800d9f6:	f000 fce3 	bl	800e3c0 <USBD_SetFeature>
          break;
 800d9fa:	e009      	b.n	800da10 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d9fc:	6839      	ldr	r1, [r7, #0]
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 fd07 	bl	800e412 <USBD_ClrFeature>
          break;
 800da04:	e004      	b.n	800da10 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800da06:	6839      	ldr	r1, [r7, #0]
 800da08:	6878      	ldr	r0, [r7, #4]
 800da0a:	f000 fd5e 	bl	800e4ca <USBD_CtlError>
          break;
 800da0e:	bf00      	nop
      }
      break;
 800da10:	e004      	b.n	800da1c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800da12:	6839      	ldr	r1, [r7, #0]
 800da14:	6878      	ldr	r0, [r7, #4]
 800da16:	f000 fd58 	bl	800e4ca <USBD_CtlError>
      break;
 800da1a:	bf00      	nop
  }

  return ret;
 800da1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3710      	adds	r7, #16
 800da22:	46bd      	mov	sp, r7
 800da24:	bd80      	pop	{r7, pc}
 800da26:	bf00      	nop

0800da28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b084      	sub	sp, #16
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800da32:	2300      	movs	r3, #0
 800da34:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	781b      	ldrb	r3, [r3, #0]
 800da3a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da3e:	2b40      	cmp	r3, #64	; 0x40
 800da40:	d005      	beq.n	800da4e <USBD_StdItfReq+0x26>
 800da42:	2b40      	cmp	r3, #64	; 0x40
 800da44:	d852      	bhi.n	800daec <USBD_StdItfReq+0xc4>
 800da46:	2b00      	cmp	r3, #0
 800da48:	d001      	beq.n	800da4e <USBD_StdItfReq+0x26>
 800da4a:	2b20      	cmp	r3, #32
 800da4c:	d14e      	bne.n	800daec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da54:	b2db      	uxtb	r3, r3
 800da56:	3b01      	subs	r3, #1
 800da58:	2b02      	cmp	r3, #2
 800da5a:	d840      	bhi.n	800dade <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800da5c:	683b      	ldr	r3, [r7, #0]
 800da5e:	889b      	ldrh	r3, [r3, #4]
 800da60:	b2db      	uxtb	r3, r3
 800da62:	2b01      	cmp	r3, #1
 800da64:	d836      	bhi.n	800dad4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	889b      	ldrh	r3, [r3, #4]
 800da6a:	b2db      	uxtb	r3, r3
 800da6c:	4619      	mov	r1, r3
 800da6e:	6878      	ldr	r0, [r7, #4]
 800da70:	f7ff fed9 	bl	800d826 <USBD_CoreFindIF>
 800da74:	4603      	mov	r3, r0
 800da76:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800da78:	7bbb      	ldrb	r3, [r7, #14]
 800da7a:	2bff      	cmp	r3, #255	; 0xff
 800da7c:	d01d      	beq.n	800daba <USBD_StdItfReq+0x92>
 800da7e:	7bbb      	ldrb	r3, [r7, #14]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d11a      	bne.n	800daba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800da84:	7bba      	ldrb	r2, [r7, #14]
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	32ae      	adds	r2, #174	; 0xae
 800da8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da8e:	689b      	ldr	r3, [r3, #8]
 800da90:	2b00      	cmp	r3, #0
 800da92:	d00f      	beq.n	800dab4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800da94:	7bba      	ldrb	r2, [r7, #14]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800da9c:	7bba      	ldrb	r2, [r7, #14]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	32ae      	adds	r2, #174	; 0xae
 800daa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800daa6:	689b      	ldr	r3, [r3, #8]
 800daa8:	6839      	ldr	r1, [r7, #0]
 800daaa:	6878      	ldr	r0, [r7, #4]
 800daac:	4798      	blx	r3
 800daae:	4603      	mov	r3, r0
 800dab0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dab2:	e004      	b.n	800dabe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800dab4:	2303      	movs	r3, #3
 800dab6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800dab8:	e001      	b.n	800dabe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800daba:	2303      	movs	r3, #3
 800dabc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	88db      	ldrh	r3, [r3, #6]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d110      	bne.n	800dae8 <USBD_StdItfReq+0xc0>
 800dac6:	7bfb      	ldrb	r3, [r7, #15]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d10d      	bne.n	800dae8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f000 fdc7 	bl	800e660 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800dad2:	e009      	b.n	800dae8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800dad4:	6839      	ldr	r1, [r7, #0]
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f000 fcf7 	bl	800e4ca <USBD_CtlError>
          break;
 800dadc:	e004      	b.n	800dae8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dade:	6839      	ldr	r1, [r7, #0]
 800dae0:	6878      	ldr	r0, [r7, #4]
 800dae2:	f000 fcf2 	bl	800e4ca <USBD_CtlError>
          break;
 800dae6:	e000      	b.n	800daea <USBD_StdItfReq+0xc2>
          break;
 800dae8:	bf00      	nop
      }
      break;
 800daea:	e004      	b.n	800daf6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800daec:	6839      	ldr	r1, [r7, #0]
 800daee:	6878      	ldr	r0, [r7, #4]
 800daf0:	f000 fceb 	bl	800e4ca <USBD_CtlError>
      break;
 800daf4:	bf00      	nop
  }

  return ret;
 800daf6:	7bfb      	ldrb	r3, [r7, #15]
}
 800daf8:	4618      	mov	r0, r3
 800dafa:	3710      	adds	r7, #16
 800dafc:	46bd      	mov	sp, r7
 800dafe:	bd80      	pop	{r7, pc}

0800db00 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db00:	b580      	push	{r7, lr}
 800db02:	b084      	sub	sp, #16
 800db04:	af00      	add	r7, sp, #0
 800db06:	6078      	str	r0, [r7, #4]
 800db08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800db0a:	2300      	movs	r3, #0
 800db0c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800db0e:	683b      	ldr	r3, [r7, #0]
 800db10:	889b      	ldrh	r3, [r3, #4]
 800db12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	781b      	ldrb	r3, [r3, #0]
 800db18:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800db1c:	2b40      	cmp	r3, #64	; 0x40
 800db1e:	d007      	beq.n	800db30 <USBD_StdEPReq+0x30>
 800db20:	2b40      	cmp	r3, #64	; 0x40
 800db22:	f200 817f 	bhi.w	800de24 <USBD_StdEPReq+0x324>
 800db26:	2b00      	cmp	r3, #0
 800db28:	d02a      	beq.n	800db80 <USBD_StdEPReq+0x80>
 800db2a:	2b20      	cmp	r3, #32
 800db2c:	f040 817a 	bne.w	800de24 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800db30:	7bbb      	ldrb	r3, [r7, #14]
 800db32:	4619      	mov	r1, r3
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f7ff fe83 	bl	800d840 <USBD_CoreFindEP>
 800db3a:	4603      	mov	r3, r0
 800db3c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db3e:	7b7b      	ldrb	r3, [r7, #13]
 800db40:	2bff      	cmp	r3, #255	; 0xff
 800db42:	f000 8174 	beq.w	800de2e <USBD_StdEPReq+0x32e>
 800db46:	7b7b      	ldrb	r3, [r7, #13]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	f040 8170 	bne.w	800de2e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800db4e:	7b7a      	ldrb	r2, [r7, #13]
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800db56:	7b7a      	ldrb	r2, [r7, #13]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	32ae      	adds	r2, #174	; 0xae
 800db5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db60:	689b      	ldr	r3, [r3, #8]
 800db62:	2b00      	cmp	r3, #0
 800db64:	f000 8163 	beq.w	800de2e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800db68:	7b7a      	ldrb	r2, [r7, #13]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	32ae      	adds	r2, #174	; 0xae
 800db6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db72:	689b      	ldr	r3, [r3, #8]
 800db74:	6839      	ldr	r1, [r7, #0]
 800db76:	6878      	ldr	r0, [r7, #4]
 800db78:	4798      	blx	r3
 800db7a:	4603      	mov	r3, r0
 800db7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800db7e:	e156      	b.n	800de2e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800db80:	683b      	ldr	r3, [r7, #0]
 800db82:	785b      	ldrb	r3, [r3, #1]
 800db84:	2b03      	cmp	r3, #3
 800db86:	d008      	beq.n	800db9a <USBD_StdEPReq+0x9a>
 800db88:	2b03      	cmp	r3, #3
 800db8a:	f300 8145 	bgt.w	800de18 <USBD_StdEPReq+0x318>
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f000 809b 	beq.w	800dcca <USBD_StdEPReq+0x1ca>
 800db94:	2b01      	cmp	r3, #1
 800db96:	d03c      	beq.n	800dc12 <USBD_StdEPReq+0x112>
 800db98:	e13e      	b.n	800de18 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dba0:	b2db      	uxtb	r3, r3
 800dba2:	2b02      	cmp	r3, #2
 800dba4:	d002      	beq.n	800dbac <USBD_StdEPReq+0xac>
 800dba6:	2b03      	cmp	r3, #3
 800dba8:	d016      	beq.n	800dbd8 <USBD_StdEPReq+0xd8>
 800dbaa:	e02c      	b.n	800dc06 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dbac:	7bbb      	ldrb	r3, [r7, #14]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d00d      	beq.n	800dbce <USBD_StdEPReq+0xce>
 800dbb2:	7bbb      	ldrb	r3, [r7, #14]
 800dbb4:	2b80      	cmp	r3, #128	; 0x80
 800dbb6:	d00a      	beq.n	800dbce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dbb8:	7bbb      	ldrb	r3, [r7, #14]
 800dbba:	4619      	mov	r1, r3
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	f003 fc0b 	bl	80113d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dbc2:	2180      	movs	r1, #128	; 0x80
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f003 fc07 	bl	80113d8 <USBD_LL_StallEP>
 800dbca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dbcc:	e020      	b.n	800dc10 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800dbce:	6839      	ldr	r1, [r7, #0]
 800dbd0:	6878      	ldr	r0, [r7, #4]
 800dbd2:	f000 fc7a 	bl	800e4ca <USBD_CtlError>
              break;
 800dbd6:	e01b      	b.n	800dc10 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	885b      	ldrh	r3, [r3, #2]
 800dbdc:	2b00      	cmp	r3, #0
 800dbde:	d10e      	bne.n	800dbfe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800dbe0:	7bbb      	ldrb	r3, [r7, #14]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d00b      	beq.n	800dbfe <USBD_StdEPReq+0xfe>
 800dbe6:	7bbb      	ldrb	r3, [r7, #14]
 800dbe8:	2b80      	cmp	r3, #128	; 0x80
 800dbea:	d008      	beq.n	800dbfe <USBD_StdEPReq+0xfe>
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	88db      	ldrh	r3, [r3, #6]
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d104      	bne.n	800dbfe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800dbf4:	7bbb      	ldrb	r3, [r7, #14]
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f003 fbed 	bl	80113d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f000 fd2e 	bl	800e660 <USBD_CtlSendStatus>

              break;
 800dc04:	e004      	b.n	800dc10 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800dc06:	6839      	ldr	r1, [r7, #0]
 800dc08:	6878      	ldr	r0, [r7, #4]
 800dc0a:	f000 fc5e 	bl	800e4ca <USBD_CtlError>
              break;
 800dc0e:	bf00      	nop
          }
          break;
 800dc10:	e107      	b.n	800de22 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc18:	b2db      	uxtb	r3, r3
 800dc1a:	2b02      	cmp	r3, #2
 800dc1c:	d002      	beq.n	800dc24 <USBD_StdEPReq+0x124>
 800dc1e:	2b03      	cmp	r3, #3
 800dc20:	d016      	beq.n	800dc50 <USBD_StdEPReq+0x150>
 800dc22:	e04b      	b.n	800dcbc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dc24:	7bbb      	ldrb	r3, [r7, #14]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d00d      	beq.n	800dc46 <USBD_StdEPReq+0x146>
 800dc2a:	7bbb      	ldrb	r3, [r7, #14]
 800dc2c:	2b80      	cmp	r3, #128	; 0x80
 800dc2e:	d00a      	beq.n	800dc46 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800dc30:	7bbb      	ldrb	r3, [r7, #14]
 800dc32:	4619      	mov	r1, r3
 800dc34:	6878      	ldr	r0, [r7, #4]
 800dc36:	f003 fbcf 	bl	80113d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800dc3a:	2180      	movs	r1, #128	; 0x80
 800dc3c:	6878      	ldr	r0, [r7, #4]
 800dc3e:	f003 fbcb 	bl	80113d8 <USBD_LL_StallEP>
 800dc42:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800dc44:	e040      	b.n	800dcc8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800dc46:	6839      	ldr	r1, [r7, #0]
 800dc48:	6878      	ldr	r0, [r7, #4]
 800dc4a:	f000 fc3e 	bl	800e4ca <USBD_CtlError>
              break;
 800dc4e:	e03b      	b.n	800dcc8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800dc50:	683b      	ldr	r3, [r7, #0]
 800dc52:	885b      	ldrh	r3, [r3, #2]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	d136      	bne.n	800dcc6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800dc58:	7bbb      	ldrb	r3, [r7, #14]
 800dc5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d004      	beq.n	800dc6c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800dc62:	7bbb      	ldrb	r3, [r7, #14]
 800dc64:	4619      	mov	r1, r3
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f003 fbd5 	bl	8011416 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800dc6c:	6878      	ldr	r0, [r7, #4]
 800dc6e:	f000 fcf7 	bl	800e660 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800dc72:	7bbb      	ldrb	r3, [r7, #14]
 800dc74:	4619      	mov	r1, r3
 800dc76:	6878      	ldr	r0, [r7, #4]
 800dc78:	f7ff fde2 	bl	800d840 <USBD_CoreFindEP>
 800dc7c:	4603      	mov	r3, r0
 800dc7e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800dc80:	7b7b      	ldrb	r3, [r7, #13]
 800dc82:	2bff      	cmp	r3, #255	; 0xff
 800dc84:	d01f      	beq.n	800dcc6 <USBD_StdEPReq+0x1c6>
 800dc86:	7b7b      	ldrb	r3, [r7, #13]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d11c      	bne.n	800dcc6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800dc8c:	7b7a      	ldrb	r2, [r7, #13]
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800dc94:	7b7a      	ldrb	r2, [r7, #13]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	32ae      	adds	r2, #174	; 0xae
 800dc9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc9e:	689b      	ldr	r3, [r3, #8]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d010      	beq.n	800dcc6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800dca4:	7b7a      	ldrb	r2, [r7, #13]
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	32ae      	adds	r2, #174	; 0xae
 800dcaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dcae:	689b      	ldr	r3, [r3, #8]
 800dcb0:	6839      	ldr	r1, [r7, #0]
 800dcb2:	6878      	ldr	r0, [r7, #4]
 800dcb4:	4798      	blx	r3
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800dcba:	e004      	b.n	800dcc6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800dcbc:	6839      	ldr	r1, [r7, #0]
 800dcbe:	6878      	ldr	r0, [r7, #4]
 800dcc0:	f000 fc03 	bl	800e4ca <USBD_CtlError>
              break;
 800dcc4:	e000      	b.n	800dcc8 <USBD_StdEPReq+0x1c8>
              break;
 800dcc6:	bf00      	nop
          }
          break;
 800dcc8:	e0ab      	b.n	800de22 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	2b02      	cmp	r3, #2
 800dcd4:	d002      	beq.n	800dcdc <USBD_StdEPReq+0x1dc>
 800dcd6:	2b03      	cmp	r3, #3
 800dcd8:	d032      	beq.n	800dd40 <USBD_StdEPReq+0x240>
 800dcda:	e097      	b.n	800de0c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800dcdc:	7bbb      	ldrb	r3, [r7, #14]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d007      	beq.n	800dcf2 <USBD_StdEPReq+0x1f2>
 800dce2:	7bbb      	ldrb	r3, [r7, #14]
 800dce4:	2b80      	cmp	r3, #128	; 0x80
 800dce6:	d004      	beq.n	800dcf2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800dce8:	6839      	ldr	r1, [r7, #0]
 800dcea:	6878      	ldr	r0, [r7, #4]
 800dcec:	f000 fbed 	bl	800e4ca <USBD_CtlError>
                break;
 800dcf0:	e091      	b.n	800de16 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dcf2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	da0b      	bge.n	800dd12 <USBD_StdEPReq+0x212>
 800dcfa:	7bbb      	ldrb	r3, [r7, #14]
 800dcfc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dd00:	4613      	mov	r3, r2
 800dd02:	009b      	lsls	r3, r3, #2
 800dd04:	4413      	add	r3, r2
 800dd06:	009b      	lsls	r3, r3, #2
 800dd08:	3310      	adds	r3, #16
 800dd0a:	687a      	ldr	r2, [r7, #4]
 800dd0c:	4413      	add	r3, r2
 800dd0e:	3304      	adds	r3, #4
 800dd10:	e00b      	b.n	800dd2a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800dd12:	7bbb      	ldrb	r3, [r7, #14]
 800dd14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd18:	4613      	mov	r3, r2
 800dd1a:	009b      	lsls	r3, r3, #2
 800dd1c:	4413      	add	r3, r2
 800dd1e:	009b      	lsls	r3, r3, #2
 800dd20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800dd24:	687a      	ldr	r2, [r7, #4]
 800dd26:	4413      	add	r3, r2
 800dd28:	3304      	adds	r3, #4
 800dd2a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	2200      	movs	r2, #0
 800dd30:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	2202      	movs	r2, #2
 800dd36:	4619      	mov	r1, r3
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f000 fc37 	bl	800e5ac <USBD_CtlSendData>
              break;
 800dd3e:	e06a      	b.n	800de16 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800dd40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd44:	2b00      	cmp	r3, #0
 800dd46:	da11      	bge.n	800dd6c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800dd48:	7bbb      	ldrb	r3, [r7, #14]
 800dd4a:	f003 020f 	and.w	r2, r3, #15
 800dd4e:	6879      	ldr	r1, [r7, #4]
 800dd50:	4613      	mov	r3, r2
 800dd52:	009b      	lsls	r3, r3, #2
 800dd54:	4413      	add	r3, r2
 800dd56:	009b      	lsls	r3, r3, #2
 800dd58:	440b      	add	r3, r1
 800dd5a:	3324      	adds	r3, #36	; 0x24
 800dd5c:	881b      	ldrh	r3, [r3, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d117      	bne.n	800dd92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dd62:	6839      	ldr	r1, [r7, #0]
 800dd64:	6878      	ldr	r0, [r7, #4]
 800dd66:	f000 fbb0 	bl	800e4ca <USBD_CtlError>
                  break;
 800dd6a:	e054      	b.n	800de16 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800dd6c:	7bbb      	ldrb	r3, [r7, #14]
 800dd6e:	f003 020f 	and.w	r2, r3, #15
 800dd72:	6879      	ldr	r1, [r7, #4]
 800dd74:	4613      	mov	r3, r2
 800dd76:	009b      	lsls	r3, r3, #2
 800dd78:	4413      	add	r3, r2
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	440b      	add	r3, r1
 800dd7e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dd82:	881b      	ldrh	r3, [r3, #0]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d104      	bne.n	800dd92 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800dd88:	6839      	ldr	r1, [r7, #0]
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f000 fb9d 	bl	800e4ca <USBD_CtlError>
                  break;
 800dd90:	e041      	b.n	800de16 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800dd92:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	da0b      	bge.n	800ddb2 <USBD_StdEPReq+0x2b2>
 800dd9a:	7bbb      	ldrb	r3, [r7, #14]
 800dd9c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800dda0:	4613      	mov	r3, r2
 800dda2:	009b      	lsls	r3, r3, #2
 800dda4:	4413      	add	r3, r2
 800dda6:	009b      	lsls	r3, r3, #2
 800dda8:	3310      	adds	r3, #16
 800ddaa:	687a      	ldr	r2, [r7, #4]
 800ddac:	4413      	add	r3, r2
 800ddae:	3304      	adds	r3, #4
 800ddb0:	e00b      	b.n	800ddca <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ddb2:	7bbb      	ldrb	r3, [r7, #14]
 800ddb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ddb8:	4613      	mov	r3, r2
 800ddba:	009b      	lsls	r3, r3, #2
 800ddbc:	4413      	add	r3, r2
 800ddbe:	009b      	lsls	r3, r3, #2
 800ddc0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ddc4:	687a      	ldr	r2, [r7, #4]
 800ddc6:	4413      	add	r3, r2
 800ddc8:	3304      	adds	r3, #4
 800ddca:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800ddcc:	7bbb      	ldrb	r3, [r7, #14]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d002      	beq.n	800ddd8 <USBD_StdEPReq+0x2d8>
 800ddd2:	7bbb      	ldrb	r3, [r7, #14]
 800ddd4:	2b80      	cmp	r3, #128	; 0x80
 800ddd6:	d103      	bne.n	800dde0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800ddd8:	68bb      	ldr	r3, [r7, #8]
 800ddda:	2200      	movs	r2, #0
 800dddc:	601a      	str	r2, [r3, #0]
 800ddde:	e00e      	b.n	800ddfe <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800dde0:	7bbb      	ldrb	r3, [r7, #14]
 800dde2:	4619      	mov	r1, r3
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f003 fb35 	bl	8011454 <USBD_LL_IsStallEP>
 800ddea:	4603      	mov	r3, r0
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d003      	beq.n	800ddf8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	2201      	movs	r2, #1
 800ddf4:	601a      	str	r2, [r3, #0]
 800ddf6:	e002      	b.n	800ddfe <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800ddf8:	68bb      	ldr	r3, [r7, #8]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ddfe:	68bb      	ldr	r3, [r7, #8]
 800de00:	2202      	movs	r2, #2
 800de02:	4619      	mov	r1, r3
 800de04:	6878      	ldr	r0, [r7, #4]
 800de06:	f000 fbd1 	bl	800e5ac <USBD_CtlSendData>
              break;
 800de0a:	e004      	b.n	800de16 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800de0c:	6839      	ldr	r1, [r7, #0]
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f000 fb5b 	bl	800e4ca <USBD_CtlError>
              break;
 800de14:	bf00      	nop
          }
          break;
 800de16:	e004      	b.n	800de22 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800de18:	6839      	ldr	r1, [r7, #0]
 800de1a:	6878      	ldr	r0, [r7, #4]
 800de1c:	f000 fb55 	bl	800e4ca <USBD_CtlError>
          break;
 800de20:	bf00      	nop
      }
      break;
 800de22:	e005      	b.n	800de30 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800de24:	6839      	ldr	r1, [r7, #0]
 800de26:	6878      	ldr	r0, [r7, #4]
 800de28:	f000 fb4f 	bl	800e4ca <USBD_CtlError>
      break;
 800de2c:	e000      	b.n	800de30 <USBD_StdEPReq+0x330>
      break;
 800de2e:	bf00      	nop
  }

  return ret;
 800de30:	7bfb      	ldrb	r3, [r7, #15]
}
 800de32:	4618      	mov	r0, r3
 800de34:	3710      	adds	r7, #16
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}
	...

0800de3c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de3c:	b580      	push	{r7, lr}
 800de3e:	b084      	sub	sp, #16
 800de40:	af00      	add	r7, sp, #0
 800de42:	6078      	str	r0, [r7, #4]
 800de44:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800de46:	2300      	movs	r3, #0
 800de48:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800de4a:	2300      	movs	r3, #0
 800de4c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800de4e:	2300      	movs	r3, #0
 800de50:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800de52:	683b      	ldr	r3, [r7, #0]
 800de54:	885b      	ldrh	r3, [r3, #2]
 800de56:	0a1b      	lsrs	r3, r3, #8
 800de58:	b29b      	uxth	r3, r3
 800de5a:	3b01      	subs	r3, #1
 800de5c:	2b06      	cmp	r3, #6
 800de5e:	f200 8128 	bhi.w	800e0b2 <USBD_GetDescriptor+0x276>
 800de62:	a201      	add	r2, pc, #4	; (adr r2, 800de68 <USBD_GetDescriptor+0x2c>)
 800de64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de68:	0800de85 	.word	0x0800de85
 800de6c:	0800de9d 	.word	0x0800de9d
 800de70:	0800dedd 	.word	0x0800dedd
 800de74:	0800e0b3 	.word	0x0800e0b3
 800de78:	0800e0b3 	.word	0x0800e0b3
 800de7c:	0800e053 	.word	0x0800e053
 800de80:	0800e07f 	.word	0x0800e07f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	687a      	ldr	r2, [r7, #4]
 800de8e:	7c12      	ldrb	r2, [r2, #16]
 800de90:	f107 0108 	add.w	r1, r7, #8
 800de94:	4610      	mov	r0, r2
 800de96:	4798      	blx	r3
 800de98:	60f8      	str	r0, [r7, #12]
      break;
 800de9a:	e112      	b.n	800e0c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	7c1b      	ldrb	r3, [r3, #16]
 800dea0:	2b00      	cmp	r3, #0
 800dea2:	d10d      	bne.n	800dec0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800deaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800deac:	f107 0208 	add.w	r2, r7, #8
 800deb0:	4610      	mov	r0, r2
 800deb2:	4798      	blx	r3
 800deb4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	3301      	adds	r3, #1
 800deba:	2202      	movs	r2, #2
 800debc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800debe:	e100      	b.n	800e0c2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dec8:	f107 0208 	add.w	r2, r7, #8
 800decc:	4610      	mov	r0, r2
 800dece:	4798      	blx	r3
 800ded0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	3301      	adds	r3, #1
 800ded6:	2202      	movs	r2, #2
 800ded8:	701a      	strb	r2, [r3, #0]
      break;
 800deda:	e0f2      	b.n	800e0c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800dedc:	683b      	ldr	r3, [r7, #0]
 800dede:	885b      	ldrh	r3, [r3, #2]
 800dee0:	b2db      	uxtb	r3, r3
 800dee2:	2b05      	cmp	r3, #5
 800dee4:	f200 80ac 	bhi.w	800e040 <USBD_GetDescriptor+0x204>
 800dee8:	a201      	add	r2, pc, #4	; (adr r2, 800def0 <USBD_GetDescriptor+0xb4>)
 800deea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800deee:	bf00      	nop
 800def0:	0800df09 	.word	0x0800df09
 800def4:	0800df3d 	.word	0x0800df3d
 800def8:	0800df71 	.word	0x0800df71
 800defc:	0800dfa5 	.word	0x0800dfa5
 800df00:	0800dfd9 	.word	0x0800dfd9
 800df04:	0800e00d 	.word	0x0800e00d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df0e:	685b      	ldr	r3, [r3, #4]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d00b      	beq.n	800df2c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df1a:	685b      	ldr	r3, [r3, #4]
 800df1c:	687a      	ldr	r2, [r7, #4]
 800df1e:	7c12      	ldrb	r2, [r2, #16]
 800df20:	f107 0108 	add.w	r1, r7, #8
 800df24:	4610      	mov	r0, r2
 800df26:	4798      	blx	r3
 800df28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df2a:	e091      	b.n	800e050 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800df2c:	6839      	ldr	r1, [r7, #0]
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f000 facb 	bl	800e4ca <USBD_CtlError>
            err++;
 800df34:	7afb      	ldrb	r3, [r7, #11]
 800df36:	3301      	adds	r3, #1
 800df38:	72fb      	strb	r3, [r7, #11]
          break;
 800df3a:	e089      	b.n	800e050 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df42:	689b      	ldr	r3, [r3, #8]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d00b      	beq.n	800df60 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df4e:	689b      	ldr	r3, [r3, #8]
 800df50:	687a      	ldr	r2, [r7, #4]
 800df52:	7c12      	ldrb	r2, [r2, #16]
 800df54:	f107 0108 	add.w	r1, r7, #8
 800df58:	4610      	mov	r0, r2
 800df5a:	4798      	blx	r3
 800df5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df5e:	e077      	b.n	800e050 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800df60:	6839      	ldr	r1, [r7, #0]
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f000 fab1 	bl	800e4ca <USBD_CtlError>
            err++;
 800df68:	7afb      	ldrb	r3, [r7, #11]
 800df6a:	3301      	adds	r3, #1
 800df6c:	72fb      	strb	r3, [r7, #11]
          break;
 800df6e:	e06f      	b.n	800e050 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800df70:	687b      	ldr	r3, [r7, #4]
 800df72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df76:	68db      	ldr	r3, [r3, #12]
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d00b      	beq.n	800df94 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800df82:	68db      	ldr	r3, [r3, #12]
 800df84:	687a      	ldr	r2, [r7, #4]
 800df86:	7c12      	ldrb	r2, [r2, #16]
 800df88:	f107 0108 	add.w	r1, r7, #8
 800df8c:	4610      	mov	r0, r2
 800df8e:	4798      	blx	r3
 800df90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800df92:	e05d      	b.n	800e050 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800df94:	6839      	ldr	r1, [r7, #0]
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f000 fa97 	bl	800e4ca <USBD_CtlError>
            err++;
 800df9c:	7afb      	ldrb	r3, [r7, #11]
 800df9e:	3301      	adds	r3, #1
 800dfa0:	72fb      	strb	r3, [r7, #11]
          break;
 800dfa2:	e055      	b.n	800e050 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfaa:	691b      	ldr	r3, [r3, #16]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d00b      	beq.n	800dfc8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfb6:	691b      	ldr	r3, [r3, #16]
 800dfb8:	687a      	ldr	r2, [r7, #4]
 800dfba:	7c12      	ldrb	r2, [r2, #16]
 800dfbc:	f107 0108 	add.w	r1, r7, #8
 800dfc0:	4610      	mov	r0, r2
 800dfc2:	4798      	blx	r3
 800dfc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dfc6:	e043      	b.n	800e050 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dfc8:	6839      	ldr	r1, [r7, #0]
 800dfca:	6878      	ldr	r0, [r7, #4]
 800dfcc:	f000 fa7d 	bl	800e4ca <USBD_CtlError>
            err++;
 800dfd0:	7afb      	ldrb	r3, [r7, #11]
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	72fb      	strb	r3, [r7, #11]
          break;
 800dfd6:	e03b      	b.n	800e050 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfde:	695b      	ldr	r3, [r3, #20]
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d00b      	beq.n	800dffc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dfea:	695b      	ldr	r3, [r3, #20]
 800dfec:	687a      	ldr	r2, [r7, #4]
 800dfee:	7c12      	ldrb	r2, [r2, #16]
 800dff0:	f107 0108 	add.w	r1, r7, #8
 800dff4:	4610      	mov	r0, r2
 800dff6:	4798      	blx	r3
 800dff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dffa:	e029      	b.n	800e050 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800dffc:	6839      	ldr	r1, [r7, #0]
 800dffe:	6878      	ldr	r0, [r7, #4]
 800e000:	f000 fa63 	bl	800e4ca <USBD_CtlError>
            err++;
 800e004:	7afb      	ldrb	r3, [r7, #11]
 800e006:	3301      	adds	r3, #1
 800e008:	72fb      	strb	r3, [r7, #11]
          break;
 800e00a:	e021      	b.n	800e050 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e012:	699b      	ldr	r3, [r3, #24]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d00b      	beq.n	800e030 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e01e:	699b      	ldr	r3, [r3, #24]
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	7c12      	ldrb	r2, [r2, #16]
 800e024:	f107 0108 	add.w	r1, r7, #8
 800e028:	4610      	mov	r0, r2
 800e02a:	4798      	blx	r3
 800e02c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e02e:	e00f      	b.n	800e050 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800e030:	6839      	ldr	r1, [r7, #0]
 800e032:	6878      	ldr	r0, [r7, #4]
 800e034:	f000 fa49 	bl	800e4ca <USBD_CtlError>
            err++;
 800e038:	7afb      	ldrb	r3, [r7, #11]
 800e03a:	3301      	adds	r3, #1
 800e03c:	72fb      	strb	r3, [r7, #11]
          break;
 800e03e:	e007      	b.n	800e050 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e040:	6839      	ldr	r1, [r7, #0]
 800e042:	6878      	ldr	r0, [r7, #4]
 800e044:	f000 fa41 	bl	800e4ca <USBD_CtlError>
          err++;
 800e048:	7afb      	ldrb	r3, [r7, #11]
 800e04a:	3301      	adds	r3, #1
 800e04c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e04e:	bf00      	nop
      }
      break;
 800e050:	e037      	b.n	800e0c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	7c1b      	ldrb	r3, [r3, #16]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d109      	bne.n	800e06e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e062:	f107 0208 	add.w	r2, r7, #8
 800e066:	4610      	mov	r0, r2
 800e068:	4798      	blx	r3
 800e06a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e06c:	e029      	b.n	800e0c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e06e:	6839      	ldr	r1, [r7, #0]
 800e070:	6878      	ldr	r0, [r7, #4]
 800e072:	f000 fa2a 	bl	800e4ca <USBD_CtlError>
        err++;
 800e076:	7afb      	ldrb	r3, [r7, #11]
 800e078:	3301      	adds	r3, #1
 800e07a:	72fb      	strb	r3, [r7, #11]
      break;
 800e07c:	e021      	b.n	800e0c2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	7c1b      	ldrb	r3, [r3, #16]
 800e082:	2b00      	cmp	r3, #0
 800e084:	d10d      	bne.n	800e0a2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e08c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e08e:	f107 0208 	add.w	r2, r7, #8
 800e092:	4610      	mov	r0, r2
 800e094:	4798      	blx	r3
 800e096:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e098:	68fb      	ldr	r3, [r7, #12]
 800e09a:	3301      	adds	r3, #1
 800e09c:	2207      	movs	r2, #7
 800e09e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e0a0:	e00f      	b.n	800e0c2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800e0a2:	6839      	ldr	r1, [r7, #0]
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f000 fa10 	bl	800e4ca <USBD_CtlError>
        err++;
 800e0aa:	7afb      	ldrb	r3, [r7, #11]
 800e0ac:	3301      	adds	r3, #1
 800e0ae:	72fb      	strb	r3, [r7, #11]
      break;
 800e0b0:	e007      	b.n	800e0c2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800e0b2:	6839      	ldr	r1, [r7, #0]
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f000 fa08 	bl	800e4ca <USBD_CtlError>
      err++;
 800e0ba:	7afb      	ldrb	r3, [r7, #11]
 800e0bc:	3301      	adds	r3, #1
 800e0be:	72fb      	strb	r3, [r7, #11]
      break;
 800e0c0:	bf00      	nop
  }

  if (err != 0U)
 800e0c2:	7afb      	ldrb	r3, [r7, #11]
 800e0c4:	2b00      	cmp	r3, #0
 800e0c6:	d11e      	bne.n	800e106 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800e0c8:	683b      	ldr	r3, [r7, #0]
 800e0ca:	88db      	ldrh	r3, [r3, #6]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d016      	beq.n	800e0fe <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800e0d0:	893b      	ldrh	r3, [r7, #8]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d00e      	beq.n	800e0f4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	88da      	ldrh	r2, [r3, #6]
 800e0da:	893b      	ldrh	r3, [r7, #8]
 800e0dc:	4293      	cmp	r3, r2
 800e0de:	bf28      	it	cs
 800e0e0:	4613      	movcs	r3, r2
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e0e6:	893b      	ldrh	r3, [r7, #8]
 800e0e8:	461a      	mov	r2, r3
 800e0ea:	68f9      	ldr	r1, [r7, #12]
 800e0ec:	6878      	ldr	r0, [r7, #4]
 800e0ee:	f000 fa5d 	bl	800e5ac <USBD_CtlSendData>
 800e0f2:	e009      	b.n	800e108 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e0f4:	6839      	ldr	r1, [r7, #0]
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f000 f9e7 	bl	800e4ca <USBD_CtlError>
 800e0fc:	e004      	b.n	800e108 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e0fe:	6878      	ldr	r0, [r7, #4]
 800e100:	f000 faae 	bl	800e660 <USBD_CtlSendStatus>
 800e104:	e000      	b.n	800e108 <USBD_GetDescriptor+0x2cc>
    return;
 800e106:	bf00      	nop
  }
}
 800e108:	3710      	adds	r7, #16
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}
 800e10e:	bf00      	nop

0800e110 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	af00      	add	r7, sp, #0
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e11a:	683b      	ldr	r3, [r7, #0]
 800e11c:	889b      	ldrh	r3, [r3, #4]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d131      	bne.n	800e186 <USBD_SetAddress+0x76>
 800e122:	683b      	ldr	r3, [r7, #0]
 800e124:	88db      	ldrh	r3, [r3, #6]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d12d      	bne.n	800e186 <USBD_SetAddress+0x76>
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	885b      	ldrh	r3, [r3, #2]
 800e12e:	2b7f      	cmp	r3, #127	; 0x7f
 800e130:	d829      	bhi.n	800e186 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e132:	683b      	ldr	r3, [r7, #0]
 800e134:	885b      	ldrh	r3, [r3, #2]
 800e136:	b2db      	uxtb	r3, r3
 800e138:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e13c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e144:	b2db      	uxtb	r3, r3
 800e146:	2b03      	cmp	r3, #3
 800e148:	d104      	bne.n	800e154 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e14a:	6839      	ldr	r1, [r7, #0]
 800e14c:	6878      	ldr	r0, [r7, #4]
 800e14e:	f000 f9bc 	bl	800e4ca <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e152:	e01d      	b.n	800e190 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	7bfa      	ldrb	r2, [r7, #15]
 800e158:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e15c:	7bfb      	ldrb	r3, [r7, #15]
 800e15e:	4619      	mov	r1, r3
 800e160:	6878      	ldr	r0, [r7, #4]
 800e162:	f003 f9a3 	bl	80114ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f000 fa7a 	bl	800e660 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e16c:	7bfb      	ldrb	r3, [r7, #15]
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d004      	beq.n	800e17c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	2202      	movs	r2, #2
 800e176:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e17a:	e009      	b.n	800e190 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2201      	movs	r2, #1
 800e180:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e184:	e004      	b.n	800e190 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e186:	6839      	ldr	r1, [r7, #0]
 800e188:	6878      	ldr	r0, [r7, #4]
 800e18a:	f000 f99e 	bl	800e4ca <USBD_CtlError>
  }
}
 800e18e:	bf00      	nop
 800e190:	bf00      	nop
 800e192:	3710      	adds	r7, #16
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}

0800e198 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b084      	sub	sp, #16
 800e19c:	af00      	add	r7, sp, #0
 800e19e:	6078      	str	r0, [r7, #4]
 800e1a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e1a2:	2300      	movs	r3, #0
 800e1a4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e1a6:	683b      	ldr	r3, [r7, #0]
 800e1a8:	885b      	ldrh	r3, [r3, #2]
 800e1aa:	b2da      	uxtb	r2, r3
 800e1ac:	4b4e      	ldr	r3, [pc, #312]	; (800e2e8 <USBD_SetConfig+0x150>)
 800e1ae:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e1b0:	4b4d      	ldr	r3, [pc, #308]	; (800e2e8 <USBD_SetConfig+0x150>)
 800e1b2:	781b      	ldrb	r3, [r3, #0]
 800e1b4:	2b01      	cmp	r3, #1
 800e1b6:	d905      	bls.n	800e1c4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e1b8:	6839      	ldr	r1, [r7, #0]
 800e1ba:	6878      	ldr	r0, [r7, #4]
 800e1bc:	f000 f985 	bl	800e4ca <USBD_CtlError>
    return USBD_FAIL;
 800e1c0:	2303      	movs	r3, #3
 800e1c2:	e08c      	b.n	800e2de <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1ca:	b2db      	uxtb	r3, r3
 800e1cc:	2b02      	cmp	r3, #2
 800e1ce:	d002      	beq.n	800e1d6 <USBD_SetConfig+0x3e>
 800e1d0:	2b03      	cmp	r3, #3
 800e1d2:	d029      	beq.n	800e228 <USBD_SetConfig+0x90>
 800e1d4:	e075      	b.n	800e2c2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e1d6:	4b44      	ldr	r3, [pc, #272]	; (800e2e8 <USBD_SetConfig+0x150>)
 800e1d8:	781b      	ldrb	r3, [r3, #0]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d020      	beq.n	800e220 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e1de:	4b42      	ldr	r3, [pc, #264]	; (800e2e8 <USBD_SetConfig+0x150>)
 800e1e0:	781b      	ldrb	r3, [r3, #0]
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e1e8:	4b3f      	ldr	r3, [pc, #252]	; (800e2e8 <USBD_SetConfig+0x150>)
 800e1ea:	781b      	ldrb	r3, [r3, #0]
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f7fe ffe7 	bl	800d1c2 <USBD_SetClassConfig>
 800e1f4:	4603      	mov	r3, r0
 800e1f6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e1f8:	7bfb      	ldrb	r3, [r7, #15]
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d008      	beq.n	800e210 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e1fe:	6839      	ldr	r1, [r7, #0]
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f000 f962 	bl	800e4ca <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	2202      	movs	r2, #2
 800e20a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e20e:	e065      	b.n	800e2dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e210:	6878      	ldr	r0, [r7, #4]
 800e212:	f000 fa25 	bl	800e660 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2203      	movs	r2, #3
 800e21a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e21e:	e05d      	b.n	800e2dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e220:	6878      	ldr	r0, [r7, #4]
 800e222:	f000 fa1d 	bl	800e660 <USBD_CtlSendStatus>
      break;
 800e226:	e059      	b.n	800e2dc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e228:	4b2f      	ldr	r3, [pc, #188]	; (800e2e8 <USBD_SetConfig+0x150>)
 800e22a:	781b      	ldrb	r3, [r3, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d112      	bne.n	800e256 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	2202      	movs	r2, #2
 800e234:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e238:	4b2b      	ldr	r3, [pc, #172]	; (800e2e8 <USBD_SetConfig+0x150>)
 800e23a:	781b      	ldrb	r3, [r3, #0]
 800e23c:	461a      	mov	r2, r3
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e242:	4b29      	ldr	r3, [pc, #164]	; (800e2e8 <USBD_SetConfig+0x150>)
 800e244:	781b      	ldrb	r3, [r3, #0]
 800e246:	4619      	mov	r1, r3
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f7fe ffd6 	bl	800d1fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e24e:	6878      	ldr	r0, [r7, #4]
 800e250:	f000 fa06 	bl	800e660 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e254:	e042      	b.n	800e2dc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e256:	4b24      	ldr	r3, [pc, #144]	; (800e2e8 <USBD_SetConfig+0x150>)
 800e258:	781b      	ldrb	r3, [r3, #0]
 800e25a:	461a      	mov	r2, r3
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	685b      	ldr	r3, [r3, #4]
 800e260:	429a      	cmp	r2, r3
 800e262:	d02a      	beq.n	800e2ba <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	685b      	ldr	r3, [r3, #4]
 800e268:	b2db      	uxtb	r3, r3
 800e26a:	4619      	mov	r1, r3
 800e26c:	6878      	ldr	r0, [r7, #4]
 800e26e:	f7fe ffc4 	bl	800d1fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e272:	4b1d      	ldr	r3, [pc, #116]	; (800e2e8 <USBD_SetConfig+0x150>)
 800e274:	781b      	ldrb	r3, [r3, #0]
 800e276:	461a      	mov	r2, r3
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e27c:	4b1a      	ldr	r3, [pc, #104]	; (800e2e8 <USBD_SetConfig+0x150>)
 800e27e:	781b      	ldrb	r3, [r3, #0]
 800e280:	4619      	mov	r1, r3
 800e282:	6878      	ldr	r0, [r7, #4]
 800e284:	f7fe ff9d 	bl	800d1c2 <USBD_SetClassConfig>
 800e288:	4603      	mov	r3, r0
 800e28a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e28c:	7bfb      	ldrb	r3, [r7, #15]
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d00f      	beq.n	800e2b2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e292:	6839      	ldr	r1, [r7, #0]
 800e294:	6878      	ldr	r0, [r7, #4]
 800e296:	f000 f918 	bl	800e4ca <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	685b      	ldr	r3, [r3, #4]
 800e29e:	b2db      	uxtb	r3, r3
 800e2a0:	4619      	mov	r1, r3
 800e2a2:	6878      	ldr	r0, [r7, #4]
 800e2a4:	f7fe ffa9 	bl	800d1fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	2202      	movs	r2, #2
 800e2ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e2b0:	e014      	b.n	800e2dc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 f9d4 	bl	800e660 <USBD_CtlSendStatus>
      break;
 800e2b8:	e010      	b.n	800e2dc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f000 f9d0 	bl	800e660 <USBD_CtlSendStatus>
      break;
 800e2c0:	e00c      	b.n	800e2dc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e2c2:	6839      	ldr	r1, [r7, #0]
 800e2c4:	6878      	ldr	r0, [r7, #4]
 800e2c6:	f000 f900 	bl	800e4ca <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e2ca:	4b07      	ldr	r3, [pc, #28]	; (800e2e8 <USBD_SetConfig+0x150>)
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	6878      	ldr	r0, [r7, #4]
 800e2d2:	f7fe ff92 	bl	800d1fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e2d6:	2303      	movs	r3, #3
 800e2d8:	73fb      	strb	r3, [r7, #15]
      break;
 800e2da:	bf00      	nop
  }

  return ret;
 800e2dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2de:	4618      	mov	r0, r3
 800e2e0:	3710      	adds	r7, #16
 800e2e2:	46bd      	mov	sp, r7
 800e2e4:	bd80      	pop	{r7, pc}
 800e2e6:	bf00      	nop
 800e2e8:	20000b20 	.word	0x20000b20

0800e2ec <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e2ec:	b580      	push	{r7, lr}
 800e2ee:	b082      	sub	sp, #8
 800e2f0:	af00      	add	r7, sp, #0
 800e2f2:	6078      	str	r0, [r7, #4]
 800e2f4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	88db      	ldrh	r3, [r3, #6]
 800e2fa:	2b01      	cmp	r3, #1
 800e2fc:	d004      	beq.n	800e308 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e2fe:	6839      	ldr	r1, [r7, #0]
 800e300:	6878      	ldr	r0, [r7, #4]
 800e302:	f000 f8e2 	bl	800e4ca <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e306:	e023      	b.n	800e350 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e30e:	b2db      	uxtb	r3, r3
 800e310:	2b02      	cmp	r3, #2
 800e312:	dc02      	bgt.n	800e31a <USBD_GetConfig+0x2e>
 800e314:	2b00      	cmp	r3, #0
 800e316:	dc03      	bgt.n	800e320 <USBD_GetConfig+0x34>
 800e318:	e015      	b.n	800e346 <USBD_GetConfig+0x5a>
 800e31a:	2b03      	cmp	r3, #3
 800e31c:	d00b      	beq.n	800e336 <USBD_GetConfig+0x4a>
 800e31e:	e012      	b.n	800e346 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	2200      	movs	r2, #0
 800e324:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	3308      	adds	r3, #8
 800e32a:	2201      	movs	r2, #1
 800e32c:	4619      	mov	r1, r3
 800e32e:	6878      	ldr	r0, [r7, #4]
 800e330:	f000 f93c 	bl	800e5ac <USBD_CtlSendData>
        break;
 800e334:	e00c      	b.n	800e350 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	3304      	adds	r3, #4
 800e33a:	2201      	movs	r2, #1
 800e33c:	4619      	mov	r1, r3
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f000 f934 	bl	800e5ac <USBD_CtlSendData>
        break;
 800e344:	e004      	b.n	800e350 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e346:	6839      	ldr	r1, [r7, #0]
 800e348:	6878      	ldr	r0, [r7, #4]
 800e34a:	f000 f8be 	bl	800e4ca <USBD_CtlError>
        break;
 800e34e:	bf00      	nop
}
 800e350:	bf00      	nop
 800e352:	3708      	adds	r7, #8
 800e354:	46bd      	mov	sp, r7
 800e356:	bd80      	pop	{r7, pc}

0800e358 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e358:	b580      	push	{r7, lr}
 800e35a:	b082      	sub	sp, #8
 800e35c:	af00      	add	r7, sp, #0
 800e35e:	6078      	str	r0, [r7, #4]
 800e360:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e368:	b2db      	uxtb	r3, r3
 800e36a:	3b01      	subs	r3, #1
 800e36c:	2b02      	cmp	r3, #2
 800e36e:	d81e      	bhi.n	800e3ae <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e370:	683b      	ldr	r3, [r7, #0]
 800e372:	88db      	ldrh	r3, [r3, #6]
 800e374:	2b02      	cmp	r3, #2
 800e376:	d004      	beq.n	800e382 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e378:	6839      	ldr	r1, [r7, #0]
 800e37a:	6878      	ldr	r0, [r7, #4]
 800e37c:	f000 f8a5 	bl	800e4ca <USBD_CtlError>
        break;
 800e380:	e01a      	b.n	800e3b8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2201      	movs	r2, #1
 800e386:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d005      	beq.n	800e39e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	68db      	ldr	r3, [r3, #12]
 800e396:	f043 0202 	orr.w	r2, r3, #2
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	330c      	adds	r3, #12
 800e3a2:	2202      	movs	r2, #2
 800e3a4:	4619      	mov	r1, r3
 800e3a6:	6878      	ldr	r0, [r7, #4]
 800e3a8:	f000 f900 	bl	800e5ac <USBD_CtlSendData>
      break;
 800e3ac:	e004      	b.n	800e3b8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e3ae:	6839      	ldr	r1, [r7, #0]
 800e3b0:	6878      	ldr	r0, [r7, #4]
 800e3b2:	f000 f88a 	bl	800e4ca <USBD_CtlError>
      break;
 800e3b6:	bf00      	nop
  }
}
 800e3b8:	bf00      	nop
 800e3ba:	3708      	adds	r7, #8
 800e3bc:	46bd      	mov	sp, r7
 800e3be:	bd80      	pop	{r7, pc}

0800e3c0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e3c0:	b580      	push	{r7, lr}
 800e3c2:	b082      	sub	sp, #8
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
 800e3c8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	885b      	ldrh	r3, [r3, #2]
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d107      	bne.n	800e3e2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2201      	movs	r2, #1
 800e3d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 f940 	bl	800e660 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e3e0:	e013      	b.n	800e40a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e3e2:	683b      	ldr	r3, [r7, #0]
 800e3e4:	885b      	ldrh	r3, [r3, #2]
 800e3e6:	2b02      	cmp	r3, #2
 800e3e8:	d10b      	bne.n	800e402 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	889b      	ldrh	r3, [r3, #4]
 800e3ee:	0a1b      	lsrs	r3, r3, #8
 800e3f0:	b29b      	uxth	r3, r3
 800e3f2:	b2da      	uxtb	r2, r3
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e3fa:	6878      	ldr	r0, [r7, #4]
 800e3fc:	f000 f930 	bl	800e660 <USBD_CtlSendStatus>
}
 800e400:	e003      	b.n	800e40a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e402:	6839      	ldr	r1, [r7, #0]
 800e404:	6878      	ldr	r0, [r7, #4]
 800e406:	f000 f860 	bl	800e4ca <USBD_CtlError>
}
 800e40a:	bf00      	nop
 800e40c:	3708      	adds	r7, #8
 800e40e:	46bd      	mov	sp, r7
 800e410:	bd80      	pop	{r7, pc}

0800e412 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e412:	b580      	push	{r7, lr}
 800e414:	b082      	sub	sp, #8
 800e416:	af00      	add	r7, sp, #0
 800e418:	6078      	str	r0, [r7, #4]
 800e41a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e422:	b2db      	uxtb	r3, r3
 800e424:	3b01      	subs	r3, #1
 800e426:	2b02      	cmp	r3, #2
 800e428:	d80b      	bhi.n	800e442 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e42a:	683b      	ldr	r3, [r7, #0]
 800e42c:	885b      	ldrh	r3, [r3, #2]
 800e42e:	2b01      	cmp	r3, #1
 800e430:	d10c      	bne.n	800e44c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e432:	687b      	ldr	r3, [r7, #4]
 800e434:	2200      	movs	r2, #0
 800e436:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 f910 	bl	800e660 <USBD_CtlSendStatus>
      }
      break;
 800e440:	e004      	b.n	800e44c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e442:	6839      	ldr	r1, [r7, #0]
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f000 f840 	bl	800e4ca <USBD_CtlError>
      break;
 800e44a:	e000      	b.n	800e44e <USBD_ClrFeature+0x3c>
      break;
 800e44c:	bf00      	nop
  }
}
 800e44e:	bf00      	nop
 800e450:	3708      	adds	r7, #8
 800e452:	46bd      	mov	sp, r7
 800e454:	bd80      	pop	{r7, pc}

0800e456 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e456:	b580      	push	{r7, lr}
 800e458:	b084      	sub	sp, #16
 800e45a:	af00      	add	r7, sp, #0
 800e45c:	6078      	str	r0, [r7, #4]
 800e45e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e460:	683b      	ldr	r3, [r7, #0]
 800e462:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	781a      	ldrb	r2, [r3, #0]
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	3301      	adds	r3, #1
 800e470:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e472:	68fb      	ldr	r3, [r7, #12]
 800e474:	781a      	ldrb	r2, [r3, #0]
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	3301      	adds	r3, #1
 800e47e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e480:	68f8      	ldr	r0, [r7, #12]
 800e482:	f7ff fa41 	bl	800d908 <SWAPBYTE>
 800e486:	4603      	mov	r3, r0
 800e488:	461a      	mov	r2, r3
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	3301      	adds	r3, #1
 800e492:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	3301      	adds	r3, #1
 800e498:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e49a:	68f8      	ldr	r0, [r7, #12]
 800e49c:	f7ff fa34 	bl	800d908 <SWAPBYTE>
 800e4a0:	4603      	mov	r3, r0
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	3301      	adds	r3, #1
 800e4ac:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e4b4:	68f8      	ldr	r0, [r7, #12]
 800e4b6:	f7ff fa27 	bl	800d908 <SWAPBYTE>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	461a      	mov	r2, r3
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	80da      	strh	r2, [r3, #6]
}
 800e4c2:	bf00      	nop
 800e4c4:	3710      	adds	r7, #16
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}

0800e4ca <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e4ca:	b580      	push	{r7, lr}
 800e4cc:	b082      	sub	sp, #8
 800e4ce:	af00      	add	r7, sp, #0
 800e4d0:	6078      	str	r0, [r7, #4]
 800e4d2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e4d4:	2180      	movs	r1, #128	; 0x80
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f002 ff7e 	bl	80113d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e4dc:	2100      	movs	r1, #0
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f002 ff7a 	bl	80113d8 <USBD_LL_StallEP>
}
 800e4e4:	bf00      	nop
 800e4e6:	3708      	adds	r7, #8
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}

0800e4ec <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e4ec:	b580      	push	{r7, lr}
 800e4ee:	b086      	sub	sp, #24
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	60f8      	str	r0, [r7, #12]
 800e4f4:	60b9      	str	r1, [r7, #8]
 800e4f6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e4fc:	68fb      	ldr	r3, [r7, #12]
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d036      	beq.n	800e570 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e506:	6938      	ldr	r0, [r7, #16]
 800e508:	f000 f836 	bl	800e578 <USBD_GetLen>
 800e50c:	4603      	mov	r3, r0
 800e50e:	3301      	adds	r3, #1
 800e510:	b29b      	uxth	r3, r3
 800e512:	005b      	lsls	r3, r3, #1
 800e514:	b29a      	uxth	r2, r3
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e51a:	7dfb      	ldrb	r3, [r7, #23]
 800e51c:	68ba      	ldr	r2, [r7, #8]
 800e51e:	4413      	add	r3, r2
 800e520:	687a      	ldr	r2, [r7, #4]
 800e522:	7812      	ldrb	r2, [r2, #0]
 800e524:	701a      	strb	r2, [r3, #0]
  idx++;
 800e526:	7dfb      	ldrb	r3, [r7, #23]
 800e528:	3301      	adds	r3, #1
 800e52a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e52c:	7dfb      	ldrb	r3, [r7, #23]
 800e52e:	68ba      	ldr	r2, [r7, #8]
 800e530:	4413      	add	r3, r2
 800e532:	2203      	movs	r2, #3
 800e534:	701a      	strb	r2, [r3, #0]
  idx++;
 800e536:	7dfb      	ldrb	r3, [r7, #23]
 800e538:	3301      	adds	r3, #1
 800e53a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e53c:	e013      	b.n	800e566 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e53e:	7dfb      	ldrb	r3, [r7, #23]
 800e540:	68ba      	ldr	r2, [r7, #8]
 800e542:	4413      	add	r3, r2
 800e544:	693a      	ldr	r2, [r7, #16]
 800e546:	7812      	ldrb	r2, [r2, #0]
 800e548:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e54a:	693b      	ldr	r3, [r7, #16]
 800e54c:	3301      	adds	r3, #1
 800e54e:	613b      	str	r3, [r7, #16]
    idx++;
 800e550:	7dfb      	ldrb	r3, [r7, #23]
 800e552:	3301      	adds	r3, #1
 800e554:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e556:	7dfb      	ldrb	r3, [r7, #23]
 800e558:	68ba      	ldr	r2, [r7, #8]
 800e55a:	4413      	add	r3, r2
 800e55c:	2200      	movs	r2, #0
 800e55e:	701a      	strb	r2, [r3, #0]
    idx++;
 800e560:	7dfb      	ldrb	r3, [r7, #23]
 800e562:	3301      	adds	r3, #1
 800e564:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e566:	693b      	ldr	r3, [r7, #16]
 800e568:	781b      	ldrb	r3, [r3, #0]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d1e7      	bne.n	800e53e <USBD_GetString+0x52>
 800e56e:	e000      	b.n	800e572 <USBD_GetString+0x86>
    return;
 800e570:	bf00      	nop
  }
}
 800e572:	3718      	adds	r7, #24
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}

0800e578 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e578:	b480      	push	{r7}
 800e57a:	b085      	sub	sp, #20
 800e57c:	af00      	add	r7, sp, #0
 800e57e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e580:	2300      	movs	r3, #0
 800e582:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e588:	e005      	b.n	800e596 <USBD_GetLen+0x1e>
  {
    len++;
 800e58a:	7bfb      	ldrb	r3, [r7, #15]
 800e58c:	3301      	adds	r3, #1
 800e58e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	3301      	adds	r3, #1
 800e594:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	781b      	ldrb	r3, [r3, #0]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d1f5      	bne.n	800e58a <USBD_GetLen+0x12>
  }

  return len;
 800e59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	3714      	adds	r7, #20
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5aa:	4770      	bx	lr

0800e5ac <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e5ac:	b580      	push	{r7, lr}
 800e5ae:	b084      	sub	sp, #16
 800e5b0:	af00      	add	r7, sp, #0
 800e5b2:	60f8      	str	r0, [r7, #12]
 800e5b4:	60b9      	str	r1, [r7, #8]
 800e5b6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	2202      	movs	r2, #2
 800e5bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	687a      	ldr	r2, [r7, #4]
 800e5c4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	687a      	ldr	r2, [r7, #4]
 800e5ca:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	68ba      	ldr	r2, [r7, #8]
 800e5d0:	2100      	movs	r1, #0
 800e5d2:	68f8      	ldr	r0, [r7, #12]
 800e5d4:	f002 ff89 	bl	80114ea <USBD_LL_Transmit>

  return USBD_OK;
 800e5d8:	2300      	movs	r3, #0
}
 800e5da:	4618      	mov	r0, r3
 800e5dc:	3710      	adds	r7, #16
 800e5de:	46bd      	mov	sp, r7
 800e5e0:	bd80      	pop	{r7, pc}

0800e5e2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e5e2:	b580      	push	{r7, lr}
 800e5e4:	b084      	sub	sp, #16
 800e5e6:	af00      	add	r7, sp, #0
 800e5e8:	60f8      	str	r0, [r7, #12]
 800e5ea:	60b9      	str	r1, [r7, #8]
 800e5ec:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	68ba      	ldr	r2, [r7, #8]
 800e5f2:	2100      	movs	r1, #0
 800e5f4:	68f8      	ldr	r0, [r7, #12]
 800e5f6:	f002 ff78 	bl	80114ea <USBD_LL_Transmit>

  return USBD_OK;
 800e5fa:	2300      	movs	r3, #0
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3710      	adds	r7, #16
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e604:	b580      	push	{r7, lr}
 800e606:	b084      	sub	sp, #16
 800e608:	af00      	add	r7, sp, #0
 800e60a:	60f8      	str	r0, [r7, #12]
 800e60c:	60b9      	str	r1, [r7, #8]
 800e60e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2203      	movs	r2, #3
 800e614:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e618:	68fb      	ldr	r3, [r7, #12]
 800e61a:	687a      	ldr	r2, [r7, #4]
 800e61c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	687a      	ldr	r2, [r7, #4]
 800e624:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	68ba      	ldr	r2, [r7, #8]
 800e62c:	2100      	movs	r1, #0
 800e62e:	68f8      	ldr	r0, [r7, #12]
 800e630:	f002 ff7c 	bl	801152c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e634:	2300      	movs	r3, #0
}
 800e636:	4618      	mov	r0, r3
 800e638:	3710      	adds	r7, #16
 800e63a:	46bd      	mov	sp, r7
 800e63c:	bd80      	pop	{r7, pc}

0800e63e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e63e:	b580      	push	{r7, lr}
 800e640:	b084      	sub	sp, #16
 800e642:	af00      	add	r7, sp, #0
 800e644:	60f8      	str	r0, [r7, #12]
 800e646:	60b9      	str	r1, [r7, #8]
 800e648:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	68ba      	ldr	r2, [r7, #8]
 800e64e:	2100      	movs	r1, #0
 800e650:	68f8      	ldr	r0, [r7, #12]
 800e652:	f002 ff6b 	bl	801152c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e656:	2300      	movs	r3, #0
}
 800e658:	4618      	mov	r0, r3
 800e65a:	3710      	adds	r7, #16
 800e65c:	46bd      	mov	sp, r7
 800e65e:	bd80      	pop	{r7, pc}

0800e660 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e660:	b580      	push	{r7, lr}
 800e662:	b082      	sub	sp, #8
 800e664:	af00      	add	r7, sp, #0
 800e666:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	2204      	movs	r2, #4
 800e66c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e670:	2300      	movs	r3, #0
 800e672:	2200      	movs	r2, #0
 800e674:	2100      	movs	r1, #0
 800e676:	6878      	ldr	r0, [r7, #4]
 800e678:	f002 ff37 	bl	80114ea <USBD_LL_Transmit>

  return USBD_OK;
 800e67c:	2300      	movs	r3, #0
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3708      	adds	r7, #8
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}

0800e686 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e686:	b580      	push	{r7, lr}
 800e688:	b082      	sub	sp, #8
 800e68a:	af00      	add	r7, sp, #0
 800e68c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2205      	movs	r2, #5
 800e692:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e696:	2300      	movs	r3, #0
 800e698:	2200      	movs	r2, #0
 800e69a:	2100      	movs	r1, #0
 800e69c:	6878      	ldr	r0, [r7, #4]
 800e69e:	f002 ff45 	bl	801152c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e6a2:	2300      	movs	r3, #0
}
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	3708      	adds	r7, #8
 800e6a8:	46bd      	mov	sp, r7
 800e6aa:	bd80      	pop	{r7, pc}

0800e6ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e6ac:	b580      	push	{r7, lr}
 800e6ae:	b084      	sub	sp, #16
 800e6b0:	af00      	add	r7, sp, #0
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e6b6:	79fb      	ldrb	r3, [r7, #7]
 800e6b8:	4a08      	ldr	r2, [pc, #32]	; (800e6dc <disk_status+0x30>)
 800e6ba:	009b      	lsls	r3, r3, #2
 800e6bc:	4413      	add	r3, r2
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	685b      	ldr	r3, [r3, #4]
 800e6c2:	79fa      	ldrb	r2, [r7, #7]
 800e6c4:	4905      	ldr	r1, [pc, #20]	; (800e6dc <disk_status+0x30>)
 800e6c6:	440a      	add	r2, r1
 800e6c8:	7a12      	ldrb	r2, [r2, #8]
 800e6ca:	4610      	mov	r0, r2
 800e6cc:	4798      	blx	r3
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e6d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3710      	adds	r7, #16
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}
 800e6dc:	20000b4c 	.word	0x20000b4c

0800e6e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e6e0:	b580      	push	{r7, lr}
 800e6e2:	b084      	sub	sp, #16
 800e6e4:	af00      	add	r7, sp, #0
 800e6e6:	4603      	mov	r3, r0
 800e6e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e6ee:	79fb      	ldrb	r3, [r7, #7]
 800e6f0:	4a0d      	ldr	r2, [pc, #52]	; (800e728 <disk_initialize+0x48>)
 800e6f2:	5cd3      	ldrb	r3, [r2, r3]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d111      	bne.n	800e71c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e6f8:	79fb      	ldrb	r3, [r7, #7]
 800e6fa:	4a0b      	ldr	r2, [pc, #44]	; (800e728 <disk_initialize+0x48>)
 800e6fc:	2101      	movs	r1, #1
 800e6fe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e700:	79fb      	ldrb	r3, [r7, #7]
 800e702:	4a09      	ldr	r2, [pc, #36]	; (800e728 <disk_initialize+0x48>)
 800e704:	009b      	lsls	r3, r3, #2
 800e706:	4413      	add	r3, r2
 800e708:	685b      	ldr	r3, [r3, #4]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	79fa      	ldrb	r2, [r7, #7]
 800e70e:	4906      	ldr	r1, [pc, #24]	; (800e728 <disk_initialize+0x48>)
 800e710:	440a      	add	r2, r1
 800e712:	7a12      	ldrb	r2, [r2, #8]
 800e714:	4610      	mov	r0, r2
 800e716:	4798      	blx	r3
 800e718:	4603      	mov	r3, r0
 800e71a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e71c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e71e:	4618      	mov	r0, r3
 800e720:	3710      	adds	r7, #16
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	20000b4c 	.word	0x20000b4c

0800e72c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e72c:	b590      	push	{r4, r7, lr}
 800e72e:	b087      	sub	sp, #28
 800e730:	af00      	add	r7, sp, #0
 800e732:	60b9      	str	r1, [r7, #8]
 800e734:	607a      	str	r2, [r7, #4]
 800e736:	603b      	str	r3, [r7, #0]
 800e738:	4603      	mov	r3, r0
 800e73a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e73c:	7bfb      	ldrb	r3, [r7, #15]
 800e73e:	4a0a      	ldr	r2, [pc, #40]	; (800e768 <disk_read+0x3c>)
 800e740:	009b      	lsls	r3, r3, #2
 800e742:	4413      	add	r3, r2
 800e744:	685b      	ldr	r3, [r3, #4]
 800e746:	689c      	ldr	r4, [r3, #8]
 800e748:	7bfb      	ldrb	r3, [r7, #15]
 800e74a:	4a07      	ldr	r2, [pc, #28]	; (800e768 <disk_read+0x3c>)
 800e74c:	4413      	add	r3, r2
 800e74e:	7a18      	ldrb	r0, [r3, #8]
 800e750:	683b      	ldr	r3, [r7, #0]
 800e752:	687a      	ldr	r2, [r7, #4]
 800e754:	68b9      	ldr	r1, [r7, #8]
 800e756:	47a0      	blx	r4
 800e758:	4603      	mov	r3, r0
 800e75a:	75fb      	strb	r3, [r7, #23]
  return res;
 800e75c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e75e:	4618      	mov	r0, r3
 800e760:	371c      	adds	r7, #28
 800e762:	46bd      	mov	sp, r7
 800e764:	bd90      	pop	{r4, r7, pc}
 800e766:	bf00      	nop
 800e768:	20000b4c 	.word	0x20000b4c

0800e76c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e76c:	b590      	push	{r4, r7, lr}
 800e76e:	b087      	sub	sp, #28
 800e770:	af00      	add	r7, sp, #0
 800e772:	60b9      	str	r1, [r7, #8]
 800e774:	607a      	str	r2, [r7, #4]
 800e776:	603b      	str	r3, [r7, #0]
 800e778:	4603      	mov	r3, r0
 800e77a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e77c:	7bfb      	ldrb	r3, [r7, #15]
 800e77e:	4a0a      	ldr	r2, [pc, #40]	; (800e7a8 <disk_write+0x3c>)
 800e780:	009b      	lsls	r3, r3, #2
 800e782:	4413      	add	r3, r2
 800e784:	685b      	ldr	r3, [r3, #4]
 800e786:	68dc      	ldr	r4, [r3, #12]
 800e788:	7bfb      	ldrb	r3, [r7, #15]
 800e78a:	4a07      	ldr	r2, [pc, #28]	; (800e7a8 <disk_write+0x3c>)
 800e78c:	4413      	add	r3, r2
 800e78e:	7a18      	ldrb	r0, [r3, #8]
 800e790:	683b      	ldr	r3, [r7, #0]
 800e792:	687a      	ldr	r2, [r7, #4]
 800e794:	68b9      	ldr	r1, [r7, #8]
 800e796:	47a0      	blx	r4
 800e798:	4603      	mov	r3, r0
 800e79a:	75fb      	strb	r3, [r7, #23]
  return res;
 800e79c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e79e:	4618      	mov	r0, r3
 800e7a0:	371c      	adds	r7, #28
 800e7a2:	46bd      	mov	sp, r7
 800e7a4:	bd90      	pop	{r4, r7, pc}
 800e7a6:	bf00      	nop
 800e7a8:	20000b4c 	.word	0x20000b4c

0800e7ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b084      	sub	sp, #16
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	4603      	mov	r3, r0
 800e7b4:	603a      	str	r2, [r7, #0]
 800e7b6:	71fb      	strb	r3, [r7, #7]
 800e7b8:	460b      	mov	r3, r1
 800e7ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e7bc:	79fb      	ldrb	r3, [r7, #7]
 800e7be:	4a09      	ldr	r2, [pc, #36]	; (800e7e4 <disk_ioctl+0x38>)
 800e7c0:	009b      	lsls	r3, r3, #2
 800e7c2:	4413      	add	r3, r2
 800e7c4:	685b      	ldr	r3, [r3, #4]
 800e7c6:	691b      	ldr	r3, [r3, #16]
 800e7c8:	79fa      	ldrb	r2, [r7, #7]
 800e7ca:	4906      	ldr	r1, [pc, #24]	; (800e7e4 <disk_ioctl+0x38>)
 800e7cc:	440a      	add	r2, r1
 800e7ce:	7a10      	ldrb	r0, [r2, #8]
 800e7d0:	79b9      	ldrb	r1, [r7, #6]
 800e7d2:	683a      	ldr	r2, [r7, #0]
 800e7d4:	4798      	blx	r3
 800e7d6:	4603      	mov	r3, r0
 800e7d8:	73fb      	strb	r3, [r7, #15]
  return res;
 800e7da:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3710      	adds	r7, #16
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	20000b4c 	.word	0x20000b4c

0800e7e8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b085      	sub	sp, #20
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	3301      	adds	r3, #1
 800e7f4:	781b      	ldrb	r3, [r3, #0]
 800e7f6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e7f8:	89fb      	ldrh	r3, [r7, #14]
 800e7fa:	021b      	lsls	r3, r3, #8
 800e7fc:	b21a      	sxth	r2, r3
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	781b      	ldrb	r3, [r3, #0]
 800e802:	b21b      	sxth	r3, r3
 800e804:	4313      	orrs	r3, r2
 800e806:	b21b      	sxth	r3, r3
 800e808:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e80a:	89fb      	ldrh	r3, [r7, #14]
}
 800e80c:	4618      	mov	r0, r3
 800e80e:	3714      	adds	r7, #20
 800e810:	46bd      	mov	sp, r7
 800e812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e816:	4770      	bx	lr

0800e818 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e818:	b480      	push	{r7}
 800e81a:	b085      	sub	sp, #20
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	3303      	adds	r3, #3
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	021b      	lsls	r3, r3, #8
 800e82c:	687a      	ldr	r2, [r7, #4]
 800e82e:	3202      	adds	r2, #2
 800e830:	7812      	ldrb	r2, [r2, #0]
 800e832:	4313      	orrs	r3, r2
 800e834:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	021b      	lsls	r3, r3, #8
 800e83a:	687a      	ldr	r2, [r7, #4]
 800e83c:	3201      	adds	r2, #1
 800e83e:	7812      	ldrb	r2, [r2, #0]
 800e840:	4313      	orrs	r3, r2
 800e842:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	021b      	lsls	r3, r3, #8
 800e848:	687a      	ldr	r2, [r7, #4]
 800e84a:	7812      	ldrb	r2, [r2, #0]
 800e84c:	4313      	orrs	r3, r2
 800e84e:	60fb      	str	r3, [r7, #12]
	return rv;
 800e850:	68fb      	ldr	r3, [r7, #12]
}
 800e852:	4618      	mov	r0, r3
 800e854:	3714      	adds	r7, #20
 800e856:	46bd      	mov	sp, r7
 800e858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85c:	4770      	bx	lr

0800e85e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e85e:	b480      	push	{r7}
 800e860:	b083      	sub	sp, #12
 800e862:	af00      	add	r7, sp, #0
 800e864:	6078      	str	r0, [r7, #4]
 800e866:	460b      	mov	r3, r1
 800e868:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	1c5a      	adds	r2, r3, #1
 800e86e:	607a      	str	r2, [r7, #4]
 800e870:	887a      	ldrh	r2, [r7, #2]
 800e872:	b2d2      	uxtb	r2, r2
 800e874:	701a      	strb	r2, [r3, #0]
 800e876:	887b      	ldrh	r3, [r7, #2]
 800e878:	0a1b      	lsrs	r3, r3, #8
 800e87a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	1c5a      	adds	r2, r3, #1
 800e880:	607a      	str	r2, [r7, #4]
 800e882:	887a      	ldrh	r2, [r7, #2]
 800e884:	b2d2      	uxtb	r2, r2
 800e886:	701a      	strb	r2, [r3, #0]
}
 800e888:	bf00      	nop
 800e88a:	370c      	adds	r7, #12
 800e88c:	46bd      	mov	sp, r7
 800e88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e892:	4770      	bx	lr

0800e894 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e894:	b480      	push	{r7}
 800e896:	b083      	sub	sp, #12
 800e898:	af00      	add	r7, sp, #0
 800e89a:	6078      	str	r0, [r7, #4]
 800e89c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	1c5a      	adds	r2, r3, #1
 800e8a2:	607a      	str	r2, [r7, #4]
 800e8a4:	683a      	ldr	r2, [r7, #0]
 800e8a6:	b2d2      	uxtb	r2, r2
 800e8a8:	701a      	strb	r2, [r3, #0]
 800e8aa:	683b      	ldr	r3, [r7, #0]
 800e8ac:	0a1b      	lsrs	r3, r3, #8
 800e8ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	1c5a      	adds	r2, r3, #1
 800e8b4:	607a      	str	r2, [r7, #4]
 800e8b6:	683a      	ldr	r2, [r7, #0]
 800e8b8:	b2d2      	uxtb	r2, r2
 800e8ba:	701a      	strb	r2, [r3, #0]
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	0a1b      	lsrs	r3, r3, #8
 800e8c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	1c5a      	adds	r2, r3, #1
 800e8c6:	607a      	str	r2, [r7, #4]
 800e8c8:	683a      	ldr	r2, [r7, #0]
 800e8ca:	b2d2      	uxtb	r2, r2
 800e8cc:	701a      	strb	r2, [r3, #0]
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	0a1b      	lsrs	r3, r3, #8
 800e8d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	1c5a      	adds	r2, r3, #1
 800e8d8:	607a      	str	r2, [r7, #4]
 800e8da:	683a      	ldr	r2, [r7, #0]
 800e8dc:	b2d2      	uxtb	r2, r2
 800e8de:	701a      	strb	r2, [r3, #0]
}
 800e8e0:	bf00      	nop
 800e8e2:	370c      	adds	r7, #12
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ea:	4770      	bx	lr

0800e8ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e8ec:	b480      	push	{r7}
 800e8ee:	b087      	sub	sp, #28
 800e8f0:	af00      	add	r7, sp, #0
 800e8f2:	60f8      	str	r0, [r7, #12]
 800e8f4:	60b9      	str	r1, [r7, #8]
 800e8f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e8fc:	68bb      	ldr	r3, [r7, #8]
 800e8fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d00d      	beq.n	800e922 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e906:	693a      	ldr	r2, [r7, #16]
 800e908:	1c53      	adds	r3, r2, #1
 800e90a:	613b      	str	r3, [r7, #16]
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	1c59      	adds	r1, r3, #1
 800e910:	6179      	str	r1, [r7, #20]
 800e912:	7812      	ldrb	r2, [r2, #0]
 800e914:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e916:	687b      	ldr	r3, [r7, #4]
 800e918:	3b01      	subs	r3, #1
 800e91a:	607b      	str	r3, [r7, #4]
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d1f1      	bne.n	800e906 <mem_cpy+0x1a>
	}
}
 800e922:	bf00      	nop
 800e924:	371c      	adds	r7, #28
 800e926:	46bd      	mov	sp, r7
 800e928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92c:	4770      	bx	lr

0800e92e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e92e:	b480      	push	{r7}
 800e930:	b087      	sub	sp, #28
 800e932:	af00      	add	r7, sp, #0
 800e934:	60f8      	str	r0, [r7, #12]
 800e936:	60b9      	str	r1, [r7, #8]
 800e938:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e93e:	697b      	ldr	r3, [r7, #20]
 800e940:	1c5a      	adds	r2, r3, #1
 800e942:	617a      	str	r2, [r7, #20]
 800e944:	68ba      	ldr	r2, [r7, #8]
 800e946:	b2d2      	uxtb	r2, r2
 800e948:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	3b01      	subs	r3, #1
 800e94e:	607b      	str	r3, [r7, #4]
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	2b00      	cmp	r3, #0
 800e954:	d1f3      	bne.n	800e93e <mem_set+0x10>
}
 800e956:	bf00      	nop
 800e958:	bf00      	nop
 800e95a:	371c      	adds	r7, #28
 800e95c:	46bd      	mov	sp, r7
 800e95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e962:	4770      	bx	lr

0800e964 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e964:	b480      	push	{r7}
 800e966:	b089      	sub	sp, #36	; 0x24
 800e968:	af00      	add	r7, sp, #0
 800e96a:	60f8      	str	r0, [r7, #12]
 800e96c:	60b9      	str	r1, [r7, #8]
 800e96e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	61fb      	str	r3, [r7, #28]
 800e974:	68bb      	ldr	r3, [r7, #8]
 800e976:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e978:	2300      	movs	r3, #0
 800e97a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e97c:	69fb      	ldr	r3, [r7, #28]
 800e97e:	1c5a      	adds	r2, r3, #1
 800e980:	61fa      	str	r2, [r7, #28]
 800e982:	781b      	ldrb	r3, [r3, #0]
 800e984:	4619      	mov	r1, r3
 800e986:	69bb      	ldr	r3, [r7, #24]
 800e988:	1c5a      	adds	r2, r3, #1
 800e98a:	61ba      	str	r2, [r7, #24]
 800e98c:	781b      	ldrb	r3, [r3, #0]
 800e98e:	1acb      	subs	r3, r1, r3
 800e990:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	3b01      	subs	r3, #1
 800e996:	607b      	str	r3, [r7, #4]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d002      	beq.n	800e9a4 <mem_cmp+0x40>
 800e99e:	697b      	ldr	r3, [r7, #20]
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d0eb      	beq.n	800e97c <mem_cmp+0x18>

	return r;
 800e9a4:	697b      	ldr	r3, [r7, #20]
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3724      	adds	r7, #36	; 0x24
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr

0800e9b2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e9b2:	b480      	push	{r7}
 800e9b4:	b083      	sub	sp, #12
 800e9b6:	af00      	add	r7, sp, #0
 800e9b8:	6078      	str	r0, [r7, #4]
 800e9ba:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e9bc:	e002      	b.n	800e9c4 <chk_chr+0x12>
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	3301      	adds	r3, #1
 800e9c2:	607b      	str	r3, [r7, #4]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	781b      	ldrb	r3, [r3, #0]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d005      	beq.n	800e9d8 <chk_chr+0x26>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	461a      	mov	r2, r3
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	4293      	cmp	r3, r2
 800e9d6:	d1f2      	bne.n	800e9be <chk_chr+0xc>
	return *str;
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	781b      	ldrb	r3, [r3, #0]
}
 800e9dc:	4618      	mov	r0, r3
 800e9de:	370c      	adds	r7, #12
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e9e8:	b480      	push	{r7}
 800e9ea:	b085      	sub	sp, #20
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	60bb      	str	r3, [r7, #8]
 800e9f6:	68bb      	ldr	r3, [r7, #8]
 800e9f8:	60fb      	str	r3, [r7, #12]
 800e9fa:	e029      	b.n	800ea50 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e9fc:	4a27      	ldr	r2, [pc, #156]	; (800ea9c <chk_lock+0xb4>)
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	011b      	lsls	r3, r3, #4
 800ea02:	4413      	add	r3, r2
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d01d      	beq.n	800ea46 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ea0a:	4a24      	ldr	r2, [pc, #144]	; (800ea9c <chk_lock+0xb4>)
 800ea0c:	68fb      	ldr	r3, [r7, #12]
 800ea0e:	011b      	lsls	r3, r3, #4
 800ea10:	4413      	add	r3, r2
 800ea12:	681a      	ldr	r2, [r3, #0]
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	681b      	ldr	r3, [r3, #0]
 800ea18:	429a      	cmp	r2, r3
 800ea1a:	d116      	bne.n	800ea4a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800ea1c:	4a1f      	ldr	r2, [pc, #124]	; (800ea9c <chk_lock+0xb4>)
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	011b      	lsls	r3, r3, #4
 800ea22:	4413      	add	r3, r2
 800ea24:	3304      	adds	r3, #4
 800ea26:	681a      	ldr	r2, [r3, #0]
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800ea2c:	429a      	cmp	r2, r3
 800ea2e:	d10c      	bne.n	800ea4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ea30:	4a1a      	ldr	r2, [pc, #104]	; (800ea9c <chk_lock+0xb4>)
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	011b      	lsls	r3, r3, #4
 800ea36:	4413      	add	r3, r2
 800ea38:	3308      	adds	r3, #8
 800ea3a:	681a      	ldr	r2, [r3, #0]
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d102      	bne.n	800ea4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800ea44:	e007      	b.n	800ea56 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800ea46:	2301      	movs	r3, #1
 800ea48:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800ea4a:	68fb      	ldr	r3, [r7, #12]
 800ea4c:	3301      	adds	r3, #1
 800ea4e:	60fb      	str	r3, [r7, #12]
 800ea50:	68fb      	ldr	r3, [r7, #12]
 800ea52:	2b01      	cmp	r3, #1
 800ea54:	d9d2      	bls.n	800e9fc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	2b02      	cmp	r3, #2
 800ea5a:	d109      	bne.n	800ea70 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800ea5c:	68bb      	ldr	r3, [r7, #8]
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d102      	bne.n	800ea68 <chk_lock+0x80>
 800ea62:	683b      	ldr	r3, [r7, #0]
 800ea64:	2b02      	cmp	r3, #2
 800ea66:	d101      	bne.n	800ea6c <chk_lock+0x84>
 800ea68:	2300      	movs	r3, #0
 800ea6a:	e010      	b.n	800ea8e <chk_lock+0xa6>
 800ea6c:	2312      	movs	r3, #18
 800ea6e:	e00e      	b.n	800ea8e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800ea70:	683b      	ldr	r3, [r7, #0]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d108      	bne.n	800ea88 <chk_lock+0xa0>
 800ea76:	4a09      	ldr	r2, [pc, #36]	; (800ea9c <chk_lock+0xb4>)
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	011b      	lsls	r3, r3, #4
 800ea7c:	4413      	add	r3, r2
 800ea7e:	330c      	adds	r3, #12
 800ea80:	881b      	ldrh	r3, [r3, #0]
 800ea82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ea86:	d101      	bne.n	800ea8c <chk_lock+0xa4>
 800ea88:	2310      	movs	r3, #16
 800ea8a:	e000      	b.n	800ea8e <chk_lock+0xa6>
 800ea8c:	2300      	movs	r3, #0
}
 800ea8e:	4618      	mov	r0, r3
 800ea90:	3714      	adds	r7, #20
 800ea92:	46bd      	mov	sp, r7
 800ea94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea98:	4770      	bx	lr
 800ea9a:	bf00      	nop
 800ea9c:	20000b2c 	.word	0x20000b2c

0800eaa0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b083      	sub	sp, #12
 800eaa4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800eaa6:	2300      	movs	r3, #0
 800eaa8:	607b      	str	r3, [r7, #4]
 800eaaa:	e002      	b.n	800eab2 <enq_lock+0x12>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	3301      	adds	r3, #1
 800eab0:	607b      	str	r3, [r7, #4]
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d806      	bhi.n	800eac6 <enq_lock+0x26>
 800eab8:	4a09      	ldr	r2, [pc, #36]	; (800eae0 <enq_lock+0x40>)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	011b      	lsls	r3, r3, #4
 800eabe:	4413      	add	r3, r2
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d1f2      	bne.n	800eaac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800eac6:	687b      	ldr	r3, [r7, #4]
 800eac8:	2b02      	cmp	r3, #2
 800eaca:	bf14      	ite	ne
 800eacc:	2301      	movne	r3, #1
 800eace:	2300      	moveq	r3, #0
 800ead0:	b2db      	uxtb	r3, r3
}
 800ead2:	4618      	mov	r0, r3
 800ead4:	370c      	adds	r7, #12
 800ead6:	46bd      	mov	sp, r7
 800ead8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eadc:	4770      	bx	lr
 800eade:	bf00      	nop
 800eae0:	20000b2c 	.word	0x20000b2c

0800eae4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800eae4:	b480      	push	{r7}
 800eae6:	b085      	sub	sp, #20
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
 800eaec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800eaee:	2300      	movs	r3, #0
 800eaf0:	60fb      	str	r3, [r7, #12]
 800eaf2:	e01f      	b.n	800eb34 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800eaf4:	4a41      	ldr	r2, [pc, #260]	; (800ebfc <inc_lock+0x118>)
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	011b      	lsls	r3, r3, #4
 800eafa:	4413      	add	r3, r2
 800eafc:	681a      	ldr	r2, [r3, #0]
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d113      	bne.n	800eb2e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800eb06:	4a3d      	ldr	r2, [pc, #244]	; (800ebfc <inc_lock+0x118>)
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	011b      	lsls	r3, r3, #4
 800eb0c:	4413      	add	r3, r2
 800eb0e:	3304      	adds	r3, #4
 800eb10:	681a      	ldr	r2, [r3, #0]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800eb16:	429a      	cmp	r2, r3
 800eb18:	d109      	bne.n	800eb2e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800eb1a:	4a38      	ldr	r2, [pc, #224]	; (800ebfc <inc_lock+0x118>)
 800eb1c:	68fb      	ldr	r3, [r7, #12]
 800eb1e:	011b      	lsls	r3, r3, #4
 800eb20:	4413      	add	r3, r2
 800eb22:	3308      	adds	r3, #8
 800eb24:	681a      	ldr	r2, [r3, #0]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d006      	beq.n	800eb3c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800eb2e:	68fb      	ldr	r3, [r7, #12]
 800eb30:	3301      	adds	r3, #1
 800eb32:	60fb      	str	r3, [r7, #12]
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	2b01      	cmp	r3, #1
 800eb38:	d9dc      	bls.n	800eaf4 <inc_lock+0x10>
 800eb3a:	e000      	b.n	800eb3e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800eb3c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2b02      	cmp	r3, #2
 800eb42:	d132      	bne.n	800ebaa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800eb44:	2300      	movs	r3, #0
 800eb46:	60fb      	str	r3, [r7, #12]
 800eb48:	e002      	b.n	800eb50 <inc_lock+0x6c>
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	3301      	adds	r3, #1
 800eb4e:	60fb      	str	r3, [r7, #12]
 800eb50:	68fb      	ldr	r3, [r7, #12]
 800eb52:	2b01      	cmp	r3, #1
 800eb54:	d806      	bhi.n	800eb64 <inc_lock+0x80>
 800eb56:	4a29      	ldr	r2, [pc, #164]	; (800ebfc <inc_lock+0x118>)
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	011b      	lsls	r3, r3, #4
 800eb5c:	4413      	add	r3, r2
 800eb5e:	681b      	ldr	r3, [r3, #0]
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d1f2      	bne.n	800eb4a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	2b02      	cmp	r3, #2
 800eb68:	d101      	bne.n	800eb6e <inc_lock+0x8a>
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	e040      	b.n	800ebf0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681a      	ldr	r2, [r3, #0]
 800eb72:	4922      	ldr	r1, [pc, #136]	; (800ebfc <inc_lock+0x118>)
 800eb74:	68fb      	ldr	r3, [r7, #12]
 800eb76:	011b      	lsls	r3, r3, #4
 800eb78:	440b      	add	r3, r1
 800eb7a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	689a      	ldr	r2, [r3, #8]
 800eb80:	491e      	ldr	r1, [pc, #120]	; (800ebfc <inc_lock+0x118>)
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	011b      	lsls	r3, r3, #4
 800eb86:	440b      	add	r3, r1
 800eb88:	3304      	adds	r3, #4
 800eb8a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	695a      	ldr	r2, [r3, #20]
 800eb90:	491a      	ldr	r1, [pc, #104]	; (800ebfc <inc_lock+0x118>)
 800eb92:	68fb      	ldr	r3, [r7, #12]
 800eb94:	011b      	lsls	r3, r3, #4
 800eb96:	440b      	add	r3, r1
 800eb98:	3308      	adds	r3, #8
 800eb9a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800eb9c:	4a17      	ldr	r2, [pc, #92]	; (800ebfc <inc_lock+0x118>)
 800eb9e:	68fb      	ldr	r3, [r7, #12]
 800eba0:	011b      	lsls	r3, r3, #4
 800eba2:	4413      	add	r3, r2
 800eba4:	330c      	adds	r3, #12
 800eba6:	2200      	movs	r2, #0
 800eba8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d009      	beq.n	800ebc4 <inc_lock+0xe0>
 800ebb0:	4a12      	ldr	r2, [pc, #72]	; (800ebfc <inc_lock+0x118>)
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	011b      	lsls	r3, r3, #4
 800ebb6:	4413      	add	r3, r2
 800ebb8:	330c      	adds	r3, #12
 800ebba:	881b      	ldrh	r3, [r3, #0]
 800ebbc:	2b00      	cmp	r3, #0
 800ebbe:	d001      	beq.n	800ebc4 <inc_lock+0xe0>
 800ebc0:	2300      	movs	r3, #0
 800ebc2:	e015      	b.n	800ebf0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d108      	bne.n	800ebdc <inc_lock+0xf8>
 800ebca:	4a0c      	ldr	r2, [pc, #48]	; (800ebfc <inc_lock+0x118>)
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	011b      	lsls	r3, r3, #4
 800ebd0:	4413      	add	r3, r2
 800ebd2:	330c      	adds	r3, #12
 800ebd4:	881b      	ldrh	r3, [r3, #0]
 800ebd6:	3301      	adds	r3, #1
 800ebd8:	b29a      	uxth	r2, r3
 800ebda:	e001      	b.n	800ebe0 <inc_lock+0xfc>
 800ebdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ebe0:	4906      	ldr	r1, [pc, #24]	; (800ebfc <inc_lock+0x118>)
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	011b      	lsls	r3, r3, #4
 800ebe6:	440b      	add	r3, r1
 800ebe8:	330c      	adds	r3, #12
 800ebea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	3301      	adds	r3, #1
}
 800ebf0:	4618      	mov	r0, r3
 800ebf2:	3714      	adds	r7, #20
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfa:	4770      	bx	lr
 800ebfc:	20000b2c 	.word	0x20000b2c

0800ec00 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ec00:	b480      	push	{r7}
 800ec02:	b085      	sub	sp, #20
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	3b01      	subs	r3, #1
 800ec0c:	607b      	str	r3, [r7, #4]
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	2b01      	cmp	r3, #1
 800ec12:	d825      	bhi.n	800ec60 <dec_lock+0x60>
		n = Files[i].ctr;
 800ec14:	4a17      	ldr	r2, [pc, #92]	; (800ec74 <dec_lock+0x74>)
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	011b      	lsls	r3, r3, #4
 800ec1a:	4413      	add	r3, r2
 800ec1c:	330c      	adds	r3, #12
 800ec1e:	881b      	ldrh	r3, [r3, #0]
 800ec20:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ec22:	89fb      	ldrh	r3, [r7, #14]
 800ec24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ec28:	d101      	bne.n	800ec2e <dec_lock+0x2e>
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ec2e:	89fb      	ldrh	r3, [r7, #14]
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d002      	beq.n	800ec3a <dec_lock+0x3a>
 800ec34:	89fb      	ldrh	r3, [r7, #14]
 800ec36:	3b01      	subs	r3, #1
 800ec38:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ec3a:	4a0e      	ldr	r2, [pc, #56]	; (800ec74 <dec_lock+0x74>)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	011b      	lsls	r3, r3, #4
 800ec40:	4413      	add	r3, r2
 800ec42:	330c      	adds	r3, #12
 800ec44:	89fa      	ldrh	r2, [r7, #14]
 800ec46:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800ec48:	89fb      	ldrh	r3, [r7, #14]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d105      	bne.n	800ec5a <dec_lock+0x5a>
 800ec4e:	4a09      	ldr	r2, [pc, #36]	; (800ec74 <dec_lock+0x74>)
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	011b      	lsls	r3, r3, #4
 800ec54:	4413      	add	r3, r2
 800ec56:	2200      	movs	r2, #0
 800ec58:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ec5a:	2300      	movs	r3, #0
 800ec5c:	737b      	strb	r3, [r7, #13]
 800ec5e:	e001      	b.n	800ec64 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ec60:	2302      	movs	r3, #2
 800ec62:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ec64:	7b7b      	ldrb	r3, [r7, #13]
}
 800ec66:	4618      	mov	r0, r3
 800ec68:	3714      	adds	r7, #20
 800ec6a:	46bd      	mov	sp, r7
 800ec6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec70:	4770      	bx	lr
 800ec72:	bf00      	nop
 800ec74:	20000b2c 	.word	0x20000b2c

0800ec78 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ec78:	b480      	push	{r7}
 800ec7a:	b085      	sub	sp, #20
 800ec7c:	af00      	add	r7, sp, #0
 800ec7e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ec80:	2300      	movs	r3, #0
 800ec82:	60fb      	str	r3, [r7, #12]
 800ec84:	e010      	b.n	800eca8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ec86:	4a0d      	ldr	r2, [pc, #52]	; (800ecbc <clear_lock+0x44>)
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	011b      	lsls	r3, r3, #4
 800ec8c:	4413      	add	r3, r2
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	687a      	ldr	r2, [r7, #4]
 800ec92:	429a      	cmp	r2, r3
 800ec94:	d105      	bne.n	800eca2 <clear_lock+0x2a>
 800ec96:	4a09      	ldr	r2, [pc, #36]	; (800ecbc <clear_lock+0x44>)
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	011b      	lsls	r3, r3, #4
 800ec9c:	4413      	add	r3, r2
 800ec9e:	2200      	movs	r2, #0
 800eca0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800eca2:	68fb      	ldr	r3, [r7, #12]
 800eca4:	3301      	adds	r3, #1
 800eca6:	60fb      	str	r3, [r7, #12]
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	2b01      	cmp	r3, #1
 800ecac:	d9eb      	bls.n	800ec86 <clear_lock+0xe>
	}
}
 800ecae:	bf00      	nop
 800ecb0:	bf00      	nop
 800ecb2:	3714      	adds	r7, #20
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecba:	4770      	bx	lr
 800ecbc:	20000b2c 	.word	0x20000b2c

0800ecc0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ecc0:	b580      	push	{r7, lr}
 800ecc2:	b086      	sub	sp, #24
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	78db      	ldrb	r3, [r3, #3]
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d034      	beq.n	800ed3e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecd8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	7858      	ldrb	r0, [r3, #1]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ece4:	2301      	movs	r3, #1
 800ece6:	697a      	ldr	r2, [r7, #20]
 800ece8:	f7ff fd40 	bl	800e76c <disk_write>
 800ecec:	4603      	mov	r3, r0
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d002      	beq.n	800ecf8 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	73fb      	strb	r3, [r7, #15]
 800ecf6:	e022      	b.n	800ed3e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ecfe:	687b      	ldr	r3, [r7, #4]
 800ed00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed02:	697a      	ldr	r2, [r7, #20]
 800ed04:	1ad2      	subs	r2, r2, r3
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	69db      	ldr	r3, [r3, #28]
 800ed0a:	429a      	cmp	r2, r3
 800ed0c:	d217      	bcs.n	800ed3e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	789b      	ldrb	r3, [r3, #2]
 800ed12:	613b      	str	r3, [r7, #16]
 800ed14:	e010      	b.n	800ed38 <sync_window+0x78>
					wsect += fs->fsize;
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	69db      	ldr	r3, [r3, #28]
 800ed1a:	697a      	ldr	r2, [r7, #20]
 800ed1c:	4413      	add	r3, r2
 800ed1e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	7858      	ldrb	r0, [r3, #1]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ed2a:	2301      	movs	r3, #1
 800ed2c:	697a      	ldr	r2, [r7, #20]
 800ed2e:	f7ff fd1d 	bl	800e76c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ed32:	693b      	ldr	r3, [r7, #16]
 800ed34:	3b01      	subs	r3, #1
 800ed36:	613b      	str	r3, [r7, #16]
 800ed38:	693b      	ldr	r3, [r7, #16]
 800ed3a:	2b01      	cmp	r3, #1
 800ed3c:	d8eb      	bhi.n	800ed16 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ed3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed40:	4618      	mov	r0, r3
 800ed42:	3718      	adds	r7, #24
 800ed44:	46bd      	mov	sp, r7
 800ed46:	bd80      	pop	{r7, pc}

0800ed48 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b084      	sub	sp, #16
 800ed4c:	af00      	add	r7, sp, #0
 800ed4e:	6078      	str	r0, [r7, #4]
 800ed50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800ed52:	2300      	movs	r3, #0
 800ed54:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed5a:	683a      	ldr	r2, [r7, #0]
 800ed5c:	429a      	cmp	r2, r3
 800ed5e:	d01b      	beq.n	800ed98 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f7ff ffad 	bl	800ecc0 <sync_window>
 800ed66:	4603      	mov	r3, r0
 800ed68:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800ed6a:	7bfb      	ldrb	r3, [r7, #15]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d113      	bne.n	800ed98 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	7858      	ldrb	r0, [r3, #1]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ed7a:	2301      	movs	r3, #1
 800ed7c:	683a      	ldr	r2, [r7, #0]
 800ed7e:	f7ff fcd5 	bl	800e72c <disk_read>
 800ed82:	4603      	mov	r3, r0
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d004      	beq.n	800ed92 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ed88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ed8c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ed8e:	2301      	movs	r3, #1
 800ed90:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	683a      	ldr	r2, [r7, #0]
 800ed96:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800ed98:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	3710      	adds	r7, #16
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	bd80      	pop	{r7, pc}
	...

0800eda4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b084      	sub	sp, #16
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f7ff ff87 	bl	800ecc0 <sync_window>
 800edb2:	4603      	mov	r3, r0
 800edb4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800edb6:	7bfb      	ldrb	r3, [r7, #15]
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d159      	bne.n	800ee70 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	781b      	ldrb	r3, [r3, #0]
 800edc0:	2b03      	cmp	r3, #3
 800edc2:	d149      	bne.n	800ee58 <sync_fs+0xb4>
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	791b      	ldrb	r3, [r3, #4]
 800edc8:	2b01      	cmp	r3, #1
 800edca:	d145      	bne.n	800ee58 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	899b      	ldrh	r3, [r3, #12]
 800edd6:	461a      	mov	r2, r3
 800edd8:	2100      	movs	r1, #0
 800edda:	f7ff fda8 	bl	800e92e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	3334      	adds	r3, #52	; 0x34
 800ede2:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ede6:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800edea:	4618      	mov	r0, r3
 800edec:	f7ff fd37 	bl	800e85e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	3334      	adds	r3, #52	; 0x34
 800edf4:	4921      	ldr	r1, [pc, #132]	; (800ee7c <sync_fs+0xd8>)
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7ff fd4c 	bl	800e894 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	3334      	adds	r3, #52	; 0x34
 800ee00:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800ee04:	491e      	ldr	r1, [pc, #120]	; (800ee80 <sync_fs+0xdc>)
 800ee06:	4618      	mov	r0, r3
 800ee08:	f7ff fd44 	bl	800e894 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	3334      	adds	r3, #52	; 0x34
 800ee10:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	695b      	ldr	r3, [r3, #20]
 800ee18:	4619      	mov	r1, r3
 800ee1a:	4610      	mov	r0, r2
 800ee1c:	f7ff fd3a 	bl	800e894 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	3334      	adds	r3, #52	; 0x34
 800ee24:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	691b      	ldr	r3, [r3, #16]
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	4610      	mov	r0, r2
 800ee30:	f7ff fd30 	bl	800e894 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	6a1b      	ldr	r3, [r3, #32]
 800ee38:	1c5a      	adds	r2, r3, #1
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	7858      	ldrb	r0, [r3, #1]
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ee4c:	2301      	movs	r3, #1
 800ee4e:	f7ff fc8d 	bl	800e76c <disk_write>
			fs->fsi_flag = 0;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2200      	movs	r2, #0
 800ee56:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	785b      	ldrb	r3, [r3, #1]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	2100      	movs	r1, #0
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7ff fca3 	bl	800e7ac <disk_ioctl>
 800ee66:	4603      	mov	r3, r0
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d001      	beq.n	800ee70 <sync_fs+0xcc>
 800ee6c:	2301      	movs	r3, #1
 800ee6e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ee70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee72:	4618      	mov	r0, r3
 800ee74:	3710      	adds	r7, #16
 800ee76:	46bd      	mov	sp, r7
 800ee78:	bd80      	pop	{r7, pc}
 800ee7a:	bf00      	nop
 800ee7c:	41615252 	.word	0x41615252
 800ee80:	61417272 	.word	0x61417272

0800ee84 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ee84:	b480      	push	{r7}
 800ee86:	b083      	sub	sp, #12
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
 800ee8c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800ee8e:	683b      	ldr	r3, [r7, #0]
 800ee90:	3b02      	subs	r3, #2
 800ee92:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	699b      	ldr	r3, [r3, #24]
 800ee98:	3b02      	subs	r3, #2
 800ee9a:	683a      	ldr	r2, [r7, #0]
 800ee9c:	429a      	cmp	r2, r3
 800ee9e:	d301      	bcc.n	800eea4 <clust2sect+0x20>
 800eea0:	2300      	movs	r3, #0
 800eea2:	e008      	b.n	800eeb6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	895b      	ldrh	r3, [r3, #10]
 800eea8:	461a      	mov	r2, r3
 800eeaa:	683b      	ldr	r3, [r7, #0]
 800eeac:	fb03 f202 	mul.w	r2, r3, r2
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eeb4:	4413      	add	r3, r2
}
 800eeb6:	4618      	mov	r0, r3
 800eeb8:	370c      	adds	r7, #12
 800eeba:	46bd      	mov	sp, r7
 800eebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec0:	4770      	bx	lr

0800eec2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800eec2:	b580      	push	{r7, lr}
 800eec4:	b086      	sub	sp, #24
 800eec6:	af00      	add	r7, sp, #0
 800eec8:	6078      	str	r0, [r7, #4]
 800eeca:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800eed2:	683b      	ldr	r3, [r7, #0]
 800eed4:	2b01      	cmp	r3, #1
 800eed6:	d904      	bls.n	800eee2 <get_fat+0x20>
 800eed8:	693b      	ldr	r3, [r7, #16]
 800eeda:	699b      	ldr	r3, [r3, #24]
 800eedc:	683a      	ldr	r2, [r7, #0]
 800eede:	429a      	cmp	r2, r3
 800eee0:	d302      	bcc.n	800eee8 <get_fat+0x26>
		val = 1;	/* Internal error */
 800eee2:	2301      	movs	r3, #1
 800eee4:	617b      	str	r3, [r7, #20]
 800eee6:	e0bb      	b.n	800f060 <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800eee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800eeec:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	781b      	ldrb	r3, [r3, #0]
 800eef2:	2b03      	cmp	r3, #3
 800eef4:	f000 8083 	beq.w	800effe <get_fat+0x13c>
 800eef8:	2b03      	cmp	r3, #3
 800eefa:	f300 80a7 	bgt.w	800f04c <get_fat+0x18a>
 800eefe:	2b01      	cmp	r3, #1
 800ef00:	d002      	beq.n	800ef08 <get_fat+0x46>
 800ef02:	2b02      	cmp	r3, #2
 800ef04:	d056      	beq.n	800efb4 <get_fat+0xf2>
 800ef06:	e0a1      	b.n	800f04c <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ef08:	683b      	ldr	r3, [r7, #0]
 800ef0a:	60fb      	str	r3, [r7, #12]
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	085b      	lsrs	r3, r3, #1
 800ef10:	68fa      	ldr	r2, [r7, #12]
 800ef12:	4413      	add	r3, r2
 800ef14:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ef16:	693b      	ldr	r3, [r7, #16]
 800ef18:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	899b      	ldrh	r3, [r3, #12]
 800ef1e:	4619      	mov	r1, r3
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef26:	4413      	add	r3, r2
 800ef28:	4619      	mov	r1, r3
 800ef2a:	6938      	ldr	r0, [r7, #16]
 800ef2c:	f7ff ff0c 	bl	800ed48 <move_window>
 800ef30:	4603      	mov	r3, r0
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	f040 808d 	bne.w	800f052 <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	1c5a      	adds	r2, r3, #1
 800ef3c:	60fa      	str	r2, [r7, #12]
 800ef3e:	693a      	ldr	r2, [r7, #16]
 800ef40:	8992      	ldrh	r2, [r2, #12]
 800ef42:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef46:	fb01 f202 	mul.w	r2, r1, r2
 800ef4a:	1a9b      	subs	r3, r3, r2
 800ef4c:	693a      	ldr	r2, [r7, #16]
 800ef4e:	4413      	add	r3, r2
 800ef50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ef54:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ef56:	693b      	ldr	r3, [r7, #16]
 800ef58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef5a:	693b      	ldr	r3, [r7, #16]
 800ef5c:	899b      	ldrh	r3, [r3, #12]
 800ef5e:	4619      	mov	r1, r3
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	fbb3 f3f1 	udiv	r3, r3, r1
 800ef66:	4413      	add	r3, r2
 800ef68:	4619      	mov	r1, r3
 800ef6a:	6938      	ldr	r0, [r7, #16]
 800ef6c:	f7ff feec 	bl	800ed48 <move_window>
 800ef70:	4603      	mov	r3, r0
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d16f      	bne.n	800f056 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ef76:	693b      	ldr	r3, [r7, #16]
 800ef78:	899b      	ldrh	r3, [r3, #12]
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ef82:	fb01 f202 	mul.w	r2, r1, r2
 800ef86:	1a9b      	subs	r3, r3, r2
 800ef88:	693a      	ldr	r2, [r7, #16]
 800ef8a:	4413      	add	r3, r2
 800ef8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ef90:	021b      	lsls	r3, r3, #8
 800ef92:	461a      	mov	r2, r3
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	4313      	orrs	r3, r2
 800ef98:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	f003 0301 	and.w	r3, r3, #1
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d002      	beq.n	800efaa <get_fat+0xe8>
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	091b      	lsrs	r3, r3, #4
 800efa8:	e002      	b.n	800efb0 <get_fat+0xee>
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800efb0:	617b      	str	r3, [r7, #20]
			break;
 800efb2:	e055      	b.n	800f060 <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800efb4:	693b      	ldr	r3, [r7, #16]
 800efb6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800efb8:	693b      	ldr	r3, [r7, #16]
 800efba:	899b      	ldrh	r3, [r3, #12]
 800efbc:	085b      	lsrs	r3, r3, #1
 800efbe:	b29b      	uxth	r3, r3
 800efc0:	4619      	mov	r1, r3
 800efc2:	683b      	ldr	r3, [r7, #0]
 800efc4:	fbb3 f3f1 	udiv	r3, r3, r1
 800efc8:	4413      	add	r3, r2
 800efca:	4619      	mov	r1, r3
 800efcc:	6938      	ldr	r0, [r7, #16]
 800efce:	f7ff febb 	bl	800ed48 <move_window>
 800efd2:	4603      	mov	r3, r0
 800efd4:	2b00      	cmp	r3, #0
 800efd6:	d140      	bne.n	800f05a <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800efd8:	693b      	ldr	r3, [r7, #16]
 800efda:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800efde:	683b      	ldr	r3, [r7, #0]
 800efe0:	005b      	lsls	r3, r3, #1
 800efe2:	693a      	ldr	r2, [r7, #16]
 800efe4:	8992      	ldrh	r2, [r2, #12]
 800efe6:	fbb3 f0f2 	udiv	r0, r3, r2
 800efea:	fb00 f202 	mul.w	r2, r0, r2
 800efee:	1a9b      	subs	r3, r3, r2
 800eff0:	440b      	add	r3, r1
 800eff2:	4618      	mov	r0, r3
 800eff4:	f7ff fbf8 	bl	800e7e8 <ld_word>
 800eff8:	4603      	mov	r3, r0
 800effa:	617b      	str	r3, [r7, #20]
			break;
 800effc:	e030      	b.n	800f060 <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800effe:	693b      	ldr	r3, [r7, #16]
 800f000:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f002:	693b      	ldr	r3, [r7, #16]
 800f004:	899b      	ldrh	r3, [r3, #12]
 800f006:	089b      	lsrs	r3, r3, #2
 800f008:	b29b      	uxth	r3, r3
 800f00a:	4619      	mov	r1, r3
 800f00c:	683b      	ldr	r3, [r7, #0]
 800f00e:	fbb3 f3f1 	udiv	r3, r3, r1
 800f012:	4413      	add	r3, r2
 800f014:	4619      	mov	r1, r3
 800f016:	6938      	ldr	r0, [r7, #16]
 800f018:	f7ff fe96 	bl	800ed48 <move_window>
 800f01c:	4603      	mov	r3, r0
 800f01e:	2b00      	cmp	r3, #0
 800f020:	d11d      	bne.n	800f05e <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800f022:	693b      	ldr	r3, [r7, #16]
 800f024:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f028:	683b      	ldr	r3, [r7, #0]
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	693a      	ldr	r2, [r7, #16]
 800f02e:	8992      	ldrh	r2, [r2, #12]
 800f030:	fbb3 f0f2 	udiv	r0, r3, r2
 800f034:	fb00 f202 	mul.w	r2, r0, r2
 800f038:	1a9b      	subs	r3, r3, r2
 800f03a:	440b      	add	r3, r1
 800f03c:	4618      	mov	r0, r3
 800f03e:	f7ff fbeb 	bl	800e818 <ld_dword>
 800f042:	4603      	mov	r3, r0
 800f044:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800f048:	617b      	str	r3, [r7, #20]
			break;
 800f04a:	e009      	b.n	800f060 <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800f04c:	2301      	movs	r3, #1
 800f04e:	617b      	str	r3, [r7, #20]
 800f050:	e006      	b.n	800f060 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f052:	bf00      	nop
 800f054:	e004      	b.n	800f060 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800f056:	bf00      	nop
 800f058:	e002      	b.n	800f060 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800f05a:	bf00      	nop
 800f05c:	e000      	b.n	800f060 <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800f05e:	bf00      	nop
		}
	}

	return val;
 800f060:	697b      	ldr	r3, [r7, #20]
}
 800f062:	4618      	mov	r0, r3
 800f064:	3718      	adds	r7, #24
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}

0800f06a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800f06a:	b590      	push	{r4, r7, lr}
 800f06c:	b089      	sub	sp, #36	; 0x24
 800f06e:	af00      	add	r7, sp, #0
 800f070:	60f8      	str	r0, [r7, #12]
 800f072:	60b9      	str	r1, [r7, #8]
 800f074:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800f076:	2302      	movs	r3, #2
 800f078:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800f07a:	68bb      	ldr	r3, [r7, #8]
 800f07c:	2b01      	cmp	r3, #1
 800f07e:	f240 8109 	bls.w	800f294 <put_fat+0x22a>
 800f082:	68fb      	ldr	r3, [r7, #12]
 800f084:	699b      	ldr	r3, [r3, #24]
 800f086:	68ba      	ldr	r2, [r7, #8]
 800f088:	429a      	cmp	r2, r3
 800f08a:	f080 8103 	bcs.w	800f294 <put_fat+0x22a>
		switch (fs->fs_type) {
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	781b      	ldrb	r3, [r3, #0]
 800f092:	2b03      	cmp	r3, #3
 800f094:	f000 80b6 	beq.w	800f204 <put_fat+0x19a>
 800f098:	2b03      	cmp	r3, #3
 800f09a:	f300 80fb 	bgt.w	800f294 <put_fat+0x22a>
 800f09e:	2b01      	cmp	r3, #1
 800f0a0:	d003      	beq.n	800f0aa <put_fat+0x40>
 800f0a2:	2b02      	cmp	r3, #2
 800f0a4:	f000 8083 	beq.w	800f1ae <put_fat+0x144>
 800f0a8:	e0f4      	b.n	800f294 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	61bb      	str	r3, [r7, #24]
 800f0ae:	69bb      	ldr	r3, [r7, #24]
 800f0b0:	085b      	lsrs	r3, r3, #1
 800f0b2:	69ba      	ldr	r2, [r7, #24]
 800f0b4:	4413      	add	r3, r2
 800f0b6:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	899b      	ldrh	r3, [r3, #12]
 800f0c0:	4619      	mov	r1, r3
 800f0c2:	69bb      	ldr	r3, [r7, #24]
 800f0c4:	fbb3 f3f1 	udiv	r3, r3, r1
 800f0c8:	4413      	add	r3, r2
 800f0ca:	4619      	mov	r1, r3
 800f0cc:	68f8      	ldr	r0, [r7, #12]
 800f0ce:	f7ff fe3b 	bl	800ed48 <move_window>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f0d6:	7ffb      	ldrb	r3, [r7, #31]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	f040 80d4 	bne.w	800f286 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f0e4:	69bb      	ldr	r3, [r7, #24]
 800f0e6:	1c5a      	adds	r2, r3, #1
 800f0e8:	61ba      	str	r2, [r7, #24]
 800f0ea:	68fa      	ldr	r2, [r7, #12]
 800f0ec:	8992      	ldrh	r2, [r2, #12]
 800f0ee:	fbb3 f0f2 	udiv	r0, r3, r2
 800f0f2:	fb00 f202 	mul.w	r2, r0, r2
 800f0f6:	1a9b      	subs	r3, r3, r2
 800f0f8:	440b      	add	r3, r1
 800f0fa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	f003 0301 	and.w	r3, r3, #1
 800f102:	2b00      	cmp	r3, #0
 800f104:	d00d      	beq.n	800f122 <put_fat+0xb8>
 800f106:	697b      	ldr	r3, [r7, #20]
 800f108:	781b      	ldrb	r3, [r3, #0]
 800f10a:	b25b      	sxtb	r3, r3
 800f10c:	f003 030f 	and.w	r3, r3, #15
 800f110:	b25a      	sxtb	r2, r3
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	b2db      	uxtb	r3, r3
 800f116:	011b      	lsls	r3, r3, #4
 800f118:	b25b      	sxtb	r3, r3
 800f11a:	4313      	orrs	r3, r2
 800f11c:	b25b      	sxtb	r3, r3
 800f11e:	b2db      	uxtb	r3, r3
 800f120:	e001      	b.n	800f126 <put_fat+0xbc>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	b2db      	uxtb	r3, r3
 800f126:	697a      	ldr	r2, [r7, #20]
 800f128:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	2201      	movs	r2, #1
 800f12e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f134:	68fb      	ldr	r3, [r7, #12]
 800f136:	899b      	ldrh	r3, [r3, #12]
 800f138:	4619      	mov	r1, r3
 800f13a:	69bb      	ldr	r3, [r7, #24]
 800f13c:	fbb3 f3f1 	udiv	r3, r3, r1
 800f140:	4413      	add	r3, r2
 800f142:	4619      	mov	r1, r3
 800f144:	68f8      	ldr	r0, [r7, #12]
 800f146:	f7ff fdff 	bl	800ed48 <move_window>
 800f14a:	4603      	mov	r3, r0
 800f14c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f14e:	7ffb      	ldrb	r3, [r7, #31]
 800f150:	2b00      	cmp	r3, #0
 800f152:	f040 809a 	bne.w	800f28a <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	899b      	ldrh	r3, [r3, #12]
 800f160:	461a      	mov	r2, r3
 800f162:	69bb      	ldr	r3, [r7, #24]
 800f164:	fbb3 f0f2 	udiv	r0, r3, r2
 800f168:	fb00 f202 	mul.w	r2, r0, r2
 800f16c:	1a9b      	subs	r3, r3, r2
 800f16e:	440b      	add	r3, r1
 800f170:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800f172:	68bb      	ldr	r3, [r7, #8]
 800f174:	f003 0301 	and.w	r3, r3, #1
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d003      	beq.n	800f184 <put_fat+0x11a>
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	091b      	lsrs	r3, r3, #4
 800f180:	b2db      	uxtb	r3, r3
 800f182:	e00e      	b.n	800f1a2 <put_fat+0x138>
 800f184:	697b      	ldr	r3, [r7, #20]
 800f186:	781b      	ldrb	r3, [r3, #0]
 800f188:	b25b      	sxtb	r3, r3
 800f18a:	f023 030f 	bic.w	r3, r3, #15
 800f18e:	b25a      	sxtb	r2, r3
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	0a1b      	lsrs	r3, r3, #8
 800f194:	b25b      	sxtb	r3, r3
 800f196:	f003 030f 	and.w	r3, r3, #15
 800f19a:	b25b      	sxtb	r3, r3
 800f19c:	4313      	orrs	r3, r2
 800f19e:	b25b      	sxtb	r3, r3
 800f1a0:	b2db      	uxtb	r3, r3
 800f1a2:	697a      	ldr	r2, [r7, #20]
 800f1a4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800f1a6:	68fb      	ldr	r3, [r7, #12]
 800f1a8:	2201      	movs	r2, #1
 800f1aa:	70da      	strb	r2, [r3, #3]
			break;
 800f1ac:	e072      	b.n	800f294 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	899b      	ldrh	r3, [r3, #12]
 800f1b6:	085b      	lsrs	r3, r3, #1
 800f1b8:	b29b      	uxth	r3, r3
 800f1ba:	4619      	mov	r1, r3
 800f1bc:	68bb      	ldr	r3, [r7, #8]
 800f1be:	fbb3 f3f1 	udiv	r3, r3, r1
 800f1c2:	4413      	add	r3, r2
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	68f8      	ldr	r0, [r7, #12]
 800f1c8:	f7ff fdbe 	bl	800ed48 <move_window>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f1d0:	7ffb      	ldrb	r3, [r7, #31]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d15b      	bne.n	800f28e <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f1dc:	68bb      	ldr	r3, [r7, #8]
 800f1de:	005b      	lsls	r3, r3, #1
 800f1e0:	68fa      	ldr	r2, [r7, #12]
 800f1e2:	8992      	ldrh	r2, [r2, #12]
 800f1e4:	fbb3 f0f2 	udiv	r0, r3, r2
 800f1e8:	fb00 f202 	mul.w	r2, r0, r2
 800f1ec:	1a9b      	subs	r3, r3, r2
 800f1ee:	440b      	add	r3, r1
 800f1f0:	687a      	ldr	r2, [r7, #4]
 800f1f2:	b292      	uxth	r2, r2
 800f1f4:	4611      	mov	r1, r2
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	f7ff fb31 	bl	800e85e <st_word>
			fs->wflag = 1;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	2201      	movs	r2, #1
 800f200:	70da      	strb	r2, [r3, #3]
			break;
 800f202:	e047      	b.n	800f294 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	899b      	ldrh	r3, [r3, #12]
 800f20c:	089b      	lsrs	r3, r3, #2
 800f20e:	b29b      	uxth	r3, r3
 800f210:	4619      	mov	r1, r3
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	fbb3 f3f1 	udiv	r3, r3, r1
 800f218:	4413      	add	r3, r2
 800f21a:	4619      	mov	r1, r3
 800f21c:	68f8      	ldr	r0, [r7, #12]
 800f21e:	f7ff fd93 	bl	800ed48 <move_window>
 800f222:	4603      	mov	r3, r0
 800f224:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800f226:	7ffb      	ldrb	r3, [r7, #31]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d132      	bne.n	800f292 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800f232:	68fb      	ldr	r3, [r7, #12]
 800f234:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f238:	68bb      	ldr	r3, [r7, #8]
 800f23a:	009b      	lsls	r3, r3, #2
 800f23c:	68fa      	ldr	r2, [r7, #12]
 800f23e:	8992      	ldrh	r2, [r2, #12]
 800f240:	fbb3 f0f2 	udiv	r0, r3, r2
 800f244:	fb00 f202 	mul.w	r2, r0, r2
 800f248:	1a9b      	subs	r3, r3, r2
 800f24a:	440b      	add	r3, r1
 800f24c:	4618      	mov	r0, r3
 800f24e:	f7ff fae3 	bl	800e818 <ld_dword>
 800f252:	4603      	mov	r3, r0
 800f254:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800f258:	4323      	orrs	r3, r4
 800f25a:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800f25c:	68fb      	ldr	r3, [r7, #12]
 800f25e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	009b      	lsls	r3, r3, #2
 800f266:	68fa      	ldr	r2, [r7, #12]
 800f268:	8992      	ldrh	r2, [r2, #12]
 800f26a:	fbb3 f0f2 	udiv	r0, r3, r2
 800f26e:	fb00 f202 	mul.w	r2, r0, r2
 800f272:	1a9b      	subs	r3, r3, r2
 800f274:	440b      	add	r3, r1
 800f276:	6879      	ldr	r1, [r7, #4]
 800f278:	4618      	mov	r0, r3
 800f27a:	f7ff fb0b 	bl	800e894 <st_dword>
			fs->wflag = 1;
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	2201      	movs	r2, #1
 800f282:	70da      	strb	r2, [r3, #3]
			break;
 800f284:	e006      	b.n	800f294 <put_fat+0x22a>
			if (res != FR_OK) break;
 800f286:	bf00      	nop
 800f288:	e004      	b.n	800f294 <put_fat+0x22a>
			if (res != FR_OK) break;
 800f28a:	bf00      	nop
 800f28c:	e002      	b.n	800f294 <put_fat+0x22a>
			if (res != FR_OK) break;
 800f28e:	bf00      	nop
 800f290:	e000      	b.n	800f294 <put_fat+0x22a>
			if (res != FR_OK) break;
 800f292:	bf00      	nop
		}
	}
	return res;
 800f294:	7ffb      	ldrb	r3, [r7, #31]
}
 800f296:	4618      	mov	r0, r3
 800f298:	3724      	adds	r7, #36	; 0x24
 800f29a:	46bd      	mov	sp, r7
 800f29c:	bd90      	pop	{r4, r7, pc}

0800f29e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800f29e:	b580      	push	{r7, lr}
 800f2a0:	b088      	sub	sp, #32
 800f2a2:	af00      	add	r7, sp, #0
 800f2a4:	60f8      	str	r0, [r7, #12]
 800f2a6:	60b9      	str	r1, [r7, #8]
 800f2a8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800f2ae:	68fb      	ldr	r3, [r7, #12]
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	2b01      	cmp	r3, #1
 800f2b8:	d904      	bls.n	800f2c4 <remove_chain+0x26>
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	699b      	ldr	r3, [r3, #24]
 800f2be:	68ba      	ldr	r2, [r7, #8]
 800f2c0:	429a      	cmp	r2, r3
 800f2c2:	d301      	bcc.n	800f2c8 <remove_chain+0x2a>
 800f2c4:	2302      	movs	r3, #2
 800f2c6:	e04b      	b.n	800f360 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	2b00      	cmp	r3, #0
 800f2cc:	d00c      	beq.n	800f2e8 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800f2ce:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f2d2:	6879      	ldr	r1, [r7, #4]
 800f2d4:	69b8      	ldr	r0, [r7, #24]
 800f2d6:	f7ff fec8 	bl	800f06a <put_fat>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800f2de:	7ffb      	ldrb	r3, [r7, #31]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d001      	beq.n	800f2e8 <remove_chain+0x4a>
 800f2e4:	7ffb      	ldrb	r3, [r7, #31]
 800f2e6:	e03b      	b.n	800f360 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800f2e8:	68b9      	ldr	r1, [r7, #8]
 800f2ea:	68f8      	ldr	r0, [r7, #12]
 800f2ec:	f7ff fde9 	bl	800eec2 <get_fat>
 800f2f0:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800f2f2:	697b      	ldr	r3, [r7, #20]
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	d031      	beq.n	800f35c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800f2f8:	697b      	ldr	r3, [r7, #20]
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	d101      	bne.n	800f302 <remove_chain+0x64>
 800f2fe:	2302      	movs	r3, #2
 800f300:	e02e      	b.n	800f360 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800f302:	697b      	ldr	r3, [r7, #20]
 800f304:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f308:	d101      	bne.n	800f30e <remove_chain+0x70>
 800f30a:	2301      	movs	r3, #1
 800f30c:	e028      	b.n	800f360 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800f30e:	2200      	movs	r2, #0
 800f310:	68b9      	ldr	r1, [r7, #8]
 800f312:	69b8      	ldr	r0, [r7, #24]
 800f314:	f7ff fea9 	bl	800f06a <put_fat>
 800f318:	4603      	mov	r3, r0
 800f31a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800f31c:	7ffb      	ldrb	r3, [r7, #31]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d001      	beq.n	800f326 <remove_chain+0x88>
 800f322:	7ffb      	ldrb	r3, [r7, #31]
 800f324:	e01c      	b.n	800f360 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800f326:	69bb      	ldr	r3, [r7, #24]
 800f328:	695a      	ldr	r2, [r3, #20]
 800f32a:	69bb      	ldr	r3, [r7, #24]
 800f32c:	699b      	ldr	r3, [r3, #24]
 800f32e:	3b02      	subs	r3, #2
 800f330:	429a      	cmp	r2, r3
 800f332:	d20b      	bcs.n	800f34c <remove_chain+0xae>
			fs->free_clst++;
 800f334:	69bb      	ldr	r3, [r7, #24]
 800f336:	695b      	ldr	r3, [r3, #20]
 800f338:	1c5a      	adds	r2, r3, #1
 800f33a:	69bb      	ldr	r3, [r7, #24]
 800f33c:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800f33e:	69bb      	ldr	r3, [r7, #24]
 800f340:	791b      	ldrb	r3, [r3, #4]
 800f342:	f043 0301 	orr.w	r3, r3, #1
 800f346:	b2da      	uxtb	r2, r3
 800f348:	69bb      	ldr	r3, [r7, #24]
 800f34a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800f34c:	697b      	ldr	r3, [r7, #20]
 800f34e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800f350:	69bb      	ldr	r3, [r7, #24]
 800f352:	699b      	ldr	r3, [r3, #24]
 800f354:	68ba      	ldr	r2, [r7, #8]
 800f356:	429a      	cmp	r2, r3
 800f358:	d3c6      	bcc.n	800f2e8 <remove_chain+0x4a>
 800f35a:	e000      	b.n	800f35e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800f35c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800f35e:	2300      	movs	r3, #0
}
 800f360:	4618      	mov	r0, r3
 800f362:	3720      	adds	r7, #32
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}

0800f368 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800f368:	b580      	push	{r7, lr}
 800f36a:	b088      	sub	sp, #32
 800f36c:	af00      	add	r7, sp, #0
 800f36e:	6078      	str	r0, [r7, #4]
 800f370:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	681b      	ldr	r3, [r3, #0]
 800f376:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800f378:	683b      	ldr	r3, [r7, #0]
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	d10d      	bne.n	800f39a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800f37e:	693b      	ldr	r3, [r7, #16]
 800f380:	691b      	ldr	r3, [r3, #16]
 800f382:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800f384:	69bb      	ldr	r3, [r7, #24]
 800f386:	2b00      	cmp	r3, #0
 800f388:	d004      	beq.n	800f394 <create_chain+0x2c>
 800f38a:	693b      	ldr	r3, [r7, #16]
 800f38c:	699b      	ldr	r3, [r3, #24]
 800f38e:	69ba      	ldr	r2, [r7, #24]
 800f390:	429a      	cmp	r2, r3
 800f392:	d31b      	bcc.n	800f3cc <create_chain+0x64>
 800f394:	2301      	movs	r3, #1
 800f396:	61bb      	str	r3, [r7, #24]
 800f398:	e018      	b.n	800f3cc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800f39a:	6839      	ldr	r1, [r7, #0]
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f7ff fd90 	bl	800eec2 <get_fat>
 800f3a2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	2b01      	cmp	r3, #1
 800f3a8:	d801      	bhi.n	800f3ae <create_chain+0x46>
 800f3aa:	2301      	movs	r3, #1
 800f3ac:	e070      	b.n	800f490 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800f3ae:	68fb      	ldr	r3, [r7, #12]
 800f3b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f3b4:	d101      	bne.n	800f3ba <create_chain+0x52>
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	e06a      	b.n	800f490 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800f3ba:	693b      	ldr	r3, [r7, #16]
 800f3bc:	699b      	ldr	r3, [r3, #24]
 800f3be:	68fa      	ldr	r2, [r7, #12]
 800f3c0:	429a      	cmp	r2, r3
 800f3c2:	d201      	bcs.n	800f3c8 <create_chain+0x60>
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	e063      	b.n	800f490 <create_chain+0x128>
		scl = clst;
 800f3c8:	683b      	ldr	r3, [r7, #0]
 800f3ca:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800f3cc:	69bb      	ldr	r3, [r7, #24]
 800f3ce:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800f3d0:	69fb      	ldr	r3, [r7, #28]
 800f3d2:	3301      	adds	r3, #1
 800f3d4:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800f3d6:	693b      	ldr	r3, [r7, #16]
 800f3d8:	699b      	ldr	r3, [r3, #24]
 800f3da:	69fa      	ldr	r2, [r7, #28]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d307      	bcc.n	800f3f0 <create_chain+0x88>
				ncl = 2;
 800f3e0:	2302      	movs	r3, #2
 800f3e2:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800f3e4:	69fa      	ldr	r2, [r7, #28]
 800f3e6:	69bb      	ldr	r3, [r7, #24]
 800f3e8:	429a      	cmp	r2, r3
 800f3ea:	d901      	bls.n	800f3f0 <create_chain+0x88>
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	e04f      	b.n	800f490 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800f3f0:	69f9      	ldr	r1, [r7, #28]
 800f3f2:	6878      	ldr	r0, [r7, #4]
 800f3f4:	f7ff fd65 	bl	800eec2 <get_fat>
 800f3f8:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800f3fa:	68fb      	ldr	r3, [r7, #12]
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d00e      	beq.n	800f41e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800f400:	68fb      	ldr	r3, [r7, #12]
 800f402:	2b01      	cmp	r3, #1
 800f404:	d003      	beq.n	800f40e <create_chain+0xa6>
 800f406:	68fb      	ldr	r3, [r7, #12]
 800f408:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f40c:	d101      	bne.n	800f412 <create_chain+0xaa>
 800f40e:	68fb      	ldr	r3, [r7, #12]
 800f410:	e03e      	b.n	800f490 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800f412:	69fa      	ldr	r2, [r7, #28]
 800f414:	69bb      	ldr	r3, [r7, #24]
 800f416:	429a      	cmp	r2, r3
 800f418:	d1da      	bne.n	800f3d0 <create_chain+0x68>
 800f41a:	2300      	movs	r3, #0
 800f41c:	e038      	b.n	800f490 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800f41e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800f420:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f424:	69f9      	ldr	r1, [r7, #28]
 800f426:	6938      	ldr	r0, [r7, #16]
 800f428:	f7ff fe1f 	bl	800f06a <put_fat>
 800f42c:	4603      	mov	r3, r0
 800f42e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800f430:	7dfb      	ldrb	r3, [r7, #23]
 800f432:	2b00      	cmp	r3, #0
 800f434:	d109      	bne.n	800f44a <create_chain+0xe2>
 800f436:	683b      	ldr	r3, [r7, #0]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d006      	beq.n	800f44a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800f43c:	69fa      	ldr	r2, [r7, #28]
 800f43e:	6839      	ldr	r1, [r7, #0]
 800f440:	6938      	ldr	r0, [r7, #16]
 800f442:	f7ff fe12 	bl	800f06a <put_fat>
 800f446:	4603      	mov	r3, r0
 800f448:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800f44a:	7dfb      	ldrb	r3, [r7, #23]
 800f44c:	2b00      	cmp	r3, #0
 800f44e:	d116      	bne.n	800f47e <create_chain+0x116>
		fs->last_clst = ncl;
 800f450:	693b      	ldr	r3, [r7, #16]
 800f452:	69fa      	ldr	r2, [r7, #28]
 800f454:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800f456:	693b      	ldr	r3, [r7, #16]
 800f458:	695a      	ldr	r2, [r3, #20]
 800f45a:	693b      	ldr	r3, [r7, #16]
 800f45c:	699b      	ldr	r3, [r3, #24]
 800f45e:	3b02      	subs	r3, #2
 800f460:	429a      	cmp	r2, r3
 800f462:	d804      	bhi.n	800f46e <create_chain+0x106>
 800f464:	693b      	ldr	r3, [r7, #16]
 800f466:	695b      	ldr	r3, [r3, #20]
 800f468:	1e5a      	subs	r2, r3, #1
 800f46a:	693b      	ldr	r3, [r7, #16]
 800f46c:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800f46e:	693b      	ldr	r3, [r7, #16]
 800f470:	791b      	ldrb	r3, [r3, #4]
 800f472:	f043 0301 	orr.w	r3, r3, #1
 800f476:	b2da      	uxtb	r2, r3
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	711a      	strb	r2, [r3, #4]
 800f47c:	e007      	b.n	800f48e <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800f47e:	7dfb      	ldrb	r3, [r7, #23]
 800f480:	2b01      	cmp	r3, #1
 800f482:	d102      	bne.n	800f48a <create_chain+0x122>
 800f484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f488:	e000      	b.n	800f48c <create_chain+0x124>
 800f48a:	2301      	movs	r3, #1
 800f48c:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800f48e:	69fb      	ldr	r3, [r7, #28]
}
 800f490:	4618      	mov	r0, r3
 800f492:	3720      	adds	r7, #32
 800f494:	46bd      	mov	sp, r7
 800f496:	bd80      	pop	{r7, pc}

0800f498 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800f498:	b480      	push	{r7}
 800f49a:	b087      	sub	sp, #28
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
 800f4a0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	681b      	ldr	r3, [r3, #0]
 800f4a6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4ac:	3304      	adds	r3, #4
 800f4ae:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800f4b0:	68fb      	ldr	r3, [r7, #12]
 800f4b2:	899b      	ldrh	r3, [r3, #12]
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	683b      	ldr	r3, [r7, #0]
 800f4b8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4bc:	68fa      	ldr	r2, [r7, #12]
 800f4be:	8952      	ldrh	r2, [r2, #10]
 800f4c0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f4c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f4c6:	693b      	ldr	r3, [r7, #16]
 800f4c8:	1d1a      	adds	r2, r3, #4
 800f4ca:	613a      	str	r2, [r7, #16]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d101      	bne.n	800f4da <clmt_clust+0x42>
 800f4d6:	2300      	movs	r3, #0
 800f4d8:	e010      	b.n	800f4fc <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800f4da:	697a      	ldr	r2, [r7, #20]
 800f4dc:	68bb      	ldr	r3, [r7, #8]
 800f4de:	429a      	cmp	r2, r3
 800f4e0:	d307      	bcc.n	800f4f2 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 800f4e2:	697a      	ldr	r2, [r7, #20]
 800f4e4:	68bb      	ldr	r3, [r7, #8]
 800f4e6:	1ad3      	subs	r3, r2, r3
 800f4e8:	617b      	str	r3, [r7, #20]
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	3304      	adds	r3, #4
 800f4ee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800f4f0:	e7e9      	b.n	800f4c6 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 800f4f2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800f4f4:	693b      	ldr	r3, [r7, #16]
 800f4f6:	681a      	ldr	r2, [r3, #0]
 800f4f8:	697b      	ldr	r3, [r7, #20]
 800f4fa:	4413      	add	r3, r2
}
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	371c      	adds	r7, #28
 800f500:	46bd      	mov	sp, r7
 800f502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f506:	4770      	bx	lr

0800f508 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800f508:	b580      	push	{r7, lr}
 800f50a:	b086      	sub	sp, #24
 800f50c:	af00      	add	r7, sp, #0
 800f50e:	6078      	str	r0, [r7, #4]
 800f510:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800f512:	687b      	ldr	r3, [r7, #4]
 800f514:	681b      	ldr	r3, [r3, #0]
 800f516:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800f518:	683b      	ldr	r3, [r7, #0]
 800f51a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f51e:	d204      	bcs.n	800f52a <dir_sdi+0x22>
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	f003 031f 	and.w	r3, r3, #31
 800f526:	2b00      	cmp	r3, #0
 800f528:	d001      	beq.n	800f52e <dir_sdi+0x26>
		return FR_INT_ERR;
 800f52a:	2302      	movs	r3, #2
 800f52c:	e071      	b.n	800f612 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	683a      	ldr	r2, [r7, #0]
 800f532:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	689b      	ldr	r3, [r3, #8]
 800f538:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800f53a:	697b      	ldr	r3, [r7, #20]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d106      	bne.n	800f54e <dir_sdi+0x46>
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	781b      	ldrb	r3, [r3, #0]
 800f544:	2b02      	cmp	r3, #2
 800f546:	d902      	bls.n	800f54e <dir_sdi+0x46>
		clst = fs->dirbase;
 800f548:	693b      	ldr	r3, [r7, #16]
 800f54a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f54c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d10c      	bne.n	800f56e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	095b      	lsrs	r3, r3, #5
 800f558:	693a      	ldr	r2, [r7, #16]
 800f55a:	8912      	ldrh	r2, [r2, #8]
 800f55c:	4293      	cmp	r3, r2
 800f55e:	d301      	bcc.n	800f564 <dir_sdi+0x5c>
 800f560:	2302      	movs	r3, #2
 800f562:	e056      	b.n	800f612 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 800f564:	693b      	ldr	r3, [r7, #16]
 800f566:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	61da      	str	r2, [r3, #28]
 800f56c:	e02d      	b.n	800f5ca <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800f56e:	693b      	ldr	r3, [r7, #16]
 800f570:	895b      	ldrh	r3, [r3, #10]
 800f572:	461a      	mov	r2, r3
 800f574:	693b      	ldr	r3, [r7, #16]
 800f576:	899b      	ldrh	r3, [r3, #12]
 800f578:	fb02 f303 	mul.w	r3, r2, r3
 800f57c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f57e:	e019      	b.n	800f5b4 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	6979      	ldr	r1, [r7, #20]
 800f584:	4618      	mov	r0, r3
 800f586:	f7ff fc9c 	bl	800eec2 <get_fat>
 800f58a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f592:	d101      	bne.n	800f598 <dir_sdi+0x90>
 800f594:	2301      	movs	r3, #1
 800f596:	e03c      	b.n	800f612 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800f598:	697b      	ldr	r3, [r7, #20]
 800f59a:	2b01      	cmp	r3, #1
 800f59c:	d904      	bls.n	800f5a8 <dir_sdi+0xa0>
 800f59e:	693b      	ldr	r3, [r7, #16]
 800f5a0:	699b      	ldr	r3, [r3, #24]
 800f5a2:	697a      	ldr	r2, [r7, #20]
 800f5a4:	429a      	cmp	r2, r3
 800f5a6:	d301      	bcc.n	800f5ac <dir_sdi+0xa4>
 800f5a8:	2302      	movs	r3, #2
 800f5aa:	e032      	b.n	800f612 <dir_sdi+0x10a>
			ofs -= csz;
 800f5ac:	683a      	ldr	r2, [r7, #0]
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	1ad3      	subs	r3, r2, r3
 800f5b2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800f5b4:	683a      	ldr	r2, [r7, #0]
 800f5b6:	68fb      	ldr	r3, [r7, #12]
 800f5b8:	429a      	cmp	r2, r3
 800f5ba:	d2e1      	bcs.n	800f580 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800f5bc:	6979      	ldr	r1, [r7, #20]
 800f5be:	6938      	ldr	r0, [r7, #16]
 800f5c0:	f7ff fc60 	bl	800ee84 <clust2sect>
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	697a      	ldr	r2, [r7, #20]
 800f5ce:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	69db      	ldr	r3, [r3, #28]
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d101      	bne.n	800f5dc <dir_sdi+0xd4>
 800f5d8:	2302      	movs	r3, #2
 800f5da:	e01a      	b.n	800f612 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	69da      	ldr	r2, [r3, #28]
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	899b      	ldrh	r3, [r3, #12]
 800f5e4:	4619      	mov	r1, r3
 800f5e6:	683b      	ldr	r3, [r7, #0]
 800f5e8:	fbb3 f3f1 	udiv	r3, r3, r1
 800f5ec:	441a      	add	r2, r3
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800f5f2:	693b      	ldr	r3, [r7, #16]
 800f5f4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f5f8:	693b      	ldr	r3, [r7, #16]
 800f5fa:	899b      	ldrh	r3, [r3, #12]
 800f5fc:	461a      	mov	r2, r3
 800f5fe:	683b      	ldr	r3, [r7, #0]
 800f600:	fbb3 f0f2 	udiv	r0, r3, r2
 800f604:	fb00 f202 	mul.w	r2, r0, r2
 800f608:	1a9b      	subs	r3, r3, r2
 800f60a:	18ca      	adds	r2, r1, r3
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f610:	2300      	movs	r3, #0
}
 800f612:	4618      	mov	r0, r3
 800f614:	3718      	adds	r7, #24
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}

0800f61a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f61a:	b580      	push	{r7, lr}
 800f61c:	b086      	sub	sp, #24
 800f61e:	af00      	add	r7, sp, #0
 800f620:	6078      	str	r0, [r7, #4]
 800f622:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	695b      	ldr	r3, [r3, #20]
 800f62e:	3320      	adds	r3, #32
 800f630:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	69db      	ldr	r3, [r3, #28]
 800f636:	2b00      	cmp	r3, #0
 800f638:	d003      	beq.n	800f642 <dir_next+0x28>
 800f63a:	68bb      	ldr	r3, [r7, #8]
 800f63c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f640:	d301      	bcc.n	800f646 <dir_next+0x2c>
 800f642:	2304      	movs	r3, #4
 800f644:	e0bb      	b.n	800f7be <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	899b      	ldrh	r3, [r3, #12]
 800f64a:	461a      	mov	r2, r3
 800f64c:	68bb      	ldr	r3, [r7, #8]
 800f64e:	fbb3 f1f2 	udiv	r1, r3, r2
 800f652:	fb01 f202 	mul.w	r2, r1, r2
 800f656:	1a9b      	subs	r3, r3, r2
 800f658:	2b00      	cmp	r3, #0
 800f65a:	f040 809d 	bne.w	800f798 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	69db      	ldr	r3, [r3, #28]
 800f662:	1c5a      	adds	r2, r3, #1
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	699b      	ldr	r3, [r3, #24]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d10b      	bne.n	800f688 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	095b      	lsrs	r3, r3, #5
 800f674:	68fa      	ldr	r2, [r7, #12]
 800f676:	8912      	ldrh	r2, [r2, #8]
 800f678:	4293      	cmp	r3, r2
 800f67a:	f0c0 808d 	bcc.w	800f798 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2200      	movs	r2, #0
 800f682:	61da      	str	r2, [r3, #28]
 800f684:	2304      	movs	r3, #4
 800f686:	e09a      	b.n	800f7be <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f688:	68fb      	ldr	r3, [r7, #12]
 800f68a:	899b      	ldrh	r3, [r3, #12]
 800f68c:	461a      	mov	r2, r3
 800f68e:	68bb      	ldr	r3, [r7, #8]
 800f690:	fbb3 f3f2 	udiv	r3, r3, r2
 800f694:	68fa      	ldr	r2, [r7, #12]
 800f696:	8952      	ldrh	r2, [r2, #10]
 800f698:	3a01      	subs	r2, #1
 800f69a:	4013      	ands	r3, r2
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d17b      	bne.n	800f798 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f6a0:	687a      	ldr	r2, [r7, #4]
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	699b      	ldr	r3, [r3, #24]
 800f6a6:	4619      	mov	r1, r3
 800f6a8:	4610      	mov	r0, r2
 800f6aa:	f7ff fc0a 	bl	800eec2 <get_fat>
 800f6ae:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f6b0:	697b      	ldr	r3, [r7, #20]
 800f6b2:	2b01      	cmp	r3, #1
 800f6b4:	d801      	bhi.n	800f6ba <dir_next+0xa0>
 800f6b6:	2302      	movs	r3, #2
 800f6b8:	e081      	b.n	800f7be <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f6ba:	697b      	ldr	r3, [r7, #20]
 800f6bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f6c0:	d101      	bne.n	800f6c6 <dir_next+0xac>
 800f6c2:	2301      	movs	r3, #1
 800f6c4:	e07b      	b.n	800f7be <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	699b      	ldr	r3, [r3, #24]
 800f6ca:	697a      	ldr	r2, [r7, #20]
 800f6cc:	429a      	cmp	r2, r3
 800f6ce:	d359      	bcc.n	800f784 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f6d0:	683b      	ldr	r3, [r7, #0]
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	d104      	bne.n	800f6e0 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	2200      	movs	r2, #0
 800f6da:	61da      	str	r2, [r3, #28]
 800f6dc:	2304      	movs	r3, #4
 800f6de:	e06e      	b.n	800f7be <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f6e0:	687a      	ldr	r2, [r7, #4]
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	699b      	ldr	r3, [r3, #24]
 800f6e6:	4619      	mov	r1, r3
 800f6e8:	4610      	mov	r0, r2
 800f6ea:	f7ff fe3d 	bl	800f368 <create_chain>
 800f6ee:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f6f0:	697b      	ldr	r3, [r7, #20]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d101      	bne.n	800f6fa <dir_next+0xe0>
 800f6f6:	2307      	movs	r3, #7
 800f6f8:	e061      	b.n	800f7be <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f6fa:	697b      	ldr	r3, [r7, #20]
 800f6fc:	2b01      	cmp	r3, #1
 800f6fe:	d101      	bne.n	800f704 <dir_next+0xea>
 800f700:	2302      	movs	r3, #2
 800f702:	e05c      	b.n	800f7be <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f704:	697b      	ldr	r3, [r7, #20]
 800f706:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f70a:	d101      	bne.n	800f710 <dir_next+0xf6>
 800f70c:	2301      	movs	r3, #1
 800f70e:	e056      	b.n	800f7be <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f710:	68f8      	ldr	r0, [r7, #12]
 800f712:	f7ff fad5 	bl	800ecc0 <sync_window>
 800f716:	4603      	mov	r3, r0
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d001      	beq.n	800f720 <dir_next+0x106>
 800f71c:	2301      	movs	r3, #1
 800f71e:	e04e      	b.n	800f7be <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	f103 0034 	add.w	r0, r3, #52	; 0x34
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	899b      	ldrh	r3, [r3, #12]
 800f72a:	461a      	mov	r2, r3
 800f72c:	2100      	movs	r1, #0
 800f72e:	f7ff f8fe 	bl	800e92e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f732:	2300      	movs	r3, #0
 800f734:	613b      	str	r3, [r7, #16]
 800f736:	6979      	ldr	r1, [r7, #20]
 800f738:	68f8      	ldr	r0, [r7, #12]
 800f73a:	f7ff fba3 	bl	800ee84 <clust2sect>
 800f73e:	4602      	mov	r2, r0
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	631a      	str	r2, [r3, #48]	; 0x30
 800f744:	e012      	b.n	800f76c <dir_next+0x152>
						fs->wflag = 1;
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	2201      	movs	r2, #1
 800f74a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f74c:	68f8      	ldr	r0, [r7, #12]
 800f74e:	f7ff fab7 	bl	800ecc0 <sync_window>
 800f752:	4603      	mov	r3, r0
 800f754:	2b00      	cmp	r3, #0
 800f756:	d001      	beq.n	800f75c <dir_next+0x142>
 800f758:	2301      	movs	r3, #1
 800f75a:	e030      	b.n	800f7be <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f75c:	693b      	ldr	r3, [r7, #16]
 800f75e:	3301      	adds	r3, #1
 800f760:	613b      	str	r3, [r7, #16]
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f766:	1c5a      	adds	r2, r3, #1
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	631a      	str	r2, [r3, #48]	; 0x30
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	895b      	ldrh	r3, [r3, #10]
 800f770:	461a      	mov	r2, r3
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	4293      	cmp	r3, r2
 800f776:	d3e6      	bcc.n	800f746 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f77c:	693b      	ldr	r3, [r7, #16]
 800f77e:	1ad2      	subs	r2, r2, r3
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	697a      	ldr	r2, [r7, #20]
 800f788:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f78a:	6979      	ldr	r1, [r7, #20]
 800f78c:	68f8      	ldr	r0, [r7, #12]
 800f78e:	f7ff fb79 	bl	800ee84 <clust2sect>
 800f792:	4602      	mov	r2, r0
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	68ba      	ldr	r2, [r7, #8]
 800f79c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800f7a4:	68fb      	ldr	r3, [r7, #12]
 800f7a6:	899b      	ldrh	r3, [r3, #12]
 800f7a8:	461a      	mov	r2, r3
 800f7aa:	68bb      	ldr	r3, [r7, #8]
 800f7ac:	fbb3 f0f2 	udiv	r0, r3, r2
 800f7b0:	fb00 f202 	mul.w	r2, r0, r2
 800f7b4:	1a9b      	subs	r3, r3, r2
 800f7b6:	18ca      	adds	r2, r1, r3
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f7bc:	2300      	movs	r3, #0
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3718      	adds	r7, #24
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}

0800f7c6 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f7c6:	b580      	push	{r7, lr}
 800f7c8:	b086      	sub	sp, #24
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	6078      	str	r0, [r7, #4]
 800f7ce:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	681b      	ldr	r3, [r3, #0]
 800f7d4:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f7d6:	2100      	movs	r1, #0
 800f7d8:	6878      	ldr	r0, [r7, #4]
 800f7da:	f7ff fe95 	bl	800f508 <dir_sdi>
 800f7de:	4603      	mov	r3, r0
 800f7e0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f7e2:	7dfb      	ldrb	r3, [r7, #23]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d12b      	bne.n	800f840 <dir_alloc+0x7a>
		n = 0;
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	69db      	ldr	r3, [r3, #28]
 800f7f0:	4619      	mov	r1, r3
 800f7f2:	68f8      	ldr	r0, [r7, #12]
 800f7f4:	f7ff faa8 	bl	800ed48 <move_window>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f7fc:	7dfb      	ldrb	r3, [r7, #23]
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d11d      	bne.n	800f83e <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	6a1b      	ldr	r3, [r3, #32]
 800f806:	781b      	ldrb	r3, [r3, #0]
 800f808:	2be5      	cmp	r3, #229	; 0xe5
 800f80a:	d004      	beq.n	800f816 <dir_alloc+0x50>
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	6a1b      	ldr	r3, [r3, #32]
 800f810:	781b      	ldrb	r3, [r3, #0]
 800f812:	2b00      	cmp	r3, #0
 800f814:	d107      	bne.n	800f826 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f816:	693b      	ldr	r3, [r7, #16]
 800f818:	3301      	adds	r3, #1
 800f81a:	613b      	str	r3, [r7, #16]
 800f81c:	693a      	ldr	r2, [r7, #16]
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	429a      	cmp	r2, r3
 800f822:	d102      	bne.n	800f82a <dir_alloc+0x64>
 800f824:	e00c      	b.n	800f840 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f826:	2300      	movs	r3, #0
 800f828:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f82a:	2101      	movs	r1, #1
 800f82c:	6878      	ldr	r0, [r7, #4]
 800f82e:	f7ff fef4 	bl	800f61a <dir_next>
 800f832:	4603      	mov	r3, r0
 800f834:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f836:	7dfb      	ldrb	r3, [r7, #23]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d0d7      	beq.n	800f7ec <dir_alloc+0x26>
 800f83c:	e000      	b.n	800f840 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f83e:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f840:	7dfb      	ldrb	r3, [r7, #23]
 800f842:	2b04      	cmp	r3, #4
 800f844:	d101      	bne.n	800f84a <dir_alloc+0x84>
 800f846:	2307      	movs	r3, #7
 800f848:	75fb      	strb	r3, [r7, #23]
	return res;
 800f84a:	7dfb      	ldrb	r3, [r7, #23]
}
 800f84c:	4618      	mov	r0, r3
 800f84e:	3718      	adds	r7, #24
 800f850:	46bd      	mov	sp, r7
 800f852:	bd80      	pop	{r7, pc}

0800f854 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f854:	b580      	push	{r7, lr}
 800f856:	b084      	sub	sp, #16
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f85e:	683b      	ldr	r3, [r7, #0]
 800f860:	331a      	adds	r3, #26
 800f862:	4618      	mov	r0, r3
 800f864:	f7fe ffc0 	bl	800e7e8 <ld_word>
 800f868:	4603      	mov	r3, r0
 800f86a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f86c:	687b      	ldr	r3, [r7, #4]
 800f86e:	781b      	ldrb	r3, [r3, #0]
 800f870:	2b03      	cmp	r3, #3
 800f872:	d109      	bne.n	800f888 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f874:	683b      	ldr	r3, [r7, #0]
 800f876:	3314      	adds	r3, #20
 800f878:	4618      	mov	r0, r3
 800f87a:	f7fe ffb5 	bl	800e7e8 <ld_word>
 800f87e:	4603      	mov	r3, r0
 800f880:	041b      	lsls	r3, r3, #16
 800f882:	68fa      	ldr	r2, [r7, #12]
 800f884:	4313      	orrs	r3, r2
 800f886:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f888:	68fb      	ldr	r3, [r7, #12]
}
 800f88a:	4618      	mov	r0, r3
 800f88c:	3710      	adds	r7, #16
 800f88e:	46bd      	mov	sp, r7
 800f890:	bd80      	pop	{r7, pc}

0800f892 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f892:	b580      	push	{r7, lr}
 800f894:	b084      	sub	sp, #16
 800f896:	af00      	add	r7, sp, #0
 800f898:	60f8      	str	r0, [r7, #12]
 800f89a:	60b9      	str	r1, [r7, #8]
 800f89c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f89e:	68bb      	ldr	r3, [r7, #8]
 800f8a0:	331a      	adds	r3, #26
 800f8a2:	687a      	ldr	r2, [r7, #4]
 800f8a4:	b292      	uxth	r2, r2
 800f8a6:	4611      	mov	r1, r2
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7fe ffd8 	bl	800e85e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	781b      	ldrb	r3, [r3, #0]
 800f8b2:	2b03      	cmp	r3, #3
 800f8b4:	d109      	bne.n	800f8ca <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f8b6:	68bb      	ldr	r3, [r7, #8]
 800f8b8:	f103 0214 	add.w	r2, r3, #20
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	0c1b      	lsrs	r3, r3, #16
 800f8c0:	b29b      	uxth	r3, r3
 800f8c2:	4619      	mov	r1, r3
 800f8c4:	4610      	mov	r0, r2
 800f8c6:	f7fe ffca 	bl	800e85e <st_word>
	}
}
 800f8ca:	bf00      	nop
 800f8cc:	3710      	adds	r7, #16
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}

0800f8d2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f8d2:	b580      	push	{r7, lr}
 800f8d4:	b086      	sub	sp, #24
 800f8d6:	af00      	add	r7, sp, #0
 800f8d8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	681b      	ldr	r3, [r3, #0]
 800f8de:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f8e0:	2100      	movs	r1, #0
 800f8e2:	6878      	ldr	r0, [r7, #4]
 800f8e4:	f7ff fe10 	bl	800f508 <dir_sdi>
 800f8e8:	4603      	mov	r3, r0
 800f8ea:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f8ec:	7dfb      	ldrb	r3, [r7, #23]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d001      	beq.n	800f8f6 <dir_find+0x24>
 800f8f2:	7dfb      	ldrb	r3, [r7, #23]
 800f8f4:	e03e      	b.n	800f974 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	69db      	ldr	r3, [r3, #28]
 800f8fa:	4619      	mov	r1, r3
 800f8fc:	6938      	ldr	r0, [r7, #16]
 800f8fe:	f7ff fa23 	bl	800ed48 <move_window>
 800f902:	4603      	mov	r3, r0
 800f904:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f906:	7dfb      	ldrb	r3, [r7, #23]
 800f908:	2b00      	cmp	r3, #0
 800f90a:	d12f      	bne.n	800f96c <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6a1b      	ldr	r3, [r3, #32]
 800f910:	781b      	ldrb	r3, [r3, #0]
 800f912:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f914:	7bfb      	ldrb	r3, [r7, #15]
 800f916:	2b00      	cmp	r3, #0
 800f918:	d102      	bne.n	800f920 <dir_find+0x4e>
 800f91a:	2304      	movs	r3, #4
 800f91c:	75fb      	strb	r3, [r7, #23]
 800f91e:	e028      	b.n	800f972 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6a1b      	ldr	r3, [r3, #32]
 800f924:	330b      	adds	r3, #11
 800f926:	781b      	ldrb	r3, [r3, #0]
 800f928:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f92c:	b2da      	uxtb	r2, r3
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6a1b      	ldr	r3, [r3, #32]
 800f936:	330b      	adds	r3, #11
 800f938:	781b      	ldrb	r3, [r3, #0]
 800f93a:	f003 0308 	and.w	r3, r3, #8
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d10a      	bne.n	800f958 <dir_find+0x86>
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6a18      	ldr	r0, [r3, #32]
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	3324      	adds	r3, #36	; 0x24
 800f94a:	220b      	movs	r2, #11
 800f94c:	4619      	mov	r1, r3
 800f94e:	f7ff f809 	bl	800e964 <mem_cmp>
 800f952:	4603      	mov	r3, r0
 800f954:	2b00      	cmp	r3, #0
 800f956:	d00b      	beq.n	800f970 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f958:	2100      	movs	r1, #0
 800f95a:	6878      	ldr	r0, [r7, #4]
 800f95c:	f7ff fe5d 	bl	800f61a <dir_next>
 800f960:	4603      	mov	r3, r0
 800f962:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f964:	7dfb      	ldrb	r3, [r7, #23]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d0c5      	beq.n	800f8f6 <dir_find+0x24>
 800f96a:	e002      	b.n	800f972 <dir_find+0xa0>
		if (res != FR_OK) break;
 800f96c:	bf00      	nop
 800f96e:	e000      	b.n	800f972 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800f970:	bf00      	nop

	return res;
 800f972:	7dfb      	ldrb	r3, [r7, #23]
}
 800f974:	4618      	mov	r0, r3
 800f976:	3718      	adds	r7, #24
 800f978:	46bd      	mov	sp, r7
 800f97a:	bd80      	pop	{r7, pc}

0800f97c <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f97c:	b580      	push	{r7, lr}
 800f97e:	b084      	sub	sp, #16
 800f980:	af00      	add	r7, sp, #0
 800f982:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800f98a:	2101      	movs	r1, #1
 800f98c:	6878      	ldr	r0, [r7, #4]
 800f98e:	f7ff ff1a 	bl	800f7c6 <dir_alloc>
 800f992:	4603      	mov	r3, r0
 800f994:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f996:	7bfb      	ldrb	r3, [r7, #15]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d11c      	bne.n	800f9d6 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	69db      	ldr	r3, [r3, #28]
 800f9a0:	4619      	mov	r1, r3
 800f9a2:	68b8      	ldr	r0, [r7, #8]
 800f9a4:	f7ff f9d0 	bl	800ed48 <move_window>
 800f9a8:	4603      	mov	r3, r0
 800f9aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800f9ac:	7bfb      	ldrb	r3, [r7, #15]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d111      	bne.n	800f9d6 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	6a1b      	ldr	r3, [r3, #32]
 800f9b6:	2220      	movs	r2, #32
 800f9b8:	2100      	movs	r1, #0
 800f9ba:	4618      	mov	r0, r3
 800f9bc:	f7fe ffb7 	bl	800e92e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	6a18      	ldr	r0, [r3, #32]
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	3324      	adds	r3, #36	; 0x24
 800f9c8:	220b      	movs	r2, #11
 800f9ca:	4619      	mov	r1, r3
 800f9cc:	f7fe ff8e 	bl	800e8ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800f9d0:	68bb      	ldr	r3, [r7, #8]
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f9d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9d8:	4618      	mov	r0, r3
 800f9da:	3710      	adds	r7, #16
 800f9dc:	46bd      	mov	sp, r7
 800f9de:	bd80      	pop	{r7, pc}

0800f9e0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800f9e0:	b580      	push	{r7, lr}
 800f9e2:	b088      	sub	sp, #32
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800f9ea:	683b      	ldr	r3, [r7, #0]
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	60fb      	str	r3, [r7, #12]
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	3324      	adds	r3, #36	; 0x24
 800f9f4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800f9f6:	220b      	movs	r2, #11
 800f9f8:	2120      	movs	r1, #32
 800f9fa:	68b8      	ldr	r0, [r7, #8]
 800f9fc:	f7fe ff97 	bl	800e92e <mem_set>
	si = i = 0; ni = 8;
 800fa00:	2300      	movs	r3, #0
 800fa02:	613b      	str	r3, [r7, #16]
 800fa04:	693b      	ldr	r3, [r7, #16]
 800fa06:	61fb      	str	r3, [r7, #28]
 800fa08:	2308      	movs	r3, #8
 800fa0a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800fa0c:	69fb      	ldr	r3, [r7, #28]
 800fa0e:	1c5a      	adds	r2, r3, #1
 800fa10:	61fa      	str	r2, [r7, #28]
 800fa12:	68fa      	ldr	r2, [r7, #12]
 800fa14:	4413      	add	r3, r2
 800fa16:	781b      	ldrb	r3, [r3, #0]
 800fa18:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fa1a:	7efb      	ldrb	r3, [r7, #27]
 800fa1c:	2b20      	cmp	r3, #32
 800fa1e:	d94e      	bls.n	800fabe <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800fa20:	7efb      	ldrb	r3, [r7, #27]
 800fa22:	2b2f      	cmp	r3, #47	; 0x2f
 800fa24:	d006      	beq.n	800fa34 <create_name+0x54>
 800fa26:	7efb      	ldrb	r3, [r7, #27]
 800fa28:	2b5c      	cmp	r3, #92	; 0x5c
 800fa2a:	d110      	bne.n	800fa4e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fa2c:	e002      	b.n	800fa34 <create_name+0x54>
 800fa2e:	69fb      	ldr	r3, [r7, #28]
 800fa30:	3301      	adds	r3, #1
 800fa32:	61fb      	str	r3, [r7, #28]
 800fa34:	68fa      	ldr	r2, [r7, #12]
 800fa36:	69fb      	ldr	r3, [r7, #28]
 800fa38:	4413      	add	r3, r2
 800fa3a:	781b      	ldrb	r3, [r3, #0]
 800fa3c:	2b2f      	cmp	r3, #47	; 0x2f
 800fa3e:	d0f6      	beq.n	800fa2e <create_name+0x4e>
 800fa40:	68fa      	ldr	r2, [r7, #12]
 800fa42:	69fb      	ldr	r3, [r7, #28]
 800fa44:	4413      	add	r3, r2
 800fa46:	781b      	ldrb	r3, [r3, #0]
 800fa48:	2b5c      	cmp	r3, #92	; 0x5c
 800fa4a:	d0f0      	beq.n	800fa2e <create_name+0x4e>
			break;
 800fa4c:	e038      	b.n	800fac0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800fa4e:	7efb      	ldrb	r3, [r7, #27]
 800fa50:	2b2e      	cmp	r3, #46	; 0x2e
 800fa52:	d003      	beq.n	800fa5c <create_name+0x7c>
 800fa54:	693a      	ldr	r2, [r7, #16]
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	d30c      	bcc.n	800fa76 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	2b0b      	cmp	r3, #11
 800fa60:	d002      	beq.n	800fa68 <create_name+0x88>
 800fa62:	7efb      	ldrb	r3, [r7, #27]
 800fa64:	2b2e      	cmp	r3, #46	; 0x2e
 800fa66:	d001      	beq.n	800fa6c <create_name+0x8c>
 800fa68:	2306      	movs	r3, #6
 800fa6a:	e044      	b.n	800faf6 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800fa6c:	2308      	movs	r3, #8
 800fa6e:	613b      	str	r3, [r7, #16]
 800fa70:	230b      	movs	r3, #11
 800fa72:	617b      	str	r3, [r7, #20]
			continue;
 800fa74:	e022      	b.n	800fabc <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800fa76:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	da04      	bge.n	800fa88 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800fa7e:	7efb      	ldrb	r3, [r7, #27]
 800fa80:	3b80      	subs	r3, #128	; 0x80
 800fa82:	4a1f      	ldr	r2, [pc, #124]	; (800fb00 <create_name+0x120>)
 800fa84:	5cd3      	ldrb	r3, [r2, r3]
 800fa86:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800fa88:	7efb      	ldrb	r3, [r7, #27]
 800fa8a:	4619      	mov	r1, r3
 800fa8c:	481d      	ldr	r0, [pc, #116]	; (800fb04 <create_name+0x124>)
 800fa8e:	f7fe ff90 	bl	800e9b2 <chk_chr>
 800fa92:	4603      	mov	r3, r0
 800fa94:	2b00      	cmp	r3, #0
 800fa96:	d001      	beq.n	800fa9c <create_name+0xbc>
 800fa98:	2306      	movs	r3, #6
 800fa9a:	e02c      	b.n	800faf6 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800fa9c:	7efb      	ldrb	r3, [r7, #27]
 800fa9e:	2b60      	cmp	r3, #96	; 0x60
 800faa0:	d905      	bls.n	800faae <create_name+0xce>
 800faa2:	7efb      	ldrb	r3, [r7, #27]
 800faa4:	2b7a      	cmp	r3, #122	; 0x7a
 800faa6:	d802      	bhi.n	800faae <create_name+0xce>
 800faa8:	7efb      	ldrb	r3, [r7, #27]
 800faaa:	3b20      	subs	r3, #32
 800faac:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800faae:	693b      	ldr	r3, [r7, #16]
 800fab0:	1c5a      	adds	r2, r3, #1
 800fab2:	613a      	str	r2, [r7, #16]
 800fab4:	68ba      	ldr	r2, [r7, #8]
 800fab6:	4413      	add	r3, r2
 800fab8:	7efa      	ldrb	r2, [r7, #27]
 800faba:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800fabc:	e7a6      	b.n	800fa0c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800fabe:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800fac0:	68fa      	ldr	r2, [r7, #12]
 800fac2:	69fb      	ldr	r3, [r7, #28]
 800fac4:	441a      	add	r2, r3
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800faca:	693b      	ldr	r3, [r7, #16]
 800facc:	2b00      	cmp	r3, #0
 800face:	d101      	bne.n	800fad4 <create_name+0xf4>
 800fad0:	2306      	movs	r3, #6
 800fad2:	e010      	b.n	800faf6 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fad4:	68bb      	ldr	r3, [r7, #8]
 800fad6:	781b      	ldrb	r3, [r3, #0]
 800fad8:	2be5      	cmp	r3, #229	; 0xe5
 800fada:	d102      	bne.n	800fae2 <create_name+0x102>
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	2205      	movs	r2, #5
 800fae0:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fae2:	7efb      	ldrb	r3, [r7, #27]
 800fae4:	2b20      	cmp	r3, #32
 800fae6:	d801      	bhi.n	800faec <create_name+0x10c>
 800fae8:	2204      	movs	r2, #4
 800faea:	e000      	b.n	800faee <create_name+0x10e>
 800faec:	2200      	movs	r2, #0
 800faee:	68bb      	ldr	r3, [r7, #8]
 800faf0:	330b      	adds	r3, #11
 800faf2:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800faf4:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800faf6:	4618      	mov	r0, r3
 800faf8:	3720      	adds	r7, #32
 800fafa:	46bd      	mov	sp, r7
 800fafc:	bd80      	pop	{r7, pc}
 800fafe:	bf00      	nop
 800fb00:	08015824 	.word	0x08015824
 800fb04:	08015764 	.word	0x08015764

0800fb08 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fb08:	b580      	push	{r7, lr}
 800fb0a:	b086      	sub	sp, #24
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
 800fb10:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fb16:	693b      	ldr	r3, [r7, #16]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fb1c:	e002      	b.n	800fb24 <follow_path+0x1c>
 800fb1e:	683b      	ldr	r3, [r7, #0]
 800fb20:	3301      	adds	r3, #1
 800fb22:	603b      	str	r3, [r7, #0]
 800fb24:	683b      	ldr	r3, [r7, #0]
 800fb26:	781b      	ldrb	r3, [r3, #0]
 800fb28:	2b2f      	cmp	r3, #47	; 0x2f
 800fb2a:	d0f8      	beq.n	800fb1e <follow_path+0x16>
 800fb2c:	683b      	ldr	r3, [r7, #0]
 800fb2e:	781b      	ldrb	r3, [r3, #0]
 800fb30:	2b5c      	cmp	r3, #92	; 0x5c
 800fb32:	d0f4      	beq.n	800fb1e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fb34:	693b      	ldr	r3, [r7, #16]
 800fb36:	2200      	movs	r2, #0
 800fb38:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fb3a:	683b      	ldr	r3, [r7, #0]
 800fb3c:	781b      	ldrb	r3, [r3, #0]
 800fb3e:	2b1f      	cmp	r3, #31
 800fb40:	d80a      	bhi.n	800fb58 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	2280      	movs	r2, #128	; 0x80
 800fb46:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fb4a:	2100      	movs	r1, #0
 800fb4c:	6878      	ldr	r0, [r7, #4]
 800fb4e:	f7ff fcdb 	bl	800f508 <dir_sdi>
 800fb52:	4603      	mov	r3, r0
 800fb54:	75fb      	strb	r3, [r7, #23]
 800fb56:	e048      	b.n	800fbea <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fb58:	463b      	mov	r3, r7
 800fb5a:	4619      	mov	r1, r3
 800fb5c:	6878      	ldr	r0, [r7, #4]
 800fb5e:	f7ff ff3f 	bl	800f9e0 <create_name>
 800fb62:	4603      	mov	r3, r0
 800fb64:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fb66:	7dfb      	ldrb	r3, [r7, #23]
 800fb68:	2b00      	cmp	r3, #0
 800fb6a:	d139      	bne.n	800fbe0 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fb6c:	6878      	ldr	r0, [r7, #4]
 800fb6e:	f7ff feb0 	bl	800f8d2 <dir_find>
 800fb72:	4603      	mov	r3, r0
 800fb74:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fb7c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fb7e:	7dfb      	ldrb	r3, [r7, #23]
 800fb80:	2b00      	cmp	r3, #0
 800fb82:	d00a      	beq.n	800fb9a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fb84:	7dfb      	ldrb	r3, [r7, #23]
 800fb86:	2b04      	cmp	r3, #4
 800fb88:	d12c      	bne.n	800fbe4 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fb8a:	7afb      	ldrb	r3, [r7, #11]
 800fb8c:	f003 0304 	and.w	r3, r3, #4
 800fb90:	2b00      	cmp	r3, #0
 800fb92:	d127      	bne.n	800fbe4 <follow_path+0xdc>
 800fb94:	2305      	movs	r3, #5
 800fb96:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fb98:	e024      	b.n	800fbe4 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fb9a:	7afb      	ldrb	r3, [r7, #11]
 800fb9c:	f003 0304 	and.w	r3, r3, #4
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d121      	bne.n	800fbe8 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	799b      	ldrb	r3, [r3, #6]
 800fba8:	f003 0310 	and.w	r3, r3, #16
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d102      	bne.n	800fbb6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800fbb0:	2305      	movs	r3, #5
 800fbb2:	75fb      	strb	r3, [r7, #23]
 800fbb4:	e019      	b.n	800fbea <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800fbb6:	68fb      	ldr	r3, [r7, #12]
 800fbb8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	695b      	ldr	r3, [r3, #20]
 800fbc0:	68fa      	ldr	r2, [r7, #12]
 800fbc2:	8992      	ldrh	r2, [r2, #12]
 800fbc4:	fbb3 f0f2 	udiv	r0, r3, r2
 800fbc8:	fb00 f202 	mul.w	r2, r0, r2
 800fbcc:	1a9b      	subs	r3, r3, r2
 800fbce:	440b      	add	r3, r1
 800fbd0:	4619      	mov	r1, r3
 800fbd2:	68f8      	ldr	r0, [r7, #12]
 800fbd4:	f7ff fe3e 	bl	800f854 <ld_clust>
 800fbd8:	4602      	mov	r2, r0
 800fbda:	693b      	ldr	r3, [r7, #16]
 800fbdc:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fbde:	e7bb      	b.n	800fb58 <follow_path+0x50>
			if (res != FR_OK) break;
 800fbe0:	bf00      	nop
 800fbe2:	e002      	b.n	800fbea <follow_path+0xe2>
				break;
 800fbe4:	bf00      	nop
 800fbe6:	e000      	b.n	800fbea <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fbe8:	bf00      	nop
			}
		}
	}

	return res;
 800fbea:	7dfb      	ldrb	r3, [r7, #23]
}
 800fbec:	4618      	mov	r0, r3
 800fbee:	3718      	adds	r7, #24
 800fbf0:	46bd      	mov	sp, r7
 800fbf2:	bd80      	pop	{r7, pc}

0800fbf4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fbf4:	b480      	push	{r7}
 800fbf6:	b087      	sub	sp, #28
 800fbf8:	af00      	add	r7, sp, #0
 800fbfa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800fbfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc00:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d031      	beq.n	800fc6e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	617b      	str	r3, [r7, #20]
 800fc10:	e002      	b.n	800fc18 <get_ldnumber+0x24>
 800fc12:	697b      	ldr	r3, [r7, #20]
 800fc14:	3301      	adds	r3, #1
 800fc16:	617b      	str	r3, [r7, #20]
 800fc18:	697b      	ldr	r3, [r7, #20]
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	2b20      	cmp	r3, #32
 800fc1e:	d903      	bls.n	800fc28 <get_ldnumber+0x34>
 800fc20:	697b      	ldr	r3, [r7, #20]
 800fc22:	781b      	ldrb	r3, [r3, #0]
 800fc24:	2b3a      	cmp	r3, #58	; 0x3a
 800fc26:	d1f4      	bne.n	800fc12 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800fc28:	697b      	ldr	r3, [r7, #20]
 800fc2a:	781b      	ldrb	r3, [r3, #0]
 800fc2c:	2b3a      	cmp	r3, #58	; 0x3a
 800fc2e:	d11c      	bne.n	800fc6a <get_ldnumber+0x76>
			tp = *path;
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	681b      	ldr	r3, [r3, #0]
 800fc34:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800fc36:	68fb      	ldr	r3, [r7, #12]
 800fc38:	1c5a      	adds	r2, r3, #1
 800fc3a:	60fa      	str	r2, [r7, #12]
 800fc3c:	781b      	ldrb	r3, [r3, #0]
 800fc3e:	3b30      	subs	r3, #48	; 0x30
 800fc40:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800fc42:	68bb      	ldr	r3, [r7, #8]
 800fc44:	2b09      	cmp	r3, #9
 800fc46:	d80e      	bhi.n	800fc66 <get_ldnumber+0x72>
 800fc48:	68fa      	ldr	r2, [r7, #12]
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d10a      	bne.n	800fc66 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800fc50:	68bb      	ldr	r3, [r7, #8]
 800fc52:	2b00      	cmp	r3, #0
 800fc54:	d107      	bne.n	800fc66 <get_ldnumber+0x72>
					vol = (int)i;
 800fc56:	68bb      	ldr	r3, [r7, #8]
 800fc58:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800fc5a:	697b      	ldr	r3, [r7, #20]
 800fc5c:	3301      	adds	r3, #1
 800fc5e:	617b      	str	r3, [r7, #20]
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	697a      	ldr	r2, [r7, #20]
 800fc64:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800fc66:	693b      	ldr	r3, [r7, #16]
 800fc68:	e002      	b.n	800fc70 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800fc6e:	693b      	ldr	r3, [r7, #16]
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	371c      	adds	r7, #28
 800fc74:	46bd      	mov	sp, r7
 800fc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7a:	4770      	bx	lr

0800fc7c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800fc7c:	b580      	push	{r7, lr}
 800fc7e:	b082      	sub	sp, #8
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
 800fc84:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	70da      	strb	r2, [r3, #3]
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800fc92:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800fc94:	6839      	ldr	r1, [r7, #0]
 800fc96:	6878      	ldr	r0, [r7, #4]
 800fc98:	f7ff f856 	bl	800ed48 <move_window>
 800fc9c:	4603      	mov	r3, r0
 800fc9e:	2b00      	cmp	r3, #0
 800fca0:	d001      	beq.n	800fca6 <check_fs+0x2a>
 800fca2:	2304      	movs	r3, #4
 800fca4:	e038      	b.n	800fd18 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	3334      	adds	r3, #52	; 0x34
 800fcaa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800fcae:	4618      	mov	r0, r3
 800fcb0:	f7fe fd9a 	bl	800e7e8 <ld_word>
 800fcb4:	4603      	mov	r3, r0
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d001      	beq.n	800fcc4 <check_fs+0x48>
 800fcc0:	2303      	movs	r3, #3
 800fcc2:	e029      	b.n	800fd18 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fcca:	2be9      	cmp	r3, #233	; 0xe9
 800fccc:	d009      	beq.n	800fce2 <check_fs+0x66>
 800fcce:	687b      	ldr	r3, [r7, #4]
 800fcd0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800fcd4:	2beb      	cmp	r3, #235	; 0xeb
 800fcd6:	d11e      	bne.n	800fd16 <check_fs+0x9a>
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800fcde:	2b90      	cmp	r3, #144	; 0x90
 800fce0:	d119      	bne.n	800fd16 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	3334      	adds	r3, #52	; 0x34
 800fce6:	3336      	adds	r3, #54	; 0x36
 800fce8:	4618      	mov	r0, r3
 800fcea:	f7fe fd95 	bl	800e818 <ld_dword>
 800fcee:	4603      	mov	r3, r0
 800fcf0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800fcf4:	4a0a      	ldr	r2, [pc, #40]	; (800fd20 <check_fs+0xa4>)
 800fcf6:	4293      	cmp	r3, r2
 800fcf8:	d101      	bne.n	800fcfe <check_fs+0x82>
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	e00c      	b.n	800fd18 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	3334      	adds	r3, #52	; 0x34
 800fd02:	3352      	adds	r3, #82	; 0x52
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7fe fd87 	bl	800e818 <ld_dword>
 800fd0a:	4603      	mov	r3, r0
 800fd0c:	4a05      	ldr	r2, [pc, #20]	; (800fd24 <check_fs+0xa8>)
 800fd0e:	4293      	cmp	r3, r2
 800fd10:	d101      	bne.n	800fd16 <check_fs+0x9a>
 800fd12:	2300      	movs	r3, #0
 800fd14:	e000      	b.n	800fd18 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800fd16:	2302      	movs	r3, #2
}
 800fd18:	4618      	mov	r0, r3
 800fd1a:	3708      	adds	r7, #8
 800fd1c:	46bd      	mov	sp, r7
 800fd1e:	bd80      	pop	{r7, pc}
 800fd20:	00544146 	.word	0x00544146
 800fd24:	33544146 	.word	0x33544146

0800fd28 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800fd28:	b580      	push	{r7, lr}
 800fd2a:	b096      	sub	sp, #88	; 0x58
 800fd2c:	af00      	add	r7, sp, #0
 800fd2e:	60f8      	str	r0, [r7, #12]
 800fd30:	60b9      	str	r1, [r7, #8]
 800fd32:	4613      	mov	r3, r2
 800fd34:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	2200      	movs	r2, #0
 800fd3a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800fd3c:	68f8      	ldr	r0, [r7, #12]
 800fd3e:	f7ff ff59 	bl	800fbf4 <get_ldnumber>
 800fd42:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fd44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	da01      	bge.n	800fd4e <find_volume+0x26>
 800fd4a:	230b      	movs	r3, #11
 800fd4c:	e262      	b.n	8010214 <find_volume+0x4ec>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800fd4e:	4a9f      	ldr	r2, [pc, #636]	; (800ffcc <find_volume+0x2a4>)
 800fd50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fd52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fd56:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800fd58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd5a:	2b00      	cmp	r3, #0
 800fd5c:	d101      	bne.n	800fd62 <find_volume+0x3a>
 800fd5e:	230c      	movs	r3, #12
 800fd60:	e258      	b.n	8010214 <find_volume+0x4ec>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800fd62:	68bb      	ldr	r3, [r7, #8]
 800fd64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd66:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800fd68:	79fb      	ldrb	r3, [r7, #7]
 800fd6a:	f023 0301 	bic.w	r3, r3, #1
 800fd6e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800fd70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd72:	781b      	ldrb	r3, [r3, #0]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d01a      	beq.n	800fdae <find_volume+0x86>
		stat = disk_status(fs->drv);
 800fd78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd7a:	785b      	ldrb	r3, [r3, #1]
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7fe fc95 	bl	800e6ac <disk_status>
 800fd82:	4603      	mov	r3, r0
 800fd84:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800fd88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd8c:	f003 0301 	and.w	r3, r3, #1
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d10c      	bne.n	800fdae <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800fd94:	79fb      	ldrb	r3, [r7, #7]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d007      	beq.n	800fdaa <find_volume+0x82>
 800fd9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd9e:	f003 0304 	and.w	r3, r3, #4
 800fda2:	2b00      	cmp	r3, #0
 800fda4:	d001      	beq.n	800fdaa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800fda6:	230a      	movs	r3, #10
 800fda8:	e234      	b.n	8010214 <find_volume+0x4ec>
			}
			return FR_OK;				/* The file system object is valid */
 800fdaa:	2300      	movs	r3, #0
 800fdac:	e232      	b.n	8010214 <find_volume+0x4ec>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800fdae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdb0:	2200      	movs	r2, #0
 800fdb2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800fdb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdb6:	b2da      	uxtb	r2, r3
 800fdb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdba:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800fdbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdbe:	785b      	ldrb	r3, [r3, #1]
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	f7fe fc8d 	bl	800e6e0 <disk_initialize>
 800fdc6:	4603      	mov	r3, r0
 800fdc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800fdcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fdd0:	f003 0301 	and.w	r3, r3, #1
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d001      	beq.n	800fddc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800fdd8:	2303      	movs	r3, #3
 800fdda:	e21b      	b.n	8010214 <find_volume+0x4ec>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800fddc:	79fb      	ldrb	r3, [r7, #7]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d007      	beq.n	800fdf2 <find_volume+0xca>
 800fde2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fde6:	f003 0304 	and.w	r3, r3, #4
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d001      	beq.n	800fdf2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800fdee:	230a      	movs	r3, #10
 800fdf0:	e210      	b.n	8010214 <find_volume+0x4ec>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800fdf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf4:	7858      	ldrb	r0, [r3, #1]
 800fdf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdf8:	330c      	adds	r3, #12
 800fdfa:	461a      	mov	r2, r3
 800fdfc:	2102      	movs	r1, #2
 800fdfe:	f7fe fcd5 	bl	800e7ac <disk_ioctl>
 800fe02:	4603      	mov	r3, r0
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d001      	beq.n	800fe0c <find_volume+0xe4>
 800fe08:	2301      	movs	r3, #1
 800fe0a:	e203      	b.n	8010214 <find_volume+0x4ec>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800fe0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe0e:	899b      	ldrh	r3, [r3, #12]
 800fe10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fe14:	d80d      	bhi.n	800fe32 <find_volume+0x10a>
 800fe16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe18:	899b      	ldrh	r3, [r3, #12]
 800fe1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fe1e:	d308      	bcc.n	800fe32 <find_volume+0x10a>
 800fe20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe22:	899b      	ldrh	r3, [r3, #12]
 800fe24:	461a      	mov	r2, r3
 800fe26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe28:	899b      	ldrh	r3, [r3, #12]
 800fe2a:	3b01      	subs	r3, #1
 800fe2c:	4013      	ands	r3, r2
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d001      	beq.n	800fe36 <find_volume+0x10e>
 800fe32:	2301      	movs	r3, #1
 800fe34:	e1ee      	b.n	8010214 <find_volume+0x4ec>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800fe36:	2300      	movs	r3, #0
 800fe38:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800fe3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fe3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fe3e:	f7ff ff1d 	bl	800fc7c <check_fs>
 800fe42:	4603      	mov	r3, r0
 800fe44:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800fe48:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fe4c:	2b02      	cmp	r3, #2
 800fe4e:	d149      	bne.n	800fee4 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fe50:	2300      	movs	r3, #0
 800fe52:	643b      	str	r3, [r7, #64]	; 0x40
 800fe54:	e01e      	b.n	800fe94 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800fe56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe58:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800fe5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe5e:	011b      	lsls	r3, r3, #4
 800fe60:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800fe64:	4413      	add	r3, r2
 800fe66:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800fe68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe6a:	3304      	adds	r3, #4
 800fe6c:	781b      	ldrb	r3, [r3, #0]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d006      	beq.n	800fe80 <find_volume+0x158>
 800fe72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe74:	3308      	adds	r3, #8
 800fe76:	4618      	mov	r0, r3
 800fe78:	f7fe fcce 	bl	800e818 <ld_dword>
 800fe7c:	4602      	mov	r2, r0
 800fe7e:	e000      	b.n	800fe82 <find_volume+0x15a>
 800fe80:	2200      	movs	r2, #0
 800fe82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe84:	009b      	lsls	r3, r3, #2
 800fe86:	3358      	adds	r3, #88	; 0x58
 800fe88:	443b      	add	r3, r7
 800fe8a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800fe8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe90:	3301      	adds	r3, #1
 800fe92:	643b      	str	r3, [r7, #64]	; 0x40
 800fe94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe96:	2b03      	cmp	r3, #3
 800fe98:	d9dd      	bls.n	800fe56 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800fe9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fea0:	2b00      	cmp	r3, #0
 800fea2:	d002      	beq.n	800feaa <find_volume+0x182>
 800fea4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fea6:	3b01      	subs	r3, #1
 800fea8:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800feaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800feac:	009b      	lsls	r3, r3, #2
 800feae:	3358      	adds	r3, #88	; 0x58
 800feb0:	443b      	add	r3, r7
 800feb2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800feb6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800feb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800feba:	2b00      	cmp	r3, #0
 800febc:	d005      	beq.n	800feca <find_volume+0x1a2>
 800febe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800fec0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800fec2:	f7ff fedb 	bl	800fc7c <check_fs>
 800fec6:	4603      	mov	r3, r0
 800fec8:	e000      	b.n	800fecc <find_volume+0x1a4>
 800feca:	2303      	movs	r3, #3
 800fecc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800fed0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fed4:	2b01      	cmp	r3, #1
 800fed6:	d905      	bls.n	800fee4 <find_volume+0x1bc>
 800fed8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800feda:	3301      	adds	r3, #1
 800fedc:	643b      	str	r3, [r7, #64]	; 0x40
 800fede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fee0:	2b03      	cmp	r3, #3
 800fee2:	d9e2      	bls.n	800feaa <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800fee4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fee8:	2b04      	cmp	r3, #4
 800feea:	d101      	bne.n	800fef0 <find_volume+0x1c8>
 800feec:	2301      	movs	r3, #1
 800feee:	e191      	b.n	8010214 <find_volume+0x4ec>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800fef0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800fef4:	2b01      	cmp	r3, #1
 800fef6:	d901      	bls.n	800fefc <find_volume+0x1d4>
 800fef8:	230d      	movs	r3, #13
 800fefa:	e18b      	b.n	8010214 <find_volume+0x4ec>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800fefc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fefe:	3334      	adds	r3, #52	; 0x34
 800ff00:	330b      	adds	r3, #11
 800ff02:	4618      	mov	r0, r3
 800ff04:	f7fe fc70 	bl	800e7e8 <ld_word>
 800ff08:	4603      	mov	r3, r0
 800ff0a:	461a      	mov	r2, r3
 800ff0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff0e:	899b      	ldrh	r3, [r3, #12]
 800ff10:	429a      	cmp	r2, r3
 800ff12:	d001      	beq.n	800ff18 <find_volume+0x1f0>
 800ff14:	230d      	movs	r3, #13
 800ff16:	e17d      	b.n	8010214 <find_volume+0x4ec>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ff18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff1a:	3334      	adds	r3, #52	; 0x34
 800ff1c:	3316      	adds	r3, #22
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7fe fc62 	bl	800e7e8 <ld_word>
 800ff24:	4603      	mov	r3, r0
 800ff26:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ff28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff2a:	2b00      	cmp	r3, #0
 800ff2c:	d106      	bne.n	800ff3c <find_volume+0x214>
 800ff2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff30:	3334      	adds	r3, #52	; 0x34
 800ff32:	3324      	adds	r3, #36	; 0x24
 800ff34:	4618      	mov	r0, r3
 800ff36:	f7fe fc6f 	bl	800e818 <ld_dword>
 800ff3a:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800ff3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800ff40:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800ff42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff44:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800ff48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800ff4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff4e:	789b      	ldrb	r3, [r3, #2]
 800ff50:	2b01      	cmp	r3, #1
 800ff52:	d005      	beq.n	800ff60 <find_volume+0x238>
 800ff54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff56:	789b      	ldrb	r3, [r3, #2]
 800ff58:	2b02      	cmp	r3, #2
 800ff5a:	d001      	beq.n	800ff60 <find_volume+0x238>
 800ff5c:	230d      	movs	r3, #13
 800ff5e:	e159      	b.n	8010214 <find_volume+0x4ec>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800ff60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff62:	789b      	ldrb	r3, [r3, #2]
 800ff64:	461a      	mov	r2, r3
 800ff66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff68:	fb02 f303 	mul.w	r3, r2, r3
 800ff6c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800ff6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ff74:	b29a      	uxth	r2, r3
 800ff76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff78:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800ff7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff7c:	895b      	ldrh	r3, [r3, #10]
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	d008      	beq.n	800ff94 <find_volume+0x26c>
 800ff82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff84:	895b      	ldrh	r3, [r3, #10]
 800ff86:	461a      	mov	r2, r3
 800ff88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff8a:	895b      	ldrh	r3, [r3, #10]
 800ff8c:	3b01      	subs	r3, #1
 800ff8e:	4013      	ands	r3, r2
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d001      	beq.n	800ff98 <find_volume+0x270>
 800ff94:	230d      	movs	r3, #13
 800ff96:	e13d      	b.n	8010214 <find_volume+0x4ec>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800ff98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff9a:	3334      	adds	r3, #52	; 0x34
 800ff9c:	3311      	adds	r3, #17
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7fe fc22 	bl	800e7e8 <ld_word>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffaa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800ffac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffae:	891b      	ldrh	r3, [r3, #8]
 800ffb0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ffb2:	8992      	ldrh	r2, [r2, #12]
 800ffb4:	0952      	lsrs	r2, r2, #5
 800ffb6:	b292      	uxth	r2, r2
 800ffb8:	fbb3 f1f2 	udiv	r1, r3, r2
 800ffbc:	fb01 f202 	mul.w	r2, r1, r2
 800ffc0:	1a9b      	subs	r3, r3, r2
 800ffc2:	b29b      	uxth	r3, r3
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	d003      	beq.n	800ffd0 <find_volume+0x2a8>
 800ffc8:	230d      	movs	r3, #13
 800ffca:	e123      	b.n	8010214 <find_volume+0x4ec>
 800ffcc:	20000b24 	.word	0x20000b24

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ffd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd2:	3334      	adds	r3, #52	; 0x34
 800ffd4:	3313      	adds	r3, #19
 800ffd6:	4618      	mov	r0, r3
 800ffd8:	f7fe fc06 	bl	800e7e8 <ld_word>
 800ffdc:	4603      	mov	r3, r0
 800ffde:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ffe0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d106      	bne.n	800fff4 <find_volume+0x2cc>
 800ffe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffe8:	3334      	adds	r3, #52	; 0x34
 800ffea:	3320      	adds	r3, #32
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7fe fc13 	bl	800e818 <ld_dword>
 800fff2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800fff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fff6:	3334      	adds	r3, #52	; 0x34
 800fff8:	330e      	adds	r3, #14
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7fe fbf4 	bl	800e7e8 <ld_word>
 8010000:	4603      	mov	r3, r0
 8010002:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8010004:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010006:	2b00      	cmp	r3, #0
 8010008:	d101      	bne.n	801000e <find_volume+0x2e6>
 801000a:	230d      	movs	r3, #13
 801000c:	e102      	b.n	8010214 <find_volume+0x4ec>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 801000e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010012:	4413      	add	r3, r2
 8010014:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010016:	8911      	ldrh	r1, [r2, #8]
 8010018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801001a:	8992      	ldrh	r2, [r2, #12]
 801001c:	0952      	lsrs	r2, r2, #5
 801001e:	b292      	uxth	r2, r2
 8010020:	fbb1 f2f2 	udiv	r2, r1, r2
 8010024:	b292      	uxth	r2, r2
 8010026:	4413      	add	r3, r2
 8010028:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 801002a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801002c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801002e:	429a      	cmp	r2, r3
 8010030:	d201      	bcs.n	8010036 <find_volume+0x30e>
 8010032:	230d      	movs	r3, #13
 8010034:	e0ee      	b.n	8010214 <find_volume+0x4ec>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010036:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010038:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801003a:	1ad3      	subs	r3, r2, r3
 801003c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801003e:	8952      	ldrh	r2, [r2, #10]
 8010040:	fbb3 f3f2 	udiv	r3, r3, r2
 8010044:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010048:	2b00      	cmp	r3, #0
 801004a:	d101      	bne.n	8010050 <find_volume+0x328>
 801004c:	230d      	movs	r3, #13
 801004e:	e0e1      	b.n	8010214 <find_volume+0x4ec>
		fmt = FS_FAT32;
 8010050:	2303      	movs	r3, #3
 8010052:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010058:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801005c:	4293      	cmp	r3, r2
 801005e:	d802      	bhi.n	8010066 <find_volume+0x33e>
 8010060:	2302      	movs	r3, #2
 8010062:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010068:	f640 72f5 	movw	r2, #4085	; 0xff5
 801006c:	4293      	cmp	r3, r2
 801006e:	d802      	bhi.n	8010076 <find_volume+0x34e>
 8010070:	2301      	movs	r3, #1
 8010072:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010078:	1c9a      	adds	r2, r3, #2
 801007a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801007c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 801007e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010080:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010082:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010084:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010088:	441a      	add	r2, r3
 801008a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801008c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 801008e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010092:	441a      	add	r2, r3
 8010094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010096:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 8010098:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801009c:	2b03      	cmp	r3, #3
 801009e:	d11e      	bne.n	80100de <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80100a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a2:	3334      	adds	r3, #52	; 0x34
 80100a4:	332a      	adds	r3, #42	; 0x2a
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7fe fb9e 	bl	800e7e8 <ld_word>
 80100ac:	4603      	mov	r3, r0
 80100ae:	2b00      	cmp	r3, #0
 80100b0:	d001      	beq.n	80100b6 <find_volume+0x38e>
 80100b2:	230d      	movs	r3, #13
 80100b4:	e0ae      	b.n	8010214 <find_volume+0x4ec>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80100b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b8:	891b      	ldrh	r3, [r3, #8]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d001      	beq.n	80100c2 <find_volume+0x39a>
 80100be:	230d      	movs	r3, #13
 80100c0:	e0a8      	b.n	8010214 <find_volume+0x4ec>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80100c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c4:	3334      	adds	r3, #52	; 0x34
 80100c6:	332c      	adds	r3, #44	; 0x2c
 80100c8:	4618      	mov	r0, r3
 80100ca:	f7fe fba5 	bl	800e818 <ld_dword>
 80100ce:	4602      	mov	r2, r0
 80100d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80100d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100d6:	699b      	ldr	r3, [r3, #24]
 80100d8:	009b      	lsls	r3, r3, #2
 80100da:	647b      	str	r3, [r7, #68]	; 0x44
 80100dc:	e01f      	b.n	801011e <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80100de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100e0:	891b      	ldrh	r3, [r3, #8]
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	d101      	bne.n	80100ea <find_volume+0x3c2>
 80100e6:	230d      	movs	r3, #13
 80100e8:	e094      	b.n	8010214 <find_volume+0x4ec>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80100ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80100f0:	441a      	add	r2, r3
 80100f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100f4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80100f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80100fa:	2b02      	cmp	r3, #2
 80100fc:	d103      	bne.n	8010106 <find_volume+0x3de>
 80100fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010100:	699b      	ldr	r3, [r3, #24]
 8010102:	005b      	lsls	r3, r3, #1
 8010104:	e00a      	b.n	801011c <find_volume+0x3f4>
 8010106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010108:	699a      	ldr	r2, [r3, #24]
 801010a:	4613      	mov	r3, r2
 801010c:	005b      	lsls	r3, r3, #1
 801010e:	4413      	add	r3, r2
 8010110:	085a      	lsrs	r2, r3, #1
 8010112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010114:	699b      	ldr	r3, [r3, #24]
 8010116:	f003 0301 	and.w	r3, r3, #1
 801011a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801011c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801011e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010120:	69da      	ldr	r2, [r3, #28]
 8010122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010124:	899b      	ldrh	r3, [r3, #12]
 8010126:	4619      	mov	r1, r3
 8010128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801012a:	440b      	add	r3, r1
 801012c:	3b01      	subs	r3, #1
 801012e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010130:	8989      	ldrh	r1, [r1, #12]
 8010132:	fbb3 f3f1 	udiv	r3, r3, r1
 8010136:	429a      	cmp	r2, r3
 8010138:	d201      	bcs.n	801013e <find_volume+0x416>
 801013a:	230d      	movs	r3, #13
 801013c:	e06a      	b.n	8010214 <find_volume+0x4ec>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 801013e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010140:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010144:	615a      	str	r2, [r3, #20]
 8010146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010148:	695a      	ldr	r2, [r3, #20]
 801014a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801014c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 801014e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010150:	2280      	movs	r2, #128	; 0x80
 8010152:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8010154:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010158:	2b03      	cmp	r3, #3
 801015a:	d149      	bne.n	80101f0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801015c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801015e:	3334      	adds	r3, #52	; 0x34
 8010160:	3330      	adds	r3, #48	; 0x30
 8010162:	4618      	mov	r0, r3
 8010164:	f7fe fb40 	bl	800e7e8 <ld_word>
 8010168:	4603      	mov	r3, r0
 801016a:	2b01      	cmp	r3, #1
 801016c:	d140      	bne.n	80101f0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801016e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010170:	3301      	adds	r3, #1
 8010172:	4619      	mov	r1, r3
 8010174:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8010176:	f7fe fde7 	bl	800ed48 <move_window>
 801017a:	4603      	mov	r3, r0
 801017c:	2b00      	cmp	r3, #0
 801017e:	d137      	bne.n	80101f0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8010180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010182:	2200      	movs	r2, #0
 8010184:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8010186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010188:	3334      	adds	r3, #52	; 0x34
 801018a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801018e:	4618      	mov	r0, r3
 8010190:	f7fe fb2a 	bl	800e7e8 <ld_word>
 8010194:	4603      	mov	r3, r0
 8010196:	461a      	mov	r2, r3
 8010198:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801019c:	429a      	cmp	r2, r3
 801019e:	d127      	bne.n	80101f0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80101a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101a2:	3334      	adds	r3, #52	; 0x34
 80101a4:	4618      	mov	r0, r3
 80101a6:	f7fe fb37 	bl	800e818 <ld_dword>
 80101aa:	4603      	mov	r3, r0
 80101ac:	4a1b      	ldr	r2, [pc, #108]	; (801021c <find_volume+0x4f4>)
 80101ae:	4293      	cmp	r3, r2
 80101b0:	d11e      	bne.n	80101f0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80101b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b4:	3334      	adds	r3, #52	; 0x34
 80101b6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80101ba:	4618      	mov	r0, r3
 80101bc:	f7fe fb2c 	bl	800e818 <ld_dword>
 80101c0:	4603      	mov	r3, r0
 80101c2:	4a17      	ldr	r2, [pc, #92]	; (8010220 <find_volume+0x4f8>)
 80101c4:	4293      	cmp	r3, r2
 80101c6:	d113      	bne.n	80101f0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80101c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ca:	3334      	adds	r3, #52	; 0x34
 80101cc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80101d0:	4618      	mov	r0, r3
 80101d2:	f7fe fb21 	bl	800e818 <ld_dword>
 80101d6:	4602      	mov	r2, r0
 80101d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101da:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80101dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101de:	3334      	adds	r3, #52	; 0x34
 80101e0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80101e4:	4618      	mov	r0, r3
 80101e6:	f7fe fb17 	bl	800e818 <ld_dword>
 80101ea:	4602      	mov	r2, r0
 80101ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ee:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80101f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80101f6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80101f8:	4b0a      	ldr	r3, [pc, #40]	; (8010224 <find_volume+0x4fc>)
 80101fa:	881b      	ldrh	r3, [r3, #0]
 80101fc:	3301      	adds	r3, #1
 80101fe:	b29a      	uxth	r2, r3
 8010200:	4b08      	ldr	r3, [pc, #32]	; (8010224 <find_volume+0x4fc>)
 8010202:	801a      	strh	r2, [r3, #0]
 8010204:	4b07      	ldr	r3, [pc, #28]	; (8010224 <find_volume+0x4fc>)
 8010206:	881a      	ldrh	r2, [r3, #0]
 8010208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801020a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 801020c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801020e:	f7fe fd33 	bl	800ec78 <clear_lock>
#endif
	return FR_OK;
 8010212:	2300      	movs	r3, #0
}
 8010214:	4618      	mov	r0, r3
 8010216:	3758      	adds	r7, #88	; 0x58
 8010218:	46bd      	mov	sp, r7
 801021a:	bd80      	pop	{r7, pc}
 801021c:	41615252 	.word	0x41615252
 8010220:	61417272 	.word	0x61417272
 8010224:	20000b28 	.word	0x20000b28

08010228 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010228:	b580      	push	{r7, lr}
 801022a:	b084      	sub	sp, #16
 801022c:	af00      	add	r7, sp, #0
 801022e:	6078      	str	r0, [r7, #4]
 8010230:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010232:	2309      	movs	r3, #9
 8010234:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2b00      	cmp	r3, #0
 801023a:	d01c      	beq.n	8010276 <validate+0x4e>
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	681b      	ldr	r3, [r3, #0]
 8010240:	2b00      	cmp	r3, #0
 8010242:	d018      	beq.n	8010276 <validate+0x4e>
 8010244:	687b      	ldr	r3, [r7, #4]
 8010246:	681b      	ldr	r3, [r3, #0]
 8010248:	781b      	ldrb	r3, [r3, #0]
 801024a:	2b00      	cmp	r3, #0
 801024c:	d013      	beq.n	8010276 <validate+0x4e>
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	889a      	ldrh	r2, [r3, #4]
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	88db      	ldrh	r3, [r3, #6]
 8010258:	429a      	cmp	r2, r3
 801025a:	d10c      	bne.n	8010276 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	785b      	ldrb	r3, [r3, #1]
 8010262:	4618      	mov	r0, r3
 8010264:	f7fe fa22 	bl	800e6ac <disk_status>
 8010268:	4603      	mov	r3, r0
 801026a:	f003 0301 	and.w	r3, r3, #1
 801026e:	2b00      	cmp	r3, #0
 8010270:	d101      	bne.n	8010276 <validate+0x4e>
			res = FR_OK;
 8010272:	2300      	movs	r3, #0
 8010274:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010276:	7bfb      	ldrb	r3, [r7, #15]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d102      	bne.n	8010282 <validate+0x5a>
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	681b      	ldr	r3, [r3, #0]
 8010280:	e000      	b.n	8010284 <validate+0x5c>
 8010282:	2300      	movs	r3, #0
 8010284:	683a      	ldr	r2, [r7, #0]
 8010286:	6013      	str	r3, [r2, #0]
	return res;
 8010288:	7bfb      	ldrb	r3, [r7, #15]
}
 801028a:	4618      	mov	r0, r3
 801028c:	3710      	adds	r7, #16
 801028e:	46bd      	mov	sp, r7
 8010290:	bd80      	pop	{r7, pc}
	...

08010294 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b088      	sub	sp, #32
 8010298:	af00      	add	r7, sp, #0
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	60b9      	str	r1, [r7, #8]
 801029e:	4613      	mov	r3, r2
 80102a0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80102a2:	68bb      	ldr	r3, [r7, #8]
 80102a4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80102a6:	f107 0310 	add.w	r3, r7, #16
 80102aa:	4618      	mov	r0, r3
 80102ac:	f7ff fca2 	bl	800fbf4 <get_ldnumber>
 80102b0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80102b2:	69fb      	ldr	r3, [r7, #28]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	da01      	bge.n	80102bc <f_mount+0x28>
 80102b8:	230b      	movs	r3, #11
 80102ba:	e02b      	b.n	8010314 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80102bc:	4a17      	ldr	r2, [pc, #92]	; (801031c <f_mount+0x88>)
 80102be:	69fb      	ldr	r3, [r7, #28]
 80102c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102c4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80102c6:	69bb      	ldr	r3, [r7, #24]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d005      	beq.n	80102d8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80102cc:	69b8      	ldr	r0, [r7, #24]
 80102ce:	f7fe fcd3 	bl	800ec78 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80102d2:	69bb      	ldr	r3, [r7, #24]
 80102d4:	2200      	movs	r2, #0
 80102d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d002      	beq.n	80102e4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	2200      	movs	r2, #0
 80102e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80102e4:	68fa      	ldr	r2, [r7, #12]
 80102e6:	490d      	ldr	r1, [pc, #52]	; (801031c <f_mount+0x88>)
 80102e8:	69fb      	ldr	r3, [r7, #28]
 80102ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80102ee:	68fb      	ldr	r3, [r7, #12]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d002      	beq.n	80102fa <f_mount+0x66>
 80102f4:	79fb      	ldrb	r3, [r7, #7]
 80102f6:	2b01      	cmp	r3, #1
 80102f8:	d001      	beq.n	80102fe <f_mount+0x6a>
 80102fa:	2300      	movs	r3, #0
 80102fc:	e00a      	b.n	8010314 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80102fe:	f107 010c 	add.w	r1, r7, #12
 8010302:	f107 0308 	add.w	r3, r7, #8
 8010306:	2200      	movs	r2, #0
 8010308:	4618      	mov	r0, r3
 801030a:	f7ff fd0d 	bl	800fd28 <find_volume>
 801030e:	4603      	mov	r3, r0
 8010310:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010312:	7dfb      	ldrb	r3, [r7, #23]
}
 8010314:	4618      	mov	r0, r3
 8010316:	3720      	adds	r7, #32
 8010318:	46bd      	mov	sp, r7
 801031a:	bd80      	pop	{r7, pc}
 801031c:	20000b24 	.word	0x20000b24

08010320 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010320:	b580      	push	{r7, lr}
 8010322:	b098      	sub	sp, #96	; 0x60
 8010324:	af00      	add	r7, sp, #0
 8010326:	60f8      	str	r0, [r7, #12]
 8010328:	60b9      	str	r1, [r7, #8]
 801032a:	4613      	mov	r3, r2
 801032c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801032e:	68fb      	ldr	r3, [r7, #12]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d101      	bne.n	8010338 <f_open+0x18>
 8010334:	2309      	movs	r3, #9
 8010336:	e1bb      	b.n	80106b0 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010338:	79fb      	ldrb	r3, [r7, #7]
 801033a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801033e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010340:	79fa      	ldrb	r2, [r7, #7]
 8010342:	f107 0110 	add.w	r1, r7, #16
 8010346:	f107 0308 	add.w	r3, r7, #8
 801034a:	4618      	mov	r0, r3
 801034c:	f7ff fcec 	bl	800fd28 <find_volume>
 8010350:	4603      	mov	r3, r0
 8010352:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8010356:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801035a:	2b00      	cmp	r3, #0
 801035c:	f040 819f 	bne.w	801069e <f_open+0x37e>
		dj.obj.fs = fs;
 8010360:	693b      	ldr	r3, [r7, #16]
 8010362:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010364:	68ba      	ldr	r2, [r7, #8]
 8010366:	f107 0314 	add.w	r3, r7, #20
 801036a:	4611      	mov	r1, r2
 801036c:	4618      	mov	r0, r3
 801036e:	f7ff fbcb 	bl	800fb08 <follow_path>
 8010372:	4603      	mov	r3, r0
 8010374:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010378:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801037c:	2b00      	cmp	r3, #0
 801037e:	d11a      	bne.n	80103b6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010380:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8010384:	b25b      	sxtb	r3, r3
 8010386:	2b00      	cmp	r3, #0
 8010388:	da03      	bge.n	8010392 <f_open+0x72>
				res = FR_INVALID_NAME;
 801038a:	2306      	movs	r3, #6
 801038c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010390:	e011      	b.n	80103b6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010392:	79fb      	ldrb	r3, [r7, #7]
 8010394:	f023 0301 	bic.w	r3, r3, #1
 8010398:	2b00      	cmp	r3, #0
 801039a:	bf14      	ite	ne
 801039c:	2301      	movne	r3, #1
 801039e:	2300      	moveq	r3, #0
 80103a0:	b2db      	uxtb	r3, r3
 80103a2:	461a      	mov	r2, r3
 80103a4:	f107 0314 	add.w	r3, r7, #20
 80103a8:	4611      	mov	r1, r2
 80103aa:	4618      	mov	r0, r3
 80103ac:	f7fe fb1c 	bl	800e9e8 <chk_lock>
 80103b0:	4603      	mov	r3, r0
 80103b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80103b6:	79fb      	ldrb	r3, [r7, #7]
 80103b8:	f003 031c 	and.w	r3, r3, #28
 80103bc:	2b00      	cmp	r3, #0
 80103be:	d07f      	beq.n	80104c0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80103c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d017      	beq.n	80103f8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80103c8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80103cc:	2b04      	cmp	r3, #4
 80103ce:	d10e      	bne.n	80103ee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80103d0:	f7fe fb66 	bl	800eaa0 <enq_lock>
 80103d4:	4603      	mov	r3, r0
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d006      	beq.n	80103e8 <f_open+0xc8>
 80103da:	f107 0314 	add.w	r3, r7, #20
 80103de:	4618      	mov	r0, r3
 80103e0:	f7ff facc 	bl	800f97c <dir_register>
 80103e4:	4603      	mov	r3, r0
 80103e6:	e000      	b.n	80103ea <f_open+0xca>
 80103e8:	2312      	movs	r3, #18
 80103ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80103ee:	79fb      	ldrb	r3, [r7, #7]
 80103f0:	f043 0308 	orr.w	r3, r3, #8
 80103f4:	71fb      	strb	r3, [r7, #7]
 80103f6:	e010      	b.n	801041a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80103f8:	7ebb      	ldrb	r3, [r7, #26]
 80103fa:	f003 0311 	and.w	r3, r3, #17
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d003      	beq.n	801040a <f_open+0xea>
					res = FR_DENIED;
 8010402:	2307      	movs	r3, #7
 8010404:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010408:	e007      	b.n	801041a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801040a:	79fb      	ldrb	r3, [r7, #7]
 801040c:	f003 0304 	and.w	r3, r3, #4
 8010410:	2b00      	cmp	r3, #0
 8010412:	d002      	beq.n	801041a <f_open+0xfa>
 8010414:	2308      	movs	r3, #8
 8010416:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801041a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801041e:	2b00      	cmp	r3, #0
 8010420:	d168      	bne.n	80104f4 <f_open+0x1d4>
 8010422:	79fb      	ldrb	r3, [r7, #7]
 8010424:	f003 0308 	and.w	r3, r3, #8
 8010428:	2b00      	cmp	r3, #0
 801042a:	d063      	beq.n	80104f4 <f_open+0x1d4>
				dw = GET_FATTIME();
 801042c:	f7fb ff26 	bl	800c27c <get_fattime>
 8010430:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010434:	330e      	adds	r3, #14
 8010436:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010438:	4618      	mov	r0, r3
 801043a:	f7fe fa2b 	bl	800e894 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801043e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010440:	3316      	adds	r3, #22
 8010442:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010444:	4618      	mov	r0, r3
 8010446:	f7fe fa25 	bl	800e894 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801044a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801044c:	330b      	adds	r3, #11
 801044e:	2220      	movs	r2, #32
 8010450:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010452:	693b      	ldr	r3, [r7, #16]
 8010454:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010456:	4611      	mov	r1, r2
 8010458:	4618      	mov	r0, r3
 801045a:	f7ff f9fb 	bl	800f854 <ld_clust>
 801045e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8010464:	2200      	movs	r2, #0
 8010466:	4618      	mov	r0, r3
 8010468:	f7ff fa13 	bl	800f892 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801046c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801046e:	331c      	adds	r3, #28
 8010470:	2100      	movs	r1, #0
 8010472:	4618      	mov	r0, r3
 8010474:	f7fe fa0e 	bl	800e894 <st_dword>
					fs->wflag = 1;
 8010478:	693b      	ldr	r3, [r7, #16]
 801047a:	2201      	movs	r2, #1
 801047c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801047e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010480:	2b00      	cmp	r3, #0
 8010482:	d037      	beq.n	80104f4 <f_open+0x1d4>
						dw = fs->winsect;
 8010484:	693b      	ldr	r3, [r7, #16]
 8010486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010488:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801048a:	f107 0314 	add.w	r3, r7, #20
 801048e:	2200      	movs	r2, #0
 8010490:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010492:	4618      	mov	r0, r3
 8010494:	f7fe ff03 	bl	800f29e <remove_chain>
 8010498:	4603      	mov	r3, r0
 801049a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801049e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d126      	bne.n	80104f4 <f_open+0x1d4>
							res = move_window(fs, dw);
 80104a6:	693b      	ldr	r3, [r7, #16]
 80104a8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80104aa:	4618      	mov	r0, r3
 80104ac:	f7fe fc4c 	bl	800ed48 <move_window>
 80104b0:	4603      	mov	r3, r0
 80104b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80104b6:	693b      	ldr	r3, [r7, #16]
 80104b8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80104ba:	3a01      	subs	r2, #1
 80104bc:	611a      	str	r2, [r3, #16]
 80104be:	e019      	b.n	80104f4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80104c0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d115      	bne.n	80104f4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80104c8:	7ebb      	ldrb	r3, [r7, #26]
 80104ca:	f003 0310 	and.w	r3, r3, #16
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d003      	beq.n	80104da <f_open+0x1ba>
					res = FR_NO_FILE;
 80104d2:	2304      	movs	r3, #4
 80104d4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80104d8:	e00c      	b.n	80104f4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80104da:	79fb      	ldrb	r3, [r7, #7]
 80104dc:	f003 0302 	and.w	r3, r3, #2
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d007      	beq.n	80104f4 <f_open+0x1d4>
 80104e4:	7ebb      	ldrb	r3, [r7, #26]
 80104e6:	f003 0301 	and.w	r3, r3, #1
 80104ea:	2b00      	cmp	r3, #0
 80104ec:	d002      	beq.n	80104f4 <f_open+0x1d4>
						res = FR_DENIED;
 80104ee:	2307      	movs	r3, #7
 80104f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 80104f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	d128      	bne.n	801054e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80104fc:	79fb      	ldrb	r3, [r7, #7]
 80104fe:	f003 0308 	and.w	r3, r3, #8
 8010502:	2b00      	cmp	r3, #0
 8010504:	d003      	beq.n	801050e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010506:	79fb      	ldrb	r3, [r7, #7]
 8010508:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801050c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801050e:	693b      	ldr	r3, [r7, #16]
 8010510:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010516:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010518:	68fb      	ldr	r3, [r7, #12]
 801051a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801051c:	79fb      	ldrb	r3, [r7, #7]
 801051e:	f023 0301 	bic.w	r3, r3, #1
 8010522:	2b00      	cmp	r3, #0
 8010524:	bf14      	ite	ne
 8010526:	2301      	movne	r3, #1
 8010528:	2300      	moveq	r3, #0
 801052a:	b2db      	uxtb	r3, r3
 801052c:	461a      	mov	r2, r3
 801052e:	f107 0314 	add.w	r3, r7, #20
 8010532:	4611      	mov	r1, r2
 8010534:	4618      	mov	r0, r3
 8010536:	f7fe fad5 	bl	800eae4 <inc_lock>
 801053a:	4602      	mov	r2, r0
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	691b      	ldr	r3, [r3, #16]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d102      	bne.n	801054e <f_open+0x22e>
 8010548:	2302      	movs	r3, #2
 801054a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 801054e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010552:	2b00      	cmp	r3, #0
 8010554:	f040 80a3 	bne.w	801069e <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010558:	693b      	ldr	r3, [r7, #16]
 801055a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801055c:	4611      	mov	r1, r2
 801055e:	4618      	mov	r0, r3
 8010560:	f7ff f978 	bl	800f854 <ld_clust>
 8010564:	4602      	mov	r2, r0
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801056a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801056c:	331c      	adds	r3, #28
 801056e:	4618      	mov	r0, r3
 8010570:	f7fe f952 	bl	800e818 <ld_dword>
 8010574:	4602      	mov	r2, r0
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801057a:	68fb      	ldr	r3, [r7, #12]
 801057c:	2200      	movs	r2, #0
 801057e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010580:	693a      	ldr	r2, [r7, #16]
 8010582:	68fb      	ldr	r3, [r7, #12]
 8010584:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010586:	693b      	ldr	r3, [r7, #16]
 8010588:	88da      	ldrh	r2, [r3, #6]
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	79fa      	ldrb	r2, [r7, #7]
 8010592:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010594:	68fb      	ldr	r3, [r7, #12]
 8010596:	2200      	movs	r2, #0
 8010598:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801059a:	68fb      	ldr	r3, [r7, #12]
 801059c:	2200      	movs	r2, #0
 801059e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80105a0:	68fb      	ldr	r3, [r7, #12]
 80105a2:	2200      	movs	r2, #0
 80105a4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	3330      	adds	r3, #48	; 0x30
 80105aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80105ae:	2100      	movs	r1, #0
 80105b0:	4618      	mov	r0, r3
 80105b2:	f7fe f9bc 	bl	800e92e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80105b6:	79fb      	ldrb	r3, [r7, #7]
 80105b8:	f003 0320 	and.w	r3, r3, #32
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d06e      	beq.n	801069e <f_open+0x37e>
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	68db      	ldr	r3, [r3, #12]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d06a      	beq.n	801069e <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	68da      	ldr	r2, [r3, #12]
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80105d0:	693b      	ldr	r3, [r7, #16]
 80105d2:	895b      	ldrh	r3, [r3, #10]
 80105d4:	461a      	mov	r2, r3
 80105d6:	693b      	ldr	r3, [r7, #16]
 80105d8:	899b      	ldrh	r3, [r3, #12]
 80105da:	fb02 f303 	mul.w	r3, r2, r3
 80105de:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	689b      	ldr	r3, [r3, #8]
 80105e4:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	68db      	ldr	r3, [r3, #12]
 80105ea:	657b      	str	r3, [r7, #84]	; 0x54
 80105ec:	e016      	b.n	801061c <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80105f2:	4618      	mov	r0, r3
 80105f4:	f7fe fc65 	bl	800eec2 <get_fat>
 80105f8:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 80105fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	d802      	bhi.n	8010606 <f_open+0x2e6>
 8010600:	2302      	movs	r3, #2
 8010602:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010606:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010608:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801060c:	d102      	bne.n	8010614 <f_open+0x2f4>
 801060e:	2301      	movs	r3, #1
 8010610:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010614:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010618:	1ad3      	subs	r3, r2, r3
 801061a:	657b      	str	r3, [r7, #84]	; 0x54
 801061c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010620:	2b00      	cmp	r3, #0
 8010622:	d103      	bne.n	801062c <f_open+0x30c>
 8010624:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010628:	429a      	cmp	r2, r3
 801062a:	d8e0      	bhi.n	80105ee <f_open+0x2ce>
				}
				fp->clust = clst;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8010630:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010632:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8010636:	2b00      	cmp	r3, #0
 8010638:	d131      	bne.n	801069e <f_open+0x37e>
 801063a:	693b      	ldr	r3, [r7, #16]
 801063c:	899b      	ldrh	r3, [r3, #12]
 801063e:	461a      	mov	r2, r3
 8010640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010642:	fbb3 f1f2 	udiv	r1, r3, r2
 8010646:	fb01 f202 	mul.w	r2, r1, r2
 801064a:	1a9b      	subs	r3, r3, r2
 801064c:	2b00      	cmp	r3, #0
 801064e:	d026      	beq.n	801069e <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010650:	693b      	ldr	r3, [r7, #16]
 8010652:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010654:	4618      	mov	r0, r3
 8010656:	f7fe fc15 	bl	800ee84 <clust2sect>
 801065a:	6478      	str	r0, [r7, #68]	; 0x44
 801065c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801065e:	2b00      	cmp	r3, #0
 8010660:	d103      	bne.n	801066a <f_open+0x34a>
						res = FR_INT_ERR;
 8010662:	2302      	movs	r3, #2
 8010664:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8010668:	e019      	b.n	801069e <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801066a:	693b      	ldr	r3, [r7, #16]
 801066c:	899b      	ldrh	r3, [r3, #12]
 801066e:	461a      	mov	r2, r3
 8010670:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010672:	fbb3 f2f2 	udiv	r2, r3, r2
 8010676:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010678:	441a      	add	r2, r3
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 801067e:	693b      	ldr	r3, [r7, #16]
 8010680:	7858      	ldrb	r0, [r3, #1]
 8010682:	68fb      	ldr	r3, [r7, #12]
 8010684:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	6a1a      	ldr	r2, [r3, #32]
 801068c:	2301      	movs	r3, #1
 801068e:	f7fe f84d 	bl	800e72c <disk_read>
 8010692:	4603      	mov	r3, r0
 8010694:	2b00      	cmp	r3, #0
 8010696:	d002      	beq.n	801069e <f_open+0x37e>
 8010698:	2301      	movs	r3, #1
 801069a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 801069e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80106a2:	2b00      	cmp	r3, #0
 80106a4:	d002      	beq.n	80106ac <f_open+0x38c>
 80106a6:	68fb      	ldr	r3, [r7, #12]
 80106a8:	2200      	movs	r2, #0
 80106aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80106ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80106b0:	4618      	mov	r0, r3
 80106b2:	3760      	adds	r7, #96	; 0x60
 80106b4:	46bd      	mov	sp, r7
 80106b6:	bd80      	pop	{r7, pc}

080106b8 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b08c      	sub	sp, #48	; 0x30
 80106bc:	af00      	add	r7, sp, #0
 80106be:	60f8      	str	r0, [r7, #12]
 80106c0:	60b9      	str	r1, [r7, #8]
 80106c2:	607a      	str	r2, [r7, #4]
 80106c4:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80106c6:	68bb      	ldr	r3, [r7, #8]
 80106c8:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80106ca:	683b      	ldr	r3, [r7, #0]
 80106cc:	2200      	movs	r2, #0
 80106ce:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80106d0:	68fb      	ldr	r3, [r7, #12]
 80106d2:	f107 0210 	add.w	r2, r7, #16
 80106d6:	4611      	mov	r1, r2
 80106d8:	4618      	mov	r0, r3
 80106da:	f7ff fda5 	bl	8010228 <validate>
 80106de:	4603      	mov	r3, r0
 80106e0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80106e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d107      	bne.n	80106fc <f_write+0x44>
 80106ec:	68fb      	ldr	r3, [r7, #12]
 80106ee:	7d5b      	ldrb	r3, [r3, #21]
 80106f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80106f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106f8:	2b00      	cmp	r3, #0
 80106fa:	d002      	beq.n	8010702 <f_write+0x4a>
 80106fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010700:	e16a      	b.n	80109d8 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8010702:	68fb      	ldr	r3, [r7, #12]
 8010704:	7d1b      	ldrb	r3, [r3, #20]
 8010706:	f003 0302 	and.w	r3, r3, #2
 801070a:	2b00      	cmp	r3, #0
 801070c:	d101      	bne.n	8010712 <f_write+0x5a>
 801070e:	2307      	movs	r3, #7
 8010710:	e162      	b.n	80109d8 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8010712:	68fb      	ldr	r3, [r7, #12]
 8010714:	699a      	ldr	r2, [r3, #24]
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	441a      	add	r2, r3
 801071a:	68fb      	ldr	r3, [r7, #12]
 801071c:	699b      	ldr	r3, [r3, #24]
 801071e:	429a      	cmp	r2, r3
 8010720:	f080 814c 	bcs.w	80109bc <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	699b      	ldr	r3, [r3, #24]
 8010728:	43db      	mvns	r3, r3
 801072a:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801072c:	e146      	b.n	80109bc <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	699b      	ldr	r3, [r3, #24]
 8010732:	693a      	ldr	r2, [r7, #16]
 8010734:	8992      	ldrh	r2, [r2, #12]
 8010736:	fbb3 f1f2 	udiv	r1, r3, r2
 801073a:	fb01 f202 	mul.w	r2, r1, r2
 801073e:	1a9b      	subs	r3, r3, r2
 8010740:	2b00      	cmp	r3, #0
 8010742:	f040 80f1 	bne.w	8010928 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8010746:	68fb      	ldr	r3, [r7, #12]
 8010748:	699b      	ldr	r3, [r3, #24]
 801074a:	693a      	ldr	r2, [r7, #16]
 801074c:	8992      	ldrh	r2, [r2, #12]
 801074e:	fbb3 f3f2 	udiv	r3, r3, r2
 8010752:	693a      	ldr	r2, [r7, #16]
 8010754:	8952      	ldrh	r2, [r2, #10]
 8010756:	3a01      	subs	r2, #1
 8010758:	4013      	ands	r3, r2
 801075a:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801075c:	69bb      	ldr	r3, [r7, #24]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d143      	bne.n	80107ea <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	699b      	ldr	r3, [r3, #24]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d10c      	bne.n	8010784 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	689b      	ldr	r3, [r3, #8]
 801076e:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8010770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010772:	2b00      	cmp	r3, #0
 8010774:	d11a      	bne.n	80107ac <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	2100      	movs	r1, #0
 801077a:	4618      	mov	r0, r3
 801077c:	f7fe fdf4 	bl	800f368 <create_chain>
 8010780:	62b8      	str	r0, [r7, #40]	; 0x28
 8010782:	e013      	b.n	80107ac <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010788:	2b00      	cmp	r3, #0
 801078a:	d007      	beq.n	801079c <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801078c:	68fb      	ldr	r3, [r7, #12]
 801078e:	699b      	ldr	r3, [r3, #24]
 8010790:	4619      	mov	r1, r3
 8010792:	68f8      	ldr	r0, [r7, #12]
 8010794:	f7fe fe80 	bl	800f498 <clmt_clust>
 8010798:	62b8      	str	r0, [r7, #40]	; 0x28
 801079a:	e007      	b.n	80107ac <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801079c:	68fa      	ldr	r2, [r7, #12]
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	69db      	ldr	r3, [r3, #28]
 80107a2:	4619      	mov	r1, r3
 80107a4:	4610      	mov	r0, r2
 80107a6:	f7fe fddf 	bl	800f368 <create_chain>
 80107aa:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80107ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	f000 8109 	beq.w	80109c6 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80107b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107b6:	2b01      	cmp	r3, #1
 80107b8:	d104      	bne.n	80107c4 <f_write+0x10c>
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	2202      	movs	r2, #2
 80107be:	755a      	strb	r2, [r3, #21]
 80107c0:	2302      	movs	r3, #2
 80107c2:	e109      	b.n	80109d8 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80107c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80107ca:	d104      	bne.n	80107d6 <f_write+0x11e>
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	2201      	movs	r2, #1
 80107d0:	755a      	strb	r2, [r3, #21]
 80107d2:	2301      	movs	r3, #1
 80107d4:	e100      	b.n	80109d8 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107da:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	689b      	ldr	r3, [r3, #8]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d102      	bne.n	80107ea <f_write+0x132>
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80107e8:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80107ea:	68fb      	ldr	r3, [r7, #12]
 80107ec:	7d1b      	ldrb	r3, [r3, #20]
 80107ee:	b25b      	sxtb	r3, r3
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	da18      	bge.n	8010826 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80107f4:	693b      	ldr	r3, [r7, #16]
 80107f6:	7858      	ldrb	r0, [r3, #1]
 80107f8:	68fb      	ldr	r3, [r7, #12]
 80107fa:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80107fe:	68fb      	ldr	r3, [r7, #12]
 8010800:	6a1a      	ldr	r2, [r3, #32]
 8010802:	2301      	movs	r3, #1
 8010804:	f7fd ffb2 	bl	800e76c <disk_write>
 8010808:	4603      	mov	r3, r0
 801080a:	2b00      	cmp	r3, #0
 801080c:	d004      	beq.n	8010818 <f_write+0x160>
 801080e:	68fb      	ldr	r3, [r7, #12]
 8010810:	2201      	movs	r2, #1
 8010812:	755a      	strb	r2, [r3, #21]
 8010814:	2301      	movs	r3, #1
 8010816:	e0df      	b.n	80109d8 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	7d1b      	ldrb	r3, [r3, #20]
 801081c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010820:	b2da      	uxtb	r2, r3
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010826:	693a      	ldr	r2, [r7, #16]
 8010828:	68fb      	ldr	r3, [r7, #12]
 801082a:	69db      	ldr	r3, [r3, #28]
 801082c:	4619      	mov	r1, r3
 801082e:	4610      	mov	r0, r2
 8010830:	f7fe fb28 	bl	800ee84 <clust2sect>
 8010834:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d104      	bne.n	8010846 <f_write+0x18e>
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	2202      	movs	r2, #2
 8010840:	755a      	strb	r2, [r3, #21]
 8010842:	2302      	movs	r3, #2
 8010844:	e0c8      	b.n	80109d8 <f_write+0x320>
			sect += csect;
 8010846:	697a      	ldr	r2, [r7, #20]
 8010848:	69bb      	ldr	r3, [r7, #24]
 801084a:	4413      	add	r3, r2
 801084c:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801084e:	693b      	ldr	r3, [r7, #16]
 8010850:	899b      	ldrh	r3, [r3, #12]
 8010852:	461a      	mov	r2, r3
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	fbb3 f3f2 	udiv	r3, r3, r2
 801085a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801085c:	6a3b      	ldr	r3, [r7, #32]
 801085e:	2b00      	cmp	r3, #0
 8010860:	d043      	beq.n	80108ea <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010862:	69ba      	ldr	r2, [r7, #24]
 8010864:	6a3b      	ldr	r3, [r7, #32]
 8010866:	4413      	add	r3, r2
 8010868:	693a      	ldr	r2, [r7, #16]
 801086a:	8952      	ldrh	r2, [r2, #10]
 801086c:	4293      	cmp	r3, r2
 801086e:	d905      	bls.n	801087c <f_write+0x1c4>
					cc = fs->csize - csect;
 8010870:	693b      	ldr	r3, [r7, #16]
 8010872:	895b      	ldrh	r3, [r3, #10]
 8010874:	461a      	mov	r2, r3
 8010876:	69bb      	ldr	r3, [r7, #24]
 8010878:	1ad3      	subs	r3, r2, r3
 801087a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801087c:	693b      	ldr	r3, [r7, #16]
 801087e:	7858      	ldrb	r0, [r3, #1]
 8010880:	6a3b      	ldr	r3, [r7, #32]
 8010882:	697a      	ldr	r2, [r7, #20]
 8010884:	69f9      	ldr	r1, [r7, #28]
 8010886:	f7fd ff71 	bl	800e76c <disk_write>
 801088a:	4603      	mov	r3, r0
 801088c:	2b00      	cmp	r3, #0
 801088e:	d004      	beq.n	801089a <f_write+0x1e2>
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	2201      	movs	r2, #1
 8010894:	755a      	strb	r2, [r3, #21]
 8010896:	2301      	movs	r3, #1
 8010898:	e09e      	b.n	80109d8 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 801089a:	68fb      	ldr	r3, [r7, #12]
 801089c:	6a1a      	ldr	r2, [r3, #32]
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	1ad3      	subs	r3, r2, r3
 80108a2:	6a3a      	ldr	r2, [r7, #32]
 80108a4:	429a      	cmp	r2, r3
 80108a6:	d918      	bls.n	80108da <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80108a8:	68fb      	ldr	r3, [r7, #12]
 80108aa:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	6a1a      	ldr	r2, [r3, #32]
 80108b2:	697b      	ldr	r3, [r7, #20]
 80108b4:	1ad3      	subs	r3, r2, r3
 80108b6:	693a      	ldr	r2, [r7, #16]
 80108b8:	8992      	ldrh	r2, [r2, #12]
 80108ba:	fb02 f303 	mul.w	r3, r2, r3
 80108be:	69fa      	ldr	r2, [r7, #28]
 80108c0:	18d1      	adds	r1, r2, r3
 80108c2:	693b      	ldr	r3, [r7, #16]
 80108c4:	899b      	ldrh	r3, [r3, #12]
 80108c6:	461a      	mov	r2, r3
 80108c8:	f7fe f810 	bl	800e8ec <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80108cc:	68fb      	ldr	r3, [r7, #12]
 80108ce:	7d1b      	ldrb	r3, [r3, #20]
 80108d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80108d4:	b2da      	uxtb	r2, r3
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80108da:	693b      	ldr	r3, [r7, #16]
 80108dc:	899b      	ldrh	r3, [r3, #12]
 80108de:	461a      	mov	r2, r3
 80108e0:	6a3b      	ldr	r3, [r7, #32]
 80108e2:	fb02 f303 	mul.w	r3, r2, r3
 80108e6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80108e8:	e04b      	b.n	8010982 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	6a1b      	ldr	r3, [r3, #32]
 80108ee:	697a      	ldr	r2, [r7, #20]
 80108f0:	429a      	cmp	r2, r3
 80108f2:	d016      	beq.n	8010922 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 80108f4:	68fb      	ldr	r3, [r7, #12]
 80108f6:	699a      	ldr	r2, [r3, #24]
 80108f8:	68fb      	ldr	r3, [r7, #12]
 80108fa:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d210      	bcs.n	8010922 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8010900:	693b      	ldr	r3, [r7, #16]
 8010902:	7858      	ldrb	r0, [r3, #1]
 8010904:	68fb      	ldr	r3, [r7, #12]
 8010906:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801090a:	2301      	movs	r3, #1
 801090c:	697a      	ldr	r2, [r7, #20]
 801090e:	f7fd ff0d 	bl	800e72c <disk_read>
 8010912:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8010914:	2b00      	cmp	r3, #0
 8010916:	d004      	beq.n	8010922 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8010918:	68fb      	ldr	r3, [r7, #12]
 801091a:	2201      	movs	r2, #1
 801091c:	755a      	strb	r2, [r3, #21]
 801091e:	2301      	movs	r3, #1
 8010920:	e05a      	b.n	80109d8 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8010922:	68fb      	ldr	r3, [r7, #12]
 8010924:	697a      	ldr	r2, [r7, #20]
 8010926:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010928:	693b      	ldr	r3, [r7, #16]
 801092a:	899b      	ldrh	r3, [r3, #12]
 801092c:	4618      	mov	r0, r3
 801092e:	68fb      	ldr	r3, [r7, #12]
 8010930:	699b      	ldr	r3, [r3, #24]
 8010932:	693a      	ldr	r2, [r7, #16]
 8010934:	8992      	ldrh	r2, [r2, #12]
 8010936:	fbb3 f1f2 	udiv	r1, r3, r2
 801093a:	fb01 f202 	mul.w	r2, r1, r2
 801093e:	1a9b      	subs	r3, r3, r2
 8010940:	1ac3      	subs	r3, r0, r3
 8010942:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8010944:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010946:	687b      	ldr	r3, [r7, #4]
 8010948:	429a      	cmp	r2, r3
 801094a:	d901      	bls.n	8010950 <f_write+0x298>
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8010950:	68fb      	ldr	r3, [r7, #12]
 8010952:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010956:	68fb      	ldr	r3, [r7, #12]
 8010958:	699b      	ldr	r3, [r3, #24]
 801095a:	693a      	ldr	r2, [r7, #16]
 801095c:	8992      	ldrh	r2, [r2, #12]
 801095e:	fbb3 f0f2 	udiv	r0, r3, r2
 8010962:	fb00 f202 	mul.w	r2, r0, r2
 8010966:	1a9b      	subs	r3, r3, r2
 8010968:	440b      	add	r3, r1
 801096a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801096c:	69f9      	ldr	r1, [r7, #28]
 801096e:	4618      	mov	r0, r3
 8010970:	f7fd ffbc 	bl	800e8ec <mem_cpy>
		fp->flag |= FA_DIRTY;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	7d1b      	ldrb	r3, [r3, #20]
 8010978:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801097c:	b2da      	uxtb	r2, r3
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8010982:	69fa      	ldr	r2, [r7, #28]
 8010984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010986:	4413      	add	r3, r2
 8010988:	61fb      	str	r3, [r7, #28]
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	699a      	ldr	r2, [r3, #24]
 801098e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010990:	441a      	add	r2, r3
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	619a      	str	r2, [r3, #24]
 8010996:	68fb      	ldr	r3, [r7, #12]
 8010998:	68da      	ldr	r2, [r3, #12]
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	699b      	ldr	r3, [r3, #24]
 801099e:	429a      	cmp	r2, r3
 80109a0:	bf38      	it	cc
 80109a2:	461a      	movcc	r2, r3
 80109a4:	68fb      	ldr	r3, [r7, #12]
 80109a6:	60da      	str	r2, [r3, #12]
 80109a8:	683b      	ldr	r3, [r7, #0]
 80109aa:	681a      	ldr	r2, [r3, #0]
 80109ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109ae:	441a      	add	r2, r3
 80109b0:	683b      	ldr	r3, [r7, #0]
 80109b2:	601a      	str	r2, [r3, #0]
 80109b4:	687a      	ldr	r2, [r7, #4]
 80109b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b8:	1ad3      	subs	r3, r2, r3
 80109ba:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80109bc:	687b      	ldr	r3, [r7, #4]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	f47f aeb5 	bne.w	801072e <f_write+0x76>
 80109c4:	e000      	b.n	80109c8 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80109c6:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	7d1b      	ldrb	r3, [r3, #20]
 80109cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109d0:	b2da      	uxtb	r2, r3
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80109d6:	2300      	movs	r3, #0
}
 80109d8:	4618      	mov	r0, r3
 80109da:	3730      	adds	r7, #48	; 0x30
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}

080109e0 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b086      	sub	sp, #24
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	f107 0208 	add.w	r2, r7, #8
 80109ee:	4611      	mov	r1, r2
 80109f0:	4618      	mov	r0, r3
 80109f2:	f7ff fc19 	bl	8010228 <validate>
 80109f6:	4603      	mov	r3, r0
 80109f8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80109fa:	7dfb      	ldrb	r3, [r7, #23]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d168      	bne.n	8010ad2 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	7d1b      	ldrb	r3, [r3, #20]
 8010a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a08:	2b00      	cmp	r3, #0
 8010a0a:	d062      	beq.n	8010ad2 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	7d1b      	ldrb	r3, [r3, #20]
 8010a10:	b25b      	sxtb	r3, r3
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	da15      	bge.n	8010a42 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010a16:	68bb      	ldr	r3, [r7, #8]
 8010a18:	7858      	ldrb	r0, [r3, #1]
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	6a1a      	ldr	r2, [r3, #32]
 8010a24:	2301      	movs	r3, #1
 8010a26:	f7fd fea1 	bl	800e76c <disk_write>
 8010a2a:	4603      	mov	r3, r0
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d001      	beq.n	8010a34 <f_sync+0x54>
 8010a30:	2301      	movs	r3, #1
 8010a32:	e04f      	b.n	8010ad4 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	7d1b      	ldrb	r3, [r3, #20]
 8010a38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a3c:	b2da      	uxtb	r2, r3
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010a42:	f7fb fc1b 	bl	800c27c <get_fattime>
 8010a46:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010a48:	68ba      	ldr	r2, [r7, #8]
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a4e:	4619      	mov	r1, r3
 8010a50:	4610      	mov	r0, r2
 8010a52:	f7fe f979 	bl	800ed48 <move_window>
 8010a56:	4603      	mov	r3, r0
 8010a58:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010a5a:	7dfb      	ldrb	r3, [r7, #23]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d138      	bne.n	8010ad2 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a64:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	330b      	adds	r3, #11
 8010a6a:	781a      	ldrb	r2, [r3, #0]
 8010a6c:	68fb      	ldr	r3, [r7, #12]
 8010a6e:	330b      	adds	r3, #11
 8010a70:	f042 0220 	orr.w	r2, r2, #32
 8010a74:	b2d2      	uxtb	r2, r2
 8010a76:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010a78:	687b      	ldr	r3, [r7, #4]
 8010a7a:	6818      	ldr	r0, [r3, #0]
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	689b      	ldr	r3, [r3, #8]
 8010a80:	461a      	mov	r2, r3
 8010a82:	68f9      	ldr	r1, [r7, #12]
 8010a84:	f7fe ff05 	bl	800f892 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	f103 021c 	add.w	r2, r3, #28
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	68db      	ldr	r3, [r3, #12]
 8010a92:	4619      	mov	r1, r3
 8010a94:	4610      	mov	r0, r2
 8010a96:	f7fd fefd 	bl	800e894 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	3316      	adds	r3, #22
 8010a9e:	6939      	ldr	r1, [r7, #16]
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7fd fef7 	bl	800e894 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010aa6:	68fb      	ldr	r3, [r7, #12]
 8010aa8:	3312      	adds	r3, #18
 8010aaa:	2100      	movs	r1, #0
 8010aac:	4618      	mov	r0, r3
 8010aae:	f7fd fed6 	bl	800e85e <st_word>
					fs->wflag = 1;
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	2201      	movs	r2, #1
 8010ab6:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7fe f972 	bl	800eda4 <sync_fs>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	7d1b      	ldrb	r3, [r3, #20]
 8010ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010acc:	b2da      	uxtb	r2, r3
 8010ace:	687b      	ldr	r3, [r7, #4]
 8010ad0:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010ad2:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ad4:	4618      	mov	r0, r3
 8010ad6:	3718      	adds	r7, #24
 8010ad8:	46bd      	mov	sp, r7
 8010ada:	bd80      	pop	{r7, pc}

08010adc <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010adc:	b580      	push	{r7, lr}
 8010ade:	b084      	sub	sp, #16
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010ae4:	6878      	ldr	r0, [r7, #4]
 8010ae6:	f7ff ff7b 	bl	80109e0 <f_sync>
 8010aea:	4603      	mov	r3, r0
 8010aec:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010aee:	7bfb      	ldrb	r3, [r7, #15]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d118      	bne.n	8010b26 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	f107 0208 	add.w	r2, r7, #8
 8010afa:	4611      	mov	r1, r2
 8010afc:	4618      	mov	r0, r3
 8010afe:	f7ff fb93 	bl	8010228 <validate>
 8010b02:	4603      	mov	r3, r0
 8010b04:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010b06:	7bfb      	ldrb	r3, [r7, #15]
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d10c      	bne.n	8010b26 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	691b      	ldr	r3, [r3, #16]
 8010b10:	4618      	mov	r0, r3
 8010b12:	f7fe f875 	bl	800ec00 <dec_lock>
 8010b16:	4603      	mov	r3, r0
 8010b18:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010b1a:	7bfb      	ldrb	r3, [r7, #15]
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d102      	bne.n	8010b26 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010b20:	687b      	ldr	r3, [r7, #4]
 8010b22:	2200      	movs	r2, #0
 8010b24:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b28:	4618      	mov	r0, r3
 8010b2a:	3710      	adds	r7, #16
 8010b2c:	46bd      	mov	sp, r7
 8010b2e:	bd80      	pop	{r7, pc}

08010b30 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010b30:	b480      	push	{r7}
 8010b32:	b087      	sub	sp, #28
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	60f8      	str	r0, [r7, #12]
 8010b38:	60b9      	str	r1, [r7, #8]
 8010b3a:	4613      	mov	r3, r2
 8010b3c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010b3e:	2301      	movs	r3, #1
 8010b40:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010b42:	2300      	movs	r3, #0
 8010b44:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010b46:	4b1f      	ldr	r3, [pc, #124]	; (8010bc4 <FATFS_LinkDriverEx+0x94>)
 8010b48:	7a5b      	ldrb	r3, [r3, #9]
 8010b4a:	b2db      	uxtb	r3, r3
 8010b4c:	2b00      	cmp	r3, #0
 8010b4e:	d131      	bne.n	8010bb4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010b50:	4b1c      	ldr	r3, [pc, #112]	; (8010bc4 <FATFS_LinkDriverEx+0x94>)
 8010b52:	7a5b      	ldrb	r3, [r3, #9]
 8010b54:	b2db      	uxtb	r3, r3
 8010b56:	461a      	mov	r2, r3
 8010b58:	4b1a      	ldr	r3, [pc, #104]	; (8010bc4 <FATFS_LinkDriverEx+0x94>)
 8010b5a:	2100      	movs	r1, #0
 8010b5c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010b5e:	4b19      	ldr	r3, [pc, #100]	; (8010bc4 <FATFS_LinkDriverEx+0x94>)
 8010b60:	7a5b      	ldrb	r3, [r3, #9]
 8010b62:	b2db      	uxtb	r3, r3
 8010b64:	4a17      	ldr	r2, [pc, #92]	; (8010bc4 <FATFS_LinkDriverEx+0x94>)
 8010b66:	009b      	lsls	r3, r3, #2
 8010b68:	4413      	add	r3, r2
 8010b6a:	68fa      	ldr	r2, [r7, #12]
 8010b6c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010b6e:	4b15      	ldr	r3, [pc, #84]	; (8010bc4 <FATFS_LinkDriverEx+0x94>)
 8010b70:	7a5b      	ldrb	r3, [r3, #9]
 8010b72:	b2db      	uxtb	r3, r3
 8010b74:	461a      	mov	r2, r3
 8010b76:	4b13      	ldr	r3, [pc, #76]	; (8010bc4 <FATFS_LinkDriverEx+0x94>)
 8010b78:	4413      	add	r3, r2
 8010b7a:	79fa      	ldrb	r2, [r7, #7]
 8010b7c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010b7e:	4b11      	ldr	r3, [pc, #68]	; (8010bc4 <FATFS_LinkDriverEx+0x94>)
 8010b80:	7a5b      	ldrb	r3, [r3, #9]
 8010b82:	b2db      	uxtb	r3, r3
 8010b84:	1c5a      	adds	r2, r3, #1
 8010b86:	b2d1      	uxtb	r1, r2
 8010b88:	4a0e      	ldr	r2, [pc, #56]	; (8010bc4 <FATFS_LinkDriverEx+0x94>)
 8010b8a:	7251      	strb	r1, [r2, #9]
 8010b8c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010b8e:	7dbb      	ldrb	r3, [r7, #22]
 8010b90:	3330      	adds	r3, #48	; 0x30
 8010b92:	b2da      	uxtb	r2, r3
 8010b94:	68bb      	ldr	r3, [r7, #8]
 8010b96:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	3301      	adds	r3, #1
 8010b9c:	223a      	movs	r2, #58	; 0x3a
 8010b9e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010ba0:	68bb      	ldr	r3, [r7, #8]
 8010ba2:	3302      	adds	r3, #2
 8010ba4:	222f      	movs	r2, #47	; 0x2f
 8010ba6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010ba8:	68bb      	ldr	r3, [r7, #8]
 8010baa:	3303      	adds	r3, #3
 8010bac:	2200      	movs	r2, #0
 8010bae:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010bb0:	2300      	movs	r3, #0
 8010bb2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010bb6:	4618      	mov	r0, r3
 8010bb8:	371c      	adds	r7, #28
 8010bba:	46bd      	mov	sp, r7
 8010bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bc0:	4770      	bx	lr
 8010bc2:	bf00      	nop
 8010bc4:	20000b4c 	.word	0x20000b4c

08010bc8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010bc8:	b580      	push	{r7, lr}
 8010bca:	b082      	sub	sp, #8
 8010bcc:	af00      	add	r7, sp, #0
 8010bce:	6078      	str	r0, [r7, #4]
 8010bd0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010bd2:	2200      	movs	r2, #0
 8010bd4:	6839      	ldr	r1, [r7, #0]
 8010bd6:	6878      	ldr	r0, [r7, #4]
 8010bd8:	f7ff ffaa 	bl	8010b30 <FATFS_LinkDriverEx>
 8010bdc:	4603      	mov	r3, r0
}
 8010bde:	4618      	mov	r0, r3
 8010be0:	3708      	adds	r7, #8
 8010be2:	46bd      	mov	sp, r7
 8010be4:	bd80      	pop	{r7, pc}
	...

08010be8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010be8:	b580      	push	{r7, lr}
 8010bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8010bec:	2200      	movs	r2, #0
 8010bee:	4912      	ldr	r1, [pc, #72]	; (8010c38 <MX_USB_DEVICE_Init+0x50>)
 8010bf0:	4812      	ldr	r0, [pc, #72]	; (8010c3c <MX_USB_DEVICE_Init+0x54>)
 8010bf2:	f7fc fa69 	bl	800d0c8 <USBD_Init>
 8010bf6:	4603      	mov	r3, r0
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d001      	beq.n	8010c00 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010bfc:	f7f2 f850 	bl	8002ca0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8010c00:	490f      	ldr	r1, [pc, #60]	; (8010c40 <MX_USB_DEVICE_Init+0x58>)
 8010c02:	480e      	ldr	r0, [pc, #56]	; (8010c3c <MX_USB_DEVICE_Init+0x54>)
 8010c04:	f7fc fa90 	bl	800d128 <USBD_RegisterClass>
 8010c08:	4603      	mov	r3, r0
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d001      	beq.n	8010c12 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010c0e:	f7f2 f847 	bl	8002ca0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8010c12:	490c      	ldr	r1, [pc, #48]	; (8010c44 <MX_USB_DEVICE_Init+0x5c>)
 8010c14:	4809      	ldr	r0, [pc, #36]	; (8010c3c <MX_USB_DEVICE_Init+0x54>)
 8010c16:	f7fc f981 	bl	800cf1c <USBD_CDC_RegisterInterface>
 8010c1a:	4603      	mov	r3, r0
 8010c1c:	2b00      	cmp	r3, #0
 8010c1e:	d001      	beq.n	8010c24 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010c20:	f7f2 f83e 	bl	8002ca0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8010c24:	4805      	ldr	r0, [pc, #20]	; (8010c3c <MX_USB_DEVICE_Init+0x54>)
 8010c26:	f7fc fab5 	bl	800d194 <USBD_Start>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d001      	beq.n	8010c34 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010c30:	f7f2 f836 	bl	8002ca0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010c34:	bf00      	nop
 8010c36:	bd80      	pop	{r7, pc}
 8010c38:	200000d0 	.word	0x200000d0
 8010c3c:	20000b58 	.word	0x20000b58
 8010c40:	2000003c 	.word	0x2000003c
 8010c44:	200000bc 	.word	0x200000bc

08010c48 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	4905      	ldr	r1, [pc, #20]	; (8010c64 <CDC_Init_FS+0x1c>)
 8010c50:	4805      	ldr	r0, [pc, #20]	; (8010c68 <CDC_Init_FS+0x20>)
 8010c52:	f7fc f97d 	bl	800cf50 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8010c56:	4905      	ldr	r1, [pc, #20]	; (8010c6c <CDC_Init_FS+0x24>)
 8010c58:	4803      	ldr	r0, [pc, #12]	; (8010c68 <CDC_Init_FS+0x20>)
 8010c5a:	f7fc f99b 	bl	800cf94 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010c5e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8010c60:	4618      	mov	r0, r3
 8010c62:	bd80      	pop	{r7, pc}
 8010c64:	20001634 	.word	0x20001634
 8010c68:	20000b58 	.word	0x20000b58
 8010c6c:	20000e34 	.word	0x20000e34

08010c70 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8010c70:	b480      	push	{r7}
 8010c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8010c74:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8010c76:	4618      	mov	r0, r3
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7e:	4770      	bx	lr

08010c80 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010c80:	b480      	push	{r7}
 8010c82:	b083      	sub	sp, #12
 8010c84:	af00      	add	r7, sp, #0
 8010c86:	4603      	mov	r3, r0
 8010c88:	6039      	str	r1, [r7, #0]
 8010c8a:	71fb      	strb	r3, [r7, #7]
 8010c8c:	4613      	mov	r3, r2
 8010c8e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8010c90:	79fb      	ldrb	r3, [r7, #7]
 8010c92:	2b23      	cmp	r3, #35	; 0x23
 8010c94:	d84a      	bhi.n	8010d2c <CDC_Control_FS+0xac>
 8010c96:	a201      	add	r2, pc, #4	; (adr r2, 8010c9c <CDC_Control_FS+0x1c>)
 8010c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c9c:	08010d2d 	.word	0x08010d2d
 8010ca0:	08010d2d 	.word	0x08010d2d
 8010ca4:	08010d2d 	.word	0x08010d2d
 8010ca8:	08010d2d 	.word	0x08010d2d
 8010cac:	08010d2d 	.word	0x08010d2d
 8010cb0:	08010d2d 	.word	0x08010d2d
 8010cb4:	08010d2d 	.word	0x08010d2d
 8010cb8:	08010d2d 	.word	0x08010d2d
 8010cbc:	08010d2d 	.word	0x08010d2d
 8010cc0:	08010d2d 	.word	0x08010d2d
 8010cc4:	08010d2d 	.word	0x08010d2d
 8010cc8:	08010d2d 	.word	0x08010d2d
 8010ccc:	08010d2d 	.word	0x08010d2d
 8010cd0:	08010d2d 	.word	0x08010d2d
 8010cd4:	08010d2d 	.word	0x08010d2d
 8010cd8:	08010d2d 	.word	0x08010d2d
 8010cdc:	08010d2d 	.word	0x08010d2d
 8010ce0:	08010d2d 	.word	0x08010d2d
 8010ce4:	08010d2d 	.word	0x08010d2d
 8010ce8:	08010d2d 	.word	0x08010d2d
 8010cec:	08010d2d 	.word	0x08010d2d
 8010cf0:	08010d2d 	.word	0x08010d2d
 8010cf4:	08010d2d 	.word	0x08010d2d
 8010cf8:	08010d2d 	.word	0x08010d2d
 8010cfc:	08010d2d 	.word	0x08010d2d
 8010d00:	08010d2d 	.word	0x08010d2d
 8010d04:	08010d2d 	.word	0x08010d2d
 8010d08:	08010d2d 	.word	0x08010d2d
 8010d0c:	08010d2d 	.word	0x08010d2d
 8010d10:	08010d2d 	.word	0x08010d2d
 8010d14:	08010d2d 	.word	0x08010d2d
 8010d18:	08010d2d 	.word	0x08010d2d
 8010d1c:	08010d2d 	.word	0x08010d2d
 8010d20:	08010d2d 	.word	0x08010d2d
 8010d24:	08010d2d 	.word	0x08010d2d
 8010d28:	08010d2d 	.word	0x08010d2d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010d2c:	bf00      	nop
  }

  return (USBD_OK);
 8010d2e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8010d30:	4618      	mov	r0, r3
 8010d32:	370c      	adds	r7, #12
 8010d34:	46bd      	mov	sp, r7
 8010d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3a:	4770      	bx	lr

08010d3c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	b082      	sub	sp, #8
 8010d40:	af00      	add	r7, sp, #0
 8010d42:	6078      	str	r0, [r7, #4]
 8010d44:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8010d46:	6879      	ldr	r1, [r7, #4]
 8010d48:	4805      	ldr	r0, [pc, #20]	; (8010d60 <CDC_Receive_FS+0x24>)
 8010d4a:	f7fc f923 	bl	800cf94 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8010d4e:	4804      	ldr	r0, [pc, #16]	; (8010d60 <CDC_Receive_FS+0x24>)
 8010d50:	f7fc f984 	bl	800d05c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010d54:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8010d56:	4618      	mov	r0, r3
 8010d58:	3708      	adds	r7, #8
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}
 8010d5e:	bf00      	nop
 8010d60:	20000b58 	.word	0x20000b58

08010d64 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b084      	sub	sp, #16
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	6078      	str	r0, [r7, #4]
 8010d6c:	460b      	mov	r3, r1
 8010d6e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8010d70:	2300      	movs	r3, #0
 8010d72:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8010d74:	4b0d      	ldr	r3, [pc, #52]	; (8010dac <CDC_Transmit_FS+0x48>)
 8010d76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8010d7a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d001      	beq.n	8010d8a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8010d86:	2301      	movs	r3, #1
 8010d88:	e00b      	b.n	8010da2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8010d8a:	887b      	ldrh	r3, [r7, #2]
 8010d8c:	461a      	mov	r2, r3
 8010d8e:	6879      	ldr	r1, [r7, #4]
 8010d90:	4806      	ldr	r0, [pc, #24]	; (8010dac <CDC_Transmit_FS+0x48>)
 8010d92:	f7fc f8dd 	bl	800cf50 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8010d96:	4805      	ldr	r0, [pc, #20]	; (8010dac <CDC_Transmit_FS+0x48>)
 8010d98:	f7fc f91a 	bl	800cfd0 <USBD_CDC_TransmitPacket>
 8010d9c:	4603      	mov	r3, r0
 8010d9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8010da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010da2:	4618      	mov	r0, r3
 8010da4:	3710      	adds	r7, #16
 8010da6:	46bd      	mov	sp, r7
 8010da8:	bd80      	pop	{r7, pc}
 8010daa:	bf00      	nop
 8010dac:	20000b58 	.word	0x20000b58

08010db0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010db0:	b480      	push	{r7}
 8010db2:	b087      	sub	sp, #28
 8010db4:	af00      	add	r7, sp, #0
 8010db6:	60f8      	str	r0, [r7, #12]
 8010db8:	60b9      	str	r1, [r7, #8]
 8010dba:	4613      	mov	r3, r2
 8010dbc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010dbe:	2300      	movs	r3, #0
 8010dc0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8010dc2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010dc6:	4618      	mov	r0, r3
 8010dc8:	371c      	adds	r7, #28
 8010dca:	46bd      	mov	sp, r7
 8010dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dd0:	4770      	bx	lr
	...

08010dd4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010dd4:	b480      	push	{r7}
 8010dd6:	b083      	sub	sp, #12
 8010dd8:	af00      	add	r7, sp, #0
 8010dda:	4603      	mov	r3, r0
 8010ddc:	6039      	str	r1, [r7, #0]
 8010dde:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8010de0:	683b      	ldr	r3, [r7, #0]
 8010de2:	2212      	movs	r2, #18
 8010de4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8010de6:	4b03      	ldr	r3, [pc, #12]	; (8010df4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8010de8:	4618      	mov	r0, r3
 8010dea:	370c      	adds	r7, #12
 8010dec:	46bd      	mov	sp, r7
 8010dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010df2:	4770      	bx	lr
 8010df4:	200000ec 	.word	0x200000ec

08010df8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010df8:	b480      	push	{r7}
 8010dfa:	b083      	sub	sp, #12
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	4603      	mov	r3, r0
 8010e00:	6039      	str	r1, [r7, #0]
 8010e02:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	2204      	movs	r2, #4
 8010e08:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010e0a:	4b03      	ldr	r3, [pc, #12]	; (8010e18 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	370c      	adds	r7, #12
 8010e10:	46bd      	mov	sp, r7
 8010e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e16:	4770      	bx	lr
 8010e18:	20000100 	.word	0x20000100

08010e1c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e1c:	b580      	push	{r7, lr}
 8010e1e:	b082      	sub	sp, #8
 8010e20:	af00      	add	r7, sp, #0
 8010e22:	4603      	mov	r3, r0
 8010e24:	6039      	str	r1, [r7, #0]
 8010e26:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010e28:	79fb      	ldrb	r3, [r7, #7]
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d105      	bne.n	8010e3a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010e2e:	683a      	ldr	r2, [r7, #0]
 8010e30:	4907      	ldr	r1, [pc, #28]	; (8010e50 <USBD_FS_ProductStrDescriptor+0x34>)
 8010e32:	4808      	ldr	r0, [pc, #32]	; (8010e54 <USBD_FS_ProductStrDescriptor+0x38>)
 8010e34:	f7fd fb5a 	bl	800e4ec <USBD_GetString>
 8010e38:	e004      	b.n	8010e44 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8010e3a:	683a      	ldr	r2, [r7, #0]
 8010e3c:	4904      	ldr	r1, [pc, #16]	; (8010e50 <USBD_FS_ProductStrDescriptor+0x34>)
 8010e3e:	4805      	ldr	r0, [pc, #20]	; (8010e54 <USBD_FS_ProductStrDescriptor+0x38>)
 8010e40:	f7fd fb54 	bl	800e4ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8010e44:	4b02      	ldr	r3, [pc, #8]	; (8010e50 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8010e46:	4618      	mov	r0, r3
 8010e48:	3708      	adds	r7, #8
 8010e4a:	46bd      	mov	sp, r7
 8010e4c:	bd80      	pop	{r7, pc}
 8010e4e:	bf00      	nop
 8010e50:	20001e34 	.word	0x20001e34
 8010e54:	080157a8 	.word	0x080157a8

08010e58 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b082      	sub	sp, #8
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	4603      	mov	r3, r0
 8010e60:	6039      	str	r1, [r7, #0]
 8010e62:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010e64:	683a      	ldr	r2, [r7, #0]
 8010e66:	4904      	ldr	r1, [pc, #16]	; (8010e78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8010e68:	4804      	ldr	r0, [pc, #16]	; (8010e7c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8010e6a:	f7fd fb3f 	bl	800e4ec <USBD_GetString>
  return USBD_StrDesc;
 8010e6e:	4b02      	ldr	r3, [pc, #8]	; (8010e78 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3708      	adds	r7, #8
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}
 8010e78:	20001e34 	.word	0x20001e34
 8010e7c:	080157c0 	.word	0x080157c0

08010e80 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e80:	b580      	push	{r7, lr}
 8010e82:	b082      	sub	sp, #8
 8010e84:	af00      	add	r7, sp, #0
 8010e86:	4603      	mov	r3, r0
 8010e88:	6039      	str	r1, [r7, #0]
 8010e8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010e8c:	683b      	ldr	r3, [r7, #0]
 8010e8e:	221a      	movs	r2, #26
 8010e90:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010e92:	f000 f843 	bl	8010f1c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8010e96:	4b02      	ldr	r3, [pc, #8]	; (8010ea0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8010e98:	4618      	mov	r0, r3
 8010e9a:	3708      	adds	r7, #8
 8010e9c:	46bd      	mov	sp, r7
 8010e9e:	bd80      	pop	{r7, pc}
 8010ea0:	20000104 	.word	0x20000104

08010ea4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ea4:	b580      	push	{r7, lr}
 8010ea6:	b082      	sub	sp, #8
 8010ea8:	af00      	add	r7, sp, #0
 8010eaa:	4603      	mov	r3, r0
 8010eac:	6039      	str	r1, [r7, #0]
 8010eae:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010eb0:	79fb      	ldrb	r3, [r7, #7]
 8010eb2:	2b00      	cmp	r3, #0
 8010eb4:	d105      	bne.n	8010ec2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010eb6:	683a      	ldr	r2, [r7, #0]
 8010eb8:	4907      	ldr	r1, [pc, #28]	; (8010ed8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010eba:	4808      	ldr	r0, [pc, #32]	; (8010edc <USBD_FS_ConfigStrDescriptor+0x38>)
 8010ebc:	f7fd fb16 	bl	800e4ec <USBD_GetString>
 8010ec0:	e004      	b.n	8010ecc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8010ec2:	683a      	ldr	r2, [r7, #0]
 8010ec4:	4904      	ldr	r1, [pc, #16]	; (8010ed8 <USBD_FS_ConfigStrDescriptor+0x34>)
 8010ec6:	4805      	ldr	r0, [pc, #20]	; (8010edc <USBD_FS_ConfigStrDescriptor+0x38>)
 8010ec8:	f7fd fb10 	bl	800e4ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8010ecc:	4b02      	ldr	r3, [pc, #8]	; (8010ed8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3708      	adds	r7, #8
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}
 8010ed6:	bf00      	nop
 8010ed8:	20001e34 	.word	0x20001e34
 8010edc:	080157d4 	.word	0x080157d4

08010ee0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b082      	sub	sp, #8
 8010ee4:	af00      	add	r7, sp, #0
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	6039      	str	r1, [r7, #0]
 8010eea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010eec:	79fb      	ldrb	r3, [r7, #7]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d105      	bne.n	8010efe <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010ef2:	683a      	ldr	r2, [r7, #0]
 8010ef4:	4907      	ldr	r1, [pc, #28]	; (8010f14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010ef6:	4808      	ldr	r0, [pc, #32]	; (8010f18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010ef8:	f7fd faf8 	bl	800e4ec <USBD_GetString>
 8010efc:	e004      	b.n	8010f08 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8010efe:	683a      	ldr	r2, [r7, #0]
 8010f00:	4904      	ldr	r1, [pc, #16]	; (8010f14 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8010f02:	4805      	ldr	r0, [pc, #20]	; (8010f18 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8010f04:	f7fd faf2 	bl	800e4ec <USBD_GetString>
  }
  return USBD_StrDesc;
 8010f08:	4b02      	ldr	r3, [pc, #8]	; (8010f14 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	3708      	adds	r7, #8
 8010f0e:	46bd      	mov	sp, r7
 8010f10:	bd80      	pop	{r7, pc}
 8010f12:	bf00      	nop
 8010f14:	20001e34 	.word	0x20001e34
 8010f18:	080157e0 	.word	0x080157e0

08010f1c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010f1c:	b580      	push	{r7, lr}
 8010f1e:	b084      	sub	sp, #16
 8010f20:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010f22:	4b0f      	ldr	r3, [pc, #60]	; (8010f60 <Get_SerialNum+0x44>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010f28:	4b0e      	ldr	r3, [pc, #56]	; (8010f64 <Get_SerialNum+0x48>)
 8010f2a:	681b      	ldr	r3, [r3, #0]
 8010f2c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010f2e:	4b0e      	ldr	r3, [pc, #56]	; (8010f68 <Get_SerialNum+0x4c>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010f34:	68fa      	ldr	r2, [r7, #12]
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	4413      	add	r3, r2
 8010f3a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010f3c:	68fb      	ldr	r3, [r7, #12]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d009      	beq.n	8010f56 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010f42:	2208      	movs	r2, #8
 8010f44:	4909      	ldr	r1, [pc, #36]	; (8010f6c <Get_SerialNum+0x50>)
 8010f46:	68f8      	ldr	r0, [r7, #12]
 8010f48:	f000 f814 	bl	8010f74 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010f4c:	2204      	movs	r2, #4
 8010f4e:	4908      	ldr	r1, [pc, #32]	; (8010f70 <Get_SerialNum+0x54>)
 8010f50:	68b8      	ldr	r0, [r7, #8]
 8010f52:	f000 f80f 	bl	8010f74 <IntToUnicode>
  }
}
 8010f56:	bf00      	nop
 8010f58:	3710      	adds	r7, #16
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	1fff7a10 	.word	0x1fff7a10
 8010f64:	1fff7a14 	.word	0x1fff7a14
 8010f68:	1fff7a18 	.word	0x1fff7a18
 8010f6c:	20000106 	.word	0x20000106
 8010f70:	20000116 	.word	0x20000116

08010f74 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010f74:	b480      	push	{r7}
 8010f76:	b087      	sub	sp, #28
 8010f78:	af00      	add	r7, sp, #0
 8010f7a:	60f8      	str	r0, [r7, #12]
 8010f7c:	60b9      	str	r1, [r7, #8]
 8010f7e:	4613      	mov	r3, r2
 8010f80:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010f82:	2300      	movs	r3, #0
 8010f84:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010f86:	2300      	movs	r3, #0
 8010f88:	75fb      	strb	r3, [r7, #23]
 8010f8a:	e027      	b.n	8010fdc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010f8c:	68fb      	ldr	r3, [r7, #12]
 8010f8e:	0f1b      	lsrs	r3, r3, #28
 8010f90:	2b09      	cmp	r3, #9
 8010f92:	d80b      	bhi.n	8010fac <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	0f1b      	lsrs	r3, r3, #28
 8010f98:	b2da      	uxtb	r2, r3
 8010f9a:	7dfb      	ldrb	r3, [r7, #23]
 8010f9c:	005b      	lsls	r3, r3, #1
 8010f9e:	4619      	mov	r1, r3
 8010fa0:	68bb      	ldr	r3, [r7, #8]
 8010fa2:	440b      	add	r3, r1
 8010fa4:	3230      	adds	r2, #48	; 0x30
 8010fa6:	b2d2      	uxtb	r2, r2
 8010fa8:	701a      	strb	r2, [r3, #0]
 8010faa:	e00a      	b.n	8010fc2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010fac:	68fb      	ldr	r3, [r7, #12]
 8010fae:	0f1b      	lsrs	r3, r3, #28
 8010fb0:	b2da      	uxtb	r2, r3
 8010fb2:	7dfb      	ldrb	r3, [r7, #23]
 8010fb4:	005b      	lsls	r3, r3, #1
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	68bb      	ldr	r3, [r7, #8]
 8010fba:	440b      	add	r3, r1
 8010fbc:	3237      	adds	r2, #55	; 0x37
 8010fbe:	b2d2      	uxtb	r2, r2
 8010fc0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	011b      	lsls	r3, r3, #4
 8010fc6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8010fc8:	7dfb      	ldrb	r3, [r7, #23]
 8010fca:	005b      	lsls	r3, r3, #1
 8010fcc:	3301      	adds	r3, #1
 8010fce:	68ba      	ldr	r2, [r7, #8]
 8010fd0:	4413      	add	r3, r2
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8010fd6:	7dfb      	ldrb	r3, [r7, #23]
 8010fd8:	3301      	adds	r3, #1
 8010fda:	75fb      	strb	r3, [r7, #23]
 8010fdc:	7dfa      	ldrb	r2, [r7, #23]
 8010fde:	79fb      	ldrb	r3, [r7, #7]
 8010fe0:	429a      	cmp	r2, r3
 8010fe2:	d3d3      	bcc.n	8010f8c <IntToUnicode+0x18>
  }
}
 8010fe4:	bf00      	nop
 8010fe6:	bf00      	nop
 8010fe8:	371c      	adds	r7, #28
 8010fea:	46bd      	mov	sp, r7
 8010fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff0:	4770      	bx	lr
	...

08010ff4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b08a      	sub	sp, #40	; 0x28
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8010ffc:	f107 0314 	add.w	r3, r7, #20
 8011000:	2200      	movs	r2, #0
 8011002:	601a      	str	r2, [r3, #0]
 8011004:	605a      	str	r2, [r3, #4]
 8011006:	609a      	str	r2, [r3, #8]
 8011008:	60da      	str	r2, [r3, #12]
 801100a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 801100c:	687b      	ldr	r3, [r7, #4]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011014:	d13a      	bne.n	801108c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011016:	2300      	movs	r3, #0
 8011018:	613b      	str	r3, [r7, #16]
 801101a:	4b1e      	ldr	r3, [pc, #120]	; (8011094 <HAL_PCD_MspInit+0xa0>)
 801101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801101e:	4a1d      	ldr	r2, [pc, #116]	; (8011094 <HAL_PCD_MspInit+0xa0>)
 8011020:	f043 0301 	orr.w	r3, r3, #1
 8011024:	6313      	str	r3, [r2, #48]	; 0x30
 8011026:	4b1b      	ldr	r3, [pc, #108]	; (8011094 <HAL_PCD_MspInit+0xa0>)
 8011028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801102a:	f003 0301 	and.w	r3, r3, #1
 801102e:	613b      	str	r3, [r7, #16]
 8011030:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8011032:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011036:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011038:	2302      	movs	r3, #2
 801103a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801103c:	2300      	movs	r3, #0
 801103e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011040:	2303      	movs	r3, #3
 8011042:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011044:	230a      	movs	r3, #10
 8011046:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011048:	f107 0314 	add.w	r3, r7, #20
 801104c:	4619      	mov	r1, r3
 801104e:	4812      	ldr	r0, [pc, #72]	; (8011098 <HAL_PCD_MspInit+0xa4>)
 8011050:	f7f2 ff30 	bl	8003eb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011054:	4b0f      	ldr	r3, [pc, #60]	; (8011094 <HAL_PCD_MspInit+0xa0>)
 8011056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011058:	4a0e      	ldr	r2, [pc, #56]	; (8011094 <HAL_PCD_MspInit+0xa0>)
 801105a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801105e:	6353      	str	r3, [r2, #52]	; 0x34
 8011060:	2300      	movs	r3, #0
 8011062:	60fb      	str	r3, [r7, #12]
 8011064:	4b0b      	ldr	r3, [pc, #44]	; (8011094 <HAL_PCD_MspInit+0xa0>)
 8011066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011068:	4a0a      	ldr	r2, [pc, #40]	; (8011094 <HAL_PCD_MspInit+0xa0>)
 801106a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801106e:	6453      	str	r3, [r2, #68]	; 0x44
 8011070:	4b08      	ldr	r3, [pc, #32]	; (8011094 <HAL_PCD_MspInit+0xa0>)
 8011072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011074:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011078:	60fb      	str	r3, [r7, #12]
 801107a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 801107c:	2200      	movs	r2, #0
 801107e:	2100      	movs	r1, #0
 8011080:	2043      	movs	r0, #67	; 0x43
 8011082:	f7f2 fad2 	bl	800362a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011086:	2043      	movs	r0, #67	; 0x43
 8011088:	f7f2 faeb 	bl	8003662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801108c:	bf00      	nop
 801108e:	3728      	adds	r7, #40	; 0x28
 8011090:	46bd      	mov	sp, r7
 8011092:	bd80      	pop	{r7, pc}
 8011094:	40023800 	.word	0x40023800
 8011098:	40020000 	.word	0x40020000

0801109c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801109c:	b580      	push	{r7, lr}
 801109e:	b082      	sub	sp, #8
 80110a0:	af00      	add	r7, sp, #0
 80110a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80110b0:	4619      	mov	r1, r3
 80110b2:	4610      	mov	r0, r2
 80110b4:	f7fc f8bb 	bl	800d22e <USBD_LL_SetupStage>
}
 80110b8:	bf00      	nop
 80110ba:	3708      	adds	r7, #8
 80110bc:	46bd      	mov	sp, r7
 80110be:	bd80      	pop	{r7, pc}

080110c0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110c0:	b580      	push	{r7, lr}
 80110c2:	b082      	sub	sp, #8
 80110c4:	af00      	add	r7, sp, #0
 80110c6:	6078      	str	r0, [r7, #4]
 80110c8:	460b      	mov	r3, r1
 80110ca:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80110d2:	78fa      	ldrb	r2, [r7, #3]
 80110d4:	6879      	ldr	r1, [r7, #4]
 80110d6:	4613      	mov	r3, r2
 80110d8:	00db      	lsls	r3, r3, #3
 80110da:	4413      	add	r3, r2
 80110dc:	009b      	lsls	r3, r3, #2
 80110de:	440b      	add	r3, r1
 80110e0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80110e4:	681a      	ldr	r2, [r3, #0]
 80110e6:	78fb      	ldrb	r3, [r7, #3]
 80110e8:	4619      	mov	r1, r3
 80110ea:	f7fc f8f5 	bl	800d2d8 <USBD_LL_DataOutStage>
}
 80110ee:	bf00      	nop
 80110f0:	3708      	adds	r7, #8
 80110f2:	46bd      	mov	sp, r7
 80110f4:	bd80      	pop	{r7, pc}

080110f6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80110f6:	b580      	push	{r7, lr}
 80110f8:	b082      	sub	sp, #8
 80110fa:	af00      	add	r7, sp, #0
 80110fc:	6078      	str	r0, [r7, #4]
 80110fe:	460b      	mov	r3, r1
 8011100:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8011108:	78fa      	ldrb	r2, [r7, #3]
 801110a:	6879      	ldr	r1, [r7, #4]
 801110c:	4613      	mov	r3, r2
 801110e:	00db      	lsls	r3, r3, #3
 8011110:	4413      	add	r3, r2
 8011112:	009b      	lsls	r3, r3, #2
 8011114:	440b      	add	r3, r1
 8011116:	334c      	adds	r3, #76	; 0x4c
 8011118:	681a      	ldr	r2, [r3, #0]
 801111a:	78fb      	ldrb	r3, [r7, #3]
 801111c:	4619      	mov	r1, r3
 801111e:	f7fc f98e 	bl	800d43e <USBD_LL_DataInStage>
}
 8011122:	bf00      	nop
 8011124:	3708      	adds	r7, #8
 8011126:	46bd      	mov	sp, r7
 8011128:	bd80      	pop	{r7, pc}

0801112a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801112a:	b580      	push	{r7, lr}
 801112c:	b082      	sub	sp, #8
 801112e:	af00      	add	r7, sp, #0
 8011130:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011132:	687b      	ldr	r3, [r7, #4]
 8011134:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011138:	4618      	mov	r0, r3
 801113a:	f7fc fac2 	bl	800d6c2 <USBD_LL_SOF>
}
 801113e:	bf00      	nop
 8011140:	3708      	adds	r7, #8
 8011142:	46bd      	mov	sp, r7
 8011144:	bd80      	pop	{r7, pc}

08011146 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011146:	b580      	push	{r7, lr}
 8011148:	b084      	sub	sp, #16
 801114a:	af00      	add	r7, sp, #0
 801114c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801114e:	2301      	movs	r3, #1
 8011150:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	68db      	ldr	r3, [r3, #12]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d102      	bne.n	8011160 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801115a:	2300      	movs	r3, #0
 801115c:	73fb      	strb	r3, [r7, #15]
 801115e:	e008      	b.n	8011172 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	68db      	ldr	r3, [r3, #12]
 8011164:	2b02      	cmp	r3, #2
 8011166:	d102      	bne.n	801116e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011168:	2301      	movs	r3, #1
 801116a:	73fb      	strb	r3, [r7, #15]
 801116c:	e001      	b.n	8011172 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801116e:	f7f1 fd97 	bl	8002ca0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011172:	687b      	ldr	r3, [r7, #4]
 8011174:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011178:	7bfa      	ldrb	r2, [r7, #15]
 801117a:	4611      	mov	r1, r2
 801117c:	4618      	mov	r0, r3
 801117e:	f7fc fa62 	bl	800d646 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011182:	687b      	ldr	r3, [r7, #4]
 8011184:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011188:	4618      	mov	r0, r3
 801118a:	f7fc fa0a 	bl	800d5a2 <USBD_LL_Reset>
}
 801118e:	bf00      	nop
 8011190:	3710      	adds	r7, #16
 8011192:	46bd      	mov	sp, r7
 8011194:	bd80      	pop	{r7, pc}
	...

08011198 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b082      	sub	sp, #8
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7fc fa5d 	bl	800d666 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	681b      	ldr	r3, [r3, #0]
 80111b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80111b4:	681b      	ldr	r3, [r3, #0]
 80111b6:	687a      	ldr	r2, [r7, #4]
 80111b8:	6812      	ldr	r2, [r2, #0]
 80111ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80111be:	f043 0301 	orr.w	r3, r3, #1
 80111c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6a1b      	ldr	r3, [r3, #32]
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d005      	beq.n	80111d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80111cc:	4b04      	ldr	r3, [pc, #16]	; (80111e0 <HAL_PCD_SuspendCallback+0x48>)
 80111ce:	691b      	ldr	r3, [r3, #16]
 80111d0:	4a03      	ldr	r2, [pc, #12]	; (80111e0 <HAL_PCD_SuspendCallback+0x48>)
 80111d2:	f043 0306 	orr.w	r3, r3, #6
 80111d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80111d8:	bf00      	nop
 80111da:	3708      	adds	r7, #8
 80111dc:	46bd      	mov	sp, r7
 80111de:	bd80      	pop	{r7, pc}
 80111e0:	e000ed00 	.word	0xe000ed00

080111e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111e4:	b580      	push	{r7, lr}
 80111e6:	b082      	sub	sp, #8
 80111e8:	af00      	add	r7, sp, #0
 80111ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80111f2:	4618      	mov	r0, r3
 80111f4:	f7fc fa4d 	bl	800d692 <USBD_LL_Resume>
}
 80111f8:	bf00      	nop
 80111fa:	3708      	adds	r7, #8
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}

08011200 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b082      	sub	sp, #8
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
 8011208:	460b      	mov	r3, r1
 801120a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801120c:	687b      	ldr	r3, [r7, #4]
 801120e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011212:	78fa      	ldrb	r2, [r7, #3]
 8011214:	4611      	mov	r1, r2
 8011216:	4618      	mov	r0, r3
 8011218:	f7fc faa5 	bl	800d766 <USBD_LL_IsoOUTIncomplete>
}
 801121c:	bf00      	nop
 801121e:	3708      	adds	r7, #8
 8011220:	46bd      	mov	sp, r7
 8011222:	bd80      	pop	{r7, pc}

08011224 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011224:	b580      	push	{r7, lr}
 8011226:	b082      	sub	sp, #8
 8011228:	af00      	add	r7, sp, #0
 801122a:	6078      	str	r0, [r7, #4]
 801122c:	460b      	mov	r3, r1
 801122e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011236:	78fa      	ldrb	r2, [r7, #3]
 8011238:	4611      	mov	r1, r2
 801123a:	4618      	mov	r0, r3
 801123c:	f7fc fa61 	bl	800d702 <USBD_LL_IsoINIncomplete>
}
 8011240:	bf00      	nop
 8011242:	3708      	adds	r7, #8
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}

08011248 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011248:	b580      	push	{r7, lr}
 801124a:	b082      	sub	sp, #8
 801124c:	af00      	add	r7, sp, #0
 801124e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011250:	687b      	ldr	r3, [r7, #4]
 8011252:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011256:	4618      	mov	r0, r3
 8011258:	f7fc fab7 	bl	800d7ca <USBD_LL_DevConnected>
}
 801125c:	bf00      	nop
 801125e:	3708      	adds	r7, #8
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}

08011264 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b082      	sub	sp, #8
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8011272:	4618      	mov	r0, r3
 8011274:	f7fc fab4 	bl	800d7e0 <USBD_LL_DevDisconnected>
}
 8011278:	bf00      	nop
 801127a:	3708      	adds	r7, #8
 801127c:	46bd      	mov	sp, r7
 801127e:	bd80      	pop	{r7, pc}

08011280 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b082      	sub	sp, #8
 8011284:	af00      	add	r7, sp, #0
 8011286:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	781b      	ldrb	r3, [r3, #0]
 801128c:	2b00      	cmp	r3, #0
 801128e:	d13c      	bne.n	801130a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011290:	4a20      	ldr	r2, [pc, #128]	; (8011314 <USBD_LL_Init+0x94>)
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	4a1e      	ldr	r2, [pc, #120]	; (8011314 <USBD_LL_Init+0x94>)
 801129c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80112a0:	4b1c      	ldr	r3, [pc, #112]	; (8011314 <USBD_LL_Init+0x94>)
 80112a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80112a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80112a8:	4b1a      	ldr	r3, [pc, #104]	; (8011314 <USBD_LL_Init+0x94>)
 80112aa:	2204      	movs	r2, #4
 80112ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80112ae:	4b19      	ldr	r3, [pc, #100]	; (8011314 <USBD_LL_Init+0x94>)
 80112b0:	2202      	movs	r2, #2
 80112b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80112b4:	4b17      	ldr	r3, [pc, #92]	; (8011314 <USBD_LL_Init+0x94>)
 80112b6:	2200      	movs	r2, #0
 80112b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80112ba:	4b16      	ldr	r3, [pc, #88]	; (8011314 <USBD_LL_Init+0x94>)
 80112bc:	2202      	movs	r2, #2
 80112be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80112c0:	4b14      	ldr	r3, [pc, #80]	; (8011314 <USBD_LL_Init+0x94>)
 80112c2:	2200      	movs	r2, #0
 80112c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80112c6:	4b13      	ldr	r3, [pc, #76]	; (8011314 <USBD_LL_Init+0x94>)
 80112c8:	2200      	movs	r2, #0
 80112ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80112cc:	4b11      	ldr	r3, [pc, #68]	; (8011314 <USBD_LL_Init+0x94>)
 80112ce:	2200      	movs	r2, #0
 80112d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80112d2:	4b10      	ldr	r3, [pc, #64]	; (8011314 <USBD_LL_Init+0x94>)
 80112d4:	2200      	movs	r2, #0
 80112d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80112d8:	4b0e      	ldr	r3, [pc, #56]	; (8011314 <USBD_LL_Init+0x94>)
 80112da:	2200      	movs	r2, #0
 80112dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80112de:	480d      	ldr	r0, [pc, #52]	; (8011314 <USBD_LL_Init+0x94>)
 80112e0:	f7f3 ff4b 	bl	800517a <HAL_PCD_Init>
 80112e4:	4603      	mov	r3, r0
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d001      	beq.n	80112ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80112ea:	f7f1 fcd9 	bl	8002ca0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80112ee:	2180      	movs	r1, #128	; 0x80
 80112f0:	4808      	ldr	r0, [pc, #32]	; (8011314 <USBD_LL_Init+0x94>)
 80112f2:	f7f5 f9a2 	bl	800663a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80112f6:	2240      	movs	r2, #64	; 0x40
 80112f8:	2100      	movs	r1, #0
 80112fa:	4806      	ldr	r0, [pc, #24]	; (8011314 <USBD_LL_Init+0x94>)
 80112fc:	f7f5 f956 	bl	80065ac <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8011300:	2280      	movs	r2, #128	; 0x80
 8011302:	2101      	movs	r1, #1
 8011304:	4803      	ldr	r0, [pc, #12]	; (8011314 <USBD_LL_Init+0x94>)
 8011306:	f7f5 f951 	bl	80065ac <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801130a:	2300      	movs	r3, #0
}
 801130c:	4618      	mov	r0, r3
 801130e:	3708      	adds	r7, #8
 8011310:	46bd      	mov	sp, r7
 8011312:	bd80      	pop	{r7, pc}
 8011314:	20002034 	.word	0x20002034

08011318 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011318:	b580      	push	{r7, lr}
 801131a:	b084      	sub	sp, #16
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011320:	2300      	movs	r3, #0
 8011322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011324:	2300      	movs	r3, #0
 8011326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801132e:	4618      	mov	r0, r3
 8011330:	f7f4 f840 	bl	80053b4 <HAL_PCD_Start>
 8011334:	4603      	mov	r3, r0
 8011336:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011338:	7bfb      	ldrb	r3, [r7, #15]
 801133a:	4618      	mov	r0, r3
 801133c:	f000 f942 	bl	80115c4 <USBD_Get_USB_Status>
 8011340:	4603      	mov	r3, r0
 8011342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011344:	7bbb      	ldrb	r3, [r7, #14]
}
 8011346:	4618      	mov	r0, r3
 8011348:	3710      	adds	r7, #16
 801134a:	46bd      	mov	sp, r7
 801134c:	bd80      	pop	{r7, pc}

0801134e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801134e:	b580      	push	{r7, lr}
 8011350:	b084      	sub	sp, #16
 8011352:	af00      	add	r7, sp, #0
 8011354:	6078      	str	r0, [r7, #4]
 8011356:	4608      	mov	r0, r1
 8011358:	4611      	mov	r1, r2
 801135a:	461a      	mov	r2, r3
 801135c:	4603      	mov	r3, r0
 801135e:	70fb      	strb	r3, [r7, #3]
 8011360:	460b      	mov	r3, r1
 8011362:	70bb      	strb	r3, [r7, #2]
 8011364:	4613      	mov	r3, r2
 8011366:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011368:	2300      	movs	r3, #0
 801136a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801136c:	2300      	movs	r3, #0
 801136e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011376:	78bb      	ldrb	r3, [r7, #2]
 8011378:	883a      	ldrh	r2, [r7, #0]
 801137a:	78f9      	ldrb	r1, [r7, #3]
 801137c:	f7f4 fd11 	bl	8005da2 <HAL_PCD_EP_Open>
 8011380:	4603      	mov	r3, r0
 8011382:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011384:	7bfb      	ldrb	r3, [r7, #15]
 8011386:	4618      	mov	r0, r3
 8011388:	f000 f91c 	bl	80115c4 <USBD_Get_USB_Status>
 801138c:	4603      	mov	r3, r0
 801138e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011390:	7bbb      	ldrb	r3, [r7, #14]
}
 8011392:	4618      	mov	r0, r3
 8011394:	3710      	adds	r7, #16
 8011396:	46bd      	mov	sp, r7
 8011398:	bd80      	pop	{r7, pc}

0801139a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801139a:	b580      	push	{r7, lr}
 801139c:	b084      	sub	sp, #16
 801139e:	af00      	add	r7, sp, #0
 80113a0:	6078      	str	r0, [r7, #4]
 80113a2:	460b      	mov	r3, r1
 80113a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113a6:	2300      	movs	r3, #0
 80113a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113aa:	2300      	movs	r3, #0
 80113ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80113b4:	78fa      	ldrb	r2, [r7, #3]
 80113b6:	4611      	mov	r1, r2
 80113b8:	4618      	mov	r0, r3
 80113ba:	f7f4 fd5a 	bl	8005e72 <HAL_PCD_EP_Close>
 80113be:	4603      	mov	r3, r0
 80113c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113c2:	7bfb      	ldrb	r3, [r7, #15]
 80113c4:	4618      	mov	r0, r3
 80113c6:	f000 f8fd 	bl	80115c4 <USBD_Get_USB_Status>
 80113ca:	4603      	mov	r3, r0
 80113cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80113d0:	4618      	mov	r0, r3
 80113d2:	3710      	adds	r7, #16
 80113d4:	46bd      	mov	sp, r7
 80113d6:	bd80      	pop	{r7, pc}

080113d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80113d8:	b580      	push	{r7, lr}
 80113da:	b084      	sub	sp, #16
 80113dc:	af00      	add	r7, sp, #0
 80113de:	6078      	str	r0, [r7, #4]
 80113e0:	460b      	mov	r3, r1
 80113e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113e4:	2300      	movs	r3, #0
 80113e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113e8:	2300      	movs	r3, #0
 80113ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80113f2:	78fa      	ldrb	r2, [r7, #3]
 80113f4:	4611      	mov	r1, r2
 80113f6:	4618      	mov	r0, r3
 80113f8:	f7f4 fe32 	bl	8006060 <HAL_PCD_EP_SetStall>
 80113fc:	4603      	mov	r3, r0
 80113fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011400:	7bfb      	ldrb	r3, [r7, #15]
 8011402:	4618      	mov	r0, r3
 8011404:	f000 f8de 	bl	80115c4 <USBD_Get_USB_Status>
 8011408:	4603      	mov	r3, r0
 801140a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801140c:	7bbb      	ldrb	r3, [r7, #14]
}
 801140e:	4618      	mov	r0, r3
 8011410:	3710      	adds	r7, #16
 8011412:	46bd      	mov	sp, r7
 8011414:	bd80      	pop	{r7, pc}

08011416 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011416:	b580      	push	{r7, lr}
 8011418:	b084      	sub	sp, #16
 801141a:	af00      	add	r7, sp, #0
 801141c:	6078      	str	r0, [r7, #4]
 801141e:	460b      	mov	r3, r1
 8011420:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011422:	2300      	movs	r3, #0
 8011424:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011426:	2300      	movs	r3, #0
 8011428:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801142a:	687b      	ldr	r3, [r7, #4]
 801142c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011430:	78fa      	ldrb	r2, [r7, #3]
 8011432:	4611      	mov	r1, r2
 8011434:	4618      	mov	r0, r3
 8011436:	f7f4 fe77 	bl	8006128 <HAL_PCD_EP_ClrStall>
 801143a:	4603      	mov	r3, r0
 801143c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801143e:	7bfb      	ldrb	r3, [r7, #15]
 8011440:	4618      	mov	r0, r3
 8011442:	f000 f8bf 	bl	80115c4 <USBD_Get_USB_Status>
 8011446:	4603      	mov	r3, r0
 8011448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801144a:	7bbb      	ldrb	r3, [r7, #14]
}
 801144c:	4618      	mov	r0, r3
 801144e:	3710      	adds	r7, #16
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}

08011454 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011454:	b480      	push	{r7}
 8011456:	b085      	sub	sp, #20
 8011458:	af00      	add	r7, sp, #0
 801145a:	6078      	str	r0, [r7, #4]
 801145c:	460b      	mov	r3, r1
 801145e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011466:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801146c:	2b00      	cmp	r3, #0
 801146e:	da0b      	bge.n	8011488 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011470:	78fb      	ldrb	r3, [r7, #3]
 8011472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011476:	68f9      	ldr	r1, [r7, #12]
 8011478:	4613      	mov	r3, r2
 801147a:	00db      	lsls	r3, r3, #3
 801147c:	4413      	add	r3, r2
 801147e:	009b      	lsls	r3, r3, #2
 8011480:	440b      	add	r3, r1
 8011482:	333e      	adds	r3, #62	; 0x3e
 8011484:	781b      	ldrb	r3, [r3, #0]
 8011486:	e00b      	b.n	80114a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011488:	78fb      	ldrb	r3, [r7, #3]
 801148a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801148e:	68f9      	ldr	r1, [r7, #12]
 8011490:	4613      	mov	r3, r2
 8011492:	00db      	lsls	r3, r3, #3
 8011494:	4413      	add	r3, r2
 8011496:	009b      	lsls	r3, r3, #2
 8011498:	440b      	add	r3, r1
 801149a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801149e:	781b      	ldrb	r3, [r3, #0]
  }
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	3714      	adds	r7, #20
 80114a4:	46bd      	mov	sp, r7
 80114a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114aa:	4770      	bx	lr

080114ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80114ac:	b580      	push	{r7, lr}
 80114ae:	b084      	sub	sp, #16
 80114b0:	af00      	add	r7, sp, #0
 80114b2:	6078      	str	r0, [r7, #4]
 80114b4:	460b      	mov	r3, r1
 80114b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114b8:	2300      	movs	r3, #0
 80114ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114bc:	2300      	movs	r3, #0
 80114be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80114c6:	78fa      	ldrb	r2, [r7, #3]
 80114c8:	4611      	mov	r1, r2
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7f4 fc44 	bl	8005d58 <HAL_PCD_SetAddress>
 80114d0:	4603      	mov	r3, r0
 80114d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114d4:	7bfb      	ldrb	r3, [r7, #15]
 80114d6:	4618      	mov	r0, r3
 80114d8:	f000 f874 	bl	80115c4 <USBD_Get_USB_Status>
 80114dc:	4603      	mov	r3, r0
 80114de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80114e2:	4618      	mov	r0, r3
 80114e4:	3710      	adds	r7, #16
 80114e6:	46bd      	mov	sp, r7
 80114e8:	bd80      	pop	{r7, pc}

080114ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80114ea:	b580      	push	{r7, lr}
 80114ec:	b086      	sub	sp, #24
 80114ee:	af00      	add	r7, sp, #0
 80114f0:	60f8      	str	r0, [r7, #12]
 80114f2:	607a      	str	r2, [r7, #4]
 80114f4:	603b      	str	r3, [r7, #0]
 80114f6:	460b      	mov	r3, r1
 80114f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80114fa:	2300      	movs	r3, #0
 80114fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80114fe:	2300      	movs	r3, #0
 8011500:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011508:	7af9      	ldrb	r1, [r7, #11]
 801150a:	683b      	ldr	r3, [r7, #0]
 801150c:	687a      	ldr	r2, [r7, #4]
 801150e:	f7f4 fd5d 	bl	8005fcc <HAL_PCD_EP_Transmit>
 8011512:	4603      	mov	r3, r0
 8011514:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011516:	7dfb      	ldrb	r3, [r7, #23]
 8011518:	4618      	mov	r0, r3
 801151a:	f000 f853 	bl	80115c4 <USBD_Get_USB_Status>
 801151e:	4603      	mov	r3, r0
 8011520:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011522:	7dbb      	ldrb	r3, [r7, #22]
}
 8011524:	4618      	mov	r0, r3
 8011526:	3718      	adds	r7, #24
 8011528:	46bd      	mov	sp, r7
 801152a:	bd80      	pop	{r7, pc}

0801152c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801152c:	b580      	push	{r7, lr}
 801152e:	b086      	sub	sp, #24
 8011530:	af00      	add	r7, sp, #0
 8011532:	60f8      	str	r0, [r7, #12]
 8011534:	607a      	str	r2, [r7, #4]
 8011536:	603b      	str	r3, [r7, #0]
 8011538:	460b      	mov	r3, r1
 801153a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801153c:	2300      	movs	r3, #0
 801153e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011540:	2300      	movs	r3, #0
 8011542:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011544:	68fb      	ldr	r3, [r7, #12]
 8011546:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801154a:	7af9      	ldrb	r1, [r7, #11]
 801154c:	683b      	ldr	r3, [r7, #0]
 801154e:	687a      	ldr	r2, [r7, #4]
 8011550:	f7f4 fcd9 	bl	8005f06 <HAL_PCD_EP_Receive>
 8011554:	4603      	mov	r3, r0
 8011556:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011558:	7dfb      	ldrb	r3, [r7, #23]
 801155a:	4618      	mov	r0, r3
 801155c:	f000 f832 	bl	80115c4 <USBD_Get_USB_Status>
 8011560:	4603      	mov	r3, r0
 8011562:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011564:	7dbb      	ldrb	r3, [r7, #22]
}
 8011566:	4618      	mov	r0, r3
 8011568:	3718      	adds	r7, #24
 801156a:	46bd      	mov	sp, r7
 801156c:	bd80      	pop	{r7, pc}

0801156e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801156e:	b580      	push	{r7, lr}
 8011570:	b082      	sub	sp, #8
 8011572:	af00      	add	r7, sp, #0
 8011574:	6078      	str	r0, [r7, #4]
 8011576:	460b      	mov	r3, r1
 8011578:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011580:	78fa      	ldrb	r2, [r7, #3]
 8011582:	4611      	mov	r1, r2
 8011584:	4618      	mov	r0, r3
 8011586:	f7f4 fd09 	bl	8005f9c <HAL_PCD_EP_GetRxCount>
 801158a:	4603      	mov	r3, r0
}
 801158c:	4618      	mov	r0, r3
 801158e:	3708      	adds	r7, #8
 8011590:	46bd      	mov	sp, r7
 8011592:	bd80      	pop	{r7, pc}

08011594 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011594:	b480      	push	{r7}
 8011596:	b083      	sub	sp, #12
 8011598:	af00      	add	r7, sp, #0
 801159a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 801159c:	4b03      	ldr	r3, [pc, #12]	; (80115ac <USBD_static_malloc+0x18>)
}
 801159e:	4618      	mov	r0, r3
 80115a0:	370c      	adds	r7, #12
 80115a2:	46bd      	mov	sp, r7
 80115a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a8:	4770      	bx	lr
 80115aa:	bf00      	nop
 80115ac:	20002540 	.word	0x20002540

080115b0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80115b0:	b480      	push	{r7}
 80115b2:	b083      	sub	sp, #12
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	6078      	str	r0, [r7, #4]

}
 80115b8:	bf00      	nop
 80115ba:	370c      	adds	r7, #12
 80115bc:	46bd      	mov	sp, r7
 80115be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c2:	4770      	bx	lr

080115c4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80115c4:	b480      	push	{r7}
 80115c6:	b085      	sub	sp, #20
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	4603      	mov	r3, r0
 80115cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115ce:	2300      	movs	r3, #0
 80115d0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80115d2:	79fb      	ldrb	r3, [r7, #7]
 80115d4:	2b03      	cmp	r3, #3
 80115d6:	d817      	bhi.n	8011608 <USBD_Get_USB_Status+0x44>
 80115d8:	a201      	add	r2, pc, #4	; (adr r2, 80115e0 <USBD_Get_USB_Status+0x1c>)
 80115da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115de:	bf00      	nop
 80115e0:	080115f1 	.word	0x080115f1
 80115e4:	080115f7 	.word	0x080115f7
 80115e8:	080115fd 	.word	0x080115fd
 80115ec:	08011603 	.word	0x08011603
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80115f0:	2300      	movs	r3, #0
 80115f2:	73fb      	strb	r3, [r7, #15]
    break;
 80115f4:	e00b      	b.n	801160e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80115f6:	2303      	movs	r3, #3
 80115f8:	73fb      	strb	r3, [r7, #15]
    break;
 80115fa:	e008      	b.n	801160e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80115fc:	2301      	movs	r3, #1
 80115fe:	73fb      	strb	r3, [r7, #15]
    break;
 8011600:	e005      	b.n	801160e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011602:	2303      	movs	r3, #3
 8011604:	73fb      	strb	r3, [r7, #15]
    break;
 8011606:	e002      	b.n	801160e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011608:	2303      	movs	r3, #3
 801160a:	73fb      	strb	r3, [r7, #15]
    break;
 801160c:	bf00      	nop
  }
  return usb_status;
 801160e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011610:	4618      	mov	r0, r3
 8011612:	3714      	adds	r7, #20
 8011614:	46bd      	mov	sp, r7
 8011616:	f85d 7b04 	ldr.w	r7, [sp], #4
 801161a:	4770      	bx	lr

0801161c <__cvt>:
 801161c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011620:	ec55 4b10 	vmov	r4, r5, d0
 8011624:	2d00      	cmp	r5, #0
 8011626:	460e      	mov	r6, r1
 8011628:	4619      	mov	r1, r3
 801162a:	462b      	mov	r3, r5
 801162c:	bfbb      	ittet	lt
 801162e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011632:	461d      	movlt	r5, r3
 8011634:	2300      	movge	r3, #0
 8011636:	232d      	movlt	r3, #45	; 0x2d
 8011638:	700b      	strb	r3, [r1, #0]
 801163a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801163c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011640:	4691      	mov	r9, r2
 8011642:	f023 0820 	bic.w	r8, r3, #32
 8011646:	bfbc      	itt	lt
 8011648:	4622      	movlt	r2, r4
 801164a:	4614      	movlt	r4, r2
 801164c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011650:	d005      	beq.n	801165e <__cvt+0x42>
 8011652:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011656:	d100      	bne.n	801165a <__cvt+0x3e>
 8011658:	3601      	adds	r6, #1
 801165a:	2102      	movs	r1, #2
 801165c:	e000      	b.n	8011660 <__cvt+0x44>
 801165e:	2103      	movs	r1, #3
 8011660:	ab03      	add	r3, sp, #12
 8011662:	9301      	str	r3, [sp, #4]
 8011664:	ab02      	add	r3, sp, #8
 8011666:	9300      	str	r3, [sp, #0]
 8011668:	ec45 4b10 	vmov	d0, r4, r5
 801166c:	4653      	mov	r3, sl
 801166e:	4632      	mov	r2, r6
 8011670:	f000 fdda 	bl	8012228 <_dtoa_r>
 8011674:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011678:	4607      	mov	r7, r0
 801167a:	d102      	bne.n	8011682 <__cvt+0x66>
 801167c:	f019 0f01 	tst.w	r9, #1
 8011680:	d022      	beq.n	80116c8 <__cvt+0xac>
 8011682:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011686:	eb07 0906 	add.w	r9, r7, r6
 801168a:	d110      	bne.n	80116ae <__cvt+0x92>
 801168c:	783b      	ldrb	r3, [r7, #0]
 801168e:	2b30      	cmp	r3, #48	; 0x30
 8011690:	d10a      	bne.n	80116a8 <__cvt+0x8c>
 8011692:	2200      	movs	r2, #0
 8011694:	2300      	movs	r3, #0
 8011696:	4620      	mov	r0, r4
 8011698:	4629      	mov	r1, r5
 801169a:	f7ef fa15 	bl	8000ac8 <__aeabi_dcmpeq>
 801169e:	b918      	cbnz	r0, 80116a8 <__cvt+0x8c>
 80116a0:	f1c6 0601 	rsb	r6, r6, #1
 80116a4:	f8ca 6000 	str.w	r6, [sl]
 80116a8:	f8da 3000 	ldr.w	r3, [sl]
 80116ac:	4499      	add	r9, r3
 80116ae:	2200      	movs	r2, #0
 80116b0:	2300      	movs	r3, #0
 80116b2:	4620      	mov	r0, r4
 80116b4:	4629      	mov	r1, r5
 80116b6:	f7ef fa07 	bl	8000ac8 <__aeabi_dcmpeq>
 80116ba:	b108      	cbz	r0, 80116c0 <__cvt+0xa4>
 80116bc:	f8cd 900c 	str.w	r9, [sp, #12]
 80116c0:	2230      	movs	r2, #48	; 0x30
 80116c2:	9b03      	ldr	r3, [sp, #12]
 80116c4:	454b      	cmp	r3, r9
 80116c6:	d307      	bcc.n	80116d8 <__cvt+0xbc>
 80116c8:	9b03      	ldr	r3, [sp, #12]
 80116ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80116cc:	1bdb      	subs	r3, r3, r7
 80116ce:	4638      	mov	r0, r7
 80116d0:	6013      	str	r3, [r2, #0]
 80116d2:	b004      	add	sp, #16
 80116d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80116d8:	1c59      	adds	r1, r3, #1
 80116da:	9103      	str	r1, [sp, #12]
 80116dc:	701a      	strb	r2, [r3, #0]
 80116de:	e7f0      	b.n	80116c2 <__cvt+0xa6>

080116e0 <__exponent>:
 80116e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80116e2:	4603      	mov	r3, r0
 80116e4:	2900      	cmp	r1, #0
 80116e6:	bfb8      	it	lt
 80116e8:	4249      	neglt	r1, r1
 80116ea:	f803 2b02 	strb.w	r2, [r3], #2
 80116ee:	bfb4      	ite	lt
 80116f0:	222d      	movlt	r2, #45	; 0x2d
 80116f2:	222b      	movge	r2, #43	; 0x2b
 80116f4:	2909      	cmp	r1, #9
 80116f6:	7042      	strb	r2, [r0, #1]
 80116f8:	dd2a      	ble.n	8011750 <__exponent+0x70>
 80116fa:	f10d 0207 	add.w	r2, sp, #7
 80116fe:	4617      	mov	r7, r2
 8011700:	260a      	movs	r6, #10
 8011702:	4694      	mov	ip, r2
 8011704:	fb91 f5f6 	sdiv	r5, r1, r6
 8011708:	fb06 1415 	mls	r4, r6, r5, r1
 801170c:	3430      	adds	r4, #48	; 0x30
 801170e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8011712:	460c      	mov	r4, r1
 8011714:	2c63      	cmp	r4, #99	; 0x63
 8011716:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 801171a:	4629      	mov	r1, r5
 801171c:	dcf1      	bgt.n	8011702 <__exponent+0x22>
 801171e:	3130      	adds	r1, #48	; 0x30
 8011720:	f1ac 0402 	sub.w	r4, ip, #2
 8011724:	f802 1c01 	strb.w	r1, [r2, #-1]
 8011728:	1c41      	adds	r1, r0, #1
 801172a:	4622      	mov	r2, r4
 801172c:	42ba      	cmp	r2, r7
 801172e:	d30a      	bcc.n	8011746 <__exponent+0x66>
 8011730:	f10d 0209 	add.w	r2, sp, #9
 8011734:	eba2 020c 	sub.w	r2, r2, ip
 8011738:	42bc      	cmp	r4, r7
 801173a:	bf88      	it	hi
 801173c:	2200      	movhi	r2, #0
 801173e:	4413      	add	r3, r2
 8011740:	1a18      	subs	r0, r3, r0
 8011742:	b003      	add	sp, #12
 8011744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011746:	f812 5b01 	ldrb.w	r5, [r2], #1
 801174a:	f801 5f01 	strb.w	r5, [r1, #1]!
 801174e:	e7ed      	b.n	801172c <__exponent+0x4c>
 8011750:	2330      	movs	r3, #48	; 0x30
 8011752:	3130      	adds	r1, #48	; 0x30
 8011754:	7083      	strb	r3, [r0, #2]
 8011756:	70c1      	strb	r1, [r0, #3]
 8011758:	1d03      	adds	r3, r0, #4
 801175a:	e7f1      	b.n	8011740 <__exponent+0x60>

0801175c <_printf_float>:
 801175c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011760:	ed2d 8b02 	vpush	{d8}
 8011764:	b08d      	sub	sp, #52	; 0x34
 8011766:	460c      	mov	r4, r1
 8011768:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801176c:	4616      	mov	r6, r2
 801176e:	461f      	mov	r7, r3
 8011770:	4605      	mov	r5, r0
 8011772:	f000 fc91 	bl	8012098 <_localeconv_r>
 8011776:	f8d0 a000 	ldr.w	sl, [r0]
 801177a:	4650      	mov	r0, sl
 801177c:	f7ee fd78 	bl	8000270 <strlen>
 8011780:	2300      	movs	r3, #0
 8011782:	930a      	str	r3, [sp, #40]	; 0x28
 8011784:	6823      	ldr	r3, [r4, #0]
 8011786:	9305      	str	r3, [sp, #20]
 8011788:	f8d8 3000 	ldr.w	r3, [r8]
 801178c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8011790:	3307      	adds	r3, #7
 8011792:	f023 0307 	bic.w	r3, r3, #7
 8011796:	f103 0208 	add.w	r2, r3, #8
 801179a:	f8c8 2000 	str.w	r2, [r8]
 801179e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80117a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80117a6:	9307      	str	r3, [sp, #28]
 80117a8:	f8cd 8018 	str.w	r8, [sp, #24]
 80117ac:	ee08 0a10 	vmov	s16, r0
 80117b0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80117b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80117b8:	4b9e      	ldr	r3, [pc, #632]	; (8011a34 <_printf_float+0x2d8>)
 80117ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80117be:	f7ef f9b5 	bl	8000b2c <__aeabi_dcmpun>
 80117c2:	bb88      	cbnz	r0, 8011828 <_printf_float+0xcc>
 80117c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80117c8:	4b9a      	ldr	r3, [pc, #616]	; (8011a34 <_printf_float+0x2d8>)
 80117ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80117ce:	f7ef f98f 	bl	8000af0 <__aeabi_dcmple>
 80117d2:	bb48      	cbnz	r0, 8011828 <_printf_float+0xcc>
 80117d4:	2200      	movs	r2, #0
 80117d6:	2300      	movs	r3, #0
 80117d8:	4640      	mov	r0, r8
 80117da:	4649      	mov	r1, r9
 80117dc:	f7ef f97e 	bl	8000adc <__aeabi_dcmplt>
 80117e0:	b110      	cbz	r0, 80117e8 <_printf_float+0x8c>
 80117e2:	232d      	movs	r3, #45	; 0x2d
 80117e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117e8:	4a93      	ldr	r2, [pc, #588]	; (8011a38 <_printf_float+0x2dc>)
 80117ea:	4b94      	ldr	r3, [pc, #592]	; (8011a3c <_printf_float+0x2e0>)
 80117ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80117f0:	bf94      	ite	ls
 80117f2:	4690      	movls	r8, r2
 80117f4:	4698      	movhi	r8, r3
 80117f6:	2303      	movs	r3, #3
 80117f8:	6123      	str	r3, [r4, #16]
 80117fa:	9b05      	ldr	r3, [sp, #20]
 80117fc:	f023 0304 	bic.w	r3, r3, #4
 8011800:	6023      	str	r3, [r4, #0]
 8011802:	f04f 0900 	mov.w	r9, #0
 8011806:	9700      	str	r7, [sp, #0]
 8011808:	4633      	mov	r3, r6
 801180a:	aa0b      	add	r2, sp, #44	; 0x2c
 801180c:	4621      	mov	r1, r4
 801180e:	4628      	mov	r0, r5
 8011810:	f000 f9da 	bl	8011bc8 <_printf_common>
 8011814:	3001      	adds	r0, #1
 8011816:	f040 8090 	bne.w	801193a <_printf_float+0x1de>
 801181a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801181e:	b00d      	add	sp, #52	; 0x34
 8011820:	ecbd 8b02 	vpop	{d8}
 8011824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011828:	4642      	mov	r2, r8
 801182a:	464b      	mov	r3, r9
 801182c:	4640      	mov	r0, r8
 801182e:	4649      	mov	r1, r9
 8011830:	f7ef f97c 	bl	8000b2c <__aeabi_dcmpun>
 8011834:	b140      	cbz	r0, 8011848 <_printf_float+0xec>
 8011836:	464b      	mov	r3, r9
 8011838:	2b00      	cmp	r3, #0
 801183a:	bfbc      	itt	lt
 801183c:	232d      	movlt	r3, #45	; 0x2d
 801183e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8011842:	4a7f      	ldr	r2, [pc, #508]	; (8011a40 <_printf_float+0x2e4>)
 8011844:	4b7f      	ldr	r3, [pc, #508]	; (8011a44 <_printf_float+0x2e8>)
 8011846:	e7d1      	b.n	80117ec <_printf_float+0x90>
 8011848:	6863      	ldr	r3, [r4, #4]
 801184a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 801184e:	9206      	str	r2, [sp, #24]
 8011850:	1c5a      	adds	r2, r3, #1
 8011852:	d13f      	bne.n	80118d4 <_printf_float+0x178>
 8011854:	2306      	movs	r3, #6
 8011856:	6063      	str	r3, [r4, #4]
 8011858:	9b05      	ldr	r3, [sp, #20]
 801185a:	6861      	ldr	r1, [r4, #4]
 801185c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8011860:	2300      	movs	r3, #0
 8011862:	9303      	str	r3, [sp, #12]
 8011864:	ab0a      	add	r3, sp, #40	; 0x28
 8011866:	e9cd b301 	strd	fp, r3, [sp, #4]
 801186a:	ab09      	add	r3, sp, #36	; 0x24
 801186c:	ec49 8b10 	vmov	d0, r8, r9
 8011870:	9300      	str	r3, [sp, #0]
 8011872:	6022      	str	r2, [r4, #0]
 8011874:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011878:	4628      	mov	r0, r5
 801187a:	f7ff fecf 	bl	801161c <__cvt>
 801187e:	9b06      	ldr	r3, [sp, #24]
 8011880:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011882:	2b47      	cmp	r3, #71	; 0x47
 8011884:	4680      	mov	r8, r0
 8011886:	d108      	bne.n	801189a <_printf_float+0x13e>
 8011888:	1cc8      	adds	r0, r1, #3
 801188a:	db02      	blt.n	8011892 <_printf_float+0x136>
 801188c:	6863      	ldr	r3, [r4, #4]
 801188e:	4299      	cmp	r1, r3
 8011890:	dd41      	ble.n	8011916 <_printf_float+0x1ba>
 8011892:	f1ab 0302 	sub.w	r3, fp, #2
 8011896:	fa5f fb83 	uxtb.w	fp, r3
 801189a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 801189e:	d820      	bhi.n	80118e2 <_printf_float+0x186>
 80118a0:	3901      	subs	r1, #1
 80118a2:	465a      	mov	r2, fp
 80118a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80118a8:	9109      	str	r1, [sp, #36]	; 0x24
 80118aa:	f7ff ff19 	bl	80116e0 <__exponent>
 80118ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80118b0:	1813      	adds	r3, r2, r0
 80118b2:	2a01      	cmp	r2, #1
 80118b4:	4681      	mov	r9, r0
 80118b6:	6123      	str	r3, [r4, #16]
 80118b8:	dc02      	bgt.n	80118c0 <_printf_float+0x164>
 80118ba:	6822      	ldr	r2, [r4, #0]
 80118bc:	07d2      	lsls	r2, r2, #31
 80118be:	d501      	bpl.n	80118c4 <_printf_float+0x168>
 80118c0:	3301      	adds	r3, #1
 80118c2:	6123      	str	r3, [r4, #16]
 80118c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d09c      	beq.n	8011806 <_printf_float+0xaa>
 80118cc:	232d      	movs	r3, #45	; 0x2d
 80118ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80118d2:	e798      	b.n	8011806 <_printf_float+0xaa>
 80118d4:	9a06      	ldr	r2, [sp, #24]
 80118d6:	2a47      	cmp	r2, #71	; 0x47
 80118d8:	d1be      	bne.n	8011858 <_printf_float+0xfc>
 80118da:	2b00      	cmp	r3, #0
 80118dc:	d1bc      	bne.n	8011858 <_printf_float+0xfc>
 80118de:	2301      	movs	r3, #1
 80118e0:	e7b9      	b.n	8011856 <_printf_float+0xfa>
 80118e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80118e6:	d118      	bne.n	801191a <_printf_float+0x1be>
 80118e8:	2900      	cmp	r1, #0
 80118ea:	6863      	ldr	r3, [r4, #4]
 80118ec:	dd0b      	ble.n	8011906 <_printf_float+0x1aa>
 80118ee:	6121      	str	r1, [r4, #16]
 80118f0:	b913      	cbnz	r3, 80118f8 <_printf_float+0x19c>
 80118f2:	6822      	ldr	r2, [r4, #0]
 80118f4:	07d0      	lsls	r0, r2, #31
 80118f6:	d502      	bpl.n	80118fe <_printf_float+0x1a2>
 80118f8:	3301      	adds	r3, #1
 80118fa:	440b      	add	r3, r1
 80118fc:	6123      	str	r3, [r4, #16]
 80118fe:	65a1      	str	r1, [r4, #88]	; 0x58
 8011900:	f04f 0900 	mov.w	r9, #0
 8011904:	e7de      	b.n	80118c4 <_printf_float+0x168>
 8011906:	b913      	cbnz	r3, 801190e <_printf_float+0x1b2>
 8011908:	6822      	ldr	r2, [r4, #0]
 801190a:	07d2      	lsls	r2, r2, #31
 801190c:	d501      	bpl.n	8011912 <_printf_float+0x1b6>
 801190e:	3302      	adds	r3, #2
 8011910:	e7f4      	b.n	80118fc <_printf_float+0x1a0>
 8011912:	2301      	movs	r3, #1
 8011914:	e7f2      	b.n	80118fc <_printf_float+0x1a0>
 8011916:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801191a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801191c:	4299      	cmp	r1, r3
 801191e:	db05      	blt.n	801192c <_printf_float+0x1d0>
 8011920:	6823      	ldr	r3, [r4, #0]
 8011922:	6121      	str	r1, [r4, #16]
 8011924:	07d8      	lsls	r0, r3, #31
 8011926:	d5ea      	bpl.n	80118fe <_printf_float+0x1a2>
 8011928:	1c4b      	adds	r3, r1, #1
 801192a:	e7e7      	b.n	80118fc <_printf_float+0x1a0>
 801192c:	2900      	cmp	r1, #0
 801192e:	bfd4      	ite	le
 8011930:	f1c1 0202 	rsble	r2, r1, #2
 8011934:	2201      	movgt	r2, #1
 8011936:	4413      	add	r3, r2
 8011938:	e7e0      	b.n	80118fc <_printf_float+0x1a0>
 801193a:	6823      	ldr	r3, [r4, #0]
 801193c:	055a      	lsls	r2, r3, #21
 801193e:	d407      	bmi.n	8011950 <_printf_float+0x1f4>
 8011940:	6923      	ldr	r3, [r4, #16]
 8011942:	4642      	mov	r2, r8
 8011944:	4631      	mov	r1, r6
 8011946:	4628      	mov	r0, r5
 8011948:	47b8      	blx	r7
 801194a:	3001      	adds	r0, #1
 801194c:	d12c      	bne.n	80119a8 <_printf_float+0x24c>
 801194e:	e764      	b.n	801181a <_printf_float+0xbe>
 8011950:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8011954:	f240 80e0 	bls.w	8011b18 <_printf_float+0x3bc>
 8011958:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801195c:	2200      	movs	r2, #0
 801195e:	2300      	movs	r3, #0
 8011960:	f7ef f8b2 	bl	8000ac8 <__aeabi_dcmpeq>
 8011964:	2800      	cmp	r0, #0
 8011966:	d034      	beq.n	80119d2 <_printf_float+0x276>
 8011968:	4a37      	ldr	r2, [pc, #220]	; (8011a48 <_printf_float+0x2ec>)
 801196a:	2301      	movs	r3, #1
 801196c:	4631      	mov	r1, r6
 801196e:	4628      	mov	r0, r5
 8011970:	47b8      	blx	r7
 8011972:	3001      	adds	r0, #1
 8011974:	f43f af51 	beq.w	801181a <_printf_float+0xbe>
 8011978:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801197c:	429a      	cmp	r2, r3
 801197e:	db02      	blt.n	8011986 <_printf_float+0x22a>
 8011980:	6823      	ldr	r3, [r4, #0]
 8011982:	07d8      	lsls	r0, r3, #31
 8011984:	d510      	bpl.n	80119a8 <_printf_float+0x24c>
 8011986:	ee18 3a10 	vmov	r3, s16
 801198a:	4652      	mov	r2, sl
 801198c:	4631      	mov	r1, r6
 801198e:	4628      	mov	r0, r5
 8011990:	47b8      	blx	r7
 8011992:	3001      	adds	r0, #1
 8011994:	f43f af41 	beq.w	801181a <_printf_float+0xbe>
 8011998:	f04f 0800 	mov.w	r8, #0
 801199c:	f104 091a 	add.w	r9, r4, #26
 80119a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119a2:	3b01      	subs	r3, #1
 80119a4:	4543      	cmp	r3, r8
 80119a6:	dc09      	bgt.n	80119bc <_printf_float+0x260>
 80119a8:	6823      	ldr	r3, [r4, #0]
 80119aa:	079b      	lsls	r3, r3, #30
 80119ac:	f100 8107 	bmi.w	8011bbe <_printf_float+0x462>
 80119b0:	68e0      	ldr	r0, [r4, #12]
 80119b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80119b4:	4298      	cmp	r0, r3
 80119b6:	bfb8      	it	lt
 80119b8:	4618      	movlt	r0, r3
 80119ba:	e730      	b.n	801181e <_printf_float+0xc2>
 80119bc:	2301      	movs	r3, #1
 80119be:	464a      	mov	r2, r9
 80119c0:	4631      	mov	r1, r6
 80119c2:	4628      	mov	r0, r5
 80119c4:	47b8      	blx	r7
 80119c6:	3001      	adds	r0, #1
 80119c8:	f43f af27 	beq.w	801181a <_printf_float+0xbe>
 80119cc:	f108 0801 	add.w	r8, r8, #1
 80119d0:	e7e6      	b.n	80119a0 <_printf_float+0x244>
 80119d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80119d4:	2b00      	cmp	r3, #0
 80119d6:	dc39      	bgt.n	8011a4c <_printf_float+0x2f0>
 80119d8:	4a1b      	ldr	r2, [pc, #108]	; (8011a48 <_printf_float+0x2ec>)
 80119da:	2301      	movs	r3, #1
 80119dc:	4631      	mov	r1, r6
 80119de:	4628      	mov	r0, r5
 80119e0:	47b8      	blx	r7
 80119e2:	3001      	adds	r0, #1
 80119e4:	f43f af19 	beq.w	801181a <_printf_float+0xbe>
 80119e8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80119ec:	4313      	orrs	r3, r2
 80119ee:	d102      	bne.n	80119f6 <_printf_float+0x29a>
 80119f0:	6823      	ldr	r3, [r4, #0]
 80119f2:	07d9      	lsls	r1, r3, #31
 80119f4:	d5d8      	bpl.n	80119a8 <_printf_float+0x24c>
 80119f6:	ee18 3a10 	vmov	r3, s16
 80119fa:	4652      	mov	r2, sl
 80119fc:	4631      	mov	r1, r6
 80119fe:	4628      	mov	r0, r5
 8011a00:	47b8      	blx	r7
 8011a02:	3001      	adds	r0, #1
 8011a04:	f43f af09 	beq.w	801181a <_printf_float+0xbe>
 8011a08:	f04f 0900 	mov.w	r9, #0
 8011a0c:	f104 0a1a 	add.w	sl, r4, #26
 8011a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011a12:	425b      	negs	r3, r3
 8011a14:	454b      	cmp	r3, r9
 8011a16:	dc01      	bgt.n	8011a1c <_printf_float+0x2c0>
 8011a18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a1a:	e792      	b.n	8011942 <_printf_float+0x1e6>
 8011a1c:	2301      	movs	r3, #1
 8011a1e:	4652      	mov	r2, sl
 8011a20:	4631      	mov	r1, r6
 8011a22:	4628      	mov	r0, r5
 8011a24:	47b8      	blx	r7
 8011a26:	3001      	adds	r0, #1
 8011a28:	f43f aef7 	beq.w	801181a <_printf_float+0xbe>
 8011a2c:	f109 0901 	add.w	r9, r9, #1
 8011a30:	e7ee      	b.n	8011a10 <_printf_float+0x2b4>
 8011a32:	bf00      	nop
 8011a34:	7fefffff 	.word	0x7fefffff
 8011a38:	080158a4 	.word	0x080158a4
 8011a3c:	080158a8 	.word	0x080158a8
 8011a40:	080158ac 	.word	0x080158ac
 8011a44:	080158b0 	.word	0x080158b0
 8011a48:	080158b4 	.word	0x080158b4
 8011a4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a4e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011a50:	429a      	cmp	r2, r3
 8011a52:	bfa8      	it	ge
 8011a54:	461a      	movge	r2, r3
 8011a56:	2a00      	cmp	r2, #0
 8011a58:	4691      	mov	r9, r2
 8011a5a:	dc37      	bgt.n	8011acc <_printf_float+0x370>
 8011a5c:	f04f 0b00 	mov.w	fp, #0
 8011a60:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011a64:	f104 021a 	add.w	r2, r4, #26
 8011a68:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011a6a:	9305      	str	r3, [sp, #20]
 8011a6c:	eba3 0309 	sub.w	r3, r3, r9
 8011a70:	455b      	cmp	r3, fp
 8011a72:	dc33      	bgt.n	8011adc <_printf_float+0x380>
 8011a74:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011a78:	429a      	cmp	r2, r3
 8011a7a:	db3b      	blt.n	8011af4 <_printf_float+0x398>
 8011a7c:	6823      	ldr	r3, [r4, #0]
 8011a7e:	07da      	lsls	r2, r3, #31
 8011a80:	d438      	bmi.n	8011af4 <_printf_float+0x398>
 8011a82:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8011a86:	eba2 0903 	sub.w	r9, r2, r3
 8011a8a:	9b05      	ldr	r3, [sp, #20]
 8011a8c:	1ad2      	subs	r2, r2, r3
 8011a8e:	4591      	cmp	r9, r2
 8011a90:	bfa8      	it	ge
 8011a92:	4691      	movge	r9, r2
 8011a94:	f1b9 0f00 	cmp.w	r9, #0
 8011a98:	dc35      	bgt.n	8011b06 <_printf_float+0x3aa>
 8011a9a:	f04f 0800 	mov.w	r8, #0
 8011a9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011aa2:	f104 0a1a 	add.w	sl, r4, #26
 8011aa6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011aaa:	1a9b      	subs	r3, r3, r2
 8011aac:	eba3 0309 	sub.w	r3, r3, r9
 8011ab0:	4543      	cmp	r3, r8
 8011ab2:	f77f af79 	ble.w	80119a8 <_printf_float+0x24c>
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	4652      	mov	r2, sl
 8011aba:	4631      	mov	r1, r6
 8011abc:	4628      	mov	r0, r5
 8011abe:	47b8      	blx	r7
 8011ac0:	3001      	adds	r0, #1
 8011ac2:	f43f aeaa 	beq.w	801181a <_printf_float+0xbe>
 8011ac6:	f108 0801 	add.w	r8, r8, #1
 8011aca:	e7ec      	b.n	8011aa6 <_printf_float+0x34a>
 8011acc:	4613      	mov	r3, r2
 8011ace:	4631      	mov	r1, r6
 8011ad0:	4642      	mov	r2, r8
 8011ad2:	4628      	mov	r0, r5
 8011ad4:	47b8      	blx	r7
 8011ad6:	3001      	adds	r0, #1
 8011ad8:	d1c0      	bne.n	8011a5c <_printf_float+0x300>
 8011ada:	e69e      	b.n	801181a <_printf_float+0xbe>
 8011adc:	2301      	movs	r3, #1
 8011ade:	4631      	mov	r1, r6
 8011ae0:	4628      	mov	r0, r5
 8011ae2:	9205      	str	r2, [sp, #20]
 8011ae4:	47b8      	blx	r7
 8011ae6:	3001      	adds	r0, #1
 8011ae8:	f43f ae97 	beq.w	801181a <_printf_float+0xbe>
 8011aec:	9a05      	ldr	r2, [sp, #20]
 8011aee:	f10b 0b01 	add.w	fp, fp, #1
 8011af2:	e7b9      	b.n	8011a68 <_printf_float+0x30c>
 8011af4:	ee18 3a10 	vmov	r3, s16
 8011af8:	4652      	mov	r2, sl
 8011afa:	4631      	mov	r1, r6
 8011afc:	4628      	mov	r0, r5
 8011afe:	47b8      	blx	r7
 8011b00:	3001      	adds	r0, #1
 8011b02:	d1be      	bne.n	8011a82 <_printf_float+0x326>
 8011b04:	e689      	b.n	801181a <_printf_float+0xbe>
 8011b06:	9a05      	ldr	r2, [sp, #20]
 8011b08:	464b      	mov	r3, r9
 8011b0a:	4442      	add	r2, r8
 8011b0c:	4631      	mov	r1, r6
 8011b0e:	4628      	mov	r0, r5
 8011b10:	47b8      	blx	r7
 8011b12:	3001      	adds	r0, #1
 8011b14:	d1c1      	bne.n	8011a9a <_printf_float+0x33e>
 8011b16:	e680      	b.n	801181a <_printf_float+0xbe>
 8011b18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b1a:	2a01      	cmp	r2, #1
 8011b1c:	dc01      	bgt.n	8011b22 <_printf_float+0x3c6>
 8011b1e:	07db      	lsls	r3, r3, #31
 8011b20:	d53a      	bpl.n	8011b98 <_printf_float+0x43c>
 8011b22:	2301      	movs	r3, #1
 8011b24:	4642      	mov	r2, r8
 8011b26:	4631      	mov	r1, r6
 8011b28:	4628      	mov	r0, r5
 8011b2a:	47b8      	blx	r7
 8011b2c:	3001      	adds	r0, #1
 8011b2e:	f43f ae74 	beq.w	801181a <_printf_float+0xbe>
 8011b32:	ee18 3a10 	vmov	r3, s16
 8011b36:	4652      	mov	r2, sl
 8011b38:	4631      	mov	r1, r6
 8011b3a:	4628      	mov	r0, r5
 8011b3c:	47b8      	blx	r7
 8011b3e:	3001      	adds	r0, #1
 8011b40:	f43f ae6b 	beq.w	801181a <_printf_float+0xbe>
 8011b44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011b48:	2200      	movs	r2, #0
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8011b50:	f7ee ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 8011b54:	b9d8      	cbnz	r0, 8011b8e <_printf_float+0x432>
 8011b56:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 8011b5a:	f108 0201 	add.w	r2, r8, #1
 8011b5e:	4631      	mov	r1, r6
 8011b60:	4628      	mov	r0, r5
 8011b62:	47b8      	blx	r7
 8011b64:	3001      	adds	r0, #1
 8011b66:	d10e      	bne.n	8011b86 <_printf_float+0x42a>
 8011b68:	e657      	b.n	801181a <_printf_float+0xbe>
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	4652      	mov	r2, sl
 8011b6e:	4631      	mov	r1, r6
 8011b70:	4628      	mov	r0, r5
 8011b72:	47b8      	blx	r7
 8011b74:	3001      	adds	r0, #1
 8011b76:	f43f ae50 	beq.w	801181a <_printf_float+0xbe>
 8011b7a:	f108 0801 	add.w	r8, r8, #1
 8011b7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b80:	3b01      	subs	r3, #1
 8011b82:	4543      	cmp	r3, r8
 8011b84:	dcf1      	bgt.n	8011b6a <_printf_float+0x40e>
 8011b86:	464b      	mov	r3, r9
 8011b88:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011b8c:	e6da      	b.n	8011944 <_printf_float+0x1e8>
 8011b8e:	f04f 0800 	mov.w	r8, #0
 8011b92:	f104 0a1a 	add.w	sl, r4, #26
 8011b96:	e7f2      	b.n	8011b7e <_printf_float+0x422>
 8011b98:	2301      	movs	r3, #1
 8011b9a:	4642      	mov	r2, r8
 8011b9c:	e7df      	b.n	8011b5e <_printf_float+0x402>
 8011b9e:	2301      	movs	r3, #1
 8011ba0:	464a      	mov	r2, r9
 8011ba2:	4631      	mov	r1, r6
 8011ba4:	4628      	mov	r0, r5
 8011ba6:	47b8      	blx	r7
 8011ba8:	3001      	adds	r0, #1
 8011baa:	f43f ae36 	beq.w	801181a <_printf_float+0xbe>
 8011bae:	f108 0801 	add.w	r8, r8, #1
 8011bb2:	68e3      	ldr	r3, [r4, #12]
 8011bb4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8011bb6:	1a5b      	subs	r3, r3, r1
 8011bb8:	4543      	cmp	r3, r8
 8011bba:	dcf0      	bgt.n	8011b9e <_printf_float+0x442>
 8011bbc:	e6f8      	b.n	80119b0 <_printf_float+0x254>
 8011bbe:	f04f 0800 	mov.w	r8, #0
 8011bc2:	f104 0919 	add.w	r9, r4, #25
 8011bc6:	e7f4      	b.n	8011bb2 <_printf_float+0x456>

08011bc8 <_printf_common>:
 8011bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011bcc:	4616      	mov	r6, r2
 8011bce:	4699      	mov	r9, r3
 8011bd0:	688a      	ldr	r2, [r1, #8]
 8011bd2:	690b      	ldr	r3, [r1, #16]
 8011bd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011bd8:	4293      	cmp	r3, r2
 8011bda:	bfb8      	it	lt
 8011bdc:	4613      	movlt	r3, r2
 8011bde:	6033      	str	r3, [r6, #0]
 8011be0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011be4:	4607      	mov	r7, r0
 8011be6:	460c      	mov	r4, r1
 8011be8:	b10a      	cbz	r2, 8011bee <_printf_common+0x26>
 8011bea:	3301      	adds	r3, #1
 8011bec:	6033      	str	r3, [r6, #0]
 8011bee:	6823      	ldr	r3, [r4, #0]
 8011bf0:	0699      	lsls	r1, r3, #26
 8011bf2:	bf42      	ittt	mi
 8011bf4:	6833      	ldrmi	r3, [r6, #0]
 8011bf6:	3302      	addmi	r3, #2
 8011bf8:	6033      	strmi	r3, [r6, #0]
 8011bfa:	6825      	ldr	r5, [r4, #0]
 8011bfc:	f015 0506 	ands.w	r5, r5, #6
 8011c00:	d106      	bne.n	8011c10 <_printf_common+0x48>
 8011c02:	f104 0a19 	add.w	sl, r4, #25
 8011c06:	68e3      	ldr	r3, [r4, #12]
 8011c08:	6832      	ldr	r2, [r6, #0]
 8011c0a:	1a9b      	subs	r3, r3, r2
 8011c0c:	42ab      	cmp	r3, r5
 8011c0e:	dc26      	bgt.n	8011c5e <_printf_common+0x96>
 8011c10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011c14:	1e13      	subs	r3, r2, #0
 8011c16:	6822      	ldr	r2, [r4, #0]
 8011c18:	bf18      	it	ne
 8011c1a:	2301      	movne	r3, #1
 8011c1c:	0692      	lsls	r2, r2, #26
 8011c1e:	d42b      	bmi.n	8011c78 <_printf_common+0xb0>
 8011c20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011c24:	4649      	mov	r1, r9
 8011c26:	4638      	mov	r0, r7
 8011c28:	47c0      	blx	r8
 8011c2a:	3001      	adds	r0, #1
 8011c2c:	d01e      	beq.n	8011c6c <_printf_common+0xa4>
 8011c2e:	6823      	ldr	r3, [r4, #0]
 8011c30:	6922      	ldr	r2, [r4, #16]
 8011c32:	f003 0306 	and.w	r3, r3, #6
 8011c36:	2b04      	cmp	r3, #4
 8011c38:	bf02      	ittt	eq
 8011c3a:	68e5      	ldreq	r5, [r4, #12]
 8011c3c:	6833      	ldreq	r3, [r6, #0]
 8011c3e:	1aed      	subeq	r5, r5, r3
 8011c40:	68a3      	ldr	r3, [r4, #8]
 8011c42:	bf0c      	ite	eq
 8011c44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011c48:	2500      	movne	r5, #0
 8011c4a:	4293      	cmp	r3, r2
 8011c4c:	bfc4      	itt	gt
 8011c4e:	1a9b      	subgt	r3, r3, r2
 8011c50:	18ed      	addgt	r5, r5, r3
 8011c52:	2600      	movs	r6, #0
 8011c54:	341a      	adds	r4, #26
 8011c56:	42b5      	cmp	r5, r6
 8011c58:	d11a      	bne.n	8011c90 <_printf_common+0xc8>
 8011c5a:	2000      	movs	r0, #0
 8011c5c:	e008      	b.n	8011c70 <_printf_common+0xa8>
 8011c5e:	2301      	movs	r3, #1
 8011c60:	4652      	mov	r2, sl
 8011c62:	4649      	mov	r1, r9
 8011c64:	4638      	mov	r0, r7
 8011c66:	47c0      	blx	r8
 8011c68:	3001      	adds	r0, #1
 8011c6a:	d103      	bne.n	8011c74 <_printf_common+0xac>
 8011c6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011c70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011c74:	3501      	adds	r5, #1
 8011c76:	e7c6      	b.n	8011c06 <_printf_common+0x3e>
 8011c78:	18e1      	adds	r1, r4, r3
 8011c7a:	1c5a      	adds	r2, r3, #1
 8011c7c:	2030      	movs	r0, #48	; 0x30
 8011c7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011c82:	4422      	add	r2, r4
 8011c84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011c88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011c8c:	3302      	adds	r3, #2
 8011c8e:	e7c7      	b.n	8011c20 <_printf_common+0x58>
 8011c90:	2301      	movs	r3, #1
 8011c92:	4622      	mov	r2, r4
 8011c94:	4649      	mov	r1, r9
 8011c96:	4638      	mov	r0, r7
 8011c98:	47c0      	blx	r8
 8011c9a:	3001      	adds	r0, #1
 8011c9c:	d0e6      	beq.n	8011c6c <_printf_common+0xa4>
 8011c9e:	3601      	adds	r6, #1
 8011ca0:	e7d9      	b.n	8011c56 <_printf_common+0x8e>
	...

08011ca4 <_printf_i>:
 8011ca4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011ca8:	7e0f      	ldrb	r7, [r1, #24]
 8011caa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011cac:	2f78      	cmp	r7, #120	; 0x78
 8011cae:	4691      	mov	r9, r2
 8011cb0:	4680      	mov	r8, r0
 8011cb2:	460c      	mov	r4, r1
 8011cb4:	469a      	mov	sl, r3
 8011cb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8011cba:	d807      	bhi.n	8011ccc <_printf_i+0x28>
 8011cbc:	2f62      	cmp	r7, #98	; 0x62
 8011cbe:	d80a      	bhi.n	8011cd6 <_printf_i+0x32>
 8011cc0:	2f00      	cmp	r7, #0
 8011cc2:	f000 80d4 	beq.w	8011e6e <_printf_i+0x1ca>
 8011cc6:	2f58      	cmp	r7, #88	; 0x58
 8011cc8:	f000 80c0 	beq.w	8011e4c <_printf_i+0x1a8>
 8011ccc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011cd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8011cd4:	e03a      	b.n	8011d4c <_printf_i+0xa8>
 8011cd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8011cda:	2b15      	cmp	r3, #21
 8011cdc:	d8f6      	bhi.n	8011ccc <_printf_i+0x28>
 8011cde:	a101      	add	r1, pc, #4	; (adr r1, 8011ce4 <_printf_i+0x40>)
 8011ce0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8011ce4:	08011d3d 	.word	0x08011d3d
 8011ce8:	08011d51 	.word	0x08011d51
 8011cec:	08011ccd 	.word	0x08011ccd
 8011cf0:	08011ccd 	.word	0x08011ccd
 8011cf4:	08011ccd 	.word	0x08011ccd
 8011cf8:	08011ccd 	.word	0x08011ccd
 8011cfc:	08011d51 	.word	0x08011d51
 8011d00:	08011ccd 	.word	0x08011ccd
 8011d04:	08011ccd 	.word	0x08011ccd
 8011d08:	08011ccd 	.word	0x08011ccd
 8011d0c:	08011ccd 	.word	0x08011ccd
 8011d10:	08011e55 	.word	0x08011e55
 8011d14:	08011d7d 	.word	0x08011d7d
 8011d18:	08011e0f 	.word	0x08011e0f
 8011d1c:	08011ccd 	.word	0x08011ccd
 8011d20:	08011ccd 	.word	0x08011ccd
 8011d24:	08011e77 	.word	0x08011e77
 8011d28:	08011ccd 	.word	0x08011ccd
 8011d2c:	08011d7d 	.word	0x08011d7d
 8011d30:	08011ccd 	.word	0x08011ccd
 8011d34:	08011ccd 	.word	0x08011ccd
 8011d38:	08011e17 	.word	0x08011e17
 8011d3c:	682b      	ldr	r3, [r5, #0]
 8011d3e:	1d1a      	adds	r2, r3, #4
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	602a      	str	r2, [r5, #0]
 8011d44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011d48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011d4c:	2301      	movs	r3, #1
 8011d4e:	e09f      	b.n	8011e90 <_printf_i+0x1ec>
 8011d50:	6820      	ldr	r0, [r4, #0]
 8011d52:	682b      	ldr	r3, [r5, #0]
 8011d54:	0607      	lsls	r7, r0, #24
 8011d56:	f103 0104 	add.w	r1, r3, #4
 8011d5a:	6029      	str	r1, [r5, #0]
 8011d5c:	d501      	bpl.n	8011d62 <_printf_i+0xbe>
 8011d5e:	681e      	ldr	r6, [r3, #0]
 8011d60:	e003      	b.n	8011d6a <_printf_i+0xc6>
 8011d62:	0646      	lsls	r6, r0, #25
 8011d64:	d5fb      	bpl.n	8011d5e <_printf_i+0xba>
 8011d66:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011d6a:	2e00      	cmp	r6, #0
 8011d6c:	da03      	bge.n	8011d76 <_printf_i+0xd2>
 8011d6e:	232d      	movs	r3, #45	; 0x2d
 8011d70:	4276      	negs	r6, r6
 8011d72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d76:	485a      	ldr	r0, [pc, #360]	; (8011ee0 <_printf_i+0x23c>)
 8011d78:	230a      	movs	r3, #10
 8011d7a:	e012      	b.n	8011da2 <_printf_i+0xfe>
 8011d7c:	682b      	ldr	r3, [r5, #0]
 8011d7e:	6820      	ldr	r0, [r4, #0]
 8011d80:	1d19      	adds	r1, r3, #4
 8011d82:	6029      	str	r1, [r5, #0]
 8011d84:	0605      	lsls	r5, r0, #24
 8011d86:	d501      	bpl.n	8011d8c <_printf_i+0xe8>
 8011d88:	681e      	ldr	r6, [r3, #0]
 8011d8a:	e002      	b.n	8011d92 <_printf_i+0xee>
 8011d8c:	0641      	lsls	r1, r0, #25
 8011d8e:	d5fb      	bpl.n	8011d88 <_printf_i+0xe4>
 8011d90:	881e      	ldrh	r6, [r3, #0]
 8011d92:	4853      	ldr	r0, [pc, #332]	; (8011ee0 <_printf_i+0x23c>)
 8011d94:	2f6f      	cmp	r7, #111	; 0x6f
 8011d96:	bf0c      	ite	eq
 8011d98:	2308      	moveq	r3, #8
 8011d9a:	230a      	movne	r3, #10
 8011d9c:	2100      	movs	r1, #0
 8011d9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011da2:	6865      	ldr	r5, [r4, #4]
 8011da4:	60a5      	str	r5, [r4, #8]
 8011da6:	2d00      	cmp	r5, #0
 8011da8:	bfa2      	ittt	ge
 8011daa:	6821      	ldrge	r1, [r4, #0]
 8011dac:	f021 0104 	bicge.w	r1, r1, #4
 8011db0:	6021      	strge	r1, [r4, #0]
 8011db2:	b90e      	cbnz	r6, 8011db8 <_printf_i+0x114>
 8011db4:	2d00      	cmp	r5, #0
 8011db6:	d04b      	beq.n	8011e50 <_printf_i+0x1ac>
 8011db8:	4615      	mov	r5, r2
 8011dba:	fbb6 f1f3 	udiv	r1, r6, r3
 8011dbe:	fb03 6711 	mls	r7, r3, r1, r6
 8011dc2:	5dc7      	ldrb	r7, [r0, r7]
 8011dc4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8011dc8:	4637      	mov	r7, r6
 8011dca:	42bb      	cmp	r3, r7
 8011dcc:	460e      	mov	r6, r1
 8011dce:	d9f4      	bls.n	8011dba <_printf_i+0x116>
 8011dd0:	2b08      	cmp	r3, #8
 8011dd2:	d10b      	bne.n	8011dec <_printf_i+0x148>
 8011dd4:	6823      	ldr	r3, [r4, #0]
 8011dd6:	07de      	lsls	r6, r3, #31
 8011dd8:	d508      	bpl.n	8011dec <_printf_i+0x148>
 8011dda:	6923      	ldr	r3, [r4, #16]
 8011ddc:	6861      	ldr	r1, [r4, #4]
 8011dde:	4299      	cmp	r1, r3
 8011de0:	bfde      	ittt	le
 8011de2:	2330      	movle	r3, #48	; 0x30
 8011de4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011de8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011dec:	1b52      	subs	r2, r2, r5
 8011dee:	6122      	str	r2, [r4, #16]
 8011df0:	f8cd a000 	str.w	sl, [sp]
 8011df4:	464b      	mov	r3, r9
 8011df6:	aa03      	add	r2, sp, #12
 8011df8:	4621      	mov	r1, r4
 8011dfa:	4640      	mov	r0, r8
 8011dfc:	f7ff fee4 	bl	8011bc8 <_printf_common>
 8011e00:	3001      	adds	r0, #1
 8011e02:	d14a      	bne.n	8011e9a <_printf_i+0x1f6>
 8011e04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e08:	b004      	add	sp, #16
 8011e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011e0e:	6823      	ldr	r3, [r4, #0]
 8011e10:	f043 0320 	orr.w	r3, r3, #32
 8011e14:	6023      	str	r3, [r4, #0]
 8011e16:	4833      	ldr	r0, [pc, #204]	; (8011ee4 <_printf_i+0x240>)
 8011e18:	2778      	movs	r7, #120	; 0x78
 8011e1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8011e1e:	6823      	ldr	r3, [r4, #0]
 8011e20:	6829      	ldr	r1, [r5, #0]
 8011e22:	061f      	lsls	r7, r3, #24
 8011e24:	f851 6b04 	ldr.w	r6, [r1], #4
 8011e28:	d402      	bmi.n	8011e30 <_printf_i+0x18c>
 8011e2a:	065f      	lsls	r7, r3, #25
 8011e2c:	bf48      	it	mi
 8011e2e:	b2b6      	uxthmi	r6, r6
 8011e30:	07df      	lsls	r7, r3, #31
 8011e32:	bf48      	it	mi
 8011e34:	f043 0320 	orrmi.w	r3, r3, #32
 8011e38:	6029      	str	r1, [r5, #0]
 8011e3a:	bf48      	it	mi
 8011e3c:	6023      	strmi	r3, [r4, #0]
 8011e3e:	b91e      	cbnz	r6, 8011e48 <_printf_i+0x1a4>
 8011e40:	6823      	ldr	r3, [r4, #0]
 8011e42:	f023 0320 	bic.w	r3, r3, #32
 8011e46:	6023      	str	r3, [r4, #0]
 8011e48:	2310      	movs	r3, #16
 8011e4a:	e7a7      	b.n	8011d9c <_printf_i+0xf8>
 8011e4c:	4824      	ldr	r0, [pc, #144]	; (8011ee0 <_printf_i+0x23c>)
 8011e4e:	e7e4      	b.n	8011e1a <_printf_i+0x176>
 8011e50:	4615      	mov	r5, r2
 8011e52:	e7bd      	b.n	8011dd0 <_printf_i+0x12c>
 8011e54:	682b      	ldr	r3, [r5, #0]
 8011e56:	6826      	ldr	r6, [r4, #0]
 8011e58:	6961      	ldr	r1, [r4, #20]
 8011e5a:	1d18      	adds	r0, r3, #4
 8011e5c:	6028      	str	r0, [r5, #0]
 8011e5e:	0635      	lsls	r5, r6, #24
 8011e60:	681b      	ldr	r3, [r3, #0]
 8011e62:	d501      	bpl.n	8011e68 <_printf_i+0x1c4>
 8011e64:	6019      	str	r1, [r3, #0]
 8011e66:	e002      	b.n	8011e6e <_printf_i+0x1ca>
 8011e68:	0670      	lsls	r0, r6, #25
 8011e6a:	d5fb      	bpl.n	8011e64 <_printf_i+0x1c0>
 8011e6c:	8019      	strh	r1, [r3, #0]
 8011e6e:	2300      	movs	r3, #0
 8011e70:	6123      	str	r3, [r4, #16]
 8011e72:	4615      	mov	r5, r2
 8011e74:	e7bc      	b.n	8011df0 <_printf_i+0x14c>
 8011e76:	682b      	ldr	r3, [r5, #0]
 8011e78:	1d1a      	adds	r2, r3, #4
 8011e7a:	602a      	str	r2, [r5, #0]
 8011e7c:	681d      	ldr	r5, [r3, #0]
 8011e7e:	6862      	ldr	r2, [r4, #4]
 8011e80:	2100      	movs	r1, #0
 8011e82:	4628      	mov	r0, r5
 8011e84:	f7ee f9a4 	bl	80001d0 <memchr>
 8011e88:	b108      	cbz	r0, 8011e8e <_printf_i+0x1ea>
 8011e8a:	1b40      	subs	r0, r0, r5
 8011e8c:	6060      	str	r0, [r4, #4]
 8011e8e:	6863      	ldr	r3, [r4, #4]
 8011e90:	6123      	str	r3, [r4, #16]
 8011e92:	2300      	movs	r3, #0
 8011e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011e98:	e7aa      	b.n	8011df0 <_printf_i+0x14c>
 8011e9a:	6923      	ldr	r3, [r4, #16]
 8011e9c:	462a      	mov	r2, r5
 8011e9e:	4649      	mov	r1, r9
 8011ea0:	4640      	mov	r0, r8
 8011ea2:	47d0      	blx	sl
 8011ea4:	3001      	adds	r0, #1
 8011ea6:	d0ad      	beq.n	8011e04 <_printf_i+0x160>
 8011ea8:	6823      	ldr	r3, [r4, #0]
 8011eaa:	079b      	lsls	r3, r3, #30
 8011eac:	d413      	bmi.n	8011ed6 <_printf_i+0x232>
 8011eae:	68e0      	ldr	r0, [r4, #12]
 8011eb0:	9b03      	ldr	r3, [sp, #12]
 8011eb2:	4298      	cmp	r0, r3
 8011eb4:	bfb8      	it	lt
 8011eb6:	4618      	movlt	r0, r3
 8011eb8:	e7a6      	b.n	8011e08 <_printf_i+0x164>
 8011eba:	2301      	movs	r3, #1
 8011ebc:	4632      	mov	r2, r6
 8011ebe:	4649      	mov	r1, r9
 8011ec0:	4640      	mov	r0, r8
 8011ec2:	47d0      	blx	sl
 8011ec4:	3001      	adds	r0, #1
 8011ec6:	d09d      	beq.n	8011e04 <_printf_i+0x160>
 8011ec8:	3501      	adds	r5, #1
 8011eca:	68e3      	ldr	r3, [r4, #12]
 8011ecc:	9903      	ldr	r1, [sp, #12]
 8011ece:	1a5b      	subs	r3, r3, r1
 8011ed0:	42ab      	cmp	r3, r5
 8011ed2:	dcf2      	bgt.n	8011eba <_printf_i+0x216>
 8011ed4:	e7eb      	b.n	8011eae <_printf_i+0x20a>
 8011ed6:	2500      	movs	r5, #0
 8011ed8:	f104 0619 	add.w	r6, r4, #25
 8011edc:	e7f5      	b.n	8011eca <_printf_i+0x226>
 8011ede:	bf00      	nop
 8011ee0:	080158b6 	.word	0x080158b6
 8011ee4:	080158c7 	.word	0x080158c7

08011ee8 <siprintf>:
 8011ee8:	b40e      	push	{r1, r2, r3}
 8011eea:	b500      	push	{lr}
 8011eec:	b09c      	sub	sp, #112	; 0x70
 8011eee:	ab1d      	add	r3, sp, #116	; 0x74
 8011ef0:	9002      	str	r0, [sp, #8]
 8011ef2:	9006      	str	r0, [sp, #24]
 8011ef4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011ef8:	4809      	ldr	r0, [pc, #36]	; (8011f20 <siprintf+0x38>)
 8011efa:	9107      	str	r1, [sp, #28]
 8011efc:	9104      	str	r1, [sp, #16]
 8011efe:	4909      	ldr	r1, [pc, #36]	; (8011f24 <siprintf+0x3c>)
 8011f00:	f853 2b04 	ldr.w	r2, [r3], #4
 8011f04:	9105      	str	r1, [sp, #20]
 8011f06:	6800      	ldr	r0, [r0, #0]
 8011f08:	9301      	str	r3, [sp, #4]
 8011f0a:	a902      	add	r1, sp, #8
 8011f0c:	f000 ffd8 	bl	8012ec0 <_svfiprintf_r>
 8011f10:	9b02      	ldr	r3, [sp, #8]
 8011f12:	2200      	movs	r2, #0
 8011f14:	701a      	strb	r2, [r3, #0]
 8011f16:	b01c      	add	sp, #112	; 0x70
 8011f18:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f1c:	b003      	add	sp, #12
 8011f1e:	4770      	bx	lr
 8011f20:	20000178 	.word	0x20000178
 8011f24:	ffff0208 	.word	0xffff0208

08011f28 <std>:
 8011f28:	2300      	movs	r3, #0
 8011f2a:	b510      	push	{r4, lr}
 8011f2c:	4604      	mov	r4, r0
 8011f2e:	e9c0 3300 	strd	r3, r3, [r0]
 8011f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011f36:	6083      	str	r3, [r0, #8]
 8011f38:	8181      	strh	r1, [r0, #12]
 8011f3a:	6643      	str	r3, [r0, #100]	; 0x64
 8011f3c:	81c2      	strh	r2, [r0, #14]
 8011f3e:	6183      	str	r3, [r0, #24]
 8011f40:	4619      	mov	r1, r3
 8011f42:	2208      	movs	r2, #8
 8011f44:	305c      	adds	r0, #92	; 0x5c
 8011f46:	f000 f89f 	bl	8012088 <memset>
 8011f4a:	4b05      	ldr	r3, [pc, #20]	; (8011f60 <std+0x38>)
 8011f4c:	6263      	str	r3, [r4, #36]	; 0x24
 8011f4e:	4b05      	ldr	r3, [pc, #20]	; (8011f64 <std+0x3c>)
 8011f50:	62a3      	str	r3, [r4, #40]	; 0x28
 8011f52:	4b05      	ldr	r3, [pc, #20]	; (8011f68 <std+0x40>)
 8011f54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011f56:	4b05      	ldr	r3, [pc, #20]	; (8011f6c <std+0x44>)
 8011f58:	6224      	str	r4, [r4, #32]
 8011f5a:	6323      	str	r3, [r4, #48]	; 0x30
 8011f5c:	bd10      	pop	{r4, pc}
 8011f5e:	bf00      	nop
 8011f60:	08013a79 	.word	0x08013a79
 8011f64:	08013a9b 	.word	0x08013a9b
 8011f68:	08013ad3 	.word	0x08013ad3
 8011f6c:	08013af7 	.word	0x08013af7

08011f70 <stdio_exit_handler>:
 8011f70:	4a02      	ldr	r2, [pc, #8]	; (8011f7c <stdio_exit_handler+0xc>)
 8011f72:	4903      	ldr	r1, [pc, #12]	; (8011f80 <stdio_exit_handler+0x10>)
 8011f74:	4803      	ldr	r0, [pc, #12]	; (8011f84 <stdio_exit_handler+0x14>)
 8011f76:	f000 b869 	b.w	801204c <_fwalk_sglue>
 8011f7a:	bf00      	nop
 8011f7c:	20000120 	.word	0x20000120
 8011f80:	08013319 	.word	0x08013319
 8011f84:	2000012c 	.word	0x2000012c

08011f88 <cleanup_stdio>:
 8011f88:	6841      	ldr	r1, [r0, #4]
 8011f8a:	4b0c      	ldr	r3, [pc, #48]	; (8011fbc <cleanup_stdio+0x34>)
 8011f8c:	4299      	cmp	r1, r3
 8011f8e:	b510      	push	{r4, lr}
 8011f90:	4604      	mov	r4, r0
 8011f92:	d001      	beq.n	8011f98 <cleanup_stdio+0x10>
 8011f94:	f001 f9c0 	bl	8013318 <_fflush_r>
 8011f98:	68a1      	ldr	r1, [r4, #8]
 8011f9a:	4b09      	ldr	r3, [pc, #36]	; (8011fc0 <cleanup_stdio+0x38>)
 8011f9c:	4299      	cmp	r1, r3
 8011f9e:	d002      	beq.n	8011fa6 <cleanup_stdio+0x1e>
 8011fa0:	4620      	mov	r0, r4
 8011fa2:	f001 f9b9 	bl	8013318 <_fflush_r>
 8011fa6:	68e1      	ldr	r1, [r4, #12]
 8011fa8:	4b06      	ldr	r3, [pc, #24]	; (8011fc4 <cleanup_stdio+0x3c>)
 8011faa:	4299      	cmp	r1, r3
 8011fac:	d004      	beq.n	8011fb8 <cleanup_stdio+0x30>
 8011fae:	4620      	mov	r0, r4
 8011fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011fb4:	f001 b9b0 	b.w	8013318 <_fflush_r>
 8011fb8:	bd10      	pop	{r4, pc}
 8011fba:	bf00      	nop
 8011fbc:	20002760 	.word	0x20002760
 8011fc0:	200027c8 	.word	0x200027c8
 8011fc4:	20002830 	.word	0x20002830

08011fc8 <global_stdio_init.part.0>:
 8011fc8:	b510      	push	{r4, lr}
 8011fca:	4b0b      	ldr	r3, [pc, #44]	; (8011ff8 <global_stdio_init.part.0+0x30>)
 8011fcc:	4c0b      	ldr	r4, [pc, #44]	; (8011ffc <global_stdio_init.part.0+0x34>)
 8011fce:	4a0c      	ldr	r2, [pc, #48]	; (8012000 <global_stdio_init.part.0+0x38>)
 8011fd0:	601a      	str	r2, [r3, #0]
 8011fd2:	4620      	mov	r0, r4
 8011fd4:	2200      	movs	r2, #0
 8011fd6:	2104      	movs	r1, #4
 8011fd8:	f7ff ffa6 	bl	8011f28 <std>
 8011fdc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8011fe0:	2201      	movs	r2, #1
 8011fe2:	2109      	movs	r1, #9
 8011fe4:	f7ff ffa0 	bl	8011f28 <std>
 8011fe8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8011fec:	2202      	movs	r2, #2
 8011fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ff2:	2112      	movs	r1, #18
 8011ff4:	f7ff bf98 	b.w	8011f28 <std>
 8011ff8:	20002898 	.word	0x20002898
 8011ffc:	20002760 	.word	0x20002760
 8012000:	08011f71 	.word	0x08011f71

08012004 <__sfp_lock_acquire>:
 8012004:	4801      	ldr	r0, [pc, #4]	; (801200c <__sfp_lock_acquire+0x8>)
 8012006:	f000 b875 	b.w	80120f4 <__retarget_lock_acquire_recursive>
 801200a:	bf00      	nop
 801200c:	2000289d 	.word	0x2000289d

08012010 <__sfp_lock_release>:
 8012010:	4801      	ldr	r0, [pc, #4]	; (8012018 <__sfp_lock_release+0x8>)
 8012012:	f000 b870 	b.w	80120f6 <__retarget_lock_release_recursive>
 8012016:	bf00      	nop
 8012018:	2000289d 	.word	0x2000289d

0801201c <__sinit>:
 801201c:	b510      	push	{r4, lr}
 801201e:	4604      	mov	r4, r0
 8012020:	f7ff fff0 	bl	8012004 <__sfp_lock_acquire>
 8012024:	6a23      	ldr	r3, [r4, #32]
 8012026:	b11b      	cbz	r3, 8012030 <__sinit+0x14>
 8012028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801202c:	f7ff bff0 	b.w	8012010 <__sfp_lock_release>
 8012030:	4b04      	ldr	r3, [pc, #16]	; (8012044 <__sinit+0x28>)
 8012032:	6223      	str	r3, [r4, #32]
 8012034:	4b04      	ldr	r3, [pc, #16]	; (8012048 <__sinit+0x2c>)
 8012036:	681b      	ldr	r3, [r3, #0]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d1f5      	bne.n	8012028 <__sinit+0xc>
 801203c:	f7ff ffc4 	bl	8011fc8 <global_stdio_init.part.0>
 8012040:	e7f2      	b.n	8012028 <__sinit+0xc>
 8012042:	bf00      	nop
 8012044:	08011f89 	.word	0x08011f89
 8012048:	20002898 	.word	0x20002898

0801204c <_fwalk_sglue>:
 801204c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012050:	4607      	mov	r7, r0
 8012052:	4688      	mov	r8, r1
 8012054:	4614      	mov	r4, r2
 8012056:	2600      	movs	r6, #0
 8012058:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801205c:	f1b9 0901 	subs.w	r9, r9, #1
 8012060:	d505      	bpl.n	801206e <_fwalk_sglue+0x22>
 8012062:	6824      	ldr	r4, [r4, #0]
 8012064:	2c00      	cmp	r4, #0
 8012066:	d1f7      	bne.n	8012058 <_fwalk_sglue+0xc>
 8012068:	4630      	mov	r0, r6
 801206a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801206e:	89ab      	ldrh	r3, [r5, #12]
 8012070:	2b01      	cmp	r3, #1
 8012072:	d907      	bls.n	8012084 <_fwalk_sglue+0x38>
 8012074:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8012078:	3301      	adds	r3, #1
 801207a:	d003      	beq.n	8012084 <_fwalk_sglue+0x38>
 801207c:	4629      	mov	r1, r5
 801207e:	4638      	mov	r0, r7
 8012080:	47c0      	blx	r8
 8012082:	4306      	orrs	r6, r0
 8012084:	3568      	adds	r5, #104	; 0x68
 8012086:	e7e9      	b.n	801205c <_fwalk_sglue+0x10>

08012088 <memset>:
 8012088:	4402      	add	r2, r0
 801208a:	4603      	mov	r3, r0
 801208c:	4293      	cmp	r3, r2
 801208e:	d100      	bne.n	8012092 <memset+0xa>
 8012090:	4770      	bx	lr
 8012092:	f803 1b01 	strb.w	r1, [r3], #1
 8012096:	e7f9      	b.n	801208c <memset+0x4>

08012098 <_localeconv_r>:
 8012098:	4800      	ldr	r0, [pc, #0]	; (801209c <_localeconv_r+0x4>)
 801209a:	4770      	bx	lr
 801209c:	2000026c 	.word	0x2000026c

080120a0 <__errno>:
 80120a0:	4b01      	ldr	r3, [pc, #4]	; (80120a8 <__errno+0x8>)
 80120a2:	6818      	ldr	r0, [r3, #0]
 80120a4:	4770      	bx	lr
 80120a6:	bf00      	nop
 80120a8:	20000178 	.word	0x20000178

080120ac <__libc_init_array>:
 80120ac:	b570      	push	{r4, r5, r6, lr}
 80120ae:	4d0d      	ldr	r5, [pc, #52]	; (80120e4 <__libc_init_array+0x38>)
 80120b0:	4c0d      	ldr	r4, [pc, #52]	; (80120e8 <__libc_init_array+0x3c>)
 80120b2:	1b64      	subs	r4, r4, r5
 80120b4:	10a4      	asrs	r4, r4, #2
 80120b6:	2600      	movs	r6, #0
 80120b8:	42a6      	cmp	r6, r4
 80120ba:	d109      	bne.n	80120d0 <__libc_init_array+0x24>
 80120bc:	4d0b      	ldr	r5, [pc, #44]	; (80120ec <__libc_init_array+0x40>)
 80120be:	4c0c      	ldr	r4, [pc, #48]	; (80120f0 <__libc_init_array+0x44>)
 80120c0:	f003 fb38 	bl	8015734 <_init>
 80120c4:	1b64      	subs	r4, r4, r5
 80120c6:	10a4      	asrs	r4, r4, #2
 80120c8:	2600      	movs	r6, #0
 80120ca:	42a6      	cmp	r6, r4
 80120cc:	d105      	bne.n	80120da <__libc_init_array+0x2e>
 80120ce:	bd70      	pop	{r4, r5, r6, pc}
 80120d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80120d4:	4798      	blx	r3
 80120d6:	3601      	adds	r6, #1
 80120d8:	e7ee      	b.n	80120b8 <__libc_init_array+0xc>
 80120da:	f855 3b04 	ldr.w	r3, [r5], #4
 80120de:	4798      	blx	r3
 80120e0:	3601      	adds	r6, #1
 80120e2:	e7f2      	b.n	80120ca <__libc_init_array+0x1e>
 80120e4:	08015cc0 	.word	0x08015cc0
 80120e8:	08015cc0 	.word	0x08015cc0
 80120ec:	08015cc0 	.word	0x08015cc0
 80120f0:	08015cc4 	.word	0x08015cc4

080120f4 <__retarget_lock_acquire_recursive>:
 80120f4:	4770      	bx	lr

080120f6 <__retarget_lock_release_recursive>:
 80120f6:	4770      	bx	lr

080120f8 <memcpy>:
 80120f8:	440a      	add	r2, r1
 80120fa:	4291      	cmp	r1, r2
 80120fc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8012100:	d100      	bne.n	8012104 <memcpy+0xc>
 8012102:	4770      	bx	lr
 8012104:	b510      	push	{r4, lr}
 8012106:	f811 4b01 	ldrb.w	r4, [r1], #1
 801210a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801210e:	4291      	cmp	r1, r2
 8012110:	d1f9      	bne.n	8012106 <memcpy+0xe>
 8012112:	bd10      	pop	{r4, pc}

08012114 <quorem>:
 8012114:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012118:	6903      	ldr	r3, [r0, #16]
 801211a:	690c      	ldr	r4, [r1, #16]
 801211c:	42a3      	cmp	r3, r4
 801211e:	4607      	mov	r7, r0
 8012120:	db7e      	blt.n	8012220 <quorem+0x10c>
 8012122:	3c01      	subs	r4, #1
 8012124:	f101 0814 	add.w	r8, r1, #20
 8012128:	f100 0514 	add.w	r5, r0, #20
 801212c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012130:	9301      	str	r3, [sp, #4]
 8012132:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012136:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801213a:	3301      	adds	r3, #1
 801213c:	429a      	cmp	r2, r3
 801213e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012142:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012146:	fbb2 f6f3 	udiv	r6, r2, r3
 801214a:	d331      	bcc.n	80121b0 <quorem+0x9c>
 801214c:	f04f 0e00 	mov.w	lr, #0
 8012150:	4640      	mov	r0, r8
 8012152:	46ac      	mov	ip, r5
 8012154:	46f2      	mov	sl, lr
 8012156:	f850 2b04 	ldr.w	r2, [r0], #4
 801215a:	b293      	uxth	r3, r2
 801215c:	fb06 e303 	mla	r3, r6, r3, lr
 8012160:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012164:	0c1a      	lsrs	r2, r3, #16
 8012166:	b29b      	uxth	r3, r3
 8012168:	ebaa 0303 	sub.w	r3, sl, r3
 801216c:	f8dc a000 	ldr.w	sl, [ip]
 8012170:	fa13 f38a 	uxtah	r3, r3, sl
 8012174:	fb06 220e 	mla	r2, r6, lr, r2
 8012178:	9300      	str	r3, [sp, #0]
 801217a:	9b00      	ldr	r3, [sp, #0]
 801217c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012180:	b292      	uxth	r2, r2
 8012182:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012186:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801218a:	f8bd 3000 	ldrh.w	r3, [sp]
 801218e:	4581      	cmp	r9, r0
 8012190:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012194:	f84c 3b04 	str.w	r3, [ip], #4
 8012198:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801219c:	d2db      	bcs.n	8012156 <quorem+0x42>
 801219e:	f855 300b 	ldr.w	r3, [r5, fp]
 80121a2:	b92b      	cbnz	r3, 80121b0 <quorem+0x9c>
 80121a4:	9b01      	ldr	r3, [sp, #4]
 80121a6:	3b04      	subs	r3, #4
 80121a8:	429d      	cmp	r5, r3
 80121aa:	461a      	mov	r2, r3
 80121ac:	d32c      	bcc.n	8012208 <quorem+0xf4>
 80121ae:	613c      	str	r4, [r7, #16]
 80121b0:	4638      	mov	r0, r7
 80121b2:	f001 fb61 	bl	8013878 <__mcmp>
 80121b6:	2800      	cmp	r0, #0
 80121b8:	db22      	blt.n	8012200 <quorem+0xec>
 80121ba:	3601      	adds	r6, #1
 80121bc:	4629      	mov	r1, r5
 80121be:	2000      	movs	r0, #0
 80121c0:	f858 2b04 	ldr.w	r2, [r8], #4
 80121c4:	f8d1 c000 	ldr.w	ip, [r1]
 80121c8:	b293      	uxth	r3, r2
 80121ca:	1ac3      	subs	r3, r0, r3
 80121cc:	0c12      	lsrs	r2, r2, #16
 80121ce:	fa13 f38c 	uxtah	r3, r3, ip
 80121d2:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80121d6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80121da:	b29b      	uxth	r3, r3
 80121dc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80121e0:	45c1      	cmp	r9, r8
 80121e2:	f841 3b04 	str.w	r3, [r1], #4
 80121e6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80121ea:	d2e9      	bcs.n	80121c0 <quorem+0xac>
 80121ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80121f0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80121f4:	b922      	cbnz	r2, 8012200 <quorem+0xec>
 80121f6:	3b04      	subs	r3, #4
 80121f8:	429d      	cmp	r5, r3
 80121fa:	461a      	mov	r2, r3
 80121fc:	d30a      	bcc.n	8012214 <quorem+0x100>
 80121fe:	613c      	str	r4, [r7, #16]
 8012200:	4630      	mov	r0, r6
 8012202:	b003      	add	sp, #12
 8012204:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012208:	6812      	ldr	r2, [r2, #0]
 801220a:	3b04      	subs	r3, #4
 801220c:	2a00      	cmp	r2, #0
 801220e:	d1ce      	bne.n	80121ae <quorem+0x9a>
 8012210:	3c01      	subs	r4, #1
 8012212:	e7c9      	b.n	80121a8 <quorem+0x94>
 8012214:	6812      	ldr	r2, [r2, #0]
 8012216:	3b04      	subs	r3, #4
 8012218:	2a00      	cmp	r2, #0
 801221a:	d1f0      	bne.n	80121fe <quorem+0xea>
 801221c:	3c01      	subs	r4, #1
 801221e:	e7eb      	b.n	80121f8 <quorem+0xe4>
 8012220:	2000      	movs	r0, #0
 8012222:	e7ee      	b.n	8012202 <quorem+0xee>
 8012224:	0000      	movs	r0, r0
	...

08012228 <_dtoa_r>:
 8012228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801222c:	ed2d 8b04 	vpush	{d8-d9}
 8012230:	69c5      	ldr	r5, [r0, #28]
 8012232:	b093      	sub	sp, #76	; 0x4c
 8012234:	ed8d 0b02 	vstr	d0, [sp, #8]
 8012238:	ec57 6b10 	vmov	r6, r7, d0
 801223c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012240:	9107      	str	r1, [sp, #28]
 8012242:	4604      	mov	r4, r0
 8012244:	920a      	str	r2, [sp, #40]	; 0x28
 8012246:	930d      	str	r3, [sp, #52]	; 0x34
 8012248:	b975      	cbnz	r5, 8012268 <_dtoa_r+0x40>
 801224a:	2010      	movs	r0, #16
 801224c:	f000 ff36 	bl	80130bc <malloc>
 8012250:	4602      	mov	r2, r0
 8012252:	61e0      	str	r0, [r4, #28]
 8012254:	b920      	cbnz	r0, 8012260 <_dtoa_r+0x38>
 8012256:	4bae      	ldr	r3, [pc, #696]	; (8012510 <_dtoa_r+0x2e8>)
 8012258:	21ef      	movs	r1, #239	; 0xef
 801225a:	48ae      	ldr	r0, [pc, #696]	; (8012514 <_dtoa_r+0x2ec>)
 801225c:	f001 fcee 	bl	8013c3c <__assert_func>
 8012260:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012264:	6005      	str	r5, [r0, #0]
 8012266:	60c5      	str	r5, [r0, #12]
 8012268:	69e3      	ldr	r3, [r4, #28]
 801226a:	6819      	ldr	r1, [r3, #0]
 801226c:	b151      	cbz	r1, 8012284 <_dtoa_r+0x5c>
 801226e:	685a      	ldr	r2, [r3, #4]
 8012270:	604a      	str	r2, [r1, #4]
 8012272:	2301      	movs	r3, #1
 8012274:	4093      	lsls	r3, r2
 8012276:	608b      	str	r3, [r1, #8]
 8012278:	4620      	mov	r0, r4
 801227a:	f001 f8c1 	bl	8013400 <_Bfree>
 801227e:	69e3      	ldr	r3, [r4, #28]
 8012280:	2200      	movs	r2, #0
 8012282:	601a      	str	r2, [r3, #0]
 8012284:	1e3b      	subs	r3, r7, #0
 8012286:	bfbb      	ittet	lt
 8012288:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801228c:	9303      	strlt	r3, [sp, #12]
 801228e:	2300      	movge	r3, #0
 8012290:	2201      	movlt	r2, #1
 8012292:	bfac      	ite	ge
 8012294:	f8c8 3000 	strge.w	r3, [r8]
 8012298:	f8c8 2000 	strlt.w	r2, [r8]
 801229c:	4b9e      	ldr	r3, [pc, #632]	; (8012518 <_dtoa_r+0x2f0>)
 801229e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80122a2:	ea33 0308 	bics.w	r3, r3, r8
 80122a6:	d11b      	bne.n	80122e0 <_dtoa_r+0xb8>
 80122a8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80122aa:	f242 730f 	movw	r3, #9999	; 0x270f
 80122ae:	6013      	str	r3, [r2, #0]
 80122b0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80122b4:	4333      	orrs	r3, r6
 80122b6:	f000 8593 	beq.w	8012de0 <_dtoa_r+0xbb8>
 80122ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122bc:	b963      	cbnz	r3, 80122d8 <_dtoa_r+0xb0>
 80122be:	4b97      	ldr	r3, [pc, #604]	; (801251c <_dtoa_r+0x2f4>)
 80122c0:	e027      	b.n	8012312 <_dtoa_r+0xea>
 80122c2:	4b97      	ldr	r3, [pc, #604]	; (8012520 <_dtoa_r+0x2f8>)
 80122c4:	9300      	str	r3, [sp, #0]
 80122c6:	3308      	adds	r3, #8
 80122c8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80122ca:	6013      	str	r3, [r2, #0]
 80122cc:	9800      	ldr	r0, [sp, #0]
 80122ce:	b013      	add	sp, #76	; 0x4c
 80122d0:	ecbd 8b04 	vpop	{d8-d9}
 80122d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80122d8:	4b90      	ldr	r3, [pc, #576]	; (801251c <_dtoa_r+0x2f4>)
 80122da:	9300      	str	r3, [sp, #0]
 80122dc:	3303      	adds	r3, #3
 80122de:	e7f3      	b.n	80122c8 <_dtoa_r+0xa0>
 80122e0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80122e4:	2200      	movs	r2, #0
 80122e6:	ec51 0b17 	vmov	r0, r1, d7
 80122ea:	eeb0 8a47 	vmov.f32	s16, s14
 80122ee:	eef0 8a67 	vmov.f32	s17, s15
 80122f2:	2300      	movs	r3, #0
 80122f4:	f7ee fbe8 	bl	8000ac8 <__aeabi_dcmpeq>
 80122f8:	4681      	mov	r9, r0
 80122fa:	b160      	cbz	r0, 8012316 <_dtoa_r+0xee>
 80122fc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80122fe:	2301      	movs	r3, #1
 8012300:	6013      	str	r3, [r2, #0]
 8012302:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012304:	2b00      	cmp	r3, #0
 8012306:	f000 8568 	beq.w	8012dda <_dtoa_r+0xbb2>
 801230a:	4b86      	ldr	r3, [pc, #536]	; (8012524 <_dtoa_r+0x2fc>)
 801230c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801230e:	6013      	str	r3, [r2, #0]
 8012310:	3b01      	subs	r3, #1
 8012312:	9300      	str	r3, [sp, #0]
 8012314:	e7da      	b.n	80122cc <_dtoa_r+0xa4>
 8012316:	aa10      	add	r2, sp, #64	; 0x40
 8012318:	a911      	add	r1, sp, #68	; 0x44
 801231a:	4620      	mov	r0, r4
 801231c:	eeb0 0a48 	vmov.f32	s0, s16
 8012320:	eef0 0a68 	vmov.f32	s1, s17
 8012324:	f001 fb4e 	bl	80139c4 <__d2b>
 8012328:	f3c8 550a 	ubfx	r5, r8, #20, #11
 801232c:	4682      	mov	sl, r0
 801232e:	2d00      	cmp	r5, #0
 8012330:	d07f      	beq.n	8012432 <_dtoa_r+0x20a>
 8012332:	ee18 3a90 	vmov	r3, s17
 8012336:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801233a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 801233e:	ec51 0b18 	vmov	r0, r1, d8
 8012342:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012346:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801234a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 801234e:	4619      	mov	r1, r3
 8012350:	2200      	movs	r2, #0
 8012352:	4b75      	ldr	r3, [pc, #468]	; (8012528 <_dtoa_r+0x300>)
 8012354:	f7ed ff98 	bl	8000288 <__aeabi_dsub>
 8012358:	a367      	add	r3, pc, #412	; (adr r3, 80124f8 <_dtoa_r+0x2d0>)
 801235a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801235e:	f7ee f94b 	bl	80005f8 <__aeabi_dmul>
 8012362:	a367      	add	r3, pc, #412	; (adr r3, 8012500 <_dtoa_r+0x2d8>)
 8012364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012368:	f7ed ff90 	bl	800028c <__adddf3>
 801236c:	4606      	mov	r6, r0
 801236e:	4628      	mov	r0, r5
 8012370:	460f      	mov	r7, r1
 8012372:	f7ee f8d7 	bl	8000524 <__aeabi_i2d>
 8012376:	a364      	add	r3, pc, #400	; (adr r3, 8012508 <_dtoa_r+0x2e0>)
 8012378:	e9d3 2300 	ldrd	r2, r3, [r3]
 801237c:	f7ee f93c 	bl	80005f8 <__aeabi_dmul>
 8012380:	4602      	mov	r2, r0
 8012382:	460b      	mov	r3, r1
 8012384:	4630      	mov	r0, r6
 8012386:	4639      	mov	r1, r7
 8012388:	f7ed ff80 	bl	800028c <__adddf3>
 801238c:	4606      	mov	r6, r0
 801238e:	460f      	mov	r7, r1
 8012390:	f7ee fbe2 	bl	8000b58 <__aeabi_d2iz>
 8012394:	2200      	movs	r2, #0
 8012396:	4683      	mov	fp, r0
 8012398:	2300      	movs	r3, #0
 801239a:	4630      	mov	r0, r6
 801239c:	4639      	mov	r1, r7
 801239e:	f7ee fb9d 	bl	8000adc <__aeabi_dcmplt>
 80123a2:	b148      	cbz	r0, 80123b8 <_dtoa_r+0x190>
 80123a4:	4658      	mov	r0, fp
 80123a6:	f7ee f8bd 	bl	8000524 <__aeabi_i2d>
 80123aa:	4632      	mov	r2, r6
 80123ac:	463b      	mov	r3, r7
 80123ae:	f7ee fb8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80123b2:	b908      	cbnz	r0, 80123b8 <_dtoa_r+0x190>
 80123b4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80123b8:	f1bb 0f16 	cmp.w	fp, #22
 80123bc:	d857      	bhi.n	801246e <_dtoa_r+0x246>
 80123be:	4b5b      	ldr	r3, [pc, #364]	; (801252c <_dtoa_r+0x304>)
 80123c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80123c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123c8:	ec51 0b18 	vmov	r0, r1, d8
 80123cc:	f7ee fb86 	bl	8000adc <__aeabi_dcmplt>
 80123d0:	2800      	cmp	r0, #0
 80123d2:	d04e      	beq.n	8012472 <_dtoa_r+0x24a>
 80123d4:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80123d8:	2300      	movs	r3, #0
 80123da:	930c      	str	r3, [sp, #48]	; 0x30
 80123dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80123de:	1b5b      	subs	r3, r3, r5
 80123e0:	1e5a      	subs	r2, r3, #1
 80123e2:	bf45      	ittet	mi
 80123e4:	f1c3 0301 	rsbmi	r3, r3, #1
 80123e8:	9305      	strmi	r3, [sp, #20]
 80123ea:	2300      	movpl	r3, #0
 80123ec:	2300      	movmi	r3, #0
 80123ee:	9206      	str	r2, [sp, #24]
 80123f0:	bf54      	ite	pl
 80123f2:	9305      	strpl	r3, [sp, #20]
 80123f4:	9306      	strmi	r3, [sp, #24]
 80123f6:	f1bb 0f00 	cmp.w	fp, #0
 80123fa:	db3c      	blt.n	8012476 <_dtoa_r+0x24e>
 80123fc:	9b06      	ldr	r3, [sp, #24]
 80123fe:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8012402:	445b      	add	r3, fp
 8012404:	9306      	str	r3, [sp, #24]
 8012406:	2300      	movs	r3, #0
 8012408:	9308      	str	r3, [sp, #32]
 801240a:	9b07      	ldr	r3, [sp, #28]
 801240c:	2b09      	cmp	r3, #9
 801240e:	d868      	bhi.n	80124e2 <_dtoa_r+0x2ba>
 8012410:	2b05      	cmp	r3, #5
 8012412:	bfc4      	itt	gt
 8012414:	3b04      	subgt	r3, #4
 8012416:	9307      	strgt	r3, [sp, #28]
 8012418:	9b07      	ldr	r3, [sp, #28]
 801241a:	f1a3 0302 	sub.w	r3, r3, #2
 801241e:	bfcc      	ite	gt
 8012420:	2500      	movgt	r5, #0
 8012422:	2501      	movle	r5, #1
 8012424:	2b03      	cmp	r3, #3
 8012426:	f200 8085 	bhi.w	8012534 <_dtoa_r+0x30c>
 801242a:	e8df f003 	tbb	[pc, r3]
 801242e:	3b2e      	.short	0x3b2e
 8012430:	5839      	.short	0x5839
 8012432:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012436:	441d      	add	r5, r3
 8012438:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801243c:	2b20      	cmp	r3, #32
 801243e:	bfc1      	itttt	gt
 8012440:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012444:	fa08 f803 	lslgt.w	r8, r8, r3
 8012448:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 801244c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8012450:	bfd6      	itet	le
 8012452:	f1c3 0320 	rsble	r3, r3, #32
 8012456:	ea48 0003 	orrgt.w	r0, r8, r3
 801245a:	fa06 f003 	lslle.w	r0, r6, r3
 801245e:	f7ee f851 	bl	8000504 <__aeabi_ui2d>
 8012462:	2201      	movs	r2, #1
 8012464:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8012468:	3d01      	subs	r5, #1
 801246a:	920e      	str	r2, [sp, #56]	; 0x38
 801246c:	e76f      	b.n	801234e <_dtoa_r+0x126>
 801246e:	2301      	movs	r3, #1
 8012470:	e7b3      	b.n	80123da <_dtoa_r+0x1b2>
 8012472:	900c      	str	r0, [sp, #48]	; 0x30
 8012474:	e7b2      	b.n	80123dc <_dtoa_r+0x1b4>
 8012476:	9b05      	ldr	r3, [sp, #20]
 8012478:	eba3 030b 	sub.w	r3, r3, fp
 801247c:	9305      	str	r3, [sp, #20]
 801247e:	f1cb 0300 	rsb	r3, fp, #0
 8012482:	9308      	str	r3, [sp, #32]
 8012484:	2300      	movs	r3, #0
 8012486:	930b      	str	r3, [sp, #44]	; 0x2c
 8012488:	e7bf      	b.n	801240a <_dtoa_r+0x1e2>
 801248a:	2300      	movs	r3, #0
 801248c:	9309      	str	r3, [sp, #36]	; 0x24
 801248e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012490:	2b00      	cmp	r3, #0
 8012492:	dc52      	bgt.n	801253a <_dtoa_r+0x312>
 8012494:	2301      	movs	r3, #1
 8012496:	9301      	str	r3, [sp, #4]
 8012498:	9304      	str	r3, [sp, #16]
 801249a:	461a      	mov	r2, r3
 801249c:	920a      	str	r2, [sp, #40]	; 0x28
 801249e:	e00b      	b.n	80124b8 <_dtoa_r+0x290>
 80124a0:	2301      	movs	r3, #1
 80124a2:	e7f3      	b.n	801248c <_dtoa_r+0x264>
 80124a4:	2300      	movs	r3, #0
 80124a6:	9309      	str	r3, [sp, #36]	; 0x24
 80124a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124aa:	445b      	add	r3, fp
 80124ac:	9301      	str	r3, [sp, #4]
 80124ae:	3301      	adds	r3, #1
 80124b0:	2b01      	cmp	r3, #1
 80124b2:	9304      	str	r3, [sp, #16]
 80124b4:	bfb8      	it	lt
 80124b6:	2301      	movlt	r3, #1
 80124b8:	69e0      	ldr	r0, [r4, #28]
 80124ba:	2100      	movs	r1, #0
 80124bc:	2204      	movs	r2, #4
 80124be:	f102 0614 	add.w	r6, r2, #20
 80124c2:	429e      	cmp	r6, r3
 80124c4:	d93d      	bls.n	8012542 <_dtoa_r+0x31a>
 80124c6:	6041      	str	r1, [r0, #4]
 80124c8:	4620      	mov	r0, r4
 80124ca:	f000 ff59 	bl	8013380 <_Balloc>
 80124ce:	9000      	str	r0, [sp, #0]
 80124d0:	2800      	cmp	r0, #0
 80124d2:	d139      	bne.n	8012548 <_dtoa_r+0x320>
 80124d4:	4b16      	ldr	r3, [pc, #88]	; (8012530 <_dtoa_r+0x308>)
 80124d6:	4602      	mov	r2, r0
 80124d8:	f240 11af 	movw	r1, #431	; 0x1af
 80124dc:	e6bd      	b.n	801225a <_dtoa_r+0x32>
 80124de:	2301      	movs	r3, #1
 80124e0:	e7e1      	b.n	80124a6 <_dtoa_r+0x27e>
 80124e2:	2501      	movs	r5, #1
 80124e4:	2300      	movs	r3, #0
 80124e6:	9307      	str	r3, [sp, #28]
 80124e8:	9509      	str	r5, [sp, #36]	; 0x24
 80124ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80124ee:	9301      	str	r3, [sp, #4]
 80124f0:	9304      	str	r3, [sp, #16]
 80124f2:	2200      	movs	r2, #0
 80124f4:	2312      	movs	r3, #18
 80124f6:	e7d1      	b.n	801249c <_dtoa_r+0x274>
 80124f8:	636f4361 	.word	0x636f4361
 80124fc:	3fd287a7 	.word	0x3fd287a7
 8012500:	8b60c8b3 	.word	0x8b60c8b3
 8012504:	3fc68a28 	.word	0x3fc68a28
 8012508:	509f79fb 	.word	0x509f79fb
 801250c:	3fd34413 	.word	0x3fd34413
 8012510:	080158e5 	.word	0x080158e5
 8012514:	080158fc 	.word	0x080158fc
 8012518:	7ff00000 	.word	0x7ff00000
 801251c:	080158e1 	.word	0x080158e1
 8012520:	080158d8 	.word	0x080158d8
 8012524:	080158b5 	.word	0x080158b5
 8012528:	3ff80000 	.word	0x3ff80000
 801252c:	080159f8 	.word	0x080159f8
 8012530:	08015954 	.word	0x08015954
 8012534:	2301      	movs	r3, #1
 8012536:	9309      	str	r3, [sp, #36]	; 0x24
 8012538:	e7d7      	b.n	80124ea <_dtoa_r+0x2c2>
 801253a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801253c:	9301      	str	r3, [sp, #4]
 801253e:	9304      	str	r3, [sp, #16]
 8012540:	e7ba      	b.n	80124b8 <_dtoa_r+0x290>
 8012542:	3101      	adds	r1, #1
 8012544:	0052      	lsls	r2, r2, #1
 8012546:	e7ba      	b.n	80124be <_dtoa_r+0x296>
 8012548:	69e3      	ldr	r3, [r4, #28]
 801254a:	9a00      	ldr	r2, [sp, #0]
 801254c:	601a      	str	r2, [r3, #0]
 801254e:	9b04      	ldr	r3, [sp, #16]
 8012550:	2b0e      	cmp	r3, #14
 8012552:	f200 80a8 	bhi.w	80126a6 <_dtoa_r+0x47e>
 8012556:	2d00      	cmp	r5, #0
 8012558:	f000 80a5 	beq.w	80126a6 <_dtoa_r+0x47e>
 801255c:	f1bb 0f00 	cmp.w	fp, #0
 8012560:	dd38      	ble.n	80125d4 <_dtoa_r+0x3ac>
 8012562:	4bc0      	ldr	r3, [pc, #768]	; (8012864 <_dtoa_r+0x63c>)
 8012564:	f00b 020f 	and.w	r2, fp, #15
 8012568:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801256c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8012570:	e9d3 6700 	ldrd	r6, r7, [r3]
 8012574:	ea4f 182b 	mov.w	r8, fp, asr #4
 8012578:	d019      	beq.n	80125ae <_dtoa_r+0x386>
 801257a:	4bbb      	ldr	r3, [pc, #748]	; (8012868 <_dtoa_r+0x640>)
 801257c:	ec51 0b18 	vmov	r0, r1, d8
 8012580:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012584:	f7ee f962 	bl	800084c <__aeabi_ddiv>
 8012588:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801258c:	f008 080f 	and.w	r8, r8, #15
 8012590:	2503      	movs	r5, #3
 8012592:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8012868 <_dtoa_r+0x640>
 8012596:	f1b8 0f00 	cmp.w	r8, #0
 801259a:	d10a      	bne.n	80125b2 <_dtoa_r+0x38a>
 801259c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80125a0:	4632      	mov	r2, r6
 80125a2:	463b      	mov	r3, r7
 80125a4:	f7ee f952 	bl	800084c <__aeabi_ddiv>
 80125a8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125ac:	e02b      	b.n	8012606 <_dtoa_r+0x3de>
 80125ae:	2502      	movs	r5, #2
 80125b0:	e7ef      	b.n	8012592 <_dtoa_r+0x36a>
 80125b2:	f018 0f01 	tst.w	r8, #1
 80125b6:	d008      	beq.n	80125ca <_dtoa_r+0x3a2>
 80125b8:	4630      	mov	r0, r6
 80125ba:	4639      	mov	r1, r7
 80125bc:	e9d9 2300 	ldrd	r2, r3, [r9]
 80125c0:	f7ee f81a 	bl	80005f8 <__aeabi_dmul>
 80125c4:	3501      	adds	r5, #1
 80125c6:	4606      	mov	r6, r0
 80125c8:	460f      	mov	r7, r1
 80125ca:	ea4f 0868 	mov.w	r8, r8, asr #1
 80125ce:	f109 0908 	add.w	r9, r9, #8
 80125d2:	e7e0      	b.n	8012596 <_dtoa_r+0x36e>
 80125d4:	f000 809f 	beq.w	8012716 <_dtoa_r+0x4ee>
 80125d8:	f1cb 0600 	rsb	r6, fp, #0
 80125dc:	4ba1      	ldr	r3, [pc, #644]	; (8012864 <_dtoa_r+0x63c>)
 80125de:	4fa2      	ldr	r7, [pc, #648]	; (8012868 <_dtoa_r+0x640>)
 80125e0:	f006 020f 	and.w	r2, r6, #15
 80125e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80125e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125ec:	ec51 0b18 	vmov	r0, r1, d8
 80125f0:	f7ee f802 	bl	80005f8 <__aeabi_dmul>
 80125f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80125f8:	1136      	asrs	r6, r6, #4
 80125fa:	2300      	movs	r3, #0
 80125fc:	2502      	movs	r5, #2
 80125fe:	2e00      	cmp	r6, #0
 8012600:	d17e      	bne.n	8012700 <_dtoa_r+0x4d8>
 8012602:	2b00      	cmp	r3, #0
 8012604:	d1d0      	bne.n	80125a8 <_dtoa_r+0x380>
 8012606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012608:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801260c:	2b00      	cmp	r3, #0
 801260e:	f000 8084 	beq.w	801271a <_dtoa_r+0x4f2>
 8012612:	4b96      	ldr	r3, [pc, #600]	; (801286c <_dtoa_r+0x644>)
 8012614:	2200      	movs	r2, #0
 8012616:	4640      	mov	r0, r8
 8012618:	4649      	mov	r1, r9
 801261a:	f7ee fa5f 	bl	8000adc <__aeabi_dcmplt>
 801261e:	2800      	cmp	r0, #0
 8012620:	d07b      	beq.n	801271a <_dtoa_r+0x4f2>
 8012622:	9b04      	ldr	r3, [sp, #16]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d078      	beq.n	801271a <_dtoa_r+0x4f2>
 8012628:	9b01      	ldr	r3, [sp, #4]
 801262a:	2b00      	cmp	r3, #0
 801262c:	dd39      	ble.n	80126a2 <_dtoa_r+0x47a>
 801262e:	4b90      	ldr	r3, [pc, #576]	; (8012870 <_dtoa_r+0x648>)
 8012630:	2200      	movs	r2, #0
 8012632:	4640      	mov	r0, r8
 8012634:	4649      	mov	r1, r9
 8012636:	f7ed ffdf 	bl	80005f8 <__aeabi_dmul>
 801263a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801263e:	9e01      	ldr	r6, [sp, #4]
 8012640:	f10b 37ff 	add.w	r7, fp, #4294967295	; 0xffffffff
 8012644:	3501      	adds	r5, #1
 8012646:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801264a:	4628      	mov	r0, r5
 801264c:	f7ed ff6a 	bl	8000524 <__aeabi_i2d>
 8012650:	4642      	mov	r2, r8
 8012652:	464b      	mov	r3, r9
 8012654:	f7ed ffd0 	bl	80005f8 <__aeabi_dmul>
 8012658:	4b86      	ldr	r3, [pc, #536]	; (8012874 <_dtoa_r+0x64c>)
 801265a:	2200      	movs	r2, #0
 801265c:	f7ed fe16 	bl	800028c <__adddf3>
 8012660:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8012664:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012668:	9303      	str	r3, [sp, #12]
 801266a:	2e00      	cmp	r6, #0
 801266c:	d158      	bne.n	8012720 <_dtoa_r+0x4f8>
 801266e:	4b82      	ldr	r3, [pc, #520]	; (8012878 <_dtoa_r+0x650>)
 8012670:	2200      	movs	r2, #0
 8012672:	4640      	mov	r0, r8
 8012674:	4649      	mov	r1, r9
 8012676:	f7ed fe07 	bl	8000288 <__aeabi_dsub>
 801267a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801267e:	4680      	mov	r8, r0
 8012680:	4689      	mov	r9, r1
 8012682:	f7ee fa49 	bl	8000b18 <__aeabi_dcmpgt>
 8012686:	2800      	cmp	r0, #0
 8012688:	f040 8296 	bne.w	8012bb8 <_dtoa_r+0x990>
 801268c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8012690:	4640      	mov	r0, r8
 8012692:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012696:	4649      	mov	r1, r9
 8012698:	f7ee fa20 	bl	8000adc <__aeabi_dcmplt>
 801269c:	2800      	cmp	r0, #0
 801269e:	f040 8289 	bne.w	8012bb4 <_dtoa_r+0x98c>
 80126a2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80126a6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	f2c0 814e 	blt.w	801294a <_dtoa_r+0x722>
 80126ae:	f1bb 0f0e 	cmp.w	fp, #14
 80126b2:	f300 814a 	bgt.w	801294a <_dtoa_r+0x722>
 80126b6:	4b6b      	ldr	r3, [pc, #428]	; (8012864 <_dtoa_r+0x63c>)
 80126b8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80126bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80126c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126c2:	2b00      	cmp	r3, #0
 80126c4:	f280 80dc 	bge.w	8012880 <_dtoa_r+0x658>
 80126c8:	9b04      	ldr	r3, [sp, #16]
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	f300 80d8 	bgt.w	8012880 <_dtoa_r+0x658>
 80126d0:	f040 826f 	bne.w	8012bb2 <_dtoa_r+0x98a>
 80126d4:	4b68      	ldr	r3, [pc, #416]	; (8012878 <_dtoa_r+0x650>)
 80126d6:	2200      	movs	r2, #0
 80126d8:	4640      	mov	r0, r8
 80126da:	4649      	mov	r1, r9
 80126dc:	f7ed ff8c 	bl	80005f8 <__aeabi_dmul>
 80126e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80126e4:	f7ee fa0e 	bl	8000b04 <__aeabi_dcmpge>
 80126e8:	9e04      	ldr	r6, [sp, #16]
 80126ea:	4637      	mov	r7, r6
 80126ec:	2800      	cmp	r0, #0
 80126ee:	f040 8245 	bne.w	8012b7c <_dtoa_r+0x954>
 80126f2:	9d00      	ldr	r5, [sp, #0]
 80126f4:	2331      	movs	r3, #49	; 0x31
 80126f6:	f805 3b01 	strb.w	r3, [r5], #1
 80126fa:	f10b 0b01 	add.w	fp, fp, #1
 80126fe:	e241      	b.n	8012b84 <_dtoa_r+0x95c>
 8012700:	07f2      	lsls	r2, r6, #31
 8012702:	d505      	bpl.n	8012710 <_dtoa_r+0x4e8>
 8012704:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012708:	f7ed ff76 	bl	80005f8 <__aeabi_dmul>
 801270c:	3501      	adds	r5, #1
 801270e:	2301      	movs	r3, #1
 8012710:	1076      	asrs	r6, r6, #1
 8012712:	3708      	adds	r7, #8
 8012714:	e773      	b.n	80125fe <_dtoa_r+0x3d6>
 8012716:	2502      	movs	r5, #2
 8012718:	e775      	b.n	8012606 <_dtoa_r+0x3de>
 801271a:	9e04      	ldr	r6, [sp, #16]
 801271c:	465f      	mov	r7, fp
 801271e:	e792      	b.n	8012646 <_dtoa_r+0x41e>
 8012720:	9900      	ldr	r1, [sp, #0]
 8012722:	4b50      	ldr	r3, [pc, #320]	; (8012864 <_dtoa_r+0x63c>)
 8012724:	ed9d 7b02 	vldr	d7, [sp, #8]
 8012728:	4431      	add	r1, r6
 801272a:	9102      	str	r1, [sp, #8]
 801272c:	9909      	ldr	r1, [sp, #36]	; 0x24
 801272e:	eeb0 9a47 	vmov.f32	s18, s14
 8012732:	eef0 9a67 	vmov.f32	s19, s15
 8012736:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801273a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801273e:	2900      	cmp	r1, #0
 8012740:	d044      	beq.n	80127cc <_dtoa_r+0x5a4>
 8012742:	494e      	ldr	r1, [pc, #312]	; (801287c <_dtoa_r+0x654>)
 8012744:	2000      	movs	r0, #0
 8012746:	f7ee f881 	bl	800084c <__aeabi_ddiv>
 801274a:	ec53 2b19 	vmov	r2, r3, d9
 801274e:	f7ed fd9b 	bl	8000288 <__aeabi_dsub>
 8012752:	9d00      	ldr	r5, [sp, #0]
 8012754:	ec41 0b19 	vmov	d9, r0, r1
 8012758:	4649      	mov	r1, r9
 801275a:	4640      	mov	r0, r8
 801275c:	f7ee f9fc 	bl	8000b58 <__aeabi_d2iz>
 8012760:	4606      	mov	r6, r0
 8012762:	f7ed fedf 	bl	8000524 <__aeabi_i2d>
 8012766:	4602      	mov	r2, r0
 8012768:	460b      	mov	r3, r1
 801276a:	4640      	mov	r0, r8
 801276c:	4649      	mov	r1, r9
 801276e:	f7ed fd8b 	bl	8000288 <__aeabi_dsub>
 8012772:	3630      	adds	r6, #48	; 0x30
 8012774:	f805 6b01 	strb.w	r6, [r5], #1
 8012778:	ec53 2b19 	vmov	r2, r3, d9
 801277c:	4680      	mov	r8, r0
 801277e:	4689      	mov	r9, r1
 8012780:	f7ee f9ac 	bl	8000adc <__aeabi_dcmplt>
 8012784:	2800      	cmp	r0, #0
 8012786:	d164      	bne.n	8012852 <_dtoa_r+0x62a>
 8012788:	4642      	mov	r2, r8
 801278a:	464b      	mov	r3, r9
 801278c:	4937      	ldr	r1, [pc, #220]	; (801286c <_dtoa_r+0x644>)
 801278e:	2000      	movs	r0, #0
 8012790:	f7ed fd7a 	bl	8000288 <__aeabi_dsub>
 8012794:	ec53 2b19 	vmov	r2, r3, d9
 8012798:	f7ee f9a0 	bl	8000adc <__aeabi_dcmplt>
 801279c:	2800      	cmp	r0, #0
 801279e:	f040 80b6 	bne.w	801290e <_dtoa_r+0x6e6>
 80127a2:	9b02      	ldr	r3, [sp, #8]
 80127a4:	429d      	cmp	r5, r3
 80127a6:	f43f af7c 	beq.w	80126a2 <_dtoa_r+0x47a>
 80127aa:	4b31      	ldr	r3, [pc, #196]	; (8012870 <_dtoa_r+0x648>)
 80127ac:	ec51 0b19 	vmov	r0, r1, d9
 80127b0:	2200      	movs	r2, #0
 80127b2:	f7ed ff21 	bl	80005f8 <__aeabi_dmul>
 80127b6:	4b2e      	ldr	r3, [pc, #184]	; (8012870 <_dtoa_r+0x648>)
 80127b8:	ec41 0b19 	vmov	d9, r0, r1
 80127bc:	2200      	movs	r2, #0
 80127be:	4640      	mov	r0, r8
 80127c0:	4649      	mov	r1, r9
 80127c2:	f7ed ff19 	bl	80005f8 <__aeabi_dmul>
 80127c6:	4680      	mov	r8, r0
 80127c8:	4689      	mov	r9, r1
 80127ca:	e7c5      	b.n	8012758 <_dtoa_r+0x530>
 80127cc:	ec51 0b17 	vmov	r0, r1, d7
 80127d0:	f7ed ff12 	bl	80005f8 <__aeabi_dmul>
 80127d4:	9b02      	ldr	r3, [sp, #8]
 80127d6:	9d00      	ldr	r5, [sp, #0]
 80127d8:	930f      	str	r3, [sp, #60]	; 0x3c
 80127da:	ec41 0b19 	vmov	d9, r0, r1
 80127de:	4649      	mov	r1, r9
 80127e0:	4640      	mov	r0, r8
 80127e2:	f7ee f9b9 	bl	8000b58 <__aeabi_d2iz>
 80127e6:	4606      	mov	r6, r0
 80127e8:	f7ed fe9c 	bl	8000524 <__aeabi_i2d>
 80127ec:	3630      	adds	r6, #48	; 0x30
 80127ee:	4602      	mov	r2, r0
 80127f0:	460b      	mov	r3, r1
 80127f2:	4640      	mov	r0, r8
 80127f4:	4649      	mov	r1, r9
 80127f6:	f7ed fd47 	bl	8000288 <__aeabi_dsub>
 80127fa:	f805 6b01 	strb.w	r6, [r5], #1
 80127fe:	9b02      	ldr	r3, [sp, #8]
 8012800:	429d      	cmp	r5, r3
 8012802:	4680      	mov	r8, r0
 8012804:	4689      	mov	r9, r1
 8012806:	f04f 0200 	mov.w	r2, #0
 801280a:	d124      	bne.n	8012856 <_dtoa_r+0x62e>
 801280c:	4b1b      	ldr	r3, [pc, #108]	; (801287c <_dtoa_r+0x654>)
 801280e:	ec51 0b19 	vmov	r0, r1, d9
 8012812:	f7ed fd3b 	bl	800028c <__adddf3>
 8012816:	4602      	mov	r2, r0
 8012818:	460b      	mov	r3, r1
 801281a:	4640      	mov	r0, r8
 801281c:	4649      	mov	r1, r9
 801281e:	f7ee f97b 	bl	8000b18 <__aeabi_dcmpgt>
 8012822:	2800      	cmp	r0, #0
 8012824:	d173      	bne.n	801290e <_dtoa_r+0x6e6>
 8012826:	ec53 2b19 	vmov	r2, r3, d9
 801282a:	4914      	ldr	r1, [pc, #80]	; (801287c <_dtoa_r+0x654>)
 801282c:	2000      	movs	r0, #0
 801282e:	f7ed fd2b 	bl	8000288 <__aeabi_dsub>
 8012832:	4602      	mov	r2, r0
 8012834:	460b      	mov	r3, r1
 8012836:	4640      	mov	r0, r8
 8012838:	4649      	mov	r1, r9
 801283a:	f7ee f94f 	bl	8000adc <__aeabi_dcmplt>
 801283e:	2800      	cmp	r0, #0
 8012840:	f43f af2f 	beq.w	80126a2 <_dtoa_r+0x47a>
 8012844:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012846:	1e6b      	subs	r3, r5, #1
 8012848:	930f      	str	r3, [sp, #60]	; 0x3c
 801284a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801284e:	2b30      	cmp	r3, #48	; 0x30
 8012850:	d0f8      	beq.n	8012844 <_dtoa_r+0x61c>
 8012852:	46bb      	mov	fp, r7
 8012854:	e04a      	b.n	80128ec <_dtoa_r+0x6c4>
 8012856:	4b06      	ldr	r3, [pc, #24]	; (8012870 <_dtoa_r+0x648>)
 8012858:	f7ed fece 	bl	80005f8 <__aeabi_dmul>
 801285c:	4680      	mov	r8, r0
 801285e:	4689      	mov	r9, r1
 8012860:	e7bd      	b.n	80127de <_dtoa_r+0x5b6>
 8012862:	bf00      	nop
 8012864:	080159f8 	.word	0x080159f8
 8012868:	080159d0 	.word	0x080159d0
 801286c:	3ff00000 	.word	0x3ff00000
 8012870:	40240000 	.word	0x40240000
 8012874:	401c0000 	.word	0x401c0000
 8012878:	40140000 	.word	0x40140000
 801287c:	3fe00000 	.word	0x3fe00000
 8012880:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8012884:	9d00      	ldr	r5, [sp, #0]
 8012886:	4642      	mov	r2, r8
 8012888:	464b      	mov	r3, r9
 801288a:	4630      	mov	r0, r6
 801288c:	4639      	mov	r1, r7
 801288e:	f7ed ffdd 	bl	800084c <__aeabi_ddiv>
 8012892:	f7ee f961 	bl	8000b58 <__aeabi_d2iz>
 8012896:	9001      	str	r0, [sp, #4]
 8012898:	f7ed fe44 	bl	8000524 <__aeabi_i2d>
 801289c:	4642      	mov	r2, r8
 801289e:	464b      	mov	r3, r9
 80128a0:	f7ed feaa 	bl	80005f8 <__aeabi_dmul>
 80128a4:	4602      	mov	r2, r0
 80128a6:	460b      	mov	r3, r1
 80128a8:	4630      	mov	r0, r6
 80128aa:	4639      	mov	r1, r7
 80128ac:	f7ed fcec 	bl	8000288 <__aeabi_dsub>
 80128b0:	9e01      	ldr	r6, [sp, #4]
 80128b2:	9f04      	ldr	r7, [sp, #16]
 80128b4:	3630      	adds	r6, #48	; 0x30
 80128b6:	f805 6b01 	strb.w	r6, [r5], #1
 80128ba:	9e00      	ldr	r6, [sp, #0]
 80128bc:	1bae      	subs	r6, r5, r6
 80128be:	42b7      	cmp	r7, r6
 80128c0:	4602      	mov	r2, r0
 80128c2:	460b      	mov	r3, r1
 80128c4:	d134      	bne.n	8012930 <_dtoa_r+0x708>
 80128c6:	f7ed fce1 	bl	800028c <__adddf3>
 80128ca:	4642      	mov	r2, r8
 80128cc:	464b      	mov	r3, r9
 80128ce:	4606      	mov	r6, r0
 80128d0:	460f      	mov	r7, r1
 80128d2:	f7ee f921 	bl	8000b18 <__aeabi_dcmpgt>
 80128d6:	b9c8      	cbnz	r0, 801290c <_dtoa_r+0x6e4>
 80128d8:	4642      	mov	r2, r8
 80128da:	464b      	mov	r3, r9
 80128dc:	4630      	mov	r0, r6
 80128de:	4639      	mov	r1, r7
 80128e0:	f7ee f8f2 	bl	8000ac8 <__aeabi_dcmpeq>
 80128e4:	b110      	cbz	r0, 80128ec <_dtoa_r+0x6c4>
 80128e6:	9b01      	ldr	r3, [sp, #4]
 80128e8:	07db      	lsls	r3, r3, #31
 80128ea:	d40f      	bmi.n	801290c <_dtoa_r+0x6e4>
 80128ec:	4651      	mov	r1, sl
 80128ee:	4620      	mov	r0, r4
 80128f0:	f000 fd86 	bl	8013400 <_Bfree>
 80128f4:	2300      	movs	r3, #0
 80128f6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80128f8:	702b      	strb	r3, [r5, #0]
 80128fa:	f10b 0301 	add.w	r3, fp, #1
 80128fe:	6013      	str	r3, [r2, #0]
 8012900:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012902:	2b00      	cmp	r3, #0
 8012904:	f43f ace2 	beq.w	80122cc <_dtoa_r+0xa4>
 8012908:	601d      	str	r5, [r3, #0]
 801290a:	e4df      	b.n	80122cc <_dtoa_r+0xa4>
 801290c:	465f      	mov	r7, fp
 801290e:	462b      	mov	r3, r5
 8012910:	461d      	mov	r5, r3
 8012912:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012916:	2a39      	cmp	r2, #57	; 0x39
 8012918:	d106      	bne.n	8012928 <_dtoa_r+0x700>
 801291a:	9a00      	ldr	r2, [sp, #0]
 801291c:	429a      	cmp	r2, r3
 801291e:	d1f7      	bne.n	8012910 <_dtoa_r+0x6e8>
 8012920:	9900      	ldr	r1, [sp, #0]
 8012922:	2230      	movs	r2, #48	; 0x30
 8012924:	3701      	adds	r7, #1
 8012926:	700a      	strb	r2, [r1, #0]
 8012928:	781a      	ldrb	r2, [r3, #0]
 801292a:	3201      	adds	r2, #1
 801292c:	701a      	strb	r2, [r3, #0]
 801292e:	e790      	b.n	8012852 <_dtoa_r+0x62a>
 8012930:	4ba3      	ldr	r3, [pc, #652]	; (8012bc0 <_dtoa_r+0x998>)
 8012932:	2200      	movs	r2, #0
 8012934:	f7ed fe60 	bl	80005f8 <__aeabi_dmul>
 8012938:	2200      	movs	r2, #0
 801293a:	2300      	movs	r3, #0
 801293c:	4606      	mov	r6, r0
 801293e:	460f      	mov	r7, r1
 8012940:	f7ee f8c2 	bl	8000ac8 <__aeabi_dcmpeq>
 8012944:	2800      	cmp	r0, #0
 8012946:	d09e      	beq.n	8012886 <_dtoa_r+0x65e>
 8012948:	e7d0      	b.n	80128ec <_dtoa_r+0x6c4>
 801294a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801294c:	2a00      	cmp	r2, #0
 801294e:	f000 80ca 	beq.w	8012ae6 <_dtoa_r+0x8be>
 8012952:	9a07      	ldr	r2, [sp, #28]
 8012954:	2a01      	cmp	r2, #1
 8012956:	f300 80ad 	bgt.w	8012ab4 <_dtoa_r+0x88c>
 801295a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801295c:	2a00      	cmp	r2, #0
 801295e:	f000 80a5 	beq.w	8012aac <_dtoa_r+0x884>
 8012962:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8012966:	9e08      	ldr	r6, [sp, #32]
 8012968:	9d05      	ldr	r5, [sp, #20]
 801296a:	9a05      	ldr	r2, [sp, #20]
 801296c:	441a      	add	r2, r3
 801296e:	9205      	str	r2, [sp, #20]
 8012970:	9a06      	ldr	r2, [sp, #24]
 8012972:	2101      	movs	r1, #1
 8012974:	441a      	add	r2, r3
 8012976:	4620      	mov	r0, r4
 8012978:	9206      	str	r2, [sp, #24]
 801297a:	f000 fdf7 	bl	801356c <__i2b>
 801297e:	4607      	mov	r7, r0
 8012980:	b165      	cbz	r5, 801299c <_dtoa_r+0x774>
 8012982:	9b06      	ldr	r3, [sp, #24]
 8012984:	2b00      	cmp	r3, #0
 8012986:	dd09      	ble.n	801299c <_dtoa_r+0x774>
 8012988:	42ab      	cmp	r3, r5
 801298a:	9a05      	ldr	r2, [sp, #20]
 801298c:	bfa8      	it	ge
 801298e:	462b      	movge	r3, r5
 8012990:	1ad2      	subs	r2, r2, r3
 8012992:	9205      	str	r2, [sp, #20]
 8012994:	9a06      	ldr	r2, [sp, #24]
 8012996:	1aed      	subs	r5, r5, r3
 8012998:	1ad3      	subs	r3, r2, r3
 801299a:	9306      	str	r3, [sp, #24]
 801299c:	9b08      	ldr	r3, [sp, #32]
 801299e:	b1f3      	cbz	r3, 80129de <_dtoa_r+0x7b6>
 80129a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80129a2:	2b00      	cmp	r3, #0
 80129a4:	f000 80a3 	beq.w	8012aee <_dtoa_r+0x8c6>
 80129a8:	2e00      	cmp	r6, #0
 80129aa:	dd10      	ble.n	80129ce <_dtoa_r+0x7a6>
 80129ac:	4639      	mov	r1, r7
 80129ae:	4632      	mov	r2, r6
 80129b0:	4620      	mov	r0, r4
 80129b2:	f000 fe9b 	bl	80136ec <__pow5mult>
 80129b6:	4652      	mov	r2, sl
 80129b8:	4601      	mov	r1, r0
 80129ba:	4607      	mov	r7, r0
 80129bc:	4620      	mov	r0, r4
 80129be:	f000 fdeb 	bl	8013598 <__multiply>
 80129c2:	4651      	mov	r1, sl
 80129c4:	4680      	mov	r8, r0
 80129c6:	4620      	mov	r0, r4
 80129c8:	f000 fd1a 	bl	8013400 <_Bfree>
 80129cc:	46c2      	mov	sl, r8
 80129ce:	9b08      	ldr	r3, [sp, #32]
 80129d0:	1b9a      	subs	r2, r3, r6
 80129d2:	d004      	beq.n	80129de <_dtoa_r+0x7b6>
 80129d4:	4651      	mov	r1, sl
 80129d6:	4620      	mov	r0, r4
 80129d8:	f000 fe88 	bl	80136ec <__pow5mult>
 80129dc:	4682      	mov	sl, r0
 80129de:	2101      	movs	r1, #1
 80129e0:	4620      	mov	r0, r4
 80129e2:	f000 fdc3 	bl	801356c <__i2b>
 80129e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	4606      	mov	r6, r0
 80129ec:	f340 8081 	ble.w	8012af2 <_dtoa_r+0x8ca>
 80129f0:	461a      	mov	r2, r3
 80129f2:	4601      	mov	r1, r0
 80129f4:	4620      	mov	r0, r4
 80129f6:	f000 fe79 	bl	80136ec <__pow5mult>
 80129fa:	9b07      	ldr	r3, [sp, #28]
 80129fc:	2b01      	cmp	r3, #1
 80129fe:	4606      	mov	r6, r0
 8012a00:	dd7a      	ble.n	8012af8 <_dtoa_r+0x8d0>
 8012a02:	f04f 0800 	mov.w	r8, #0
 8012a06:	6933      	ldr	r3, [r6, #16]
 8012a08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8012a0c:	6918      	ldr	r0, [r3, #16]
 8012a0e:	f000 fd5f 	bl	80134d0 <__hi0bits>
 8012a12:	f1c0 0020 	rsb	r0, r0, #32
 8012a16:	9b06      	ldr	r3, [sp, #24]
 8012a18:	4418      	add	r0, r3
 8012a1a:	f010 001f 	ands.w	r0, r0, #31
 8012a1e:	f000 8094 	beq.w	8012b4a <_dtoa_r+0x922>
 8012a22:	f1c0 0320 	rsb	r3, r0, #32
 8012a26:	2b04      	cmp	r3, #4
 8012a28:	f340 8085 	ble.w	8012b36 <_dtoa_r+0x90e>
 8012a2c:	9b05      	ldr	r3, [sp, #20]
 8012a2e:	f1c0 001c 	rsb	r0, r0, #28
 8012a32:	4403      	add	r3, r0
 8012a34:	9305      	str	r3, [sp, #20]
 8012a36:	9b06      	ldr	r3, [sp, #24]
 8012a38:	4403      	add	r3, r0
 8012a3a:	4405      	add	r5, r0
 8012a3c:	9306      	str	r3, [sp, #24]
 8012a3e:	9b05      	ldr	r3, [sp, #20]
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	dd05      	ble.n	8012a50 <_dtoa_r+0x828>
 8012a44:	4651      	mov	r1, sl
 8012a46:	461a      	mov	r2, r3
 8012a48:	4620      	mov	r0, r4
 8012a4a:	f000 fea9 	bl	80137a0 <__lshift>
 8012a4e:	4682      	mov	sl, r0
 8012a50:	9b06      	ldr	r3, [sp, #24]
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	dd05      	ble.n	8012a62 <_dtoa_r+0x83a>
 8012a56:	4631      	mov	r1, r6
 8012a58:	461a      	mov	r2, r3
 8012a5a:	4620      	mov	r0, r4
 8012a5c:	f000 fea0 	bl	80137a0 <__lshift>
 8012a60:	4606      	mov	r6, r0
 8012a62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d072      	beq.n	8012b4e <_dtoa_r+0x926>
 8012a68:	4631      	mov	r1, r6
 8012a6a:	4650      	mov	r0, sl
 8012a6c:	f000 ff04 	bl	8013878 <__mcmp>
 8012a70:	2800      	cmp	r0, #0
 8012a72:	da6c      	bge.n	8012b4e <_dtoa_r+0x926>
 8012a74:	2300      	movs	r3, #0
 8012a76:	4651      	mov	r1, sl
 8012a78:	220a      	movs	r2, #10
 8012a7a:	4620      	mov	r0, r4
 8012a7c:	f000 fce2 	bl	8013444 <__multadd>
 8012a80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012a82:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8012a86:	4682      	mov	sl, r0
 8012a88:	2b00      	cmp	r3, #0
 8012a8a:	f000 81b0 	beq.w	8012dee <_dtoa_r+0xbc6>
 8012a8e:	2300      	movs	r3, #0
 8012a90:	4639      	mov	r1, r7
 8012a92:	220a      	movs	r2, #10
 8012a94:	4620      	mov	r0, r4
 8012a96:	f000 fcd5 	bl	8013444 <__multadd>
 8012a9a:	9b01      	ldr	r3, [sp, #4]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	4607      	mov	r7, r0
 8012aa0:	f300 8096 	bgt.w	8012bd0 <_dtoa_r+0x9a8>
 8012aa4:	9b07      	ldr	r3, [sp, #28]
 8012aa6:	2b02      	cmp	r3, #2
 8012aa8:	dc59      	bgt.n	8012b5e <_dtoa_r+0x936>
 8012aaa:	e091      	b.n	8012bd0 <_dtoa_r+0x9a8>
 8012aac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012aae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8012ab2:	e758      	b.n	8012966 <_dtoa_r+0x73e>
 8012ab4:	9b04      	ldr	r3, [sp, #16]
 8012ab6:	1e5e      	subs	r6, r3, #1
 8012ab8:	9b08      	ldr	r3, [sp, #32]
 8012aba:	42b3      	cmp	r3, r6
 8012abc:	bfbf      	itttt	lt
 8012abe:	9b08      	ldrlt	r3, [sp, #32]
 8012ac0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8012ac2:	9608      	strlt	r6, [sp, #32]
 8012ac4:	1af3      	sublt	r3, r6, r3
 8012ac6:	bfb4      	ite	lt
 8012ac8:	18d2      	addlt	r2, r2, r3
 8012aca:	1b9e      	subge	r6, r3, r6
 8012acc:	9b04      	ldr	r3, [sp, #16]
 8012ace:	bfbc      	itt	lt
 8012ad0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8012ad2:	2600      	movlt	r6, #0
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	bfb7      	itett	lt
 8012ad8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8012adc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8012ae0:	1a9d      	sublt	r5, r3, r2
 8012ae2:	2300      	movlt	r3, #0
 8012ae4:	e741      	b.n	801296a <_dtoa_r+0x742>
 8012ae6:	9e08      	ldr	r6, [sp, #32]
 8012ae8:	9d05      	ldr	r5, [sp, #20]
 8012aea:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8012aec:	e748      	b.n	8012980 <_dtoa_r+0x758>
 8012aee:	9a08      	ldr	r2, [sp, #32]
 8012af0:	e770      	b.n	80129d4 <_dtoa_r+0x7ac>
 8012af2:	9b07      	ldr	r3, [sp, #28]
 8012af4:	2b01      	cmp	r3, #1
 8012af6:	dc19      	bgt.n	8012b2c <_dtoa_r+0x904>
 8012af8:	9b02      	ldr	r3, [sp, #8]
 8012afa:	b9bb      	cbnz	r3, 8012b2c <_dtoa_r+0x904>
 8012afc:	9b03      	ldr	r3, [sp, #12]
 8012afe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012b02:	b99b      	cbnz	r3, 8012b2c <_dtoa_r+0x904>
 8012b04:	9b03      	ldr	r3, [sp, #12]
 8012b06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8012b0a:	0d1b      	lsrs	r3, r3, #20
 8012b0c:	051b      	lsls	r3, r3, #20
 8012b0e:	b183      	cbz	r3, 8012b32 <_dtoa_r+0x90a>
 8012b10:	9b05      	ldr	r3, [sp, #20]
 8012b12:	3301      	adds	r3, #1
 8012b14:	9305      	str	r3, [sp, #20]
 8012b16:	9b06      	ldr	r3, [sp, #24]
 8012b18:	3301      	adds	r3, #1
 8012b1a:	9306      	str	r3, [sp, #24]
 8012b1c:	f04f 0801 	mov.w	r8, #1
 8012b20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b22:	2b00      	cmp	r3, #0
 8012b24:	f47f af6f 	bne.w	8012a06 <_dtoa_r+0x7de>
 8012b28:	2001      	movs	r0, #1
 8012b2a:	e774      	b.n	8012a16 <_dtoa_r+0x7ee>
 8012b2c:	f04f 0800 	mov.w	r8, #0
 8012b30:	e7f6      	b.n	8012b20 <_dtoa_r+0x8f8>
 8012b32:	4698      	mov	r8, r3
 8012b34:	e7f4      	b.n	8012b20 <_dtoa_r+0x8f8>
 8012b36:	d082      	beq.n	8012a3e <_dtoa_r+0x816>
 8012b38:	9a05      	ldr	r2, [sp, #20]
 8012b3a:	331c      	adds	r3, #28
 8012b3c:	441a      	add	r2, r3
 8012b3e:	9205      	str	r2, [sp, #20]
 8012b40:	9a06      	ldr	r2, [sp, #24]
 8012b42:	441a      	add	r2, r3
 8012b44:	441d      	add	r5, r3
 8012b46:	9206      	str	r2, [sp, #24]
 8012b48:	e779      	b.n	8012a3e <_dtoa_r+0x816>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	e7f4      	b.n	8012b38 <_dtoa_r+0x910>
 8012b4e:	9b04      	ldr	r3, [sp, #16]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	dc37      	bgt.n	8012bc4 <_dtoa_r+0x99c>
 8012b54:	9b07      	ldr	r3, [sp, #28]
 8012b56:	2b02      	cmp	r3, #2
 8012b58:	dd34      	ble.n	8012bc4 <_dtoa_r+0x99c>
 8012b5a:	9b04      	ldr	r3, [sp, #16]
 8012b5c:	9301      	str	r3, [sp, #4]
 8012b5e:	9b01      	ldr	r3, [sp, #4]
 8012b60:	b963      	cbnz	r3, 8012b7c <_dtoa_r+0x954>
 8012b62:	4631      	mov	r1, r6
 8012b64:	2205      	movs	r2, #5
 8012b66:	4620      	mov	r0, r4
 8012b68:	f000 fc6c 	bl	8013444 <__multadd>
 8012b6c:	4601      	mov	r1, r0
 8012b6e:	4606      	mov	r6, r0
 8012b70:	4650      	mov	r0, sl
 8012b72:	f000 fe81 	bl	8013878 <__mcmp>
 8012b76:	2800      	cmp	r0, #0
 8012b78:	f73f adbb 	bgt.w	80126f2 <_dtoa_r+0x4ca>
 8012b7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b7e:	9d00      	ldr	r5, [sp, #0]
 8012b80:	ea6f 0b03 	mvn.w	fp, r3
 8012b84:	f04f 0800 	mov.w	r8, #0
 8012b88:	4631      	mov	r1, r6
 8012b8a:	4620      	mov	r0, r4
 8012b8c:	f000 fc38 	bl	8013400 <_Bfree>
 8012b90:	2f00      	cmp	r7, #0
 8012b92:	f43f aeab 	beq.w	80128ec <_dtoa_r+0x6c4>
 8012b96:	f1b8 0f00 	cmp.w	r8, #0
 8012b9a:	d005      	beq.n	8012ba8 <_dtoa_r+0x980>
 8012b9c:	45b8      	cmp	r8, r7
 8012b9e:	d003      	beq.n	8012ba8 <_dtoa_r+0x980>
 8012ba0:	4641      	mov	r1, r8
 8012ba2:	4620      	mov	r0, r4
 8012ba4:	f000 fc2c 	bl	8013400 <_Bfree>
 8012ba8:	4639      	mov	r1, r7
 8012baa:	4620      	mov	r0, r4
 8012bac:	f000 fc28 	bl	8013400 <_Bfree>
 8012bb0:	e69c      	b.n	80128ec <_dtoa_r+0x6c4>
 8012bb2:	2600      	movs	r6, #0
 8012bb4:	4637      	mov	r7, r6
 8012bb6:	e7e1      	b.n	8012b7c <_dtoa_r+0x954>
 8012bb8:	46bb      	mov	fp, r7
 8012bba:	4637      	mov	r7, r6
 8012bbc:	e599      	b.n	80126f2 <_dtoa_r+0x4ca>
 8012bbe:	bf00      	nop
 8012bc0:	40240000 	.word	0x40240000
 8012bc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	f000 80c8 	beq.w	8012d5c <_dtoa_r+0xb34>
 8012bcc:	9b04      	ldr	r3, [sp, #16]
 8012bce:	9301      	str	r3, [sp, #4]
 8012bd0:	2d00      	cmp	r5, #0
 8012bd2:	dd05      	ble.n	8012be0 <_dtoa_r+0x9b8>
 8012bd4:	4639      	mov	r1, r7
 8012bd6:	462a      	mov	r2, r5
 8012bd8:	4620      	mov	r0, r4
 8012bda:	f000 fde1 	bl	80137a0 <__lshift>
 8012bde:	4607      	mov	r7, r0
 8012be0:	f1b8 0f00 	cmp.w	r8, #0
 8012be4:	d05b      	beq.n	8012c9e <_dtoa_r+0xa76>
 8012be6:	6879      	ldr	r1, [r7, #4]
 8012be8:	4620      	mov	r0, r4
 8012bea:	f000 fbc9 	bl	8013380 <_Balloc>
 8012bee:	4605      	mov	r5, r0
 8012bf0:	b928      	cbnz	r0, 8012bfe <_dtoa_r+0x9d6>
 8012bf2:	4b83      	ldr	r3, [pc, #524]	; (8012e00 <_dtoa_r+0xbd8>)
 8012bf4:	4602      	mov	r2, r0
 8012bf6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8012bfa:	f7ff bb2e 	b.w	801225a <_dtoa_r+0x32>
 8012bfe:	693a      	ldr	r2, [r7, #16]
 8012c00:	3202      	adds	r2, #2
 8012c02:	0092      	lsls	r2, r2, #2
 8012c04:	f107 010c 	add.w	r1, r7, #12
 8012c08:	300c      	adds	r0, #12
 8012c0a:	f7ff fa75 	bl	80120f8 <memcpy>
 8012c0e:	2201      	movs	r2, #1
 8012c10:	4629      	mov	r1, r5
 8012c12:	4620      	mov	r0, r4
 8012c14:	f000 fdc4 	bl	80137a0 <__lshift>
 8012c18:	9b00      	ldr	r3, [sp, #0]
 8012c1a:	3301      	adds	r3, #1
 8012c1c:	9304      	str	r3, [sp, #16]
 8012c1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012c22:	4413      	add	r3, r2
 8012c24:	9308      	str	r3, [sp, #32]
 8012c26:	9b02      	ldr	r3, [sp, #8]
 8012c28:	f003 0301 	and.w	r3, r3, #1
 8012c2c:	46b8      	mov	r8, r7
 8012c2e:	9306      	str	r3, [sp, #24]
 8012c30:	4607      	mov	r7, r0
 8012c32:	9b04      	ldr	r3, [sp, #16]
 8012c34:	4631      	mov	r1, r6
 8012c36:	3b01      	subs	r3, #1
 8012c38:	4650      	mov	r0, sl
 8012c3a:	9301      	str	r3, [sp, #4]
 8012c3c:	f7ff fa6a 	bl	8012114 <quorem>
 8012c40:	4641      	mov	r1, r8
 8012c42:	9002      	str	r0, [sp, #8]
 8012c44:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012c48:	4650      	mov	r0, sl
 8012c4a:	f000 fe15 	bl	8013878 <__mcmp>
 8012c4e:	463a      	mov	r2, r7
 8012c50:	9005      	str	r0, [sp, #20]
 8012c52:	4631      	mov	r1, r6
 8012c54:	4620      	mov	r0, r4
 8012c56:	f000 fe2b 	bl	80138b0 <__mdiff>
 8012c5a:	68c2      	ldr	r2, [r0, #12]
 8012c5c:	4605      	mov	r5, r0
 8012c5e:	bb02      	cbnz	r2, 8012ca2 <_dtoa_r+0xa7a>
 8012c60:	4601      	mov	r1, r0
 8012c62:	4650      	mov	r0, sl
 8012c64:	f000 fe08 	bl	8013878 <__mcmp>
 8012c68:	4602      	mov	r2, r0
 8012c6a:	4629      	mov	r1, r5
 8012c6c:	4620      	mov	r0, r4
 8012c6e:	9209      	str	r2, [sp, #36]	; 0x24
 8012c70:	f000 fbc6 	bl	8013400 <_Bfree>
 8012c74:	9b07      	ldr	r3, [sp, #28]
 8012c76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c78:	9d04      	ldr	r5, [sp, #16]
 8012c7a:	ea43 0102 	orr.w	r1, r3, r2
 8012c7e:	9b06      	ldr	r3, [sp, #24]
 8012c80:	4319      	orrs	r1, r3
 8012c82:	d110      	bne.n	8012ca6 <_dtoa_r+0xa7e>
 8012c84:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012c88:	d029      	beq.n	8012cde <_dtoa_r+0xab6>
 8012c8a:	9b05      	ldr	r3, [sp, #20]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	dd02      	ble.n	8012c96 <_dtoa_r+0xa6e>
 8012c90:	9b02      	ldr	r3, [sp, #8]
 8012c92:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8012c96:	9b01      	ldr	r3, [sp, #4]
 8012c98:	f883 9000 	strb.w	r9, [r3]
 8012c9c:	e774      	b.n	8012b88 <_dtoa_r+0x960>
 8012c9e:	4638      	mov	r0, r7
 8012ca0:	e7ba      	b.n	8012c18 <_dtoa_r+0x9f0>
 8012ca2:	2201      	movs	r2, #1
 8012ca4:	e7e1      	b.n	8012c6a <_dtoa_r+0xa42>
 8012ca6:	9b05      	ldr	r3, [sp, #20]
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	db04      	blt.n	8012cb6 <_dtoa_r+0xa8e>
 8012cac:	9907      	ldr	r1, [sp, #28]
 8012cae:	430b      	orrs	r3, r1
 8012cb0:	9906      	ldr	r1, [sp, #24]
 8012cb2:	430b      	orrs	r3, r1
 8012cb4:	d120      	bne.n	8012cf8 <_dtoa_r+0xad0>
 8012cb6:	2a00      	cmp	r2, #0
 8012cb8:	dded      	ble.n	8012c96 <_dtoa_r+0xa6e>
 8012cba:	4651      	mov	r1, sl
 8012cbc:	2201      	movs	r2, #1
 8012cbe:	4620      	mov	r0, r4
 8012cc0:	f000 fd6e 	bl	80137a0 <__lshift>
 8012cc4:	4631      	mov	r1, r6
 8012cc6:	4682      	mov	sl, r0
 8012cc8:	f000 fdd6 	bl	8013878 <__mcmp>
 8012ccc:	2800      	cmp	r0, #0
 8012cce:	dc03      	bgt.n	8012cd8 <_dtoa_r+0xab0>
 8012cd0:	d1e1      	bne.n	8012c96 <_dtoa_r+0xa6e>
 8012cd2:	f019 0f01 	tst.w	r9, #1
 8012cd6:	d0de      	beq.n	8012c96 <_dtoa_r+0xa6e>
 8012cd8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012cdc:	d1d8      	bne.n	8012c90 <_dtoa_r+0xa68>
 8012cde:	9a01      	ldr	r2, [sp, #4]
 8012ce0:	2339      	movs	r3, #57	; 0x39
 8012ce2:	7013      	strb	r3, [r2, #0]
 8012ce4:	462b      	mov	r3, r5
 8012ce6:	461d      	mov	r5, r3
 8012ce8:	3b01      	subs	r3, #1
 8012cea:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8012cee:	2a39      	cmp	r2, #57	; 0x39
 8012cf0:	d06c      	beq.n	8012dcc <_dtoa_r+0xba4>
 8012cf2:	3201      	adds	r2, #1
 8012cf4:	701a      	strb	r2, [r3, #0]
 8012cf6:	e747      	b.n	8012b88 <_dtoa_r+0x960>
 8012cf8:	2a00      	cmp	r2, #0
 8012cfa:	dd07      	ble.n	8012d0c <_dtoa_r+0xae4>
 8012cfc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8012d00:	d0ed      	beq.n	8012cde <_dtoa_r+0xab6>
 8012d02:	9a01      	ldr	r2, [sp, #4]
 8012d04:	f109 0301 	add.w	r3, r9, #1
 8012d08:	7013      	strb	r3, [r2, #0]
 8012d0a:	e73d      	b.n	8012b88 <_dtoa_r+0x960>
 8012d0c:	9b04      	ldr	r3, [sp, #16]
 8012d0e:	9a08      	ldr	r2, [sp, #32]
 8012d10:	f803 9c01 	strb.w	r9, [r3, #-1]
 8012d14:	4293      	cmp	r3, r2
 8012d16:	d043      	beq.n	8012da0 <_dtoa_r+0xb78>
 8012d18:	4651      	mov	r1, sl
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	220a      	movs	r2, #10
 8012d1e:	4620      	mov	r0, r4
 8012d20:	f000 fb90 	bl	8013444 <__multadd>
 8012d24:	45b8      	cmp	r8, r7
 8012d26:	4682      	mov	sl, r0
 8012d28:	f04f 0300 	mov.w	r3, #0
 8012d2c:	f04f 020a 	mov.w	r2, #10
 8012d30:	4641      	mov	r1, r8
 8012d32:	4620      	mov	r0, r4
 8012d34:	d107      	bne.n	8012d46 <_dtoa_r+0xb1e>
 8012d36:	f000 fb85 	bl	8013444 <__multadd>
 8012d3a:	4680      	mov	r8, r0
 8012d3c:	4607      	mov	r7, r0
 8012d3e:	9b04      	ldr	r3, [sp, #16]
 8012d40:	3301      	adds	r3, #1
 8012d42:	9304      	str	r3, [sp, #16]
 8012d44:	e775      	b.n	8012c32 <_dtoa_r+0xa0a>
 8012d46:	f000 fb7d 	bl	8013444 <__multadd>
 8012d4a:	4639      	mov	r1, r7
 8012d4c:	4680      	mov	r8, r0
 8012d4e:	2300      	movs	r3, #0
 8012d50:	220a      	movs	r2, #10
 8012d52:	4620      	mov	r0, r4
 8012d54:	f000 fb76 	bl	8013444 <__multadd>
 8012d58:	4607      	mov	r7, r0
 8012d5a:	e7f0      	b.n	8012d3e <_dtoa_r+0xb16>
 8012d5c:	9b04      	ldr	r3, [sp, #16]
 8012d5e:	9301      	str	r3, [sp, #4]
 8012d60:	9d00      	ldr	r5, [sp, #0]
 8012d62:	4631      	mov	r1, r6
 8012d64:	4650      	mov	r0, sl
 8012d66:	f7ff f9d5 	bl	8012114 <quorem>
 8012d6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8012d6e:	9b00      	ldr	r3, [sp, #0]
 8012d70:	f805 9b01 	strb.w	r9, [r5], #1
 8012d74:	1aea      	subs	r2, r5, r3
 8012d76:	9b01      	ldr	r3, [sp, #4]
 8012d78:	4293      	cmp	r3, r2
 8012d7a:	dd07      	ble.n	8012d8c <_dtoa_r+0xb64>
 8012d7c:	4651      	mov	r1, sl
 8012d7e:	2300      	movs	r3, #0
 8012d80:	220a      	movs	r2, #10
 8012d82:	4620      	mov	r0, r4
 8012d84:	f000 fb5e 	bl	8013444 <__multadd>
 8012d88:	4682      	mov	sl, r0
 8012d8a:	e7ea      	b.n	8012d62 <_dtoa_r+0xb3a>
 8012d8c:	9b01      	ldr	r3, [sp, #4]
 8012d8e:	2b00      	cmp	r3, #0
 8012d90:	bfc8      	it	gt
 8012d92:	461d      	movgt	r5, r3
 8012d94:	9b00      	ldr	r3, [sp, #0]
 8012d96:	bfd8      	it	le
 8012d98:	2501      	movle	r5, #1
 8012d9a:	441d      	add	r5, r3
 8012d9c:	f04f 0800 	mov.w	r8, #0
 8012da0:	4651      	mov	r1, sl
 8012da2:	2201      	movs	r2, #1
 8012da4:	4620      	mov	r0, r4
 8012da6:	f000 fcfb 	bl	80137a0 <__lshift>
 8012daa:	4631      	mov	r1, r6
 8012dac:	4682      	mov	sl, r0
 8012dae:	f000 fd63 	bl	8013878 <__mcmp>
 8012db2:	2800      	cmp	r0, #0
 8012db4:	dc96      	bgt.n	8012ce4 <_dtoa_r+0xabc>
 8012db6:	d102      	bne.n	8012dbe <_dtoa_r+0xb96>
 8012db8:	f019 0f01 	tst.w	r9, #1
 8012dbc:	d192      	bne.n	8012ce4 <_dtoa_r+0xabc>
 8012dbe:	462b      	mov	r3, r5
 8012dc0:	461d      	mov	r5, r3
 8012dc2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8012dc6:	2a30      	cmp	r2, #48	; 0x30
 8012dc8:	d0fa      	beq.n	8012dc0 <_dtoa_r+0xb98>
 8012dca:	e6dd      	b.n	8012b88 <_dtoa_r+0x960>
 8012dcc:	9a00      	ldr	r2, [sp, #0]
 8012dce:	429a      	cmp	r2, r3
 8012dd0:	d189      	bne.n	8012ce6 <_dtoa_r+0xabe>
 8012dd2:	f10b 0b01 	add.w	fp, fp, #1
 8012dd6:	2331      	movs	r3, #49	; 0x31
 8012dd8:	e796      	b.n	8012d08 <_dtoa_r+0xae0>
 8012dda:	4b0a      	ldr	r3, [pc, #40]	; (8012e04 <_dtoa_r+0xbdc>)
 8012ddc:	f7ff ba99 	b.w	8012312 <_dtoa_r+0xea>
 8012de0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	f47f aa6d 	bne.w	80122c2 <_dtoa_r+0x9a>
 8012de8:	4b07      	ldr	r3, [pc, #28]	; (8012e08 <_dtoa_r+0xbe0>)
 8012dea:	f7ff ba92 	b.w	8012312 <_dtoa_r+0xea>
 8012dee:	9b01      	ldr	r3, [sp, #4]
 8012df0:	2b00      	cmp	r3, #0
 8012df2:	dcb5      	bgt.n	8012d60 <_dtoa_r+0xb38>
 8012df4:	9b07      	ldr	r3, [sp, #28]
 8012df6:	2b02      	cmp	r3, #2
 8012df8:	f73f aeb1 	bgt.w	8012b5e <_dtoa_r+0x936>
 8012dfc:	e7b0      	b.n	8012d60 <_dtoa_r+0xb38>
 8012dfe:	bf00      	nop
 8012e00:	08015954 	.word	0x08015954
 8012e04:	080158b4 	.word	0x080158b4
 8012e08:	080158d8 	.word	0x080158d8

08012e0c <__ssputs_r>:
 8012e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012e10:	688e      	ldr	r6, [r1, #8]
 8012e12:	461f      	mov	r7, r3
 8012e14:	42be      	cmp	r6, r7
 8012e16:	680b      	ldr	r3, [r1, #0]
 8012e18:	4682      	mov	sl, r0
 8012e1a:	460c      	mov	r4, r1
 8012e1c:	4690      	mov	r8, r2
 8012e1e:	d82c      	bhi.n	8012e7a <__ssputs_r+0x6e>
 8012e20:	898a      	ldrh	r2, [r1, #12]
 8012e22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8012e26:	d026      	beq.n	8012e76 <__ssputs_r+0x6a>
 8012e28:	6965      	ldr	r5, [r4, #20]
 8012e2a:	6909      	ldr	r1, [r1, #16]
 8012e2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8012e30:	eba3 0901 	sub.w	r9, r3, r1
 8012e34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8012e38:	1c7b      	adds	r3, r7, #1
 8012e3a:	444b      	add	r3, r9
 8012e3c:	106d      	asrs	r5, r5, #1
 8012e3e:	429d      	cmp	r5, r3
 8012e40:	bf38      	it	cc
 8012e42:	461d      	movcc	r5, r3
 8012e44:	0553      	lsls	r3, r2, #21
 8012e46:	d527      	bpl.n	8012e98 <__ssputs_r+0x8c>
 8012e48:	4629      	mov	r1, r5
 8012e4a:	f000 f95f 	bl	801310c <_malloc_r>
 8012e4e:	4606      	mov	r6, r0
 8012e50:	b360      	cbz	r0, 8012eac <__ssputs_r+0xa0>
 8012e52:	6921      	ldr	r1, [r4, #16]
 8012e54:	464a      	mov	r2, r9
 8012e56:	f7ff f94f 	bl	80120f8 <memcpy>
 8012e5a:	89a3      	ldrh	r3, [r4, #12]
 8012e5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8012e60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012e64:	81a3      	strh	r3, [r4, #12]
 8012e66:	6126      	str	r6, [r4, #16]
 8012e68:	6165      	str	r5, [r4, #20]
 8012e6a:	444e      	add	r6, r9
 8012e6c:	eba5 0509 	sub.w	r5, r5, r9
 8012e70:	6026      	str	r6, [r4, #0]
 8012e72:	60a5      	str	r5, [r4, #8]
 8012e74:	463e      	mov	r6, r7
 8012e76:	42be      	cmp	r6, r7
 8012e78:	d900      	bls.n	8012e7c <__ssputs_r+0x70>
 8012e7a:	463e      	mov	r6, r7
 8012e7c:	6820      	ldr	r0, [r4, #0]
 8012e7e:	4632      	mov	r2, r6
 8012e80:	4641      	mov	r1, r8
 8012e82:	f000 fe6b 	bl	8013b5c <memmove>
 8012e86:	68a3      	ldr	r3, [r4, #8]
 8012e88:	1b9b      	subs	r3, r3, r6
 8012e8a:	60a3      	str	r3, [r4, #8]
 8012e8c:	6823      	ldr	r3, [r4, #0]
 8012e8e:	4433      	add	r3, r6
 8012e90:	6023      	str	r3, [r4, #0]
 8012e92:	2000      	movs	r0, #0
 8012e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e98:	462a      	mov	r2, r5
 8012e9a:	f000 fe30 	bl	8013afe <_realloc_r>
 8012e9e:	4606      	mov	r6, r0
 8012ea0:	2800      	cmp	r0, #0
 8012ea2:	d1e0      	bne.n	8012e66 <__ssputs_r+0x5a>
 8012ea4:	6921      	ldr	r1, [r4, #16]
 8012ea6:	4650      	mov	r0, sl
 8012ea8:	f000 fefc 	bl	8013ca4 <_free_r>
 8012eac:	230c      	movs	r3, #12
 8012eae:	f8ca 3000 	str.w	r3, [sl]
 8012eb2:	89a3      	ldrh	r3, [r4, #12]
 8012eb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012eb8:	81a3      	strh	r3, [r4, #12]
 8012eba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012ebe:	e7e9      	b.n	8012e94 <__ssputs_r+0x88>

08012ec0 <_svfiprintf_r>:
 8012ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ec4:	4698      	mov	r8, r3
 8012ec6:	898b      	ldrh	r3, [r1, #12]
 8012ec8:	061b      	lsls	r3, r3, #24
 8012eca:	b09d      	sub	sp, #116	; 0x74
 8012ecc:	4607      	mov	r7, r0
 8012ece:	460d      	mov	r5, r1
 8012ed0:	4614      	mov	r4, r2
 8012ed2:	d50e      	bpl.n	8012ef2 <_svfiprintf_r+0x32>
 8012ed4:	690b      	ldr	r3, [r1, #16]
 8012ed6:	b963      	cbnz	r3, 8012ef2 <_svfiprintf_r+0x32>
 8012ed8:	2140      	movs	r1, #64	; 0x40
 8012eda:	f000 f917 	bl	801310c <_malloc_r>
 8012ede:	6028      	str	r0, [r5, #0]
 8012ee0:	6128      	str	r0, [r5, #16]
 8012ee2:	b920      	cbnz	r0, 8012eee <_svfiprintf_r+0x2e>
 8012ee4:	230c      	movs	r3, #12
 8012ee6:	603b      	str	r3, [r7, #0]
 8012ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012eec:	e0d0      	b.n	8013090 <_svfiprintf_r+0x1d0>
 8012eee:	2340      	movs	r3, #64	; 0x40
 8012ef0:	616b      	str	r3, [r5, #20]
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	9309      	str	r3, [sp, #36]	; 0x24
 8012ef6:	2320      	movs	r3, #32
 8012ef8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8012efc:	f8cd 800c 	str.w	r8, [sp, #12]
 8012f00:	2330      	movs	r3, #48	; 0x30
 8012f02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80130a8 <_svfiprintf_r+0x1e8>
 8012f06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8012f0a:	f04f 0901 	mov.w	r9, #1
 8012f0e:	4623      	mov	r3, r4
 8012f10:	469a      	mov	sl, r3
 8012f12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012f16:	b10a      	cbz	r2, 8012f1c <_svfiprintf_r+0x5c>
 8012f18:	2a25      	cmp	r2, #37	; 0x25
 8012f1a:	d1f9      	bne.n	8012f10 <_svfiprintf_r+0x50>
 8012f1c:	ebba 0b04 	subs.w	fp, sl, r4
 8012f20:	d00b      	beq.n	8012f3a <_svfiprintf_r+0x7a>
 8012f22:	465b      	mov	r3, fp
 8012f24:	4622      	mov	r2, r4
 8012f26:	4629      	mov	r1, r5
 8012f28:	4638      	mov	r0, r7
 8012f2a:	f7ff ff6f 	bl	8012e0c <__ssputs_r>
 8012f2e:	3001      	adds	r0, #1
 8012f30:	f000 80a9 	beq.w	8013086 <_svfiprintf_r+0x1c6>
 8012f34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012f36:	445a      	add	r2, fp
 8012f38:	9209      	str	r2, [sp, #36]	; 0x24
 8012f3a:	f89a 3000 	ldrb.w	r3, [sl]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	f000 80a1 	beq.w	8013086 <_svfiprintf_r+0x1c6>
 8012f44:	2300      	movs	r3, #0
 8012f46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012f4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012f4e:	f10a 0a01 	add.w	sl, sl, #1
 8012f52:	9304      	str	r3, [sp, #16]
 8012f54:	9307      	str	r3, [sp, #28]
 8012f56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012f5a:	931a      	str	r3, [sp, #104]	; 0x68
 8012f5c:	4654      	mov	r4, sl
 8012f5e:	2205      	movs	r2, #5
 8012f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012f64:	4850      	ldr	r0, [pc, #320]	; (80130a8 <_svfiprintf_r+0x1e8>)
 8012f66:	f7ed f933 	bl	80001d0 <memchr>
 8012f6a:	9a04      	ldr	r2, [sp, #16]
 8012f6c:	b9d8      	cbnz	r0, 8012fa6 <_svfiprintf_r+0xe6>
 8012f6e:	06d0      	lsls	r0, r2, #27
 8012f70:	bf44      	itt	mi
 8012f72:	2320      	movmi	r3, #32
 8012f74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f78:	0711      	lsls	r1, r2, #28
 8012f7a:	bf44      	itt	mi
 8012f7c:	232b      	movmi	r3, #43	; 0x2b
 8012f7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012f82:	f89a 3000 	ldrb.w	r3, [sl]
 8012f86:	2b2a      	cmp	r3, #42	; 0x2a
 8012f88:	d015      	beq.n	8012fb6 <_svfiprintf_r+0xf6>
 8012f8a:	9a07      	ldr	r2, [sp, #28]
 8012f8c:	4654      	mov	r4, sl
 8012f8e:	2000      	movs	r0, #0
 8012f90:	f04f 0c0a 	mov.w	ip, #10
 8012f94:	4621      	mov	r1, r4
 8012f96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012f9a:	3b30      	subs	r3, #48	; 0x30
 8012f9c:	2b09      	cmp	r3, #9
 8012f9e:	d94d      	bls.n	801303c <_svfiprintf_r+0x17c>
 8012fa0:	b1b0      	cbz	r0, 8012fd0 <_svfiprintf_r+0x110>
 8012fa2:	9207      	str	r2, [sp, #28]
 8012fa4:	e014      	b.n	8012fd0 <_svfiprintf_r+0x110>
 8012fa6:	eba0 0308 	sub.w	r3, r0, r8
 8012faa:	fa09 f303 	lsl.w	r3, r9, r3
 8012fae:	4313      	orrs	r3, r2
 8012fb0:	9304      	str	r3, [sp, #16]
 8012fb2:	46a2      	mov	sl, r4
 8012fb4:	e7d2      	b.n	8012f5c <_svfiprintf_r+0x9c>
 8012fb6:	9b03      	ldr	r3, [sp, #12]
 8012fb8:	1d19      	adds	r1, r3, #4
 8012fba:	681b      	ldr	r3, [r3, #0]
 8012fbc:	9103      	str	r1, [sp, #12]
 8012fbe:	2b00      	cmp	r3, #0
 8012fc0:	bfbb      	ittet	lt
 8012fc2:	425b      	neglt	r3, r3
 8012fc4:	f042 0202 	orrlt.w	r2, r2, #2
 8012fc8:	9307      	strge	r3, [sp, #28]
 8012fca:	9307      	strlt	r3, [sp, #28]
 8012fcc:	bfb8      	it	lt
 8012fce:	9204      	strlt	r2, [sp, #16]
 8012fd0:	7823      	ldrb	r3, [r4, #0]
 8012fd2:	2b2e      	cmp	r3, #46	; 0x2e
 8012fd4:	d10c      	bne.n	8012ff0 <_svfiprintf_r+0x130>
 8012fd6:	7863      	ldrb	r3, [r4, #1]
 8012fd8:	2b2a      	cmp	r3, #42	; 0x2a
 8012fda:	d134      	bne.n	8013046 <_svfiprintf_r+0x186>
 8012fdc:	9b03      	ldr	r3, [sp, #12]
 8012fde:	1d1a      	adds	r2, r3, #4
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	9203      	str	r2, [sp, #12]
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	bfb8      	it	lt
 8012fe8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8012fec:	3402      	adds	r4, #2
 8012fee:	9305      	str	r3, [sp, #20]
 8012ff0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80130b8 <_svfiprintf_r+0x1f8>
 8012ff4:	7821      	ldrb	r1, [r4, #0]
 8012ff6:	2203      	movs	r2, #3
 8012ff8:	4650      	mov	r0, sl
 8012ffa:	f7ed f8e9 	bl	80001d0 <memchr>
 8012ffe:	b138      	cbz	r0, 8013010 <_svfiprintf_r+0x150>
 8013000:	9b04      	ldr	r3, [sp, #16]
 8013002:	eba0 000a 	sub.w	r0, r0, sl
 8013006:	2240      	movs	r2, #64	; 0x40
 8013008:	4082      	lsls	r2, r0
 801300a:	4313      	orrs	r3, r2
 801300c:	3401      	adds	r4, #1
 801300e:	9304      	str	r3, [sp, #16]
 8013010:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013014:	4825      	ldr	r0, [pc, #148]	; (80130ac <_svfiprintf_r+0x1ec>)
 8013016:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801301a:	2206      	movs	r2, #6
 801301c:	f7ed f8d8 	bl	80001d0 <memchr>
 8013020:	2800      	cmp	r0, #0
 8013022:	d038      	beq.n	8013096 <_svfiprintf_r+0x1d6>
 8013024:	4b22      	ldr	r3, [pc, #136]	; (80130b0 <_svfiprintf_r+0x1f0>)
 8013026:	bb1b      	cbnz	r3, 8013070 <_svfiprintf_r+0x1b0>
 8013028:	9b03      	ldr	r3, [sp, #12]
 801302a:	3307      	adds	r3, #7
 801302c:	f023 0307 	bic.w	r3, r3, #7
 8013030:	3308      	adds	r3, #8
 8013032:	9303      	str	r3, [sp, #12]
 8013034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013036:	4433      	add	r3, r6
 8013038:	9309      	str	r3, [sp, #36]	; 0x24
 801303a:	e768      	b.n	8012f0e <_svfiprintf_r+0x4e>
 801303c:	fb0c 3202 	mla	r2, ip, r2, r3
 8013040:	460c      	mov	r4, r1
 8013042:	2001      	movs	r0, #1
 8013044:	e7a6      	b.n	8012f94 <_svfiprintf_r+0xd4>
 8013046:	2300      	movs	r3, #0
 8013048:	3401      	adds	r4, #1
 801304a:	9305      	str	r3, [sp, #20]
 801304c:	4619      	mov	r1, r3
 801304e:	f04f 0c0a 	mov.w	ip, #10
 8013052:	4620      	mov	r0, r4
 8013054:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013058:	3a30      	subs	r2, #48	; 0x30
 801305a:	2a09      	cmp	r2, #9
 801305c:	d903      	bls.n	8013066 <_svfiprintf_r+0x1a6>
 801305e:	2b00      	cmp	r3, #0
 8013060:	d0c6      	beq.n	8012ff0 <_svfiprintf_r+0x130>
 8013062:	9105      	str	r1, [sp, #20]
 8013064:	e7c4      	b.n	8012ff0 <_svfiprintf_r+0x130>
 8013066:	fb0c 2101 	mla	r1, ip, r1, r2
 801306a:	4604      	mov	r4, r0
 801306c:	2301      	movs	r3, #1
 801306e:	e7f0      	b.n	8013052 <_svfiprintf_r+0x192>
 8013070:	ab03      	add	r3, sp, #12
 8013072:	9300      	str	r3, [sp, #0]
 8013074:	462a      	mov	r2, r5
 8013076:	4b0f      	ldr	r3, [pc, #60]	; (80130b4 <_svfiprintf_r+0x1f4>)
 8013078:	a904      	add	r1, sp, #16
 801307a:	4638      	mov	r0, r7
 801307c:	f7fe fb6e 	bl	801175c <_printf_float>
 8013080:	1c42      	adds	r2, r0, #1
 8013082:	4606      	mov	r6, r0
 8013084:	d1d6      	bne.n	8013034 <_svfiprintf_r+0x174>
 8013086:	89ab      	ldrh	r3, [r5, #12]
 8013088:	065b      	lsls	r3, r3, #25
 801308a:	f53f af2d 	bmi.w	8012ee8 <_svfiprintf_r+0x28>
 801308e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013090:	b01d      	add	sp, #116	; 0x74
 8013092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013096:	ab03      	add	r3, sp, #12
 8013098:	9300      	str	r3, [sp, #0]
 801309a:	462a      	mov	r2, r5
 801309c:	4b05      	ldr	r3, [pc, #20]	; (80130b4 <_svfiprintf_r+0x1f4>)
 801309e:	a904      	add	r1, sp, #16
 80130a0:	4638      	mov	r0, r7
 80130a2:	f7fe fdff 	bl	8011ca4 <_printf_i>
 80130a6:	e7eb      	b.n	8013080 <_svfiprintf_r+0x1c0>
 80130a8:	08015965 	.word	0x08015965
 80130ac:	0801596f 	.word	0x0801596f
 80130b0:	0801175d 	.word	0x0801175d
 80130b4:	08012e0d 	.word	0x08012e0d
 80130b8:	0801596b 	.word	0x0801596b

080130bc <malloc>:
 80130bc:	4b02      	ldr	r3, [pc, #8]	; (80130c8 <malloc+0xc>)
 80130be:	4601      	mov	r1, r0
 80130c0:	6818      	ldr	r0, [r3, #0]
 80130c2:	f000 b823 	b.w	801310c <_malloc_r>
 80130c6:	bf00      	nop
 80130c8:	20000178 	.word	0x20000178

080130cc <sbrk_aligned>:
 80130cc:	b570      	push	{r4, r5, r6, lr}
 80130ce:	4e0e      	ldr	r6, [pc, #56]	; (8013108 <sbrk_aligned+0x3c>)
 80130d0:	460c      	mov	r4, r1
 80130d2:	6831      	ldr	r1, [r6, #0]
 80130d4:	4605      	mov	r5, r0
 80130d6:	b911      	cbnz	r1, 80130de <sbrk_aligned+0x12>
 80130d8:	f000 fd8e 	bl	8013bf8 <_sbrk_r>
 80130dc:	6030      	str	r0, [r6, #0]
 80130de:	4621      	mov	r1, r4
 80130e0:	4628      	mov	r0, r5
 80130e2:	f000 fd89 	bl	8013bf8 <_sbrk_r>
 80130e6:	1c43      	adds	r3, r0, #1
 80130e8:	d00a      	beq.n	8013100 <sbrk_aligned+0x34>
 80130ea:	1cc4      	adds	r4, r0, #3
 80130ec:	f024 0403 	bic.w	r4, r4, #3
 80130f0:	42a0      	cmp	r0, r4
 80130f2:	d007      	beq.n	8013104 <sbrk_aligned+0x38>
 80130f4:	1a21      	subs	r1, r4, r0
 80130f6:	4628      	mov	r0, r5
 80130f8:	f000 fd7e 	bl	8013bf8 <_sbrk_r>
 80130fc:	3001      	adds	r0, #1
 80130fe:	d101      	bne.n	8013104 <sbrk_aligned+0x38>
 8013100:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8013104:	4620      	mov	r0, r4
 8013106:	bd70      	pop	{r4, r5, r6, pc}
 8013108:	200028a4 	.word	0x200028a4

0801310c <_malloc_r>:
 801310c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013110:	1ccd      	adds	r5, r1, #3
 8013112:	f025 0503 	bic.w	r5, r5, #3
 8013116:	3508      	adds	r5, #8
 8013118:	2d0c      	cmp	r5, #12
 801311a:	bf38      	it	cc
 801311c:	250c      	movcc	r5, #12
 801311e:	2d00      	cmp	r5, #0
 8013120:	4607      	mov	r7, r0
 8013122:	db01      	blt.n	8013128 <_malloc_r+0x1c>
 8013124:	42a9      	cmp	r1, r5
 8013126:	d905      	bls.n	8013134 <_malloc_r+0x28>
 8013128:	230c      	movs	r3, #12
 801312a:	603b      	str	r3, [r7, #0]
 801312c:	2600      	movs	r6, #0
 801312e:	4630      	mov	r0, r6
 8013130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013134:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8013208 <_malloc_r+0xfc>
 8013138:	f000 f916 	bl	8013368 <__malloc_lock>
 801313c:	f8d8 3000 	ldr.w	r3, [r8]
 8013140:	461c      	mov	r4, r3
 8013142:	bb5c      	cbnz	r4, 801319c <_malloc_r+0x90>
 8013144:	4629      	mov	r1, r5
 8013146:	4638      	mov	r0, r7
 8013148:	f7ff ffc0 	bl	80130cc <sbrk_aligned>
 801314c:	1c43      	adds	r3, r0, #1
 801314e:	4604      	mov	r4, r0
 8013150:	d155      	bne.n	80131fe <_malloc_r+0xf2>
 8013152:	f8d8 4000 	ldr.w	r4, [r8]
 8013156:	4626      	mov	r6, r4
 8013158:	2e00      	cmp	r6, #0
 801315a:	d145      	bne.n	80131e8 <_malloc_r+0xdc>
 801315c:	2c00      	cmp	r4, #0
 801315e:	d048      	beq.n	80131f2 <_malloc_r+0xe6>
 8013160:	6823      	ldr	r3, [r4, #0]
 8013162:	4631      	mov	r1, r6
 8013164:	4638      	mov	r0, r7
 8013166:	eb04 0903 	add.w	r9, r4, r3
 801316a:	f000 fd45 	bl	8013bf8 <_sbrk_r>
 801316e:	4581      	cmp	r9, r0
 8013170:	d13f      	bne.n	80131f2 <_malloc_r+0xe6>
 8013172:	6821      	ldr	r1, [r4, #0]
 8013174:	1a6d      	subs	r5, r5, r1
 8013176:	4629      	mov	r1, r5
 8013178:	4638      	mov	r0, r7
 801317a:	f7ff ffa7 	bl	80130cc <sbrk_aligned>
 801317e:	3001      	adds	r0, #1
 8013180:	d037      	beq.n	80131f2 <_malloc_r+0xe6>
 8013182:	6823      	ldr	r3, [r4, #0]
 8013184:	442b      	add	r3, r5
 8013186:	6023      	str	r3, [r4, #0]
 8013188:	f8d8 3000 	ldr.w	r3, [r8]
 801318c:	2b00      	cmp	r3, #0
 801318e:	d038      	beq.n	8013202 <_malloc_r+0xf6>
 8013190:	685a      	ldr	r2, [r3, #4]
 8013192:	42a2      	cmp	r2, r4
 8013194:	d12b      	bne.n	80131ee <_malloc_r+0xe2>
 8013196:	2200      	movs	r2, #0
 8013198:	605a      	str	r2, [r3, #4]
 801319a:	e00f      	b.n	80131bc <_malloc_r+0xb0>
 801319c:	6822      	ldr	r2, [r4, #0]
 801319e:	1b52      	subs	r2, r2, r5
 80131a0:	d41f      	bmi.n	80131e2 <_malloc_r+0xd6>
 80131a2:	2a0b      	cmp	r2, #11
 80131a4:	d917      	bls.n	80131d6 <_malloc_r+0xca>
 80131a6:	1961      	adds	r1, r4, r5
 80131a8:	42a3      	cmp	r3, r4
 80131aa:	6025      	str	r5, [r4, #0]
 80131ac:	bf18      	it	ne
 80131ae:	6059      	strne	r1, [r3, #4]
 80131b0:	6863      	ldr	r3, [r4, #4]
 80131b2:	bf08      	it	eq
 80131b4:	f8c8 1000 	streq.w	r1, [r8]
 80131b8:	5162      	str	r2, [r4, r5]
 80131ba:	604b      	str	r3, [r1, #4]
 80131bc:	4638      	mov	r0, r7
 80131be:	f104 060b 	add.w	r6, r4, #11
 80131c2:	f000 f8d7 	bl	8013374 <__malloc_unlock>
 80131c6:	f026 0607 	bic.w	r6, r6, #7
 80131ca:	1d23      	adds	r3, r4, #4
 80131cc:	1af2      	subs	r2, r6, r3
 80131ce:	d0ae      	beq.n	801312e <_malloc_r+0x22>
 80131d0:	1b9b      	subs	r3, r3, r6
 80131d2:	50a3      	str	r3, [r4, r2]
 80131d4:	e7ab      	b.n	801312e <_malloc_r+0x22>
 80131d6:	42a3      	cmp	r3, r4
 80131d8:	6862      	ldr	r2, [r4, #4]
 80131da:	d1dd      	bne.n	8013198 <_malloc_r+0x8c>
 80131dc:	f8c8 2000 	str.w	r2, [r8]
 80131e0:	e7ec      	b.n	80131bc <_malloc_r+0xb0>
 80131e2:	4623      	mov	r3, r4
 80131e4:	6864      	ldr	r4, [r4, #4]
 80131e6:	e7ac      	b.n	8013142 <_malloc_r+0x36>
 80131e8:	4634      	mov	r4, r6
 80131ea:	6876      	ldr	r6, [r6, #4]
 80131ec:	e7b4      	b.n	8013158 <_malloc_r+0x4c>
 80131ee:	4613      	mov	r3, r2
 80131f0:	e7cc      	b.n	801318c <_malloc_r+0x80>
 80131f2:	230c      	movs	r3, #12
 80131f4:	603b      	str	r3, [r7, #0]
 80131f6:	4638      	mov	r0, r7
 80131f8:	f000 f8bc 	bl	8013374 <__malloc_unlock>
 80131fc:	e797      	b.n	801312e <_malloc_r+0x22>
 80131fe:	6025      	str	r5, [r4, #0]
 8013200:	e7dc      	b.n	80131bc <_malloc_r+0xb0>
 8013202:	605b      	str	r3, [r3, #4]
 8013204:	deff      	udf	#255	; 0xff
 8013206:	bf00      	nop
 8013208:	200028a0 	.word	0x200028a0

0801320c <__sflush_r>:
 801320c:	898a      	ldrh	r2, [r1, #12]
 801320e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013212:	4605      	mov	r5, r0
 8013214:	0710      	lsls	r0, r2, #28
 8013216:	460c      	mov	r4, r1
 8013218:	d458      	bmi.n	80132cc <__sflush_r+0xc0>
 801321a:	684b      	ldr	r3, [r1, #4]
 801321c:	2b00      	cmp	r3, #0
 801321e:	dc05      	bgt.n	801322c <__sflush_r+0x20>
 8013220:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013222:	2b00      	cmp	r3, #0
 8013224:	dc02      	bgt.n	801322c <__sflush_r+0x20>
 8013226:	2000      	movs	r0, #0
 8013228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801322c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801322e:	2e00      	cmp	r6, #0
 8013230:	d0f9      	beq.n	8013226 <__sflush_r+0x1a>
 8013232:	2300      	movs	r3, #0
 8013234:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013238:	682f      	ldr	r7, [r5, #0]
 801323a:	6a21      	ldr	r1, [r4, #32]
 801323c:	602b      	str	r3, [r5, #0]
 801323e:	d032      	beq.n	80132a6 <__sflush_r+0x9a>
 8013240:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013242:	89a3      	ldrh	r3, [r4, #12]
 8013244:	075a      	lsls	r2, r3, #29
 8013246:	d505      	bpl.n	8013254 <__sflush_r+0x48>
 8013248:	6863      	ldr	r3, [r4, #4]
 801324a:	1ac0      	subs	r0, r0, r3
 801324c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801324e:	b10b      	cbz	r3, 8013254 <__sflush_r+0x48>
 8013250:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013252:	1ac0      	subs	r0, r0, r3
 8013254:	2300      	movs	r3, #0
 8013256:	4602      	mov	r2, r0
 8013258:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801325a:	6a21      	ldr	r1, [r4, #32]
 801325c:	4628      	mov	r0, r5
 801325e:	47b0      	blx	r6
 8013260:	1c43      	adds	r3, r0, #1
 8013262:	89a3      	ldrh	r3, [r4, #12]
 8013264:	d106      	bne.n	8013274 <__sflush_r+0x68>
 8013266:	6829      	ldr	r1, [r5, #0]
 8013268:	291d      	cmp	r1, #29
 801326a:	d82b      	bhi.n	80132c4 <__sflush_r+0xb8>
 801326c:	4a29      	ldr	r2, [pc, #164]	; (8013314 <__sflush_r+0x108>)
 801326e:	410a      	asrs	r2, r1
 8013270:	07d6      	lsls	r6, r2, #31
 8013272:	d427      	bmi.n	80132c4 <__sflush_r+0xb8>
 8013274:	2200      	movs	r2, #0
 8013276:	6062      	str	r2, [r4, #4]
 8013278:	04d9      	lsls	r1, r3, #19
 801327a:	6922      	ldr	r2, [r4, #16]
 801327c:	6022      	str	r2, [r4, #0]
 801327e:	d504      	bpl.n	801328a <__sflush_r+0x7e>
 8013280:	1c42      	adds	r2, r0, #1
 8013282:	d101      	bne.n	8013288 <__sflush_r+0x7c>
 8013284:	682b      	ldr	r3, [r5, #0]
 8013286:	b903      	cbnz	r3, 801328a <__sflush_r+0x7e>
 8013288:	6560      	str	r0, [r4, #84]	; 0x54
 801328a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801328c:	602f      	str	r7, [r5, #0]
 801328e:	2900      	cmp	r1, #0
 8013290:	d0c9      	beq.n	8013226 <__sflush_r+0x1a>
 8013292:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013296:	4299      	cmp	r1, r3
 8013298:	d002      	beq.n	80132a0 <__sflush_r+0x94>
 801329a:	4628      	mov	r0, r5
 801329c:	f000 fd02 	bl	8013ca4 <_free_r>
 80132a0:	2000      	movs	r0, #0
 80132a2:	6360      	str	r0, [r4, #52]	; 0x34
 80132a4:	e7c0      	b.n	8013228 <__sflush_r+0x1c>
 80132a6:	2301      	movs	r3, #1
 80132a8:	4628      	mov	r0, r5
 80132aa:	47b0      	blx	r6
 80132ac:	1c41      	adds	r1, r0, #1
 80132ae:	d1c8      	bne.n	8013242 <__sflush_r+0x36>
 80132b0:	682b      	ldr	r3, [r5, #0]
 80132b2:	2b00      	cmp	r3, #0
 80132b4:	d0c5      	beq.n	8013242 <__sflush_r+0x36>
 80132b6:	2b1d      	cmp	r3, #29
 80132b8:	d001      	beq.n	80132be <__sflush_r+0xb2>
 80132ba:	2b16      	cmp	r3, #22
 80132bc:	d101      	bne.n	80132c2 <__sflush_r+0xb6>
 80132be:	602f      	str	r7, [r5, #0]
 80132c0:	e7b1      	b.n	8013226 <__sflush_r+0x1a>
 80132c2:	89a3      	ldrh	r3, [r4, #12]
 80132c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80132c8:	81a3      	strh	r3, [r4, #12]
 80132ca:	e7ad      	b.n	8013228 <__sflush_r+0x1c>
 80132cc:	690f      	ldr	r7, [r1, #16]
 80132ce:	2f00      	cmp	r7, #0
 80132d0:	d0a9      	beq.n	8013226 <__sflush_r+0x1a>
 80132d2:	0793      	lsls	r3, r2, #30
 80132d4:	680e      	ldr	r6, [r1, #0]
 80132d6:	bf08      	it	eq
 80132d8:	694b      	ldreq	r3, [r1, #20]
 80132da:	600f      	str	r7, [r1, #0]
 80132dc:	bf18      	it	ne
 80132de:	2300      	movne	r3, #0
 80132e0:	eba6 0807 	sub.w	r8, r6, r7
 80132e4:	608b      	str	r3, [r1, #8]
 80132e6:	f1b8 0f00 	cmp.w	r8, #0
 80132ea:	dd9c      	ble.n	8013226 <__sflush_r+0x1a>
 80132ec:	6a21      	ldr	r1, [r4, #32]
 80132ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80132f0:	4643      	mov	r3, r8
 80132f2:	463a      	mov	r2, r7
 80132f4:	4628      	mov	r0, r5
 80132f6:	47b0      	blx	r6
 80132f8:	2800      	cmp	r0, #0
 80132fa:	dc06      	bgt.n	801330a <__sflush_r+0xfe>
 80132fc:	89a3      	ldrh	r3, [r4, #12]
 80132fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013302:	81a3      	strh	r3, [r4, #12]
 8013304:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013308:	e78e      	b.n	8013228 <__sflush_r+0x1c>
 801330a:	4407      	add	r7, r0
 801330c:	eba8 0800 	sub.w	r8, r8, r0
 8013310:	e7e9      	b.n	80132e6 <__sflush_r+0xda>
 8013312:	bf00      	nop
 8013314:	dfbffffe 	.word	0xdfbffffe

08013318 <_fflush_r>:
 8013318:	b538      	push	{r3, r4, r5, lr}
 801331a:	690b      	ldr	r3, [r1, #16]
 801331c:	4605      	mov	r5, r0
 801331e:	460c      	mov	r4, r1
 8013320:	b913      	cbnz	r3, 8013328 <_fflush_r+0x10>
 8013322:	2500      	movs	r5, #0
 8013324:	4628      	mov	r0, r5
 8013326:	bd38      	pop	{r3, r4, r5, pc}
 8013328:	b118      	cbz	r0, 8013332 <_fflush_r+0x1a>
 801332a:	6a03      	ldr	r3, [r0, #32]
 801332c:	b90b      	cbnz	r3, 8013332 <_fflush_r+0x1a>
 801332e:	f7fe fe75 	bl	801201c <__sinit>
 8013332:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013336:	2b00      	cmp	r3, #0
 8013338:	d0f3      	beq.n	8013322 <_fflush_r+0xa>
 801333a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801333c:	07d0      	lsls	r0, r2, #31
 801333e:	d404      	bmi.n	801334a <_fflush_r+0x32>
 8013340:	0599      	lsls	r1, r3, #22
 8013342:	d402      	bmi.n	801334a <_fflush_r+0x32>
 8013344:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013346:	f7fe fed5 	bl	80120f4 <__retarget_lock_acquire_recursive>
 801334a:	4628      	mov	r0, r5
 801334c:	4621      	mov	r1, r4
 801334e:	f7ff ff5d 	bl	801320c <__sflush_r>
 8013352:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013354:	07da      	lsls	r2, r3, #31
 8013356:	4605      	mov	r5, r0
 8013358:	d4e4      	bmi.n	8013324 <_fflush_r+0xc>
 801335a:	89a3      	ldrh	r3, [r4, #12]
 801335c:	059b      	lsls	r3, r3, #22
 801335e:	d4e1      	bmi.n	8013324 <_fflush_r+0xc>
 8013360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013362:	f7fe fec8 	bl	80120f6 <__retarget_lock_release_recursive>
 8013366:	e7dd      	b.n	8013324 <_fflush_r+0xc>

08013368 <__malloc_lock>:
 8013368:	4801      	ldr	r0, [pc, #4]	; (8013370 <__malloc_lock+0x8>)
 801336a:	f7fe bec3 	b.w	80120f4 <__retarget_lock_acquire_recursive>
 801336e:	bf00      	nop
 8013370:	2000289c 	.word	0x2000289c

08013374 <__malloc_unlock>:
 8013374:	4801      	ldr	r0, [pc, #4]	; (801337c <__malloc_unlock+0x8>)
 8013376:	f7fe bebe 	b.w	80120f6 <__retarget_lock_release_recursive>
 801337a:	bf00      	nop
 801337c:	2000289c 	.word	0x2000289c

08013380 <_Balloc>:
 8013380:	b570      	push	{r4, r5, r6, lr}
 8013382:	69c6      	ldr	r6, [r0, #28]
 8013384:	4604      	mov	r4, r0
 8013386:	460d      	mov	r5, r1
 8013388:	b976      	cbnz	r6, 80133a8 <_Balloc+0x28>
 801338a:	2010      	movs	r0, #16
 801338c:	f7ff fe96 	bl	80130bc <malloc>
 8013390:	4602      	mov	r2, r0
 8013392:	61e0      	str	r0, [r4, #28]
 8013394:	b920      	cbnz	r0, 80133a0 <_Balloc+0x20>
 8013396:	4b18      	ldr	r3, [pc, #96]	; (80133f8 <_Balloc+0x78>)
 8013398:	4818      	ldr	r0, [pc, #96]	; (80133fc <_Balloc+0x7c>)
 801339a:	216b      	movs	r1, #107	; 0x6b
 801339c:	f000 fc4e 	bl	8013c3c <__assert_func>
 80133a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80133a4:	6006      	str	r6, [r0, #0]
 80133a6:	60c6      	str	r6, [r0, #12]
 80133a8:	69e6      	ldr	r6, [r4, #28]
 80133aa:	68f3      	ldr	r3, [r6, #12]
 80133ac:	b183      	cbz	r3, 80133d0 <_Balloc+0x50>
 80133ae:	69e3      	ldr	r3, [r4, #28]
 80133b0:	68db      	ldr	r3, [r3, #12]
 80133b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80133b6:	b9b8      	cbnz	r0, 80133e8 <_Balloc+0x68>
 80133b8:	2101      	movs	r1, #1
 80133ba:	fa01 f605 	lsl.w	r6, r1, r5
 80133be:	1d72      	adds	r2, r6, #5
 80133c0:	0092      	lsls	r2, r2, #2
 80133c2:	4620      	mov	r0, r4
 80133c4:	f000 fc58 	bl	8013c78 <_calloc_r>
 80133c8:	b160      	cbz	r0, 80133e4 <_Balloc+0x64>
 80133ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80133ce:	e00e      	b.n	80133ee <_Balloc+0x6e>
 80133d0:	2221      	movs	r2, #33	; 0x21
 80133d2:	2104      	movs	r1, #4
 80133d4:	4620      	mov	r0, r4
 80133d6:	f000 fc4f 	bl	8013c78 <_calloc_r>
 80133da:	69e3      	ldr	r3, [r4, #28]
 80133dc:	60f0      	str	r0, [r6, #12]
 80133de:	68db      	ldr	r3, [r3, #12]
 80133e0:	2b00      	cmp	r3, #0
 80133e2:	d1e4      	bne.n	80133ae <_Balloc+0x2e>
 80133e4:	2000      	movs	r0, #0
 80133e6:	bd70      	pop	{r4, r5, r6, pc}
 80133e8:	6802      	ldr	r2, [r0, #0]
 80133ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80133ee:	2300      	movs	r3, #0
 80133f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80133f4:	e7f7      	b.n	80133e6 <_Balloc+0x66>
 80133f6:	bf00      	nop
 80133f8:	080158e5 	.word	0x080158e5
 80133fc:	08015976 	.word	0x08015976

08013400 <_Bfree>:
 8013400:	b570      	push	{r4, r5, r6, lr}
 8013402:	69c6      	ldr	r6, [r0, #28]
 8013404:	4605      	mov	r5, r0
 8013406:	460c      	mov	r4, r1
 8013408:	b976      	cbnz	r6, 8013428 <_Bfree+0x28>
 801340a:	2010      	movs	r0, #16
 801340c:	f7ff fe56 	bl	80130bc <malloc>
 8013410:	4602      	mov	r2, r0
 8013412:	61e8      	str	r0, [r5, #28]
 8013414:	b920      	cbnz	r0, 8013420 <_Bfree+0x20>
 8013416:	4b09      	ldr	r3, [pc, #36]	; (801343c <_Bfree+0x3c>)
 8013418:	4809      	ldr	r0, [pc, #36]	; (8013440 <_Bfree+0x40>)
 801341a:	218f      	movs	r1, #143	; 0x8f
 801341c:	f000 fc0e 	bl	8013c3c <__assert_func>
 8013420:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013424:	6006      	str	r6, [r0, #0]
 8013426:	60c6      	str	r6, [r0, #12]
 8013428:	b13c      	cbz	r4, 801343a <_Bfree+0x3a>
 801342a:	69eb      	ldr	r3, [r5, #28]
 801342c:	6862      	ldr	r2, [r4, #4]
 801342e:	68db      	ldr	r3, [r3, #12]
 8013430:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013434:	6021      	str	r1, [r4, #0]
 8013436:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801343a:	bd70      	pop	{r4, r5, r6, pc}
 801343c:	080158e5 	.word	0x080158e5
 8013440:	08015976 	.word	0x08015976

08013444 <__multadd>:
 8013444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013448:	690d      	ldr	r5, [r1, #16]
 801344a:	4607      	mov	r7, r0
 801344c:	460c      	mov	r4, r1
 801344e:	461e      	mov	r6, r3
 8013450:	f101 0c14 	add.w	ip, r1, #20
 8013454:	2000      	movs	r0, #0
 8013456:	f8dc 3000 	ldr.w	r3, [ip]
 801345a:	b299      	uxth	r1, r3
 801345c:	fb02 6101 	mla	r1, r2, r1, r6
 8013460:	0c1e      	lsrs	r6, r3, #16
 8013462:	0c0b      	lsrs	r3, r1, #16
 8013464:	fb02 3306 	mla	r3, r2, r6, r3
 8013468:	b289      	uxth	r1, r1
 801346a:	3001      	adds	r0, #1
 801346c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013470:	4285      	cmp	r5, r0
 8013472:	f84c 1b04 	str.w	r1, [ip], #4
 8013476:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801347a:	dcec      	bgt.n	8013456 <__multadd+0x12>
 801347c:	b30e      	cbz	r6, 80134c2 <__multadd+0x7e>
 801347e:	68a3      	ldr	r3, [r4, #8]
 8013480:	42ab      	cmp	r3, r5
 8013482:	dc19      	bgt.n	80134b8 <__multadd+0x74>
 8013484:	6861      	ldr	r1, [r4, #4]
 8013486:	4638      	mov	r0, r7
 8013488:	3101      	adds	r1, #1
 801348a:	f7ff ff79 	bl	8013380 <_Balloc>
 801348e:	4680      	mov	r8, r0
 8013490:	b928      	cbnz	r0, 801349e <__multadd+0x5a>
 8013492:	4602      	mov	r2, r0
 8013494:	4b0c      	ldr	r3, [pc, #48]	; (80134c8 <__multadd+0x84>)
 8013496:	480d      	ldr	r0, [pc, #52]	; (80134cc <__multadd+0x88>)
 8013498:	21ba      	movs	r1, #186	; 0xba
 801349a:	f000 fbcf 	bl	8013c3c <__assert_func>
 801349e:	6922      	ldr	r2, [r4, #16]
 80134a0:	3202      	adds	r2, #2
 80134a2:	f104 010c 	add.w	r1, r4, #12
 80134a6:	0092      	lsls	r2, r2, #2
 80134a8:	300c      	adds	r0, #12
 80134aa:	f7fe fe25 	bl	80120f8 <memcpy>
 80134ae:	4621      	mov	r1, r4
 80134b0:	4638      	mov	r0, r7
 80134b2:	f7ff ffa5 	bl	8013400 <_Bfree>
 80134b6:	4644      	mov	r4, r8
 80134b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80134bc:	3501      	adds	r5, #1
 80134be:	615e      	str	r6, [r3, #20]
 80134c0:	6125      	str	r5, [r4, #16]
 80134c2:	4620      	mov	r0, r4
 80134c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80134c8:	08015954 	.word	0x08015954
 80134cc:	08015976 	.word	0x08015976

080134d0 <__hi0bits>:
 80134d0:	0c03      	lsrs	r3, r0, #16
 80134d2:	041b      	lsls	r3, r3, #16
 80134d4:	b9d3      	cbnz	r3, 801350c <__hi0bits+0x3c>
 80134d6:	0400      	lsls	r0, r0, #16
 80134d8:	2310      	movs	r3, #16
 80134da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80134de:	bf04      	itt	eq
 80134e0:	0200      	lsleq	r0, r0, #8
 80134e2:	3308      	addeq	r3, #8
 80134e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80134e8:	bf04      	itt	eq
 80134ea:	0100      	lsleq	r0, r0, #4
 80134ec:	3304      	addeq	r3, #4
 80134ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80134f2:	bf04      	itt	eq
 80134f4:	0080      	lsleq	r0, r0, #2
 80134f6:	3302      	addeq	r3, #2
 80134f8:	2800      	cmp	r0, #0
 80134fa:	db05      	blt.n	8013508 <__hi0bits+0x38>
 80134fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013500:	f103 0301 	add.w	r3, r3, #1
 8013504:	bf08      	it	eq
 8013506:	2320      	moveq	r3, #32
 8013508:	4618      	mov	r0, r3
 801350a:	4770      	bx	lr
 801350c:	2300      	movs	r3, #0
 801350e:	e7e4      	b.n	80134da <__hi0bits+0xa>

08013510 <__lo0bits>:
 8013510:	6803      	ldr	r3, [r0, #0]
 8013512:	f013 0207 	ands.w	r2, r3, #7
 8013516:	d00c      	beq.n	8013532 <__lo0bits+0x22>
 8013518:	07d9      	lsls	r1, r3, #31
 801351a:	d422      	bmi.n	8013562 <__lo0bits+0x52>
 801351c:	079a      	lsls	r2, r3, #30
 801351e:	bf49      	itett	mi
 8013520:	085b      	lsrmi	r3, r3, #1
 8013522:	089b      	lsrpl	r3, r3, #2
 8013524:	6003      	strmi	r3, [r0, #0]
 8013526:	2201      	movmi	r2, #1
 8013528:	bf5c      	itt	pl
 801352a:	6003      	strpl	r3, [r0, #0]
 801352c:	2202      	movpl	r2, #2
 801352e:	4610      	mov	r0, r2
 8013530:	4770      	bx	lr
 8013532:	b299      	uxth	r1, r3
 8013534:	b909      	cbnz	r1, 801353a <__lo0bits+0x2a>
 8013536:	0c1b      	lsrs	r3, r3, #16
 8013538:	2210      	movs	r2, #16
 801353a:	b2d9      	uxtb	r1, r3
 801353c:	b909      	cbnz	r1, 8013542 <__lo0bits+0x32>
 801353e:	3208      	adds	r2, #8
 8013540:	0a1b      	lsrs	r3, r3, #8
 8013542:	0719      	lsls	r1, r3, #28
 8013544:	bf04      	itt	eq
 8013546:	091b      	lsreq	r3, r3, #4
 8013548:	3204      	addeq	r2, #4
 801354a:	0799      	lsls	r1, r3, #30
 801354c:	bf04      	itt	eq
 801354e:	089b      	lsreq	r3, r3, #2
 8013550:	3202      	addeq	r2, #2
 8013552:	07d9      	lsls	r1, r3, #31
 8013554:	d403      	bmi.n	801355e <__lo0bits+0x4e>
 8013556:	085b      	lsrs	r3, r3, #1
 8013558:	f102 0201 	add.w	r2, r2, #1
 801355c:	d003      	beq.n	8013566 <__lo0bits+0x56>
 801355e:	6003      	str	r3, [r0, #0]
 8013560:	e7e5      	b.n	801352e <__lo0bits+0x1e>
 8013562:	2200      	movs	r2, #0
 8013564:	e7e3      	b.n	801352e <__lo0bits+0x1e>
 8013566:	2220      	movs	r2, #32
 8013568:	e7e1      	b.n	801352e <__lo0bits+0x1e>
	...

0801356c <__i2b>:
 801356c:	b510      	push	{r4, lr}
 801356e:	460c      	mov	r4, r1
 8013570:	2101      	movs	r1, #1
 8013572:	f7ff ff05 	bl	8013380 <_Balloc>
 8013576:	4602      	mov	r2, r0
 8013578:	b928      	cbnz	r0, 8013586 <__i2b+0x1a>
 801357a:	4b05      	ldr	r3, [pc, #20]	; (8013590 <__i2b+0x24>)
 801357c:	4805      	ldr	r0, [pc, #20]	; (8013594 <__i2b+0x28>)
 801357e:	f240 1145 	movw	r1, #325	; 0x145
 8013582:	f000 fb5b 	bl	8013c3c <__assert_func>
 8013586:	2301      	movs	r3, #1
 8013588:	6144      	str	r4, [r0, #20]
 801358a:	6103      	str	r3, [r0, #16]
 801358c:	bd10      	pop	{r4, pc}
 801358e:	bf00      	nop
 8013590:	08015954 	.word	0x08015954
 8013594:	08015976 	.word	0x08015976

08013598 <__multiply>:
 8013598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801359c:	4691      	mov	r9, r2
 801359e:	690a      	ldr	r2, [r1, #16]
 80135a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80135a4:	429a      	cmp	r2, r3
 80135a6:	bfb8      	it	lt
 80135a8:	460b      	movlt	r3, r1
 80135aa:	460c      	mov	r4, r1
 80135ac:	bfbc      	itt	lt
 80135ae:	464c      	movlt	r4, r9
 80135b0:	4699      	movlt	r9, r3
 80135b2:	6927      	ldr	r7, [r4, #16]
 80135b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80135b8:	68a3      	ldr	r3, [r4, #8]
 80135ba:	6861      	ldr	r1, [r4, #4]
 80135bc:	eb07 060a 	add.w	r6, r7, sl
 80135c0:	42b3      	cmp	r3, r6
 80135c2:	b085      	sub	sp, #20
 80135c4:	bfb8      	it	lt
 80135c6:	3101      	addlt	r1, #1
 80135c8:	f7ff feda 	bl	8013380 <_Balloc>
 80135cc:	b930      	cbnz	r0, 80135dc <__multiply+0x44>
 80135ce:	4602      	mov	r2, r0
 80135d0:	4b44      	ldr	r3, [pc, #272]	; (80136e4 <__multiply+0x14c>)
 80135d2:	4845      	ldr	r0, [pc, #276]	; (80136e8 <__multiply+0x150>)
 80135d4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80135d8:	f000 fb30 	bl	8013c3c <__assert_func>
 80135dc:	f100 0514 	add.w	r5, r0, #20
 80135e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80135e4:	462b      	mov	r3, r5
 80135e6:	2200      	movs	r2, #0
 80135e8:	4543      	cmp	r3, r8
 80135ea:	d321      	bcc.n	8013630 <__multiply+0x98>
 80135ec:	f104 0314 	add.w	r3, r4, #20
 80135f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80135f4:	f109 0314 	add.w	r3, r9, #20
 80135f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80135fc:	9202      	str	r2, [sp, #8]
 80135fe:	1b3a      	subs	r2, r7, r4
 8013600:	3a15      	subs	r2, #21
 8013602:	f022 0203 	bic.w	r2, r2, #3
 8013606:	3204      	adds	r2, #4
 8013608:	f104 0115 	add.w	r1, r4, #21
 801360c:	428f      	cmp	r7, r1
 801360e:	bf38      	it	cc
 8013610:	2204      	movcc	r2, #4
 8013612:	9201      	str	r2, [sp, #4]
 8013614:	9a02      	ldr	r2, [sp, #8]
 8013616:	9303      	str	r3, [sp, #12]
 8013618:	429a      	cmp	r2, r3
 801361a:	d80c      	bhi.n	8013636 <__multiply+0x9e>
 801361c:	2e00      	cmp	r6, #0
 801361e:	dd03      	ble.n	8013628 <__multiply+0x90>
 8013620:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013624:	2b00      	cmp	r3, #0
 8013626:	d05b      	beq.n	80136e0 <__multiply+0x148>
 8013628:	6106      	str	r6, [r0, #16]
 801362a:	b005      	add	sp, #20
 801362c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013630:	f843 2b04 	str.w	r2, [r3], #4
 8013634:	e7d8      	b.n	80135e8 <__multiply+0x50>
 8013636:	f8b3 a000 	ldrh.w	sl, [r3]
 801363a:	f1ba 0f00 	cmp.w	sl, #0
 801363e:	d024      	beq.n	801368a <__multiply+0xf2>
 8013640:	f104 0e14 	add.w	lr, r4, #20
 8013644:	46a9      	mov	r9, r5
 8013646:	f04f 0c00 	mov.w	ip, #0
 801364a:	f85e 2b04 	ldr.w	r2, [lr], #4
 801364e:	f8d9 1000 	ldr.w	r1, [r9]
 8013652:	fa1f fb82 	uxth.w	fp, r2
 8013656:	b289      	uxth	r1, r1
 8013658:	fb0a 110b 	mla	r1, sl, fp, r1
 801365c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013660:	f8d9 2000 	ldr.w	r2, [r9]
 8013664:	4461      	add	r1, ip
 8013666:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801366a:	fb0a c20b 	mla	r2, sl, fp, ip
 801366e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013672:	b289      	uxth	r1, r1
 8013674:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013678:	4577      	cmp	r7, lr
 801367a:	f849 1b04 	str.w	r1, [r9], #4
 801367e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013682:	d8e2      	bhi.n	801364a <__multiply+0xb2>
 8013684:	9a01      	ldr	r2, [sp, #4]
 8013686:	f845 c002 	str.w	ip, [r5, r2]
 801368a:	9a03      	ldr	r2, [sp, #12]
 801368c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013690:	3304      	adds	r3, #4
 8013692:	f1b9 0f00 	cmp.w	r9, #0
 8013696:	d021      	beq.n	80136dc <__multiply+0x144>
 8013698:	6829      	ldr	r1, [r5, #0]
 801369a:	f104 0c14 	add.w	ip, r4, #20
 801369e:	46ae      	mov	lr, r5
 80136a0:	f04f 0a00 	mov.w	sl, #0
 80136a4:	f8bc b000 	ldrh.w	fp, [ip]
 80136a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80136ac:	fb09 220b 	mla	r2, r9, fp, r2
 80136b0:	4452      	add	r2, sl
 80136b2:	b289      	uxth	r1, r1
 80136b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80136b8:	f84e 1b04 	str.w	r1, [lr], #4
 80136bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80136c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80136c4:	f8be 1000 	ldrh.w	r1, [lr]
 80136c8:	fb09 110a 	mla	r1, r9, sl, r1
 80136cc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80136d0:	4567      	cmp	r7, ip
 80136d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80136d6:	d8e5      	bhi.n	80136a4 <__multiply+0x10c>
 80136d8:	9a01      	ldr	r2, [sp, #4]
 80136da:	50a9      	str	r1, [r5, r2]
 80136dc:	3504      	adds	r5, #4
 80136de:	e799      	b.n	8013614 <__multiply+0x7c>
 80136e0:	3e01      	subs	r6, #1
 80136e2:	e79b      	b.n	801361c <__multiply+0x84>
 80136e4:	08015954 	.word	0x08015954
 80136e8:	08015976 	.word	0x08015976

080136ec <__pow5mult>:
 80136ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80136f0:	4615      	mov	r5, r2
 80136f2:	f012 0203 	ands.w	r2, r2, #3
 80136f6:	4606      	mov	r6, r0
 80136f8:	460f      	mov	r7, r1
 80136fa:	d007      	beq.n	801370c <__pow5mult+0x20>
 80136fc:	4c25      	ldr	r4, [pc, #148]	; (8013794 <__pow5mult+0xa8>)
 80136fe:	3a01      	subs	r2, #1
 8013700:	2300      	movs	r3, #0
 8013702:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013706:	f7ff fe9d 	bl	8013444 <__multadd>
 801370a:	4607      	mov	r7, r0
 801370c:	10ad      	asrs	r5, r5, #2
 801370e:	d03d      	beq.n	801378c <__pow5mult+0xa0>
 8013710:	69f4      	ldr	r4, [r6, #28]
 8013712:	b97c      	cbnz	r4, 8013734 <__pow5mult+0x48>
 8013714:	2010      	movs	r0, #16
 8013716:	f7ff fcd1 	bl	80130bc <malloc>
 801371a:	4602      	mov	r2, r0
 801371c:	61f0      	str	r0, [r6, #28]
 801371e:	b928      	cbnz	r0, 801372c <__pow5mult+0x40>
 8013720:	4b1d      	ldr	r3, [pc, #116]	; (8013798 <__pow5mult+0xac>)
 8013722:	481e      	ldr	r0, [pc, #120]	; (801379c <__pow5mult+0xb0>)
 8013724:	f240 11b3 	movw	r1, #435	; 0x1b3
 8013728:	f000 fa88 	bl	8013c3c <__assert_func>
 801372c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013730:	6004      	str	r4, [r0, #0]
 8013732:	60c4      	str	r4, [r0, #12]
 8013734:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8013738:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801373c:	b94c      	cbnz	r4, 8013752 <__pow5mult+0x66>
 801373e:	f240 2171 	movw	r1, #625	; 0x271
 8013742:	4630      	mov	r0, r6
 8013744:	f7ff ff12 	bl	801356c <__i2b>
 8013748:	2300      	movs	r3, #0
 801374a:	f8c8 0008 	str.w	r0, [r8, #8]
 801374e:	4604      	mov	r4, r0
 8013750:	6003      	str	r3, [r0, #0]
 8013752:	f04f 0900 	mov.w	r9, #0
 8013756:	07eb      	lsls	r3, r5, #31
 8013758:	d50a      	bpl.n	8013770 <__pow5mult+0x84>
 801375a:	4639      	mov	r1, r7
 801375c:	4622      	mov	r2, r4
 801375e:	4630      	mov	r0, r6
 8013760:	f7ff ff1a 	bl	8013598 <__multiply>
 8013764:	4639      	mov	r1, r7
 8013766:	4680      	mov	r8, r0
 8013768:	4630      	mov	r0, r6
 801376a:	f7ff fe49 	bl	8013400 <_Bfree>
 801376e:	4647      	mov	r7, r8
 8013770:	106d      	asrs	r5, r5, #1
 8013772:	d00b      	beq.n	801378c <__pow5mult+0xa0>
 8013774:	6820      	ldr	r0, [r4, #0]
 8013776:	b938      	cbnz	r0, 8013788 <__pow5mult+0x9c>
 8013778:	4622      	mov	r2, r4
 801377a:	4621      	mov	r1, r4
 801377c:	4630      	mov	r0, r6
 801377e:	f7ff ff0b 	bl	8013598 <__multiply>
 8013782:	6020      	str	r0, [r4, #0]
 8013784:	f8c0 9000 	str.w	r9, [r0]
 8013788:	4604      	mov	r4, r0
 801378a:	e7e4      	b.n	8013756 <__pow5mult+0x6a>
 801378c:	4638      	mov	r0, r7
 801378e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013792:	bf00      	nop
 8013794:	08015ac0 	.word	0x08015ac0
 8013798:	080158e5 	.word	0x080158e5
 801379c:	08015976 	.word	0x08015976

080137a0 <__lshift>:
 80137a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137a4:	460c      	mov	r4, r1
 80137a6:	6849      	ldr	r1, [r1, #4]
 80137a8:	6923      	ldr	r3, [r4, #16]
 80137aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80137ae:	68a3      	ldr	r3, [r4, #8]
 80137b0:	4607      	mov	r7, r0
 80137b2:	4691      	mov	r9, r2
 80137b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80137b8:	f108 0601 	add.w	r6, r8, #1
 80137bc:	42b3      	cmp	r3, r6
 80137be:	db0b      	blt.n	80137d8 <__lshift+0x38>
 80137c0:	4638      	mov	r0, r7
 80137c2:	f7ff fddd 	bl	8013380 <_Balloc>
 80137c6:	4605      	mov	r5, r0
 80137c8:	b948      	cbnz	r0, 80137de <__lshift+0x3e>
 80137ca:	4602      	mov	r2, r0
 80137cc:	4b28      	ldr	r3, [pc, #160]	; (8013870 <__lshift+0xd0>)
 80137ce:	4829      	ldr	r0, [pc, #164]	; (8013874 <__lshift+0xd4>)
 80137d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80137d4:	f000 fa32 	bl	8013c3c <__assert_func>
 80137d8:	3101      	adds	r1, #1
 80137da:	005b      	lsls	r3, r3, #1
 80137dc:	e7ee      	b.n	80137bc <__lshift+0x1c>
 80137de:	2300      	movs	r3, #0
 80137e0:	f100 0114 	add.w	r1, r0, #20
 80137e4:	f100 0210 	add.w	r2, r0, #16
 80137e8:	4618      	mov	r0, r3
 80137ea:	4553      	cmp	r3, sl
 80137ec:	db33      	blt.n	8013856 <__lshift+0xb6>
 80137ee:	6920      	ldr	r0, [r4, #16]
 80137f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80137f4:	f104 0314 	add.w	r3, r4, #20
 80137f8:	f019 091f 	ands.w	r9, r9, #31
 80137fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013800:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8013804:	d02b      	beq.n	801385e <__lshift+0xbe>
 8013806:	f1c9 0e20 	rsb	lr, r9, #32
 801380a:	468a      	mov	sl, r1
 801380c:	2200      	movs	r2, #0
 801380e:	6818      	ldr	r0, [r3, #0]
 8013810:	fa00 f009 	lsl.w	r0, r0, r9
 8013814:	4310      	orrs	r0, r2
 8013816:	f84a 0b04 	str.w	r0, [sl], #4
 801381a:	f853 2b04 	ldr.w	r2, [r3], #4
 801381e:	459c      	cmp	ip, r3
 8013820:	fa22 f20e 	lsr.w	r2, r2, lr
 8013824:	d8f3      	bhi.n	801380e <__lshift+0x6e>
 8013826:	ebac 0304 	sub.w	r3, ip, r4
 801382a:	3b15      	subs	r3, #21
 801382c:	f023 0303 	bic.w	r3, r3, #3
 8013830:	3304      	adds	r3, #4
 8013832:	f104 0015 	add.w	r0, r4, #21
 8013836:	4584      	cmp	ip, r0
 8013838:	bf38      	it	cc
 801383a:	2304      	movcc	r3, #4
 801383c:	50ca      	str	r2, [r1, r3]
 801383e:	b10a      	cbz	r2, 8013844 <__lshift+0xa4>
 8013840:	f108 0602 	add.w	r6, r8, #2
 8013844:	3e01      	subs	r6, #1
 8013846:	4638      	mov	r0, r7
 8013848:	612e      	str	r6, [r5, #16]
 801384a:	4621      	mov	r1, r4
 801384c:	f7ff fdd8 	bl	8013400 <_Bfree>
 8013850:	4628      	mov	r0, r5
 8013852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013856:	f842 0f04 	str.w	r0, [r2, #4]!
 801385a:	3301      	adds	r3, #1
 801385c:	e7c5      	b.n	80137ea <__lshift+0x4a>
 801385e:	3904      	subs	r1, #4
 8013860:	f853 2b04 	ldr.w	r2, [r3], #4
 8013864:	f841 2f04 	str.w	r2, [r1, #4]!
 8013868:	459c      	cmp	ip, r3
 801386a:	d8f9      	bhi.n	8013860 <__lshift+0xc0>
 801386c:	e7ea      	b.n	8013844 <__lshift+0xa4>
 801386e:	bf00      	nop
 8013870:	08015954 	.word	0x08015954
 8013874:	08015976 	.word	0x08015976

08013878 <__mcmp>:
 8013878:	b530      	push	{r4, r5, lr}
 801387a:	6902      	ldr	r2, [r0, #16]
 801387c:	690c      	ldr	r4, [r1, #16]
 801387e:	1b12      	subs	r2, r2, r4
 8013880:	d10e      	bne.n	80138a0 <__mcmp+0x28>
 8013882:	f100 0314 	add.w	r3, r0, #20
 8013886:	3114      	adds	r1, #20
 8013888:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801388c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013890:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013894:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013898:	42a5      	cmp	r5, r4
 801389a:	d003      	beq.n	80138a4 <__mcmp+0x2c>
 801389c:	d305      	bcc.n	80138aa <__mcmp+0x32>
 801389e:	2201      	movs	r2, #1
 80138a0:	4610      	mov	r0, r2
 80138a2:	bd30      	pop	{r4, r5, pc}
 80138a4:	4283      	cmp	r3, r0
 80138a6:	d3f3      	bcc.n	8013890 <__mcmp+0x18>
 80138a8:	e7fa      	b.n	80138a0 <__mcmp+0x28>
 80138aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80138ae:	e7f7      	b.n	80138a0 <__mcmp+0x28>

080138b0 <__mdiff>:
 80138b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138b4:	460c      	mov	r4, r1
 80138b6:	4606      	mov	r6, r0
 80138b8:	4611      	mov	r1, r2
 80138ba:	4620      	mov	r0, r4
 80138bc:	4690      	mov	r8, r2
 80138be:	f7ff ffdb 	bl	8013878 <__mcmp>
 80138c2:	1e05      	subs	r5, r0, #0
 80138c4:	d110      	bne.n	80138e8 <__mdiff+0x38>
 80138c6:	4629      	mov	r1, r5
 80138c8:	4630      	mov	r0, r6
 80138ca:	f7ff fd59 	bl	8013380 <_Balloc>
 80138ce:	b930      	cbnz	r0, 80138de <__mdiff+0x2e>
 80138d0:	4b3a      	ldr	r3, [pc, #232]	; (80139bc <__mdiff+0x10c>)
 80138d2:	4602      	mov	r2, r0
 80138d4:	f240 2137 	movw	r1, #567	; 0x237
 80138d8:	4839      	ldr	r0, [pc, #228]	; (80139c0 <__mdiff+0x110>)
 80138da:	f000 f9af 	bl	8013c3c <__assert_func>
 80138de:	2301      	movs	r3, #1
 80138e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80138e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138e8:	bfa4      	itt	ge
 80138ea:	4643      	movge	r3, r8
 80138ec:	46a0      	movge	r8, r4
 80138ee:	4630      	mov	r0, r6
 80138f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80138f4:	bfa6      	itte	ge
 80138f6:	461c      	movge	r4, r3
 80138f8:	2500      	movge	r5, #0
 80138fa:	2501      	movlt	r5, #1
 80138fc:	f7ff fd40 	bl	8013380 <_Balloc>
 8013900:	b920      	cbnz	r0, 801390c <__mdiff+0x5c>
 8013902:	4b2e      	ldr	r3, [pc, #184]	; (80139bc <__mdiff+0x10c>)
 8013904:	4602      	mov	r2, r0
 8013906:	f240 2145 	movw	r1, #581	; 0x245
 801390a:	e7e5      	b.n	80138d8 <__mdiff+0x28>
 801390c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013910:	6926      	ldr	r6, [r4, #16]
 8013912:	60c5      	str	r5, [r0, #12]
 8013914:	f104 0914 	add.w	r9, r4, #20
 8013918:	f108 0514 	add.w	r5, r8, #20
 801391c:	f100 0e14 	add.w	lr, r0, #20
 8013920:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013924:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013928:	f108 0210 	add.w	r2, r8, #16
 801392c:	46f2      	mov	sl, lr
 801392e:	2100      	movs	r1, #0
 8013930:	f859 3b04 	ldr.w	r3, [r9], #4
 8013934:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013938:	fa11 f88b 	uxtah	r8, r1, fp
 801393c:	b299      	uxth	r1, r3
 801393e:	0c1b      	lsrs	r3, r3, #16
 8013940:	eba8 0801 	sub.w	r8, r8, r1
 8013944:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013948:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801394c:	fa1f f888 	uxth.w	r8, r8
 8013950:	1419      	asrs	r1, r3, #16
 8013952:	454e      	cmp	r6, r9
 8013954:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013958:	f84a 3b04 	str.w	r3, [sl], #4
 801395c:	d8e8      	bhi.n	8013930 <__mdiff+0x80>
 801395e:	1b33      	subs	r3, r6, r4
 8013960:	3b15      	subs	r3, #21
 8013962:	f023 0303 	bic.w	r3, r3, #3
 8013966:	3304      	adds	r3, #4
 8013968:	3415      	adds	r4, #21
 801396a:	42a6      	cmp	r6, r4
 801396c:	bf38      	it	cc
 801396e:	2304      	movcc	r3, #4
 8013970:	441d      	add	r5, r3
 8013972:	4473      	add	r3, lr
 8013974:	469e      	mov	lr, r3
 8013976:	462e      	mov	r6, r5
 8013978:	4566      	cmp	r6, ip
 801397a:	d30e      	bcc.n	801399a <__mdiff+0xea>
 801397c:	f10c 0203 	add.w	r2, ip, #3
 8013980:	1b52      	subs	r2, r2, r5
 8013982:	f022 0203 	bic.w	r2, r2, #3
 8013986:	3d03      	subs	r5, #3
 8013988:	45ac      	cmp	ip, r5
 801398a:	bf38      	it	cc
 801398c:	2200      	movcc	r2, #0
 801398e:	4413      	add	r3, r2
 8013990:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8013994:	b17a      	cbz	r2, 80139b6 <__mdiff+0x106>
 8013996:	6107      	str	r7, [r0, #16]
 8013998:	e7a4      	b.n	80138e4 <__mdiff+0x34>
 801399a:	f856 8b04 	ldr.w	r8, [r6], #4
 801399e:	fa11 f288 	uxtah	r2, r1, r8
 80139a2:	1414      	asrs	r4, r2, #16
 80139a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80139a8:	b292      	uxth	r2, r2
 80139aa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80139ae:	f84e 2b04 	str.w	r2, [lr], #4
 80139b2:	1421      	asrs	r1, r4, #16
 80139b4:	e7e0      	b.n	8013978 <__mdiff+0xc8>
 80139b6:	3f01      	subs	r7, #1
 80139b8:	e7ea      	b.n	8013990 <__mdiff+0xe0>
 80139ba:	bf00      	nop
 80139bc:	08015954 	.word	0x08015954
 80139c0:	08015976 	.word	0x08015976

080139c4 <__d2b>:
 80139c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80139c8:	460f      	mov	r7, r1
 80139ca:	2101      	movs	r1, #1
 80139cc:	ec59 8b10 	vmov	r8, r9, d0
 80139d0:	4616      	mov	r6, r2
 80139d2:	f7ff fcd5 	bl	8013380 <_Balloc>
 80139d6:	4604      	mov	r4, r0
 80139d8:	b930      	cbnz	r0, 80139e8 <__d2b+0x24>
 80139da:	4602      	mov	r2, r0
 80139dc:	4b24      	ldr	r3, [pc, #144]	; (8013a70 <__d2b+0xac>)
 80139de:	4825      	ldr	r0, [pc, #148]	; (8013a74 <__d2b+0xb0>)
 80139e0:	f240 310f 	movw	r1, #783	; 0x30f
 80139e4:	f000 f92a 	bl	8013c3c <__assert_func>
 80139e8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80139ec:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80139f0:	bb2d      	cbnz	r5, 8013a3e <__d2b+0x7a>
 80139f2:	9301      	str	r3, [sp, #4]
 80139f4:	f1b8 0300 	subs.w	r3, r8, #0
 80139f8:	d026      	beq.n	8013a48 <__d2b+0x84>
 80139fa:	4668      	mov	r0, sp
 80139fc:	9300      	str	r3, [sp, #0]
 80139fe:	f7ff fd87 	bl	8013510 <__lo0bits>
 8013a02:	e9dd 1200 	ldrd	r1, r2, [sp]
 8013a06:	b1e8      	cbz	r0, 8013a44 <__d2b+0x80>
 8013a08:	f1c0 0320 	rsb	r3, r0, #32
 8013a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8013a10:	430b      	orrs	r3, r1
 8013a12:	40c2      	lsrs	r2, r0
 8013a14:	6163      	str	r3, [r4, #20]
 8013a16:	9201      	str	r2, [sp, #4]
 8013a18:	9b01      	ldr	r3, [sp, #4]
 8013a1a:	61a3      	str	r3, [r4, #24]
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	bf14      	ite	ne
 8013a20:	2202      	movne	r2, #2
 8013a22:	2201      	moveq	r2, #1
 8013a24:	6122      	str	r2, [r4, #16]
 8013a26:	b1bd      	cbz	r5, 8013a58 <__d2b+0x94>
 8013a28:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013a2c:	4405      	add	r5, r0
 8013a2e:	603d      	str	r5, [r7, #0]
 8013a30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013a34:	6030      	str	r0, [r6, #0]
 8013a36:	4620      	mov	r0, r4
 8013a38:	b003      	add	sp, #12
 8013a3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013a42:	e7d6      	b.n	80139f2 <__d2b+0x2e>
 8013a44:	6161      	str	r1, [r4, #20]
 8013a46:	e7e7      	b.n	8013a18 <__d2b+0x54>
 8013a48:	a801      	add	r0, sp, #4
 8013a4a:	f7ff fd61 	bl	8013510 <__lo0bits>
 8013a4e:	9b01      	ldr	r3, [sp, #4]
 8013a50:	6163      	str	r3, [r4, #20]
 8013a52:	3020      	adds	r0, #32
 8013a54:	2201      	movs	r2, #1
 8013a56:	e7e5      	b.n	8013a24 <__d2b+0x60>
 8013a58:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013a5c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013a60:	6038      	str	r0, [r7, #0]
 8013a62:	6918      	ldr	r0, [r3, #16]
 8013a64:	f7ff fd34 	bl	80134d0 <__hi0bits>
 8013a68:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013a6c:	e7e2      	b.n	8013a34 <__d2b+0x70>
 8013a6e:	bf00      	nop
 8013a70:	08015954 	.word	0x08015954
 8013a74:	08015976 	.word	0x08015976

08013a78 <__sread>:
 8013a78:	b510      	push	{r4, lr}
 8013a7a:	460c      	mov	r4, r1
 8013a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013a80:	f000 f8a8 	bl	8013bd4 <_read_r>
 8013a84:	2800      	cmp	r0, #0
 8013a86:	bfab      	itete	ge
 8013a88:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013a8a:	89a3      	ldrhlt	r3, [r4, #12]
 8013a8c:	181b      	addge	r3, r3, r0
 8013a8e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013a92:	bfac      	ite	ge
 8013a94:	6563      	strge	r3, [r4, #84]	; 0x54
 8013a96:	81a3      	strhlt	r3, [r4, #12]
 8013a98:	bd10      	pop	{r4, pc}

08013a9a <__swrite>:
 8013a9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013a9e:	461f      	mov	r7, r3
 8013aa0:	898b      	ldrh	r3, [r1, #12]
 8013aa2:	05db      	lsls	r3, r3, #23
 8013aa4:	4605      	mov	r5, r0
 8013aa6:	460c      	mov	r4, r1
 8013aa8:	4616      	mov	r6, r2
 8013aaa:	d505      	bpl.n	8013ab8 <__swrite+0x1e>
 8013aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ab0:	2302      	movs	r3, #2
 8013ab2:	2200      	movs	r2, #0
 8013ab4:	f000 f87c 	bl	8013bb0 <_lseek_r>
 8013ab8:	89a3      	ldrh	r3, [r4, #12]
 8013aba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013abe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013ac2:	81a3      	strh	r3, [r4, #12]
 8013ac4:	4632      	mov	r2, r6
 8013ac6:	463b      	mov	r3, r7
 8013ac8:	4628      	mov	r0, r5
 8013aca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013ace:	f000 b8a3 	b.w	8013c18 <_write_r>

08013ad2 <__sseek>:
 8013ad2:	b510      	push	{r4, lr}
 8013ad4:	460c      	mov	r4, r1
 8013ad6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013ada:	f000 f869 	bl	8013bb0 <_lseek_r>
 8013ade:	1c43      	adds	r3, r0, #1
 8013ae0:	89a3      	ldrh	r3, [r4, #12]
 8013ae2:	bf15      	itete	ne
 8013ae4:	6560      	strne	r0, [r4, #84]	; 0x54
 8013ae6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013aea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013aee:	81a3      	strheq	r3, [r4, #12]
 8013af0:	bf18      	it	ne
 8013af2:	81a3      	strhne	r3, [r4, #12]
 8013af4:	bd10      	pop	{r4, pc}

08013af6 <__sclose>:
 8013af6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013afa:	f000 b849 	b.w	8013b90 <_close_r>

08013afe <_realloc_r>:
 8013afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013b02:	4680      	mov	r8, r0
 8013b04:	4614      	mov	r4, r2
 8013b06:	460e      	mov	r6, r1
 8013b08:	b921      	cbnz	r1, 8013b14 <_realloc_r+0x16>
 8013b0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013b0e:	4611      	mov	r1, r2
 8013b10:	f7ff bafc 	b.w	801310c <_malloc_r>
 8013b14:	b92a      	cbnz	r2, 8013b22 <_realloc_r+0x24>
 8013b16:	f000 f8c5 	bl	8013ca4 <_free_r>
 8013b1a:	4625      	mov	r5, r4
 8013b1c:	4628      	mov	r0, r5
 8013b1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013b22:	f000 f91d 	bl	8013d60 <_malloc_usable_size_r>
 8013b26:	4284      	cmp	r4, r0
 8013b28:	4607      	mov	r7, r0
 8013b2a:	d802      	bhi.n	8013b32 <_realloc_r+0x34>
 8013b2c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013b30:	d812      	bhi.n	8013b58 <_realloc_r+0x5a>
 8013b32:	4621      	mov	r1, r4
 8013b34:	4640      	mov	r0, r8
 8013b36:	f7ff fae9 	bl	801310c <_malloc_r>
 8013b3a:	4605      	mov	r5, r0
 8013b3c:	2800      	cmp	r0, #0
 8013b3e:	d0ed      	beq.n	8013b1c <_realloc_r+0x1e>
 8013b40:	42bc      	cmp	r4, r7
 8013b42:	4622      	mov	r2, r4
 8013b44:	4631      	mov	r1, r6
 8013b46:	bf28      	it	cs
 8013b48:	463a      	movcs	r2, r7
 8013b4a:	f7fe fad5 	bl	80120f8 <memcpy>
 8013b4e:	4631      	mov	r1, r6
 8013b50:	4640      	mov	r0, r8
 8013b52:	f000 f8a7 	bl	8013ca4 <_free_r>
 8013b56:	e7e1      	b.n	8013b1c <_realloc_r+0x1e>
 8013b58:	4635      	mov	r5, r6
 8013b5a:	e7df      	b.n	8013b1c <_realloc_r+0x1e>

08013b5c <memmove>:
 8013b5c:	4288      	cmp	r0, r1
 8013b5e:	b510      	push	{r4, lr}
 8013b60:	eb01 0402 	add.w	r4, r1, r2
 8013b64:	d902      	bls.n	8013b6c <memmove+0x10>
 8013b66:	4284      	cmp	r4, r0
 8013b68:	4623      	mov	r3, r4
 8013b6a:	d807      	bhi.n	8013b7c <memmove+0x20>
 8013b6c:	1e43      	subs	r3, r0, #1
 8013b6e:	42a1      	cmp	r1, r4
 8013b70:	d008      	beq.n	8013b84 <memmove+0x28>
 8013b72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013b7a:	e7f8      	b.n	8013b6e <memmove+0x12>
 8013b7c:	4402      	add	r2, r0
 8013b7e:	4601      	mov	r1, r0
 8013b80:	428a      	cmp	r2, r1
 8013b82:	d100      	bne.n	8013b86 <memmove+0x2a>
 8013b84:	bd10      	pop	{r4, pc}
 8013b86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013b8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013b8e:	e7f7      	b.n	8013b80 <memmove+0x24>

08013b90 <_close_r>:
 8013b90:	b538      	push	{r3, r4, r5, lr}
 8013b92:	4d06      	ldr	r5, [pc, #24]	; (8013bac <_close_r+0x1c>)
 8013b94:	2300      	movs	r3, #0
 8013b96:	4604      	mov	r4, r0
 8013b98:	4608      	mov	r0, r1
 8013b9a:	602b      	str	r3, [r5, #0]
 8013b9c:	f7ef fb2d 	bl	80031fa <_close>
 8013ba0:	1c43      	adds	r3, r0, #1
 8013ba2:	d102      	bne.n	8013baa <_close_r+0x1a>
 8013ba4:	682b      	ldr	r3, [r5, #0]
 8013ba6:	b103      	cbz	r3, 8013baa <_close_r+0x1a>
 8013ba8:	6023      	str	r3, [r4, #0]
 8013baa:	bd38      	pop	{r3, r4, r5, pc}
 8013bac:	200028a8 	.word	0x200028a8

08013bb0 <_lseek_r>:
 8013bb0:	b538      	push	{r3, r4, r5, lr}
 8013bb2:	4d07      	ldr	r5, [pc, #28]	; (8013bd0 <_lseek_r+0x20>)
 8013bb4:	4604      	mov	r4, r0
 8013bb6:	4608      	mov	r0, r1
 8013bb8:	4611      	mov	r1, r2
 8013bba:	2200      	movs	r2, #0
 8013bbc:	602a      	str	r2, [r5, #0]
 8013bbe:	461a      	mov	r2, r3
 8013bc0:	f7ef fb42 	bl	8003248 <_lseek>
 8013bc4:	1c43      	adds	r3, r0, #1
 8013bc6:	d102      	bne.n	8013bce <_lseek_r+0x1e>
 8013bc8:	682b      	ldr	r3, [r5, #0]
 8013bca:	b103      	cbz	r3, 8013bce <_lseek_r+0x1e>
 8013bcc:	6023      	str	r3, [r4, #0]
 8013bce:	bd38      	pop	{r3, r4, r5, pc}
 8013bd0:	200028a8 	.word	0x200028a8

08013bd4 <_read_r>:
 8013bd4:	b538      	push	{r3, r4, r5, lr}
 8013bd6:	4d07      	ldr	r5, [pc, #28]	; (8013bf4 <_read_r+0x20>)
 8013bd8:	4604      	mov	r4, r0
 8013bda:	4608      	mov	r0, r1
 8013bdc:	4611      	mov	r1, r2
 8013bde:	2200      	movs	r2, #0
 8013be0:	602a      	str	r2, [r5, #0]
 8013be2:	461a      	mov	r2, r3
 8013be4:	f7ef fad0 	bl	8003188 <_read>
 8013be8:	1c43      	adds	r3, r0, #1
 8013bea:	d102      	bne.n	8013bf2 <_read_r+0x1e>
 8013bec:	682b      	ldr	r3, [r5, #0]
 8013bee:	b103      	cbz	r3, 8013bf2 <_read_r+0x1e>
 8013bf0:	6023      	str	r3, [r4, #0]
 8013bf2:	bd38      	pop	{r3, r4, r5, pc}
 8013bf4:	200028a8 	.word	0x200028a8

08013bf8 <_sbrk_r>:
 8013bf8:	b538      	push	{r3, r4, r5, lr}
 8013bfa:	4d06      	ldr	r5, [pc, #24]	; (8013c14 <_sbrk_r+0x1c>)
 8013bfc:	2300      	movs	r3, #0
 8013bfe:	4604      	mov	r4, r0
 8013c00:	4608      	mov	r0, r1
 8013c02:	602b      	str	r3, [r5, #0]
 8013c04:	f7ef fb2e 	bl	8003264 <_sbrk>
 8013c08:	1c43      	adds	r3, r0, #1
 8013c0a:	d102      	bne.n	8013c12 <_sbrk_r+0x1a>
 8013c0c:	682b      	ldr	r3, [r5, #0]
 8013c0e:	b103      	cbz	r3, 8013c12 <_sbrk_r+0x1a>
 8013c10:	6023      	str	r3, [r4, #0]
 8013c12:	bd38      	pop	{r3, r4, r5, pc}
 8013c14:	200028a8 	.word	0x200028a8

08013c18 <_write_r>:
 8013c18:	b538      	push	{r3, r4, r5, lr}
 8013c1a:	4d07      	ldr	r5, [pc, #28]	; (8013c38 <_write_r+0x20>)
 8013c1c:	4604      	mov	r4, r0
 8013c1e:	4608      	mov	r0, r1
 8013c20:	4611      	mov	r1, r2
 8013c22:	2200      	movs	r2, #0
 8013c24:	602a      	str	r2, [r5, #0]
 8013c26:	461a      	mov	r2, r3
 8013c28:	f7ef facb 	bl	80031c2 <_write>
 8013c2c:	1c43      	adds	r3, r0, #1
 8013c2e:	d102      	bne.n	8013c36 <_write_r+0x1e>
 8013c30:	682b      	ldr	r3, [r5, #0]
 8013c32:	b103      	cbz	r3, 8013c36 <_write_r+0x1e>
 8013c34:	6023      	str	r3, [r4, #0]
 8013c36:	bd38      	pop	{r3, r4, r5, pc}
 8013c38:	200028a8 	.word	0x200028a8

08013c3c <__assert_func>:
 8013c3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013c3e:	4614      	mov	r4, r2
 8013c40:	461a      	mov	r2, r3
 8013c42:	4b09      	ldr	r3, [pc, #36]	; (8013c68 <__assert_func+0x2c>)
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	4605      	mov	r5, r0
 8013c48:	68d8      	ldr	r0, [r3, #12]
 8013c4a:	b14c      	cbz	r4, 8013c60 <__assert_func+0x24>
 8013c4c:	4b07      	ldr	r3, [pc, #28]	; (8013c6c <__assert_func+0x30>)
 8013c4e:	9100      	str	r1, [sp, #0]
 8013c50:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013c54:	4906      	ldr	r1, [pc, #24]	; (8013c70 <__assert_func+0x34>)
 8013c56:	462b      	mov	r3, r5
 8013c58:	f000 f88a 	bl	8013d70 <fiprintf>
 8013c5c:	f000 f8a7 	bl	8013dae <abort>
 8013c60:	4b04      	ldr	r3, [pc, #16]	; (8013c74 <__assert_func+0x38>)
 8013c62:	461c      	mov	r4, r3
 8013c64:	e7f3      	b.n	8013c4e <__assert_func+0x12>
 8013c66:	bf00      	nop
 8013c68:	20000178 	.word	0x20000178
 8013c6c:	08015bd7 	.word	0x08015bd7
 8013c70:	08015be4 	.word	0x08015be4
 8013c74:	08015c12 	.word	0x08015c12

08013c78 <_calloc_r>:
 8013c78:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013c7a:	fba1 2402 	umull	r2, r4, r1, r2
 8013c7e:	b94c      	cbnz	r4, 8013c94 <_calloc_r+0x1c>
 8013c80:	4611      	mov	r1, r2
 8013c82:	9201      	str	r2, [sp, #4]
 8013c84:	f7ff fa42 	bl	801310c <_malloc_r>
 8013c88:	9a01      	ldr	r2, [sp, #4]
 8013c8a:	4605      	mov	r5, r0
 8013c8c:	b930      	cbnz	r0, 8013c9c <_calloc_r+0x24>
 8013c8e:	4628      	mov	r0, r5
 8013c90:	b003      	add	sp, #12
 8013c92:	bd30      	pop	{r4, r5, pc}
 8013c94:	220c      	movs	r2, #12
 8013c96:	6002      	str	r2, [r0, #0]
 8013c98:	2500      	movs	r5, #0
 8013c9a:	e7f8      	b.n	8013c8e <_calloc_r+0x16>
 8013c9c:	4621      	mov	r1, r4
 8013c9e:	f7fe f9f3 	bl	8012088 <memset>
 8013ca2:	e7f4      	b.n	8013c8e <_calloc_r+0x16>

08013ca4 <_free_r>:
 8013ca4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013ca6:	2900      	cmp	r1, #0
 8013ca8:	d044      	beq.n	8013d34 <_free_r+0x90>
 8013caa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013cae:	9001      	str	r0, [sp, #4]
 8013cb0:	2b00      	cmp	r3, #0
 8013cb2:	f1a1 0404 	sub.w	r4, r1, #4
 8013cb6:	bfb8      	it	lt
 8013cb8:	18e4      	addlt	r4, r4, r3
 8013cba:	f7ff fb55 	bl	8013368 <__malloc_lock>
 8013cbe:	4a1e      	ldr	r2, [pc, #120]	; (8013d38 <_free_r+0x94>)
 8013cc0:	9801      	ldr	r0, [sp, #4]
 8013cc2:	6813      	ldr	r3, [r2, #0]
 8013cc4:	b933      	cbnz	r3, 8013cd4 <_free_r+0x30>
 8013cc6:	6063      	str	r3, [r4, #4]
 8013cc8:	6014      	str	r4, [r2, #0]
 8013cca:	b003      	add	sp, #12
 8013ccc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013cd0:	f7ff bb50 	b.w	8013374 <__malloc_unlock>
 8013cd4:	42a3      	cmp	r3, r4
 8013cd6:	d908      	bls.n	8013cea <_free_r+0x46>
 8013cd8:	6825      	ldr	r5, [r4, #0]
 8013cda:	1961      	adds	r1, r4, r5
 8013cdc:	428b      	cmp	r3, r1
 8013cde:	bf01      	itttt	eq
 8013ce0:	6819      	ldreq	r1, [r3, #0]
 8013ce2:	685b      	ldreq	r3, [r3, #4]
 8013ce4:	1949      	addeq	r1, r1, r5
 8013ce6:	6021      	streq	r1, [r4, #0]
 8013ce8:	e7ed      	b.n	8013cc6 <_free_r+0x22>
 8013cea:	461a      	mov	r2, r3
 8013cec:	685b      	ldr	r3, [r3, #4]
 8013cee:	b10b      	cbz	r3, 8013cf4 <_free_r+0x50>
 8013cf0:	42a3      	cmp	r3, r4
 8013cf2:	d9fa      	bls.n	8013cea <_free_r+0x46>
 8013cf4:	6811      	ldr	r1, [r2, #0]
 8013cf6:	1855      	adds	r5, r2, r1
 8013cf8:	42a5      	cmp	r5, r4
 8013cfa:	d10b      	bne.n	8013d14 <_free_r+0x70>
 8013cfc:	6824      	ldr	r4, [r4, #0]
 8013cfe:	4421      	add	r1, r4
 8013d00:	1854      	adds	r4, r2, r1
 8013d02:	42a3      	cmp	r3, r4
 8013d04:	6011      	str	r1, [r2, #0]
 8013d06:	d1e0      	bne.n	8013cca <_free_r+0x26>
 8013d08:	681c      	ldr	r4, [r3, #0]
 8013d0a:	685b      	ldr	r3, [r3, #4]
 8013d0c:	6053      	str	r3, [r2, #4]
 8013d0e:	440c      	add	r4, r1
 8013d10:	6014      	str	r4, [r2, #0]
 8013d12:	e7da      	b.n	8013cca <_free_r+0x26>
 8013d14:	d902      	bls.n	8013d1c <_free_r+0x78>
 8013d16:	230c      	movs	r3, #12
 8013d18:	6003      	str	r3, [r0, #0]
 8013d1a:	e7d6      	b.n	8013cca <_free_r+0x26>
 8013d1c:	6825      	ldr	r5, [r4, #0]
 8013d1e:	1961      	adds	r1, r4, r5
 8013d20:	428b      	cmp	r3, r1
 8013d22:	bf04      	itt	eq
 8013d24:	6819      	ldreq	r1, [r3, #0]
 8013d26:	685b      	ldreq	r3, [r3, #4]
 8013d28:	6063      	str	r3, [r4, #4]
 8013d2a:	bf04      	itt	eq
 8013d2c:	1949      	addeq	r1, r1, r5
 8013d2e:	6021      	streq	r1, [r4, #0]
 8013d30:	6054      	str	r4, [r2, #4]
 8013d32:	e7ca      	b.n	8013cca <_free_r+0x26>
 8013d34:	b003      	add	sp, #12
 8013d36:	bd30      	pop	{r4, r5, pc}
 8013d38:	200028a0 	.word	0x200028a0

08013d3c <__ascii_mbtowc>:
 8013d3c:	b082      	sub	sp, #8
 8013d3e:	b901      	cbnz	r1, 8013d42 <__ascii_mbtowc+0x6>
 8013d40:	a901      	add	r1, sp, #4
 8013d42:	b142      	cbz	r2, 8013d56 <__ascii_mbtowc+0x1a>
 8013d44:	b14b      	cbz	r3, 8013d5a <__ascii_mbtowc+0x1e>
 8013d46:	7813      	ldrb	r3, [r2, #0]
 8013d48:	600b      	str	r3, [r1, #0]
 8013d4a:	7812      	ldrb	r2, [r2, #0]
 8013d4c:	1e10      	subs	r0, r2, #0
 8013d4e:	bf18      	it	ne
 8013d50:	2001      	movne	r0, #1
 8013d52:	b002      	add	sp, #8
 8013d54:	4770      	bx	lr
 8013d56:	4610      	mov	r0, r2
 8013d58:	e7fb      	b.n	8013d52 <__ascii_mbtowc+0x16>
 8013d5a:	f06f 0001 	mvn.w	r0, #1
 8013d5e:	e7f8      	b.n	8013d52 <__ascii_mbtowc+0x16>

08013d60 <_malloc_usable_size_r>:
 8013d60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d64:	1f18      	subs	r0, r3, #4
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	bfbc      	itt	lt
 8013d6a:	580b      	ldrlt	r3, [r1, r0]
 8013d6c:	18c0      	addlt	r0, r0, r3
 8013d6e:	4770      	bx	lr

08013d70 <fiprintf>:
 8013d70:	b40e      	push	{r1, r2, r3}
 8013d72:	b503      	push	{r0, r1, lr}
 8013d74:	4601      	mov	r1, r0
 8013d76:	ab03      	add	r3, sp, #12
 8013d78:	4805      	ldr	r0, [pc, #20]	; (8013d90 <fiprintf+0x20>)
 8013d7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d7e:	6800      	ldr	r0, [r0, #0]
 8013d80:	9301      	str	r3, [sp, #4]
 8013d82:	f000 f845 	bl	8013e10 <_vfiprintf_r>
 8013d86:	b002      	add	sp, #8
 8013d88:	f85d eb04 	ldr.w	lr, [sp], #4
 8013d8c:	b003      	add	sp, #12
 8013d8e:	4770      	bx	lr
 8013d90:	20000178 	.word	0x20000178

08013d94 <__ascii_wctomb>:
 8013d94:	b149      	cbz	r1, 8013daa <__ascii_wctomb+0x16>
 8013d96:	2aff      	cmp	r2, #255	; 0xff
 8013d98:	bf85      	ittet	hi
 8013d9a:	238a      	movhi	r3, #138	; 0x8a
 8013d9c:	6003      	strhi	r3, [r0, #0]
 8013d9e:	700a      	strbls	r2, [r1, #0]
 8013da0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013da4:	bf98      	it	ls
 8013da6:	2001      	movls	r0, #1
 8013da8:	4770      	bx	lr
 8013daa:	4608      	mov	r0, r1
 8013dac:	4770      	bx	lr

08013dae <abort>:
 8013dae:	b508      	push	{r3, lr}
 8013db0:	2006      	movs	r0, #6
 8013db2:	f000 fa89 	bl	80142c8 <raise>
 8013db6:	2001      	movs	r0, #1
 8013db8:	f7ef f9dc 	bl	8003174 <_exit>

08013dbc <__sfputc_r>:
 8013dbc:	6893      	ldr	r3, [r2, #8]
 8013dbe:	3b01      	subs	r3, #1
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	b410      	push	{r4}
 8013dc4:	6093      	str	r3, [r2, #8]
 8013dc6:	da08      	bge.n	8013dda <__sfputc_r+0x1e>
 8013dc8:	6994      	ldr	r4, [r2, #24]
 8013dca:	42a3      	cmp	r3, r4
 8013dcc:	db01      	blt.n	8013dd2 <__sfputc_r+0x16>
 8013dce:	290a      	cmp	r1, #10
 8013dd0:	d103      	bne.n	8013dda <__sfputc_r+0x1e>
 8013dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013dd6:	f000 b935 	b.w	8014044 <__swbuf_r>
 8013dda:	6813      	ldr	r3, [r2, #0]
 8013ddc:	1c58      	adds	r0, r3, #1
 8013dde:	6010      	str	r0, [r2, #0]
 8013de0:	7019      	strb	r1, [r3, #0]
 8013de2:	4608      	mov	r0, r1
 8013de4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013de8:	4770      	bx	lr

08013dea <__sfputs_r>:
 8013dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013dec:	4606      	mov	r6, r0
 8013dee:	460f      	mov	r7, r1
 8013df0:	4614      	mov	r4, r2
 8013df2:	18d5      	adds	r5, r2, r3
 8013df4:	42ac      	cmp	r4, r5
 8013df6:	d101      	bne.n	8013dfc <__sfputs_r+0x12>
 8013df8:	2000      	movs	r0, #0
 8013dfa:	e007      	b.n	8013e0c <__sfputs_r+0x22>
 8013dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e00:	463a      	mov	r2, r7
 8013e02:	4630      	mov	r0, r6
 8013e04:	f7ff ffda 	bl	8013dbc <__sfputc_r>
 8013e08:	1c43      	adds	r3, r0, #1
 8013e0a:	d1f3      	bne.n	8013df4 <__sfputs_r+0xa>
 8013e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013e10 <_vfiprintf_r>:
 8013e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013e14:	460d      	mov	r5, r1
 8013e16:	b09d      	sub	sp, #116	; 0x74
 8013e18:	4614      	mov	r4, r2
 8013e1a:	4698      	mov	r8, r3
 8013e1c:	4606      	mov	r6, r0
 8013e1e:	b118      	cbz	r0, 8013e28 <_vfiprintf_r+0x18>
 8013e20:	6a03      	ldr	r3, [r0, #32]
 8013e22:	b90b      	cbnz	r3, 8013e28 <_vfiprintf_r+0x18>
 8013e24:	f7fe f8fa 	bl	801201c <__sinit>
 8013e28:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e2a:	07d9      	lsls	r1, r3, #31
 8013e2c:	d405      	bmi.n	8013e3a <_vfiprintf_r+0x2a>
 8013e2e:	89ab      	ldrh	r3, [r5, #12]
 8013e30:	059a      	lsls	r2, r3, #22
 8013e32:	d402      	bmi.n	8013e3a <_vfiprintf_r+0x2a>
 8013e34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e36:	f7fe f95d 	bl	80120f4 <__retarget_lock_acquire_recursive>
 8013e3a:	89ab      	ldrh	r3, [r5, #12]
 8013e3c:	071b      	lsls	r3, r3, #28
 8013e3e:	d501      	bpl.n	8013e44 <_vfiprintf_r+0x34>
 8013e40:	692b      	ldr	r3, [r5, #16]
 8013e42:	b99b      	cbnz	r3, 8013e6c <_vfiprintf_r+0x5c>
 8013e44:	4629      	mov	r1, r5
 8013e46:	4630      	mov	r0, r6
 8013e48:	f000 f93a 	bl	80140c0 <__swsetup_r>
 8013e4c:	b170      	cbz	r0, 8013e6c <_vfiprintf_r+0x5c>
 8013e4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013e50:	07dc      	lsls	r4, r3, #31
 8013e52:	d504      	bpl.n	8013e5e <_vfiprintf_r+0x4e>
 8013e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e58:	b01d      	add	sp, #116	; 0x74
 8013e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e5e:	89ab      	ldrh	r3, [r5, #12]
 8013e60:	0598      	lsls	r0, r3, #22
 8013e62:	d4f7      	bmi.n	8013e54 <_vfiprintf_r+0x44>
 8013e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e66:	f7fe f946 	bl	80120f6 <__retarget_lock_release_recursive>
 8013e6a:	e7f3      	b.n	8013e54 <_vfiprintf_r+0x44>
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8013e70:	2320      	movs	r3, #32
 8013e72:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013e76:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e7a:	2330      	movs	r3, #48	; 0x30
 8013e7c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014030 <_vfiprintf_r+0x220>
 8013e80:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013e84:	f04f 0901 	mov.w	r9, #1
 8013e88:	4623      	mov	r3, r4
 8013e8a:	469a      	mov	sl, r3
 8013e8c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e90:	b10a      	cbz	r2, 8013e96 <_vfiprintf_r+0x86>
 8013e92:	2a25      	cmp	r2, #37	; 0x25
 8013e94:	d1f9      	bne.n	8013e8a <_vfiprintf_r+0x7a>
 8013e96:	ebba 0b04 	subs.w	fp, sl, r4
 8013e9a:	d00b      	beq.n	8013eb4 <_vfiprintf_r+0xa4>
 8013e9c:	465b      	mov	r3, fp
 8013e9e:	4622      	mov	r2, r4
 8013ea0:	4629      	mov	r1, r5
 8013ea2:	4630      	mov	r0, r6
 8013ea4:	f7ff ffa1 	bl	8013dea <__sfputs_r>
 8013ea8:	3001      	adds	r0, #1
 8013eaa:	f000 80a9 	beq.w	8014000 <_vfiprintf_r+0x1f0>
 8013eae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013eb0:	445a      	add	r2, fp
 8013eb2:	9209      	str	r2, [sp, #36]	; 0x24
 8013eb4:	f89a 3000 	ldrb.w	r3, [sl]
 8013eb8:	2b00      	cmp	r3, #0
 8013eba:	f000 80a1 	beq.w	8014000 <_vfiprintf_r+0x1f0>
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013ec4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013ec8:	f10a 0a01 	add.w	sl, sl, #1
 8013ecc:	9304      	str	r3, [sp, #16]
 8013ece:	9307      	str	r3, [sp, #28]
 8013ed0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013ed4:	931a      	str	r3, [sp, #104]	; 0x68
 8013ed6:	4654      	mov	r4, sl
 8013ed8:	2205      	movs	r2, #5
 8013eda:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013ede:	4854      	ldr	r0, [pc, #336]	; (8014030 <_vfiprintf_r+0x220>)
 8013ee0:	f7ec f976 	bl	80001d0 <memchr>
 8013ee4:	9a04      	ldr	r2, [sp, #16]
 8013ee6:	b9d8      	cbnz	r0, 8013f20 <_vfiprintf_r+0x110>
 8013ee8:	06d1      	lsls	r1, r2, #27
 8013eea:	bf44      	itt	mi
 8013eec:	2320      	movmi	r3, #32
 8013eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ef2:	0713      	lsls	r3, r2, #28
 8013ef4:	bf44      	itt	mi
 8013ef6:	232b      	movmi	r3, #43	; 0x2b
 8013ef8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013efc:	f89a 3000 	ldrb.w	r3, [sl]
 8013f00:	2b2a      	cmp	r3, #42	; 0x2a
 8013f02:	d015      	beq.n	8013f30 <_vfiprintf_r+0x120>
 8013f04:	9a07      	ldr	r2, [sp, #28]
 8013f06:	4654      	mov	r4, sl
 8013f08:	2000      	movs	r0, #0
 8013f0a:	f04f 0c0a 	mov.w	ip, #10
 8013f0e:	4621      	mov	r1, r4
 8013f10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013f14:	3b30      	subs	r3, #48	; 0x30
 8013f16:	2b09      	cmp	r3, #9
 8013f18:	d94d      	bls.n	8013fb6 <_vfiprintf_r+0x1a6>
 8013f1a:	b1b0      	cbz	r0, 8013f4a <_vfiprintf_r+0x13a>
 8013f1c:	9207      	str	r2, [sp, #28]
 8013f1e:	e014      	b.n	8013f4a <_vfiprintf_r+0x13a>
 8013f20:	eba0 0308 	sub.w	r3, r0, r8
 8013f24:	fa09 f303 	lsl.w	r3, r9, r3
 8013f28:	4313      	orrs	r3, r2
 8013f2a:	9304      	str	r3, [sp, #16]
 8013f2c:	46a2      	mov	sl, r4
 8013f2e:	e7d2      	b.n	8013ed6 <_vfiprintf_r+0xc6>
 8013f30:	9b03      	ldr	r3, [sp, #12]
 8013f32:	1d19      	adds	r1, r3, #4
 8013f34:	681b      	ldr	r3, [r3, #0]
 8013f36:	9103      	str	r1, [sp, #12]
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	bfbb      	ittet	lt
 8013f3c:	425b      	neglt	r3, r3
 8013f3e:	f042 0202 	orrlt.w	r2, r2, #2
 8013f42:	9307      	strge	r3, [sp, #28]
 8013f44:	9307      	strlt	r3, [sp, #28]
 8013f46:	bfb8      	it	lt
 8013f48:	9204      	strlt	r2, [sp, #16]
 8013f4a:	7823      	ldrb	r3, [r4, #0]
 8013f4c:	2b2e      	cmp	r3, #46	; 0x2e
 8013f4e:	d10c      	bne.n	8013f6a <_vfiprintf_r+0x15a>
 8013f50:	7863      	ldrb	r3, [r4, #1]
 8013f52:	2b2a      	cmp	r3, #42	; 0x2a
 8013f54:	d134      	bne.n	8013fc0 <_vfiprintf_r+0x1b0>
 8013f56:	9b03      	ldr	r3, [sp, #12]
 8013f58:	1d1a      	adds	r2, r3, #4
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	9203      	str	r2, [sp, #12]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	bfb8      	it	lt
 8013f62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013f66:	3402      	adds	r4, #2
 8013f68:	9305      	str	r3, [sp, #20]
 8013f6a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014040 <_vfiprintf_r+0x230>
 8013f6e:	7821      	ldrb	r1, [r4, #0]
 8013f70:	2203      	movs	r2, #3
 8013f72:	4650      	mov	r0, sl
 8013f74:	f7ec f92c 	bl	80001d0 <memchr>
 8013f78:	b138      	cbz	r0, 8013f8a <_vfiprintf_r+0x17a>
 8013f7a:	9b04      	ldr	r3, [sp, #16]
 8013f7c:	eba0 000a 	sub.w	r0, r0, sl
 8013f80:	2240      	movs	r2, #64	; 0x40
 8013f82:	4082      	lsls	r2, r0
 8013f84:	4313      	orrs	r3, r2
 8013f86:	3401      	adds	r4, #1
 8013f88:	9304      	str	r3, [sp, #16]
 8013f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f8e:	4829      	ldr	r0, [pc, #164]	; (8014034 <_vfiprintf_r+0x224>)
 8013f90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013f94:	2206      	movs	r2, #6
 8013f96:	f7ec f91b 	bl	80001d0 <memchr>
 8013f9a:	2800      	cmp	r0, #0
 8013f9c:	d03f      	beq.n	801401e <_vfiprintf_r+0x20e>
 8013f9e:	4b26      	ldr	r3, [pc, #152]	; (8014038 <_vfiprintf_r+0x228>)
 8013fa0:	bb1b      	cbnz	r3, 8013fea <_vfiprintf_r+0x1da>
 8013fa2:	9b03      	ldr	r3, [sp, #12]
 8013fa4:	3307      	adds	r3, #7
 8013fa6:	f023 0307 	bic.w	r3, r3, #7
 8013faa:	3308      	adds	r3, #8
 8013fac:	9303      	str	r3, [sp, #12]
 8013fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013fb0:	443b      	add	r3, r7
 8013fb2:	9309      	str	r3, [sp, #36]	; 0x24
 8013fb4:	e768      	b.n	8013e88 <_vfiprintf_r+0x78>
 8013fb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8013fba:	460c      	mov	r4, r1
 8013fbc:	2001      	movs	r0, #1
 8013fbe:	e7a6      	b.n	8013f0e <_vfiprintf_r+0xfe>
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	3401      	adds	r4, #1
 8013fc4:	9305      	str	r3, [sp, #20]
 8013fc6:	4619      	mov	r1, r3
 8013fc8:	f04f 0c0a 	mov.w	ip, #10
 8013fcc:	4620      	mov	r0, r4
 8013fce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013fd2:	3a30      	subs	r2, #48	; 0x30
 8013fd4:	2a09      	cmp	r2, #9
 8013fd6:	d903      	bls.n	8013fe0 <_vfiprintf_r+0x1d0>
 8013fd8:	2b00      	cmp	r3, #0
 8013fda:	d0c6      	beq.n	8013f6a <_vfiprintf_r+0x15a>
 8013fdc:	9105      	str	r1, [sp, #20]
 8013fde:	e7c4      	b.n	8013f6a <_vfiprintf_r+0x15a>
 8013fe0:	fb0c 2101 	mla	r1, ip, r1, r2
 8013fe4:	4604      	mov	r4, r0
 8013fe6:	2301      	movs	r3, #1
 8013fe8:	e7f0      	b.n	8013fcc <_vfiprintf_r+0x1bc>
 8013fea:	ab03      	add	r3, sp, #12
 8013fec:	9300      	str	r3, [sp, #0]
 8013fee:	462a      	mov	r2, r5
 8013ff0:	4b12      	ldr	r3, [pc, #72]	; (801403c <_vfiprintf_r+0x22c>)
 8013ff2:	a904      	add	r1, sp, #16
 8013ff4:	4630      	mov	r0, r6
 8013ff6:	f7fd fbb1 	bl	801175c <_printf_float>
 8013ffa:	4607      	mov	r7, r0
 8013ffc:	1c78      	adds	r0, r7, #1
 8013ffe:	d1d6      	bne.n	8013fae <_vfiprintf_r+0x19e>
 8014000:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014002:	07d9      	lsls	r1, r3, #31
 8014004:	d405      	bmi.n	8014012 <_vfiprintf_r+0x202>
 8014006:	89ab      	ldrh	r3, [r5, #12]
 8014008:	059a      	lsls	r2, r3, #22
 801400a:	d402      	bmi.n	8014012 <_vfiprintf_r+0x202>
 801400c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801400e:	f7fe f872 	bl	80120f6 <__retarget_lock_release_recursive>
 8014012:	89ab      	ldrh	r3, [r5, #12]
 8014014:	065b      	lsls	r3, r3, #25
 8014016:	f53f af1d 	bmi.w	8013e54 <_vfiprintf_r+0x44>
 801401a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801401c:	e71c      	b.n	8013e58 <_vfiprintf_r+0x48>
 801401e:	ab03      	add	r3, sp, #12
 8014020:	9300      	str	r3, [sp, #0]
 8014022:	462a      	mov	r2, r5
 8014024:	4b05      	ldr	r3, [pc, #20]	; (801403c <_vfiprintf_r+0x22c>)
 8014026:	a904      	add	r1, sp, #16
 8014028:	4630      	mov	r0, r6
 801402a:	f7fd fe3b 	bl	8011ca4 <_printf_i>
 801402e:	e7e4      	b.n	8013ffa <_vfiprintf_r+0x1ea>
 8014030:	08015965 	.word	0x08015965
 8014034:	0801596f 	.word	0x0801596f
 8014038:	0801175d 	.word	0x0801175d
 801403c:	08013deb 	.word	0x08013deb
 8014040:	0801596b 	.word	0x0801596b

08014044 <__swbuf_r>:
 8014044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014046:	460e      	mov	r6, r1
 8014048:	4614      	mov	r4, r2
 801404a:	4605      	mov	r5, r0
 801404c:	b118      	cbz	r0, 8014056 <__swbuf_r+0x12>
 801404e:	6a03      	ldr	r3, [r0, #32]
 8014050:	b90b      	cbnz	r3, 8014056 <__swbuf_r+0x12>
 8014052:	f7fd ffe3 	bl	801201c <__sinit>
 8014056:	69a3      	ldr	r3, [r4, #24]
 8014058:	60a3      	str	r3, [r4, #8]
 801405a:	89a3      	ldrh	r3, [r4, #12]
 801405c:	071a      	lsls	r2, r3, #28
 801405e:	d525      	bpl.n	80140ac <__swbuf_r+0x68>
 8014060:	6923      	ldr	r3, [r4, #16]
 8014062:	b31b      	cbz	r3, 80140ac <__swbuf_r+0x68>
 8014064:	6823      	ldr	r3, [r4, #0]
 8014066:	6922      	ldr	r2, [r4, #16]
 8014068:	1a98      	subs	r0, r3, r2
 801406a:	6963      	ldr	r3, [r4, #20]
 801406c:	b2f6      	uxtb	r6, r6
 801406e:	4283      	cmp	r3, r0
 8014070:	4637      	mov	r7, r6
 8014072:	dc04      	bgt.n	801407e <__swbuf_r+0x3a>
 8014074:	4621      	mov	r1, r4
 8014076:	4628      	mov	r0, r5
 8014078:	f7ff f94e 	bl	8013318 <_fflush_r>
 801407c:	b9e0      	cbnz	r0, 80140b8 <__swbuf_r+0x74>
 801407e:	68a3      	ldr	r3, [r4, #8]
 8014080:	3b01      	subs	r3, #1
 8014082:	60a3      	str	r3, [r4, #8]
 8014084:	6823      	ldr	r3, [r4, #0]
 8014086:	1c5a      	adds	r2, r3, #1
 8014088:	6022      	str	r2, [r4, #0]
 801408a:	701e      	strb	r6, [r3, #0]
 801408c:	6962      	ldr	r2, [r4, #20]
 801408e:	1c43      	adds	r3, r0, #1
 8014090:	429a      	cmp	r2, r3
 8014092:	d004      	beq.n	801409e <__swbuf_r+0x5a>
 8014094:	89a3      	ldrh	r3, [r4, #12]
 8014096:	07db      	lsls	r3, r3, #31
 8014098:	d506      	bpl.n	80140a8 <__swbuf_r+0x64>
 801409a:	2e0a      	cmp	r6, #10
 801409c:	d104      	bne.n	80140a8 <__swbuf_r+0x64>
 801409e:	4621      	mov	r1, r4
 80140a0:	4628      	mov	r0, r5
 80140a2:	f7ff f939 	bl	8013318 <_fflush_r>
 80140a6:	b938      	cbnz	r0, 80140b8 <__swbuf_r+0x74>
 80140a8:	4638      	mov	r0, r7
 80140aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80140ac:	4621      	mov	r1, r4
 80140ae:	4628      	mov	r0, r5
 80140b0:	f000 f806 	bl	80140c0 <__swsetup_r>
 80140b4:	2800      	cmp	r0, #0
 80140b6:	d0d5      	beq.n	8014064 <__swbuf_r+0x20>
 80140b8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80140bc:	e7f4      	b.n	80140a8 <__swbuf_r+0x64>
	...

080140c0 <__swsetup_r>:
 80140c0:	b538      	push	{r3, r4, r5, lr}
 80140c2:	4b2a      	ldr	r3, [pc, #168]	; (801416c <__swsetup_r+0xac>)
 80140c4:	4605      	mov	r5, r0
 80140c6:	6818      	ldr	r0, [r3, #0]
 80140c8:	460c      	mov	r4, r1
 80140ca:	b118      	cbz	r0, 80140d4 <__swsetup_r+0x14>
 80140cc:	6a03      	ldr	r3, [r0, #32]
 80140ce:	b90b      	cbnz	r3, 80140d4 <__swsetup_r+0x14>
 80140d0:	f7fd ffa4 	bl	801201c <__sinit>
 80140d4:	89a3      	ldrh	r3, [r4, #12]
 80140d6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80140da:	0718      	lsls	r0, r3, #28
 80140dc:	d422      	bmi.n	8014124 <__swsetup_r+0x64>
 80140de:	06d9      	lsls	r1, r3, #27
 80140e0:	d407      	bmi.n	80140f2 <__swsetup_r+0x32>
 80140e2:	2309      	movs	r3, #9
 80140e4:	602b      	str	r3, [r5, #0]
 80140e6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80140ea:	81a3      	strh	r3, [r4, #12]
 80140ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80140f0:	e034      	b.n	801415c <__swsetup_r+0x9c>
 80140f2:	0758      	lsls	r0, r3, #29
 80140f4:	d512      	bpl.n	801411c <__swsetup_r+0x5c>
 80140f6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80140f8:	b141      	cbz	r1, 801410c <__swsetup_r+0x4c>
 80140fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80140fe:	4299      	cmp	r1, r3
 8014100:	d002      	beq.n	8014108 <__swsetup_r+0x48>
 8014102:	4628      	mov	r0, r5
 8014104:	f7ff fdce 	bl	8013ca4 <_free_r>
 8014108:	2300      	movs	r3, #0
 801410a:	6363      	str	r3, [r4, #52]	; 0x34
 801410c:	89a3      	ldrh	r3, [r4, #12]
 801410e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014112:	81a3      	strh	r3, [r4, #12]
 8014114:	2300      	movs	r3, #0
 8014116:	6063      	str	r3, [r4, #4]
 8014118:	6923      	ldr	r3, [r4, #16]
 801411a:	6023      	str	r3, [r4, #0]
 801411c:	89a3      	ldrh	r3, [r4, #12]
 801411e:	f043 0308 	orr.w	r3, r3, #8
 8014122:	81a3      	strh	r3, [r4, #12]
 8014124:	6923      	ldr	r3, [r4, #16]
 8014126:	b94b      	cbnz	r3, 801413c <__swsetup_r+0x7c>
 8014128:	89a3      	ldrh	r3, [r4, #12]
 801412a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801412e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014132:	d003      	beq.n	801413c <__swsetup_r+0x7c>
 8014134:	4621      	mov	r1, r4
 8014136:	4628      	mov	r0, r5
 8014138:	f000 f840 	bl	80141bc <__smakebuf_r>
 801413c:	89a0      	ldrh	r0, [r4, #12]
 801413e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014142:	f010 0301 	ands.w	r3, r0, #1
 8014146:	d00a      	beq.n	801415e <__swsetup_r+0x9e>
 8014148:	2300      	movs	r3, #0
 801414a:	60a3      	str	r3, [r4, #8]
 801414c:	6963      	ldr	r3, [r4, #20]
 801414e:	425b      	negs	r3, r3
 8014150:	61a3      	str	r3, [r4, #24]
 8014152:	6923      	ldr	r3, [r4, #16]
 8014154:	b943      	cbnz	r3, 8014168 <__swsetup_r+0xa8>
 8014156:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801415a:	d1c4      	bne.n	80140e6 <__swsetup_r+0x26>
 801415c:	bd38      	pop	{r3, r4, r5, pc}
 801415e:	0781      	lsls	r1, r0, #30
 8014160:	bf58      	it	pl
 8014162:	6963      	ldrpl	r3, [r4, #20]
 8014164:	60a3      	str	r3, [r4, #8]
 8014166:	e7f4      	b.n	8014152 <__swsetup_r+0x92>
 8014168:	2000      	movs	r0, #0
 801416a:	e7f7      	b.n	801415c <__swsetup_r+0x9c>
 801416c:	20000178 	.word	0x20000178

08014170 <__swhatbuf_r>:
 8014170:	b570      	push	{r4, r5, r6, lr}
 8014172:	460c      	mov	r4, r1
 8014174:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014178:	2900      	cmp	r1, #0
 801417a:	b096      	sub	sp, #88	; 0x58
 801417c:	4615      	mov	r5, r2
 801417e:	461e      	mov	r6, r3
 8014180:	da0d      	bge.n	801419e <__swhatbuf_r+0x2e>
 8014182:	89a3      	ldrh	r3, [r4, #12]
 8014184:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014188:	f04f 0100 	mov.w	r1, #0
 801418c:	bf0c      	ite	eq
 801418e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8014192:	2340      	movne	r3, #64	; 0x40
 8014194:	2000      	movs	r0, #0
 8014196:	6031      	str	r1, [r6, #0]
 8014198:	602b      	str	r3, [r5, #0]
 801419a:	b016      	add	sp, #88	; 0x58
 801419c:	bd70      	pop	{r4, r5, r6, pc}
 801419e:	466a      	mov	r2, sp
 80141a0:	f000 f848 	bl	8014234 <_fstat_r>
 80141a4:	2800      	cmp	r0, #0
 80141a6:	dbec      	blt.n	8014182 <__swhatbuf_r+0x12>
 80141a8:	9901      	ldr	r1, [sp, #4]
 80141aa:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80141ae:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80141b2:	4259      	negs	r1, r3
 80141b4:	4159      	adcs	r1, r3
 80141b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80141ba:	e7eb      	b.n	8014194 <__swhatbuf_r+0x24>

080141bc <__smakebuf_r>:
 80141bc:	898b      	ldrh	r3, [r1, #12]
 80141be:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80141c0:	079d      	lsls	r5, r3, #30
 80141c2:	4606      	mov	r6, r0
 80141c4:	460c      	mov	r4, r1
 80141c6:	d507      	bpl.n	80141d8 <__smakebuf_r+0x1c>
 80141c8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80141cc:	6023      	str	r3, [r4, #0]
 80141ce:	6123      	str	r3, [r4, #16]
 80141d0:	2301      	movs	r3, #1
 80141d2:	6163      	str	r3, [r4, #20]
 80141d4:	b002      	add	sp, #8
 80141d6:	bd70      	pop	{r4, r5, r6, pc}
 80141d8:	ab01      	add	r3, sp, #4
 80141da:	466a      	mov	r2, sp
 80141dc:	f7ff ffc8 	bl	8014170 <__swhatbuf_r>
 80141e0:	9900      	ldr	r1, [sp, #0]
 80141e2:	4605      	mov	r5, r0
 80141e4:	4630      	mov	r0, r6
 80141e6:	f7fe ff91 	bl	801310c <_malloc_r>
 80141ea:	b948      	cbnz	r0, 8014200 <__smakebuf_r+0x44>
 80141ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80141f0:	059a      	lsls	r2, r3, #22
 80141f2:	d4ef      	bmi.n	80141d4 <__smakebuf_r+0x18>
 80141f4:	f023 0303 	bic.w	r3, r3, #3
 80141f8:	f043 0302 	orr.w	r3, r3, #2
 80141fc:	81a3      	strh	r3, [r4, #12]
 80141fe:	e7e3      	b.n	80141c8 <__smakebuf_r+0xc>
 8014200:	89a3      	ldrh	r3, [r4, #12]
 8014202:	6020      	str	r0, [r4, #0]
 8014204:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014208:	81a3      	strh	r3, [r4, #12]
 801420a:	9b00      	ldr	r3, [sp, #0]
 801420c:	6163      	str	r3, [r4, #20]
 801420e:	9b01      	ldr	r3, [sp, #4]
 8014210:	6120      	str	r0, [r4, #16]
 8014212:	b15b      	cbz	r3, 801422c <__smakebuf_r+0x70>
 8014214:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014218:	4630      	mov	r0, r6
 801421a:	f000 f81d 	bl	8014258 <_isatty_r>
 801421e:	b128      	cbz	r0, 801422c <__smakebuf_r+0x70>
 8014220:	89a3      	ldrh	r3, [r4, #12]
 8014222:	f023 0303 	bic.w	r3, r3, #3
 8014226:	f043 0301 	orr.w	r3, r3, #1
 801422a:	81a3      	strh	r3, [r4, #12]
 801422c:	89a3      	ldrh	r3, [r4, #12]
 801422e:	431d      	orrs	r5, r3
 8014230:	81a5      	strh	r5, [r4, #12]
 8014232:	e7cf      	b.n	80141d4 <__smakebuf_r+0x18>

08014234 <_fstat_r>:
 8014234:	b538      	push	{r3, r4, r5, lr}
 8014236:	4d07      	ldr	r5, [pc, #28]	; (8014254 <_fstat_r+0x20>)
 8014238:	2300      	movs	r3, #0
 801423a:	4604      	mov	r4, r0
 801423c:	4608      	mov	r0, r1
 801423e:	4611      	mov	r1, r2
 8014240:	602b      	str	r3, [r5, #0]
 8014242:	f7ee ffe6 	bl	8003212 <_fstat>
 8014246:	1c43      	adds	r3, r0, #1
 8014248:	d102      	bne.n	8014250 <_fstat_r+0x1c>
 801424a:	682b      	ldr	r3, [r5, #0]
 801424c:	b103      	cbz	r3, 8014250 <_fstat_r+0x1c>
 801424e:	6023      	str	r3, [r4, #0]
 8014250:	bd38      	pop	{r3, r4, r5, pc}
 8014252:	bf00      	nop
 8014254:	200028a8 	.word	0x200028a8

08014258 <_isatty_r>:
 8014258:	b538      	push	{r3, r4, r5, lr}
 801425a:	4d06      	ldr	r5, [pc, #24]	; (8014274 <_isatty_r+0x1c>)
 801425c:	2300      	movs	r3, #0
 801425e:	4604      	mov	r4, r0
 8014260:	4608      	mov	r0, r1
 8014262:	602b      	str	r3, [r5, #0]
 8014264:	f7ee ffe5 	bl	8003232 <_isatty>
 8014268:	1c43      	adds	r3, r0, #1
 801426a:	d102      	bne.n	8014272 <_isatty_r+0x1a>
 801426c:	682b      	ldr	r3, [r5, #0]
 801426e:	b103      	cbz	r3, 8014272 <_isatty_r+0x1a>
 8014270:	6023      	str	r3, [r4, #0]
 8014272:	bd38      	pop	{r3, r4, r5, pc}
 8014274:	200028a8 	.word	0x200028a8

08014278 <_raise_r>:
 8014278:	291f      	cmp	r1, #31
 801427a:	b538      	push	{r3, r4, r5, lr}
 801427c:	4604      	mov	r4, r0
 801427e:	460d      	mov	r5, r1
 8014280:	d904      	bls.n	801428c <_raise_r+0x14>
 8014282:	2316      	movs	r3, #22
 8014284:	6003      	str	r3, [r0, #0]
 8014286:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801428a:	bd38      	pop	{r3, r4, r5, pc}
 801428c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801428e:	b112      	cbz	r2, 8014296 <_raise_r+0x1e>
 8014290:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014294:	b94b      	cbnz	r3, 80142aa <_raise_r+0x32>
 8014296:	4620      	mov	r0, r4
 8014298:	f000 f830 	bl	80142fc <_getpid_r>
 801429c:	462a      	mov	r2, r5
 801429e:	4601      	mov	r1, r0
 80142a0:	4620      	mov	r0, r4
 80142a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80142a6:	f000 b817 	b.w	80142d8 <_kill_r>
 80142aa:	2b01      	cmp	r3, #1
 80142ac:	d00a      	beq.n	80142c4 <_raise_r+0x4c>
 80142ae:	1c59      	adds	r1, r3, #1
 80142b0:	d103      	bne.n	80142ba <_raise_r+0x42>
 80142b2:	2316      	movs	r3, #22
 80142b4:	6003      	str	r3, [r0, #0]
 80142b6:	2001      	movs	r0, #1
 80142b8:	e7e7      	b.n	801428a <_raise_r+0x12>
 80142ba:	2400      	movs	r4, #0
 80142bc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80142c0:	4628      	mov	r0, r5
 80142c2:	4798      	blx	r3
 80142c4:	2000      	movs	r0, #0
 80142c6:	e7e0      	b.n	801428a <_raise_r+0x12>

080142c8 <raise>:
 80142c8:	4b02      	ldr	r3, [pc, #8]	; (80142d4 <raise+0xc>)
 80142ca:	4601      	mov	r1, r0
 80142cc:	6818      	ldr	r0, [r3, #0]
 80142ce:	f7ff bfd3 	b.w	8014278 <_raise_r>
 80142d2:	bf00      	nop
 80142d4:	20000178 	.word	0x20000178

080142d8 <_kill_r>:
 80142d8:	b538      	push	{r3, r4, r5, lr}
 80142da:	4d07      	ldr	r5, [pc, #28]	; (80142f8 <_kill_r+0x20>)
 80142dc:	2300      	movs	r3, #0
 80142de:	4604      	mov	r4, r0
 80142e0:	4608      	mov	r0, r1
 80142e2:	4611      	mov	r1, r2
 80142e4:	602b      	str	r3, [r5, #0]
 80142e6:	f7ee ff35 	bl	8003154 <_kill>
 80142ea:	1c43      	adds	r3, r0, #1
 80142ec:	d102      	bne.n	80142f4 <_kill_r+0x1c>
 80142ee:	682b      	ldr	r3, [r5, #0]
 80142f0:	b103      	cbz	r3, 80142f4 <_kill_r+0x1c>
 80142f2:	6023      	str	r3, [r4, #0]
 80142f4:	bd38      	pop	{r3, r4, r5, pc}
 80142f6:	bf00      	nop
 80142f8:	200028a8 	.word	0x200028a8

080142fc <_getpid_r>:
 80142fc:	f7ee bf22 	b.w	8003144 <_getpid>

08014300 <atan2>:
 8014300:	f000 b802 	b.w	8014308 <__ieee754_atan2>
 8014304:	0000      	movs	r0, r0
	...

08014308 <__ieee754_atan2>:
 8014308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801430c:	ec57 6b11 	vmov	r6, r7, d1
 8014310:	4273      	negs	r3, r6
 8014312:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8014490 <__ieee754_atan2+0x188>
 8014316:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801431a:	4333      	orrs	r3, r6
 801431c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8014320:	4543      	cmp	r3, r8
 8014322:	ec51 0b10 	vmov	r0, r1, d0
 8014326:	ee11 5a10 	vmov	r5, s2
 801432a:	d80a      	bhi.n	8014342 <__ieee754_atan2+0x3a>
 801432c:	4244      	negs	r4, r0
 801432e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8014332:	4304      	orrs	r4, r0
 8014334:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8014338:	4544      	cmp	r4, r8
 801433a:	ee10 9a10 	vmov	r9, s0
 801433e:	468e      	mov	lr, r1
 8014340:	d907      	bls.n	8014352 <__ieee754_atan2+0x4a>
 8014342:	4632      	mov	r2, r6
 8014344:	463b      	mov	r3, r7
 8014346:	f7eb ffa1 	bl	800028c <__adddf3>
 801434a:	ec41 0b10 	vmov	d0, r0, r1
 801434e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014352:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 8014356:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801435a:	4334      	orrs	r4, r6
 801435c:	d103      	bne.n	8014366 <__ieee754_atan2+0x5e>
 801435e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014362:	f000 b935 	b.w	80145d0 <atan>
 8014366:	17bc      	asrs	r4, r7, #30
 8014368:	f004 0402 	and.w	r4, r4, #2
 801436c:	ea53 0909 	orrs.w	r9, r3, r9
 8014370:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8014374:	d107      	bne.n	8014386 <__ieee754_atan2+0x7e>
 8014376:	2c02      	cmp	r4, #2
 8014378:	d05f      	beq.n	801443a <__ieee754_atan2+0x132>
 801437a:	2c03      	cmp	r4, #3
 801437c:	d1e5      	bne.n	801434a <__ieee754_atan2+0x42>
 801437e:	a140      	add	r1, pc, #256	; (adr r1, 8014480 <__ieee754_atan2+0x178>)
 8014380:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014384:	e7e1      	b.n	801434a <__ieee754_atan2+0x42>
 8014386:	4315      	orrs	r5, r2
 8014388:	d106      	bne.n	8014398 <__ieee754_atan2+0x90>
 801438a:	f1be 0f00 	cmp.w	lr, #0
 801438e:	da5f      	bge.n	8014450 <__ieee754_atan2+0x148>
 8014390:	a13d      	add	r1, pc, #244	; (adr r1, 8014488 <__ieee754_atan2+0x180>)
 8014392:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014396:	e7d8      	b.n	801434a <__ieee754_atan2+0x42>
 8014398:	4542      	cmp	r2, r8
 801439a:	d10f      	bne.n	80143bc <__ieee754_atan2+0xb4>
 801439c:	4293      	cmp	r3, r2
 801439e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80143a2:	d107      	bne.n	80143b4 <__ieee754_atan2+0xac>
 80143a4:	2c02      	cmp	r4, #2
 80143a6:	d84c      	bhi.n	8014442 <__ieee754_atan2+0x13a>
 80143a8:	4b33      	ldr	r3, [pc, #204]	; (8014478 <__ieee754_atan2+0x170>)
 80143aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80143ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80143b2:	e7ca      	b.n	801434a <__ieee754_atan2+0x42>
 80143b4:	2c02      	cmp	r4, #2
 80143b6:	d848      	bhi.n	801444a <__ieee754_atan2+0x142>
 80143b8:	4b30      	ldr	r3, [pc, #192]	; (801447c <__ieee754_atan2+0x174>)
 80143ba:	e7f6      	b.n	80143aa <__ieee754_atan2+0xa2>
 80143bc:	4543      	cmp	r3, r8
 80143be:	d0e4      	beq.n	801438a <__ieee754_atan2+0x82>
 80143c0:	1a9b      	subs	r3, r3, r2
 80143c2:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80143c6:	ea4f 5223 	mov.w	r2, r3, asr #20
 80143ca:	da1e      	bge.n	801440a <__ieee754_atan2+0x102>
 80143cc:	2f00      	cmp	r7, #0
 80143ce:	da01      	bge.n	80143d4 <__ieee754_atan2+0xcc>
 80143d0:	323c      	adds	r2, #60	; 0x3c
 80143d2:	db1e      	blt.n	8014412 <__ieee754_atan2+0x10a>
 80143d4:	4632      	mov	r2, r6
 80143d6:	463b      	mov	r3, r7
 80143d8:	f7ec fa38 	bl	800084c <__aeabi_ddiv>
 80143dc:	ec41 0b10 	vmov	d0, r0, r1
 80143e0:	f000 fa96 	bl	8014910 <fabs>
 80143e4:	f000 f8f4 	bl	80145d0 <atan>
 80143e8:	ec51 0b10 	vmov	r0, r1, d0
 80143ec:	2c01      	cmp	r4, #1
 80143ee:	d013      	beq.n	8014418 <__ieee754_atan2+0x110>
 80143f0:	2c02      	cmp	r4, #2
 80143f2:	d015      	beq.n	8014420 <__ieee754_atan2+0x118>
 80143f4:	2c00      	cmp	r4, #0
 80143f6:	d0a8      	beq.n	801434a <__ieee754_atan2+0x42>
 80143f8:	a317      	add	r3, pc, #92	; (adr r3, 8014458 <__ieee754_atan2+0x150>)
 80143fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80143fe:	f7eb ff43 	bl	8000288 <__aeabi_dsub>
 8014402:	a317      	add	r3, pc, #92	; (adr r3, 8014460 <__ieee754_atan2+0x158>)
 8014404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014408:	e014      	b.n	8014434 <__ieee754_atan2+0x12c>
 801440a:	a117      	add	r1, pc, #92	; (adr r1, 8014468 <__ieee754_atan2+0x160>)
 801440c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014410:	e7ec      	b.n	80143ec <__ieee754_atan2+0xe4>
 8014412:	2000      	movs	r0, #0
 8014414:	2100      	movs	r1, #0
 8014416:	e7e9      	b.n	80143ec <__ieee754_atan2+0xe4>
 8014418:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801441c:	4619      	mov	r1, r3
 801441e:	e794      	b.n	801434a <__ieee754_atan2+0x42>
 8014420:	a30d      	add	r3, pc, #52	; (adr r3, 8014458 <__ieee754_atan2+0x150>)
 8014422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014426:	f7eb ff2f 	bl	8000288 <__aeabi_dsub>
 801442a:	4602      	mov	r2, r0
 801442c:	460b      	mov	r3, r1
 801442e:	a10c      	add	r1, pc, #48	; (adr r1, 8014460 <__ieee754_atan2+0x158>)
 8014430:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014434:	f7eb ff28 	bl	8000288 <__aeabi_dsub>
 8014438:	e787      	b.n	801434a <__ieee754_atan2+0x42>
 801443a:	a109      	add	r1, pc, #36	; (adr r1, 8014460 <__ieee754_atan2+0x158>)
 801443c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014440:	e783      	b.n	801434a <__ieee754_atan2+0x42>
 8014442:	a10b      	add	r1, pc, #44	; (adr r1, 8014470 <__ieee754_atan2+0x168>)
 8014444:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014448:	e77f      	b.n	801434a <__ieee754_atan2+0x42>
 801444a:	2000      	movs	r0, #0
 801444c:	2100      	movs	r1, #0
 801444e:	e77c      	b.n	801434a <__ieee754_atan2+0x42>
 8014450:	a105      	add	r1, pc, #20	; (adr r1, 8014468 <__ieee754_atan2+0x160>)
 8014452:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014456:	e778      	b.n	801434a <__ieee754_atan2+0x42>
 8014458:	33145c07 	.word	0x33145c07
 801445c:	3ca1a626 	.word	0x3ca1a626
 8014460:	54442d18 	.word	0x54442d18
 8014464:	400921fb 	.word	0x400921fb
 8014468:	54442d18 	.word	0x54442d18
 801446c:	3ff921fb 	.word	0x3ff921fb
 8014470:	54442d18 	.word	0x54442d18
 8014474:	3fe921fb 	.word	0x3fe921fb
 8014478:	08015c18 	.word	0x08015c18
 801447c:	08015c30 	.word	0x08015c30
 8014480:	54442d18 	.word	0x54442d18
 8014484:	c00921fb 	.word	0xc00921fb
 8014488:	54442d18 	.word	0x54442d18
 801448c:	bff921fb 	.word	0xbff921fb
 8014490:	7ff00000 	.word	0x7ff00000

08014494 <pow>:
 8014494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014496:	ed2d 8b02 	vpush	{d8}
 801449a:	eeb0 8a40 	vmov.f32	s16, s0
 801449e:	eef0 8a60 	vmov.f32	s17, s1
 80144a2:	ec55 4b11 	vmov	r4, r5, d1
 80144a6:	f000 fb6b 	bl	8014b80 <__ieee754_pow>
 80144aa:	4622      	mov	r2, r4
 80144ac:	462b      	mov	r3, r5
 80144ae:	4620      	mov	r0, r4
 80144b0:	4629      	mov	r1, r5
 80144b2:	ec57 6b10 	vmov	r6, r7, d0
 80144b6:	f7ec fb39 	bl	8000b2c <__aeabi_dcmpun>
 80144ba:	2800      	cmp	r0, #0
 80144bc:	d13b      	bne.n	8014536 <pow+0xa2>
 80144be:	ec51 0b18 	vmov	r0, r1, d8
 80144c2:	2200      	movs	r2, #0
 80144c4:	2300      	movs	r3, #0
 80144c6:	f7ec faff 	bl	8000ac8 <__aeabi_dcmpeq>
 80144ca:	b1b8      	cbz	r0, 80144fc <pow+0x68>
 80144cc:	2200      	movs	r2, #0
 80144ce:	2300      	movs	r3, #0
 80144d0:	4620      	mov	r0, r4
 80144d2:	4629      	mov	r1, r5
 80144d4:	f7ec faf8 	bl	8000ac8 <__aeabi_dcmpeq>
 80144d8:	2800      	cmp	r0, #0
 80144da:	d146      	bne.n	801456a <pow+0xd6>
 80144dc:	ec45 4b10 	vmov	d0, r4, r5
 80144e0:	f000 fa1f 	bl	8014922 <finite>
 80144e4:	b338      	cbz	r0, 8014536 <pow+0xa2>
 80144e6:	2200      	movs	r2, #0
 80144e8:	2300      	movs	r3, #0
 80144ea:	4620      	mov	r0, r4
 80144ec:	4629      	mov	r1, r5
 80144ee:	f7ec faf5 	bl	8000adc <__aeabi_dcmplt>
 80144f2:	b300      	cbz	r0, 8014536 <pow+0xa2>
 80144f4:	f7fd fdd4 	bl	80120a0 <__errno>
 80144f8:	2322      	movs	r3, #34	; 0x22
 80144fa:	e01b      	b.n	8014534 <pow+0xa0>
 80144fc:	ec47 6b10 	vmov	d0, r6, r7
 8014500:	f000 fa0f 	bl	8014922 <finite>
 8014504:	b9e0      	cbnz	r0, 8014540 <pow+0xac>
 8014506:	eeb0 0a48 	vmov.f32	s0, s16
 801450a:	eef0 0a68 	vmov.f32	s1, s17
 801450e:	f000 fa08 	bl	8014922 <finite>
 8014512:	b1a8      	cbz	r0, 8014540 <pow+0xac>
 8014514:	ec45 4b10 	vmov	d0, r4, r5
 8014518:	f000 fa03 	bl	8014922 <finite>
 801451c:	b180      	cbz	r0, 8014540 <pow+0xac>
 801451e:	4632      	mov	r2, r6
 8014520:	463b      	mov	r3, r7
 8014522:	4630      	mov	r0, r6
 8014524:	4639      	mov	r1, r7
 8014526:	f7ec fb01 	bl	8000b2c <__aeabi_dcmpun>
 801452a:	2800      	cmp	r0, #0
 801452c:	d0e2      	beq.n	80144f4 <pow+0x60>
 801452e:	f7fd fdb7 	bl	80120a0 <__errno>
 8014532:	2321      	movs	r3, #33	; 0x21
 8014534:	6003      	str	r3, [r0, #0]
 8014536:	ecbd 8b02 	vpop	{d8}
 801453a:	ec47 6b10 	vmov	d0, r6, r7
 801453e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014540:	2200      	movs	r2, #0
 8014542:	2300      	movs	r3, #0
 8014544:	4630      	mov	r0, r6
 8014546:	4639      	mov	r1, r7
 8014548:	f7ec fabe 	bl	8000ac8 <__aeabi_dcmpeq>
 801454c:	2800      	cmp	r0, #0
 801454e:	d0f2      	beq.n	8014536 <pow+0xa2>
 8014550:	eeb0 0a48 	vmov.f32	s0, s16
 8014554:	eef0 0a68 	vmov.f32	s1, s17
 8014558:	f000 f9e3 	bl	8014922 <finite>
 801455c:	2800      	cmp	r0, #0
 801455e:	d0ea      	beq.n	8014536 <pow+0xa2>
 8014560:	ec45 4b10 	vmov	d0, r4, r5
 8014564:	f000 f9dd 	bl	8014922 <finite>
 8014568:	e7c3      	b.n	80144f2 <pow+0x5e>
 801456a:	4f01      	ldr	r7, [pc, #4]	; (8014570 <pow+0xdc>)
 801456c:	2600      	movs	r6, #0
 801456e:	e7e2      	b.n	8014536 <pow+0xa2>
 8014570:	3ff00000 	.word	0x3ff00000

08014574 <sqrt>:
 8014574:	b538      	push	{r3, r4, r5, lr}
 8014576:	ed2d 8b02 	vpush	{d8}
 801457a:	ec55 4b10 	vmov	r4, r5, d0
 801457e:	f000 f9db 	bl	8014938 <__ieee754_sqrt>
 8014582:	4622      	mov	r2, r4
 8014584:	462b      	mov	r3, r5
 8014586:	4620      	mov	r0, r4
 8014588:	4629      	mov	r1, r5
 801458a:	eeb0 8a40 	vmov.f32	s16, s0
 801458e:	eef0 8a60 	vmov.f32	s17, s1
 8014592:	f7ec facb 	bl	8000b2c <__aeabi_dcmpun>
 8014596:	b990      	cbnz	r0, 80145be <sqrt+0x4a>
 8014598:	2200      	movs	r2, #0
 801459a:	2300      	movs	r3, #0
 801459c:	4620      	mov	r0, r4
 801459e:	4629      	mov	r1, r5
 80145a0:	f7ec fa9c 	bl	8000adc <__aeabi_dcmplt>
 80145a4:	b158      	cbz	r0, 80145be <sqrt+0x4a>
 80145a6:	f7fd fd7b 	bl	80120a0 <__errno>
 80145aa:	2321      	movs	r3, #33	; 0x21
 80145ac:	6003      	str	r3, [r0, #0]
 80145ae:	2200      	movs	r2, #0
 80145b0:	2300      	movs	r3, #0
 80145b2:	4610      	mov	r0, r2
 80145b4:	4619      	mov	r1, r3
 80145b6:	f7ec f949 	bl	800084c <__aeabi_ddiv>
 80145ba:	ec41 0b18 	vmov	d8, r0, r1
 80145be:	eeb0 0a48 	vmov.f32	s0, s16
 80145c2:	eef0 0a68 	vmov.f32	s1, s17
 80145c6:	ecbd 8b02 	vpop	{d8}
 80145ca:	bd38      	pop	{r3, r4, r5, pc}
 80145cc:	0000      	movs	r0, r0
	...

080145d0 <atan>:
 80145d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145d4:	ec55 4b10 	vmov	r4, r5, d0
 80145d8:	4bc3      	ldr	r3, [pc, #780]	; (80148e8 <atan+0x318>)
 80145da:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80145de:	429e      	cmp	r6, r3
 80145e0:	46ab      	mov	fp, r5
 80145e2:	dd18      	ble.n	8014616 <atan+0x46>
 80145e4:	4bc1      	ldr	r3, [pc, #772]	; (80148ec <atan+0x31c>)
 80145e6:	429e      	cmp	r6, r3
 80145e8:	dc01      	bgt.n	80145ee <atan+0x1e>
 80145ea:	d109      	bne.n	8014600 <atan+0x30>
 80145ec:	b144      	cbz	r4, 8014600 <atan+0x30>
 80145ee:	4622      	mov	r2, r4
 80145f0:	462b      	mov	r3, r5
 80145f2:	4620      	mov	r0, r4
 80145f4:	4629      	mov	r1, r5
 80145f6:	f7eb fe49 	bl	800028c <__adddf3>
 80145fa:	4604      	mov	r4, r0
 80145fc:	460d      	mov	r5, r1
 80145fe:	e006      	b.n	801460e <atan+0x3e>
 8014600:	f1bb 0f00 	cmp.w	fp, #0
 8014604:	f300 8131 	bgt.w	801486a <atan+0x29a>
 8014608:	a59b      	add	r5, pc, #620	; (adr r5, 8014878 <atan+0x2a8>)
 801460a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801460e:	ec45 4b10 	vmov	d0, r4, r5
 8014612:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014616:	4bb6      	ldr	r3, [pc, #728]	; (80148f0 <atan+0x320>)
 8014618:	429e      	cmp	r6, r3
 801461a:	dc14      	bgt.n	8014646 <atan+0x76>
 801461c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8014620:	429e      	cmp	r6, r3
 8014622:	dc0d      	bgt.n	8014640 <atan+0x70>
 8014624:	a396      	add	r3, pc, #600	; (adr r3, 8014880 <atan+0x2b0>)
 8014626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801462a:	ee10 0a10 	vmov	r0, s0
 801462e:	4629      	mov	r1, r5
 8014630:	f7eb fe2c 	bl	800028c <__adddf3>
 8014634:	4baf      	ldr	r3, [pc, #700]	; (80148f4 <atan+0x324>)
 8014636:	2200      	movs	r2, #0
 8014638:	f7ec fa6e 	bl	8000b18 <__aeabi_dcmpgt>
 801463c:	2800      	cmp	r0, #0
 801463e:	d1e6      	bne.n	801460e <atan+0x3e>
 8014640:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8014644:	e02b      	b.n	801469e <atan+0xce>
 8014646:	f000 f963 	bl	8014910 <fabs>
 801464a:	4bab      	ldr	r3, [pc, #684]	; (80148f8 <atan+0x328>)
 801464c:	429e      	cmp	r6, r3
 801464e:	ec55 4b10 	vmov	r4, r5, d0
 8014652:	f300 80bf 	bgt.w	80147d4 <atan+0x204>
 8014656:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801465a:	429e      	cmp	r6, r3
 801465c:	f300 80a0 	bgt.w	80147a0 <atan+0x1d0>
 8014660:	ee10 2a10 	vmov	r2, s0
 8014664:	ee10 0a10 	vmov	r0, s0
 8014668:	462b      	mov	r3, r5
 801466a:	4629      	mov	r1, r5
 801466c:	f7eb fe0e 	bl	800028c <__adddf3>
 8014670:	4ba0      	ldr	r3, [pc, #640]	; (80148f4 <atan+0x324>)
 8014672:	2200      	movs	r2, #0
 8014674:	f7eb fe08 	bl	8000288 <__aeabi_dsub>
 8014678:	2200      	movs	r2, #0
 801467a:	4606      	mov	r6, r0
 801467c:	460f      	mov	r7, r1
 801467e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014682:	4620      	mov	r0, r4
 8014684:	4629      	mov	r1, r5
 8014686:	f7eb fe01 	bl	800028c <__adddf3>
 801468a:	4602      	mov	r2, r0
 801468c:	460b      	mov	r3, r1
 801468e:	4630      	mov	r0, r6
 8014690:	4639      	mov	r1, r7
 8014692:	f7ec f8db 	bl	800084c <__aeabi_ddiv>
 8014696:	f04f 0a00 	mov.w	sl, #0
 801469a:	4604      	mov	r4, r0
 801469c:	460d      	mov	r5, r1
 801469e:	4622      	mov	r2, r4
 80146a0:	462b      	mov	r3, r5
 80146a2:	4620      	mov	r0, r4
 80146a4:	4629      	mov	r1, r5
 80146a6:	f7eb ffa7 	bl	80005f8 <__aeabi_dmul>
 80146aa:	4602      	mov	r2, r0
 80146ac:	460b      	mov	r3, r1
 80146ae:	4680      	mov	r8, r0
 80146b0:	4689      	mov	r9, r1
 80146b2:	f7eb ffa1 	bl	80005f8 <__aeabi_dmul>
 80146b6:	a374      	add	r3, pc, #464	; (adr r3, 8014888 <atan+0x2b8>)
 80146b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146bc:	4606      	mov	r6, r0
 80146be:	460f      	mov	r7, r1
 80146c0:	f7eb ff9a 	bl	80005f8 <__aeabi_dmul>
 80146c4:	a372      	add	r3, pc, #456	; (adr r3, 8014890 <atan+0x2c0>)
 80146c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146ca:	f7eb fddf 	bl	800028c <__adddf3>
 80146ce:	4632      	mov	r2, r6
 80146d0:	463b      	mov	r3, r7
 80146d2:	f7eb ff91 	bl	80005f8 <__aeabi_dmul>
 80146d6:	a370      	add	r3, pc, #448	; (adr r3, 8014898 <atan+0x2c8>)
 80146d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146dc:	f7eb fdd6 	bl	800028c <__adddf3>
 80146e0:	4632      	mov	r2, r6
 80146e2:	463b      	mov	r3, r7
 80146e4:	f7eb ff88 	bl	80005f8 <__aeabi_dmul>
 80146e8:	a36d      	add	r3, pc, #436	; (adr r3, 80148a0 <atan+0x2d0>)
 80146ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146ee:	f7eb fdcd 	bl	800028c <__adddf3>
 80146f2:	4632      	mov	r2, r6
 80146f4:	463b      	mov	r3, r7
 80146f6:	f7eb ff7f 	bl	80005f8 <__aeabi_dmul>
 80146fa:	a36b      	add	r3, pc, #428	; (adr r3, 80148a8 <atan+0x2d8>)
 80146fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014700:	f7eb fdc4 	bl	800028c <__adddf3>
 8014704:	4632      	mov	r2, r6
 8014706:	463b      	mov	r3, r7
 8014708:	f7eb ff76 	bl	80005f8 <__aeabi_dmul>
 801470c:	a368      	add	r3, pc, #416	; (adr r3, 80148b0 <atan+0x2e0>)
 801470e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014712:	f7eb fdbb 	bl	800028c <__adddf3>
 8014716:	4642      	mov	r2, r8
 8014718:	464b      	mov	r3, r9
 801471a:	f7eb ff6d 	bl	80005f8 <__aeabi_dmul>
 801471e:	a366      	add	r3, pc, #408	; (adr r3, 80148b8 <atan+0x2e8>)
 8014720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014724:	4680      	mov	r8, r0
 8014726:	4689      	mov	r9, r1
 8014728:	4630      	mov	r0, r6
 801472a:	4639      	mov	r1, r7
 801472c:	f7eb ff64 	bl	80005f8 <__aeabi_dmul>
 8014730:	a363      	add	r3, pc, #396	; (adr r3, 80148c0 <atan+0x2f0>)
 8014732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014736:	f7eb fda7 	bl	8000288 <__aeabi_dsub>
 801473a:	4632      	mov	r2, r6
 801473c:	463b      	mov	r3, r7
 801473e:	f7eb ff5b 	bl	80005f8 <__aeabi_dmul>
 8014742:	a361      	add	r3, pc, #388	; (adr r3, 80148c8 <atan+0x2f8>)
 8014744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014748:	f7eb fd9e 	bl	8000288 <__aeabi_dsub>
 801474c:	4632      	mov	r2, r6
 801474e:	463b      	mov	r3, r7
 8014750:	f7eb ff52 	bl	80005f8 <__aeabi_dmul>
 8014754:	a35e      	add	r3, pc, #376	; (adr r3, 80148d0 <atan+0x300>)
 8014756:	e9d3 2300 	ldrd	r2, r3, [r3]
 801475a:	f7eb fd95 	bl	8000288 <__aeabi_dsub>
 801475e:	4632      	mov	r2, r6
 8014760:	463b      	mov	r3, r7
 8014762:	f7eb ff49 	bl	80005f8 <__aeabi_dmul>
 8014766:	a35c      	add	r3, pc, #368	; (adr r3, 80148d8 <atan+0x308>)
 8014768:	e9d3 2300 	ldrd	r2, r3, [r3]
 801476c:	f7eb fd8c 	bl	8000288 <__aeabi_dsub>
 8014770:	4632      	mov	r2, r6
 8014772:	463b      	mov	r3, r7
 8014774:	f7eb ff40 	bl	80005f8 <__aeabi_dmul>
 8014778:	4602      	mov	r2, r0
 801477a:	460b      	mov	r3, r1
 801477c:	4640      	mov	r0, r8
 801477e:	4649      	mov	r1, r9
 8014780:	f7eb fd84 	bl	800028c <__adddf3>
 8014784:	4622      	mov	r2, r4
 8014786:	462b      	mov	r3, r5
 8014788:	f7eb ff36 	bl	80005f8 <__aeabi_dmul>
 801478c:	f1ba 3fff 	cmp.w	sl, #4294967295	; 0xffffffff
 8014790:	4602      	mov	r2, r0
 8014792:	460b      	mov	r3, r1
 8014794:	d14b      	bne.n	801482e <atan+0x25e>
 8014796:	4620      	mov	r0, r4
 8014798:	4629      	mov	r1, r5
 801479a:	f7eb fd75 	bl	8000288 <__aeabi_dsub>
 801479e:	e72c      	b.n	80145fa <atan+0x2a>
 80147a0:	ee10 0a10 	vmov	r0, s0
 80147a4:	4b53      	ldr	r3, [pc, #332]	; (80148f4 <atan+0x324>)
 80147a6:	2200      	movs	r2, #0
 80147a8:	4629      	mov	r1, r5
 80147aa:	f7eb fd6d 	bl	8000288 <__aeabi_dsub>
 80147ae:	4b51      	ldr	r3, [pc, #324]	; (80148f4 <atan+0x324>)
 80147b0:	4606      	mov	r6, r0
 80147b2:	460f      	mov	r7, r1
 80147b4:	2200      	movs	r2, #0
 80147b6:	4620      	mov	r0, r4
 80147b8:	4629      	mov	r1, r5
 80147ba:	f7eb fd67 	bl	800028c <__adddf3>
 80147be:	4602      	mov	r2, r0
 80147c0:	460b      	mov	r3, r1
 80147c2:	4630      	mov	r0, r6
 80147c4:	4639      	mov	r1, r7
 80147c6:	f7ec f841 	bl	800084c <__aeabi_ddiv>
 80147ca:	f04f 0a01 	mov.w	sl, #1
 80147ce:	4604      	mov	r4, r0
 80147d0:	460d      	mov	r5, r1
 80147d2:	e764      	b.n	801469e <atan+0xce>
 80147d4:	4b49      	ldr	r3, [pc, #292]	; (80148fc <atan+0x32c>)
 80147d6:	429e      	cmp	r6, r3
 80147d8:	da1d      	bge.n	8014816 <atan+0x246>
 80147da:	ee10 0a10 	vmov	r0, s0
 80147de:	4b48      	ldr	r3, [pc, #288]	; (8014900 <atan+0x330>)
 80147e0:	2200      	movs	r2, #0
 80147e2:	4629      	mov	r1, r5
 80147e4:	f7eb fd50 	bl	8000288 <__aeabi_dsub>
 80147e8:	4b45      	ldr	r3, [pc, #276]	; (8014900 <atan+0x330>)
 80147ea:	4606      	mov	r6, r0
 80147ec:	460f      	mov	r7, r1
 80147ee:	2200      	movs	r2, #0
 80147f0:	4620      	mov	r0, r4
 80147f2:	4629      	mov	r1, r5
 80147f4:	f7eb ff00 	bl	80005f8 <__aeabi_dmul>
 80147f8:	4b3e      	ldr	r3, [pc, #248]	; (80148f4 <atan+0x324>)
 80147fa:	2200      	movs	r2, #0
 80147fc:	f7eb fd46 	bl	800028c <__adddf3>
 8014800:	4602      	mov	r2, r0
 8014802:	460b      	mov	r3, r1
 8014804:	4630      	mov	r0, r6
 8014806:	4639      	mov	r1, r7
 8014808:	f7ec f820 	bl	800084c <__aeabi_ddiv>
 801480c:	f04f 0a02 	mov.w	sl, #2
 8014810:	4604      	mov	r4, r0
 8014812:	460d      	mov	r5, r1
 8014814:	e743      	b.n	801469e <atan+0xce>
 8014816:	462b      	mov	r3, r5
 8014818:	ee10 2a10 	vmov	r2, s0
 801481c:	4939      	ldr	r1, [pc, #228]	; (8014904 <atan+0x334>)
 801481e:	2000      	movs	r0, #0
 8014820:	f7ec f814 	bl	800084c <__aeabi_ddiv>
 8014824:	f04f 0a03 	mov.w	sl, #3
 8014828:	4604      	mov	r4, r0
 801482a:	460d      	mov	r5, r1
 801482c:	e737      	b.n	801469e <atan+0xce>
 801482e:	4b36      	ldr	r3, [pc, #216]	; (8014908 <atan+0x338>)
 8014830:	4e36      	ldr	r6, [pc, #216]	; (801490c <atan+0x33c>)
 8014832:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8014836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801483a:	f7eb fd25 	bl	8000288 <__aeabi_dsub>
 801483e:	4622      	mov	r2, r4
 8014840:	462b      	mov	r3, r5
 8014842:	f7eb fd21 	bl	8000288 <__aeabi_dsub>
 8014846:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 801484a:	4602      	mov	r2, r0
 801484c:	460b      	mov	r3, r1
 801484e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8014852:	f7eb fd19 	bl	8000288 <__aeabi_dsub>
 8014856:	f1bb 0f00 	cmp.w	fp, #0
 801485a:	4604      	mov	r4, r0
 801485c:	460d      	mov	r5, r1
 801485e:	f6bf aed6 	bge.w	801460e <atan+0x3e>
 8014862:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014866:	461d      	mov	r5, r3
 8014868:	e6d1      	b.n	801460e <atan+0x3e>
 801486a:	a51d      	add	r5, pc, #116	; (adr r5, 80148e0 <atan+0x310>)
 801486c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8014870:	e6cd      	b.n	801460e <atan+0x3e>
 8014872:	bf00      	nop
 8014874:	f3af 8000 	nop.w
 8014878:	54442d18 	.word	0x54442d18
 801487c:	bff921fb 	.word	0xbff921fb
 8014880:	8800759c 	.word	0x8800759c
 8014884:	7e37e43c 	.word	0x7e37e43c
 8014888:	e322da11 	.word	0xe322da11
 801488c:	3f90ad3a 	.word	0x3f90ad3a
 8014890:	24760deb 	.word	0x24760deb
 8014894:	3fa97b4b 	.word	0x3fa97b4b
 8014898:	a0d03d51 	.word	0xa0d03d51
 801489c:	3fb10d66 	.word	0x3fb10d66
 80148a0:	c54c206e 	.word	0xc54c206e
 80148a4:	3fb745cd 	.word	0x3fb745cd
 80148a8:	920083ff 	.word	0x920083ff
 80148ac:	3fc24924 	.word	0x3fc24924
 80148b0:	5555550d 	.word	0x5555550d
 80148b4:	3fd55555 	.word	0x3fd55555
 80148b8:	2c6a6c2f 	.word	0x2c6a6c2f
 80148bc:	bfa2b444 	.word	0xbfa2b444
 80148c0:	52defd9a 	.word	0x52defd9a
 80148c4:	3fadde2d 	.word	0x3fadde2d
 80148c8:	af749a6d 	.word	0xaf749a6d
 80148cc:	3fb3b0f2 	.word	0x3fb3b0f2
 80148d0:	fe231671 	.word	0xfe231671
 80148d4:	3fbc71c6 	.word	0x3fbc71c6
 80148d8:	9998ebc4 	.word	0x9998ebc4
 80148dc:	3fc99999 	.word	0x3fc99999
 80148e0:	54442d18 	.word	0x54442d18
 80148e4:	3ff921fb 	.word	0x3ff921fb
 80148e8:	440fffff 	.word	0x440fffff
 80148ec:	7ff00000 	.word	0x7ff00000
 80148f0:	3fdbffff 	.word	0x3fdbffff
 80148f4:	3ff00000 	.word	0x3ff00000
 80148f8:	3ff2ffff 	.word	0x3ff2ffff
 80148fc:	40038000 	.word	0x40038000
 8014900:	3ff80000 	.word	0x3ff80000
 8014904:	bff00000 	.word	0xbff00000
 8014908:	08015c68 	.word	0x08015c68
 801490c:	08015c48 	.word	0x08015c48

08014910 <fabs>:
 8014910:	ec51 0b10 	vmov	r0, r1, d0
 8014914:	ee10 2a10 	vmov	r2, s0
 8014918:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801491c:	ec43 2b10 	vmov	d0, r2, r3
 8014920:	4770      	bx	lr

08014922 <finite>:
 8014922:	b082      	sub	sp, #8
 8014924:	ed8d 0b00 	vstr	d0, [sp]
 8014928:	9801      	ldr	r0, [sp, #4]
 801492a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801492e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8014932:	0fc0      	lsrs	r0, r0, #31
 8014934:	b002      	add	sp, #8
 8014936:	4770      	bx	lr

08014938 <__ieee754_sqrt>:
 8014938:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801493c:	ec55 4b10 	vmov	r4, r5, d0
 8014940:	4e67      	ldr	r6, [pc, #412]	; (8014ae0 <__ieee754_sqrt+0x1a8>)
 8014942:	43ae      	bics	r6, r5
 8014944:	ee10 0a10 	vmov	r0, s0
 8014948:	ee10 2a10 	vmov	r2, s0
 801494c:	4629      	mov	r1, r5
 801494e:	462b      	mov	r3, r5
 8014950:	d10d      	bne.n	801496e <__ieee754_sqrt+0x36>
 8014952:	f7eb fe51 	bl	80005f8 <__aeabi_dmul>
 8014956:	4602      	mov	r2, r0
 8014958:	460b      	mov	r3, r1
 801495a:	4620      	mov	r0, r4
 801495c:	4629      	mov	r1, r5
 801495e:	f7eb fc95 	bl	800028c <__adddf3>
 8014962:	4604      	mov	r4, r0
 8014964:	460d      	mov	r5, r1
 8014966:	ec45 4b10 	vmov	d0, r4, r5
 801496a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801496e:	2d00      	cmp	r5, #0
 8014970:	dc0b      	bgt.n	801498a <__ieee754_sqrt+0x52>
 8014972:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014976:	4326      	orrs	r6, r4
 8014978:	d0f5      	beq.n	8014966 <__ieee754_sqrt+0x2e>
 801497a:	b135      	cbz	r5, 801498a <__ieee754_sqrt+0x52>
 801497c:	f7eb fc84 	bl	8000288 <__aeabi_dsub>
 8014980:	4602      	mov	r2, r0
 8014982:	460b      	mov	r3, r1
 8014984:	f7eb ff62 	bl	800084c <__aeabi_ddiv>
 8014988:	e7eb      	b.n	8014962 <__ieee754_sqrt+0x2a>
 801498a:	1509      	asrs	r1, r1, #20
 801498c:	f000 808d 	beq.w	8014aaa <__ieee754_sqrt+0x172>
 8014990:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8014994:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8014998:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801499c:	07c9      	lsls	r1, r1, #31
 801499e:	bf5c      	itt	pl
 80149a0:	005b      	lslpl	r3, r3, #1
 80149a2:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 80149a6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80149aa:	bf58      	it	pl
 80149ac:	0052      	lslpl	r2, r2, #1
 80149ae:	2500      	movs	r5, #0
 80149b0:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80149b4:	1076      	asrs	r6, r6, #1
 80149b6:	0052      	lsls	r2, r2, #1
 80149b8:	f04f 0e16 	mov.w	lr, #22
 80149bc:	46ac      	mov	ip, r5
 80149be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80149c2:	eb0c 0001 	add.w	r0, ip, r1
 80149c6:	4298      	cmp	r0, r3
 80149c8:	bfde      	ittt	le
 80149ca:	1a1b      	suble	r3, r3, r0
 80149cc:	eb00 0c01 	addle.w	ip, r0, r1
 80149d0:	186d      	addle	r5, r5, r1
 80149d2:	005b      	lsls	r3, r3, #1
 80149d4:	f1be 0e01 	subs.w	lr, lr, #1
 80149d8:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80149dc:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80149e0:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80149e4:	d1ed      	bne.n	80149c2 <__ieee754_sqrt+0x8a>
 80149e6:	4674      	mov	r4, lr
 80149e8:	2720      	movs	r7, #32
 80149ea:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80149ee:	4563      	cmp	r3, ip
 80149f0:	eb01 000e 	add.w	r0, r1, lr
 80149f4:	dc02      	bgt.n	80149fc <__ieee754_sqrt+0xc4>
 80149f6:	d113      	bne.n	8014a20 <__ieee754_sqrt+0xe8>
 80149f8:	4290      	cmp	r0, r2
 80149fa:	d811      	bhi.n	8014a20 <__ieee754_sqrt+0xe8>
 80149fc:	2800      	cmp	r0, #0
 80149fe:	eb00 0e01 	add.w	lr, r0, r1
 8014a02:	da57      	bge.n	8014ab4 <__ieee754_sqrt+0x17c>
 8014a04:	f1be 0f00 	cmp.w	lr, #0
 8014a08:	db54      	blt.n	8014ab4 <__ieee754_sqrt+0x17c>
 8014a0a:	f10c 0801 	add.w	r8, ip, #1
 8014a0e:	eba3 030c 	sub.w	r3, r3, ip
 8014a12:	4290      	cmp	r0, r2
 8014a14:	bf88      	it	hi
 8014a16:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8014a1a:	1a12      	subs	r2, r2, r0
 8014a1c:	440c      	add	r4, r1
 8014a1e:	46c4      	mov	ip, r8
 8014a20:	005b      	lsls	r3, r3, #1
 8014a22:	3f01      	subs	r7, #1
 8014a24:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8014a28:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8014a2c:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8014a30:	d1dd      	bne.n	80149ee <__ieee754_sqrt+0xb6>
 8014a32:	4313      	orrs	r3, r2
 8014a34:	d01b      	beq.n	8014a6e <__ieee754_sqrt+0x136>
 8014a36:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 8014ae4 <__ieee754_sqrt+0x1ac>
 8014a3a:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8014ae8 <__ieee754_sqrt+0x1b0>
 8014a3e:	e9da 0100 	ldrd	r0, r1, [sl]
 8014a42:	e9db 2300 	ldrd	r2, r3, [fp]
 8014a46:	f7eb fc1f 	bl	8000288 <__aeabi_dsub>
 8014a4a:	e9da 8900 	ldrd	r8, r9, [sl]
 8014a4e:	4602      	mov	r2, r0
 8014a50:	460b      	mov	r3, r1
 8014a52:	4640      	mov	r0, r8
 8014a54:	4649      	mov	r1, r9
 8014a56:	f7ec f84b 	bl	8000af0 <__aeabi_dcmple>
 8014a5a:	b140      	cbz	r0, 8014a6e <__ieee754_sqrt+0x136>
 8014a5c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8014a60:	e9da 0100 	ldrd	r0, r1, [sl]
 8014a64:	e9db 2300 	ldrd	r2, r3, [fp]
 8014a68:	d126      	bne.n	8014ab8 <__ieee754_sqrt+0x180>
 8014a6a:	3501      	adds	r5, #1
 8014a6c:	463c      	mov	r4, r7
 8014a6e:	106a      	asrs	r2, r5, #1
 8014a70:	0863      	lsrs	r3, r4, #1
 8014a72:	07e9      	lsls	r1, r5, #31
 8014a74:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8014a78:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8014a7c:	bf48      	it	mi
 8014a7e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8014a82:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 8014a86:	461c      	mov	r4, r3
 8014a88:	e76d      	b.n	8014966 <__ieee754_sqrt+0x2e>
 8014a8a:	0ad3      	lsrs	r3, r2, #11
 8014a8c:	3815      	subs	r0, #21
 8014a8e:	0552      	lsls	r2, r2, #21
 8014a90:	2b00      	cmp	r3, #0
 8014a92:	d0fa      	beq.n	8014a8a <__ieee754_sqrt+0x152>
 8014a94:	02dc      	lsls	r4, r3, #11
 8014a96:	d50a      	bpl.n	8014aae <__ieee754_sqrt+0x176>
 8014a98:	f1c1 0420 	rsb	r4, r1, #32
 8014a9c:	fa22 f404 	lsr.w	r4, r2, r4
 8014aa0:	1e4d      	subs	r5, r1, #1
 8014aa2:	408a      	lsls	r2, r1
 8014aa4:	4323      	orrs	r3, r4
 8014aa6:	1b41      	subs	r1, r0, r5
 8014aa8:	e772      	b.n	8014990 <__ieee754_sqrt+0x58>
 8014aaa:	4608      	mov	r0, r1
 8014aac:	e7f0      	b.n	8014a90 <__ieee754_sqrt+0x158>
 8014aae:	005b      	lsls	r3, r3, #1
 8014ab0:	3101      	adds	r1, #1
 8014ab2:	e7ef      	b.n	8014a94 <__ieee754_sqrt+0x15c>
 8014ab4:	46e0      	mov	r8, ip
 8014ab6:	e7aa      	b.n	8014a0e <__ieee754_sqrt+0xd6>
 8014ab8:	f7eb fbe8 	bl	800028c <__adddf3>
 8014abc:	e9da 8900 	ldrd	r8, r9, [sl]
 8014ac0:	4602      	mov	r2, r0
 8014ac2:	460b      	mov	r3, r1
 8014ac4:	4640      	mov	r0, r8
 8014ac6:	4649      	mov	r1, r9
 8014ac8:	f7ec f808 	bl	8000adc <__aeabi_dcmplt>
 8014acc:	b120      	cbz	r0, 8014ad8 <__ieee754_sqrt+0x1a0>
 8014ace:	1ca0      	adds	r0, r4, #2
 8014ad0:	bf08      	it	eq
 8014ad2:	3501      	addeq	r5, #1
 8014ad4:	3402      	adds	r4, #2
 8014ad6:	e7ca      	b.n	8014a6e <__ieee754_sqrt+0x136>
 8014ad8:	3401      	adds	r4, #1
 8014ada:	f024 0401 	bic.w	r4, r4, #1
 8014ade:	e7c6      	b.n	8014a6e <__ieee754_sqrt+0x136>
 8014ae0:	7ff00000 	.word	0x7ff00000
 8014ae4:	200002e8 	.word	0x200002e8
 8014ae8:	200002f0 	.word	0x200002f0

08014aec <round>:
 8014aec:	ec53 2b10 	vmov	r2, r3, d0
 8014af0:	b570      	push	{r4, r5, r6, lr}
 8014af2:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8014af6:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 8014afa:	2813      	cmp	r0, #19
 8014afc:	ee10 5a10 	vmov	r5, s0
 8014b00:	4619      	mov	r1, r3
 8014b02:	dc18      	bgt.n	8014b36 <round+0x4a>
 8014b04:	2800      	cmp	r0, #0
 8014b06:	da09      	bge.n	8014b1c <round+0x30>
 8014b08:	3001      	adds	r0, #1
 8014b0a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 8014b0e:	d103      	bne.n	8014b18 <round+0x2c>
 8014b10:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8014b14:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8014b18:	2300      	movs	r3, #0
 8014b1a:	e02a      	b.n	8014b72 <round+0x86>
 8014b1c:	4c16      	ldr	r4, [pc, #88]	; (8014b78 <round+0x8c>)
 8014b1e:	4104      	asrs	r4, r0
 8014b20:	ea03 0604 	and.w	r6, r3, r4
 8014b24:	4316      	orrs	r6, r2
 8014b26:	d011      	beq.n	8014b4c <round+0x60>
 8014b28:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8014b2c:	4103      	asrs	r3, r0
 8014b2e:	440b      	add	r3, r1
 8014b30:	ea23 0104 	bic.w	r1, r3, r4
 8014b34:	e7f0      	b.n	8014b18 <round+0x2c>
 8014b36:	2833      	cmp	r0, #51	; 0x33
 8014b38:	dd0b      	ble.n	8014b52 <round+0x66>
 8014b3a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8014b3e:	d105      	bne.n	8014b4c <round+0x60>
 8014b40:	ee10 0a10 	vmov	r0, s0
 8014b44:	f7eb fba2 	bl	800028c <__adddf3>
 8014b48:	4602      	mov	r2, r0
 8014b4a:	460b      	mov	r3, r1
 8014b4c:	ec43 2b10 	vmov	d0, r2, r3
 8014b50:	bd70      	pop	{r4, r5, r6, pc}
 8014b52:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8014b56:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8014b5a:	40f4      	lsrs	r4, r6
 8014b5c:	4214      	tst	r4, r2
 8014b5e:	d0f5      	beq.n	8014b4c <round+0x60>
 8014b60:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8014b64:	2301      	movs	r3, #1
 8014b66:	4083      	lsls	r3, r0
 8014b68:	195b      	adds	r3, r3, r5
 8014b6a:	bf28      	it	cs
 8014b6c:	3101      	addcs	r1, #1
 8014b6e:	ea23 0304 	bic.w	r3, r3, r4
 8014b72:	461a      	mov	r2, r3
 8014b74:	460b      	mov	r3, r1
 8014b76:	e7e9      	b.n	8014b4c <round+0x60>
 8014b78:	000fffff 	.word	0x000fffff
 8014b7c:	00000000 	.word	0x00000000

08014b80 <__ieee754_pow>:
 8014b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b84:	ed2d 8b06 	vpush	{d8-d10}
 8014b88:	b089      	sub	sp, #36	; 0x24
 8014b8a:	ed8d 1b00 	vstr	d1, [sp]
 8014b8e:	e9dd 2900 	ldrd	r2, r9, [sp]
 8014b92:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8014b96:	ea58 0102 	orrs.w	r1, r8, r2
 8014b9a:	ec57 6b10 	vmov	r6, r7, d0
 8014b9e:	d115      	bne.n	8014bcc <__ieee754_pow+0x4c>
 8014ba0:	19b3      	adds	r3, r6, r6
 8014ba2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8014ba6:	4152      	adcs	r2, r2
 8014ba8:	4299      	cmp	r1, r3
 8014baa:	4b89      	ldr	r3, [pc, #548]	; (8014dd0 <__ieee754_pow+0x250>)
 8014bac:	4193      	sbcs	r3, r2
 8014bae:	f080 84d1 	bcs.w	8015554 <__ieee754_pow+0x9d4>
 8014bb2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014bb6:	4630      	mov	r0, r6
 8014bb8:	4639      	mov	r1, r7
 8014bba:	f7eb fb67 	bl	800028c <__adddf3>
 8014bbe:	ec41 0b10 	vmov	d0, r0, r1
 8014bc2:	b009      	add	sp, #36	; 0x24
 8014bc4:	ecbd 8b06 	vpop	{d8-d10}
 8014bc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014bcc:	4b81      	ldr	r3, [pc, #516]	; (8014dd4 <__ieee754_pow+0x254>)
 8014bce:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8014bd2:	429c      	cmp	r4, r3
 8014bd4:	ee10 aa10 	vmov	sl, s0
 8014bd8:	463d      	mov	r5, r7
 8014bda:	dc06      	bgt.n	8014bea <__ieee754_pow+0x6a>
 8014bdc:	d101      	bne.n	8014be2 <__ieee754_pow+0x62>
 8014bde:	2e00      	cmp	r6, #0
 8014be0:	d1e7      	bne.n	8014bb2 <__ieee754_pow+0x32>
 8014be2:	4598      	cmp	r8, r3
 8014be4:	dc01      	bgt.n	8014bea <__ieee754_pow+0x6a>
 8014be6:	d10f      	bne.n	8014c08 <__ieee754_pow+0x88>
 8014be8:	b172      	cbz	r2, 8014c08 <__ieee754_pow+0x88>
 8014bea:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8014bee:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8014bf2:	ea55 050a 	orrs.w	r5, r5, sl
 8014bf6:	d1dc      	bne.n	8014bb2 <__ieee754_pow+0x32>
 8014bf8:	e9dd 3200 	ldrd	r3, r2, [sp]
 8014bfc:	18db      	adds	r3, r3, r3
 8014bfe:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8014c02:	4152      	adcs	r2, r2
 8014c04:	429d      	cmp	r5, r3
 8014c06:	e7d0      	b.n	8014baa <__ieee754_pow+0x2a>
 8014c08:	2d00      	cmp	r5, #0
 8014c0a:	da3b      	bge.n	8014c84 <__ieee754_pow+0x104>
 8014c0c:	4b72      	ldr	r3, [pc, #456]	; (8014dd8 <__ieee754_pow+0x258>)
 8014c0e:	4598      	cmp	r8, r3
 8014c10:	dc51      	bgt.n	8014cb6 <__ieee754_pow+0x136>
 8014c12:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8014c16:	4598      	cmp	r8, r3
 8014c18:	f340 84ab 	ble.w	8015572 <__ieee754_pow+0x9f2>
 8014c1c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8014c20:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014c24:	2b14      	cmp	r3, #20
 8014c26:	dd0f      	ble.n	8014c48 <__ieee754_pow+0xc8>
 8014c28:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014c2c:	fa22 f103 	lsr.w	r1, r2, r3
 8014c30:	fa01 f303 	lsl.w	r3, r1, r3
 8014c34:	4293      	cmp	r3, r2
 8014c36:	f040 849c 	bne.w	8015572 <__ieee754_pow+0x9f2>
 8014c3a:	f001 0101 	and.w	r1, r1, #1
 8014c3e:	f1c1 0302 	rsb	r3, r1, #2
 8014c42:	9304      	str	r3, [sp, #16]
 8014c44:	b182      	cbz	r2, 8014c68 <__ieee754_pow+0xe8>
 8014c46:	e05f      	b.n	8014d08 <__ieee754_pow+0x188>
 8014c48:	2a00      	cmp	r2, #0
 8014c4a:	d15b      	bne.n	8014d04 <__ieee754_pow+0x184>
 8014c4c:	f1c3 0314 	rsb	r3, r3, #20
 8014c50:	fa48 f103 	asr.w	r1, r8, r3
 8014c54:	fa01 f303 	lsl.w	r3, r1, r3
 8014c58:	4543      	cmp	r3, r8
 8014c5a:	f040 8487 	bne.w	801556c <__ieee754_pow+0x9ec>
 8014c5e:	f001 0101 	and.w	r1, r1, #1
 8014c62:	f1c1 0302 	rsb	r3, r1, #2
 8014c66:	9304      	str	r3, [sp, #16]
 8014c68:	4b5c      	ldr	r3, [pc, #368]	; (8014ddc <__ieee754_pow+0x25c>)
 8014c6a:	4598      	cmp	r8, r3
 8014c6c:	d132      	bne.n	8014cd4 <__ieee754_pow+0x154>
 8014c6e:	f1b9 0f00 	cmp.w	r9, #0
 8014c72:	f280 8477 	bge.w	8015564 <__ieee754_pow+0x9e4>
 8014c76:	4959      	ldr	r1, [pc, #356]	; (8014ddc <__ieee754_pow+0x25c>)
 8014c78:	4632      	mov	r2, r6
 8014c7a:	463b      	mov	r3, r7
 8014c7c:	2000      	movs	r0, #0
 8014c7e:	f7eb fde5 	bl	800084c <__aeabi_ddiv>
 8014c82:	e79c      	b.n	8014bbe <__ieee754_pow+0x3e>
 8014c84:	2300      	movs	r3, #0
 8014c86:	9304      	str	r3, [sp, #16]
 8014c88:	2a00      	cmp	r2, #0
 8014c8a:	d13d      	bne.n	8014d08 <__ieee754_pow+0x188>
 8014c8c:	4b51      	ldr	r3, [pc, #324]	; (8014dd4 <__ieee754_pow+0x254>)
 8014c8e:	4598      	cmp	r8, r3
 8014c90:	d1ea      	bne.n	8014c68 <__ieee754_pow+0xe8>
 8014c92:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8014c96:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8014c9a:	ea53 030a 	orrs.w	r3, r3, sl
 8014c9e:	f000 8459 	beq.w	8015554 <__ieee754_pow+0x9d4>
 8014ca2:	4b4f      	ldr	r3, [pc, #316]	; (8014de0 <__ieee754_pow+0x260>)
 8014ca4:	429c      	cmp	r4, r3
 8014ca6:	dd08      	ble.n	8014cba <__ieee754_pow+0x13a>
 8014ca8:	f1b9 0f00 	cmp.w	r9, #0
 8014cac:	f2c0 8456 	blt.w	801555c <__ieee754_pow+0x9dc>
 8014cb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014cb4:	e783      	b.n	8014bbe <__ieee754_pow+0x3e>
 8014cb6:	2302      	movs	r3, #2
 8014cb8:	e7e5      	b.n	8014c86 <__ieee754_pow+0x106>
 8014cba:	f1b9 0f00 	cmp.w	r9, #0
 8014cbe:	f04f 0000 	mov.w	r0, #0
 8014cc2:	f04f 0100 	mov.w	r1, #0
 8014cc6:	f6bf af7a 	bge.w	8014bbe <__ieee754_pow+0x3e>
 8014cca:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014cce:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014cd2:	e774      	b.n	8014bbe <__ieee754_pow+0x3e>
 8014cd4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8014cd8:	d106      	bne.n	8014ce8 <__ieee754_pow+0x168>
 8014cda:	4632      	mov	r2, r6
 8014cdc:	463b      	mov	r3, r7
 8014cde:	4630      	mov	r0, r6
 8014ce0:	4639      	mov	r1, r7
 8014ce2:	f7eb fc89 	bl	80005f8 <__aeabi_dmul>
 8014ce6:	e76a      	b.n	8014bbe <__ieee754_pow+0x3e>
 8014ce8:	4b3e      	ldr	r3, [pc, #248]	; (8014de4 <__ieee754_pow+0x264>)
 8014cea:	4599      	cmp	r9, r3
 8014cec:	d10c      	bne.n	8014d08 <__ieee754_pow+0x188>
 8014cee:	2d00      	cmp	r5, #0
 8014cf0:	db0a      	blt.n	8014d08 <__ieee754_pow+0x188>
 8014cf2:	ec47 6b10 	vmov	d0, r6, r7
 8014cf6:	b009      	add	sp, #36	; 0x24
 8014cf8:	ecbd 8b06 	vpop	{d8-d10}
 8014cfc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014d00:	f7ff be1a 	b.w	8014938 <__ieee754_sqrt>
 8014d04:	2300      	movs	r3, #0
 8014d06:	9304      	str	r3, [sp, #16]
 8014d08:	ec47 6b10 	vmov	d0, r6, r7
 8014d0c:	f7ff fe00 	bl	8014910 <fabs>
 8014d10:	ec51 0b10 	vmov	r0, r1, d0
 8014d14:	f1ba 0f00 	cmp.w	sl, #0
 8014d18:	d129      	bne.n	8014d6e <__ieee754_pow+0x1ee>
 8014d1a:	b124      	cbz	r4, 8014d26 <__ieee754_pow+0x1a6>
 8014d1c:	4b2f      	ldr	r3, [pc, #188]	; (8014ddc <__ieee754_pow+0x25c>)
 8014d1e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8014d22:	429a      	cmp	r2, r3
 8014d24:	d123      	bne.n	8014d6e <__ieee754_pow+0x1ee>
 8014d26:	f1b9 0f00 	cmp.w	r9, #0
 8014d2a:	da05      	bge.n	8014d38 <__ieee754_pow+0x1b8>
 8014d2c:	4602      	mov	r2, r0
 8014d2e:	460b      	mov	r3, r1
 8014d30:	2000      	movs	r0, #0
 8014d32:	492a      	ldr	r1, [pc, #168]	; (8014ddc <__ieee754_pow+0x25c>)
 8014d34:	f7eb fd8a 	bl	800084c <__aeabi_ddiv>
 8014d38:	2d00      	cmp	r5, #0
 8014d3a:	f6bf af40 	bge.w	8014bbe <__ieee754_pow+0x3e>
 8014d3e:	9b04      	ldr	r3, [sp, #16]
 8014d40:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014d44:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014d48:	431c      	orrs	r4, r3
 8014d4a:	d108      	bne.n	8014d5e <__ieee754_pow+0x1de>
 8014d4c:	4602      	mov	r2, r0
 8014d4e:	460b      	mov	r3, r1
 8014d50:	4610      	mov	r0, r2
 8014d52:	4619      	mov	r1, r3
 8014d54:	f7eb fa98 	bl	8000288 <__aeabi_dsub>
 8014d58:	4602      	mov	r2, r0
 8014d5a:	460b      	mov	r3, r1
 8014d5c:	e78f      	b.n	8014c7e <__ieee754_pow+0xfe>
 8014d5e:	9b04      	ldr	r3, [sp, #16]
 8014d60:	2b01      	cmp	r3, #1
 8014d62:	f47f af2c 	bne.w	8014bbe <__ieee754_pow+0x3e>
 8014d66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014d6a:	4619      	mov	r1, r3
 8014d6c:	e727      	b.n	8014bbe <__ieee754_pow+0x3e>
 8014d6e:	0feb      	lsrs	r3, r5, #31
 8014d70:	3b01      	subs	r3, #1
 8014d72:	9306      	str	r3, [sp, #24]
 8014d74:	9a06      	ldr	r2, [sp, #24]
 8014d76:	9b04      	ldr	r3, [sp, #16]
 8014d78:	4313      	orrs	r3, r2
 8014d7a:	d102      	bne.n	8014d82 <__ieee754_pow+0x202>
 8014d7c:	4632      	mov	r2, r6
 8014d7e:	463b      	mov	r3, r7
 8014d80:	e7e6      	b.n	8014d50 <__ieee754_pow+0x1d0>
 8014d82:	4b19      	ldr	r3, [pc, #100]	; (8014de8 <__ieee754_pow+0x268>)
 8014d84:	4598      	cmp	r8, r3
 8014d86:	f340 80fb 	ble.w	8014f80 <__ieee754_pow+0x400>
 8014d8a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8014d8e:	4598      	cmp	r8, r3
 8014d90:	4b13      	ldr	r3, [pc, #76]	; (8014de0 <__ieee754_pow+0x260>)
 8014d92:	dd0c      	ble.n	8014dae <__ieee754_pow+0x22e>
 8014d94:	429c      	cmp	r4, r3
 8014d96:	dc0f      	bgt.n	8014db8 <__ieee754_pow+0x238>
 8014d98:	f1b9 0f00 	cmp.w	r9, #0
 8014d9c:	da0f      	bge.n	8014dbe <__ieee754_pow+0x23e>
 8014d9e:	2000      	movs	r0, #0
 8014da0:	b009      	add	sp, #36	; 0x24
 8014da2:	ecbd 8b06 	vpop	{d8-d10}
 8014da6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014daa:	f000 bc3a 	b.w	8015622 <__math_oflow>
 8014dae:	429c      	cmp	r4, r3
 8014db0:	dbf2      	blt.n	8014d98 <__ieee754_pow+0x218>
 8014db2:	4b0a      	ldr	r3, [pc, #40]	; (8014ddc <__ieee754_pow+0x25c>)
 8014db4:	429c      	cmp	r4, r3
 8014db6:	dd19      	ble.n	8014dec <__ieee754_pow+0x26c>
 8014db8:	f1b9 0f00 	cmp.w	r9, #0
 8014dbc:	dcef      	bgt.n	8014d9e <__ieee754_pow+0x21e>
 8014dbe:	2000      	movs	r0, #0
 8014dc0:	b009      	add	sp, #36	; 0x24
 8014dc2:	ecbd 8b06 	vpop	{d8-d10}
 8014dc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014dca:	f000 bc21 	b.w	8015610 <__math_uflow>
 8014dce:	bf00      	nop
 8014dd0:	fff00000 	.word	0xfff00000
 8014dd4:	7ff00000 	.word	0x7ff00000
 8014dd8:	433fffff 	.word	0x433fffff
 8014ddc:	3ff00000 	.word	0x3ff00000
 8014de0:	3fefffff 	.word	0x3fefffff
 8014de4:	3fe00000 	.word	0x3fe00000
 8014de8:	41e00000 	.word	0x41e00000
 8014dec:	4b60      	ldr	r3, [pc, #384]	; (8014f70 <__ieee754_pow+0x3f0>)
 8014dee:	2200      	movs	r2, #0
 8014df0:	f7eb fa4a 	bl	8000288 <__aeabi_dsub>
 8014df4:	a354      	add	r3, pc, #336	; (adr r3, 8014f48 <__ieee754_pow+0x3c8>)
 8014df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014dfa:	4604      	mov	r4, r0
 8014dfc:	460d      	mov	r5, r1
 8014dfe:	f7eb fbfb 	bl	80005f8 <__aeabi_dmul>
 8014e02:	a353      	add	r3, pc, #332	; (adr r3, 8014f50 <__ieee754_pow+0x3d0>)
 8014e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e08:	4606      	mov	r6, r0
 8014e0a:	460f      	mov	r7, r1
 8014e0c:	4620      	mov	r0, r4
 8014e0e:	4629      	mov	r1, r5
 8014e10:	f7eb fbf2 	bl	80005f8 <__aeabi_dmul>
 8014e14:	4b57      	ldr	r3, [pc, #348]	; (8014f74 <__ieee754_pow+0x3f4>)
 8014e16:	4682      	mov	sl, r0
 8014e18:	468b      	mov	fp, r1
 8014e1a:	2200      	movs	r2, #0
 8014e1c:	4620      	mov	r0, r4
 8014e1e:	4629      	mov	r1, r5
 8014e20:	f7eb fbea 	bl	80005f8 <__aeabi_dmul>
 8014e24:	4602      	mov	r2, r0
 8014e26:	460b      	mov	r3, r1
 8014e28:	a14b      	add	r1, pc, #300	; (adr r1, 8014f58 <__ieee754_pow+0x3d8>)
 8014e2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014e2e:	f7eb fa2b 	bl	8000288 <__aeabi_dsub>
 8014e32:	4622      	mov	r2, r4
 8014e34:	462b      	mov	r3, r5
 8014e36:	f7eb fbdf 	bl	80005f8 <__aeabi_dmul>
 8014e3a:	4602      	mov	r2, r0
 8014e3c:	460b      	mov	r3, r1
 8014e3e:	2000      	movs	r0, #0
 8014e40:	494d      	ldr	r1, [pc, #308]	; (8014f78 <__ieee754_pow+0x3f8>)
 8014e42:	f7eb fa21 	bl	8000288 <__aeabi_dsub>
 8014e46:	4622      	mov	r2, r4
 8014e48:	4680      	mov	r8, r0
 8014e4a:	4689      	mov	r9, r1
 8014e4c:	462b      	mov	r3, r5
 8014e4e:	4620      	mov	r0, r4
 8014e50:	4629      	mov	r1, r5
 8014e52:	f7eb fbd1 	bl	80005f8 <__aeabi_dmul>
 8014e56:	4602      	mov	r2, r0
 8014e58:	460b      	mov	r3, r1
 8014e5a:	4640      	mov	r0, r8
 8014e5c:	4649      	mov	r1, r9
 8014e5e:	f7eb fbcb 	bl	80005f8 <__aeabi_dmul>
 8014e62:	a33f      	add	r3, pc, #252	; (adr r3, 8014f60 <__ieee754_pow+0x3e0>)
 8014e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e68:	f7eb fbc6 	bl	80005f8 <__aeabi_dmul>
 8014e6c:	4602      	mov	r2, r0
 8014e6e:	460b      	mov	r3, r1
 8014e70:	4650      	mov	r0, sl
 8014e72:	4659      	mov	r1, fp
 8014e74:	f7eb fa08 	bl	8000288 <__aeabi_dsub>
 8014e78:	4602      	mov	r2, r0
 8014e7a:	460b      	mov	r3, r1
 8014e7c:	4680      	mov	r8, r0
 8014e7e:	4689      	mov	r9, r1
 8014e80:	4630      	mov	r0, r6
 8014e82:	4639      	mov	r1, r7
 8014e84:	f7eb fa02 	bl	800028c <__adddf3>
 8014e88:	2000      	movs	r0, #0
 8014e8a:	4632      	mov	r2, r6
 8014e8c:	463b      	mov	r3, r7
 8014e8e:	4604      	mov	r4, r0
 8014e90:	460d      	mov	r5, r1
 8014e92:	f7eb f9f9 	bl	8000288 <__aeabi_dsub>
 8014e96:	4602      	mov	r2, r0
 8014e98:	460b      	mov	r3, r1
 8014e9a:	4640      	mov	r0, r8
 8014e9c:	4649      	mov	r1, r9
 8014e9e:	f7eb f9f3 	bl	8000288 <__aeabi_dsub>
 8014ea2:	9b04      	ldr	r3, [sp, #16]
 8014ea4:	9a06      	ldr	r2, [sp, #24]
 8014ea6:	3b01      	subs	r3, #1
 8014ea8:	4313      	orrs	r3, r2
 8014eaa:	4682      	mov	sl, r0
 8014eac:	468b      	mov	fp, r1
 8014eae:	f040 81e7 	bne.w	8015280 <__ieee754_pow+0x700>
 8014eb2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8014f68 <__ieee754_pow+0x3e8>
 8014eb6:	eeb0 8a47 	vmov.f32	s16, s14
 8014eba:	eef0 8a67 	vmov.f32	s17, s15
 8014ebe:	e9dd 6700 	ldrd	r6, r7, [sp]
 8014ec2:	2600      	movs	r6, #0
 8014ec4:	4632      	mov	r2, r6
 8014ec6:	463b      	mov	r3, r7
 8014ec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014ecc:	f7eb f9dc 	bl	8000288 <__aeabi_dsub>
 8014ed0:	4622      	mov	r2, r4
 8014ed2:	462b      	mov	r3, r5
 8014ed4:	f7eb fb90 	bl	80005f8 <__aeabi_dmul>
 8014ed8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014edc:	4680      	mov	r8, r0
 8014ede:	4689      	mov	r9, r1
 8014ee0:	4650      	mov	r0, sl
 8014ee2:	4659      	mov	r1, fp
 8014ee4:	f7eb fb88 	bl	80005f8 <__aeabi_dmul>
 8014ee8:	4602      	mov	r2, r0
 8014eea:	460b      	mov	r3, r1
 8014eec:	4640      	mov	r0, r8
 8014eee:	4649      	mov	r1, r9
 8014ef0:	f7eb f9cc 	bl	800028c <__adddf3>
 8014ef4:	4632      	mov	r2, r6
 8014ef6:	463b      	mov	r3, r7
 8014ef8:	4680      	mov	r8, r0
 8014efa:	4689      	mov	r9, r1
 8014efc:	4620      	mov	r0, r4
 8014efe:	4629      	mov	r1, r5
 8014f00:	f7eb fb7a 	bl	80005f8 <__aeabi_dmul>
 8014f04:	460b      	mov	r3, r1
 8014f06:	4604      	mov	r4, r0
 8014f08:	460d      	mov	r5, r1
 8014f0a:	4602      	mov	r2, r0
 8014f0c:	4649      	mov	r1, r9
 8014f0e:	4640      	mov	r0, r8
 8014f10:	f7eb f9bc 	bl	800028c <__adddf3>
 8014f14:	4b19      	ldr	r3, [pc, #100]	; (8014f7c <__ieee754_pow+0x3fc>)
 8014f16:	4299      	cmp	r1, r3
 8014f18:	ec45 4b19 	vmov	d9, r4, r5
 8014f1c:	4606      	mov	r6, r0
 8014f1e:	460f      	mov	r7, r1
 8014f20:	468b      	mov	fp, r1
 8014f22:	f340 82f0 	ble.w	8015506 <__ieee754_pow+0x986>
 8014f26:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8014f2a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8014f2e:	4303      	orrs	r3, r0
 8014f30:	f000 81e4 	beq.w	80152fc <__ieee754_pow+0x77c>
 8014f34:	ec51 0b18 	vmov	r0, r1, d8
 8014f38:	2200      	movs	r2, #0
 8014f3a:	2300      	movs	r3, #0
 8014f3c:	f7eb fdce 	bl	8000adc <__aeabi_dcmplt>
 8014f40:	3800      	subs	r0, #0
 8014f42:	bf18      	it	ne
 8014f44:	2001      	movne	r0, #1
 8014f46:	e72b      	b.n	8014da0 <__ieee754_pow+0x220>
 8014f48:	60000000 	.word	0x60000000
 8014f4c:	3ff71547 	.word	0x3ff71547
 8014f50:	f85ddf44 	.word	0xf85ddf44
 8014f54:	3e54ae0b 	.word	0x3e54ae0b
 8014f58:	55555555 	.word	0x55555555
 8014f5c:	3fd55555 	.word	0x3fd55555
 8014f60:	652b82fe 	.word	0x652b82fe
 8014f64:	3ff71547 	.word	0x3ff71547
 8014f68:	00000000 	.word	0x00000000
 8014f6c:	bff00000 	.word	0xbff00000
 8014f70:	3ff00000 	.word	0x3ff00000
 8014f74:	3fd00000 	.word	0x3fd00000
 8014f78:	3fe00000 	.word	0x3fe00000
 8014f7c:	408fffff 	.word	0x408fffff
 8014f80:	4bd5      	ldr	r3, [pc, #852]	; (80152d8 <__ieee754_pow+0x758>)
 8014f82:	402b      	ands	r3, r5
 8014f84:	2200      	movs	r2, #0
 8014f86:	b92b      	cbnz	r3, 8014f94 <__ieee754_pow+0x414>
 8014f88:	4bd4      	ldr	r3, [pc, #848]	; (80152dc <__ieee754_pow+0x75c>)
 8014f8a:	f7eb fb35 	bl	80005f8 <__aeabi_dmul>
 8014f8e:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8014f92:	460c      	mov	r4, r1
 8014f94:	1523      	asrs	r3, r4, #20
 8014f96:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014f9a:	4413      	add	r3, r2
 8014f9c:	9305      	str	r3, [sp, #20]
 8014f9e:	4bd0      	ldr	r3, [pc, #832]	; (80152e0 <__ieee754_pow+0x760>)
 8014fa0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8014fa4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8014fa8:	429c      	cmp	r4, r3
 8014faa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014fae:	dd08      	ble.n	8014fc2 <__ieee754_pow+0x442>
 8014fb0:	4bcc      	ldr	r3, [pc, #816]	; (80152e4 <__ieee754_pow+0x764>)
 8014fb2:	429c      	cmp	r4, r3
 8014fb4:	f340 8162 	ble.w	801527c <__ieee754_pow+0x6fc>
 8014fb8:	9b05      	ldr	r3, [sp, #20]
 8014fba:	3301      	adds	r3, #1
 8014fbc:	9305      	str	r3, [sp, #20]
 8014fbe:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014fc2:	2400      	movs	r4, #0
 8014fc4:	00e3      	lsls	r3, r4, #3
 8014fc6:	9307      	str	r3, [sp, #28]
 8014fc8:	4bc7      	ldr	r3, [pc, #796]	; (80152e8 <__ieee754_pow+0x768>)
 8014fca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8014fce:	ed93 7b00 	vldr	d7, [r3]
 8014fd2:	4629      	mov	r1, r5
 8014fd4:	ec53 2b17 	vmov	r2, r3, d7
 8014fd8:	eeb0 9a47 	vmov.f32	s18, s14
 8014fdc:	eef0 9a67 	vmov.f32	s19, s15
 8014fe0:	4682      	mov	sl, r0
 8014fe2:	f7eb f951 	bl	8000288 <__aeabi_dsub>
 8014fe6:	4652      	mov	r2, sl
 8014fe8:	4606      	mov	r6, r0
 8014fea:	460f      	mov	r7, r1
 8014fec:	462b      	mov	r3, r5
 8014fee:	ec51 0b19 	vmov	r0, r1, d9
 8014ff2:	f7eb f94b 	bl	800028c <__adddf3>
 8014ff6:	4602      	mov	r2, r0
 8014ff8:	460b      	mov	r3, r1
 8014ffa:	2000      	movs	r0, #0
 8014ffc:	49bb      	ldr	r1, [pc, #748]	; (80152ec <__ieee754_pow+0x76c>)
 8014ffe:	f7eb fc25 	bl	800084c <__aeabi_ddiv>
 8015002:	ec41 0b1a 	vmov	d10, r0, r1
 8015006:	4602      	mov	r2, r0
 8015008:	460b      	mov	r3, r1
 801500a:	4630      	mov	r0, r6
 801500c:	4639      	mov	r1, r7
 801500e:	f7eb faf3 	bl	80005f8 <__aeabi_dmul>
 8015012:	2300      	movs	r3, #0
 8015014:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8015018:	9302      	str	r3, [sp, #8]
 801501a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801501e:	46ab      	mov	fp, r5
 8015020:	106d      	asrs	r5, r5, #1
 8015022:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8015026:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801502a:	ec41 0b18 	vmov	d8, r0, r1
 801502e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8015032:	2200      	movs	r2, #0
 8015034:	4640      	mov	r0, r8
 8015036:	4649      	mov	r1, r9
 8015038:	4614      	mov	r4, r2
 801503a:	461d      	mov	r5, r3
 801503c:	f7eb fadc 	bl	80005f8 <__aeabi_dmul>
 8015040:	4602      	mov	r2, r0
 8015042:	460b      	mov	r3, r1
 8015044:	4630      	mov	r0, r6
 8015046:	4639      	mov	r1, r7
 8015048:	f7eb f91e 	bl	8000288 <__aeabi_dsub>
 801504c:	ec53 2b19 	vmov	r2, r3, d9
 8015050:	4606      	mov	r6, r0
 8015052:	460f      	mov	r7, r1
 8015054:	4620      	mov	r0, r4
 8015056:	4629      	mov	r1, r5
 8015058:	f7eb f916 	bl	8000288 <__aeabi_dsub>
 801505c:	4602      	mov	r2, r0
 801505e:	460b      	mov	r3, r1
 8015060:	4650      	mov	r0, sl
 8015062:	4659      	mov	r1, fp
 8015064:	f7eb f910 	bl	8000288 <__aeabi_dsub>
 8015068:	4642      	mov	r2, r8
 801506a:	464b      	mov	r3, r9
 801506c:	f7eb fac4 	bl	80005f8 <__aeabi_dmul>
 8015070:	4602      	mov	r2, r0
 8015072:	460b      	mov	r3, r1
 8015074:	4630      	mov	r0, r6
 8015076:	4639      	mov	r1, r7
 8015078:	f7eb f906 	bl	8000288 <__aeabi_dsub>
 801507c:	ec53 2b1a 	vmov	r2, r3, d10
 8015080:	f7eb faba 	bl	80005f8 <__aeabi_dmul>
 8015084:	ec53 2b18 	vmov	r2, r3, d8
 8015088:	ec41 0b19 	vmov	d9, r0, r1
 801508c:	ec51 0b18 	vmov	r0, r1, d8
 8015090:	f7eb fab2 	bl	80005f8 <__aeabi_dmul>
 8015094:	a37c      	add	r3, pc, #496	; (adr r3, 8015288 <__ieee754_pow+0x708>)
 8015096:	e9d3 2300 	ldrd	r2, r3, [r3]
 801509a:	4604      	mov	r4, r0
 801509c:	460d      	mov	r5, r1
 801509e:	f7eb faab 	bl	80005f8 <__aeabi_dmul>
 80150a2:	a37b      	add	r3, pc, #492	; (adr r3, 8015290 <__ieee754_pow+0x710>)
 80150a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150a8:	f7eb f8f0 	bl	800028c <__adddf3>
 80150ac:	4622      	mov	r2, r4
 80150ae:	462b      	mov	r3, r5
 80150b0:	f7eb faa2 	bl	80005f8 <__aeabi_dmul>
 80150b4:	a378      	add	r3, pc, #480	; (adr r3, 8015298 <__ieee754_pow+0x718>)
 80150b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150ba:	f7eb f8e7 	bl	800028c <__adddf3>
 80150be:	4622      	mov	r2, r4
 80150c0:	462b      	mov	r3, r5
 80150c2:	f7eb fa99 	bl	80005f8 <__aeabi_dmul>
 80150c6:	a376      	add	r3, pc, #472	; (adr r3, 80152a0 <__ieee754_pow+0x720>)
 80150c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150cc:	f7eb f8de 	bl	800028c <__adddf3>
 80150d0:	4622      	mov	r2, r4
 80150d2:	462b      	mov	r3, r5
 80150d4:	f7eb fa90 	bl	80005f8 <__aeabi_dmul>
 80150d8:	a373      	add	r3, pc, #460	; (adr r3, 80152a8 <__ieee754_pow+0x728>)
 80150da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150de:	f7eb f8d5 	bl	800028c <__adddf3>
 80150e2:	4622      	mov	r2, r4
 80150e4:	462b      	mov	r3, r5
 80150e6:	f7eb fa87 	bl	80005f8 <__aeabi_dmul>
 80150ea:	a371      	add	r3, pc, #452	; (adr r3, 80152b0 <__ieee754_pow+0x730>)
 80150ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80150f0:	f7eb f8cc 	bl	800028c <__adddf3>
 80150f4:	4622      	mov	r2, r4
 80150f6:	4606      	mov	r6, r0
 80150f8:	460f      	mov	r7, r1
 80150fa:	462b      	mov	r3, r5
 80150fc:	4620      	mov	r0, r4
 80150fe:	4629      	mov	r1, r5
 8015100:	f7eb fa7a 	bl	80005f8 <__aeabi_dmul>
 8015104:	4602      	mov	r2, r0
 8015106:	460b      	mov	r3, r1
 8015108:	4630      	mov	r0, r6
 801510a:	4639      	mov	r1, r7
 801510c:	f7eb fa74 	bl	80005f8 <__aeabi_dmul>
 8015110:	4642      	mov	r2, r8
 8015112:	4604      	mov	r4, r0
 8015114:	460d      	mov	r5, r1
 8015116:	464b      	mov	r3, r9
 8015118:	ec51 0b18 	vmov	r0, r1, d8
 801511c:	f7eb f8b6 	bl	800028c <__adddf3>
 8015120:	ec53 2b19 	vmov	r2, r3, d9
 8015124:	f7eb fa68 	bl	80005f8 <__aeabi_dmul>
 8015128:	4622      	mov	r2, r4
 801512a:	462b      	mov	r3, r5
 801512c:	f7eb f8ae 	bl	800028c <__adddf3>
 8015130:	4642      	mov	r2, r8
 8015132:	4682      	mov	sl, r0
 8015134:	468b      	mov	fp, r1
 8015136:	464b      	mov	r3, r9
 8015138:	4640      	mov	r0, r8
 801513a:	4649      	mov	r1, r9
 801513c:	f7eb fa5c 	bl	80005f8 <__aeabi_dmul>
 8015140:	4b6b      	ldr	r3, [pc, #428]	; (80152f0 <__ieee754_pow+0x770>)
 8015142:	2200      	movs	r2, #0
 8015144:	4606      	mov	r6, r0
 8015146:	460f      	mov	r7, r1
 8015148:	f7eb f8a0 	bl	800028c <__adddf3>
 801514c:	4652      	mov	r2, sl
 801514e:	465b      	mov	r3, fp
 8015150:	f7eb f89c 	bl	800028c <__adddf3>
 8015154:	2000      	movs	r0, #0
 8015156:	4604      	mov	r4, r0
 8015158:	460d      	mov	r5, r1
 801515a:	4602      	mov	r2, r0
 801515c:	460b      	mov	r3, r1
 801515e:	4640      	mov	r0, r8
 8015160:	4649      	mov	r1, r9
 8015162:	f7eb fa49 	bl	80005f8 <__aeabi_dmul>
 8015166:	4b62      	ldr	r3, [pc, #392]	; (80152f0 <__ieee754_pow+0x770>)
 8015168:	4680      	mov	r8, r0
 801516a:	4689      	mov	r9, r1
 801516c:	2200      	movs	r2, #0
 801516e:	4620      	mov	r0, r4
 8015170:	4629      	mov	r1, r5
 8015172:	f7eb f889 	bl	8000288 <__aeabi_dsub>
 8015176:	4632      	mov	r2, r6
 8015178:	463b      	mov	r3, r7
 801517a:	f7eb f885 	bl	8000288 <__aeabi_dsub>
 801517e:	4602      	mov	r2, r0
 8015180:	460b      	mov	r3, r1
 8015182:	4650      	mov	r0, sl
 8015184:	4659      	mov	r1, fp
 8015186:	f7eb f87f 	bl	8000288 <__aeabi_dsub>
 801518a:	ec53 2b18 	vmov	r2, r3, d8
 801518e:	f7eb fa33 	bl	80005f8 <__aeabi_dmul>
 8015192:	4622      	mov	r2, r4
 8015194:	4606      	mov	r6, r0
 8015196:	460f      	mov	r7, r1
 8015198:	462b      	mov	r3, r5
 801519a:	ec51 0b19 	vmov	r0, r1, d9
 801519e:	f7eb fa2b 	bl	80005f8 <__aeabi_dmul>
 80151a2:	4602      	mov	r2, r0
 80151a4:	460b      	mov	r3, r1
 80151a6:	4630      	mov	r0, r6
 80151a8:	4639      	mov	r1, r7
 80151aa:	f7eb f86f 	bl	800028c <__adddf3>
 80151ae:	4606      	mov	r6, r0
 80151b0:	460f      	mov	r7, r1
 80151b2:	4602      	mov	r2, r0
 80151b4:	460b      	mov	r3, r1
 80151b6:	4640      	mov	r0, r8
 80151b8:	4649      	mov	r1, r9
 80151ba:	f7eb f867 	bl	800028c <__adddf3>
 80151be:	a33e      	add	r3, pc, #248	; (adr r3, 80152b8 <__ieee754_pow+0x738>)
 80151c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151c4:	2000      	movs	r0, #0
 80151c6:	4604      	mov	r4, r0
 80151c8:	460d      	mov	r5, r1
 80151ca:	f7eb fa15 	bl	80005f8 <__aeabi_dmul>
 80151ce:	4642      	mov	r2, r8
 80151d0:	ec41 0b18 	vmov	d8, r0, r1
 80151d4:	464b      	mov	r3, r9
 80151d6:	4620      	mov	r0, r4
 80151d8:	4629      	mov	r1, r5
 80151da:	f7eb f855 	bl	8000288 <__aeabi_dsub>
 80151de:	4602      	mov	r2, r0
 80151e0:	460b      	mov	r3, r1
 80151e2:	4630      	mov	r0, r6
 80151e4:	4639      	mov	r1, r7
 80151e6:	f7eb f84f 	bl	8000288 <__aeabi_dsub>
 80151ea:	a335      	add	r3, pc, #212	; (adr r3, 80152c0 <__ieee754_pow+0x740>)
 80151ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151f0:	f7eb fa02 	bl	80005f8 <__aeabi_dmul>
 80151f4:	a334      	add	r3, pc, #208	; (adr r3, 80152c8 <__ieee754_pow+0x748>)
 80151f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151fa:	4606      	mov	r6, r0
 80151fc:	460f      	mov	r7, r1
 80151fe:	4620      	mov	r0, r4
 8015200:	4629      	mov	r1, r5
 8015202:	f7eb f9f9 	bl	80005f8 <__aeabi_dmul>
 8015206:	4602      	mov	r2, r0
 8015208:	460b      	mov	r3, r1
 801520a:	4630      	mov	r0, r6
 801520c:	4639      	mov	r1, r7
 801520e:	f7eb f83d 	bl	800028c <__adddf3>
 8015212:	9a07      	ldr	r2, [sp, #28]
 8015214:	4b37      	ldr	r3, [pc, #220]	; (80152f4 <__ieee754_pow+0x774>)
 8015216:	4413      	add	r3, r2
 8015218:	e9d3 2300 	ldrd	r2, r3, [r3]
 801521c:	f7eb f836 	bl	800028c <__adddf3>
 8015220:	4682      	mov	sl, r0
 8015222:	9805      	ldr	r0, [sp, #20]
 8015224:	468b      	mov	fp, r1
 8015226:	f7eb f97d 	bl	8000524 <__aeabi_i2d>
 801522a:	9a07      	ldr	r2, [sp, #28]
 801522c:	4b32      	ldr	r3, [pc, #200]	; (80152f8 <__ieee754_pow+0x778>)
 801522e:	4413      	add	r3, r2
 8015230:	e9d3 8900 	ldrd	r8, r9, [r3]
 8015234:	4606      	mov	r6, r0
 8015236:	460f      	mov	r7, r1
 8015238:	4652      	mov	r2, sl
 801523a:	465b      	mov	r3, fp
 801523c:	ec51 0b18 	vmov	r0, r1, d8
 8015240:	f7eb f824 	bl	800028c <__adddf3>
 8015244:	4642      	mov	r2, r8
 8015246:	464b      	mov	r3, r9
 8015248:	f7eb f820 	bl	800028c <__adddf3>
 801524c:	4632      	mov	r2, r6
 801524e:	463b      	mov	r3, r7
 8015250:	f7eb f81c 	bl	800028c <__adddf3>
 8015254:	2000      	movs	r0, #0
 8015256:	4632      	mov	r2, r6
 8015258:	463b      	mov	r3, r7
 801525a:	4604      	mov	r4, r0
 801525c:	460d      	mov	r5, r1
 801525e:	f7eb f813 	bl	8000288 <__aeabi_dsub>
 8015262:	4642      	mov	r2, r8
 8015264:	464b      	mov	r3, r9
 8015266:	f7eb f80f 	bl	8000288 <__aeabi_dsub>
 801526a:	ec53 2b18 	vmov	r2, r3, d8
 801526e:	f7eb f80b 	bl	8000288 <__aeabi_dsub>
 8015272:	4602      	mov	r2, r0
 8015274:	460b      	mov	r3, r1
 8015276:	4650      	mov	r0, sl
 8015278:	4659      	mov	r1, fp
 801527a:	e610      	b.n	8014e9e <__ieee754_pow+0x31e>
 801527c:	2401      	movs	r4, #1
 801527e:	e6a1      	b.n	8014fc4 <__ieee754_pow+0x444>
 8015280:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80152d0 <__ieee754_pow+0x750>
 8015284:	e617      	b.n	8014eb6 <__ieee754_pow+0x336>
 8015286:	bf00      	nop
 8015288:	4a454eef 	.word	0x4a454eef
 801528c:	3fca7e28 	.word	0x3fca7e28
 8015290:	93c9db65 	.word	0x93c9db65
 8015294:	3fcd864a 	.word	0x3fcd864a
 8015298:	a91d4101 	.word	0xa91d4101
 801529c:	3fd17460 	.word	0x3fd17460
 80152a0:	518f264d 	.word	0x518f264d
 80152a4:	3fd55555 	.word	0x3fd55555
 80152a8:	db6fabff 	.word	0xdb6fabff
 80152ac:	3fdb6db6 	.word	0x3fdb6db6
 80152b0:	33333303 	.word	0x33333303
 80152b4:	3fe33333 	.word	0x3fe33333
 80152b8:	e0000000 	.word	0xe0000000
 80152bc:	3feec709 	.word	0x3feec709
 80152c0:	dc3a03fd 	.word	0xdc3a03fd
 80152c4:	3feec709 	.word	0x3feec709
 80152c8:	145b01f5 	.word	0x145b01f5
 80152cc:	be3e2fe0 	.word	0xbe3e2fe0
 80152d0:	00000000 	.word	0x00000000
 80152d4:	3ff00000 	.word	0x3ff00000
 80152d8:	7ff00000 	.word	0x7ff00000
 80152dc:	43400000 	.word	0x43400000
 80152e0:	0003988e 	.word	0x0003988e
 80152e4:	000bb679 	.word	0x000bb679
 80152e8:	08015c88 	.word	0x08015c88
 80152ec:	3ff00000 	.word	0x3ff00000
 80152f0:	40080000 	.word	0x40080000
 80152f4:	08015ca8 	.word	0x08015ca8
 80152f8:	08015c98 	.word	0x08015c98
 80152fc:	a3b3      	add	r3, pc, #716	; (adr r3, 80155cc <__ieee754_pow+0xa4c>)
 80152fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015302:	4640      	mov	r0, r8
 8015304:	4649      	mov	r1, r9
 8015306:	f7ea ffc1 	bl	800028c <__adddf3>
 801530a:	4622      	mov	r2, r4
 801530c:	ec41 0b1a 	vmov	d10, r0, r1
 8015310:	462b      	mov	r3, r5
 8015312:	4630      	mov	r0, r6
 8015314:	4639      	mov	r1, r7
 8015316:	f7ea ffb7 	bl	8000288 <__aeabi_dsub>
 801531a:	4602      	mov	r2, r0
 801531c:	460b      	mov	r3, r1
 801531e:	ec51 0b1a 	vmov	r0, r1, d10
 8015322:	f7eb fbf9 	bl	8000b18 <__aeabi_dcmpgt>
 8015326:	2800      	cmp	r0, #0
 8015328:	f47f ae04 	bne.w	8014f34 <__ieee754_pow+0x3b4>
 801532c:	4aa2      	ldr	r2, [pc, #648]	; (80155b8 <__ieee754_pow+0xa38>)
 801532e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8015332:	4293      	cmp	r3, r2
 8015334:	f340 8107 	ble.w	8015546 <__ieee754_pow+0x9c6>
 8015338:	151b      	asrs	r3, r3, #20
 801533a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801533e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8015342:	fa4a fa03 	asr.w	sl, sl, r3
 8015346:	44da      	add	sl, fp
 8015348:	f3ca 510a 	ubfx	r1, sl, #20, #11
 801534c:	489b      	ldr	r0, [pc, #620]	; (80155bc <__ieee754_pow+0xa3c>)
 801534e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8015352:	4108      	asrs	r0, r1
 8015354:	ea00 030a 	and.w	r3, r0, sl
 8015358:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 801535c:	f1c1 0114 	rsb	r1, r1, #20
 8015360:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8015364:	fa4a fa01 	asr.w	sl, sl, r1
 8015368:	f1bb 0f00 	cmp.w	fp, #0
 801536c:	f04f 0200 	mov.w	r2, #0
 8015370:	4620      	mov	r0, r4
 8015372:	4629      	mov	r1, r5
 8015374:	bfb8      	it	lt
 8015376:	f1ca 0a00 	rsblt	sl, sl, #0
 801537a:	f7ea ff85 	bl	8000288 <__aeabi_dsub>
 801537e:	ec41 0b19 	vmov	d9, r0, r1
 8015382:	4642      	mov	r2, r8
 8015384:	464b      	mov	r3, r9
 8015386:	ec51 0b19 	vmov	r0, r1, d9
 801538a:	f7ea ff7f 	bl	800028c <__adddf3>
 801538e:	a37a      	add	r3, pc, #488	; (adr r3, 8015578 <__ieee754_pow+0x9f8>)
 8015390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015394:	2000      	movs	r0, #0
 8015396:	4604      	mov	r4, r0
 8015398:	460d      	mov	r5, r1
 801539a:	f7eb f92d 	bl	80005f8 <__aeabi_dmul>
 801539e:	ec53 2b19 	vmov	r2, r3, d9
 80153a2:	4606      	mov	r6, r0
 80153a4:	460f      	mov	r7, r1
 80153a6:	4620      	mov	r0, r4
 80153a8:	4629      	mov	r1, r5
 80153aa:	f7ea ff6d 	bl	8000288 <__aeabi_dsub>
 80153ae:	4602      	mov	r2, r0
 80153b0:	460b      	mov	r3, r1
 80153b2:	4640      	mov	r0, r8
 80153b4:	4649      	mov	r1, r9
 80153b6:	f7ea ff67 	bl	8000288 <__aeabi_dsub>
 80153ba:	a371      	add	r3, pc, #452	; (adr r3, 8015580 <__ieee754_pow+0xa00>)
 80153bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153c0:	f7eb f91a 	bl	80005f8 <__aeabi_dmul>
 80153c4:	a370      	add	r3, pc, #448	; (adr r3, 8015588 <__ieee754_pow+0xa08>)
 80153c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ca:	4680      	mov	r8, r0
 80153cc:	4689      	mov	r9, r1
 80153ce:	4620      	mov	r0, r4
 80153d0:	4629      	mov	r1, r5
 80153d2:	f7eb f911 	bl	80005f8 <__aeabi_dmul>
 80153d6:	4602      	mov	r2, r0
 80153d8:	460b      	mov	r3, r1
 80153da:	4640      	mov	r0, r8
 80153dc:	4649      	mov	r1, r9
 80153de:	f7ea ff55 	bl	800028c <__adddf3>
 80153e2:	4604      	mov	r4, r0
 80153e4:	460d      	mov	r5, r1
 80153e6:	4602      	mov	r2, r0
 80153e8:	460b      	mov	r3, r1
 80153ea:	4630      	mov	r0, r6
 80153ec:	4639      	mov	r1, r7
 80153ee:	f7ea ff4d 	bl	800028c <__adddf3>
 80153f2:	4632      	mov	r2, r6
 80153f4:	463b      	mov	r3, r7
 80153f6:	4680      	mov	r8, r0
 80153f8:	4689      	mov	r9, r1
 80153fa:	f7ea ff45 	bl	8000288 <__aeabi_dsub>
 80153fe:	4602      	mov	r2, r0
 8015400:	460b      	mov	r3, r1
 8015402:	4620      	mov	r0, r4
 8015404:	4629      	mov	r1, r5
 8015406:	f7ea ff3f 	bl	8000288 <__aeabi_dsub>
 801540a:	4642      	mov	r2, r8
 801540c:	4606      	mov	r6, r0
 801540e:	460f      	mov	r7, r1
 8015410:	464b      	mov	r3, r9
 8015412:	4640      	mov	r0, r8
 8015414:	4649      	mov	r1, r9
 8015416:	f7eb f8ef 	bl	80005f8 <__aeabi_dmul>
 801541a:	a35d      	add	r3, pc, #372	; (adr r3, 8015590 <__ieee754_pow+0xa10>)
 801541c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015420:	4604      	mov	r4, r0
 8015422:	460d      	mov	r5, r1
 8015424:	f7eb f8e8 	bl	80005f8 <__aeabi_dmul>
 8015428:	a35b      	add	r3, pc, #364	; (adr r3, 8015598 <__ieee754_pow+0xa18>)
 801542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801542e:	f7ea ff2b 	bl	8000288 <__aeabi_dsub>
 8015432:	4622      	mov	r2, r4
 8015434:	462b      	mov	r3, r5
 8015436:	f7eb f8df 	bl	80005f8 <__aeabi_dmul>
 801543a:	a359      	add	r3, pc, #356	; (adr r3, 80155a0 <__ieee754_pow+0xa20>)
 801543c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015440:	f7ea ff24 	bl	800028c <__adddf3>
 8015444:	4622      	mov	r2, r4
 8015446:	462b      	mov	r3, r5
 8015448:	f7eb f8d6 	bl	80005f8 <__aeabi_dmul>
 801544c:	a356      	add	r3, pc, #344	; (adr r3, 80155a8 <__ieee754_pow+0xa28>)
 801544e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015452:	f7ea ff19 	bl	8000288 <__aeabi_dsub>
 8015456:	4622      	mov	r2, r4
 8015458:	462b      	mov	r3, r5
 801545a:	f7eb f8cd 	bl	80005f8 <__aeabi_dmul>
 801545e:	a354      	add	r3, pc, #336	; (adr r3, 80155b0 <__ieee754_pow+0xa30>)
 8015460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015464:	f7ea ff12 	bl	800028c <__adddf3>
 8015468:	4622      	mov	r2, r4
 801546a:	462b      	mov	r3, r5
 801546c:	f7eb f8c4 	bl	80005f8 <__aeabi_dmul>
 8015470:	4602      	mov	r2, r0
 8015472:	460b      	mov	r3, r1
 8015474:	4640      	mov	r0, r8
 8015476:	4649      	mov	r1, r9
 8015478:	f7ea ff06 	bl	8000288 <__aeabi_dsub>
 801547c:	4604      	mov	r4, r0
 801547e:	460d      	mov	r5, r1
 8015480:	4602      	mov	r2, r0
 8015482:	460b      	mov	r3, r1
 8015484:	4640      	mov	r0, r8
 8015486:	4649      	mov	r1, r9
 8015488:	f7eb f8b6 	bl	80005f8 <__aeabi_dmul>
 801548c:	2200      	movs	r2, #0
 801548e:	ec41 0b19 	vmov	d9, r0, r1
 8015492:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8015496:	4620      	mov	r0, r4
 8015498:	4629      	mov	r1, r5
 801549a:	f7ea fef5 	bl	8000288 <__aeabi_dsub>
 801549e:	4602      	mov	r2, r0
 80154a0:	460b      	mov	r3, r1
 80154a2:	ec51 0b19 	vmov	r0, r1, d9
 80154a6:	f7eb f9d1 	bl	800084c <__aeabi_ddiv>
 80154aa:	4632      	mov	r2, r6
 80154ac:	4604      	mov	r4, r0
 80154ae:	460d      	mov	r5, r1
 80154b0:	463b      	mov	r3, r7
 80154b2:	4640      	mov	r0, r8
 80154b4:	4649      	mov	r1, r9
 80154b6:	f7eb f89f 	bl	80005f8 <__aeabi_dmul>
 80154ba:	4632      	mov	r2, r6
 80154bc:	463b      	mov	r3, r7
 80154be:	f7ea fee5 	bl	800028c <__adddf3>
 80154c2:	4602      	mov	r2, r0
 80154c4:	460b      	mov	r3, r1
 80154c6:	4620      	mov	r0, r4
 80154c8:	4629      	mov	r1, r5
 80154ca:	f7ea fedd 	bl	8000288 <__aeabi_dsub>
 80154ce:	4642      	mov	r2, r8
 80154d0:	464b      	mov	r3, r9
 80154d2:	f7ea fed9 	bl	8000288 <__aeabi_dsub>
 80154d6:	460b      	mov	r3, r1
 80154d8:	4602      	mov	r2, r0
 80154da:	4939      	ldr	r1, [pc, #228]	; (80155c0 <__ieee754_pow+0xa40>)
 80154dc:	2000      	movs	r0, #0
 80154de:	f7ea fed3 	bl	8000288 <__aeabi_dsub>
 80154e2:	ec41 0b10 	vmov	d0, r0, r1
 80154e6:	ee10 3a90 	vmov	r3, s1
 80154ea:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80154ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80154f2:	da2b      	bge.n	801554c <__ieee754_pow+0x9cc>
 80154f4:	4650      	mov	r0, sl
 80154f6:	f000 f89f 	bl	8015638 <scalbn>
 80154fa:	ec51 0b10 	vmov	r0, r1, d0
 80154fe:	ec53 2b18 	vmov	r2, r3, d8
 8015502:	f7ff bbee 	b.w	8014ce2 <__ieee754_pow+0x162>
 8015506:	4b2f      	ldr	r3, [pc, #188]	; (80155c4 <__ieee754_pow+0xa44>)
 8015508:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801550c:	429e      	cmp	r6, r3
 801550e:	f77f af0d 	ble.w	801532c <__ieee754_pow+0x7ac>
 8015512:	4b2d      	ldr	r3, [pc, #180]	; (80155c8 <__ieee754_pow+0xa48>)
 8015514:	440b      	add	r3, r1
 8015516:	4303      	orrs	r3, r0
 8015518:	d009      	beq.n	801552e <__ieee754_pow+0x9ae>
 801551a:	ec51 0b18 	vmov	r0, r1, d8
 801551e:	2200      	movs	r2, #0
 8015520:	2300      	movs	r3, #0
 8015522:	f7eb fadb 	bl	8000adc <__aeabi_dcmplt>
 8015526:	3800      	subs	r0, #0
 8015528:	bf18      	it	ne
 801552a:	2001      	movne	r0, #1
 801552c:	e448      	b.n	8014dc0 <__ieee754_pow+0x240>
 801552e:	4622      	mov	r2, r4
 8015530:	462b      	mov	r3, r5
 8015532:	f7ea fea9 	bl	8000288 <__aeabi_dsub>
 8015536:	4642      	mov	r2, r8
 8015538:	464b      	mov	r3, r9
 801553a:	f7eb fae3 	bl	8000b04 <__aeabi_dcmpge>
 801553e:	2800      	cmp	r0, #0
 8015540:	f43f aef4 	beq.w	801532c <__ieee754_pow+0x7ac>
 8015544:	e7e9      	b.n	801551a <__ieee754_pow+0x99a>
 8015546:	f04f 0a00 	mov.w	sl, #0
 801554a:	e71a      	b.n	8015382 <__ieee754_pow+0x802>
 801554c:	ec51 0b10 	vmov	r0, r1, d0
 8015550:	4619      	mov	r1, r3
 8015552:	e7d4      	b.n	80154fe <__ieee754_pow+0x97e>
 8015554:	491a      	ldr	r1, [pc, #104]	; (80155c0 <__ieee754_pow+0xa40>)
 8015556:	2000      	movs	r0, #0
 8015558:	f7ff bb31 	b.w	8014bbe <__ieee754_pow+0x3e>
 801555c:	2000      	movs	r0, #0
 801555e:	2100      	movs	r1, #0
 8015560:	f7ff bb2d 	b.w	8014bbe <__ieee754_pow+0x3e>
 8015564:	4630      	mov	r0, r6
 8015566:	4639      	mov	r1, r7
 8015568:	f7ff bb29 	b.w	8014bbe <__ieee754_pow+0x3e>
 801556c:	9204      	str	r2, [sp, #16]
 801556e:	f7ff bb7b 	b.w	8014c68 <__ieee754_pow+0xe8>
 8015572:	2300      	movs	r3, #0
 8015574:	f7ff bb65 	b.w	8014c42 <__ieee754_pow+0xc2>
 8015578:	00000000 	.word	0x00000000
 801557c:	3fe62e43 	.word	0x3fe62e43
 8015580:	fefa39ef 	.word	0xfefa39ef
 8015584:	3fe62e42 	.word	0x3fe62e42
 8015588:	0ca86c39 	.word	0x0ca86c39
 801558c:	be205c61 	.word	0xbe205c61
 8015590:	72bea4d0 	.word	0x72bea4d0
 8015594:	3e663769 	.word	0x3e663769
 8015598:	c5d26bf1 	.word	0xc5d26bf1
 801559c:	3ebbbd41 	.word	0x3ebbbd41
 80155a0:	af25de2c 	.word	0xaf25de2c
 80155a4:	3f11566a 	.word	0x3f11566a
 80155a8:	16bebd93 	.word	0x16bebd93
 80155ac:	3f66c16c 	.word	0x3f66c16c
 80155b0:	5555553e 	.word	0x5555553e
 80155b4:	3fc55555 	.word	0x3fc55555
 80155b8:	3fe00000 	.word	0x3fe00000
 80155bc:	fff00000 	.word	0xfff00000
 80155c0:	3ff00000 	.word	0x3ff00000
 80155c4:	4090cbff 	.word	0x4090cbff
 80155c8:	3f6f3400 	.word	0x3f6f3400
 80155cc:	652b82fe 	.word	0x652b82fe
 80155d0:	3c971547 	.word	0x3c971547

080155d4 <with_errno>:
 80155d4:	b570      	push	{r4, r5, r6, lr}
 80155d6:	4604      	mov	r4, r0
 80155d8:	460d      	mov	r5, r1
 80155da:	4616      	mov	r6, r2
 80155dc:	f7fc fd60 	bl	80120a0 <__errno>
 80155e0:	4629      	mov	r1, r5
 80155e2:	6006      	str	r6, [r0, #0]
 80155e4:	4620      	mov	r0, r4
 80155e6:	bd70      	pop	{r4, r5, r6, pc}

080155e8 <xflow>:
 80155e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80155ea:	4614      	mov	r4, r2
 80155ec:	461d      	mov	r5, r3
 80155ee:	b108      	cbz	r0, 80155f4 <xflow+0xc>
 80155f0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80155f4:	e9cd 2300 	strd	r2, r3, [sp]
 80155f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80155fc:	4620      	mov	r0, r4
 80155fe:	4629      	mov	r1, r5
 8015600:	f7ea fffa 	bl	80005f8 <__aeabi_dmul>
 8015604:	2222      	movs	r2, #34	; 0x22
 8015606:	b003      	add	sp, #12
 8015608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801560c:	f7ff bfe2 	b.w	80155d4 <with_errno>

08015610 <__math_uflow>:
 8015610:	b508      	push	{r3, lr}
 8015612:	2200      	movs	r2, #0
 8015614:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8015618:	f7ff ffe6 	bl	80155e8 <xflow>
 801561c:	ec41 0b10 	vmov	d0, r0, r1
 8015620:	bd08      	pop	{r3, pc}

08015622 <__math_oflow>:
 8015622:	b508      	push	{r3, lr}
 8015624:	2200      	movs	r2, #0
 8015626:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801562a:	f7ff ffdd 	bl	80155e8 <xflow>
 801562e:	ec41 0b10 	vmov	d0, r0, r1
 8015632:	bd08      	pop	{r3, pc}
 8015634:	0000      	movs	r0, r0
	...

08015638 <scalbn>:
 8015638:	b570      	push	{r4, r5, r6, lr}
 801563a:	ec55 4b10 	vmov	r4, r5, d0
 801563e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8015642:	4606      	mov	r6, r0
 8015644:	462b      	mov	r3, r5
 8015646:	b999      	cbnz	r1, 8015670 <scalbn+0x38>
 8015648:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801564c:	4323      	orrs	r3, r4
 801564e:	d03f      	beq.n	80156d0 <scalbn+0x98>
 8015650:	4b35      	ldr	r3, [pc, #212]	; (8015728 <scalbn+0xf0>)
 8015652:	4629      	mov	r1, r5
 8015654:	ee10 0a10 	vmov	r0, s0
 8015658:	2200      	movs	r2, #0
 801565a:	f7ea ffcd 	bl	80005f8 <__aeabi_dmul>
 801565e:	4b33      	ldr	r3, [pc, #204]	; (801572c <scalbn+0xf4>)
 8015660:	429e      	cmp	r6, r3
 8015662:	4604      	mov	r4, r0
 8015664:	460d      	mov	r5, r1
 8015666:	da10      	bge.n	801568a <scalbn+0x52>
 8015668:	a327      	add	r3, pc, #156	; (adr r3, 8015708 <scalbn+0xd0>)
 801566a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801566e:	e01f      	b.n	80156b0 <scalbn+0x78>
 8015670:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8015674:	4291      	cmp	r1, r2
 8015676:	d10c      	bne.n	8015692 <scalbn+0x5a>
 8015678:	ee10 2a10 	vmov	r2, s0
 801567c:	4620      	mov	r0, r4
 801567e:	4629      	mov	r1, r5
 8015680:	f7ea fe04 	bl	800028c <__adddf3>
 8015684:	4604      	mov	r4, r0
 8015686:	460d      	mov	r5, r1
 8015688:	e022      	b.n	80156d0 <scalbn+0x98>
 801568a:	460b      	mov	r3, r1
 801568c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8015690:	3936      	subs	r1, #54	; 0x36
 8015692:	f24c 3250 	movw	r2, #50000	; 0xc350
 8015696:	4296      	cmp	r6, r2
 8015698:	dd0d      	ble.n	80156b6 <scalbn+0x7e>
 801569a:	2d00      	cmp	r5, #0
 801569c:	a11c      	add	r1, pc, #112	; (adr r1, 8015710 <scalbn+0xd8>)
 801569e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156a2:	da02      	bge.n	80156aa <scalbn+0x72>
 80156a4:	a11c      	add	r1, pc, #112	; (adr r1, 8015718 <scalbn+0xe0>)
 80156a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156aa:	a319      	add	r3, pc, #100	; (adr r3, 8015710 <scalbn+0xd8>)
 80156ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156b0:	f7ea ffa2 	bl	80005f8 <__aeabi_dmul>
 80156b4:	e7e6      	b.n	8015684 <scalbn+0x4c>
 80156b6:	1872      	adds	r2, r6, r1
 80156b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80156bc:	428a      	cmp	r2, r1
 80156be:	dcec      	bgt.n	801569a <scalbn+0x62>
 80156c0:	2a00      	cmp	r2, #0
 80156c2:	dd08      	ble.n	80156d6 <scalbn+0x9e>
 80156c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80156c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80156cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80156d0:	ec45 4b10 	vmov	d0, r4, r5
 80156d4:	bd70      	pop	{r4, r5, r6, pc}
 80156d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80156da:	da08      	bge.n	80156ee <scalbn+0xb6>
 80156dc:	2d00      	cmp	r5, #0
 80156de:	a10a      	add	r1, pc, #40	; (adr r1, 8015708 <scalbn+0xd0>)
 80156e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156e4:	dac0      	bge.n	8015668 <scalbn+0x30>
 80156e6:	a10e      	add	r1, pc, #56	; (adr r1, 8015720 <scalbn+0xe8>)
 80156e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156ec:	e7bc      	b.n	8015668 <scalbn+0x30>
 80156ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80156f2:	3236      	adds	r2, #54	; 0x36
 80156f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80156f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80156fc:	4620      	mov	r0, r4
 80156fe:	4b0c      	ldr	r3, [pc, #48]	; (8015730 <scalbn+0xf8>)
 8015700:	2200      	movs	r2, #0
 8015702:	e7d5      	b.n	80156b0 <scalbn+0x78>
 8015704:	f3af 8000 	nop.w
 8015708:	c2f8f359 	.word	0xc2f8f359
 801570c:	01a56e1f 	.word	0x01a56e1f
 8015710:	8800759c 	.word	0x8800759c
 8015714:	7e37e43c 	.word	0x7e37e43c
 8015718:	8800759c 	.word	0x8800759c
 801571c:	fe37e43c 	.word	0xfe37e43c
 8015720:	c2f8f359 	.word	0xc2f8f359
 8015724:	81a56e1f 	.word	0x81a56e1f
 8015728:	43500000 	.word	0x43500000
 801572c:	ffff3cb0 	.word	0xffff3cb0
 8015730:	3c900000 	.word	0x3c900000

08015734 <_init>:
 8015734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015736:	bf00      	nop
 8015738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801573a:	bc08      	pop	{r3}
 801573c:	469e      	mov	lr, r3
 801573e:	4770      	bx	lr

08015740 <_fini>:
 8015740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015742:	bf00      	nop
 8015744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015746:	bc08      	pop	{r3}
 8015748:	469e      	mov	lr, r3
 801574a:	4770      	bx	lr
