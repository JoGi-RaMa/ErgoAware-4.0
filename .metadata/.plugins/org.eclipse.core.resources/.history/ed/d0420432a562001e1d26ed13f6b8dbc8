/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2023 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "fatfs.h"
#include "usb_device.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

#include <string.h>
#include <stdio.h>
#include <usbd_cdc_if.h>
#include <LIS3MDL.h>
#include <LSM6DSOX.h>
#include <math.h>

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define LSM6DSOX_ADDRESS_1          0x6A
#define LSM6DSOX_ADDRESS_2			0x6B

#define LSM6DSOX_WHO_AM_I_REG       0X0F
#define LSM6DSOX_CTRL1_XL           0X10
#define LSM6DSOX_CTRL2_G            0X11

#define LSM6DSOX_STATUS_REG         0X1E

#define LSM6DSOX_CTRL6_C            0X15
#define LSM6DSOX_CTRL7_G            0X16
#define LSM6DSOX_CTRL8_XL           0X17

#define LSM6DSOX_OUT_TEMP_L			0x20
#define LSM6DSOX_OUT_TEMP_H			0x21

#define LSM6DSOX_OUTX_L_G           0X22
#define LSM6DSOX_OUTX_H_G           0X23
#define LSM6DSOX_OUTY_L_G           0X24
#define LSM6DSOX_OUTY_H_G           0X25
#define LSM6DSOX_OUTZ_L_G           0X26
#define LSM6DSOX_OUTZ_H_G           0X27

#define LSM6DSOX_OUTX_L_XL          0X28
#define LSM6DSOX_OUTX_H_XL          0X29
#define LSM6DSOX_OUTY_L_XL          0X2A
#define LSM6DSOX_OUTY_H_XL          0X2B
#define LSM6DSOX_OUTZ_L_XL          0X2C
#define LSM6DSOX_OUTZ_H_XL          0X2D

#define Calibration_Time			10
#define BUFFER_SIZE					1000
#define TEMP_BUFFER_SIZE			50

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
I2C_HandleTypeDef hi2c1;

SD_HandleTypeDef hsd;
DMA_HandleTypeDef hdma_sdio_rx;
DMA_HandleTypeDef hdma_sdio_tx;

TIM_HandleTypeDef htim2;

UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_SDIO_SD_Init(void);
static void MX_TIM2_Init(void);
void MX_I2C1_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
FRESULT AppendToFile(char* path, size_t path_len, char* buf, size_t buf_len);
void BlinkLED(uint32_t blink_delay, uint8_t num_blinks);
int IMU_Initialization();
int Accelerometer_Gyroscope_Calibration();
void Write_File_Header();
void Gyro_Reading();
void Acc_Mag_Reading();
void SDI();
void Complementary_filter();
void Gyro_Integration_Test();
float fixed16Tofloat(uint16_t f16);
void EMG_Data_Reception();

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

FRESULT fres;
FATFS myFatFS;
FIL myFile;
UINT myBytes;
char log_path[] = "IMU_DATA.TXT";
char emg_log_path[] = "EMG_DATA.TXT";
char buf[BUFFER_SIZE];
int buffer_length = 0;
unsigned int i = 0;
int n_int = 0;
int emg_n_int = 0;
int gyro_fs = 1000;
int flag = 0;
int emg_flag = 0;

char rx_data[17] = {0};

typedef struct
{
	float Accelerometer_X;
	float Accelerometer_Y;
	float Accelerometer_Z;
	float Gyroscope_X;
	float Gyroscope_Y;
	float Gyroscope_Z;
}IMU_raw_data;

typedef struct
{
	float area_x;
	float area_y;
	float area_z;
}SDI_areas;

typedef struct
{
	float x;
	float y;
	float z;
}Acc_readings;

typedef struct
{
	float x[10];
	float y[10];
	float z[10];
}Gyro_readings;

typedef struct
{
	float pitch;
	float roll;
	float yaw;
}Accel_angles;

typedef struct
{
	float roll;
	float pitch;
}Estimated_angles;

int IMU_ON_OFF[2] = {0};
float accelerometer_mean[2][3] = {0};
float gyroscope_offset[2][3] = {0};
int norm_acceleration[2] = {0,0};
IMU_raw_data IMUrawdata[2] = {0};
Gyro_readings Gyro_data[2] = {0};
Acc_readings Acc_data[2] = {0};
SDI_areas SDIareas[2] = {0};
SDI_areas Gyro_integral[2] = {0};
Accel_angles Acc_ang[2] = {0};
Estimated_angles Estim_ang[2] = {0};

int IMU_Initialization()
{
	int i;
	int initialization_flag;
	for(i = 0; i<2; i++)
	{
		if(IMU_ON_OFF[i] == 0)
		{
			switch(i)
			{
			case 0:
				initialization_flag = LSM6DSOX_begin(&hi2c1, LSM6DSOX_ADDRESS_1);
				if (initialization_flag == 0)
				{
					BlinkLED(200, 3);
				}
				else
				{
					IMU_ON_OFF[i] = 1;
				}
				break;


			case 1:
				initialization_flag = LSM6DSOX_begin(&hi2c1, LSM6DSOX_ADDRESS_2);
				if (initialization_flag == 0)
				{
					BlinkLED(200, 4);
				}
				else
				{
					IMU_ON_OFF[i] = 1;
				}
				break;
			}
		}
	}
	return initialization_flag;
}

int Accelerometer_Gyroscope_Calibration()
{
	int i, elapsed_time;
	int calibration_samples = 0;
	int begin_calibration = 0;
	do
	{

		for(i = 0; i<2; i++)
		{
			switch(i)
			{
			case 0:
				if((LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_1) == 1) &
						(LSM6DSOX_gyroscopeAvailable(&hi2c1, LSM6DSOX_ADDRESS_1) == 1))
				{
					LSM6DSOX_readAcceleration(&hi2c1, LSM6DSOX_ADDRESS_1, &IMUrawdata[i].Accelerometer_X, &IMUrawdata[i].Accelerometer_Y, &IMUrawdata[i].Accelerometer_Z);
					LSM6DSOX_readGyroscope(&hi2c1, LSM6DSOX_ADDRESS_1, &IMUrawdata[i].Gyroscope_X, &IMUrawdata[i].Gyroscope_Y, &IMUrawdata[i].Gyroscope_Z);
				}
				accelerometer_mean[i][0] += IMUrawdata[i].Accelerometer_X;
				accelerometer_mean[i][1] += IMUrawdata[i].Accelerometer_Y;
				accelerometer_mean[i][2] += IMUrawdata[i].Accelerometer_Z;
				gyroscope_offset[i][0] += IMUrawdata[i].Gyroscope_X;
				gyroscope_offset[i][1] += IMUrawdata[i].Gyroscope_Y;
				gyroscope_offset[i][2] += IMUrawdata[i].Gyroscope_Z;

				break;

			case 1:
				if((LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_2) == 1) &
						(LSM6DSOX_gyroscopeAvailable(&hi2c1, LSM6DSOX_ADDRESS_2) == 1))
				{
					LSM6DSOX_readAcceleration(&hi2c1, LSM6DSOX_ADDRESS_2, &IMUrawdata[i].Accelerometer_X, &IMUrawdata[i].Accelerometer_Y, &IMUrawdata[i].Accelerometer_Z);
					LSM6DSOX_readGyroscope(&hi2c1, LSM6DSOX_ADDRESS_2, &IMUrawdata[i].Gyroscope_X, &IMUrawdata[i].Gyroscope_Y, &IMUrawdata[i].Gyroscope_Z);
				}
				accelerometer_mean[i][0] += IMUrawdata[i].Accelerometer_X;
				accelerometer_mean[i][1] += IMUrawdata[i].Accelerometer_Y;
				accelerometer_mean[i][2] += IMUrawdata[i].Accelerometer_Z;
				gyroscope_offset[i][0] += IMUrawdata[i].Gyroscope_X;
				gyroscope_offset[i][1] += IMUrawdata[i].Gyroscope_Y;
				gyroscope_offset[i][2] += IMUrawdata[i].Gyroscope_Z;

				break;
			}
		}

		++calibration_samples;
		elapsed_time = HAL_GetTick() - begin_calibration;
	}while(elapsed_time < (Calibration_Time * 1000));

	for(i = 0; i<2; i++)
	{
		accelerometer_mean[i][0] = accelerometer_mean[i][0]/calibration_samples;
		accelerometer_mean[i][1] = accelerometer_mean[i][1]/calibration_samples;
		accelerometer_mean[i][2] = accelerometer_mean[i][2]/calibration_samples;
		gyroscope_offset[i][0] = gyroscope_offset[i][0]/calibration_samples;
		gyroscope_offset[i][1] = gyroscope_offset[i][1]/calibration_samples;
		gyroscope_offset[i][2] = gyroscope_offset[i][2]/calibration_samples;

		norm_acceleration[i] = round(sqrt(pow(accelerometer_mean[i][0], 2) + pow(accelerometer_mean[i][1], 2) + pow(accelerometer_mean[i][2], 2)));
	}

	return 0;
}


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if (htim == &htim2)
	{
		flag = 1;
		emg_flag = 1;
	}

}

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_SDIO_SD_Init();
  MX_FATFS_Init();
  MX_USB_DEVICE_Init();
  MX_TIM2_Init();
  MX_I2C1_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */

  IMU_Initialization();
  Accelerometer_Gyroscope_Calibration();
  HAL_TIM_Base_Start_IT(&htim2);

  LSM6DSOX_writeRegister8(&hi2c1, LSM6DSOX_ADDRESS_1, LSM6DSOX_CTRL1_XL, 0x44);
  LSM6DSOX_writeRegister8(&hi2c1, LSM6DSOX_ADDRESS_2, LSM6DSOX_CTRL1_XL, 0x44);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  if(flag == 1)
	  {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
		  char temp_buffer[TEMP_BUFFER_SIZE];
		  Gyro_Reading();
		  n_int++;
		  if(n_int == 10)
		  {

			  Acc_Mag_Reading();
			  SDI();
			  //Gyro_Integration_Test();
			  Complementary_filter();

			  int temp_length = sprintf((char*)temp_buffer, "%.3f;%.3f;%.3f;%.3f",
					  Estim_ang[0].roll, Estim_ang[0].pitch, Estim_ang[1].roll, Estim_ang[1].pitch);

			  int temp_length = sprintf((char*)temp_buffer, "%.3f;%.3f",
			  					   SDIareas[1].area_x, SDIareas[1].area_y);

			  for(size_t k = strlen(temp_buffer); k < TEMP_BUFFER_SIZE - 1; k++)
			  {
				  temp_buffer[k] = ' ';
			  }

			  if(buffer_length + TEMP_BUFFER_SIZE >= BUFFER_SIZE)
			  {

				  CDC_Transmit_FS((uint8_t*)buf, strlen(buf));
				  //AppendToFile(log_path, strlen(log_path), buf, strlen(buf));
				  buffer_length = 0;
			  }

			  if(buffer_length + TEMP_BUFFER_SIZE < BUFFER_SIZE)
			  {
				  memcpy(buf + buffer_length, temp_buffer, strlen(temp_buffer));
				  buffer_length += strlen(temp_buffer);
				  buf[buffer_length] = '\n';
				  buffer_length++;
				  buf[buffer_length] = '\0';
			  }

			  int i;

			  /*for(i = 0; i < 2; i++)
			  {
				  memset(&SDIareas[i].area_x, 0, sizeof(SDIareas[i].area_x));
				  memset(&SDIareas[i].area_y, 0, sizeof(SDIareas[i].area_y));
				  memset(&SDIareas[i].area_z, 0, sizeof(SDIareas[i].area_z));
			  }*/

			  n_int = 0;

		  }
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
		  flag = 0;
	  }

	  if(emg_flag == 1)
	  {
		  emg_n_int++;
		  if(emg_n_int == 125)
		  {
			  EMG_Data_Reception();
			  emg_n_int = 0;
		  }
		  emg_flag = 0;
	  }

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 6;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C1_Init(void)
{

  /* USER CODE BEGIN I2C1_Init 0 */

  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
  hi2c1.Init.ClockSpeed = 400000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}

/**
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{

  /* USER CODE BEGIN SDIO_Init 0 */

  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
  hsd.Init.ClockDiv = 0;
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}

/**
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
  TIM_MasterConfigTypeDef sMasterConfig = {0};

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
  htim2.Init.Prescaler = 4200-1;
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 20-1;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 249600;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
FRESULT AppendToFile(char* path, size_t path_len, char* buf, size_t buf_len)
{
	FATFS myFatFS;
	FIL myFile;
	UINT myBytes;
	FRESULT stat;

	/*if ( (path[path_len] != 0) || (buf[buf_len] != 0) ) {
		return FR_INVALID_NAME;
	}

	// Re-initialize SD
	if ( BSP_SD_Init() != MSD_OK ) {
		return FR_NOT_READY;
	}

	// Re-initialize FATFS
	if ( FATFS_UnLinkDriver(SDPath) != 0 ) {
		return FR_NOT_READY;
	}
	if ( FATFS_LinkDriver(&SD_Driver, SDPath) != 0 ) {
		return FR_NOT_READY;
	}*/

	stat = f_mount(&myFatFS, SDPath, 0);
	if(stat != FR_OK)
	{
		f_mount(0, SDPath, 0);
		return stat;
	}

	stat = f_open(&myFile, path, FA_WRITE | FA_OPEN_APPEND);
	if(stat != FR_OK)
	{
		f_mount(0, SDPath, 0);
		return stat;
	}

	stat = f_write(&myFile, buf, buf_len, &myBytes);
	if(stat != FR_OK)
	{
		f_mount(0, SDPath, 0);
		return stat;
	}

	stat = f_close(&myFile);

	f_mount(0, SDPath, 0);

	return stat;

}


void BlinkLED(uint32_t blink_delay, uint8_t num_blinks) {
  for ( int i = 0; i < num_blinks; i++ ) {
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
    HAL_Delay(blink_delay);
    HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
    HAL_Delay(blink_delay);
  }
}

void Gyro_Reading()
{
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
	int i;
	char test_buffer[20];
	for(i = 0;i < 2;i++)
	{
		switch(i)
		{
			case 0:
				if(LSM6DSOX_gyroscopeAvailable(&hi2c1, LSM6DSOX_ADDRESS_1)==1)
				{
					LSM6DSOX_readGyroscope(&hi2c1, LSM6DSOX_ADDRESS_1, &Gyro_data[i].x[n_int-1], &Gyro_data[i].y[n_int-1], &Gyro_data[i].z[n_int-1]);
					Gyro_data[i].x[n_int-1] -= gyroscope_offset[i][0];
					Gyro_data[i].y[n_int-1] -= gyroscope_offset[i][1];
					Gyro_data[i].z[n_int-1] -= gyroscope_offset[i][2];
				}
				break;

			case 1:
				if(LSM6DSOX_gyroscopeAvailable(&hi2c1, LSM6DSOX_ADDRESS_2)==1)
				{
					LSM6DSOX_readGyroscope(&hi2c1, LSM6DSOX_ADDRESS_2, &Gyro_data[i].x[n_int-1], &Gyro_data[i].y[n_int-1], &Gyro_data[i].z[n_int-1]);
					Gyro_data[i].x[n_int-1] -= gyroscope_offset[i][0];
					Gyro_data[i].y[n_int-1] -= gyroscope_offset[i][1];
					Gyro_data[i].z[n_int-1] -= gyroscope_offset[i][2];
				}
				break;
		}
	}
	//sprintf((char*)test_buffer, "%.3f;%.3f;%.3f\n", Gyro_data[1].x[n_int-1], Gyro_data[1].y[n_int-1], Gyro_data[1].z[n_int-1]);
	//CDC_Transmit_FS((uint8_t*)test_buffer, strlen(test_buffer));
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
}

void Acc_Mag_Reading()
{
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
	int i;

	for(i = 0;i < 2;i++)
	  {
		  switch(i)
		  {
		  case 0:
			  if(LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_1)==1)
			  {
				  LSM6DSOX_readAcceleration(&hi2c1, LSM6DSOX_ADDRESS_1, &Acc_data[i].x, &Acc_data[i].y, &Acc_data[i].z);
				  Acc_data[i].x/=norm_acceleration[i];
				  Acc_data[i].y/=norm_acceleration[i];
				  Acc_data[i].z/=norm_acceleration[i];
			  }
			  break;

		  case 1:
			  if(LSM6DSOX_accelerationAvailable(&hi2c1, LSM6DSOX_ADDRESS_2)==1)
			  {
				  LSM6DSOX_readAcceleration(&hi2c1, LSM6DSOX_ADDRESS_2, &Acc_data[i].x, &Acc_data[i].y, &Acc_data[i].z);
				  Acc_data[i].x/=norm_acceleration[i];
				  Acc_data[i].y/=norm_acceleration[i];
				  Acc_data[i].z/=norm_acceleration[i];
			  }
			  break;
		  }
	  }

	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
}

void SDI()
{
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
	int k;
	int i;
	for(i = 0; i<2; i++)
	{
		for(k = 0; k < 9; k++)
		{
			SDIareas[i].area_x += ((Gyro_data[i].x[k] + Gyro_data[i].x[k+1])/(2*gyro_fs));
			SDIareas[i].area_y += ((Gyro_data[i].y[k] + Gyro_data[i].y[k+1])/(2*gyro_fs));
			SDIareas[i].area_z += ((Gyro_data[i].z[k] + Gyro_data[i].z[k+1])/(2*gyro_fs));
		}
	}
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
}

void Complementary_filter()
{
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
	int i;
	for(i = 0; i < 2; i++)
	{
		Acc_ang[i].pitch = atan2(-Acc_data[i].x, sqrt(pow(Acc_data[i].y, 2.0) + pow(Acc_data[i].z, 2.0))) * 180.0/M_PI;
		Acc_ang[i].roll = atan2(Acc_data[i].y, sqrt(pow(Acc_data[i].x, 2.0) + pow(Acc_data[i].z, 2.0))) * 180.0/M_PI;

		Estim_ang[i].roll = (0.982207 * Acc_ang[i].roll) + (0.017794 * SDIareas[i].area_x);
		Estim_ang[i].pitch = (0.981646 * Acc_ang[i].pitch) + (0.018354 * SDIareas[i].area_y);
	}
	//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
}

void Gyro_Integration_Test()
{
	int k;
	int i;
	for(i = 0; i < 2; i++)
	{
		for(k = 0; k < 10; k++)
		{
			Gyro_integral[i].area_x += ((Gyro_data[i].x[k]) * 1/gyro_fs);
			Gyro_integral[i].area_y += ((Gyro_data[i].y[k]) * 1/gyro_fs);
			Gyro_integral[i].area_z += ((Gyro_data[i].z[k]) * 1/gyro_fs);
		}
	}
}


void EMG_Data_Reception()
{
	if(HAL_UART_Receive(&huart3, (uint8_t*)rx_data, sizeof(rx_data), HAL_MAX_DELAY) == HAL_OK)
	{
		//CDC_Transmit_FS((uint8_t*)rx_data, strlen(rx_data));
		AppendToFile(emg_log_path, sizeof(emg_log_path), (char*)rx_data, sizeof(rx_data));
	}

	else
	{
		BlinkLED(200, 5);
	}
}

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
